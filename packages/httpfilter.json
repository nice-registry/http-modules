{"name":"httpfilter","version":"0.1.1","description":"To filter http requests before trying to process it at all","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["filter","http","requests"],"license":"MIT","repository":"https://github.com/Subomi/httpfilter","homepage":"https://github.com/Subomi/httpfilter#readme","gitHead":"2dff89008dc1f7838b5abf3de79e2417a325f009","versions":[{"number":"0.1.0","date":"2016-08-28T06:39:01.934Z"},{"number":"0.1.1","date":"2016-08-28T06:48:25.245Z"}],"readme":"# filter\r\n\r\nA filter middleware to filter http requests, and block some unwanted requests type.\r\n\r\n## Installation \r\n\r\n```sh\r\n$ npm install httpfilter\r\n```\r\n\r\n\r\n## API\r\nThere are two major ways to use the filter API.\r\n\r\n### Configure Model\r\n```js\r\n\r\nvar filter = require('httpfilter');\r\n\r\nfilter(serverOptions)\r\n```\r\n#### filter(serverOptions)\r\n\r\nReturns an Object that would be ready to filter on a call to .start(). It would recieved the request, response and next args and run filter. E.g filter.start(request, response, next); IT integrates into expressjs to call next for the next middleware\r\n\r\n### On-the-fly Model\r\n```js\r\n\r\nvar filter = require('filter');\r\n```\r\n\r\n#### filter(request, response, serverOptions, next)\r\n\r\nDoes not return any object, it passes the serverOptions directly to the middleware call and off they go into processing\r\n\r\n\r\n### serverOptions \r\nThis is a plain object containing strictly the following\r\n\r\n#### versions\r\nThis contains an array of strings containing http versions allowed on this server e.g\r\n```js\r\n\tversions: [\"1.0\", \"1.1\"] // this server does not support http2\r\n```\r\n\r\n#### allow\r\nThis contains an array of strings containing http methods allowed on this server e.g\r\n```js\r\n\tallow: [\"GET\", \"POST\"] // this server does allows only GET and POST methods\r\n```\r\n\r\n#### proxy\r\nThis identifies a proxying requests and allows or denies them depending on the value of proxy property. The value options are: allow, less-strict, deny\r\n```js\r\n\tproxy: \"deny\" // this server does not support http2\r\n```\r\n##### allow \r\nThis does not put any restriction. But allows any form of proxying take place, e.g proxying to another machine, or host number.\r\n\r\n##### less-strict\r\nThis restricts proxying to an external machine, but not proxying to the same machine, but on different ports.\r\n\r\n##### deny\r\nThis restricts every form of proxying both to an external machince, and even internal proxying\r\n\r\n#### hostname\r\nThis is a string contains the virtual hostname. To parse against the hostname, when running a number on virtual hosts on the same machine.\r\n```js\r\n\thostname: \"localhost\" // this server supports requests from localhost only.\r\n```\r\n\r\n#### alias\r\nThis is a string containing hostname aliases seperated by \" \". Used for detailed checking of the hostname field\r\n```js\r\n\talias: \"home filter\" // alias used to add more options for hostname test above\r\n```\r\n\r\n#### ip \r\nThis is used to check for proxying requests. ip is a string in numeric form. \r\n```js\r\n\tip: \"127.0.0.1\" // this server restricts requests not sent to localhost, when proxy is set to deny\r\n```\r\n\r\n## Examples\r\nUsing expressjs\r\n\r\n### Configure Model\r\n\r\n```js\r\n\r\nvar filter = require('filter');\r\nvar express = require('express');\r\n\r\nvar app = express();\r\n\r\nfilter = filter(serverOptions)\r\n\r\napp.use(filter);\r\n\r\n```\r\n### On-the-fly Model\r\n\r\n```js\r\nvar filter = require('filter');\r\nvar express = require('express');\r\n\r\nvar app = express();\r\nvar serverOptions = {};\r\n\r\napp.use(function(req, res, next) {\r\n\tfilter(req, res, serverOptions, next);\r\n})\r\n```\r\n\r\n\r\n## Tests\r\nThere are no tests ... coming soon.\r\n\r\n## License \r\n\r\n[MIT](LICENSE)\r\n","created":"2016-08-28T06:39:01.934Z","modified":"2016-08-28T06:48:25.245Z","lastPublisher":{"name":"subomi","email":"subomioluwalana71@gmail.com"},"owners":[{"name":"subomi","email":"subomioluwalana71@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"httpfilter","_nodeVersion":"4.4.4","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/httpfilter-0.1.1.tgz_1472366904226_0.31570800859481096"},"_npmUser":{"name":"subomi","email":"subomioluwalana71@gmail.com"},"_npmVersion":"2.15.1","_rev":"1-841445f94040a4cb3f5f172ffafe4dc6","_shasum":"455667d1450a83f2283cf1754762529ce3b20924","author":{"name":"Subomi Oluwalana"},"bugs":{"url":"https://github.com/Subomi/httpfilter/issues"},"directories":{},"dist-tags":{"latest":"0.1.1"},"dist":{"shasum":"455667d1450a83f2283cf1754762529ce3b20924","tarball":"http://registry.npmjs.org/httpfilter/-/httpfilter-0.1.1.tgz"},"maintainers":[{"name":"subomi","email":"subomioluwalana71@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-08-28T06:48:25.245Z","created":"2016-08-28T06:39:01.934Z","0.1.0":"2016-08-28T06:39:01.934Z","0.1.1":"2016-08-28T06:48:25.245Z"}}}