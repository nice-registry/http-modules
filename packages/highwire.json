{"name":"highwire","version":"1.1.6","description":"A high level HTTP client","main":"lib/index.js","scripts":{"lint":"eslint .","test:ci":"npm run lint && npm run test:coverage","test":"tape -r babel-register src/**/*.test.js","test:coverage":"istanbul cover tape -- -r babel-register src/**/*.test.js","compile":"rimraf dist && babel src --out-dir lib","dev":"rimraf dist && babel src --out-dir lib -w"},"repository":"https://github.com/kkemple/highwire","keywords":["http","bluebird","promises","requests","network","api","client","request","superagent","highwire","network","requests"],"license":"MIT","homepage":"https://github.com/kkemple/highwire#readme","devDependencies":{"babel-cli":"^6.10.1","babel-core":"^6.10.4","babel-preset-es2015":"^6.9.0","babel-register":"^6.9.0","eslint":"^2.13.1","eslint-config-airbnb":"^9.0.1","eslint-plugin-import":"^1.10.0","eslint-plugin-jsx-a11y":"^1.5.3","eslint-plugin-react":"^5.2.2","istanbul":"^1.0.0-alpha.2","nock":"^8.0.0","rimraf":"^2.5.2","tape":"^4.6.0"},"dependencies":{"superagent":"^2.0.0"},"gitHead":"4f1d0d5b064e1d5c5f6c6c1e25a895b4b717c69f","versions":[{"number":"0.0.1","date":"2016-04-16T21:13:23.631Z"},{"number":"1.0.0","date":"2016-04-16T21:22:23.346Z"},{"number":"1.0.1","date":"2016-04-16T21:28:27.441Z"},{"number":"1.0.2","date":"2016-04-16T23:45:13.363Z"},{"number":"1.1.2","date":"2016-04-17T01:45:52.921Z"},{"number":"1.1.3","date":"2016-04-17T22:27:16.473Z"},{"number":"1.1.4","date":"2016-07-01T15:24:25.042Z"},{"number":"1.1.5","date":"2016-07-01T16:23:50.779Z"},{"number":"1.1.6","date":"2016-07-01T17:05:00.724Z"}],"readme":"# Highwire\n\nHigh level HTTP methods that are easy to build upon.\n\n[![Code Climate](https://codeclimate.com/github/kkemple/highwire/badges/gpa.svg)](https://codeclimate.com/github/kkemple/highwire)\n[![Test Coverage](https://codeclimate.com/github/kkemple/highwire/badges/coverage.svg)](https://codeclimate.com/github/kkemple/highwire/coverage)\n[![Issue Count](https://codeclimate.com/github/kkemple/highwire/badges/issue_count.svg)](https://codeclimate.com/github/kkemple/highwire)\n[![Circle CI](https://circleci.com/gh/kkemple/highwire.svg?style=svg)](https://circleci.com/gh/kkemple/highwire)\n\n## Reasoning\n[Superagent](https://visionmedia.github.io/superagent/) is a fantastic module, but I find that I generally need to wrap it up for use in a more functional approach. `Highwire` provides this functional approach through simple HTTP methods that work great for building complex network layers, or just to make syncing your React components easier. They are meant to be wrapped in higher order functions to build complex network logic.\n\n## API\nHighwire exposes an object with RESTful HTTP methods. Those methods are:\n\n### get(url [, options: { headers, query } ])\n\n  - url: full url of request\n  - options:\n    - headers: object of headers to attatch to request\n    - query: object of query parameters to attach to request (DO NOT USE: if url contains query params)\n    - timeout: cancel request after specified timeout (throws Error)\n\n```javascript\nimport { get } from 'highwire'\nimport { User } from './models'\n\nconst headers = { authorization: 'token <token>' }\nconst query = { sortOrder: 'desc' }\nconst timeout = 3000\n\nget('/users', { headers, query, timeout })\n  .then((response) => response.body)\n  .then((body) => JSON.parse(body))\n  .then((users) => console.log(users))\n  .catch((err) => console.log(err))\n```\n\n### post(url, data [, options: { headers, query } ])\n\n  - url: full url of request\n  - data: body to send with request\n  - options:\n    - headers: object of headers to attatch to request\n    - query: object of query parameters to attach to request (DO NOT USE: if url contains query params)\n    - timeout: cancel request after specified timeout (throws Error)\n    - progress: function that is called on progress event of request; returns: `{ direction: string, lengthComputable: boolean, loaded: number, total: number }`\n\n```javascript\nimport { post } from 'highwire'\nimport { User } from './models'\n\nconst headers = { authorization: 'token <token>' }\nconst timeout = 3000\nconst progress = (event) => console.log(event.loaded))\nconst user = new User({ name: 'highwire' })\n\npost('/users', user.toJSON(), { headers, timeout, progress })\n  .then((response) => response.body)\n  .then((body) => JSON.parse(body))\n  .then((user) => console.log(user))\n  .catch((err) => console.log(err))\n```\n\n### put(url, data [, options: { headers, query } ])\n\n  - url: full url of request\n  - data: body to send with request\n  - options:\n    - headers: object of headers to attatch to request\n    - query: object of query parameters to attach to request (DO NOT USE: if url contains query params)\n    - timeout: cancel request after specified timeout (throws Error)\n\n```javascript\nimport { put } from 'highwire'\nimport { User } from './models'\n\nconst headers = { authorization: 'token <token>' }\nconst timeout = 3000\n\nUser.find({ name: 'highwire' })\n  .then((user) => user.addScope('some-action'))\n  .then((user) => put(`/users/${user.id}`, user.toJSON(), { headers, timeout }))\n  .then((response) => response.body)\n  .then((body) => JSON.parse(body))\n  .then((user) => console.log(user))\n  .catch((err) => console.log(err))\n```\n\n### patch(url, data [, options: { headers, query } ])\n\n  - url: full url of request\n  - data: body to send with request\n  - options:\n    - headers: object of headers to attatch to request\n    - query: object of query parameters to attach to request (DO NOT USE: if url contains query params)\n    - timeout: cancel request after specified timeout (throws Error)\n\n```javascript\nimport { patch } from 'highwire'\nimport { User } from './models'\n\nconst headers = { authorization: 'token <token>' }\nconst timeout = 3000\n\nUser.find({ name: 'highwire' })\n  .then((user) => user.addScope('some-action'))\n  .then((user) => patch(`/users/${user.id}`, user.toJSON(), { headers, timeout }))\n  .then((response) => response.body)\n  .then((body) => JSON.parse(body))\n  .then((user) => console.log(user))\n  .catch((err) => console.log(err))\n```\n\n### del(url, [, options: { headers, query } ])\n\n  - url: full url of request\n  - options:\n    - headers: object of headers to attatch to request\n    - query: object of query parameters to attach to request (DO NOT USE: if url contains query params)\n    - timeout: cancel request after specified timeout (throws Error)\n\n```javascript\nimport { del } from 'highwire'\nimport { User } from './models'\n\nconst headers = { authorization: 'token <token>' }\nconst timeout = 3000\n\nUser.find({ name: 'highwire' })\n  .then((user) => del(`/users/${user.id}`, { headers, timeout }))\n  .then(() => console.log('user deleted'))\n  .catch((err) => console.log(err))\n```\n\n### multipart(url, { meta: fields, attachments } [, options: { headers, query, progress }])\n\n- url: full url of request\n- meta:\n  - fields[[name, value]] any form fields to attach to request\n  - attachments[[name, path, filename]]: any attachments to attach to request\n    - [superagent docs](https://visionmedia.github.io/superagent/#multipart-requests)\n- options:\n  - headers: object of headers to attatch to request\n  - query: object of query parameters to attach to request (DO NOT USE: if url contains query params)\n  - timeout: cancel request after specified timeout (throws Error)\n  - progress: function that is called on progress event of request; returns: `{ direction: string, lengthComputable: boolean, loaded: number, total: number }`\n\n```javascript\nconst attachments = [\n  ['profile', './tmp/profile.jpg'],\n]\nconst progress = (event) => console.log(event)\nconst timeout = 5000\n\nUser.find({ name: 'highwire' })\n  .then((user) =>\n    multipart(\n      `/users/${user.id}/profile`,\n      { attachments },\n      { progress, timeout },\n    )\n  .then((response) => JSON.parse(response.body))\n  .then((data) => console.log(data))\n  .catch((err) => console.log(err))\n```\n","created":"2016-04-16T21:13:23.631Z","modified":"2016-07-01T17:05:00.724Z","lastPublisher":{"name":"kkemple","email":"kurtiskemple@gmail.com"},"owners":[{"name":"kkemple","email":"kurtiskemple@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"highwire","_nodeVersion":"5.0.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/highwire-1.1.6.tgz_1467392698617_0.8919079329352826"},"_npmUser":{"name":"kkemple","email":"kurtiskemple@gmail.com"},"_npmVersion":"3.3.9","_rev":"1-caa870f541768de937665b630ac30ec8","_shasum":"3e82f0918ed38eeb6d979f3c506577160282ad44","author":{"name":"kurtiskemple@gmail.com"},"bugs":{"url":"https://github.com/kkemple/highwire/issues"},"directories":{},"dist-tags":{"latest":"1.1.6"},"dist":{"shasum":"3e82f0918ed38eeb6d979f3c506577160282ad44","tarball":"http://registry.npmjs.org/highwire/-/highwire-1.1.6.tgz"},"maintainers":[{"name":"kkemple","email":"kurtiskemple@gmail.com"}],"readmeFilename":"readme.md","time":{"modified":"2016-07-01T17:05:00.724Z","created":"2016-04-16T21:13:23.631Z","0.0.1":"2016-04-16T21:13:23.631Z","1.0.0":"2016-04-16T21:22:23.346Z","1.0.1":"2016-04-16T21:28:27.441Z","1.0.2":"2016-04-16T23:45:13.363Z","1.1.2":"2016-04-17T01:45:52.921Z","1.1.3":"2016-04-17T22:27:16.473Z","1.1.4":"2016-07-01T15:24:25.042Z","1.1.5":"2016-07-01T16:23:50.779Z","1.1.6":"2016-07-01T17:05:00.724Z"}}}