{"name":"wundergrounded","version":"0.1.4","description":"A Node.js module that wraps Weather Underground API's in a flexible, easy-to-use interface. Offers optional request bundling, rate limiting, and caching of responses (all in the name of cutting down on the overall number of HTTP requests).","main":"lib/wundergrounded.js","repository":"https://github.com/patrickvalle/wundergrounded","keywords":["wunderground","api","weather","underground"],"license":"ISC","homepage":"https://github.com/patrickvalle/wundergrounded","devDependencies":{"chai":"^2.2.0","mocha":"^2.2.4"},"dependencies":{"limiter":"^1.0.5","node-cache":"^2.1.1","request":"^2.55.0"},"gitHead":"9e88f826111068b831b3a2e21a3b246a65503d97","scripts":{},"versions":[{"number":"0.1.0","date":"2015-05-13T00:37:34.978Z"},{"number":"0.1.1","date":"2015-05-13T00:50:50.862Z"},{"number":"0.1.2","date":"2015-05-13T00:56:13.353Z"},{"number":"0.1.3","date":"2015-05-13T01:00:05.917Z"},{"number":"0.1.4","date":"2015-06-05T16:48:46.240Z"}],"readme":"# Wundergrounded\r\n\r\nA Node.js module that wraps Weather Underground API's in a flexible, easy-to-use interface. Offers optional request bundling, rate limiting, and caching of responses (all in the name of cutting down on the overall number of HTTP requests). \r\n\r\nHeavily inspired by [wundernode](https://github.com/evalcrux/wundernode) and [wundergroundnode](https://github.com/cendrizzi/wundergroundnode).\r\n\r\n\r\n<br>\r\n## Installation\r\n\r\n```npm install wundergrounded --save```\r\n\r\n\r\n<br>\r\n## Usage\r\n\r\n### Initialization\r\n\r\n```javascript\r\nvar Wundergrounded = require('wundergrounded');\r\nvar wundergrounded = new Wundergrounded();\r\n```\r\n\r\nInterested in **caching** responses from Weather Underground?\r\n```javascript\r\nvar Wundergrounded = require('wundergrounded');\r\n// Configure a new instance with default caching values\r\nvar wundergrounded = new Wundergrounded().cache();\r\n```\r\n\r\nWhat about **rate limiting** the number of requests your app will make to the Weather Underground API?\r\n```javascript\r\nvar Wundergrounded = require('wundergrounded');\r\n// Configure a new instance with default limit values\r\nvar wundergrounded = new Wundergrounded().limit();\r\n```\r\n\r\nBut I'd like to do **both**.\r\n```javascript\r\nvar Wundergrounded = require('wundergrounded');\r\n// Configure a new instance with caching and limiting enabled\r\nvar wundergrounded = new Wundergrounded().cache().limit();\r\n```\r\n\r\n### Getting data\r\n\r\n**Making a request for a single feature** can be done similar to what's below (current conditions for 27705):\r\n```javascript\r\nwundergrounded.conditions('27705', function(error, response) {\r\n  if(!error) {\r\n  \t// do something with the response\r\n  } else {\r\n    // handle the error\r\n  }\r\n});\r\n```\r\n\r\n**Making a bundled request for multiple features** and a specific location can be done by similar to the syntax below (current conditions, hourly forecast, and the 10-day forecast for 27705):\r\n```javascript\r\nwundergrounded.conditions().hourly().forecast10day().request('27705', function(error, response) {\r\n  if(!error) {\r\n  \t// do something with the response\r\n  } else {\r\n    // handle the error\r\n  }\r\n});\r\n```\r\n\r\n\r\n<br>\r\n## API docs\r\n\r\n#### Initialization functions\r\n\r\n  * **apiKey(apiKey)**\r\n    Configures your Wundergrounded client to use the provided API key. By default, Wundergounded will try to read your API key from the ```WUNDERGROUND_API_KEY``` environment variable.\r\n    * *apiKey* - Your Weather Underground API key\r\n  \r\n  \r\n  * **cache([secondsInCache], [secondsBetweenChecks])**\r\n    Configures your Wundergrounded client to cache responses that are received from the Weather Underground API.\r\n    * *secondsInCache* - (optional) Number of seconds to keep responses in the cache. Defaults to 300.\r\n    * *secondsBetweenChecks* - (optional) Number of seconds between eviction checks. Defaults to 30.\r\n  \r\n  \r\n  * **limit([numberPer], [timePeriod])**\r\n    Configures your Wundergrounded client to limit the number of requests it makes to the Weather Underground API. This uses [limiter](https://github.com/jhurliman/node-rate-limiter) under the hood and accepts similar parameters.\r\n    * *numberPer* - (optional) Number of requests to make per the specified time period. Defaults to 10.\r\n    * *timePeriod* - (optional) The time period to use when limiting (i.e. 'second', 'minute', 'hour', 'day'). Defaults to 'minute'.\r\n  \r\n\r\n#### Feature functions\r\n\r\n\r\n**Note:** All of Wundergrounded's \"feature functions\" that retrieve Weather Underground API data are chainable. All chained API calls get bundled together on one request, which reduces overall network traffic (and, consequently, the number of requests you make to Weather Underground.) You can read more about combining requests from [Weather Underground's API docs](http://www.wunderground.com/weather/api/d/docs?d=data/index#standard_request_url_format), or see an example of this chainability above in the \"Making a bundled request for multiple features\" section.\r\n\r\n\r\n**Note:** Only supply the ```query``` and ```callback``` parameters to these functions if you don't plan on chaining (bundling) requests.\r\n\r\n\r\n  * **alerts([query], [callback])**\r\n    Refer to Weather Underground's [alerts](http://www.wunderground.com/weather/api/d/docs?d=data/alerts) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n\r\n  * **almanac([query], [callback])**\r\n    Refer to Weather Underground's [almanac](http://www.wunderground.com/weather/api/d/docs?d=data/almanac) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n\r\n  * **astronomy([query], [callback])**\r\n    Refer to Weather Underground's [astronomy](http://www.wunderground.com/weather/api/d/docs?d=data/astronomy) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n\r\n  * **conditions([query], [callback])**\r\n    Refer to Weather Underground's [conditions](http://www.wunderground.com/weather/api/d/docs?d=data/conditions) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n\r\n  * **currenthurricane([query], [callback])**\r\n    Refer to Weather Underground's [currenthurricane](http://www.wunderground.com/weather/api/d/docs?d=data/currenthurricane) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n\r\n  * **forecast([query], [callback])**\r\n    Refer to Weather Underground's [forecast](http://www.wunderground.com/weather/api/d/docs?d=data/forecast) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n\r\n  * **forecast10day([query], [callback])**\r\n    Refer to Weather Underground's [forecast10day](http://www.wunderground.com/weather/api/d/docs?d=data/forecast10day) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n\r\n  * **geolookup([query], [callback])**\r\n    Refer to Weather Underground's [geolookup](http://www.wunderground.com/weather/api/d/docs?d=data/geolookup) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n\r\n  * **history(date, [query], [callback])**\r\n    Refer to Weather Underground's [history](http://www.wunderground.com/weather/api/d/docs?d=data/history) documentation for info on this feature.\r\n    * *date* - The [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) for which to retrieve history information\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n\r\n  * **hourly([query], [callback])**\r\n    Refer to Weather Underground's [hourly](http://www.wunderground.com/weather/api/d/docs?d=data/hourly) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n    \r\n  * **hourly10day([query], [callback])**\r\n    Refer to Weather Underground's [hourly10day](http://www.wunderground.com/weather/api/d/docs?d=data/hourly10day) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n    \r\n  * **planner(start, end, [query], [callback])**\r\n    Refer to Weather Underground's [planner](http://www.wunderground.com/weather/api/d/docs?d=data/planner) documentation for info on this feature.\r\n    * *start* - The start [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)\r\n    * *end* - The end [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n    \r\n  * **rawtide([query], [callback])**\r\n    Refer to Weather Underground's [rawtide](http://www.wunderground.com/weather/api/d/docs?d=data/rawtide) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n    \r\n  * **satellite([query], [callback])**\r\n    Refer to Weather Underground's [satellite](http://www.wunderground.com/weather/api/d/docs?d=data/satellite) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n    \r\n  * **tide([query], [callback])**\r\n    Refer to Weather Underground's [tide](http://www.wunderground.com/weather/api/d/docs?d=data/tide) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n    \r\n  * **webcams([query], [callback])**\r\n    Refer to Weather Underground's [webcams](http://www.wunderground.com/weather/api/d/docs?d=data/webcams) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n    \r\n  * **yesterday([query], [callback])**\r\n    Refer to Weather Underground's [yesterday](http://www.wunderground.com/weather/api/d/docs?d=data/yesterday) documentation for info on this feature.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n    \r\n  * **request(query, callback)**\r\n    Function for actually \"firing\" off an HTTP request to the Weather Underground API- used when chaining (bundling) multiple features on one call. An example of it being used can be found in the \"Making a bundled request for multiple features\" section above.\r\n    * *query* - (optional) The query to send to the Weather Underground API.\r\n    * *callback* - (optional) A callback function to invoke once a response is received.\r\n\r\n\r\n<br>\r\n## Release history\r\n\r\n  * 0.1.4 Fixing race condition in limited requests\r\n  * 0.1.3 Minor updates to README\r\n  * 0.1.0 Initial release\r\n","created":"2015-05-13T00:37:34.978Z","modified":"2015-06-05T16:48:46.240Z","lastPublisher":{"name":"patrickvalle","email":"npm@patrickvalle.com"},"owners":[{"name":"patrickvalle","email":"npm@patrickvalle.com"}],"other":{"_attachments":{},"_from":".","_id":"wundergrounded","_nodeVersion":"0.12.2","_npmUser":{"name":"patrickvalle","email":"npm@patrickvalle.com"},"_npmVersion":"2.7.4","_rev":"1-4c703d0ba3aee3edadcf9c042de74059","_shasum":"7c9ae006c5f3c658285071940b8d232c47cb7f27","author":{"name":"Patrick","email":"git@patrickvalle.com"},"bugs":{"url":"https://github.com/patrickvalle/wundergrounded/issues"},"directories":{},"dist-tags":{"latest":"0.1.4"},"dist":{"shasum":"7c9ae006c5f3c658285071940b8d232c47cb7f27","tarball":"http://registry.npmjs.org/wundergrounded/-/wundergrounded-0.1.4.tgz"},"maintainers":[{"name":"patrickvalle","email":"npm@patrickvalle.com"}],"readmeFilename":"README.md","time":{"modified":"2015-06-05T16:48:46.240Z","created":"2015-05-13T00:37:34.978Z","0.1.0":"2015-05-13T00:37:34.978Z","0.1.1":"2015-05-13T00:50:50.862Z","0.1.2":"2015-05-13T00:56:13.353Z","0.1.3":"2015-05-13T01:00:05.917Z","0.1.4":"2015-06-05T16:48:46.240Z"}}}