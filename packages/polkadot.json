{"name":"polkadot","version":"0.1.0","description":"Extremely fast async HTTP microservices","license":"MIT","repository":"https://github.com/lukeed/polkadot","bin":{"polkadot":"cli.js"},"engines":{"node":">=4"},"scripts":{"test":"xo && NODE_ENV=test nyc ava"},"files":["index.js","cli.js","fn.js"],"keywords":["cli","cli-app","microservice","service","micro","api"],"dependencies":{"bluebird":"^3.4.7","clean-stack":"^1.1.1","isstream":"^0.1.2","media-typer":"^0.3.0","minimist":"^1.2.0","raw-body":"^2.2.0"},"devDependencies":{"ava":"^0.15.2","nyc":"^7.1.0","request-promise":"^4.1.1","resumer":"^0.0.0","test-listen":"^1.0.1","then-sleep":"^1.0.1","xo":"^0.16.0"},"ava":{"failFast":true},"xo":{"esnext":true,"ignores":["benchmarks/**","test/**"],"rules":{"no-mixed-operators":0,"xo/no-process-exit":1,"import/order":0,"curly":1}},"gitHead":"098683f2618d5996832845881767dc6938f0c6cf","homepage":"https://github.com/lukeed/polkadot#readme","versions":[{"number":"0.0.0","date":"2017-02-08T08:57:42.123Z"},{"number":"0.1.0","date":"2017-02-11T20:26:59.900Z"}],"readme":"# polkadot [![Build Status](https://travis-ci.org/lukeed/polkadot.svg?branch=master)](https://travis-ci.org/lukeed/polkadot)\n\n> Async HTTP microservices\n\nPolkadot is **heavily** inspired by [`micro`](https://github.com/zeit/micro). In fact, most of the code is the same!\nThe only reason `polkadot` exists as a separate module is because it uses [Bluebird](https://github.com/petkaantonov/bluebird) to power its runtime, while `micro` strives for a purely native implementation.\n\nOne day (soon?!), Node's native `Promise` will be as fast as Bluebird's version.\nUntil then, `polkadot` will continue to be [much, **much** faster](https://github.com/lukeed/polkadot/blob/master/benchmarks/readme.md) than `micro`!\n\n## Install\n\n```\n$ npm install --save polkadot\n```\n\n\n## Usage\n\nThe simplest way to use `polkadot` is through its [CLI](#cli). To do this, simply:\n\n1. Define a `start` script within `package.json`:\n\n  ```js\n  {\n    \"main\": \"index.js\",\n    \"scripts\": {\n      \"start\": \"polkadot\"\n    }\n  }\n  ```\n\n2. Create an `index.js` file & define the core function:\n\n  ```js\n  module.exports = function * (req, res) {\n    return 'Hello world!';\n  };\n  ```\n\n3. Finally, start the server & open `http://localhost:3000` in your browser!\n\n  ```sh\n  $ npm start\n  ```\n\n### Programmatic\n\nAlternatively, you may require `polkadot` directly for programmatic use.\n\n```js\n// server.js\nconst sleep = require('then-sleep');\nconst polkadot = require('polkadot');\n\npolkadot(function * (req, res) {\n  yield sleep(500);\n  return 'Hello!';\n}).listen(3000);\n```\n\nThis server can be initialized by passing the filename to `node`:\n\n```sh\n$ node server.js\n```\n\n###\n\n\n## API\n\n### polkadot(fn)\nType: `GeneratorFunction`<br>\nReturn: `http.Server`\n\nThe main function to be run by `polkadot`. Returns a [`http.Server`](https://nodejs.org/dist/latest-v6.x/docs/api/http.html#http_class_http_server) that uses the provided function as the request handler.\n\nSee [Programmatic Use](#programmatic) for an example.\n\n### polkadot.send(res, code, data)\nSee [`micro.send`](https://github.com/zeit/micro#api-1).\n\n### polkadot.json(req, opts)\nSee [`micro.json`](https://github.com/zeit/micro#api). Can be `yield`ed.\n\n### polkadot.sendError(req, res, error)\nSee [`micro.sendError`](https://github.com/zeit/micro#api-3).\n\n### polkadot.createError(code, msg, error)\nSee [`micro.createError`](https://github.com/zeit/micro#api-3).\n\n\n## CLI\n\n```\n$ polkadot --help\n\n  Usage\n    $ polkadot [options] <file>\n\n  Options\n    -h, --host   Host to listen on [Default: 0.0.0.0]\n    -p, --port   Port to listen on [Default: 3000]\n        --help   Display this help\n\n  Examples\n    $ polkadot server.js\n    $ polkadot server.js --port 8080\n```\n\n#### file\nDefault: `index.js`\n\nWhen using the CLI _without_ defining a `file`, your `package.json` (if exists) will be parsed & its `main` value will be used. See [example](#usage).\nIf a `package.json` does not exist, or it does not specify a `main` entry, then a root-level `index.js` is assumed.\n\n> **Note:** An error will be thrown if this file also doesn't exist.\n\n\n## Error Handling\n\nMicro's [error-handling documentation](https://github.com/zeit/micro#error-handling) is great & directly applies to Polkadot. Nothing more to add :)\n\n\n## From `micro` to `polkadot`\n\nPolkadot stands on `micro`'s successful shoulders.\n\nThe code is largely the same, with the exception of _how_ the Promises are formed & handled during runtime. This also means the API is the same!\n\nMigration from `micro` to `polkadot` is very simple:\n\n1. Replace all instances of \"micro\" with \"polkadot\"\n\n  ```js\n  // old\n  const micro = require('micro');\n  const { send } = require('micro');\n  micro.json(...);\n\n  // new\n  const polkadot = require('polkadot');\n  const { send } = require('polkadot');\n  polkadot.json(...);\n  ```\n\n2. Leave all API usage alone: `send`, `json`, `sendError`, `createError`\n\n  ```js\n  // old\n  micro.json(...);\n  micro.send(...);\n\n  // new\n  polkadot.json(...);\n  polkadot.send(...);\n  ```\n\n3. Replace all instances of `await` with `yield`.\n\n  ```js\n  const sleep = require('then-sleep');\n\n  // old\n  module.exports = async (req, res) => {\n    await sleep(500); // <-- here\n    return 'Ready!';\n  }\n\n  // new\n  module.exports = async (req, res) => {\n    yield sleep(500); // <-- here\n    return 'Ready!';\n  }\n  ```\n\n4. Replace all instances of `async function` with `function*`.\n\n  ```js\n  const sleep = require('then-sleep');\n\n  // old\n  module.exports = async (req, res) => { // <-- here\n    yield sleep(500);\n    return 'Ready!';\n  }\n\n  // new\n  module.exports = function * (req, res) { // <-- here\n    yield sleep(500);\n    return 'Ready!';\n  }\n  ```\n\n## License\n\nMIT Â© [Luke Edwards](https://lukeed.com)\n","created":"2017-02-08T08:57:42.123Z","modified":"2017-02-11T20:26:59.900Z","lastPublisher":{"name":"lukeed","email":"luke@lukeed.com"},"owners":[{"name":"lukeed","email":"luke@lukeed.com"}],"other":{"_attachments":{},"_from":".","_id":"polkadot","_nodeVersion":"7.4.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/polkadot-0.1.0.tgz_1486844819667_0.3607501529622823"},"_npmUser":{"name":"lukeed","email":"luke@lukeed.com"},"_npmVersion":"4.0.5","_rev":"2-f63aeac1394418e1b6d18779641b98d2","_shasum":"b3a9b8c89fac821a3c75b116485f9a72a3cbac76","author":{"name":"Luke Edwards","email":"luke.edwards05@gmail.com","url":"lukeed.com"},"bugs":{"url":"https://github.com/lukeed/polkadot/issues"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"b3a9b8c89fac821a3c75b116485f9a72a3cbac76","tarball":"https://registry.npmjs.org/polkadot/-/polkadot-0.1.0.tgz"},"maintainers":[{"name":"lukeed","email":"luke@lukeed.com"}],"readmeFilename":"readme.md","time":{"modified":"2017-02-11T20:26:59.900Z","created":"2017-02-08T08:57:42.123Z","0.0.0":"2017-02-08T08:57:42.123Z","0.1.0":"2017-02-11T20:26:59.900Z"}}}