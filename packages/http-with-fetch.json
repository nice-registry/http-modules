{"name":"http-with-fetch","version":"1.1.2","private":false,"main":"dist/lib.js","description":"A tiny abstraction over fetch","license":"MIT","repository":"https://github.com/faizaanceg/http-with-fetch","keywords":["fetch","http"],"scripts":{"build":"webpack","prepublish":"webpack"},"devDependencies":{"babel-core":"^6.22.1","babel-loader":"^6.2.10","babel-plugin-transform-class-properties":"^6.22.0","babel-preset-es2015":"^6.22.0","webpack":"^2.2.0"},"gitHead":"8c2b843daa3b3a279f9e5e6b644751ef980dec00","homepage":"https://github.com/faizaanceg/http-with-fetch#readme","versions":[{"number":"0.1.0","date":"2016-06-27T05:43:29.386Z"},{"number":"0.1.1","date":"2016-06-27T06:16:45.963Z"},{"number":"1.0.0","date":"2016-08-18T05:41:26.346Z"},{"number":"1.1.0","date":"2017-01-25T17:31:24.025Z"},{"number":"1.1.1","date":"2017-01-26T01:05:28.039Z"},{"number":"1.1.2","date":"2017-01-26T04:35:41.357Z"}],"readme":"# http-with-fetch\nA tiny abstraction over the `fetch` API.\n\n## Description\n\n`http-with-fetch` provides an easier way to write APIs using `fetch`.\n\n## Installation\n\n```\nnpm i http-with-fetch --save\n```\n\n## Note\n\nThis library uses the native `fetch` if supported. You can pass a `fetch` polyfill if you are using this in an environment where native `fetch` isn't supported (for ex. node, old browsers)\n\n## Usage\n\nIntended to be used as a ES6 module ( `import` ) or using `require`.\n\n```\nimport HTTP from 'http-with-fetch'\nlet userService = new HTTP('/users', some-fetch-polyfill)\n```\n\n## Motivation\n\nConsider the following code\n```\nlet options = { mode: 'cors' }\n\nfetch('/resource/point1', options)\n\nfetch('/resource/point2', options)\n\nfetch('/resource/point3', options)\n  \nfetch('/resource/point4', options)\n```\n\nIf you were to do a POST at `/resource/point3`, then you can't reuse `options` in the fetch call and the code would then become\n\n```\nlet options = { mode: 'cors' }\n\nlet data = { 'some': 'data' }\n\nfetch('/resource/point1', options)\n\nfetch('/resource/point2', options)\n\nfetch('/resource/point3', {\n  mode: 'cors',\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json'\n  }\n  body: JSON.stringify(data)\n})\n  \nfetch('/resource/point4', options)\n```\n\nThis problem increases when each `fetch` does some common things and also its own specific stuff.\n\nWith `http-with-fetch` it can be rewritten as,\n\n```\nconst HTTP = require('http-with-fetch')\n\nlet http = new HTTP('/resource/')\n\nconst data = { 'some': 'data' }\n\nhttp.use(http.add('mode', 'cors'))\n\nhttp.get('point1')\n\nhttp.get('point2')\n\nhttp.post('point3', JSON.stringify(data), http.add('headers', {'content-type': 'application/json'}))\n\nhttp.get('point4')\n```\n\n# API\n\n## constructor(base: String, fetch: Fetch?)\n\nCreates a new object.\n\n| Arguments | Description |\n|---|---|\n| base | The base url of the resource. |\n| fetch | A Fetch polyfill. Only needed if the environment doesn't support `fetch` by default.|\n\n## add(key: String, val: String | Object)\n\nHelper method to create interceptors.\n\n## use(interceptor: Function)\n\nAdds an common interceptor. All requests will be intercepted by this.\n\n## method(url: String, type: String, verb: String, ...interceptors: Function[])\n\nMake a request.\n\n| Arguments | Description |\n|---|---|\n| url | The url of the resource (relative to the base URL) |\n| type | The response type. Can be one of `['json', 'text', 'formData', 'blob', 'arrayBuffer', 'none']`. Default is `json` |\n| verb  | HTTP method to use. Uppercase only. |\n| interceptors  | Interceptors specific to this request. |\n\n## get(url: String, type: String, ...interceptors: Function[])\n\nAn alias for `method` with `verb=GET`\n\n## post(url: String, data: Body, type: String, ...interceptors: Function[])\n\nAn alias for `method` with `verb=POST`\n\n| Arguments | Description |\n|---|---|\n| data | The body of the POST request |\n","starsCount":1,"created":"2016-06-27T05:43:29.386Z","modified":"2017-01-26T04:35:41.357Z","lastPublisher":{"name":"faizaanceg","email":"aulisius7@gmail.com"},"owners":[{"name":"faizaanceg","email":"aulisius7@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-with-fetch","_nodeVersion":"6.9.4","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/http-with-fetch-1.1.2.tgz_1485405339501_0.47996346512809396"},"_npmUser":{"name":"faizaanceg","email":"aulisius7@gmail.com"},"_npmVersion":"3.10.10","_rev":"4-2ed81483c4adf786e6006b2a9d5f4fb9","_shasum":"e4b4f6428c76c48dd9bed6af83a7e96c63ed5084","author":{"name":"N. Md Faizaan","email":"aulisius7@gmail.com"},"bugs":{"url":"https://github.com/faizaanceg/http-with-fetch/issues"},"directories":{},"dist-tags":{"latest":"1.1.2"},"dist":{"shasum":"e4b4f6428c76c48dd9bed6af83a7e96c63ed5084","tarball":"https://registry.npmjs.org/http-with-fetch/-/http-with-fetch-1.1.2.tgz"},"maintainers":[{"name":"faizaanceg","email":"aulisius7@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-01-26T04:35:41.357Z","created":"2016-06-27T05:43:29.386Z","0.1.0":"2016-06-27T05:43:29.386Z","0.1.1":"2016-06-27T06:16:45.963Z","1.0.0":"2016-08-18T05:41:26.346Z","1.1.0":"2017-01-25T17:31:24.025Z","1.1.1":"2017-01-26T01:05:28.039Z","1.1.2":"2017-01-26T04:35:41.357Z"},"users":{"faizaanceg":true}}}