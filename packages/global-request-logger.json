{"name":"global-request-logger","version":"0.1.1","description":"This module configures the http and https modules to raise logging events for every outgoing request.","keywords":["http","logger","global","request","mixin"],"homepage":"https://github.com/meetearnest/global-request-logger","main":"index.js","scripts":{"test":"mocha test/**/*.spec.js --reporter spec"},"engines":["node"],"repository":"https://github.com/meetearnest/global-request-logger","files":["index.js"],"license":"MIT","dependencies":{"lodash":"~2.4.1"},"devDependencies":{"mocha":"~1.21.4","chai":"~1.9.1","istanbul":"~0.3.0","sinon":"~1.10.3","nock":"~0.45.0"},"gitHead":"4fcdf5be9f20e1d0210094cce2c7f6e34bdc5703","versions":[{"number":"0.0.1","date":"2014-08-28T23:34:16.541Z"},{"number":"0.1.0","date":"2016-07-20T15:37:09.435Z"},{"number":"0.1.1","date":"2016-12-11T19:47:57.792Z"}],"readme":"# Node.js Global Request Logger [![Build Status](https://app.snap-ci.com/meetearnest/global-request-logger/branch/master/build_image)](https://app.snap-ci.com/meetearnest/global-request-logger/branch/master)\n\nThis module configures the [`http`](http://nodejs.org/api/http.html) and [`https`](http://nodejs.org/api/https.html) \nmodules to raise logging events for every outgoing http request.\n\nAny library or module that uses the default `http` and `https` modules will be captured. The primary use case is for \ncentrally adding logging to all outbound api calls to third-party services without needing to manipulate those modules.\n\nThe logger will capture request and response arguments as well as the body sent or received.\n\n## Example\n\nAn example log object for a call to `https://www.google.com`:\n\n**Request**\n```js\n{ protocol: 'https:',\n  slashes: true,\n  auth: null,\n  host: 'www.google.com',\n  port: null,\n  hostname: 'www.google.com',\n  hash: null,\n  search: null,\n  query: null,\n  pathname: '/',\n  path: '/',\n  href: 'https://www.google.com/',\n  method: 'GET',\n  headers: { host: 'www.google.com' },\n  body: '' \n}\n```\n\n**Response**\n```js\n{ statusCode: 200,\n  headers:\n   { date: 'Sun, 17 Aug 2014 20:03:02 GMT',\n     expires: '-1',\n     'cache-control': 'private, max-age=0',\n     'content-type': 'text/html; charset=ISO-8859-1',\n     'set-cookie':\n      [ 'PREF=ID=29ba00825c529e14:FF=0:TM=1408305782:LM=1408305782:S=7FwX1DADc9nIkUE1; expires=Tue, 16-Aug-2016 20:03:02 GMT; path=/; domain=.google.com',\n        'NID=67=qAT-ji1lswEweR4BMbdLhdZHczj54O6s-OSFgH_rcjXLpOtjej9OR8ADiptMVjARY1hTWPadfixc3lZkfX41XuLFKK_B2J-hsEFHEdxkiL2IAW_AUyZ1MDYUs-Z8_l8q; expires=Mon, 16-Feb-2015 20:03:02 GMT; path=/; domain=.google.com; HttpOnly' ],\n     p3p: 'CP=\"This is not a P3P policy! See http://www.google.com/support/accounts/bin/answer.py?hl=en&answer=151657 for more info.\"',\n     server: 'gws',\n     'x-xss-protection': '1; mode=block',\n     'x-frame-options': 'SAMEORIGIN',\n     'alternate-protocol': '443:quic',\n     'transfer-encoding': 'chunked' },\n  trailers: {},\n  httpVersion: '1.1',\n  url: '',\n  method: null,\n  body: '<!doctype html><html itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"en\">...</html>' }\n```\n \n# Usage\n \nTo enable logging events initialize the global logger:\n \n```js\nvar globalLog = require('global-request-logger');\nglobalLog.initialize();\n```\n\nThis will now raise `success` and `error` events for every http or https request:\n\n```js\nglobalLog.on('success', function(request, response) {\n  console.log('SUCCESS');\n  console.log('Request', request);\n  console.log('Response', response);\n});\n\nglobalLog.on('error', function(request, response) {\n  console.log('ERROR');\n  console.log('Request', request);\n  console.log('Response', response);\n});\n```\n\nYou may optionally disable logging using the `end` function:\n \n```\nglobalLog.end();\n```\n\n## Options\n\nThe `initialize` function accepts an options argument that can configure logging.\n \n- **maxBodyLength** - The maximum length (in bytes) to log for a request or response body.\n\n\n## Testing\n\nUnit tests are provided and can be run via `npm test`\n","starsCount":2,"created":"2014-08-28T23:34:16.541Z","modified":"2017-06-22T00:58:44.734Z","lastPublisher":{"name":"earnest-ci","email":"ci@meetearnest.com"},"owners":[{"name":"bromanko","email":"hello@bromanko.com"},{"name":"earnest-ci","email":"ci@meetearnest.com"}],"other":{"_attachments":{},"_from":".","_id":"global-request-logger","_nodeVersion":"6.0.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/global-request-logger-0.1.1.tgz_1481485676189_0.17620075470767915"},"_npmUser":{"name":"earnest-ci","email":"ci@meetearnest.com"},"_npmVersion":"3.10.10","_rev":"4-82c68e555a436823cd8fba2bad34bb80","_shasum":"839a126537031e33b7e1ac077608b4d7995b01fe","author":{"name":"Brian Romanko","email":"hello@bromanko.com","url":"http://bromanko.com"},"bugs":{"url":"https://github.com/meetearnest/global-request-logger/issues"},"directories":{},"dist-tags":{"latest":"0.1.1"},"dist":{"shasum":"839a126537031e33b7e1ac077608b4d7995b01fe","tarball":"http://registry.npmjs.org/global-request-logger/-/global-request-logger-0.1.1.tgz"},"maintainers":[{"name":"bromanko","email":"hello@bromanko.com"},{"name":"earnest-ci","email":"ci@meetearnest.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-22T00:58:44.734Z","created":"2014-08-28T23:34:16.541Z","0.0.1":"2014-08-28T23:34:16.541Z","0.1.0":"2016-07-20T15:37:09.435Z","0.1.1":"2016-12-11T19:47:57.792Z"},"users":{"swookie":true,"jsdnxx":true}}}