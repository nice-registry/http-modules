{"name":"tixfactory.http","version":"1.0.9014","description":"A promised based http module.","main":"index.js","repository":"https://github.com/tixfactory/NodeHttp","dependencies":{"cookiejar":"^2.1.1"},"scripts":{"start":"node server.js"},"homepage":"https://github.com/tixfactory/NodeHttp#readme","versions":[{"number":"1.0.0","date":"2017-05-07T00:22:16.837Z"},{"number":"1.0.1","date":"2017-05-07T05:13:46.201Z"},{"number":"1.0.2","date":"2017-05-07T20:10:19.625Z"},{"number":"1.0.3","date":"2017-05-07T20:17:28.444Z"},{"number":"1.0.4","date":"2017-05-07T22:43:58.498Z"},{"number":"1.0.5","date":"2017-05-07T23:07:54.149Z"},{"number":"1.0.6","date":"2017-05-12T04:27:03.154Z"},{"number":"1.0.7","date":"2017-05-14T23:49:11.501Z"},{"number":"1.0.8","date":"2017-05-29T21:53:38.523Z"},{"number":"1.0.9","date":"2017-05-29T22:24:55.045Z"},{"number":"1.0.901","date":"2017-05-29T22:30:11.936Z"},{"number":"1.0.9011","date":"2017-05-29T22:32:45.479Z"},{"number":"1.0.9012","date":"2017-05-29T22:58:21.430Z"},{"number":"1.0.9013","date":"2017-05-29T22:59:08.661Z"},{"number":"1.0.9014","date":"2017-06-12T04:52:22.070Z"}],"readme":"ï»¿# TixFactory.Http\r\n\r\n## Table of Contents\r\n\r\n- [Introduction](#introduction)\r\n- [Methods](#methods)\r\n- [Client: Request object](#client-request-object)\r\n- [Client: Response object](#client-response-object)\r\n- [Client: Making a request](#making-a-request)\r\n- [Client: Http configuration](#client-http-configuration)\r\n- [Client: Socket configuration](#client-socket-configuration)\r\n- [Server: Request object](#server-request-object)\r\n- [Server: Response object](#server-response-object)\r\n\r\n\r\n## Introduction\r\nThis is just an http module I made for personal use that I decided to make public, don't expect professional grade http requests.\r\nThis http module is mostly a dummy. It does not yet respect any headers, will not follow redirects, and will not allow setting the follow headers:\r\n* Content-Type\r\n* ^ Will include when requestBody is present - is set to requestBody.length\r\n* Host\r\n* ^ Will always be included as the host\r\nBut if it helps anyone that's great! Expect bad documentation.\r\n\r\nTypical installation, and module usage.\r\nTo install:\r\n```sh\r\n$ npm install tixfactory.http\r\n```\r\nTo use:\r\n```js\r\nvar http = require(\"tixfactory.http\");\r\nvar httpClient = new http.client(); // Everything happens from an individual client\r\n```\r\n\r\nWill auto-handle cookies, and accept-encoding.\r\n* ^ Documentation required\r\n\r\n\r\n## Methods\r\n```js\r\nvar http = require(\"tixfactory.http\");\r\n\r\nvar httpClient = new http.client();\r\nhttpClient.request(object requestData); // Returns promise: .then(function(response){ ... }).catch(function(errors){ ... });\r\nhttpClient.get(string url[, object queryParameters]); // Returns http.request preset with url, and queryParameters with method: GET\r\nhttpClient.post(string url, buffer requestBody); // Returns http.request with preset url, and requestBody with method: POST\r\nhttpClient.socketConfiguration([object configurationOverride]);\r\nhttpClient.configuration([object configurationOverride]);\r\n\r\nvar httpServer = new http.server(port);\r\n```\r\n\r\n\r\n## Client request object\r\n```js\r\n{\r\n\t\"url\": \"https://www.google.com\", // Required\r\n\t\"method\": \"GET\", // Required\r\n\t\"queryParameters\": {\"a\": \"b\"} // Optional\r\n\t\"port\": 80, // Optional, will also pull from url or default based on protocol\r\n\t\"isSecure\": true, // Optional, will default based on protocol (whether or not to use tls socket)\r\n\t\"requestHeaders\": [{name: \"Hello\", value: \"world\"}, ...], // Optional, also accepts object: {\"Hello\": \"world\"}\r\n\t\"requestBody\": Buffer // Optional\r\n\t\"cookieJar\": cookieJarObject // Optional - See: https://www.npmjs.com/package/cookiejar\r\n}\r\n```\r\n\r\n\r\n## Client response object\r\n```js\r\n{\r\n\t\"statusCode\": 400,\r\n\t\"statusText\": \"Bad Request\",\r\n\t\"headers\": [{name: \"Set-Cookie\", value: \"wat=who\"}, ...],\r\n\t\"body\": Buffer,\r\n\t\"contentType\": \"application/json\" // Semi-formatted Content-Type response header (when provided by server)\r\n\t\"responseJson\": {\"x\": \"y\"}, // Will be available if the contentType is Json, and it can be parsed from JSON.\r\n\t\"responseText\": \"{\\\"x\\\":\\\"y\\\"}\" // Will be available for some known UTF-8 types.\r\n}\r\n```\r\n\r\n\r\n## Making a request\r\n```js\r\nvar http = require(\"tixfactory.http\");\r\nvar httpClient = new http.client();\r\nhttpClient.request({\r\n\t\"method\": \"GET\"\r\n\t\"url\": \"https://www.roblox.com/profile?userId=48103520\"\r\n}).then(function(response){\r\n\tconsole.log(response.statusCode, response.statusText);\r\n\tconsole.log(response.responseJson);\r\n}).catch(function(errors){\r\n\tconsole.error(errors);\r\n});\r\n```\r\nThe same request can also be made with:\r\n```js\r\nvar http = require(\"tixfactory.http\");\r\nvar httpClient = new http.client();\r\nhttpClient.get(\"https://www.roblox.com/profile\", { userId: 48103520 }).then(function(response){\r\n\tconsole.log(response.statusCode, response.statusText);\r\n\tconsole.log(response.responseJson);\r\n}).catch(function(errors){\r\n\tconsole.error(errors);\r\n});\r\n```\r\n\r\n\r\n## Client http configuration\r\n```js\r\nvar http = require(\"tixfactory.http\");\r\nvar httpClient = new http.client();\r\nvar currentConfiguration = httpClient.configuration();\r\nconsole.log(currentConfiguration);\r\n```\r\n\r\nConfiguration object:\r\n```js\r\n{\r\n\t\"cookieJar\": cookieJarNpmObject,\r\n\t\"userAgent\": \"TixFactory.Http (node.js)\" // This will be added automatically to any requests that do not have a User-Agent request header. Can be overriden by just setting it.\r\n}\r\n```\r\n\r\nMostly works like socketConfiguration, may or may not right documentation for this method at some point.\r\n\r\n\r\n## Client socket configuration\r\nThis module allows for some configuration around sockets including throttling and socket limits.\r\nTo get current configuration settings:\r\n```js\r\nvar http = require(\"tixfactory.http\");\r\nvar httpClient = new http.client();\r\nvar currentConfiguration = httpClient.socketConfiguration();\r\nconsole.log(currentConfiguration);\r\n```\r\n\r\nCurrent configuration will look along the lines of:\r\n```js\r\n{\r\n\t\"expiration\": 30000, // How long a socket will remain open before closing from inactivity.\r\n\t\"timeoutBetweenQueueProcessing\": 50, // If a request is attempting to be made, but all the sockets are in use, and no more can be created: how long to wait before re-checking.\r\n\t\"getWritesPerSecond\": function(host, port), // This function should return how many writes per second the module is allowed to make per the arguments. Default returns 1000. MUST return number always.\r\n\t\"getMaxSockets\": function(host, port, isSecure) // This is how many sockets are allowed to be open per host (domain), port, and whether or not the socket type is tls. Defaults to 6. MUST return number always.\r\n}\r\n```\r\n\r\nTo set configuration:\r\n```js\r\nvar http = require(\"tixfactory.http\");\r\nvar httpClient = new http.client();\r\nhttpClient.socketConfiguration({\r\n\tgetWritesPerSecond: function(host, port){\r\n\t\t// example if host is Google, or port is 443 only one request per second is allowed.\r\n\t\tif (host === \"www.google.com\" || port === 443) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t// otherwise we can make 2 requests per second.\r\n\t\treturn 2;\r\n\t}\r\n})\r\n```\r\nYou only have to specify the fields you would like to override.\r\nFor best results: setting configuration should only be done when the process starts.\r\n\r\n\r\n## Server request object\r\nTODO: Document better\r\n```javascript\r\n{\r\n\t\"ip\": \"127.0.0.1\", // The remote IP address\r\n\t\"method\": \"GET\", // The request method\r\n\t\"headers\": [{name: \"Hello\", value: \"world\"}, ...], // The request headers\r\n\t\"headerMap\": {\"hello\": \"world\"}, // The request headers in object format (names are all lowercase)\r\n\turl: {\"pathname\": \"/\"}, // [node URL object](https://nodejs.org/api/url.html)\r\n\t\"queryParameters\": [{name: \"A\", value: \"b\"}, ...], // The query parameters\r\n\t\"queryParameterMap\": {\"a\": \"b\"}, // The query parameters in object format(names are all lowercase)\r\n\t\"respond\": function (response) { ... }, // Returns promise\r\n\t\"body\": Buffer, // Will not be included if there is no response body\r\n}\r\n```\r\n\r\n\r\n## Server response object\r\nTODO: Document better\r\n```javascript\r\n{\r\n\t\"statusCode\": 200, // The status response code (defaults to 200)\r\n\t\"statusText\": \"OK\", // The status description/text (defaults to [http.STATUS_CODES](https://nodejs.org/api/http.html#http_http_status_codes))\r\n\t\"body\": Buffer, // The response buffer\r\n\t\"headers\": [{name: \"Hello\", value: \"world\"}, ...] // The response headers (can be array or object)\r\n}\r\n```\r\n\r\n## Server example\r\nTODO: documentation wya?\r\n```javascript\r\nvar http = require(\"tixfactory.http\");\r\nvar httpServer = new http.server(80);\r\nhttpServer.on(\"request\", function(request){\r\n\trequest.respond({\r\n\t\tstatusCode: 200,\r\n\t\tstatusText: \"OK\",\r\n\t\tbody: Body.from(\"Hello, world!\"),\r\n\t\theaders: [{name: \"Hello\", value: \"world\"}]\r\n\t}).then(function(){\r\n\t\tconsole.log(\"Sent response!\");\r\n\t}).catch(function(errors){\r\n\t\tconsole.error(errors);\r\n\t});\r\n});\r\n```","created":"2017-05-07T00:22:16.837Z","modified":"2017-06-12T04:52:22.070Z","lastPublisher":{"name":"webgl3d","email":"OgreLandBob@gmail.com"},"owners":[{"name":"webgl3d","email":"OgreLandBob@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"tixfactory.http","_nodeVersion":"7.5.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tixfactory.http-1.0.9014.tgz_1497243141802_0.08263589511625469"},"_npmUser":{"name":"webgl3d","email":"OgreLandBob@gmail.com"},"_npmVersion":"4.1.2","_rev":"15-580c888e84699dd25e92f9a593559583","_shasum":"88c00eb23690e1e8586d58eee1e1800ed4157afd","author":{"name":"WebGL3D"},"bugs":{"url":"https://github.com/tixfactory/NodeHttp/issues"},"directories":{},"dist-tags":{"latest":"1.0.9014"},"dist":{"shasum":"88c00eb23690e1e8586d58eee1e1800ed4157afd","tarball":"https://registry.npmjs.org/tixfactory.http/-/tixfactory.http-1.0.9014.tgz"},"maintainers":[{"name":"webgl3d","email":"OgreLandBob@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-12T04:52:22.070Z","created":"2017-05-07T00:22:16.837Z","1.0.0":"2017-05-07T00:22:16.837Z","1.0.1":"2017-05-07T05:13:46.201Z","1.0.2":"2017-05-07T20:10:19.625Z","1.0.3":"2017-05-07T20:17:28.444Z","1.0.4":"2017-05-07T22:43:58.498Z","1.0.5":"2017-05-07T23:07:54.149Z","1.0.6":"2017-05-12T04:27:03.154Z","1.0.7":"2017-05-14T23:49:11.501Z","1.0.8":"2017-05-29T21:53:38.523Z","1.0.9":"2017-05-29T22:24:55.045Z","1.0.901":"2017-05-29T22:30:11.936Z","1.0.9011":"2017-05-29T22:32:45.479Z","1.0.9012":"2017-05-29T22:58:21.430Z","1.0.9013":"2017-05-29T22:59:08.661Z","1.0.9014":"2017-06-12T04:52:22.070Z"}}}