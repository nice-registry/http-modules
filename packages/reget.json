{"scripts":{"prepublish":"babel src --out-dir lib","clean-build":"rm -rf ./lib && npm run prepublish","start":"babel src --out-dir lib --watch","test":"cross-env NODE_ENV=test BABEL_DISABLE_CACHE=1 mocha --opts test/mocha.opts"},"name":"reget","version":"0.10.3","description":"React reactive cache for any async calls, http fetching, or memory store accesses","main":"./lib/index.js","module":"./lib/index.js","jsnext:main":"./lib/index.js","dependencies":{"js-cookie":"^2.1.3","lodash":"^4.16.4","path-to-regexp":"^1.6.0","querystring-stable-stringify":"^1.0.0"},"devDependencies":{"babel-cli":"^6.16.0","babel-core":"^6.17.0","babel-eslint":"^7.0.0","babel-plugin-transform-runtime":"^6.15.0","babel-preset-es2015":"^6.16.0","babel-preset-latest":"^6.16.0","babel-preset-react":"^6.16.0","babel-preset-stage-0":"^6.16.0","babel-runtime":"^6.11.6","cross-env":"^3.1.3","enzyme":"^2.5.1","eslint":"^3.8.1","eslint-plugin-babel":"^4.0.0","eslint-plugin-import":"^2.0.1","eslint-plugin-lodash":"^2.1.3","eslint-plugin-mocha":"^4.7.0","eslint-plugin-react":"^6.4.1","js-cookie":"^2.1.3","jsdom":"^9.8.0","mocha":"^3.1.2","react":"^15.3.1","react-addons-test-utils":"^15.3.2","react-dom":"^15.3.2","should":"^11.1.1","sinon":"^1.17.6"},"repository":"https://github.com/ericfong/reget","keywords":["react","reactive","cache","fetch","http","sync","async"],"license":"MIT","homepage":"https://github.com/ericfong/reget#readme","gitHead":"b04729a89f0521202b6e03d4c630264a974c6a9f","versions":[{"number":"0.0.1","date":"2016-09-20T11:05:30.572Z"},{"number":"0.0.2","date":"2016-09-20T11:06:53.092Z"},{"number":"0.1.0","date":"2016-09-21T09:45:01.731Z"},{"number":"0.1.1","date":"2016-09-21T10:05:35.114Z"},{"number":"0.1.2","date":"2016-09-23T09:50:47.580Z"},{"number":"0.2.0","date":"2016-09-29T06:23:26.967Z"},{"number":"0.3.0","date":"2016-09-30T08:54:12.898Z"},{"number":"0.3.1","date":"2016-10-04T07:05:43.414Z"},{"number":"0.4.0","date":"2016-10-04T09:49:49.997Z"},{"number":"0.5.1","date":"2016-10-07T06:21:47.760Z"},{"number":"0.6.0","date":"2016-10-07T06:59:18.200Z"},{"number":"0.6.1","date":"2016-10-07T10:05:21.204Z"},{"number":"0.6.2","date":"2016-10-07T10:49:41.316Z"},{"number":"0.6.3","date":"2016-10-12T07:46:23.960Z"},{"number":"0.6.4","date":"2016-10-12T08:43:59.794Z"},{"number":"0.6.5","date":"2016-10-12T09:14:59.788Z"},{"number":"0.6.6","date":"2016-10-12T10:13:49.253Z"},{"number":"0.6.7","date":"2016-10-14T03:38:34.349Z"},{"number":"0.6.8","date":"2016-10-14T03:43:28.694Z"},{"number":"0.6.9","date":"2016-10-14T03:46:06.426Z"},{"number":"0.6.10","date":"2016-10-14T03:51:21.961Z"},{"number":"0.7.0","date":"2016-10-18T09:45:00.322Z"},{"number":"0.7.1","date":"2016-10-19T11:01:42.918Z"},{"number":"0.8.0","date":"2016-10-20T08:17:19.737Z"},{"number":"0.9.0","date":"2016-10-26T07:21:55.510Z"},{"number":"0.9.1","date":"2016-10-27T08:26:42.930Z"},{"number":"0.9.2","date":"2016-10-27T15:12:27.272Z"},{"number":"0.9.3","date":"2016-10-28T04:00:26.253Z"},{"number":"0.9.4","date":"2016-10-28T06:25:25.328Z"},{"number":"0.9.5","date":"2016-10-28T06:32:15.715Z"},{"number":"0.9.6","date":"2016-10-28T10:18:41.242Z"},{"number":"0.9.7","date":"2016-10-28T10:40:17.318Z"},{"number":"0.9.8","date":"2016-10-31T09:44:43.949Z"},{"number":"0.9.9","date":"2016-11-17T03:28:31.088Z"},{"number":"0.9.10","date":"2016-11-24T15:50:11.563Z"},{"number":"0.9.11","date":"2016-11-28T06:56:50.963Z"},{"number":"0.9.12","date":"2016-11-28T08:01:33.815Z"},{"number":"0.9.13","date":"2016-11-28T17:27:21.991Z"},{"number":"0.9.14","date":"2016-11-29T03:49:19.902Z"},{"number":"0.10.0","date":"2016-11-30T08:54:38.278Z"},{"number":"0.10.1","date":"2016-12-06T08:31:09.359Z"},{"number":"0.10.2","date":"2016-12-13T07:19:06.244Z"},{"number":"0.10.3","date":"2017-06-21T03:14:21.883Z"}],"readme":"__Reget__ ![https://img.shields.io/npm/v/reget.svg](https://img.shields.io/npm/v/reget.svg?style=flat-square) [![state](https://img.shields.io/badge/state-rc-green.svg?style=flat-square)]() [![npm](https://img.shields.io/npm/dt/reget.svg?maxAge=2592000&style=flat-square)]() [![npm](https://img.shields.io/npm/l/reget.svg?style=flat-square)]()\r\n\r\n# Deprecated and please migrate to __[datavan](http://npmjs.com/package/datavan)__, which provide more features\r\n\r\n> HTTP API Accessor for React with auto-reactive-cache and middlewares.\r\n> Restful React reactive cache for any async calls, http fetching, or memory store accesses.\r\n\r\n__Features__\r\n- auto-reactive-cache\r\n  - API results are cached and auto prune\r\n  - AutoRunner(function) auto watch and re-run when related caches changed\r\n  - reget.get() is synchronized function, which get cache and trigger http fetch as a side effect\r\n\r\n- middlewares\r\n  - koa middleware like\r\n  - can use middlewares to convert data, as ORM or distribute to diff cache keys\r\n  - also work for synchronized access or localStorage or memory\r\n\r\n\r\n__How It works?__\r\n\r\nreget is simple key-value cache. During data getting, reget will call a list of middlewares if cache is missing or too old. Result from middlewares will put into the cache and notify all listeners.\r\n\r\nYou can implement koa-like middlewares to asynchronously fetch HTTP RESTful resources, worker communication or synchronously access localStorage.\r\n\r\nWelcome to extend or hack Reget or other classes to change behaviours\r\n\r\n\r\n__Table of Contents__\r\n<!-- TOC START min:1 max:3 link:true update:true -->\r\n  - [Http get, put, post for react component](#http-get-put-post-for-react-component)\r\n  - [Setup](#setup)\r\n  - [Comparison](#comparison)\r\n  - [Server Rendering](#server-rendering)\r\n  - [Use Reget alone](#use-reget-alone)\r\n    - [API](#api)\r\n  - [CacheStore class methods](#cachestore-class-methods)\r\n  - [Reget class](#reget-class)\r\n  - [Middlewares](#middlewares)\r\n    - [Middleware API](#middleware-api)\r\n    - [Middleware Example](#middleware-example)\r\n  - [SyncPromise](#syncpromise)\r\n\r\n<!-- TOC END -->\r\n\r\n\r\n\r\n\r\n## Http get, put, post for react component\r\n```js\r\nimport {connectReget} from 'reget'\r\n\r\nfunction PureComponent({user}) {\r\n  return user.name\r\n}\r\n\r\nexport default connectReget(({userId, reget}) => {\r\n  // assume you have setup middleware to fetch HTTP\r\n  const user = reget.get(`user/${userId}`)\r\n  // first get will be undefined\r\n  // after HTTP response and cached, connectReget will be re-run\r\n  // so, second get will get user\r\n  return {user: user}\r\n\r\n  // you can return null to stop child component rendering\r\n})(PureComponent)\r\n```\r\n\r\n\r\n## Setup\r\n```js\r\nimport {Reget, RegetProvider, compose} from 'reget'\r\n\r\n// create reget cache and assign it with middlewares\r\nconst reget = new Reget({\r\n  // create koa-like middlewares\r\n  handler: compose(async ctx => {\r\n    // fetch http based on ctx.url, body and headers\r\n    ctx.body = await window.fetch(ctx.url, {\r\n      body: ctx.input,\r\n      headers: ctx.headers,\r\n    })\r\n  }),\r\n})\r\n\r\n// Assign to your React context\r\n<RegetProvider reget={reget}>\r\n  <MyApp />\r\n</RegetProvider>\r\n```\r\n\r\n\r\n## Comparison\r\n\r\nCompare to Flux/Redux\r\n- Built-in support for async, http, promise call\r\n- Designed for big state tree. Cached state will be garbage collected\r\n- No need to define constants (you can define url generate functions)\r\n\r\nCompare to Relay/Falcor\r\n- Can call any http endpoint (Restful or php page or even image)\r\n- Flexible code your middleware, data conversion and normalization in js side\r\n\r\n\r\n## Server Rendering\r\n```js\r\nreget.serverRender(reget => {\r\n  return ReactDOMServer.renderToString(<RegetProvider reget={reget}><App /></RegetProvider>)\r\n})\r\n.then(outputHtml => {\r\n  console.log(outputHtml)\r\n})\r\n\r\n// transfer data to client\r\nconst json = JSON.stringify(reget.getCache())\r\n// -------\r\nconst isoData = JSON.parse(json)\r\n\r\n// client side\r\nconst browserReget = new Reget({\r\n  // handler()\r\n})\r\nbrowserReget.setCache(isoData)\r\nReactDOM.render(<RegetProvider reget={browserReget}><App /></RegetProvider>, dom)\r\n\r\n```\r\nYou can use [iso](https://www.npmjs.com/package/iso) to ship data to browser\r\n\r\n\r\n\r\n## Use Reget alone\r\nReget can be a\r\n```js\r\nimport {Reget, compose, mount} from 'reget'\r\n\r\nimport browserMiddleware from 'reget/lib/middlewares/browser'\r\nimport cacheMiddleware from 'reget/lib/middlewares/cache'\r\nimport localStorageMiddleware from 'reget/lib/middlewares/localStorage'\r\nimport cookieMiddleware from 'reget/lib/middlewares/cookie'\r\nimport koaCookieMiddleware from 'reget/lib/middlewares/koaCookie'\r\n\r\n\r\nconst reget = new Reget({\r\n  handler: compose(\r\n    mount('memory', cacheMiddleware()),\r\n    // or\r\n    {mount: 'memory', handler: cacheMiddleware()},\r\n\r\n    {\r\n      route: 'abc/:key',\r\n      async get(ctx, next) {\r\n        // ...\r\n      },\r\n      async put(ctx, next) {\r\n        // ...\r\n      },\r\n      async post(ctx, next) {\r\n        // ...\r\n      },\r\n    }\r\n  ),\r\n})\r\n\r\nreget.put('memory/foo', 'bar')\r\nreget.get('memory/foo') === 'bar'\r\n```\r\n\r\n### API\r\nreget will create a CallContext instance and pass down to middlewares\r\n\r\n__CallContext fields, getters and setters__\r\n```js\r\n// ctx fields\r\nreget: [Object] // caller reget object. Middleware is valid to call middlewares stack again, (prevent recursive problem on your own).\r\ncache: [Object] // reget's cache. middleware can use this to safely put data into cache\r\n\r\n// request related fields\r\nmethod: 'GET' // default 'GET'\r\nurl: '/' // url with query string, default '/'\r\npath: '/' // url without query string, default '/'\r\nifModifiedSince: null // default null\r\nheaders: null // default undefined\r\ninput: null // request body or data, default null\r\n\r\n// response related fields\r\nstatus: 404 // http-like response status getter and setter, default 404)\r\nbody: null  // http-like response body getter and setter, default null)\r\nget: function() {} // get normalized header\r\nset: function() {} // set header\r\n```\r\n\r\n\r\n## CacheStore class methods\r\n```js\r\nget(key)  // sync get cache\r\nset(key, value)  // sync set cache, trigger watchers to re-run in next tick.\r\ninvalidate(key, allSuffix)  // invalidate cache\r\nwatch(key, func)  // register a watcher for change on key\r\nunwatch(key, func)  // unregister a watcher for change on key\r\nhasWatch(key)\r\ngetPendingPromise()  // get pending change promise (or null), so you can wait for\r\nprune()  // gc this cache store\r\n```\r\n\r\n\r\n## Reget class\r\n```js\r\ncache  // this instance's CacheStore\r\nhandler()  // assigned handler function for request (GET, PUT, POST), can be created by ```compose``` module\r\nget(pathname, query, option)  // http get (Sync)\r\nput(url, input, option)  // http put (Async/Promise)\r\npost(url, input, option)  // http post (Async/Promise)\r\nreload(url, option)  // http get (Async/Promise)\r\nrequest(option)  // http request (Async/Promise)\r\nserverRender()\r\ngetLoadingPromise(key) // get promise for all loading calls or one cache, null when promise not found\r\nwait()  // wait for all pending requests and events\r\ngetCache() // If !key, entire store will be returned\r\nsetCache() // If key is object, key&value will be import to this cache store.\r\ninvalidate(key, allSuffix)\r\nwatch(key, func)\r\nunwatch(key, func)\r\n```\r\n\r\n\r\n## Middlewares\r\nkoa like middlewares system. Please refer to [path-to-regexp](https://www.npmjs.com/package/path-to-regexp) for path pattern.\r\n```js\r\nimport {compose} from 'reget'\r\n\r\nconst handler = compose(\r\n  {\r\n    route: 'foo/:key',\r\n    async get(ctx, next) {\r\n      // ctx.params = {key: 'hi'}\r\n      await next()\r\n      ctx.body = ctx.body + ' World'\r\n    },\r\n    async put(ctx, next) {\r\n      DB.save(ctx.input)\r\n      ctx.status = 200\r\n    },\r\n  },\r\n  ctx => {\r\n    ctx.body = 'Hello'\r\n  },\r\n)\r\n\r\nconst ctx = {path: 'foo/hi'}\r\nawait handler(ctx)\r\n// ctx.body === 'Hello World'\r\n```\r\n\r\n### Middleware API\r\n\r\n__compose(...middlewares)__\r\ncreate a function that accept a context argument and pass down to all middlewares\r\n\r\nmiddlewares can be one of\r\n- function(ctx, next){}\r\n- array of function(ctx, next){}\r\n- object: {route: 'pathPattern', get(){}, put(){}, post(){}, watch(){}, unwatch(){}}\r\n- object: {mount: 'prefix', handler: anotherMiddleware}\r\n- mount('prefix', anotherMiddleware)\r\n\r\nlike koa-route, path pattern use [path-to-regexp](https://www.npmjs.com/package/path-to-regexp) to build regexp\r\n\r\n\r\n### Middleware Example\r\n```js\r\nbrowserMiddleware = {\r\n  route: '/:key',\r\n  watch({params: {key}, mountPath, reget}) {\r\n    if (key === 'height' || key === 'width') {\r\n      window.onresize = function() {\r\n        const changes = {\r\n          // mountPath = 'browser' if you use mount('browser', browserMiddleware)\r\n          [`${mountPath}/height`]: window.innerHeight,\r\n          [`${mountPath}/width`]: window.innerWidth,\r\n        }\r\n        reget.setCache(changes)\r\n      }\r\n      window.onresize()\r\n    }\r\n  },\r\n  unwatch(ctx) {\r\n    const {key} = ctx.params\r\n    if (key === 'height' || key === 'width') {\r\n      window.onresize = null\r\n    }\r\n  },\r\n  get(ctx) {\r\n    // just use the cached value\r\n    ctx.status = 304\r\n  },\r\n  put(ctx) {\r\n    // cannot put\r\n    ctx.status = 404\r\n  },\r\n}\r\n```\r\n\r\n\r\n## SyncPromise\r\nSyncPromise can wrap a value into a Promise like object. Why? because normal Promise .then is not sync\r\n\r\n```js\r\nlet value = null\r\n\r\nPromise.resolve('A')\r\n.then(val => value = val)\r\n// value !== 'A'\r\n\r\n// But\r\n\r\nSyncPromise.resolve('A')\r\n.then(val => value = val)\r\n// value === 'A'\r\n```\r\n","starsCount":1,"created":"2016-09-20T11:05:30.572Z","modified":"2017-06-21T03:14:21.883Z","lastPublisher":{"name":"ericfong","email":"e@ec5.me"},"owners":[{"name":"ericfong","email":"e@ec5.me"}],"other":{"_attachments":{},"_from":".","_id":"reget","_nodeVersion":"7.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/reget-0.10.3.tgz_1498014861739_0.15228016069158912"},"_npmUser":{"name":"ericfong","email":"e@ec5.me"},"_npmVersion":"3.10.9","_rev":"20-a03b4dae38a0d0b6ff8da066288fb677","_shasum":"1b335d097da763557d888fcffd7c196c99fccc8c","author":{"name":"Eric Fong"},"bugs":{"url":"https://github.com/ericfong/reget/issues"},"directories":{"lib":"./lib"},"dist-tags":{"latest":"0.10.3"},"dist":{"shasum":"1b335d097da763557d888fcffd7c196c99fccc8c","tarball":"https://registry.npmjs.org/reget/-/reget-0.10.3.tgz"},"maintainers":[{"name":"ericfong","email":"e@ec5.me"}],"readmeFilename":"README.md","time":{"modified":"2017-06-21T03:14:21.883Z","created":"2016-09-20T11:05:30.572Z","0.0.1":"2016-09-20T11:05:30.572Z","0.0.2":"2016-09-20T11:06:53.092Z","0.1.0":"2016-09-21T09:45:01.731Z","0.1.1":"2016-09-21T10:05:35.114Z","0.1.2":"2016-09-23T09:50:47.580Z","0.2.0":"2016-09-29T06:23:26.967Z","0.3.0":"2016-09-30T08:54:12.898Z","0.3.1":"2016-10-04T07:05:43.414Z","0.4.0":"2016-10-04T09:49:49.997Z","0.5.1":"2016-10-07T06:21:47.760Z","0.6.0":"2016-10-07T06:59:18.200Z","0.6.1":"2016-10-07T10:05:21.204Z","0.6.2":"2016-10-07T10:49:41.316Z","0.6.3":"2016-10-12T07:46:23.960Z","0.6.4":"2016-10-12T08:43:59.794Z","0.6.5":"2016-10-12T09:14:59.788Z","0.6.6":"2016-10-12T10:13:49.253Z","0.6.7":"2016-10-14T03:38:34.349Z","0.6.8":"2016-10-14T03:43:28.694Z","0.6.9":"2016-10-14T03:46:06.426Z","0.6.10":"2016-10-14T03:51:21.961Z","0.7.0":"2016-10-18T09:45:00.322Z","0.7.1":"2016-10-19T11:01:42.918Z","0.8.0":"2016-10-20T08:17:19.737Z","0.9.0":"2016-10-26T07:21:55.510Z","0.9.1":"2016-10-27T08:26:42.930Z","0.9.2":"2016-10-27T15:12:27.272Z","0.9.3":"2016-10-28T04:00:26.253Z","0.9.4":"2016-10-28T06:25:25.328Z","0.9.5":"2016-10-28T06:32:15.715Z","0.9.6":"2016-10-28T10:18:41.242Z","0.9.7":"2016-10-28T10:40:17.318Z","0.9.8":"2016-10-31T09:44:43.949Z","0.9.9":"2016-11-17T03:28:31.088Z","0.9.10":"2016-11-24T15:50:11.563Z","0.9.11":"2016-11-28T06:56:50.963Z","0.9.12":"2016-11-28T08:01:33.815Z","0.9.13":"2016-11-28T17:27:21.991Z","0.9.14":"2016-11-29T03:49:19.902Z","0.10.0":"2016-11-30T08:54:38.278Z","0.10.1":"2016-12-06T08:31:09.359Z","0.10.2":"2016-12-13T07:19:06.244Z","0.10.3":"2017-06-21T03:14:21.883Z"},"users":{"ericfong":true}}}