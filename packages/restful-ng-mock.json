{"name":"restful-ng-mock","version":"0.3.0","description":"Quickly mock up common HTTP service API patterns.","main":"build/restful-ng-mock.min.js","repository":"https://github.com/AmericanCouncils/restful-ng-mock","keywords":["angular","angularjs","restful-ng-mock","restfulngmock","restful","mock","httpbackend"],"license":"MIT","devDependencies":{"bower":"*","grunt":"~0.4.1","grunt-jsdoc":"~0.2.4","grunt-karma":"~0.4.3","grunt-contrib-concat":"~0.1.3","grunt-contrib-jshint":"0.1.1rc6","grunt-contrib-uglify":"~0.1.2","grunt-angular-templates":"~0.3.0","grunt-contrib-clean":"~0.4.0","grunt-contrib-jasmine":"~0.3.3","grunt-cli":"~0.1.7"},"readme":"# restful-ng-mock\n\n[![Build Status](https://travis-ci.org/AmericanCouncils/restful-ng-mock.png?branch=master)](https://travis-ci.org/AmericanCouncils/restful-ng-mock)\n\nWhen you're writing an Angular app for those APIs, you will often want to create a client-side mock that simulates the server. This is typically done with [`$httpBackend`](http://docs.angularjs.org/api/ngMock.$httpBackend), but manually adding all your web methods with that module's low-level interface can be tedious and error-prone. `restful-ng-mock` is a frontend to `$httpBackend` that handles a lot of the most common stuff for you, such as converting responses to JSON and providing sensible default implementations of the standard CRUD methods.\n\n## Installation\n\nAfter you've downloaded the restful-ng-mock component with bower, add the\nusual lines in app.js (to `restfulNgMock`) and index.html (to\n`components/restful-ng-mock/build/restful-ng-mock.js`).\n\n## Basic mocks\n\nCreate a mock object for each major resource on your server under a given\nURL prefix. For example, suppose you have some URLs available under `/items`:\n\n```js\nangular.module('myApp').factory('mockItems', [\n'basicMock', // This service is from restful-ng-mock\nfunction(basicMock) {\n  var items = {\n    1: { id: 1, name: 'Foo'},\n    2: { id: 2, name: 'Bar'}\n  };\n  var itemsMock = basicMock('/items');\n  \n  // This handles requests to '/items'\n  itemsMock.route('GET', '', function() {\n    return items;\n  });\n  \n  // A question mark allows an arbitrary argument\n  // So, this handles requests to '/items/<n>' for any single value <n>\n  itemsMock.route('GET', '/?', function(request) {\n    var id =  request.pathArgs[0];\n    // Null and undefined values will automatically be transformed to 404 responses\n    return items[id]; \n  });\n  \n  // This handles POST requests to '/items/<n>/form_voltron'\n  itemsMock.route('POST', '/?/form_voltron', function(request) {\n    // request.url is a purl url object, see https://github.com/allmarkedup/purl\n    // Here we require that the URL was like /items/123/form_voltron?password=abc123\n    if (request.url.param('password') == 'abc123') {\n      // If the request had a JSON body, then it is automatically parsed and\n      // made available in request.body\n      if (request.body.pilot) {\n        return { result: \"I'll form the head!\", pilot: request.body.pilot };\n      } else {\n        return { result: \"I guess John will form the head.\", pilot: \"John\" };\n      }\n    } else {\n      // Return HttpError for non-200 responses\n      return new this.HttpError(400, \"You're not a member of the Voltron team!\");\n    }\n  });\n}]);\n```\n\n## Post-processing\n\nThe `route` method returns an object that you can use to further customize the mock's behavior. Use the `addPostProc` method to add a function which accepts the data returned by the route implementation and can return a modified version of that data:\n\n```js\nvar route = itemsMock.route('GET', '', function() {\n  return items;\n});\nroute.addPostProc(data, function(data, request) {\n  data.reverse();\n  return data;\n}\n```\n\nThis is convenient when you are doing the same or similar transformations in many different places in your mock.\n\n## Resource mocks\n\nOften, a server may be implementing a database-like service with the usual CRUD actions. There is a convenience service `resourceMock` that makes this easier:\n\n```js\nangular.module('myApp').factory('mockPeople', [\n'resourceMock', // This service is from restful-ng-mock\nfunction(resourceMock) {\n  var people = {\n    1: { id: 1, name: 'Alice'},\n    2: { id: 2, name: 'Bob'}\n  };\n  var peopleMock = resourceMock('/people', people);\n}]);\n```\n\nThis automatically provides all the usual CRUD methods:\n\n* Get a list of people at `GET /people`. Indexes are returned as arrays rather than objects, even though the internal data store is an object.\n* Create new people with `POST /people`. They are automatically assigned a new random numeric id.\n* Retrieve an individual person with id 2 at `GET /people/2`.\n* Update them with a new object at `PUT /people/2`.\n* Delete them with `DELETE /people/2`.\n\nYou can override the default implementations of these by setting new methods (respectively, `indexAction`, `createAction`, `showAction`, `updateAction`, and `deleteAction`) on the mock object. The default method is available to these through the `parent` object:\n\n```js\n// Let's anonymize the first person returned by every index request\npeopleMock.indexAction = function(request) {\n  var people = this.parent.indexAction.call(this, request);\n  if (people.length > 0) {\n    people[0].name = \"John Doe\";\n  }\n  return people;\n}\n```\nThe resource mock also supports all the same methods as `basicMock`, which is convenient for adding RPC-ish stuff and other not-strictly-RESTful methods:\n\n```js\npeopleMock.route('POST', '/?/jump', function(request) {\n  return { result: \"I jumped! Now what?\" };\n});\n```\n\nThe automatic routes themselves are available as attributes under the names `indexRoute`, `showRoute`, etc., which means you can apply post processors. There are some convenience\nmethods on resourceMock for common post-processing situations:\n\n* `addIndexFilter(fieldName[, filterFunc])`: Allows you to specify a GET argument to filter results by a particular field value. You can optionally specify a filter function, which is given the GET argument value and a data object, and should return true if the object matches the filter specified by the value.\n* `addIndexArrayFilter(fieldName[, sep[, filterFunc]])`: A filter that checks against a list of acceptable values. The default separator is a comma.\n* `addIndexPagination([skipName, limitName])`: Specify GET arguments used to retrieve a subset of the results. The `skipName` argument slices off results from the beginning of the array, and the `limitName` argument sets a maximum number of results to return; if you don't specify these, they are simply \"skip\" and \"limit\" by default.\n* `addLabeller(singleLabel, pluralLabel)`: Puts the data returned under a key in a containing object. The `pluralLabel` is used for index results, and the `singleLabel` is used for the results from all other actions. Note that this must be applied after the other index-related filters above.\n* `addSingletonPostProcs(func)`: Apply the same post processing function to the show, update, create, and destroy actions.\n\n\n## Options\n\nThere are various options you can enable on both types of mock. These can be set with an additional argument to the constructor, or by calling the `setOptions` method:\n\n```js\nvar oneMock = basicMock('/foo', { debug: true });\nvar twoMock = resourceMock('/bar', stuff);\ntwoMock.setOptions({ httpResponseInfoLabel: 'response' });\n```\n\nThese options are available for both `basicMock` and `resourceMock`:\n\n* `debug`: If set to `true`, then all HTTP responses will be logged with console.log. Alternately, you can provide a function here, and it will be called with the request object, the response info object, and the response data.\n* `httpResponseInfoLabel`: If set to a string, then HTTP response info will be embedded in all JSON responses under this key. The response info object includes the HTTP code and a status message.\n","versions":[{"number":"0.3.0","date":"2014-03-31T16:05:22.818Z"}],"starsCount":1,"created":"2014-03-31T15:47:15.139Z","modified":"2014-03-31T16:05:22.818Z","lastPublisher":{"name":"davidmikesimon","email":"dsimon@americancouncils.org"},"owners":[{"name":"davidmikesimon","email":"dsimon@americancouncils.org"}],"other":{"_attachments":{},"_from":".","_id":"restful-ng-mock","_npmUser":{"name":"davidmikesimon","email":"dsimon@americancouncils.org"},"_npmVersion":"1.3.11","_rev":"1-113dc138a41d502748a55feceb135568","bugs":{"url":"https://github.com/AmericanCouncils/restful-ng-mock/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"0.3.0"},"dist":{"shasum":"83ff655d78f0cfc32ac02730b5a48b40a755f38d","tarball":"http://registry.npmjs.org/restful-ng-mock/-/restful-ng-mock-0.3.0.tgz"},"maintainers":[{"name":"davidmikesimon","email":"dsimon@americancouncils.org"}],"readmeFilename":"README.md","time":{"modified":"2014-03-31T16:05:22.818Z","created":"2014-03-31T15:47:15.139Z","0.3.0":"2014-03-31T16:05:22.818Z"},"users":{"svgkrishnamurthy":true}}}