{"name":"request-cached-promise","version":"0.0.2","description":"promisified http request with caching","main":"src/index.js","scripts":{"test":"mocha"},"license":"WTFPL","repository":"https://github.com/disjunction/node-request-cached-promise","keywords":["cache","promise","request","http","cache manager"],"dependencies":{"request-promise":"^2.0.1"},"devDependencies":{"cache-manager":"^1.4.0","chai":"^3.5.0","mocha":"^2.4.5","nock":"^7.2.2","eslint":"^1.10.3"},"gitHead":"0f11c192839afa941f9fa45f8967053cc0644a7f","homepage":"https://github.com/disjunction/node-request-cached-promise#readme","deprecated":"this module was replaced with request-plus, providing same features and much more","versions":[{"number":"0.0.1","date":"2016-04-17T12:16:53.176Z"},{"number":"0.0.2","date":"2016-04-18T22:55:36.170Z"}],"readme":"[![build status](https://api.travis-ci.org/disjunction/node-request-cached-promise.png)](https://travis-ci.org/disjunction/node-request-cached-promise)\n\n# request-cached-promise\n\nCache proxy class for request-promise: essentially a\ncombination of **request-promise** and **cache-manager** with\nsome hashing logic. See:\n\n* promisified variation of request: https://github.com/request/request-promise\n* multilayer flexible cache: https://github.com/BryanDonovan/node-cache-manager\n\nNote: request-promise uses **Bluebird** for promises,\nso you get not a ES6 native Promise but a Bluebird one.\nThis should be a little concern, since Bluebird\nis Promises/A+ complient.\n\n## Usage\n\nYou can bind the lib to a cache-manager cache and then use,\nas it were request-promise with all its features.\n\n\n```javascript\nconst rcp = require(\"request-cached-promise\");\nconst request = rcp.bindToCache(someCache);\nrequest(/* ... */ )\n    .then (/* ... */)\n    .catch(/* ... */);\n```\n\nYou can bind multiple times to have different caches\nused for different requests.\n\n```javascript\nconst requestMem = rcp.bindToCache(memoryCache);\nconst requestMultilayer = rcp.bindToCache(multilayerCache);\n\nrequestMem(/*...*/).then(/*...*/);\nrequestMultilayer(/*...*/).then(/*...*/);\n```\n\n## Example\n\n... with a simple memory cache, though in real\nlive you might want to use also redis or mongo etc.\n\n```javascript\nconst\n    cacheManager = require(\"cache-manager\"),\n    cache = cacheManager.caching({\n        store: 'memory',\n        max: 100,\n        ttl: 10 // seconds\n    }),\n    request = require(\"request-cached-promise\").bindToCache(cache);\n\nfunction getUserProfile(userId) {\n    return request({\n        uri: \"http://some.service/providing/user/\" + userId,\n        json: true\n    });\n}\n\ngetUserProfile(\"john.doe\").then(data => {\n   console.log(data);\n   // ... and other important stuff\n});\n```\n\n## How it works\n\nThe library takes request first parameter and generates\na key out of it. If the param is a string, then the key is the URI itself.\nOtherwise the key is URI with a hash added at the end.\nThis schema is used for easier debugging of cached responses\nwhen they're saved in say mongo.\n\nThe example above could produce the following record when using **cache-manager-mongoose** store:\n\n```\n{\n    \"_id\" : \"http://some.service/providing/user/john.doe _978826362\",\n    \"exp\" : ISODate(\"2016-04-17T11:34:32.853Z\"),\n    \"val\" : {\n        \"id\": \"john.doe\",\n        \"firstName\" : \"John\",\n        \"lastName\": \"Doe\"\n    }\n}\n```\n\nHere `_978826362` is a hash generated from the request param:\n```json\n{\n    \"uri\": \"http://some.service/providing/user/john.doe\",\n    \"json\": true\n}\n```\n\n## Customization\n\nThe module exports two functions, which you can override\nif you want.\n\nOverride examples:\n\n```javascript\nconst rcp = require(\"request-cached-promise\");\n\nrcp.hash = function(str) {\n    /* my implementation of hashig, e.g. MD5 */\n};\n\nrcp.getKey = function(requestParam) {\n    // in my case all requests have unique URI\n    // i don't want to hash request params\n    return requestParam.uri || requestParam;\n};\n```","created":"2016-04-17T12:16:53.176Z","modified":"2016-07-28T17:21:00.493Z","lastPublisher":{"name":"disjunction","email":"or@pluseq.com"},"owners":[{"name":"disjunction","email":"or@pluseq.com"}],"other":{"_attachments":{},"_from":".","_id":"request-cached-promise","_nodeVersion":"5.10.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/request-cached-promise-0.0.2.tgz_1461020133559_0.6958933237474412"},"_npmUser":{"name":"disjunction","email":"or@pluseq.com"},"_npmVersion":"3.8.3","_rev":"1-6a3b0b633455fb537a183125d0f530d2","_shasum":"5d589a7065a0771c9b83c092cbe823034fb15128","author":{"name":"Konstantin Pogorelov","email":"or@pluseq.com"},"bugs":{"url":"https://github.com/disjunction/node-request-cached-promise/issues"},"directories":{},"dist-tags":{"latest":"0.0.2"},"dist":{"shasum":"5d589a7065a0771c9b83c092cbe823034fb15128","tarball":"http://registry.npmjs.org/request-cached-promise/-/request-cached-promise-0.0.2.tgz"},"maintainers":[{"name":"disjunction","email":"or@pluseq.com"}],"readmeFilename":"README.md","time":{"modified":"2016-07-28T17:21:00.493Z","created":"2016-04-17T12:16:53.176Z","0.0.1":"2016-04-17T12:16:53.176Z","0.0.2":"2016-04-18T22:55:36.170Z"}}}