{"name":"jquery-jsonrpcclient","version":"0.7.0","description":"JSON-RPC 2.0 Client for HTTP and WebSocket backend","main":"jquery.jsonrpcclient.js","scripts":{"test":"rm -fr coverage && ./node_modules/karma/bin/karma start --single-run --browsers PhantomJS test/unit.conf.js && ./node_modules/.bin/jscs jquery.jsonrpcclient.js && ./node_modules/.bin/jscs test/unit/tests.js && find coverage/ -name lcov.info -print0 | xargs -0 cat | ./node_modules/coveralls/bin/coveralls.js"},"license":"MIT","dependencies":{"jquery":">=1.5"},"devDependencies":{"karma":"~0.12.21","karma-mocha":"~0.1.1","karma-chai-sinon":"~0.1.1","jquery":"~2.1.0","karma-coverage":"~0.1.5","coveralls":"~2.8.0","mocha-lcov-reporter":"0.0.1","karma-growler-reporter":"0.0.1","jscs":"~1.5.9","karma-phantomjs-launcher":"^0.1.4"},"gitHead":"55670767c86832a2834c2719d55f1f6f428eb322","versions":[{"number":"0.7.0","date":"2016-04-18T07:38:03.455Z"}],"readme":"JSON-RPC 2.0 Client for HTTP and WebSocket backends\n===================================================\n\n[![Build Status](https://travis-ci.org/Textalk/jquery.jsonrpcclient.js.png?branch=master)](https://travis-ci.org/Textalk/jquery.jsonrpcclient.js)\n[![Coverage Status](https://coveralls.io/repos/Textalk/jquery.jsonrpcclient.js/badge.png?branch=master)](https://coveralls.io/r/Textalk/jquery.jsonrpcclient.js)\n\nThis plugin requires JSON.parse and JSONstringify, otherwise it falls back to $.toJSON and $.parseJSON.\n\nJsonRpcClient uses websockets if they are available, but will work just as well with only\nhttp if not.\n\nUsage example:\n\n```Javascript\nvar foo = new $.JsonRpcClient({ ajaxUrl: '/backend/jsonrpc' });\nfoo.call(\n  'bar', [ 'A parameter', 'B parameter' ],\n  function(result) { alert('Foo bar answered: ' + result.my_answer); },\n  function(error)  { console.log('There was an error', error); }\n);\n```\n\nThe `call` method will return the [deferred object](https://api.jquery.com/category/deferred-object/) that $.ajax returns, or null if websockets are used.\n\nBatch calls\n-----------\n\nIn HTTP you can batch calls with the batch-method.  You get a batch handler to make all call- and\nnotify-requests on, and they will all be sent in a single request.  When a WebSocket backend is\navailable, the requests will be sent immediately.\n\nExample:\n\n```Javascript\nvar foo = new $.JsonRpcClient({ ajaxUrl: '/backend/jsonrpc' });\nfoo.batch(\n  function(batch) {\n    batch.call('bar', [ 'A parameter', 'B parameter' ], success_cb1, error_cb1);\n    batch.call('baz', { parameters: 'could be object' }, success_cb2, error_cb2);\n  },\n  function(all_result_array) { alert('All done.'); },\n  function(error_data)       { alert('Error in batch response.'); }\n);\n```\nEach result will be paired with it's own callback.  The all_done_callback given first to batch is\ncalled when all other callbacks are done.\n\n\n$.JsonRpcClient Options\n-----------------------\n\n`ajaxUrl` **string** The URL to use when making requests over HTTP.\n\n`headers` **object** HTTP headers to be passed to $.ajax when making requests over HTTP.\n\n`xhrFields` **object**  An object that will be passed along to $.ajax in options.xhrFields\n\n`socketUrl` **string** The URL to use when making requests over WSS (web sockets). Not used if a custom `getSocket` is supplied.\n\n`onmessage` **function** Optional onmessage-handler for WebSocket for any non JSON-RPC messages.\n\n`onopen` **function** Optional onopen-handler for WebSocket.\n\n`onclose` **function** Optional onclose-handler for WebSocket.\n\n`onerror` **function** Optional onerror-handler for WebSocket.\n\n`getSocket` **function** Custom socket supplier for using an already existing socket.\n\n`timeout` **integer** Optional sets timeout for calls in ms. Works with WebSocket as well as AJAX.\n\nWebSocket\n---------\n\nIf a websocket backend is given, it will be used if the browser supports it:\n\n```Javascript\nvar foo = new $.JsonRpcClient({ ajaxUrl: '/backend/jsonrpc', socketUrl: 'ws://example.com/' });\nfoo.call('bar', [ 'param' ], success_cb, error_cb);\n--> websocket message: {\"jsonrpc\":\"2.0\",\"method\":\"bar\",\"params\":[\"param\"],\"id\":3}\n```\n\nThe http fallback will be used when the browser is not WebSocket capable, but NOT when the\nwebsocket fails to connect.\n\n\n### WebSocket other message handler\n\nIf a non-response message comes in, it can be forwarded to an external handler by giving the\nonmessage-option.\n\n\n### Using an already alive websocket - getSocket option\n\nIf you already have a websocket active and want that to be used for the JSON-RPC requests, you can\nuse the getSocket option.  getSocket should point to a function with the following interface:\n```\n@param onmessage_cb  getSocket will be called with an onmessage_cb that must be bound to the\n                     onmessage event of the returned socket.\n\n@return websocket|null  The returned object should act like a WebSocket: it must have the\n                        property readyState, with a value of less than or equal to 1.  If less\n                        than 1, it must have an onopen-property that can be set, and that will\n                        be called when the socket is ready.  Also, it must be have the function\n                        'call', taking a string.\n                        It could also return null if no socket is available.\n```\n\nThe main purpose of this is to couple the client with a matching server, that can take requests\nfrom the backend.\n\n\nTests\n-----\nTests are written using the framework [Mocha](https://github.com/visionmedia/mocha), with the help\nof [chai](https://github.com/chaijs/chai) for assertions and [sinon](http://sinonjs.org/) for spies,\nmocks and fake servers.\n\nTo run the test you can either use [Karma](http://karma-runner.github.io) or\n[js-test-driver](https://code.google.com/p/js-test-driver/).\n\n*Karma setup*\nTo run the tests with karma you need nodejs installed\n\nTo install Karma and it's dependencies (we use mocha,sinon and chai as test frameworks, and phantomjs to run the tests)\n```bash\n$ sudo npm install -g karma\n$ cd jquery.jsonrpclient.js/\n$ npm install\n```\n\nStart karma, it will automaticaly run the tests and then watch for changes and rerun on each change.\n```bash\n$ karma start test/unit.conf.js\n```\n\n*js-test-driver*\nTo run the test with js-test-driver you need java installed.\n\nTo install download the jar from here\n[google code](https://code.google.com/p/js-test-driver/downloads/list)\n\nTo run the tests from the command line, use the following commands:\n\n    # Step 1 - Start jsTestDriver server on port 9000 on localhost\n    java -jar /path/to/jsTestDriver.jar --port 9000\n\n    # Step 2 - Browse to http://localhost:9000/capture with one or more browsers\n    # Each browser you direct to that address will run the tests.\n\n    # Step 3 - Run tests\n    java -jar /path/to/jsTestDriver.jar --reset --config test/jsTestDriver.conf --tests all\n\n\nJSON-RPC 2.0\n------------\n\nJSON-RPC 2.0 is a very simple protocol for remote procedure calls, agnostic of carrier (http,\nwebsocket, tcp, whatever).\n\n[JSON-RPC 2.0 Specification](http://www.jsonrpc.org/specification)\n\n\nContributing\n------------\n\nUse [Google code standard](https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml)\nor at least the part of it that [JSCS](https://github.com/mdevils/node-jscs) validates, but with a\nline length of 100 chars.\n","created":"2016-04-18T07:38:03.455Z","modified":"2016-04-18T07:38:03.455Z","lastPublisher":{"name":"fiddur","email":"fredrik@liljegren.org"},"owners":[{"name":"fiddur","email":"fredrik@liljegren.org"}],"other":{"_attachments":{},"_from":".","_id":"jquery-jsonrpcclient","_nodeVersion":"5.1.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/jquery-jsonrpcclient-0.7.0.tgz_1460965081123_0.01644919253885746"},"_npmUser":{"name":"fiddur","email":"fredrik@liljegren.org"},"_npmVersion":"3.3.12","_rev":"1-ec6daed75376cb9cc7176bfb97bf458e","_shasum":"bddb38284fb5f09c7a02924727b1b9df6982a53e","author":{"name":"Textalk AB http://textalk.se/"},"directories":{},"dist-tags":{"latest":"0.7.0"},"dist":{"shasum":"bddb38284fb5f09c7a02924727b1b9df6982a53e","tarball":"http://registry.npmjs.org/jquery-jsonrpcclient/-/jquery-jsonrpcclient-0.7.0.tgz"},"maintainers":[{"name":"fiddur","email":"fredrik@liljegren.org"}],"readmeFilename":"README.md","time":{"modified":"2016-04-18T07:38:03.455Z","created":"2016-04-18T07:38:03.455Z","0.7.0":"2016-04-18T07:38:03.455Z"}}}