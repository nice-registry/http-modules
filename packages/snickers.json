{"name":"snickers","repository":"https://github.com/michielbdejong/snickers","version":"0.0.1","dependencies":{"docker-activator":"0.0.9","spdy":"*","http-proxy":"*","node-static":"*","git-tools":"*","native-dns":"*","mkdirp":"*","async":"*","node-snitch":"0.0.4","indiehosters-applications":"0.0.1"},"main":"snickers.js","gitHead":"7cc9bfbc2bc7762804f4ee0baea7c1c8d1f10c7c","description":"This proxy takes its config from `./config.json`, and then listens on ports 443 and 80. When a request comes in on http port 80, it is redirected to https port 443. It will use certificates from `/etc/snitch/<domain.com>/`. If there is no TLS certificate ","homepage":"https://github.com/michielbdejong/snickers","scripts":{},"versions":[{"number":"0.0.1","date":"2015-07-16T09:29:08.717Z"}],"readme":"# Snickers-proxy\n\nThis proxy takes its config from `./config.json`, and then listens on ports 443 and 80.\nWhen a request comes in on http port 80, it is redirected to https port 443.\nIt will use certificates from `/etc/snitch/<domain.com>/`. If there is no TLS certificate\nthere, it will try to register one through [LetsEncrypt](https://letsencrypt.org/).\n\nIt will then pull the necessary\nDocker image from https://registry.hub.docker.com/repos/indiehosters/ (e.g. 'indiehosters/lamp'\nfor application 'lamp'), and create and start a container. Once the container is started, it\nwill proxy the https request to port 80 on the container, which was still waiting to be proxied.\n\nThe important data of the container (for instance a dump of the database) will be stored on the\nhost system under /data/domains/<domain.com>.\n\nOnce a container is running for a domain name, it obviously proxies all traffic to it directly.\nIf this container exists but is stopped, it will start it before proxying the request.\n\nIn the current version containers will keep running forever, but the idea is to automatically stop\nand destroy containers when:\n\n* a container has been running for a long time without receiving any network requests\n* there are too many containers running\n* there is little free memory left on the host system\n\nBefore stopping a container, it will call `/snapshot.sh` inside the container, to give the container\na chance to dump its database to disk before it is stopped and destroyed.\n\n## Usage\n\n````bash\ngit clone https://github.com/michielbdejong/snickers-proxy\ncd snickers-proxy\nnpm install\ncp example/config.json .\nsudo cp -r example/snitch /etc\nsudo mkdir -p /data/domains\n````\n\nIf you are trying this out on localhost, then add a line '127.0.0.1 test.com' into your /etc/hosts. If\nyou run this in production then you obviously want to configure the real domains in config.json, and\nput real certificates under /etc/snitch.\n\nOnce all of this is set up, run:\n````bash\nsudo node snickers\n````\n\nNow run:\n\n````bash\ncurl -kI https://test.com/ # you should see a 403 Forbidden response\nsudo cp example/index.html /data/domains/test.com/lamp/www-content/\ncurl -kI https://test.com/ # you should see a 200 OK response\nsudo docker ps # a container named 'test.com' should be running\n````\n\n# Requirements\n\nSnickers requires Docker 1.3+, nodejs, and the packages it installs when you run `npm install` in the root of this repo. See my [hosting](https://github.com/michielbdejong/hosting) repo for more details on how I use this proxy to host static and dynamic sites. Use at your own risk.\n\nEach time you configure a new domain, update `config.json`, which Snicker will load in once every minute.\n\nTo add a domain, it's not necessary to restart snickers. Just make sure it exists under `/data/domains`, add it in config.json,\nand within the next 60 seconds, snickers will have picked it up and started the deploy.\n\nBy default, a LetsEncrypt cert will be used (this only works if the domain is a real FQDN and actually points to the server with\na DNS record). To install a different TLS certificate (for instance from StartSSL),\nconcatenate the public cert into `/etc/snitch/<example.com>/cert.pem`, the private key into\n`/etc/snitch/<example.com>/key.pem`, and the chain cert (if any) into\n`/etc/snitch/<example.com>/ca.pem`. Snickers will scan this folder every 10 minutes, and start using the new cert when it\nfinds it.\n\nIt's probably a good idea to save your config.json to a private git repo, and if you use StartSSL or other\nhand-registered certs, you may want to do the same with /etc/snitch.\n","created":"2015-07-16T09:29:08.717Z","modified":"2015-07-16T09:29:08.717Z","lastPublisher":{"name":"michielbdejong","email":"michiel@unhosted.org"},"owners":[{"name":"michielbdejong","email":"michiel@unhosted.org"}],"other":{"_attachments":{},"_from":".","_id":"snickers","_npmUser":{"name":"michielbdejong","email":"michiel@unhosted.org"},"_npmVersion":"1.4.21","_rev":"1-94f5fda11b2af742ae155257615b04b7","_shasum":"1825cd2b86246243188f8ed33436de1a47fa47cf","bugs":{"url":"https://github.com/michielbdejong/snickers/issues"},"directories":{},"dist-tags":{"latest":"0.0.1"},"dist":{"shasum":"1825cd2b86246243188f8ed33436de1a47fa47cf","tarball":"http://registry.npmjs.org/snickers/-/snickers-0.0.1.tgz"},"maintainers":[{"name":"michielbdejong","email":"michiel@unhosted.org"}],"readmeFilename":"README.md","time":{"modified":"2015-07-16T09:29:08.717Z","created":"2015-07-16T09:29:08.717Z","0.0.1":"2015-07-16T09:29:08.717Z"}}}