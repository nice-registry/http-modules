{"name":"geoip-server","description":"Simple HTTP GeoIP API server.","version":"0.0.5","keywords":["geo","geoip","geo-ip","geo ip","geoip server"],"repository":"https://github.com/andyburke/node-geoip-server","main":"index.js","bin":{"geoip-server":"cli.js"},"dependencies":{"commander":"^1.2.0","express":"4.0.x","geoip-native":"git+https://github.com/andyburke/node-geoip-native","humanize":"0.0.9","node-fs":"^0.1.7","node.extend":"1.0.x"},"engine":"node >= 0.10.0","gitHead":"250316d793994035a94ad26a352f6042fe9d7154","homepage":"https://github.com/andyburke/node-geoip-server","scripts":{},"versions":[{"number":"0.0.1","date":"2014-08-11T02:11:24.963Z"},{"number":"0.0.2","date":"2014-08-11T05:17:14.570Z"},{"number":"0.0.3","date":"2014-08-11T06:34:33.481Z"},{"number":"0.0.4","date":"2014-08-11T07:07:20.779Z"},{"number":"0.0.5","date":"2015-03-21T03:07:16.946Z"}],"readme":"GeoIPServer\n=========\n\nGeoIPServer is a small, simple *node.js* module that allows simple IP geolocation requests. It also comes with a convenient command line utility for creating a standalone server.\n\n## Installation\n\nGeoIPServer requires *node.js*, *npm* and the requisite *data files*.\n\nYou can install GeoIPServer for use in your own project:\n\n```\nnpm install geoip-server\n```\n\nOr you can install GeoIPServer globally, making it easy to run the standalone server:\n\n```\nsudo npm install geoip-server -g\n```\n\n## Usage\n\n### In your project:\n\nIf you're already using express, you can attach GeoIPServer directly to your app:\n\n```javascript\nvar GeoIPServer = require( 'geoip-server' );\n\nvar geoIPServer = new GeoIPServer( {\n    url: '/ip/:ip',\n    secret: 'this is the secret key'\n} );\n\ngeoIPServer.attach( app ); // attach to an existing express app\n```\n\nIf you don't already have an express app, you can tell GeoIPServer to listen on its own:\n\n```javascript\ngeoIPServer.listen( {\n    port: 8888 \n} );\n```\n\nGeoIPServer also supports SSL:\n\n```javascript\ngeoIPServer.listen( {\n    port: 8888,\n    ssl: {\n        key: './path/to/ssl.key',\n        cert: './path/to/ssl.crt',\n        port: 4443\n    }\n} );\n```\n\n### As a standalone server:\n\n```\n  Usage: geoip-server [options]\n\n  Options:\n\n    -h, --help                 output usage information\n    -s, --secret <secret key>  Specify the secret key for the storehouse. !!REQUIRED!!\n    --url <url>                Specify the upload url. Eg: --url \"/uploadfile\"  Default: /upload\n    -p, --port <port>          Specify the port to listen on. Default: 8888\n    --sslkey <keyfile>         Specify an SSL key file.\n    --sslcert <certfile>       Specify an SSL cert file.\n    --quiet                    Do not print out events.\n```\n\nExample:\n\n```\ngeoip-server -s \"this is the secret key\" --url /test/:ip --quiet\n```\n\nThis would start a GeoIPServer with the secret key \"this is the secret key\" that:\n - Has an lookup endpoint url of: /test/:ip\n - Will not print out request logs\n\n## Cool, how do I keep everyone on the internet from querying my server?\n\nThat's where the secret key comes in: to make a request you must send a signature along for validation.\n\nThe signature is a SHA1 of some information about the request plus the secret key.\n\nThe signature you send match this signature. To generate a signature, you would execute:\n\n```javascript\nvar verification = '';\nfor ( var key in Object.keys( optionalQueryParams ).sort() ) {\n    verification += key + '=' + optionalQueryParams[ key ] + '&';\n}\n\nverification += 'ip=' + ipToLookup + '&';\nverification += 'secret=' + 'your secret code';\n\nvar signature = crypto.createHash( 'sha1' ).update( verification ).digest( 'hex' );\n```\n\n## That's great, but how do I generate a signature without leaking my secret key?\n\nGood question! GeoIPServer is mostly intended to be used as a part of an existing web infrastructure where you already have some kind of web service running.\n\nIf you're using GeoIPServer internally, you could skip the secret key altogether and just limit incoming connections to approved IPs.\n\nIf you'd like to expose it externally, though, you can calculate the signature for the client on your server:\n\n```javascript\najaxCall( {\n    url: '/api/getipgeolocationsignature',\n    type: 'POST',\n    data: {\n        ip: ipAddressToLookup\n    },\n    success: function( signature ) {\n        // here your API has given us back a signature that allows this request\n\n        ajaxCall( {\n            url: '/ip/' + ipAddressToLookup,\n            type: 'GET',\n            data: {\n                signature: signature\n            },\n            success: function( lookup ) {\n                console.log( lookup );\n            }\n        } );\n    }\n} );\n```\n\n# CREDIT WHERE CREDIT IS DUE\n\nThanks to Philip Tellis (@bluesmoon) for his geoip-lite library, which GeoIPServer is mostly a small wrapper around.\n\n# CHANGELOG\n\nv0.0.1\n------\n- Initial release.\n","created":"2014-08-11T02:11:24.963Z","modified":"2015-03-21T03:07:16.946Z","lastPublisher":{"name":"cardoni","email":"greg@cardoni.net"},"owners":[{"name":"andyburke","email":"aburke@bitflood.org"},{"name":"cardoni","email":"greg@cardoni.net"}],"other":{"_attachments":{},"_from":".","_id":"geoip-server","_nodeVersion":"0.12.0","_npmUser":{"name":"cardoni","email":"greg@cardoni.net"},"_npmVersion":"2.5.1","_rev":"1-f673e80b9b94299c5647743e17fc680b","_shasum":"e7a4aa0d9997926f4d797537d94342cb07ae05b3","author":{"name":"Andy Burke","email":"aburke@bitflood.org"},"bugs":{"url":"https://github.com/andyburke/node-geoip-server/issues"},"contributors":[{"name":"Greg Cardoni","email":"greg@cardoni.net","url":"http://cardoni.net"},{"name":"Philip Tellis","email":"philip@bluesmoon.info","url":"http://bluesmoon.info"}],"directories":{},"dist-tags":{"latest":"0.0.5"},"dist":{"shasum":"e7a4aa0d9997926f4d797537d94342cb07ae05b3","tarball":"http://registry.npmjs.org/geoip-server/-/geoip-server-0.0.5.tgz"},"maintainers":[{"name":"andyburke","email":"aburke@bitflood.org"},{"name":"cardoni","email":"greg@cardoni.net"}],"readmeFilename":"README.md","time":{"modified":"2015-03-21T03:07:16.946Z","created":"2014-08-11T02:11:24.963Z","0.0.1":"2014-08-11T02:11:24.963Z","0.0.2":"2014-08-11T05:17:14.570Z","0.0.3":"2014-08-11T06:34:33.481Z","0.0.4":"2014-08-11T07:07:20.779Z","0.0.5":"2015-03-21T03:07:16.946Z"}}}