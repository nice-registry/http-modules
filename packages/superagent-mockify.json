{"name":"superagent-mockify","description":"superagent plugin allowing to simulate HTTP calls by returning what you want","version":"1.12.2","keywords":["superagent","superagent-mockify","mock","isomorphic"],"license":"MIT","main":"./lib/superagent-mockify.js","repository":"https://github.com/marudhupandiyang/superagent-mockify","dependencies":{"qs":"^2.3.3","superagent":"^1.1.0"},"devDependencies":{"component-as-module":"0.3.0","eslint":"0.12.0","nodeunit":"0.9.0"},"scripts":{"test":"./node_modules/nodeunit/bin/nodeunit ./tests","lint":"./node_modules/eslint/bin/eslint.js ./lib"},"gitHead":"cb0fff42a7f6bb8e274bf44d35ad4da4d1fe034a","homepage":"https://github.com/marudhupandiyang/superagent-mockify#readme","versions":[{"number":"1.12.0","date":"2016-10-14T06:24:45.482Z"},{"number":"1.12.1","date":"2016-10-14T06:45:26.887Z"},{"number":"1.12.2","date":"2016-10-14T07:02:45.354Z"}],"readme":"<p align=\"center\">\n<b><a href=\"#installation\">Installation</a></b>\n|\n<b><a href=\"#usage\">Usage</a></b>\n|\n<b><a href=\"#supported-methods\">Supported Methods</a></b>\n|\n<b><a href=\"#tests\">Tests</a></b>\n|\n<b><a href=\"#credits\">Credits</a></b>\n|\n<b><a href=\"#license\">License</a></b>\n</p>\n\n# superagent-mockify\n\n[superagent](https://github.com/visionmedia/superagent) plugin allowing to simulate HTTP calls by returning data fixtures based on the requested URL with an optional delay(simulating network call).\n\n**Note**: this plugin is developed for `superagent: ^v1.1.0`.\n\nSee [this post](http://tech.m6web.fr/how-did-we-mock-the-backend-developers.html) to know why we use superagent-mock at M6Web.\n\n## Credits\nInspired from [superagent-mock](https://github.com/M6Web/superagent-mock) by [M6Web](https://github.com/M6Web)\n\n## Installation\n\nInstall with [npm](http://npmjs.org/):\n\n```sh\n$ npm install superagent-mockify\n```\n\n## Usage\n\nFirst, you have to define the URLs to mock in a configuration file:\n\n```js\n// ./superagent-mockify-config.js file\nmodule.exports = [\n  {\n    /**\n     * regular expression of URL\n     */\n    pattern: 'https://domain.example(.*)',\n\n    /**\n     * The amount of time that should be delayed to simulate the dealy in network call.\n     * Time is in milliseconds\n     */\n    delayResponse: 1000,\n\n    /**\n     * returns the data\n     *\n     * @param match array Result of the resolution of the regular expression\n     * @param params object sent by 'send' function\n     * @param headers object set by 'set' function\n     */\n    fixtures: function (match, params, headers) {\n      /**\n       * Returning error codes example:\n       *   request.get('https://domain.example/404').end(function(err, res){\n       *     console.log(err); // 404\n       *     console.log(res.notFound); // true\n       *   })\n       */\n      if (match[1] === '/404') {\n        throw new Error(404);\n      }\n\n      /**\n       * Checking on parameters example:\n       *   request.get('https://domain.example/hero').send({superhero: \"superman\"}).end(function(err, res){\n       *     console.log(res.body); // \"Your hero: superman\"\n       *   })\n       */\n\n      if (match[1] === '/hero') {\n        if(params['superhero']) {\n          return 'Your hero:' + params['superhero'];\n        } else {\n          return 'You didnt chose a hero';\n        }\n      }\n\n\n      /**\n       * Checking on headers example:\n       *   request.get('https://domain.example/authorized_endpoint').set({Authorization: \"9382hfih1834h\"}).end(function(err, res){\n       *     console.log(res.body); // \"Authenticated!\"\n       *   })\n       */\n\n      if (match[1] === '/authorized_endpoint') {\n        if(headers['Authorization']) {\n          return 'Authenticated!';\n        } else {\n          throw new Error(401); // Unauthorized\n        }\n      }\n\n    },\n\n    /**\n     * returns the result of the GET request\n     *\n     * @param match array Result of the resolution of the regular expression\n     * @param data  mixed Data returns by `fixtures` attribute\n     */\n    get: function (match, data) {\n      return {\n        body: data\n      };\n    },\n\n    /**\n     * returns the result of the POST request\n     *\n     * @param match array Result of the resolution of the regular expression\n     * @param data  mixed Data returns by `fixtures` attribute\n     */\n    post: function (match, data) {\n      return {\n        code: 201\n      };\n    }\n  },\n  ...\n];\n```\n\nThen use the plugin:\n\n```js\n// ./server.js file\nvar request = require('superagent');\nvar config = require('./superagent-mockify-config');\n\n// Before tests\nvar superagentMockify = require('superagent-mockify')(request, config);\n\n...\n\n// After tests\nsuperagentMockify.unset();\n```\n\n## Supported methods\n\nAll request methods are supported (get, put, post, etc.).\n\nEach request method mock have to be declared in the config file. Otherwise, the `callback` method is used.\n\n## Logging\n\nYou can monitor each call, that has been intercepted by superagent-mockify or not, by passing a callback function at initialization.\n\n``` js\n// ./server.js file\nvar request = require('superagent');\nvar config = require('./superagent-mockify-config');\n\nvar logger = function(log)  {\n  console.log('superagent call', log);\n};\n\n// Before tests\nvar superagentMock = require('superagent-mockify')(request, config, logger);\n\n...\n\n// After tests\nsuperagentMock.unset();\n```\n\nThe callback function will be called with an object containing the following informations\n - data : data used with `superagent.send` function\n - headers : array of headers given by `superagent.set` function\n - matcher : regex matching the current url which is defined in the provided config\n - url : url which superagent was called\n - method : HTTP method used for the call\n - timestamp : timestamp of the superagent call\n - mocked : true if the call was mocked by superagent mock, false if it used superagent real methods\n\n## Tests\n\nTo run units tests: `npm test`.\n\nTo check code style: `npm run lint`.\n\n\n## Credits\n\nDevelopped by the [Cytron Team](http://cytron.fr/) of [M6 Web](http://tech.m6web.fr/).\nTested with [nodeunit](https://github.com/caolan/nodeunit).\n\n## License\n\nsuperagent-mockify is licensed under the [MIT license](LICENSE).\n","created":"2016-10-14T06:24:45.482Z","modified":"2016-10-14T07:02:45.354Z","lastPublisher":{"name":"marudhupandiyang","email":"marudhupandiyang@gmail.com"},"owners":[{"name":"marudhupandiyang","email":"marudhupandiyang@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"superagent-mockify","_nodeVersion":"6.3.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/superagent-mockify-1.12.2.tgz_1476428565108_0.10588606959208846"},"_npmUser":{"name":"marudhupandiyang","email":"marudhupandiyang@gmail.com"},"_npmVersion":"3.10.3","_rev":"1-fbe315668671de5af38a826828caebeb","_shasum":"3d3ac9293540bf4f7da708c57caa6dbfd4cec7d0","author":{"name":"marudhupandiyang"},"bugs":{"url":"https://github.com/marudhupandiyang/superagent-mockify/issues"},"directories":{},"dist-tags":{"latest":"1.12.2"},"dist":{"shasum":"3d3ac9293540bf4f7da708c57caa6dbfd4cec7d0","tarball":"http://registry.npmjs.org/superagent-mockify/-/superagent-mockify-1.12.2.tgz"},"maintainers":[{"name":"marudhupandiyang","email":"marudhupandiyang@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-14T07:02:45.354Z","created":"2016-10-14T06:24:45.482Z","1.12.0":"2016-10-14T06:24:45.482Z","1.12.1":"2016-10-14T06:45:26.887Z","1.12.2":"2016-10-14T07:02:45.354Z"}}}