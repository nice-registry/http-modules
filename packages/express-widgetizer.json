{"name":"express-widgetizer","version":"0.5.11","description":"Create a GraphQL HTTP server with Express.","license":"BSD-3-Clause","repository":"https://github.com/apollostack/express-graphql","keywords":["express","graphql","middleware","api"],"main":"dist/index.js","files":["dist","README.md","LICENSE","PATENTS"],"options":{"mocha":"--require resources/mocha-bootload src/**/__tests__/**/*.js"},"scripts":{"prepublish":". ./resources/prepublish.sh","test":"npm run lint && npm run testonly","testonly":"mocha $npm_package_options_mocha","lint":"eslint src","check":"flow check","build":"rm -rf dist/* && babel src --ignore __tests__ --out-dir dist","watch":"babel --optional runtime resources/watch.js | node","cover":"babel-node node_modules/.bin/isparta cover --root src --report html node_modules/.bin/_mocha -- $npm_package_options_mocha","cover:lcov":"babel-node node_modules/.bin/isparta cover --root src --report lcovonly node_modules/.bin/_mocha -- $npm_package_options_mocha","preversion":"npm test"},"dependencies":{"content-type":"~1.0.1","http-errors":"~1.3.1","raw-body":"~2.1.2"},"devDependencies":{"babel":"5.8.21","babel-core":"5.8.22","babel-eslint":"4.1.8","babel-runtime":"5.8.20","body-parser":"^1.14.0","chai":"3.2.0","coveralls":"2.11.4","eslint":"1.1.0","eslint-plugin-babel":"2.1.1","express":"4.13.3","express3":"*","flow-bin":"0.21.0","graphql":"0.5.0","isparta":"3.0.3","mocha":"2.2.5","multer":"1.0.3","sane":"1.1.3","supertest":"1.0.1","supertest-as-promised":"2.0.2"},"peerDependencies":{"graphql":"^0.5.0 || ^0.6.0"},"gitHead":"7f5116d67acf2465ead3048c4d9f34183d85cab2","homepage":"https://github.com/apollostack/express-graphql#readme","versions":[{"number":"0.5.1","date":"2016-05-13T22:24:21.035Z"},{"number":"0.5.2","date":"2016-05-14T00:39:49.233Z"},{"number":"0.5.3","date":"2016-05-16T21:20:19.224Z"},{"number":"0.5.4","date":"2016-05-16T23:46:39.735Z"},{"number":"0.5.5","date":"2016-05-17T00:48:54.691Z"},{"number":"0.5.6","date":"2016-05-17T00:57:49.094Z"},{"number":"0.5.7","date":"2016-05-17T01:03:31.384Z"},{"number":"0.5.8","date":"2016-05-17T21:48:11.976Z"},{"number":"0.5.9","date":"2016-05-19T20:01:30.349Z"},{"number":"0.5.10","date":"2016-05-26T00:16:38.021Z"},{"number":"0.5.11","date":"2016-06-07T00:50:03.770Z"}],"readme":"GraphQL Express Middleware\n==========================\n\n[![Build Status](https://travis-ci.org/graphql/express-graphql.svg?branch=master)](https://travis-ci.org/graphql/express-graphql)\n[![Coverage Status](https://coveralls.io/repos/graphql/express-graphql/badge.svg?branch=master&service=github)](https://coveralls.io/github/graphql/express-graphql?branch=master)\n\nCreate a GraphQL HTTP server with [Express](http://expressjs.com).\n\n```sh\nnpm install --save express-graphql\n```\n\nInstall express-graphql as middleware in your express server:\n\n```js\nvar graphqlHTTP = require('express-graphql');\n\nvar app = express();\n\napp.use('/graphql', graphqlHTTP({ schema: MyGraphQLSchema, graphiql: true }));\n```\n\n\n### Options\n\nThe `graphqlHTTP` function accepts the following options:\n\n  * **`schema`**: A `GraphQLSchema` instance from [`graphql-js`][].\n    A `schema` *must* be provided.\n\n  * **`context`**: A value to pass as the `context` to the `graphql()`\n    function from [`graphql-js`][].\n\n  * **`rootValue`**: A value to pass as the `rootValue` to the `graphql()`\n    function from [`graphql-js`][].\n\n  * **`pretty`**: If `true`, any JSON response will be pretty-printed.\n\n  * **`formatError`**: An optional function which will be used to format any\n    errors produced by fulfilling a GraphQL operation. If no function is\n    provided, GraphQL's default spec-compliant [`formatError`][] function will\n    be used.\n\n  * **`validationRules`**: Optional additional validation rules queries must\n    satisfy in addition to those defined by the GraphQL spec.\n\n  * **`graphiql`**: If `true`, may present [GraphiQL][] when loaded directly\n    from a browser (a useful tool for debugging and exploration).\n\n\n#### Debugging\n\nDuring development, it's useful to get more information from errors, such as\nstack traces. Providing a function to `formatError` enables this:\n\n```js\nformatError: error => ({\n  message: error.message,\n  locations: error.locations,\n  stack: error.stack\n})\n```\n\n\n### HTTP Usage\n\nOnce installed at a path, `express-graphql` will accept requests with\nthe parameters:\n\n  * **`query`**: A string GraphQL document to be executed.\n\n  * **`variables`**: The runtime values to use for any GraphQL query variables\n    as a JSON object.\n\n  * **`operationName`**: If the provided `query` contains multiple named\n    operations, this specifies which operation should be executed. If not\n    provided, a 400 error will be returned if the `query` contains multiple\n    named operations.\n\n  * **`raw`**: If the `graphiql` option is enabled and the `raw` parameter is\n    provided raw JSON will always be returned instead of GraphiQL even when\n    loaded from a browser.\n\nGraphQL will first look for each parameter in the URL's query-string:\n\n```\n/graphql?query=query+getUser($id:ID){user(id:$id){name}}&variables={\"id\":\"4\"}\n```\n\nIf not found in the query-string, it will look in the POST request body.\n\nIf a previous middleware has already parsed the POST body, the `request.body`\nvalue will be used. Use [`multer`][] or a similar middleware to add support\nfor `multipart/form-data` content, which may be useful for GraphQL mutations\ninvolving uploading files. See an [example using multer](https://github.com/graphql/express-graphql/blob/master/src/__tests__/http-test.js#L650).\n\nIf the POST body has not yet been parsed, graphql-express will interpret it\ndepending on the provided *Content-Type* header.\n\n  * **`application/json`**: the POST body will be parsed as a JSON\n    object of parameters.\n\n  * **`application/x-www-form-urlencoded`**: this POST body will be\n    parsed as a url-encoded string of key-value pairs.\n\n  * **`application/graphql`**: The POST body will be parsed as GraphQL\n    query string, which provides the `query` parameter.\n\n\n### Advanced Options\n\nIn order to support advanced scenarios such as installing a GraphQL server on a\ndynamic endpoint or accessing the current authentication information,\nexpress-graphql allows options to be provided as a function of each\nexpress request, and that function may return either an options object, or a\nPromise for an options object.\n\nThis example uses [`express-session`][] to provide GraphQL with the currently\nlogged-in session as the `context` of the query execution.\n\n```js\nvar session = require('express-session');\nvar graphqlHTTP = require('express-graphql');\n\nvar app = express();\n\napp.use(session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}));\n\napp.use('/graphql', graphqlHTTP(request => ({\n  schema: MySessionAwareGraphQLSchema,\n  context: request.session,\n  graphiql: true\n})));\n```\n\nThen in your type definitions, access via the third \"context\" argument in your\n`resolve` function:\n\n```js\nnew GraphQLObjectType({\n  name: 'MyType',\n  fields: {\n    myField: {\n      type: GraphQLString,\n      resolve(parentValue, args, session) {\n        // use `session` here\n      }\n    }\n  }\n});\n```\n\n[`graphql-js`]: https://github.com/graphql/graphql-js\n[`formatError`]: https://github.com/graphql/graphql-js/blob/master/src/error/formatError.js\n[GraphiQL]: https://github.com/graphql/graphiql\n[`multer`]: https://github.com/expressjs/multer\n[`express-session`]: https://github.com/expressjs/session\n","created":"2016-05-13T22:24:21.035Z","modified":"2017-06-22T23:32:25.350Z","lastPublisher":{"name":"helfer","email":"helfer@meteor.com"},"owners":[{"name":"helfer","email":"helfer@meteor.com"},{"name":"mdg","email":"npm@meteor.com"}],"other":{"_attachments":{},"_from":".","_id":"express-widgetizer","_nodeVersion":"5.6.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/express-widgetizer-0.5.11.tgz_1465260600862_0.7612633239477873"},"_npmUser":{"name":"helfer","email":"helfer@meteor.com"},"_npmVersion":"3.6.0","_rev":"2-cb26acc278a68b2b99171eb199bf5064","_shasum":"cf9e7025f6c0dd8d14e291dc1a919293561eb733","bugs":{"url":"https://github.com/apollostack/express-graphql/issues"},"contributors":[{"name":"Jonas Helfer","email":"jonas@helfer.email"}],"directories":{"lib":"./dist"},"dist-tags":{"latest":"0.5.11"},"dist":{"shasum":"cf9e7025f6c0dd8d14e291dc1a919293561eb733","tarball":"http://registry.npmjs.org/express-widgetizer/-/express-widgetizer-0.5.11.tgz"},"maintainers":[{"name":"helfer","email":"helfer@meteor.com"},{"name":"mdg","email":"npm@meteor.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-22T23:32:25.350Z","created":"2016-05-13T22:24:21.035Z","0.5.1":"2016-05-13T22:24:21.035Z","0.5.2":"2016-05-14T00:39:49.233Z","0.5.3":"2016-05-16T21:20:19.224Z","0.5.4":"2016-05-16T23:46:39.735Z","0.5.5":"2016-05-17T00:48:54.691Z","0.5.6":"2016-05-17T00:57:49.094Z","0.5.7":"2016-05-17T01:03:31.384Z","0.5.8":"2016-05-17T21:48:11.976Z","0.5.9":"2016-05-19T20:01:30.349Z","0.5.10":"2016-05-26T00:16:38.021Z","0.5.11":"2016-06-07T00:50:03.770Z"}}}