{"name":"yakbak","version":"2.6.0","description":"Record and playback HTTP responses","main":"index.js","scripts":{"lint":"eslint cli.js index.js lib test","test":"mocha"},"keywords":["http","https","record","playback","mock","service","vcr"],"repository":"https://github.com/flickr/yakbak","bin":{"yakbak":"./cli.js"},"license":"MIT","devDependencies":{"eslint":"^2.9.0","eslint-config-flickr":"~1.1.7","mocha":"~2.3.4","os-tmpdir":"^1.0.1","rimraf":"^2.5.2","semver":"^5.1.0","supertest":"~0.15.0"},"dependencies":{"bluebird":"~3.3.4","debug":"~2.1.2","ejs":"~2.3.1","incoming-message-hash":"~3.2.1","mkdirp":"~0.5.0"},"gitHead":"6aedac6158cc3ac546615f3910d0c2f82cb9e8c9","homepage":"https://github.com/flickr/yakbak#readme","versions":[{"number":"2.2.2","date":"2016-04-25T19:21:10.934Z"},{"number":"2.4.0","date":"2016-04-25T23:04:56.274Z"},{"number":"2.4.1","date":"2016-04-26T01:17:10.171Z"},{"number":"2.4.2","date":"2016-05-06T15:20:05.404Z"},{"number":"2.4.3","date":"2016-05-10T20:27:21.708Z"},{"number":"2.5.0","date":"2016-06-22T22:48:58.102Z"},{"number":"2.6.0","date":"2017-05-03T23:17:38.322Z"}],"readme":"# yakbak\n\nRecord HTTP interactions The Node Wayâ„¢. Inspired by ruby's [vcr][1].\n\n> [![Build Status](https://travis-ci.org/flickr/yakbak.svg?branch=master)](https://travis-ci.org/flickr/yakbak)\n\n## install\n\n``` bash\n$ npm install yakbak --save-dev\n```\n## usage\n\nThe main idea behind testing HTTP clients with yakbak is:\n\n1. Make your client's target host configurable.\n2. Set up a yakbak server locally to proxy the target host.\n3. Point your client at the yakbak server.\n\nThen develop or run your tests. If a recorded HTTP request is found on disk, it will be played back instead of hitting the target host. If no recorded request is found, the request will be forwarded to the target host and recorded to disk.\n\n### yakbak(host, options)\n\nReturns a function of the signature `function (req, res)` that you can give to an `http.Server` as its handler.\n\n``` js\nvar handler = yakbak('http://api.flickr.com', {\n\tdirname: __dirname + '/tapes'\n});\n```\n\n#### options\n\n- `dirname` the path where recorded responses will be written (required).\n- `noRecord` if true, requests will return a 404 error if the tape doesn't exist\n- `hash(req, body)` provide your own IncomingMessage hash function\n\n### with node's http module\n\nyakbak provides a handler with the same signature that `http.Server` expects so you can create your own proxy:\n\n``` js\nvar http = require('http');\nvar yakbak = require('yakbak');\n\nhttp.createServer(yakbak('http://api.flickr.com', {\n\tdirname: __dirname + '/tapes'\n})).listen(3000);\n```\n\nNow any requests to `http://localhost:3000` will be proxied to `http://api.flickr.com` and recorded to `/tapes` for future playback.\n\n### with express\n\nNeed more flexibility? [express](https://github.com/expressjs/express) expects the same function signature, so you can use yakbak just like you would any other middleware:\n\n``` js\nvar express = require('express');\nvar yakbak = require('yakbak');\n\nvar flickr = yakbak('http://api.flickr.com', {\n\tdirname: __dirname + '/tapes'\n});\n\nvar upload = yakbak('http://up.flickr.com', {\n\tdirname: __dirname + '/tapes'\n});\n\nexpress().use(function (req, res, next) {\n\tif (req.path.indexOf('/services/upload') === 0) {\n\t  upload(req, res);\n\t} else {\n\t  flickr(req, res);\n\t}\n}).listen(3000);\n```\n\n### as a standalone response server\n\nEach recorded response is itself a node module with the same handler signature, so if you want to create a server that replays a single response, you can do so easily:\n\n``` js\nvar http = require('http');\nvar tape = require('./tapes/1117f3d81490d441d826dd2fb26470f9.js');\n\nhttp.createServer(tape).listen(3000);\n```\n\n### on the command line\n\nyakbak also ships with a `yakbak` utility that will start an HTTP server to play back a given tape.\n\n``` bash\n$ yakbak\nError: file is required\nUsage: yakbak <file>\n$ yakbak ./tapes/1117f3d81490d441d826dd2fb26470f9.js\nServer listening on port 3000\n* Connection from 127.0.0.1 port 63669\n< GET / HTTP/1.1\n< host: localhost:3000\n< user-agent: curl/7.43.0\n< accept: */*\n<\n> HTTP/1.1 201 Created\n> content-type: text/html\n> date: Sat, 26 Oct 1985 08:20:00 GMT\n> connection: close\n> transfer-encoding: chunked\n>\n* Connection closed\n```\n\n## why not [insert other project here]?\n\nCheck out [this blog post][2] about why we chose a reverse proxy over other existing approaches to recording HTTP interactions.\n\n## license\n\nThis software is free to use under the MIT license. See the [LICENSE][] file for license text and copyright information.\n\n[1]: https://github.com/vcr/vcr\n[2]: http://code.flickr.net/2016/04/25/introducing-yakbak-record-and-playback-http-interactions-in-nodejs/\n[LICENSE]: https://github.com/flickr/yakbak/blob/master/LICENSE\n","starsCount":1,"created":"2016-04-25T19:21:10.934Z","modified":"2017-05-03T23:17:38.322Z","lastPublisher":{"name":"jeremyruppel","email":"jeremy.ruppel@gmail.com"},"owners":[{"name":"jeremyruppel","email":"jeremy.ruppel@gmail.com"},{"name":"superic","email":"eric.willis@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"yakbak","_nodeVersion":"0.10.40","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/yakbak-2.6.0.tgz_1493853458070_0.019606651039794087"},"_npmUser":{"name":"jeremyruppel","email":"jeremy.ruppel@gmail.com"},"_npmVersion":"2.14.18","_rev":"2-bed2440e3fda198a467a7c49c3ca81dc","_shasum":"bd7cc429a5090146577d892c2f52ac512da59024","author":{"name":"Jeremy Ruppel"},"bugs":{"url":"https://github.com/flickr/yakbak/issues"},"directories":{},"dist-tags":{"latest":"2.6.0"},"dist":{"shasum":"bd7cc429a5090146577d892c2f52ac512da59024","tarball":"https://registry.npmjs.org/yakbak/-/yakbak-2.6.0.tgz"},"maintainers":[{"name":"jeremyruppel","email":"jeremy.ruppel@gmail.com"},{"name":"superic","email":"eric.willis@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-03T23:17:38.322Z","created":"2016-04-25T19:21:10.934Z","2.2.2":"2016-04-25T19:21:10.934Z","2.4.0":"2016-04-25T23:04:56.274Z","2.4.1":"2016-04-26T01:17:10.171Z","2.4.2":"2016-05-06T15:20:05.404Z","2.4.3":"2016-05-10T20:27:21.708Z","2.5.0":"2016-06-22T22:48:58.102Z","2.6.0":"2017-05-03T23:17:38.322Z"},"users":{"kbakba":true}}}