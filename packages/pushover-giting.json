{"name":"pushover-giting","description":"git push deploy server over http","version":"0.0.3","repository":"https://github.com/mangoraft/pushover","main":"index.js","keywords":["git","push","deploy","http","web","repository"],"scripts":{"test":"tap test/*.js"},"dependencies":{"git-side-band-message":"0.0.3","http-duplex":"~0.0.2","inherits":"^1.0.0","mkdirp":"~0.3.4","through":"~2.2.7"},"devDependencies":{"tap":"~0.4.0","seq":"~0.3.5"},"engines":{"node":">=0.4.0"},"license":"MIT","gitHead":"9dba1187b71f72a4fe42ca9c77664ee5cc7d0600","homepage":"https://github.com/mangoraft/pushover#readme","versions":[{"number":"0.0.1","date":"2015-03-04T00:13:31.625Z"},{"number":"0.0.2","date":"2015-03-08T23:33:02.416Z"},{"number":"0.0.3","date":"2016-12-06T17:29:23.171Z"}],"readme":"# pushover\r\n\r\nServe up git repositories over http and accept git pushes.\r\n\r\n[![build status](https://secure.travis-ci.org/substack/pushover.png)](http://travis-ci.org/substack/pushover)\r\n\r\nThis library makes it super easy to set up custom git push deploy logic.\r\n\r\n![pushover](http://substack.net/images/pushover.png)\r\n\r\n# example\r\n\r\n``` js\r\nvar pushover = require('pushover');\r\nvar repos = pushover('/tmp/repos');\r\n\r\nrepos.on('push', function (push) {\r\n    console.log('push ' + push.repo + '/' + push.commit\r\n        + ' (' + push.branch + ')'\r\n    );\r\n    push.accept();\r\n});\r\n\r\nrepos.on('fetch', function (fetch) {\r\n    console.log('fetch ' + fetch.commit);\r\n    fetch.accept();\r\n});\r\n\r\nvar http = require('http');\r\nvar server = http.createServer(function (req, res) {\r\n    repos.handle(req, res);\r\n});\r\nserver.listen(7000);\r\n```\r\n\r\nthen start up the pushover server...\r\n\r\n```\r\n$ node example/simple.js \r\n```\r\n\r\nmeanwhile...\r\n\r\n```\r\n$ git push http://localhost:7000/beep master\r\nCounting objects: 356, done.\r\nDelta compression using up to 2 threads.\r\nCompressing objects: 100% (133/133), done.\r\nWriting objects: 100% (356/356), 46.20 KiB, done.\r\nTotal 356 (delta 210), reused 355 (delta 210)\r\nTo http://localhost:7000/beep\r\n * [new branch]      master -> master\r\n\r\n```\r\n\r\nand then...\r\n\r\n```\r\n$ node example/simple.js \r\npush beep.git/d5013a53a0e139804e729a12107fc212f11e64c3 (master)\r\n```\r\n\r\nor...\r\n\r\n```\r\n$ git clone http://localhost:7000/beep.git\r\n```\r\n\r\nand then...\r\n\r\n```\r\nfetch beep.git/d5013a53a0e139804e729a12107fc212f11e64c3\r\n```\r\n\r\n# methods\r\n\r\nvar pushover = require('pushover')\r\n\r\n## var repos = pushover(repoDir, opts={autoCreate:true})\r\n\r\nCreate a new repository collection from the directory `repoDir`.\r\n`repoDir` should be entirely empty except for git repo directories.\r\n\r\nIf `repoDir` is a function, `repoDir(repo)` will be used to dynamically resolve\r\nproject directories. The return value of `repoDir(repo)` should be a string path\r\nspecifying where to put the string `repo`. Make sure to return the same value\r\nfor `repo` every time since `repoDir(repo)` will be called multiple times.\r\n\r\nThe return value, `repos` is an EventEmitter that emits the events listed below\r\nin the events section.\r\n\r\nBy default, repository targets will be created if they don't exist. You can\r\ndisable that behavior with `opts.autoCreate`.\r\n\r\nIf `opts.checkout` is true, create and expected checked-out repos instead of\r\nbare repos.\r\n\r\n## repos.handle(req, res)\r\n\r\nHandle incoming HTTP requests with a connect-style middleware.\r\n\r\nEverything is admin-party by default.\r\nCheck the credentials further up the stack using basic auth or whatevs.\r\n\r\n## repos.create(repoName, cb)\r\n\r\nCreate a new bare repository `repoName` in the instance repository directory.\r\n\r\nOptionally get a callback `cb(err)` to be notified when the repository was\r\ncreated.\r\n\r\n## repos.mkdir(dir, cb)\r\n\r\nCreate a subdirectory `dir` in the repo dir with an errback `cb(err)`.\r\n\r\n## repos.list(cb) \r\n\r\nGet a list of all the repositories in the callback `cb(err, repos)`.\r\n\r\n## repos.exists(repoName, cb)\r\n\r\nFind out whether `repoName` exists in the callback `cb(exists)`.\r\n\r\n# events\r\n\r\n## repos.on('push', function (push) { ... }\r\n\r\nEmitted when somebody does a `git push` to the repo.\r\n\r\nExactly one listener must call `push.accept()` or `push.reject()`. If there are\r\nno listeners, `push.accept()` is called automatically.\r\n\r\n`push` is an http duplex object (see below) with these extra properties:\r\n\r\n* push.repo\r\n* push.commit\r\n* push.branch\r\n\r\n## repos.on('tag', function (tag) { ... }\r\n\r\nEmitted when somebody does a `git push --tags` to the repo.\r\n\r\nExactly one listener must call `tag.accept()` or `tag.reject()`. If there are\r\nno listeners, `tag.accept()` is called automatically.\r\n\r\n`tag` is an http duplex object (see below) with these extra properties:\r\n\r\n* tag.repo\r\n* tag.commit\r\n* tag.version\r\n\r\n## repos.on('fetch', function (fetch) { ... }\r\n\r\nEmitted when somebody does a `git fetch` to the repo (which happens whenever you\r\ndo a `git pull` or a `git clone`).\r\n\r\nExactly one listener must call `fetch.accept()` or `fetch.reject()`. If there are\r\nno listeners, `fetch.accept()` is called automatically.\r\n\r\n`fetch` is an http duplex objects (see below) with these extra properties:\r\n\r\n* fetch.repo\r\n* fetch.commit\r\n\r\n## repos.on('info', function (info) { ... }\r\n\r\nEmitted when the repo is queried for info before doing other commands.\r\n\r\nExactly one listener must call `info.accept()` or `info.reject()`. If there are\r\nno listeners, `info.accept()` is called automatically.\r\n\r\n`info` is an http duplex object (see below) with these extra properties:\r\n\r\n* info.repo\r\n\r\n## repos.on('head', function (head) { ... }\r\n\r\nEmitted when the repo is queried for HEAD before doing other commands.\r\n\r\nExactly one listener must call `head.accept()` or `head.reject()`. If there are\r\nno listeners, `head.accept()` is called automatically.\r\n\r\n`head` is an http duplex object (see below) with these extra properties:\r\n\r\n* head.repo\r\n\r\n## push.on('response', function(response, done) { ... })\r\n\r\nEmitted when pushover creates a resposne stream that will be sent to the git client on the other end.\r\n\r\nThis should really only be used if you want to send verbose or error messages to the remote git client.\r\n\r\n`response` is a writable stream that can accept buffers containing git packfile sidechannel transfer protocol encoded strings. `done` is a callback that must be called when you want to end the response.\r\n\r\nIf you create a response listener then you must either call the `done` function or execute the following end sequence when you want to end the response:\r\n\r\n```js\r\nresponse.queue(new Buffer('0000'))\r\nresponse.queue(null)\r\n```\r\n\r\nIf you never use the response event then the above data will be sent by default. Binding a listener to the response event will prevent the end sequence those from being sent, so you must send them yourself after sending any other messages. \r\n\r\n# http duplex objects\r\n\r\nThe arguments to each of the events `'push'`, `'fetch'`, `'info'`, and `'head'`\r\nare [http duplex](http://github.com/substack/http-duplex) that act as both http\r\nserver request and http server response objects so you can pipe to and from them.\r\n\r\nFor every event if there are no listeners `dup.accept()` will be called\r\nautomatically.\r\n\r\n## dup.accept()\r\n\r\nAccept the pending request.\r\n\r\n## dup.reject()\r\n\r\nReject the pending request.\r\n\r\n# install\r\n\r\nWith [npm](https://npmjs.org) do:\r\n\r\n```\r\nnpm install pushover\r\n```\r\n\r\n# license\r\n\r\nMIT\r\n\r\n# kudos\r\n\r\nReading through\r\n[grack](https://github.com/schacon/grack/blob/master/lib/git_http.rb)\r\nwas super handy.\r\n","created":"2015-03-04T00:13:31.625Z","modified":"2016-12-06T17:29:23.171Z","lastPublisher":{"name":"mangoraft","email":"mangoraft@gmail.com"},"owners":[{"name":"mangoraft","email":"mangoraft@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"pushover-giting","_nodeVersion":"4.5.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pushover-giting-0.0.3.tgz_1481045360892_0.08977335039526224"},"_npmUser":{"name":"mangoraft","email":"mangoraft@gmail.com"},"_npmVersion":"2.15.9","_rev":"2-c38f4a8fa60de835a04961d323fe066f","_shasum":"b4b12e4b8afde852abcddd073418dc45974dcbb6","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"bugs":{"url":"https://github.com/mangoraft/pushover/issues"},"directories":{},"dist-tags":{"latest":"0.0.3"},"dist":{"shasum":"b4b12e4b8afde852abcddd073418dc45974dcbb6","tarball":"http://registry.npmjs.org/pushover-giting/-/pushover-giting-0.0.3.tgz"},"maintainers":[{"name":"mangoraft","email":"mangoraft@gmail.com"}],"readmeFilename":"readme.markdown","time":{"modified":"2016-12-06T17:29:23.171Z","created":"2015-03-04T00:13:31.625Z","0.0.1":"2015-03-04T00:13:31.625Z","0.0.2":"2015-03-08T23:33:02.416Z","0.0.3":"2016-12-06T17:29:23.171Z"}}}