{"name":"widgetizer-express","version":"0.5.1","description":"Create a GraphQL HTTP server with Express. using graphql-js 0.5.0-beta.1","license":"BSD-3-Clause","repository":"https://github.com/apollostack/express-graphql","keywords":["express","graphql","middleware","api"],"main":"dist/index.js","files":["dist","README.md","LICENSE","PATENTS"],"options":{"mocha":"--require resources/mocha-bootload src/**/__tests__/**/*.js"},"scripts":{"prepublish":". ./resources/prepublish.sh","test":"npm run lint && npm run check && npm run testonly","testonly":"mocha $npm_package_options_mocha","lint":"eslint src","check":"flow check","build":"rm -rf dist/* && babel src --ignore __tests__ --out-dir dist","watch":"babel --optional runtime resources/watch.js | node","cover":"babel-node node_modules/.bin/isparta cover --root src --report html node_modules/.bin/_mocha -- $npm_package_options_mocha","cover:lcov":"babel-node node_modules/.bin/isparta cover --root src --report lcovonly node_modules/.bin/_mocha -- $npm_package_options_mocha","preversion":"npm test"},"dependencies":{"content-type":"~1.0.1","http-errors":"~1.3.1","raw-body":"~2.1.2"},"devDependencies":{"babel":"5.8.21","babel-core":"5.8.22","babel-eslint":"4.1.8","babel-runtime":"5.8.20","body-parser":"^1.14.0","chai":"3.2.0","coveralls":"2.11.4","eslint":"1.1.0","eslint-plugin-babel":"2.1.1","express":"4.13.3","express3":"*","flow-bin":"0.21.0","graphql":"^0.5.0-beta.1","isparta":"3.0.3","mocha":"2.2.5","multer":"1.0.3","sane":"1.1.3","supertest":"1.0.1","supertest-as-promised":"2.0.2"},"peerDependencies":{"graphql":"^0.5.0-beta.1"},"gitHead":"e475ea18bc51adf9b1dd1f2ef96140bc8a1e1483","homepage":"https://github.com/apollostack/express-graphql#readme","versions":[{"number":"0.5.0","date":"2016-04-05T21:18:38.287Z"},{"number":"0.5.1","date":"2016-04-05T21:20:46.824Z"}],"readme":"GraphQL Express Middleware\n==========================\nA fork of express-graphql for our convenience.\n\nCreate a GraphQL HTTP server with [Express](http://expressjs.com).\n\n```sh\nnpm install --save widgetizer-express\n```\n\nInstall widgetizer-express as middleware in your express server:\n\n```js\nvar graphqlHTTP = require('widgetizer-express');\n\nvar app = express();\n\napp.use('/graphql', graphqlHTTP({ schema: MyGraphQLSchema, graphiql: true }));\n```\n\n\n### Options\n\nThe `graphqlHTTP` function accepts the following options:\n\n  * **`schema`**: A `GraphQLSchema` instance from [`graphql-js`][].\n    A `schema` *must* be provided.\n\n  * **`rootValue`**: A value to pass as the rootValue to the `graphql()`\n    function from [`graphql-js`][].\n\n  * **`pretty`**: If `true`, any JSON response will be pretty-printed.\n\n  * **`formatError`**: An optional function which will be used to format any\n    errors produced by fulfilling a GraphQL operation. If no function is\n    provided, GraphQL's default spec-compliant [`formatError`][] function will\n    be used.\n\n  * **`validationRules`**: Optional additional validation rules queries must\n    satisfy in addition to those defined by the GraphQL spec.\n\n  * **`graphiql`**: If `true`, may present [GraphiQL][] when loaded directly\n    from a browser (a useful tool for debugging and exploration).\n\n\n#### Debugging\n\nDuring development, it's useful to get more information from errors, such as\nstack traces. Providing a function to `formatError` enables this:\n\n```js\nformatError: error => ({\n  message: error.message,\n  locations: error.locations,\n  stack: error.stack\n})\n```\n\n\n### HTTP Usage\n\nOnce installed at a path, `express-graphql` will accept requests with\nthe parameters:\n\n  * **`query`**: A string GraphQL document to be executed.\n\n  * **`variables`**: The runtime values to use for any GraphQL query variables\n    as a JSON object.\n\n  * **`operationName`**: If the provided `query` contains multiple named\n    operations, this specifies which operation should be executed. If not\n    provided, a 400 error will be returned if the `query` contains multiple\n    named operations.\n\n  * **`raw`**: If the `graphiql` option is enabled and the `raw` parameter is\n    provided raw JSON will always be returned instead of GraphiQL even when\n    loaded from a browser.\n\nGraphQL will first look for each parameter in the URL's query-string:\n\n```\n/graphql?query=query+getUser($id:ID){user(id:$id){name}}&variables={\"id\":\"4\"}\n```\n\nIf not found in the query-string, it will look in the POST request body.\n\nIf a previous middleware has already parsed the POST body, the `request.body`\nvalue will be used. Use [`multer`][] or a similar middleware to add support\nfor `multipart/form-data` content, which may be useful for GraphQL mutations\ninvolving uploading files. See an [example using multer](https://github.com/graphql/express-graphql/blob/master/src/__tests__/http-test.js#L603).\n\nIf the POST body has not yet been parsed, graphql-express will interpret it\ndepending on the provided *Content-Type* header.\n\n  * **`application/json`**: the POST body will be parsed as a JSON\n    object of parameters.\n\n  * **`application/x-www-form-urlencoded`**: this POST body will be\n    parsed as a url-encoded string of key-value pairs.\n\n  * **`application/graphql`**: The POST body will be parsed as GraphQL\n    query string, which provides the `query` parameter.\n\n\n### Advanced Options\n\nIn order to support advanced scenarios such as installing a GraphQL server on a\ndynamic endpoint or accessing the current authentication information,\nexpress-graphql allows options to be provided as a function of each\nexpress request.\n\nThis example uses [`express-session`][] to run GraphQL on a rootValue based on\nthe currently logged-in session.\n\n```js\nvar session = require('express-session');\nvar graphqlHTTP = require('express-graphql');\n\nvar app = express();\n\napp.use(session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}));\n\napp.use('/graphql', graphqlHTTP(request => ({\n  schema: MySessionAwareGraphQLSchema,\n  rootValue: { session: request.session },\n  graphiql: true\n})));\n```\n\nThen in your type definitions, access `session` from the rootValue:\n\n```js\nnew GraphQLObjectType({\n  name: 'MyType',\n  fields: {\n    myField: {\n      type: GraphQLString,\n      resolve(parentValue, _, { rootValue: { session } }) {\n        // use `session` here\n      }\n    }\n  }\n});\n```\n\n[`graphql-js`]: https://github.com/graphql/graphql-js\n[`formatError`]: https://github.com/graphql/graphql-js/blob/master/src/error/formatError.js\n[GraphiQL]: https://github.com/graphql/graphiql\n[`multer`]: https://github.com/expressjs/multer\n[`express-session`]: https://github.com/expressjs/session\n","created":"2016-04-05T21:18:38.287Z","modified":"2016-04-05T21:20:46.824Z","lastPublisher":{"name":"helfer","email":"helfer@meteor.com"},"owners":[{"name":"helfer","email":"helfer@meteor.com"}],"other":{"_attachments":{},"_from":".","_id":"widgetizer-express","_nodeVersion":"5.6.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/widgetizer-express-0.5.1.tgz_1459891246339_0.03319016634486616"},"_npmUser":{"name":"helfer","email":"helfer@meteor.com"},"_npmVersion":"3.6.0","_rev":"1-99c9cbadaf544700a893264810c23463","_shasum":"9a62500b77b10489e36173ae2994576e57fc1796","bugs":{"url":"https://github.com/apollostack/express-graphql/issues"},"contributors":[{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"},{"name":"Daniel Schafer","email":"dschafer@fb.com"},{"name":"Jonas Helfer","email":"helfer@meteor.com"}],"directories":{"lib":"./dist"},"dist-tags":{"latest":"0.5.1"},"dist":{"shasum":"9a62500b77b10489e36173ae2994576e57fc1796","tarball":"http://registry.npmjs.org/widgetizer-express/-/widgetizer-express-0.5.1.tgz"},"maintainers":[{"name":"helfer","email":"helfer@meteor.com"}],"readmeFilename":"README.md","time":{"modified":"2016-04-05T21:20:46.824Z","created":"2016-04-05T21:18:38.287Z","0.5.0":"2016-04-05T21:18:38.287Z","0.5.1":"2016-04-05T21:20:46.824Z"}}}