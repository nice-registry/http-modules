{"name":"express-graphql-stem","version":"3.9.9","description":"Create a GraphQL HTTP server with Express. Customized for more tracing and logging","license":"BSD-3-Clause","repository":"https://github.com/stems/express-graphql","keywords":["express","graphql","middleware","api"],"main":"dist/index.js","files":["dist","README.md","LICENSE","PATENTS"],"options":{"mocha":"--require resources/mocha-bootload src/**/__tests__/**/*.js"},"scripts":{"prepublish":". ./resources/prepublish.sh","test":"npm run lint && npm run check && npm run testonly","testonly":"mocha $npm_package_options_mocha","lint":"eslint src","check":"flow check","build":"rm -rf dist/* && babel src --ignore __tests__ --out-dir dist","watch":"babel --optional runtime resources/watch.js | node","cover":"babel-node node_modules/.bin/isparta cover --root src --report html node_modules/.bin/_mocha -- $npm_package_options_mocha","cover:lcov":"babel-node node_modules/.bin/isparta cover --root src --report lcovonly node_modules/.bin/_mocha -- $npm_package_options_mocha","preversion":"npm test"},"dependencies":{"content-type":"~1.0.1","http-errors":"~1.3.1","raw-body":"~2.1.2"},"peerDependencies":{"graphql":"0.4"},"devDependencies":{"babel":"5.8.21","babel-core":"5.8.22","babel-eslint":"4.1.8","babel-runtime":"5.8.20","body-parser":"^1.14.0","chai":"3.2.0","coveralls":"2.11.4","eslint":"1.1.0","eslint-plugin-babel":"2.1.1","express":"4.13.3","express3":"*","flow-bin":"0.21.0","graphql":"0.4.18","isparta":"3.0.3","mocha":"2.2.5","multer":"1.0.3","sane":"1.1.3","supertest":"1.0.1","supertest-as-promised":"2.0.2"},"gitHead":"98689d5b004b8a3cdf5fffdb5b46cdf49e876087","homepage":"https://github.com/stems/express-graphql#readme","versions":[{"number":"3.9.9","date":"2016-04-29T02:44:16.737Z"}],"readme":"GraphQL Express Middleware\n==========================\n\n[![Build Status](https://travis-ci.org/graphql/express-graphql.svg)](https://travis-ci.org/graphql/express-graphql)\n[![Coverage Status](https://coveralls.io/repos/graphql/express-graphql/badge.svg?branch=master&service=github)](https://coveralls.io/github/graphql/express-graphql?branch=master)\n\nCreate a GraphQL HTTP server with [Express](http://expressjs.com).\n\n```sh\nnpm install --save express-graphql\n```\n\nInstall express-graphql as middleware in your express server:\n\n```js\nvar graphqlHTTP = require('express-graphql');\n\nvar app = express();\n\napp.use('/graphql', graphqlHTTP({ schema: MyGraphQLSchema, graphiql: true }));\n```\n\n\n### Options\n\nThe `graphqlHTTP` function accepts the following options:\n\n  * **`schema`**: A `GraphQLSchema` instance from [`graphql-js`][].\n    A `schema` *must* be provided.\n\n  * **`rootValue`**: A value to pass as the rootValue to the `graphql()`\n    function from [`graphql-js`][].\n\n  * **`pretty`**: If `true`, any JSON response will be pretty-printed.\n\n  * **`formatError`**: An optional function which will be used to format any\n    errors produced by fulfilling a GraphQL operation. If no function is\n    provided, GraphQL's default spec-compliant [`formatError`][] function will\n    be used. *To enable stack traces, provide the function: `error => error`.*\n\n  * **`graphiql`**: If `true`, may present [GraphiQL][] when loaded directly\n    from a browser (a useful tool for debugging and exploration).\n\n\n### HTTP Usage\n\nOnce installed at a path, `express-graphql` will accept requests with\nthe parameters:\n\n  * **`query`**: A string GraphQL document to be executed.\n\n  * **`variables`**: The runtime values to use for any GraphQL query variables\n    as a JSON object.\n\n  * **`operationName`**: If the provided `query` contains multiple named\n    operations, this specifies which operation should be executed. If not\n    provided, a 400 error will be returned if the `query` contains multiple\n    named operations.\n\n  * **`raw`**: If the `graphiql` option is enabled and the `raw` parameter is\n    provided raw JSON will always be returned instead of GraphiQL even when\n    loaded from a browser.\n\nGraphQL will first look for each parameter in the URL's query-string:\n\n```\n/graphql?query=query+getUser($id:ID){user(id:$id){name}}&variables={\"id\":\"4\"}\n```\n\nIf not found in the query-string, it will look in the POST request body.\n\nIf a previous middleware has already parsed the POST body, the `request.body`\nvalue will be used. Use [`multer`][] or a similar middleware to add support\nfor `multipart/form-data` content, which may be useful for GraphQL mutations\ninvolving uploading files. See an [example using multer](https://github.com/graphql/express-graphql/blob/master/src/__tests__/http-test.js#L603).\n\nIf the POST body has not yet been parsed, graphql-express will interpret it\ndepending on the provided *Content-Type* header.\n\n  * **`application/json`**: the POST body will be parsed as a JSON\n    object of parameters.\n\n  * **`application/x-www-form-urlencoded`**: this POST body will be\n    parsed as a url-encoded string of key-value pairs.\n\n  * **`application/graphql`**: The POST body will be parsed as GraphQL\n    query string, which provides the `query` parameter.\n\n\n### Advanced Options\n\nIn order to support advanced scenarios such as installing a GraphQL server on a\ndynamic endpoint or accessing the current authentication information,\nexpress-graphql allows options to be provided as a function of each\nexpress request.\n\nThis example uses [`express-session`][] to run GraphQL on a rootValue based on\nthe currently logged-in session.\n\n```js\nvar session = require('express-session');\nvar graphqlHTTP = require('express-graphql');\n\nvar app = express();\n\napp.use(session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}));\n\napp.use('/graphql', graphqlHTTP(request => ({\n  schema: MySessionAwareGraphQLSchema,\n  rootValue: { session: request.session },\n  graphiql: true\n})));\n```\n\nThen in your type definitions, access `session` from the rootValue:\n\n```js\nnew GraphQLObjectType({\n  name: 'MyType',\n  fields: {\n    myField: {\n      type: GraphQLString,\n      resolve(parentValue, _, { rootValue: { session } }) {\n        // use `session` here\n      }\n    }\n  }\n});\n```\n\n[`graphql-js`]: https://github.com/graphql/graphql-js\n[`formatError`]: https://github.com/graphql/graphql-js/blob/master/src/error/formatError.js\n[GraphiQL]: https://github.com/graphql/graphiql\n[`multer`]: https://github.com/expressjs/multer\n[`express-session`]: https://github.com/expressjs/session\n","created":"2016-04-29T02:44:16.737Z","modified":"2016-04-29T02:44:16.737Z","lastPublisher":{"name":"matt-stem","email":"matt@stem.is"},"owners":[{"name":"matt-stem","email":"matt@stem.is"}],"other":{"_attachments":{},"_from":".","_id":"express-graphql-stem","_nodeVersion":"5.10.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/express-graphql-stem-3.9.9.tgz_1461897854384_0.5196415511891246"},"_npmUser":{"name":"matt-stem","email":"matt@stem.is"},"_npmVersion":"3.8.3","_rev":"1-48253dea62c5eb574866045abe4832fb","_shasum":"f2beb5cc6d9b91521b09abb3af716494aee0cdcd","bugs":{"url":"https://github.com/stems/express-graphql/issues"},"contributors":[{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"},{"name":"Daniel Schafer","email":"dschafer@fb.com"},{"name":"Matthew Elder","email":"matt@stem.is"}],"directories":{"lib":"./dist"},"dist-tags":{"latest":"3.9.9"},"dist":{"shasum":"f2beb5cc6d9b91521b09abb3af716494aee0cdcd","tarball":"http://registry.npmjs.org/express-graphql-stem/-/express-graphql-stem-3.9.9.tgz"},"maintainers":[{"name":"matt-stem","email":"matt@stem.is"}],"readmeFilename":"README.md","time":{"modified":"2016-04-29T02:44:16.737Z","created":"2016-04-29T02:44:16.737Z","3.9.9":"2016-04-29T02:44:16.737Z"}}}