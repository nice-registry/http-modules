{"name":"chaplain","version":"0.3.5","description":"A testing tool for effortless regression tests of HTTP services.","main":"dist/lib/index.js","bin":{"chaplain":"bin/chaplain-cli.js"},"engines":{"node":">=4.0.0"},"scripts":{"compile":"rm -rf dist && babel -q lib --out-dir dist/lib && babel -q test --out-dir dist/test && babel -q test-chaplain --out-dir dist/test-chaplain","pretest":"npm run compile","prepublish":"npm run compile","test":"mocha -R dot --recursive dist/test && ./bin/chaplain-cli.js -f dist/test-chaplain/chaplain.tests.js","test-cov":"mocha -R dot --recursive test","coverage":"nyc --require babel-register npm run test-cov && nyc report --reporter=html && nyc report --reporter=lcov","coveralls":"npm run coverage && cat ./coverage/lcov.info | node_modules/coveralls/bin/coveralls.js"},"repository":"https://github.com/krajzeg/chaplain","keywords":["testing","regression","http","bless","html","json","automated"],"license":"ISC","homepage":"https://github.com/krajzeg/chaplain","dependencies":{"bluebird":"^3.0.6","chalk":"^1.1.3","diff":"^2.2.3","good-guy-http":"^1.7.1","hiff":"^0.3.0","inquirer":"^1.0.3","jsondiffpatch":"^0.1.43","jsonpath":"^0.2.3","lodash":"^4.13.1","minimist":"^1.2.0","mkdirp":"^0.5.1"},"devDependencies":{"babel-cli":"^6.9.0","babel-preset-es2015":"^6.9.0","babel-register":"^6.9.0","chai":"^3.4.1","coveralls":"^2.11.9","del":"^2.1.0","express":"^4.13.4","jshint":"^2.9.2","mocha":"^2.5.3","nyc":"^6.4.4"},"gitHead":"4da253b856b2724339c0025b2a2bc40b2a802126","versions":[{"number":"0.0.1","date":"2016-05-15T18:26:39.748Z"},{"number":"0.1.0","date":"2016-05-17T10:34:12.555Z"},{"number":"0.2.0","date":"2016-05-22T12:59:47.588Z"},{"number":"0.3.0","date":"2016-05-23T19:11:43.574Z"},{"number":"0.3.1","date":"2016-05-24T21:14:37.487Z"},{"number":"0.3.2","date":"2016-05-29T19:01:09.069Z"},{"number":"0.3.3","date":"2016-06-04T11:14:12.769Z"},{"number":"0.3.4","date":"2016-06-07T16:26:58.293Z"},{"number":"0.3.5","date":"2016-06-12T20:31:54.527Z"}],"readme":"## Chaplain [![Build Status](https://travis-ci.org/krajzeg/chaplain.svg?branch=master)](https://travis-ci.org/krajzeg/chaplain) [![Coverage Status](https://coveralls.io/repos/github/krajzeg/chaplain/badge.svg?branch=master)](https://coveralls.io/github/krajzeg/chaplain?branch=master) [![Dependency Status](https://david-dm.org/krajzeg/chaplain.svg)](https://david-dm.org/krajzeg/chaplain)\n\n**Chaplain** is a testing tool with a difference. It's intended as a replacement for manually maintained end-to-end tests. Its strong suit is preventing regressions in any website, service or microservice that starts an HTTP server, with a minimum of effort on your part.\n\nThe project is still pretty young - here is the [current roadmap](https://github.com/krajzeg/chaplain/wiki/Roadmap).\n\n## The update-bless cycle\n\n![Terminal capture of Chaplain](http://i.imgur.com/TqNgwCq.gif)\n\nUnlike traditional testing, where you specify and maintain the expectations on your output manually, **chaplain** takes a different approach.\n\n* for each test you have, a **blessed** output is stored in your repository\n* every time tests are executed, the **actual** output is compared with the **blessed** output\n* if there are differences, they are presented to you (as a nice structural diff, works with JSON/HTML/text), and you can either **bless** (changing the \"official\" correct output to the new one) or **reject** them (causing tests to fail)\n \nThis is all automatic, and you never have to touch the \"blessed\" files yourself - **chaplain** generates them when your test is first added, and then keeps them up to date on its own. \n\nThis lets you avoid most of the hassle with doing this type of end-to-end testing, letting you concentrate on what really matters - your code.\n\n## Installation\n\nInstall it from [npm].\n\n```sh\nnpm install -g chaplain # for a global installation\nnpm install --save-dev chaplain # for use in npm test\n```\n\n## Example\n\nBefore it can do its work, **chaplain** needs a testfile (called `chaplain.tests.js` by default) to work. This is just a standard node.js script (with a few additional global functions), so you can require() anything you need. Here is an example:\n\n```javascript\n// Chaplain tests go in suites. One suite <=> one app/server instance,\n// and you can have as many suites in one file as you like.\nsuite('example', function() {\n  // Tell chaplain what to test - any app compatible with http.Server will do\n  config({app: require('./my-express-app'))});\n  // The simplest form of a test just requires a URL (relative to your app).\n  test('product-html', {url: '/product/1'});\n  // But you can use anything 'request' would accept\n  test('product-json', {request: {\n    method: 'GET', url: '/product/1',\n    headers: {accept: 'application/json'}\n  }});\n});\n```\n\nFor a full example with all the bells and whistles, see [the example in the repo](https://github.com/krajzeg/chaplain/blob/master/example/chaplain.tests.js).\n\nAt a minimum, every suite has to specify an `app` (an express or other http.Server-compatible app) or a `server` (an http.Server instance) to test on.\n\nEach test, in turn, has to specify the request to make - either with a `url` property (issuing a simple GET) or with a `request` (where you have access to all options the [request] module supports).\n\n## Working with chaplain\n\nOnce your testfile is ready, you can just run `chaplain` from the command line. It will run in interactive mode by default, and let you accept or reject any new tests/changes that it detects.\n\nThe best thing to do is to add `chaplain` to your `npm test` script in your `package.json`. This way, it can run alongside the rest of your tests, whether you run them manually, on a CICD server, or from a pre-commit hook. Interactive/non-interactive mode will be chosen automatically, depending on whether you're running from a terminal - but you can override the defaults with a `-i/-I` option.\n\nThe blessed output files generated by chaplain live in a `.chaplain` directory by default. Any changes to this directory that result from your changes *should be commited* with them - just as you would commit fixes to unit tests affected by your changes.\n\nThe command line tool accepts a few additional commands and options that modify it's behavior - run `chaplain --help` from a terminal to get more information.\n\n[npm]: https://www.npmjs.com\n[request]: https://github.com/request/request\n","created":"2016-05-15T18:26:39.748Z","modified":"2016-06-12T20:31:54.527Z","lastPublisher":{"name":"wasyl","email":"wasyl@wasyl.eu"},"owners":[{"name":"wasyl","email":"wasyl@wasyl.eu"}],"other":{"_attachments":{},"_from":".","_id":"chaplain","_nodeVersion":"6.2.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/chaplain-0.3.5.tgz_1465763511722_0.26825360069051385"},"_npmUser":{"name":"wasyl","email":"wasyl@wasyl.eu"},"_npmVersion":"3.9.5","_rev":"1-65c689881b56255bbc2141f990501f1f","_shasum":"724972a6fd74cde32442e72c795c4d0661638db7","author":{"name":"Jakub Wasilewski","email":"wasyl@wasyl.eu","url":"http://wasyl.eu"},"bugs":{"url":"https://github.com/krajzeg/chaplain/issues"},"directories":{},"dist-tags":{"latest":"0.3.5"},"dist":{"shasum":"724972a6fd74cde32442e72c795c4d0661638db7","tarball":"http://registry.npmjs.org/chaplain/-/chaplain-0.3.5.tgz"},"maintainers":[{"name":"wasyl","email":"wasyl@wasyl.eu"}],"readmeFilename":"README.md","time":{"modified":"2016-06-12T20:31:54.527Z","created":"2016-05-15T18:26:39.748Z","0.0.1":"2016-05-15T18:26:39.748Z","0.1.0":"2016-05-17T10:34:12.555Z","0.2.0":"2016-05-22T12:59:47.588Z","0.3.0":"2016-05-23T19:11:43.574Z","0.3.1":"2016-05-24T21:14:37.487Z","0.3.2":"2016-05-29T19:01:09.069Z","0.3.3":"2016-06-04T11:14:12.769Z","0.3.4":"2016-06-07T16:26:58.293Z","0.3.5":"2016-06-12T20:31:54.527Z"}}}