{"name":"uhttp","description":"A micro ajax http library with a unified api for browsers and nodejs","version":"1.2.3","repository":"https://github.com/Flux159/uhttp","homepage":"http://flux159.github.io/uhttp/","keywords":["ajax","http","nodejs","client"],"browser":"./browserIndex.js","scripts":{"test":"NODE_ENV=test node node_modules/.bin/mocha \"test/**/*.js\"","test-coverage":"NODE_ENV=test node node_modules/.bin/mocha -r blanket -R html-cov > coverage/coverage.html"},"devDependencies":{"mocha":"^2.2.1","jsdom":"^3.1.2","grunt":"~0.4.1","grunt-shell":"^0.7.0","grunt-banner":"^0.3.1","grunt-contrib-clean":"~0.5.0","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.2.0","grunt-contrib-yuidoc":"^0.7.0","jshint-stylish":"~0.1.3","express":"~4.12.3","morgan":"~1.0.0","body-parser":"~1.0.0","method-override":"~1.0.0","chai":"^2.2.0","blanket":"^1.1.6","connect-multiparty":"^1.2.5"},"config":{"blanket":{"pattern":["src/**/*.js"]}},"versions":[{"number":"1.1.0","date":"2015-04-03T00:18:54.574Z"},{"number":"1.1.2","date":"2015-04-04T02:02:22.477Z"},{"number":"1.1.3","date":"2015-04-04T02:05:06.590Z"},{"number":"1.1.4","date":"2015-04-26T18:40:08.633Z"},{"number":"1.1.5","date":"2015-04-27T17:45:04.689Z"},{"number":"1.2.0","date":"2015-04-29T15:00:40.955Z"},{"number":"1.2.1","date":"2015-04-30T17:58:30.100Z"},{"number":"1.2.2","date":"2015-05-01T21:00:02.294Z"},{"number":"1.2.3","date":"2015-06-01T06:06:23.716Z"}],"readme":"# uhttp\n\nA micro ajax library modeled after angularjs's $http module that doesn't require any dependencies (jquery or otherwise). As of version 1.1.0, uhttp runs in browsers as well as in nodejs.\n\nuhttp is about 6kb minified and about 2.3kb minified and compressed.\n\nuhttp supports setting headers globally for all requests and setting headers individually for each request. It also automatically parses json in responses with the appropriate content type. uhttp is based off of [atomic](https://github.com/toddmotto/atomic) and angularjs's [$http](https://github.com/angular/angular.js/blob/v1.3.x/src/ng/http.js). uhttp was written because atomic didn't support common features (setting headers & sending json POST requests) and [React](https://facebook.github.io/react/index.html) didn't come with a built in ajax library (recommending jQuery's ajax instead).\n\nNote that uhttp does not use true [promises](https://github.com/jakearchibald/es6-promise).\n\n#### Downloading & Setting up\n\n###### Browser\n\nDownload the minified build [here](https://raw.githubusercontent.com/Flux159/uhttp/master/dist/uhttp.min.js), put into your public scripts directory, and add to your webpage by adding the following tag:\n\n```html\n<script type=\"application/javascript\" src=\"/scripts/uhttp.min.js\"></script>\n```\n\nAlternatively, you can install from bower as well:\n```shell\nbower install uhttp --save\n```\n\n###### Nodejs\n\nTo install with nodejs, run the following:\n```shell\nnpm install uhttp --save\n```\n\nUse server side by requiring in your files:\n```javascript\nvar uhttp = require('uhttp');\n```\n\nNote: You should not use the minified browser version of uhttp in nodejs (or vice versa). This is because while uhttp provides a common api for ajax/http requests, the implementations are different for nodejs and the browser (nodejs uses http.request while browsers use XMLHttpRequest - among other differences).\n\n#### uhttp.get(url, [,options])\nUse uhttp.get() to make a GET request. You can use \"then... catch\" callbacks to obtain the response.\n\n```javascript\nuhttp.get('/api/endpoint').then(function(res, status, xhr) {\n    //Successful response\n}).catch(function(err, status, xhr) {\n    //Error\n});\n\n```\n\nYou can specify options by passing an options object to any request (see the Options section for more information):\n\n```javascript\nvar options = {\n    headers: {\n        'custom': 'header'\n    },\n    withCredentials: true,\n    timeout: 3000 //3 seconds; '0' for no timeout\n};\n\nuhttp.get('/api/endpoint', options).then(function(res, status, xhr) {\n    //Success\n}).catch(function(err, status, xhr) {\n    //Error\n});\n\n```\n\n#### uhttp.post(url, [,options] [,data])\n\nUse uhttp.post() to make a POST request. By default, the content type for JSON and FormData (multipart/form-data NOT application/x-www-form-urlencoded) is automatically set for you. To change this, either set a global default for the \"Content-Type\" header, or pass it in as an option.\n\n```javascript\nuhttp.post('/api/endpoint/post', {some: 'data'}).then(function(res) {\n    //Success\n}).catch(function(err) {\n    //Error\n});\n```\n\nExample using FormData (Content-Type: multipart/form-data) in javascript:\n```javascript\nvar formElement = document.getElementById(\"myform\");\nvar formData = new FormData(formElement);\nformData.append(\"username\", \"cat\");\nuhttp.post('/api/endpoint/post/form/multipart', formData).then(function(data) {\n    //Success\n}).catch(function(err) {\n    //Error\n});\n```\n\n##### Posting x-www-form-urlencoded data\n\nHere is an example of posting x-www-form-urlencoded data. Note that if you want all requests sent with these options by default, use uhttp.setGlobalOptions (see documentation below).\n\n```javascript\nvar data = {\n    content: 'Sending json object as x-www-form-urlencoded'\n};\n\nvar options = {\n    headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n    transformRequestData: function(data) {\n        var str = [];\n        for(var p in data) {\n            str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(data[p]));\n        }\n        return str.join(\"&\");\n}};\n\nuhttp.post('/api/endpoint/post/form/urlencoded', options, data).then(function(res) {\n    //Success\n}).catch(function(err) {\n    //Error\n});\n```\n\nExample setting a custom content type:\n```javascript\nvar myCustomData = '<custom>xml</custom>';\nuhttp.post('/api/endpoint/post', {headers: {'Content-Type': 'application/xml'}}, myCustomData).then(function(res, status, xhr) {\n    //Success\n}).catch(function(err, status, xhr) {\n    //Error\n});\n```\n\n#### uhttp.put()\n\nUse uhttp.put() to make a PUT request. The options are similar to POST requests.\n\n```javascript\nuhttp.put('/api/endpoint/put', {some: 'data'}).then(function(res, status, xhr) {\n    //Success\n}).catch(function(err, status, xhr) {\n    //Error\n});\n```\n\n#### uhttp.patch()\n\nUse uhttp.patch() to make a PATCH request.\n\n```javascript\nuhttp.patch('/api/endpoint/patch', {some: 'data'}).then(function(res, status, xhr) {\n    //Success\n}).catch(function(err, status, xhr) {\n    //Error\n});\n```\n\n#### uhttp.delete()\n\nUse uhttp.delete() to send a DELETE request.\n\n```javascript\nuhttp.delete('/api/endpoint/delete').then(function(res, status, xhr) {\n    //Success\n}).catch(function(err, status, xhr) {\n    //Error\n});\n```\n\n#### uhttp.head()\n\nUse uhttp.head() to send a HEAD request.\n\n```javascript\nuhttp.head('/api/endpoint/head').then(function(res, status, xhr) {\n    //Success\n    console.log(xhr.getHeader('Custom-Header'));\n}).catch(function(err, status, xhr) {\n    //Error\n});\n```\n\n#### uhttp.jsonp()\n\nUse uhttp.jsonp() to send a JSONP request. Note that you should define the callback as 'JSON_CALLBACK'. uhttp will generate a global function attached to the window object for the duration of the request and pass its data to the then/catch functions. Note that since [jsonp](http://en.wikipedia.org/wiki/JSONP) requests use a script element and not xhr, there is no status or xhr returned in the callback.\n\n```javascript\nuhttp.jsonp('/api/endpoint/jsonp?callback=JSON_CALLBACK').then(function(res) {\n    //Success\n}).catch(function(err) {\n    //Error\n});\n```\n\n#### Xsrf\nuhttp handles setting an XSRF header for you based on the options xsrfCookieName and xsrfHeaderName options. The default options are cookieName = 'XSRF-TOKEN' and headerName = 'X-XSRF-TOKEN'. Note that uhttp takes the value of the cookie (not the name) and sets the header given by xsrfHeaderName to that value. To change these, specify the options before sending your requests:\n\n```javascript\nvar globalOptions = {\n    xsrfCookieName: 'CUSTOM-COOKIE-NAME',\n    xsrfHeaderName: 'CUSTOM-HEADER-NAME'\n};\n\nuhttp.setGlobalOptions(globalOptions);\n\nuhttp.get('/xsrf/endpoint').then(function(res) {\n    //Success\n}).catch(function(err) {\n    //Error\n});\n\n```\n\n#### Example: Sending a file\nA common use case for POSTing data is to send a file to your server (like an image or video file). uhttp makes that easy by allowing you to specify a progress callback with your POST request. Note that this example uses Xhr2, which is not supported by IE8. Check [caniuse](http://caniuse.com/#feat=xhr2) for more information on browser compatibility. For a full example, see the example in /test/testupload.html. Note that this example will only work in browsers (nodejs does not support FormData objects, however, it may be possible to use [this](https://github.com/felixge/node-form-data) library - this has not been tested w/ uhttp however).\n\n```javascript\n\nvar files = document.getElementById('upload-input-element').files;\n\nvar file = files[0];\n\nvar data = new FormData();\ndata.append('userfile', file);\n\nvar options = {\n    progressHandler: function(event) {\n        if(event.lengthComputable) {\n            var percentageLoaded = event.loaded / event.total;\n            document.findElementById('upload-progress-bar').setAttribute('style', 'width: ' + percentageLoaded + ';');\n        }\n    }\n};\n\nuhttp.post('/upload/endpoint', options, data).then(function(res) {\n    //Success\n}).catch(function(err) {\n    //Error\n});\n\n```\n\n#### Example: Authorization Tokens\nIf your requests require tokens, you can specify them as custom headers (also note that you can set these globally for all requests by calling uhttp.setGlobalOptions(globalOptions).\n\n```javascript\nvar MY_TOKEN = 'CUSTOM_AUTH_TOKEN';\nvar options = {\n    headers: {\n        'Authorization': 'Bearer ' + MY_TOKEN\n    }\n};\n\nuhttp.get('/protected/api/endpoint', options).then(function(res) {\n    //Success\n}).catch(function(err) {\n    //Error\n});\n```\n\n#### Example: CORS (Cross Origin Requests)\n\nCORS is a way of sending requests to a different domain than the one you are currently browsing. CORS is enabled on a server by setting the appropriate headers on the server.\n\nServer pseudo code:\n```javascript\nresponse.header('Access-Control-Allow-Origin', 'http://example.com');\nresponse.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\nresponse.header('Access-Control-Allow-Headers', 'Content-Type');\nresponse.header('Access-Control-Allow-Credentials', true);\n```\n\nUsing uhttp, if the server has required credentials (by the 'Access-Control-Allow-Credentials' header), you would need to set the withCredentials option to correctly send your request. You would also need to set any authorization headers the server requires (tokens, etc.).\n\n```javascript\nvar MY_TOKEN = 'CUSTOM_AUTH_TOKEN';\nvar options = {\n    headers: {\n        'Authorization': 'Bearer ' + MY_TOKEN\n    },\n    withCredentials: true\n};\n\nuhttp.get('http://subdomain.example.com/protected/api/endpoint', options).then(function(res) {\n    //Success\n}).catch(function(err) {\n    //Error\n});\n\n```\n\n#### Global Options\n\nYou can set global options by using the uhttp.setGlobalOptions(options) method. Note that \"global\" means on each page. If you are not using a single page web application architecture, you will need to set these options in a common script across all your pages. In a single page application architecture, this works as expected after setting once.\n\n```javascript\nuhttp.setGlobalOptions({\n    headers: {\n        'Custom': 'Global-Header'\n    },\n    timeout: 2000, //Set timeout to 2 seconds\n    withCredentials: true, //Set withCredentials on xhr requests,\n    transformRequest: function(config) {}, //Transform xhr config before sending (also before transformRequestData)\n    transformResponse: function(xhr) {}, //Transform xhr after response (but before transformResponseData)\n    transformRequestData: function(data) {return data;}, //Transform requests before sending\n    transformResponseData: function(data) {return data;}, //Transform returned responses\n    caching: true || [Cache object] || {cache: [Cache object], options: {timeout: 120000}}, //Set whether to globally cache all requests (not recommended - use individual request options instead)\n    xsrfCookieName: String, //The name of the cookie where you store your xsrfToken\n    xsrfHeaderName: String //The name of the header to set the xsrfToken\n});\n```\n\nYou can also retrieve the global default options by using the uhttp.getGlobalOptions() method\n\n```javascript\nvar globalAjaxOptions = uhttp.getGlobalOptions();\nconsole.log(globalAjaxOptions);\n```\n\n#### Options\n\nThe options object is the same as the globalOptions object above except it can be passed with each individual request.\n\n###### Custom Headers\n\n```javascript\nvar options = {\n    headers: {\n        'Custom': 'Header'\n    }\n};\n\nuhttp.get('/api/endpoint', options).then(function(res) {\n    //Success\n}).catch(function(err) {\n    //Error\n});\n```\n\n###### Timeouts\n\n```javascript\nvar options = {\n    timeout: 2000 //Timeout of 2 seconds\n};\n\nuhttp.get('/api/endpoint', options).then(function(res) {\n    //Success\n}).catch(function(err) {\n    //Error\n});\n```\n\n#### Transforming Requests, Responses, and Data\n\nuhttp lets you transform requests and responses before they're sent / after their returned (globally or per request). This is useful if you need to modify how uhttp processes its requests by default.\n\n###### Transform Request (transformRequest) & Transform Response (transformResponse)\n\nTo modify the xhr object that uhttp uses before sending, set the transformRequest option.\n\n```javascript\nvar options = {\n    transformRequest: function(config) {\n        //Changes the source of the request\n        config.src = 'http://localhost:43760/api/get/again';\n\n        return config;\n    },\n    transformResponse: function(xhr) {\n        //Changes the response\n        xhr.responseText = '{\"data\": \"Man in the middle!\"}';\n    }\n};\n\nwindow.uhttp.get('http://localhost:43760/api/get', options).then(function(res) {\n    console.log(res.data); //prints \"Man in the middle!\"\n}).catch(function(err) {\n    //Do nothing\n}).finally(function() {\n    done();\n});\n```\n\n###### Transform Request Data (transformRequestData)\n\nTo modify the data that uhttp sends with the request, set the transformRequestData option. This is necessary if you're sending x-www-form-urlencoded data.\n\n```javascript\nvar data = {\n    content: 'Sending json object as x-www-form-urlencoded'\n};\n\nvar options = {\n    headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n    transformRequestData: function(data) {\n        var str = [];\n        for(var p in data) {\n            str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(data[p]));\n        }\n        return str.join(\"&\");\n}};\n\nuhttp.post('/api/endpoint/post/form/urlencoded', options, data).then(function(res) {\n    //Success\n}).catch(function(err) {\n    //Error\n});\n```\n\n###### Transform Response Data (transformResponseData)\n\nTo modify the data that uhttp gets after getting a response, set the transformResponseData option.\n\n```javascript\n//This is the default transformResponseData that uhttp uses to parse JSON responses\nvar options = {\n    transformResponseData: function(req) {\n        var result;\n        var d = req.responseText;\n        try {\n            result = JSON.parse(d);\n        } catch(e) {\n            result = d;\n        }\n        return result;\n    }\n}\n\nwindow.uhttp.get('http://localhost:43760/api/get', options).then(function(res) {\n    console.log(res.data);\n}).catch(function(err) {\n    //Do nothing\n}).finally(function() {\n    done();\n});\n\n```\n\n###### Caching\n\nuhttp provides a basic caching mechanism where you can cache your GET responses (no xhr request is sent). By default, setting the cache option to true enables this and uses uhttp's default cache. If you need a custom cache object, you can use uhttp's CacheFactory to create a custom cache object that you can manually clear and set timeouts for. Note: Caching only works for GET requests.\n\n```javascript\nuhttp.get('http://localhost:43760/api/get', {cache: true}).then(function(res, status, xhr) {\n    //Sends xhr request\n   uhttp.get('http://localhost:43760/api/get', {cache: true}).then(function(res, status, xhr) {\n        //From javascript cache, no xhr request sent\n   }).catch(function(err) {\n        //Do nothing\n   });\n}).catch(function(err) {\n    //Do nothing\n});\n```\n\nCustom cache objects:\n\n```javascript\nvar cacheFactory = uhttp.CacheFactory;\nvar blogCache = cacheFactory.get('blogCache');\n\nblogCache.put('firstpost','My blog');\nblogCache.put('secondpost', 'stuff');\nblogCache.delete('firstpost');\nblogCache.get('secondpost');\nblogCache.clear();\n\n//You can pass this cache to uhttp's cache option as well!\nuhttp.get('http://localhost:43760/api/get', {cache: blogCache}).then(function(res, status, xhr) {\n    //Data is cached in blogCache w/ url as key (you now have control of when to delete from the cache)\n});\n\n```\n\nNote that passing uhttp a cache object will only cache get requests. This is because it isn't meaningful to cache POST, PUT, DELETE requests (read [this](http://stackoverflow.com/questions/626057/is-it-possible-to-cache-post-methods-in-http) for more information).\n\n###### Cookies Helpers\n\nuhttp exposes its cookie helper functions as uhttp.getCookie() and uhttp.setCookie(). These can be helpful if you need to check or change cookie values in your app.\n\n```javascript\nuhttp.setCookie('mycookie', 'yum'); //Sets mycookie to 'yum'\nuhttp.setCookie('othercookie', 'yay!', 365); //Set cookie for 365 days\nconsole.log(uhttp.getCookie('mycookie')); //'yum'\nconsole.log(uhttp.getCookie('othercookie')); //'yay!'\n```\n\n#### Development, Testing, & Building\n\nuhttp is developed using a nodejs environment and uses [grunt](http://gruntjs.com/getting-started) for running tests and building. Make sure that you have nodejs and npm installed, clone this source repository and run the following in the uhttp directory:\n\n```\nnpm install && grunt build\n```\n\nThat will install all dependencies for development, run uhttp's tests, and build a minified version of uhttp in the dist directory.\n\nIf you have bug fixes that you want merged into uhttp, submit a pull request on the github repository.\n\nLICENSE\n-----\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Suyog Sonwalkar\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","created":"2015-04-03T00:18:54.574Z","modified":"2015-06-01T06:06:23.716Z","lastPublisher":{"name":"flux159","email":"Flux159@gmail.com"},"owners":[{"name":"flux159","email":"Flux159@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"uhttp","_npmUser":{"name":"flux159","email":"Flux159@gmail.com"},"_npmVersion":"1.4.3","_rev":"1-920aa8f8f1c34989483278ddf7975d79","bugs":{"url":"https://github.com/Flux159/uhttp/issues"},"directories":{},"dist-tags":{"latest":"1.2.3"},"dist":{"shasum":"07f2e986d8def897517c4c4d1b77ce8fbeafba24","tarball":"http://registry.npmjs.org/uhttp/-/uhttp-1.2.3.tgz"},"maintainers":[{"name":"flux159","email":"Flux159@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-06-01T06:06:23.716Z","created":"2015-04-03T00:18:54.574Z","1.1.0":"2015-04-03T00:18:54.574Z","1.1.2":"2015-04-04T02:02:22.477Z","1.1.3":"2015-04-04T02:05:06.590Z","1.1.4":"2015-04-26T18:40:08.633Z","1.1.5":"2015-04-27T17:45:04.689Z","1.2.0":"2015-04-29T15:00:40.955Z","1.2.1":"2015-04-30T17:58:30.100Z","1.2.2":"2015-05-01T21:00:02.294Z","1.2.3":"2015-06-01T06:06:23.716Z"}}}