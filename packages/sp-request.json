{"name":"sp-request","version":"2.0.3","description":"Simplified SharePoint HTTP client","main":"./lib/src/index.js","typings":"./lib/src/index","engines":{"node":">=4.0.0"},"scripts":{"test":"gulp test-ci","build":"npm install && gulp tsc","dev":"gulp live-dev"},"repository":"https://github.com/s-KaiNet/sp-request","license":"MIT","keywords":["request","sharepoint","rest"],"homepage":"https://github.com/s-KaiNet/sp-request","devDependencies":{"@types/chai":"^3.4.34","@types/mocha":"^2.2.32","@types/mockery":"^1.4.29","@types/sinon":"^1.16.31","chai":"^3.5.0","coveralls":"^2.11.9","del":"^2.2.0","gulp":"^3.9.1","gulp-debug":"^2.1.2","gulp-istanbul":"^0.10.4","gulp-load-plugins":"^1.2.2","gulp-mocha":"^2.2.0","gulp-plumber":"^1.1.0","gulp-sourcemaps":"^2.0.0-alpha","gulp-tslint":"^5.0.0","gulp-typescript":"^3.0.0","merge-stream":"^1.0.0","mocha-junit-reporter":"^1.11.1","mockery":"^1.6.2","remap-istanbul":"^0.6.3","run-sequence":"^1.1.5","sinon":"^1.17.3","tslint":"^3.8.1","typescript":"^2.0.3","typings":"^1.0.0","yargs":"^4.6.0"},"dependencies":{"@types/node":"^6.0.45","@types/request":"0.0.31","@types/request-promise":"^3.0.32","@types/core-js":"^0.9.34","@types/lodash":"^4.14.37","agentkeepalive":"^2.1.1","bluebird":"^3.3.5","httpntlm":"^1.6.1","lodash":"^4.12.0","node-sp-auth":"^1.0.1","request":"^2.72.0","request-promise":"^3.0.0"},"gitHead":"db8f6ea687cd30692d02a6078437f7cb208214eb","versions":[{"number":"1.0.0","date":"2016-05-10T19:20:02.294Z"},{"number":"1.0.1","date":"2016-05-10T19:28:58.422Z"},{"number":"1.0.2","date":"2016-05-10T19:33:01.920Z"},{"number":"1.0.3","date":"2016-05-10T19:50:03.951Z"},{"number":"1.0.4","date":"2016-05-11T18:38:18.881Z"},{"number":"1.0.5","date":"2016-05-11T18:54:58.318Z"},{"number":"1.0.6","date":"2016-05-12T22:09:23.163Z"},{"number":"1.0.7","date":"2016-05-12T22:26:25.461Z"},{"number":"1.0.8","date":"2016-05-12T22:32:56.197Z"},{"number":"1.0.9","date":"2016-05-13T07:46:03.406Z"},{"number":"1.0.10","date":"2016-05-13T20:50:41.811Z"},{"number":"1.0.11","date":"2016-05-13T20:55:34.234Z"},{"number":"1.0.12","date":"2016-05-13T21:47:55.935Z"},{"number":"1.0.14","date":"2016-05-14T07:22:38.032Z"},{"number":"1.0.15","date":"2016-05-14T21:32:35.780Z"},{"number":"1.0.16","date":"2016-05-17T20:51:43.636Z"},{"number":"1.0.17","date":"2016-05-21T19:06:47.259Z"},{"number":"1.1.0","date":"2016-05-30T23:03:46.872Z"},{"number":"1.1.1","date":"2016-05-31T20:27:28.057Z"},{"number":"1.1.2","date":"2016-06-01T19:40:07.714Z"},{"number":"1.1.3","date":"2016-06-02T17:59:09.631Z"},{"number":"1.1.4","date":"2016-07-18T09:52:01.566Z"},{"number":"1.1.5","date":"2016-09-28T19:58:56.182Z"},{"number":"2.0.0","date":"2016-10-05T20:53:30.217Z"},{"number":"2.0.1","date":"2016-10-05T21:15:56.133Z"},{"number":"2.0.2","date":"2016-10-08T11:39:50.312Z"},{"number":"2.0.3","date":"2016-10-29T10:16:27.356Z"}],"readme":"# sp-request - simplified SharePoint HTTP client\r\n[![NPM](https://nodei.co/npm/sp-request.png?mini=true)](https://nodei.co/npm/sp-request/)\r\n\r\n[![Circle CI](https://circleci.com/gh/s-KaiNet/sp-request/tree/master.svg?style=shield&circle-token=c550cd1b34315e710c5e751dd4cffe5cb8e694fe)](https://circleci.com/gh/s-KaiNet/sp-request/tree/master)\r\n[![Coverage Status](https://coveralls.io/repos/github/s-KaiNet/sp-request/badge.svg?branch=master)](https://coveralls.io/github/s-KaiNet/sp-request?branch=master)\r\n[![npm version](https://badge.fury.io/js/sp-request.svg)](https://badge.fury.io/js/sp-request)\r\n\r\n `sp-request` based on [request-promise](https://github.com/request/request-promise)  (promise-aware implementation of [request](https://github.com/request/request)) and [node-sp-auth](https://github.com/s-KaiNet/node-sp-auth) modules. `node-sp-auth` implements different authentication options for unattended SharePoint authentication from nodejs. You can send REST queries to SharePoint (works with both on-prem and online) using well-known `request` syntax with the same params that `request` supports, and `sp-request` (with help of `node-sp-auth`) takes care about authenticating you inside SharePoint. Responses implemented using modern promise-style approach.\r\n\r\n Versions supported:\r\n * SharePoint 2013, 2016\r\n * SharePoint Online\r\n\r\n---\r\n\r\n### How to use:\r\n#### Install:\r\n```bash\r\nnpm install sp-request --save-dev\r\n```\r\n#### Create sprequest function:\r\n```javascript\r\nvar spr = require('sp-request').create(credentialOptions);\r\n```\r\n###### Get list by title:\r\n```javascript\r\nspr.get('http://sp2013dev/sites/dev/_api/web/lists/GetByTitle(\\'TestList\\')')\r\n  .then(function (response) {\r\n    console.log('List Id: ' + response.body.d.Id);\r\n  })\r\n  .catch(function(err){\r\n    console.log('Ohhh, something went wrong...');\r\n  });\r\n```\r\n###### Update list title:\r\n```javascript\r\nspr.requestDigest('http://sp2013dev/sites/dev')\r\n  .then(function (digest) {\r\n    return spr.post('http://sp2013dev/sites/dev/_api/web/lists/GetByTitle(\\'TestList\\')', {\r\n      body: {\r\n        '__metadata': { 'type': 'SP.List' },\r\n        'Title': 'TestList'\r\n      },\r\n      headers: {\r\n        'X-RequestDigest': digest,\r\n        'X-HTTP-Method': 'MERGE',\r\n        'IF-MATCH': '*'\r\n      }\r\n    });\r\n  })\r\n  .then(function (response) {\r\n    if (response.statusCode === 204) {\r\n      console.log('List title updated!');\r\n    }\r\n  }, function (err) {\r\n    if (err.statusCode === 404) {\r\n      console.log('List not found!');\r\n    } else {\r\n      console.log(err);\r\n    }\r\n  });\r\n```\r\n... as simple as that! A bit more samples you can find under [integration tests](https://github.com/s-KaiNet/sp-request/blob/master/test/integration/integration.spec.ts)\r\n\r\n## API:\r\n### [main sp-request export].create(credentialOptions):\r\n - **_credentialOptions_:** required, object containing credentials.\r\n  Since version 2.x `sp-request` relies on `node-sp-auth` module for authentication. You can find description for `credentialOptions` under [node-sp-auth](https://github.com/s-KaiNet/node-sp-auth#params).\r\n\r\nCall to `require('sp-request').create(credentialOption)` returns sprequest function with predefined authentication. You can use this function later to send REST queries (like in samples above) without specifying credentials again.\r\n### sprequest(options):\r\n - **_options_**: required, settings object for `request` module. For all available values refer to the original [request docs](https://github.com/request/request#requestoptions-callback)\r\n\r\nBy default `sp-request` sets following params for `request`:\r\n```\r\n{\r\n    json: true,\r\n    strictSSL: false, /* bypassing SSL validation errors */\r\n    headers: {\r\n        'Accept': 'application/json;odata=verbose',\r\n        'Content-Type': 'application/json;odata=verbose'\r\n    }\r\n}\r\n```\r\nas a result you can access `body.d` property as an object. You can provide your own headers and override defaults if it's required.\r\nThe only difference from original `request`, that `sp-request` returns Bluebird's `Promise` (ES2015 promise implementation), instead of relying on callbacks. So you can combine multiple requests in a convenient and readable way.\r\n### sprequest.requestDigest(url):\r\n - _url_ - required, string site url\r\n\r\nReturns request digest as string via promise.\r\n## Convenience methods:\r\n### sprequest(url, options):\r\n - _url_ - required, string\r\n - _options_ - required, `request` options object\r\n\r\nThe same as `sprequest(options)` but `options.url` will be equal to the first param.\r\n### sprequest.get(url, options)\r\n - _url_ - required, string\r\n - _options_ - optional, `request` options object\r\n\r\nThe same as `sprequest(options)` but `options.url` will be equal to the first param and `options.method: 'GET'`.\r\n### sprequest.post(url, options)\r\n - _url_ - required, string\r\n - _options_ - optional, `request` options object\r\n\r\nThe same as `sprequest(options)` but `options.url` will be equal to the first param and `options.method: 'POST'`.\r\n\r\n## Development:\r\nI recommend using VS Code for development. Repository already contains some settings for VS Code editor.\r\n\r\nBefore creating Pull Request you need to create an appropriate issue and reference it from PR.\r\n\r\n1. `git clone https://github.com/s-KaiNet/sp-request.git`\r\n2. `npm run build` - restores dependencies and runs typescript compilation\r\n3. `gulp live-dev` - setup watchers and automatically runs typescript compilation, tslint and tests when you save files\r\n\r\n## Tests:\r\n1. `npm test`. As a result `/reports` folder will be created with test results in junit format and code coverage. Additionally test reports will be available in a console window.\r\n\r\n## Integration testing:\r\n1. Rename file `/test/integration/config.sample.ts` to `config.ts`.\r\n2. Update information in `config.ts` with appropriate values (urls, credentials, environment).\r\n3. Run `gulp test-int`.","starsCount":2,"created":"2016-05-10T19:20:02.294Z","modified":"2016-10-29T10:16:27.356Z","lastPublisher":{"name":"s-kainet","email":"sergeev.srg@gmail.com"},"owners":[{"name":"s-kainet","email":"sergeev.srg@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"sp-request","_nodeVersion":"5.12.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/sp-request-2.0.3.tgz_1477736185352_0.33684747223742306"},"_npmUser":{"name":"s-kainet","email":"sergeev.srg@gmail.com"},"_npmVersion":"3.10.8","_rev":"2-737447f1ec3f6a41b1a67ac45125f1fe","_shasum":"4649327f2a8e8f448b4abe7d35e918bfa388f990","author":{"name":"Sergei Sergeev","email":"sergeev.srg@gmail.com"},"bugs":{"url":"https://github.com/s-KaiNet/sp-request/issues"},"directories":{},"dist-tags":{"latest":"2.0.3"},"dist":{"shasum":"4649327f2a8e8f448b4abe7d35e918bfa388f990","tarball":"http://registry.npmjs.org/sp-request/-/sp-request-2.0.3.tgz"},"maintainers":[{"name":"s-kainet","email":"sergeev.srg@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-29T10:16:27.356Z","created":"2016-05-10T19:20:02.294Z","1.0.0":"2016-05-10T19:20:02.294Z","1.0.1":"2016-05-10T19:28:58.422Z","1.0.2":"2016-05-10T19:33:01.920Z","1.0.3":"2016-05-10T19:50:03.951Z","1.0.4":"2016-05-11T18:38:18.881Z","1.0.5":"2016-05-11T18:54:58.318Z","1.0.6":"2016-05-12T22:09:23.163Z","1.0.7":"2016-05-12T22:26:25.461Z","1.0.8":"2016-05-12T22:32:56.197Z","1.0.9":"2016-05-13T07:46:03.406Z","1.0.10":"2016-05-13T20:50:41.811Z","1.0.11":"2016-05-13T20:55:34.234Z","1.0.12":"2016-05-13T21:47:55.935Z","1.0.14":"2016-05-14T07:22:38.032Z","1.0.15":"2016-05-14T21:32:35.780Z","1.0.16":"2016-05-17T20:51:43.636Z","1.0.17":"2016-05-21T19:06:47.259Z","1.1.0":"2016-05-30T23:03:46.872Z","1.1.1":"2016-05-31T20:27:28.057Z","1.1.2":"2016-06-01T19:40:07.714Z","1.1.3":"2016-06-02T17:59:09.631Z","1.1.4":"2016-07-18T09:52:01.566Z","1.1.5":"2016-09-28T19:58:56.182Z","2.0.0":"2016-10-05T20:53:30.217Z","2.0.1":"2016-10-05T21:15:56.133Z","2.0.2":"2016-10-08T11:39:50.312Z","2.0.3":"2016-10-29T10:16:27.356Z"},"users":{"koltyakov":true,"waldekm":true}}}