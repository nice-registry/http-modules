{"name":"startup","version":"1.1.0","description":"Node.js HTTP app runner","scripts":{"test":"mocha"},"bin":{"startup":"bin/startup"},"repository":"https://github.com/camshaft/startup","keywords":["app","runner","cluster","express","connect","http","development"],"license":"MIT","engines":{"node":">=0.8.x"},"dependencies":{"commander":"~1.1.1","cli-table":"~0.2.0","node-uuid":"~1.4.0","win-fork":"~1.1.1","node-dev":"~3.1.2","envs":"~0.1.3"},"devDependencies":{"should":"~1.2.1","mocha":"~1.8.1","express":"~3.1.0","connect":"~2.7.2","ejs":"~0.8.3"},"gitHead":"e3cebcf5f64ce6a555b99966e40ea76533ef0a12","homepage":"https://github.com/camshaft/startup#readme","versions":[{"number":"0.0.0","date":"2012-12-14T08:11:19.556Z"},{"number":"0.0.1","date":"2013-01-05T08:16:57.078Z"},{"number":"0.0.2","date":"2013-01-05T08:19:41.205Z"},{"number":"0.0.3","date":"2013-01-07T21:21:38.576Z"},{"number":"0.0.4","date":"2013-01-07T22:29:21.677Z"},{"number":"0.0.5","date":"2013-01-08T02:20:44.103Z"},{"number":"0.0.6","date":"2013-01-08T02:44:56.763Z"},{"number":"0.0.7","date":"2013-01-15T08:21:13.094Z"},{"number":"0.0.8","date":"2013-01-15T17:30:30.542Z"},{"number":"0.0.9","date":"2013-01-15T17:45:31.139Z"},{"number":"0.0.10","date":"2013-01-15T18:20:17.972Z"},{"number":"0.0.11","date":"2013-01-15T21:13:32.060Z"},{"number":"0.0.12","date":"2013-01-15T21:13:56.395Z"},{"number":"0.0.13","date":"2013-01-15T22:49:35.868Z"},{"number":"0.0.14","date":"2013-01-17T19:49:54.017Z"},{"number":"0.1.0","date":"2013-01-31T01:46:41.855Z"},{"number":"0.1.1","date":"2013-01-31T02:16:00.635Z"},{"number":"0.1.2","date":"2013-01-31T02:24:06.432Z"},{"number":"0.1.3","date":"2013-02-06T19:27:19.748Z"},{"number":"0.1.4","date":"2013-02-06T19:49:07.647Z"},{"number":"0.1.5","date":"2013-02-06T20:43:09.356Z"},{"number":"0.1.6","date":"2013-02-06T20:46:31.206Z"},{"number":"0.1.7","date":"2013-02-07T01:30:50.607Z"},{"number":"0.1.8","date":"2013-02-07T17:40:02.701Z"},{"number":"0.1.9","date":"2013-02-08T02:47:14.619Z"},{"number":"0.1.10","date":"2013-02-09T22:38:59.195Z"},{"number":"0.1.11","date":"2013-02-17T06:07:17.981Z"},{"number":"0.1.12","date":"2013-02-27T22:12:41.536Z"},{"number":"0.2.0","date":"2013-08-30T20:25:26.901Z"},{"number":"0.2.1","date":"2013-08-31T01:17:54.271Z"},{"number":"0.2.2","date":"2013-09-10T03:57:16.081Z"},{"number":"0.3.0","date":"2013-10-17T22:46:43.053Z"},{"number":"1.0.0","date":"2014-09-18T21:58:28.375Z"},{"number":"1.0.1","date":"2014-12-30T19:46:18.172Z"},{"number":"1.0.2","date":"2014-12-30T20:36:43.460Z"},{"number":"1.0.3","date":"2014-12-31T02:51:40.635Z"},{"number":"1.0.4","date":"2015-12-02T21:32:29.004Z"},{"number":"1.0.5","date":"2016-05-09T19:51:50.250Z"},{"number":"1.1.0","date":"2016-07-07T05:36:20.595Z"}],"readme":"startup\n=======\n\nNode.js HTTP app runner\n\nFeatures\n--------\n\n* [Port Binding](#port-binding)\n* [Hot-Reloading](#hot-reload)\n* [Domains](#domains)\n* [Cluster](#cluster)\n* [SIGTERM and SIGINT handling](#sigterm-and-sigint)\n\nUsage\n-----\n\nAll startup requires is an exported http app:\n\n### Express Example\n```js\nvar express = require(\"express\");\n\n// Export the express app\nvar app = module.exports = express();\n\napp.get(\"/\", function (req, res){\n  res.send(\"Hello!\");\n});\n```\n\n### Connect Example\n```js\nvar connect = require(\"connect\");\n\n// Export the connect app\nvar app = module.exports = connect();\n\napp.use(function (req, res, next){\n  res.send(\"Hello!\");\n});\n```\n\n### Vanilla HTTP Example\n```js\nvar http = require(\"http\");\n\n// Create the http server\nvar server = http.createServer(function (req, res){\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.end(\"Hello!\");\n});\n\n// Export it\nmodule.exports = server;\n```\n\nTo start the app, just run:\n\n```sh\nstartup start\n```\n\nand startup will bind to the `PORT` environment variable.\n\n### Sockjs Example\n\nTo install any handlers needed, sockjs for example, listen for the `ready` event:\n\n```js\nvar express = require(\"express\")\n  , sockjs = require(\"sockjs\");\n\n// Export the express app\nvar app = module.exports = express();\n\n// Setup the sockjs server\nvar echo = sockjs.createServer();\necho.on('connection', function(conn) {\n  conn.on('data', function(message) {\n    conn.write(message);\n  });\n  conn.on('close', function() {});\n});\n\napp.get(\"/\", function (req, res){\n  res.send(\"Hello!\");\n});\n\n// Install the handlers\napp.on(\"ready\", function(server){\n  echo.installHandlers(server, {prefix: \"/echo\"});\n});\n```\n\n### Listening Callback\n\nTo know when the server is listening on a port, bind to the `listening` event:\n\n```js\nvar express = require(\"express\");\n\n// Export the express app\nvar app = module.exports = express();\n\napp.get(\"/\", function (req, res){\n  res.send(\"Hello!\");\n});\n\napp.on(\"listening\", function(server){\n  console.log(\"My app is listening\");\n});\n```\n\n\nCommands\n--------\n\n###`startup start`\n\nStarts app listening on the `PORT` environment variable.\n\n###`startup middleware`\n\nLists loaded middleware (express and connect only) without running the app.\n\n###`startup routes`\n\nLists loaded middleware (express only) without running the app.\n\n###`startup settings`\n\nLists app settings (express only) without running the app.\n\nPort Binding\n------------\n\n`startup` will look for the `PORT` environment variable and try to bind to it. If not value is found, it defaults to `3000`. You can also set it by executing `startup start -P <port>`.\n\nHot-Reload\n----------\n\nTo enable hot-reload, set the `NODE_ENV` environment variable to `development`. You may also specify --dev to force it.\n\nRead more about [node-dev](https://github.com/fgnass/node-dev), the tool `startup` uses.\n\nDomains\n-------\n\n[Domains](http://nodejs.org/api/domain.html) were introducted in `v0.8` and act as a way to isolate uncaught exceptions in a process. This proves useful for http servers when we want each request to be handled in a unique domain, as to not crash the whole server.\n\nSetting it up requires a bit of boilerplate code that comes built in to `startup`.\n\nYou can also provide a custom error handler for when you do get an uncaught exception by exporting `errorHandler` in your app:\n\n```js\nvar express = require(\"express\");\n\n// Export the express app\nvar app = module.exports = express();\n\napp.get(\"/\", function (req, res){\n  res.send(\"Hello!\")\n});\n\nmodule.exports.errorHandler = function (err, req, res) {\n  res.send(\"There was an error!\");\n};\n```\n\nCluster\n-------\n\n[Cluster](http://nodejs.org/api/cluster.html) allows a server to take advantage of all of the cores on a system instead of being limited by node's single thread. Cluster mode is enabled by default in production.\n\n\nSIGTERM and SIGINT\n------------------\n\n`startup` reacts to system messages to enable clean exits. When it receives a SIGTERM it stops accepting connections and gives all of the current connections 3 seconds (overridable by setting SOCKET_TIMEOUT) to clean up and shut down. In environments like heroku it is very important the server reacts to these messages since the platform can shut it down at any time.\n","starsCount":0,"created":"2012-12-14T08:11:19.043Z","modified":"2016-07-07T05:36:20.595Z","lastPublisher":{"name":"camshaft","email":"bytheway.cameron@gmail.com"},"owners":[{"name":"camshaft","email":"cameron@nujii.com"}],"other":{"_attachments":{},"_from":".","_id":"startup","_nodeVersion":"5.9.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/startup-1.1.0.tgz_1467869778331_0.4117266065441072"},"_npmUser":{"name":"camshaft","email":"bytheway.cameron@gmail.com"},"_npmVersion":"3.7.3","_rev":"1-51cf37b3b704c892a4e88b3570e5ba91","_shasum":"975de4ef14f2c007d69f1d9be4a97f3a5bf6523b","author":{"name":"Cameron Bytheway","email":"bytheway.cameron@gmail.com"},"bugs":{"url":"https://github.com/camshaft/startup/issues"},"directories":{},"dist-tags":{"latest":"1.1.0"},"dist":{"shasum":"975de4ef14f2c007d69f1d9be4a97f3a5bf6523b","tarball":"http://registry.npmjs.org/startup/-/startup-1.1.0.tgz"},"maintainers":[{"name":"camshaft","email":"cameron@nujii.com"}],"readmeFilename":"README.md","time":{"modified":"2016-07-07T05:36:20.595Z","created":"2012-12-14T08:11:19.043Z","0.0.0":"2012-12-14T08:11:19.556Z","0.0.1":"2013-01-05T08:16:57.078Z","0.0.2":"2013-01-05T08:19:41.205Z","0.0.3":"2013-01-07T21:21:38.576Z","0.0.4":"2013-01-07T22:29:21.677Z","0.0.5":"2013-01-08T02:20:44.103Z","0.0.6":"2013-01-08T02:44:56.763Z","0.0.7":"2013-01-15T08:21:13.094Z","0.0.8":"2013-01-15T17:30:30.542Z","0.0.9":"2013-01-15T17:45:31.139Z","0.0.10":"2013-01-15T18:20:17.972Z","0.0.11":"2013-01-15T21:13:32.060Z","0.0.12":"2013-01-15T21:13:56.395Z","0.0.13":"2013-01-15T22:49:35.868Z","0.0.14":"2013-01-17T19:49:54.017Z","0.1.0":"2013-01-31T01:46:41.855Z","0.1.1":"2013-01-31T02:16:00.635Z","0.1.2":"2013-01-31T02:24:06.432Z","0.1.3":"2013-02-06T19:27:19.748Z","0.1.4":"2013-02-06T19:49:07.647Z","0.1.5":"2013-02-06T20:43:09.356Z","0.1.6":"2013-02-06T20:46:31.206Z","0.1.7":"2013-02-07T01:30:50.607Z","0.1.8":"2013-02-07T17:40:02.701Z","0.1.9":"2013-02-08T02:47:14.619Z","0.1.10":"2013-02-09T22:38:59.195Z","0.1.11":"2013-02-17T06:07:17.981Z","0.1.12":"2013-02-27T22:12:41.536Z","0.2.0":"2013-08-30T20:25:26.901Z","0.2.1":"2013-08-31T01:17:54.271Z","0.2.2":"2013-09-10T03:57:16.081Z","0.3.0":"2013-10-17T22:46:43.053Z","1.0.0":"2014-09-18T21:58:28.375Z","1.0.1":"2014-12-30T19:46:18.172Z","1.0.2":"2014-12-30T20:36:43.460Z","1.0.3":"2014-12-31T02:51:40.635Z","1.0.4":"2015-12-02T21:32:29.004Z","1.0.5":"2016-05-09T19:51:50.250Z","1.1.0":"2016-07-07T05:36:20.595Z"},"users":{}}}