{"name":"mobile-usage","version":"0.1.0","description":"Analyze HTTP access logs and visualize statistics w/ focus on mobile usage","main":"index.js","repository":{"type":"git","url":"github.com/hgoebl/mobile-usage"},"homepage":"https://github.com/hgoebl/mobile-usage/","keywords":["logfile","analyse","analyze","weblog","statistic","charts","useragent","mobile","phone","tablet","detect","device","browser","version"],"license":"MIT","dependencies":{"mobile-detect":"*","optimist":"~0.6.0"},"devDependencies":{"jshint":"*"},"readme":"# mobile-usage\n\nAnalyze HTTP access logs and visualize statistics w/ focus on mobile usage.\n\nThis project consists of two parts:\n\n  * analyze log files and aggregate mobile usage information to a JSON object.\n  * visualize one of those JSON objects with charts and tables.\n\nYou get information about\n\n  * devices - mobile, tablet, desktop, tv, game console, ...\n  * operating systems and versions\n  * browser and versions\n  * Mobile Grade (A, B, C)\n\n## Example Output\n\nSee an example output at <http://hgoebl.github.io/mobile-usage/>. Do not believe the numbers - the statistic\nis generated using the test-data of [mobile-detect.js](https://github.com/hgoebl/mobile-detect.js/), so it is\nonly reflecting User-Agents covered by the test. It has absolutely nothing to do with reality.\n\n<img src=\"mobile-usage-preview.png\">\n\n## tl;dr\n\nThere are many very good HTTP-log analyzers like <a href=\"http://awstats.sourceforge.net\">AWstats</a>,\n<a href=\"http://www.webalizer.org/\">The Webalizer</a> or <a href=\"http://www.analog.cx/\">Analog</a>,\njust to name a few.<br>\n<a href=\"https://github.com/hgoebl/mobile-usage/\">mobile-usage</a> is not a full-blown log analyzer, just\na supplement to existing ones with a special focus on mobile devices.\nIt should give you answers to questions like:\n<ul>\n    <li>How many visitors come to my site using phones or tablets?</li>\n    <li>Which mobile devices are used?</li>\n    <li>Which mobile operating systems and versions are used?</li>\n</ul>\nThis statistic is based on a piece of information provided by browsers requesting web resources\nlike HTML-pages and images. Web-Browsers and search engines usually send an HTTP-Header called\n<b>User-Agent</b>. With the help of <a href=\"http://mobiledetect.net/\">Mobile-Detect</a>, devices\nare detected by the User-Agent header.\n\n# Requirements\n\nAs input this component needs a log-file, typically written by a web-server like Apache, which logs the\nHTTP-Header 'User-Agent'.\n\n# Installation\n\n    $ npm install [-g] mobile-usage\n\n# Usage\n\n```\nUsage: mobile-usage [options]\n\nOptions:\n  --encoding, -e  character-set of input                            [default: \"utf8\"]\n  --input, -i     path/name of the input-file (stdin if not set)    [default: null]\n  --output, -o    path/name of the output-file (stdout if not set)  [default: null]\n  --config        path/name of configuration file (js)              [default: null]\n  --header        header text, e.g. site-name, server-name, ...     [default: null]\n  --help, -h      show help and exit\n```\n\n## Examples\n\n    $ mobile-usage --input test/data/pseudo-access.log.txt \\\n                   --output web/pseudo-data/example-summary.json \\\n                   --header 'mobile-detect UAs'\n\n    $ grep 'GET / HTTP' access.log | mobile-usage > summary-index.json\n\n## Configuration\n\nYou can provide a configuration object containing your implementations of `analyze`, `filterRaw`, `transform`,\n`filterCooked`, `map`, `reduce`. Most often one will only provide a custom `analyze` function (if log-file is\nnot in Apache httpd combined format), probably a `filterRaw` function for eliminating unwanted request types\nand sometimes a `filterCooked` method to drop hits of irrelevant device types, e.g. Bots.\n\nHave a look at the example at `./config-example.js`.\n\nAs you can imagine, it is possible to analyze arbitrary text-files (csv, ...) and filter, transform, map, ... in\nany form you like.\n\n# License\n\nMIT-License (see LICENSE file).\n\n# Steps\n\nFollowing steps are taken while creating statistics. Each of these steps can be configured or re-programmed.\nThe program consumes a source (stdin or a text-file with line-endings) and emits 'line' events. Each line\ngoes through the steps, gets analyzed, transformed, filtered, mapped and reduced. At the end, we have an\naggregated summary which can be visualized by the web page.\n\n## Extraction (analyze)\n\nThe first step consumes some kind of source, typically a log-file written by a web-server (access_log).\nAs a result the process emits JSON-Objects like `{ userAgent: 'Mozilla/5.0 ...', count: 1, ... }`.\n\nBy default a log line of a 'combined' Apache httpd access-log is assumed (see ./lib/LogLineAnalyzerApache.js).\n\n## Raw Filtering (filterRaw)\n\nEach analyzed JSON-Object is passed to a filter which can decide to skip this record (e.g. traffic from internal\nnetwork, hits produced by images, ...).\n\nBy default no raw filtering is made, so all valid log-lines will be passed to the next step.\n\n## Transformation (transform)\n\nIn this step we interpret the raw hit object and transform it to information. In our case we take the User-Agent\nheader and let `mobile-detect` extract information about the device.\n\nThe standard implementation creates an object like this:\n\n    {\n        os: md.os(),\n        phone: md.phone(),\n        tablet: md.tablet(),\n        mobileGrade: md.mobile() && md.mobileGrade(),\n        mobileGradeAll: md.mobileGrade(),\n        userAgent: md.userAgent(),\n        formfactor: formfactor,\n        desktopBrowser: desktopBrowser,\n        versions: versions\n    }\n\n\n## Cooked Filtering (filterCooked)\n\nHere we have the next possibility to filter out unwanted hits based on the \"cooked\" information object.\nYou get a cooked object in (created by `transform`) and can decide whether it should be considered in the\nsummary by returning a truthy value.\n\n\n## Map\n\nIn this step the cooked objects from `transform` are prepared to better suite as statistical input. You can think\nof this aggregated object as \"tiny summaries\".\n\n## Reduce\n\nThe last step takes arrays of the mapped objects of the previous step and reduces them to single objects where\nsums, counts, averages and the like are built.\n\n## Store Result\n\nAfter reducing all statistical data these results are printed to `stdout` or saved to a file.\n\n## Show Statistics\n\nThere is a front-end written in HTML which visualizes the statistical data and provides navigation over time.\nIt works only on modern browsers and even denies MSIE <= 10 because I don't want to spend 50% of my time fixing\nspecial IE bugs.\n\n# Credits\n\nFor visualizing statistics following components are used:\n\n  * [D3.js - Data-Driven Documents](http://d3js.org/)\n  * [NVD3 Re-usable charts for d3.js](http://nvd3.org/)\n  * [Twitter Bootstrap 3](http://getbootstrap.com/)\n\nSpecial thanks to the guys who created and open-sourced this awesome work! This is of course as well true for the\n\"invisible\" guys (node.js, V8, GNU, ...).\n\n# Contributing\n\nYour contribution is welcome.\n\n  * fork hgoebl/mobile-usage\n  * run `npm install`\n  * create branch\n  * make changes and run `npm test` (**TODO** not available yet)\n  * commit, push to your branch\n  * create pull request\n\n## Testing\n\n**TODO**\n\n# TODO\n\n  * improve documentation\n  * generate gh-pages (better than `cp -r web/* ../mobile-usage@gh-pages/`\n  * add Gruntfile (jshint, gh-pages, uglify)\n  * CLI for static server (web)\n  * add tests, at least for summary-generation\n","versions":[{"number":"0.1.0","date":"2013-11-09T11:27:55.877Z"}],"created":"2013-11-09T11:27:50.579Z","modified":"2013-11-09T11:27:55.877Z","lastPublisher":{"name":"hgoebl","email":"hgoebl@goebl.com"},"owners":[{"name":"hgoebl","email":"hgoebl@goebl.com"}],"other":{"_attachments":{},"_from":".","_id":"mobile-usage","_npmUser":{"name":"hgoebl","email":"hgoebl@goebl.com"},"_npmVersion":"1.3.11","_rev":"1-8f4b1db15e1fca24a9b963b63dd71484","author":{"name":"Heinrich Goebl","email":"hgoebl@goebl.com","url":"http://www.goebl.com/"},"bugs":{"url":"https://github.com/hgoebl/mobile-usage/issues"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"de6c82f0a746d63ee5d424c3ca3ed6002f02ca83","tarball":"http://registry.npmjs.org/mobile-usage/-/mobile-usage-0.1.0.tgz"},"maintainers":[{"name":"hgoebl","email":"hgoebl@goebl.com"}],"readmeFilename":"README.md","time":{"modified":"2013-11-09T11:27:55.877Z","created":"2013-11-09T11:27:50.579Z","0.1.0":"2013-11-09T11:27:55.877Z"}}}