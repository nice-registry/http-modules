{"name":"ng-lollipop","version":"0.3.2","description":"Normalize HTTP requests for Angular applications","main":"lib/index.js","files":["lib"],"scripts":{"test":"karma start","build":"babel src --out-dir lib"},"repository":"https://github.com/monomelodies/ng-lollipop","keywords":["angular","http"],"license":"MIT","homepage":"https://github.com/monomelodies/ng-lollipop#readme","devDependencies":{"babel-cli":"^6.24.1","babel-core":"^6.25.0","babel-plugin-transform-runtime":"^6.23.0","babel-preset-es2015":"^6.24.1","babel-runtime":"^6.23.0","babelify":"^7.3.0","grunt":"^1.0.1","grunt-browserify":"^5.0.0","grunt-contrib-uglify":"^3.0.1","grunt-contrib-watch":"^1.0.0","grunt-shell":"^2.1.0"},"gitHead":"7317a07a549b9a2acc74c1697e9e8b968594d2a6","versions":[{"number":"0.1.0","date":"2016-01-12T16:42:25.346Z"},{"number":"0.1.1","date":"2016-01-12T16:49:12.654Z"},{"number":"0.1.2","date":"2016-01-13T17:59:16.967Z"},{"number":"0.1.3","date":"2016-02-16T06:31:09.904Z"},{"number":"0.1.4","date":"2016-06-13T13:36:53.464Z"},{"number":"0.2.0","date":"2016-07-08T07:52:06.285Z"},{"number":"0.2.1","date":"2016-07-11T06:46:13.886Z"},{"number":"0.3.0","date":"2017-06-11T14:20:22.398Z"},{"number":"0.3.1","date":"2017-06-11T16:00:16.446Z"},{"number":"0.3.2","date":"2017-06-15T14:27:06.643Z"}],"readme":"# ng-lollipop\nNormalize HTTP requests for Angular applications\n\nBy default, Angular posts data as JSON, which is often not what you want. Also,\ndata received as JSON needs some massaging (date to actual Date objects, numbers\nto actual Number objects etc.). This package handles all that for you.\n\n## Installation\nVia NPM (recommended):\n\n```sh\nnpm install --save ng-lollipop\n```\n\nInclude the package in your application. This can be done via a tool like\nBrowserify (recommended) or by simply adding a `<script>` tag pointing to the\nlocation where you installed it.\n\nAdd it as a dependency for your Angular application:\n\n```javascript\nvar app = angular.module('myAwesomeProject', ['lollipop']);\n```\n\n## Registering the helpers\nLollipop exposes two main services: `postRegularForm` to replace JSON posts with\nnormal `urlencoded` data strings, and `normalizeIncomingHttpData` to massage the\nreceived data. You'll need to inject them once in your application for them to\ntake effect (since you might want to use just one of them):\n\n```javascript\napp.run(['postRegularForm', 'normalizeIncomingHttpData', function (a, b) {\n    // We're not using `a` and `b`, we just need them to be injected.\n}]);\n```\n\n## Normalizing data from non-HTTP sources\nSince you might get your data from other sources (e.g. a Socket server),\nLollipop also offers a more low level `normalizeData` service. You might for\ninstance need to do something like this:\n\n```javascript\napp.factory('Socket', ['SocketFactory', 'normalizeData', function (SocketFactory, normalizeData) {\n    var socket = socketFactory({ioSocket: window.io.connect('')});\n    var on = socket.on;\n    socket.on = function (event, callback) {\n        on.call(socket, event, function (data) {\n            callback(normalizeData(data));\n        });\n    };\n}]);\n```\n\n## Handling alternative date formats\nOut of the box, Lollipop recognizes date strings in a format compatible with\nmost RMDBSs. Of course, your source might be a bit more exotic. There are a\nnumber of pluggable helpers you can modify to account for that:\n\n### The `dateRegexes` value\nLollipop defines a `dateRegexes` Angular value which you can override. It is\nsimply an array of patterns to check. The first pattern matched gets returned\n(with index 0, the full match, already removed). The default implementation\nassumes that the date parts are \"in order\", i.e. they are passed directly to\nthe `Date` constructor.\n\n### The `dateCallbacks` service\nAn object where each key matching the index in the matched date is called if\npresent. The default implementation is to only offset key 1 by -1 since\nJavascript months are 0-indexed.\n\n### The `convertValueToDate` factory\nReturns a function which converts matched date parts into a `Date` object. If\nyour date parts are in a \"weird\" order, override this.\n\n### The `isValueDate` factory\nThis you'll rarely need to override; it loops through the `dateRegexes` array\nand applies `dateCallbacks` for defined keys.\n\n","created":"2016-01-12T16:42:25.346Z","modified":"2017-06-15T14:27:06.643Z","lastPublisher":{"name":"monomelodies","email":"marijn@monomelodies.nl"},"owners":[{"name":"monomelodies","email":"marijn@monomelodies.nl"}],"other":{"_attachments":{},"_from":".","_id":"ng-lollipop","_nodeVersion":"7.8.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ng-lollipop-0.3.2.tgz_1497536825646_0.043347245547920465"},"_npmUser":{"name":"monomelodies","email":"marijn@monomelodies.nl"},"_npmVersion":"4.2.0","_rev":"4-f322a6449061cd3e8246bf3f7344796a","_shasum":"523a456a61dd464a11560e10c53a8086dca6fc74","author":{"name":"Marijn Ophorst","email":"marijn@monomelodies.nl","url":"http://monomelodies.nl"},"bugs":{"url":"https://github.com/monomelodies/ng-lollipop/issues"},"directories":{},"dist-tags":{"latest":"0.3.2"},"dist":{"shasum":"523a456a61dd464a11560e10c53a8086dca6fc74","tarball":"https://registry.npmjs.org/ng-lollipop/-/ng-lollipop-0.3.2.tgz"},"maintainers":[{"name":"monomelodies","email":"marijn@monomelodies.nl"}],"readmeFilename":"README.md","time":{"modified":"2017-06-15T14:27:06.643Z","created":"2016-01-12T16:42:25.346Z","0.1.0":"2016-01-12T16:42:25.346Z","0.1.1":"2016-01-12T16:49:12.654Z","0.1.2":"2016-01-13T17:59:16.967Z","0.1.3":"2016-02-16T06:31:09.904Z","0.1.4":"2016-06-13T13:36:53.464Z","0.2.0":"2016-07-08T07:52:06.285Z","0.2.1":"2016-07-11T06:46:13.886Z","0.3.0":"2017-06-11T14:20:22.398Z","0.3.1":"2017-06-11T16:00:16.446Z","0.3.2":"2017-06-15T14:27:06.643Z"}}}