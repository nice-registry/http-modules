{"license":"GPLv3","scripts":{"test":"testem ci","start":"mocha --compilers 'coffee:coffee-script/register' --watch","test-debug":"DEBUG=littlebits* npm start","dev":"npm start","devall":"testem","download-routes":"node scripts/download-routes.js > lib/routes.js"},"dependencies":{"lodash.transform":"^3.0.0","merge":"^1.2.0","superagent":"~0.17.0","to-snake-case":"^0.1.2"},"repository":"https://github.com/littlebits/cloud-client-api-http","name":"littlebits-cloud-http","homepage":"https://github.com/littlebits/cloud-client-api-http","version":"0.3.4","main":"lib/index.js","description":"Lightweight wrapper for littleBits Cloud HTTP API","devDependencies":{"coffee-script":"^1.7.1","chai":"^1.9.1","request":"~2.34.0","plat":"^0.1.0","browserify":"~3.44.1","testem":"~0.6.15","mocha":"^2.1.0","component":"^1.0.0-rc5","es5-shim":"~3.0.2"},"gitHead":"de5297cde70e446a8bf436a1fbb0951eee086a5f","versions":[{"number":"0.3.2","date":"2014-12-17T16:02:14.563Z"},{"number":"0.3.3","date":"2015-01-29T01:03:02.513Z"},{"number":"0.3.4","date":"2015-02-13T22:09:36.916Z"}],"readme":"# cloud-api-http-client [![Circle CI](https://circleci.com/gh/littlebits/cloud-client-api-http.svg?style=svg)](https://circleci.com/gh/littlebits/cloud-client-api-http)\n\nLightweight wrapper for littleBits Cloud HTTP API\n\n\n## Installation\n```\nnpm install --save littlebits-cloud-http\n```\n\n\n\n## Example\n\n```js\nvar api = require('littlebits-cloud-http')\n          .defaults({ access_token: 'askdjfldaksjfkdlsjfdkl234324' })\n// We've created a new instance of our api with an access_token to be used by all requests.\n\napi = api.defaults({ device_id: 'foobar' })\n// All api functions will now default to using device_id\n// 'foobar' for those abstracting HTTP endpoints that use\n// the {device_id} path-param (e.g. /devices/{device_id}/output).\n\napi.output()\n// -> <err> <result>\n// Neat; By default functions log to console\n// which is great for playing around.\n\napi.output('foobar2')\n// The device_id can also be specified as the\n// first argument (overriding defaults, not mutating),\n// allowing the second argument to focus on\n// your payload...\n\napi.output('foobar2', { percent: 50, duration_ms: 5000 })\n// like so :). Of course you can work with objects only\n// as needed/desired...\n\napi.output({device_id: 'foobar2', percent: 50, duration_ms: 5000 })\n// Hm, these arguments are getting repetitive, lets stop this.\n\nvar output = api.output.defaults({device_id: 'foobar2', percent: 50, duration_ms: 5000 })\n// Better. Now we have a output function with new defaults.\n// and we can always call .defaults again should we wish.\n// Lets use it now.\n\noutput(function(err, result){\n  if (err) ...\n\n  ...\n});\n// Pass your own callback to handle the\n// the io error and/or return value. This of course\n// elliminates the default logging seen above.\n\n\n\n// Helpful notes about .defaults()\n\n// 1. it does not mutate\n//   - .defaults() on the api object returns an entirely new api\n//   - .defaults() on a function returns an entirely new function\nassert api.defaults({...}) !== api\n\n// 2. it is infinitly recrusive so this is possible (but psychotic)\napi.defaults({...}).defaults({...})/* ad infinitum*/.output.defaults({...}).defaults({...}) /* ad infinitum */\n\n// 3. defaults can be introspected by passing no arguments, e.g. given a stock api instnace\napi.defaults()\n// -> { host: 'https://api-http.littlebitscloud.cc', version: '2' }\n\n\n\n// Fin.\n\n// You've seen several different function signatures.\n// They are at your disposal to choose as desired.\n// See API docs for more details and Have fun!\n```\n\n\n\n## API Functions\n\nAbbreviated information. See [*API Function Signatures*](#api-function-signatures) for details about the argument pattern uniformly accepted.\n\n----\n#### .defaults()\n\nSee [*Defaults System*](#defaults-system).\n\nKey Points:\n  - Supports snake_case or camelCase key names\n  - Returns new instances, does not mutate existing defaults\n  - Returns current defaults if invoked with no arguments\n\n\n----\n#### .devices()\n\nGet information for all devices.\n\n`callback` result argument: `[Device]`\n\n\n----\n#### .device()\n\nGet information for one device.\n\n`options` arguments\n\n  - `device_id :: String`\n\n`callback` result argument: `Device`\n\n\n----\n#### .activate()\n\nActivate one device. (FYI: associates device to user; User id is attained from the provided access_token)\n\n`options` arguments\n\n  - `device_id :: String`\n\n`callback` result argument: `Device`\n\n\n----\n#### .deactivate()\n\nDectivate one device.\n\n`options` arguments\n\n  - `device_id :: String`\n\n`callback` result argument: `Device`\n\n\n----\n#### .output()\n\nSend amplitude out of the device.\n\n`options` arguments:\n\n  - `percent :: Float | >= 0, <= 100`\n  - `duration_ms :: Integer | >= 0`\n  - `device_id :: String`\n\n`callback` result argument: ***TODO***\n\n\n----\n#### .light()\n\nActivate device light.\n\n`options` arguments:\n\n  - `color :: String | \"green\" \"yellow\" \"red\" \"blue\" \"purple\" \"white\" \"cyan\" \"clownbarf\"`\n  - `mode :: String | \"blink\" \"hold\"`\n  - `duration_ms :: Integer | >= 0`\n  - `device_id :: String`\n\n`callback` result argument: ***TODO***\n\n\n----\n#### .subscriptions()\n\nGet the subscriptions for given sub/pub.\n\n`options` arguments:\n\n  - `?` `subscriber_id :: device_id || uri`  \n    Filter subscriptions to those where `subscriber_id` matches.\n  - `?` `publisher_id :: device_id`  \n    Filter subscriptions to those where `publisher_id` matches.\n\n`callback` result argument: `[Subscription]`\n\n\n----\n#### .unsubscribe()\n\nDelete the subscription for given sub/pub.\n\n`options` arguments:\n\n  - `subscriber_id :: device_id || uri`\n  - `publisher_id :: device_id`\n\n`callback` result argument: ***TODO***\n\n\n----\n#### .subscribe()\n\nCreate a new subscription for given sub/pub.\n\n`options` arguments:\n\n  - `subscriber_id :: device_id || uri`\n  - `publisher_id :: device_id`\n  - `?` `publisher_events :: [Event]`  \n    Defaults to: `[\"amplitude:delta:ignite\"]`\n\n`callback` result argument: ***TODO***\n\n\n\n## Types\n\n##### Event\n```\nA String of any following value:\n\n\"amplitude\"\n\"amplitude:delta:sustain\"\n\"amplitude:delta:ignite\"\n\"amplitude:delta:release\"\n\"amplitude:delta:nap\"\n\"amplitude:level:active\"\n\"amplitude:level:idle\"\n```\n\n##### Subscription\n```\n{\n  subscriber_id    :: device_id || URI\n  publisher_id     :: device_id\n  publisher_events :: [Event]\n}\n```\n\n##### Device\n```\n{\n  id            :: String\n  user_id       :: Integer\n  label         :: String\n  subscribers   :: [Subscription]\n  subscriptions :: [Subscription]\n}\n```\n\n\n\n## API Function Signatures\n\nAll API functions (***except `.defaults`***) are variadic-polymorphic, following these defintions.\n\n##### Arity 0\n```\nf :: -> void\n```\n##### e.g.:\n```js\napi.output()\n```\n\n\n----\n##### Arity 1\n```\nf :: (err, * -> void) -> void\n```\n```\nf :: ID -> void\n```\n```\nf :: Options -> void\n```\n##### e.g.:\n```js\napi.output(function(err, result){ /*...*/ })\napi.output('foobar-device-id')\napi.output({ device_id: 'foobar-device-id', duration_ms: 500 })\n```\n\n\n----\n##### Arity 2\n```\nf :: ID, (err, * -> void) -> void\n```\n```\nf :: Options, (err, * -> void) -> void\n```\n```\nf :: ID, Options -> void\n```\n##### e.g.:\n```js\napi.output('foobar-device-id', function(err, result){ /*...*/ })\napi.output({ device_id: 'foobar-device-id', duration_ms: 500 }, function(err, result){ /*...*/ })\napi.output('foobar-device-id', { duration_ms: 500 })\n```\n\n\n----\n##### Arity 3\n```\nf :: ID, Options, (err, * -> void) -> void\n```\n##### e.g.:\n```js\napi.output('foobar-device-id', { duration_ms: 500 }, function(err, result){ /*...*/ })\n```\nFor all arity cases:\n\n- `Options` arguments that you omit are patched by defaults. You may customize defaults (see next section).\n\n- `ID` refers to `device_id` which can alternatively be argued in `Options` as `device_id`. Certain functions do not need a `device_id`, such as `subscribe` in which case it is useless (but harmless), to argue this.\n\n- `callback` is patched by `console.log`. This is useful for rapid manual tests, playing around, etc. It also helps keep track of unhandled `callbacks` which you *should* be handling in non-trivial work. If you really want a `noop` then just argue one.\n\n\n## Defaults system\n\n#### .defaults()\n\n##### get\n```\ndefaults :: -> Options\n```\nGet the current defaults.\n\n##### set\n\n```\ndefaults :: Options -> API\n```\nCreate a new api with new defaults. Existing api instance is not mutated. All functions of new api instance will read from these new defaults.\n\nThis is a good place to argue `access_token` etc.\n\n`options` arguments:\n\n  - `?` `host :: URI`  \n    The HTTP server to make requests against. By default equals `'api-http.littlebitscloud.cc'` but you may override as desired, e.g. work against local development servers.\n  - `?` `version :: String`  \n    The littleBits Cloud HTTP API version to use. By default equals `'2'`.\n  - `?` `access_token :: String`  \n    The OAuth access_token that will be used by the server to authorize your requsts.\n\n\n\n#### .{api_function}.defaults()\n##### get\n```\ndefaults :: -> Options\n```\nGet the current defaults.\n\n##### set\n\n```\ndefaults :: Options -> API_Function\n```\nCreate a new api function (f) with new defaults. Existing f is not mutated.\n\n`options` arguments: See docs for each function respectively.\n","starsCount":1,"created":"2014-12-17T16:02:14.563Z","modified":"2015-02-13T22:09:36.916Z","lastPublisher":{"name":"jasonkuhrt","email":"jasonkuhrt@me.com"},"owners":[{"name":"jasonkuhrt","email":"jasonkuhrt@me.com"}],"other":{"_attachments":{},"_from":".","_id":"littlebits-cloud-http","_nodeVersion":"0.10.36","_npmUser":{"name":"jasonkuhrt","email":"jasonkuhrt@me.com"},"_npmVersion":"2.4.1","_rev":"1-ae75543a857ebf80a9a1462d46636aca","_shasum":"6dca3087ba36aa9a39778107aea30cc1dfb032e0","author":{"name":"Jason Kuhrt","email":"jasonkuhrt@me.com","url":"http://jasonkuhrt.com/"},"bugs":{"url":"https://github.com/littlebits/cloud-client-api-http/issues"},"directories":{},"dist-tags":{"latest":"0.3.4"},"dist":{"shasum":"6dca3087ba36aa9a39778107aea30cc1dfb032e0","tarball":"http://registry.npmjs.org/littlebits-cloud-http/-/littlebits-cloud-http-0.3.4.tgz"},"maintainers":[{"name":"jasonkuhrt","email":"jasonkuhrt@me.com"}],"readmeFilename":"README.md","time":{"modified":"2015-02-13T22:09:36.916Z","created":"2014-12-17T16:02:14.563Z","0.3.2":"2014-12-17T16:02:14.563Z","0.3.3":"2015-01-29T01:03:02.513Z","0.3.4":"2015-02-13T22:09:36.916Z"},"users":{"anmol1771":true}}}