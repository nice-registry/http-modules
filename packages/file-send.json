{"name":"file-send","version":"2.1.4","description":"A http file send","homepage":"https://nuintun.github.io/file-send","repository":"https://github.com/nuintun/file-send","license":"MIT","engines":{"node":">=0.10.0"},"keywords":["http","https","server","http send","https send","file send","file stream"],"dependencies":{"ms":"^2.0.0","etag":"^1.8.0","fresh":"^0.5.0","mime-types":"^2.1.15","destroy":"^1.0.4","colors":"^1.1.2","micromatch":"^3.0.2","encodeurl":"^1.0.1","escape-html":"^1.0.3","on-finished":"^2.3.0","range-parser":"^1.2.0","readable-stream":"^2.2.10"},"devDependencies":{"after":"^0.8.2","chai":"^4.0.1","superagent":"^3.5.2"},"scripts":{"test":"mocha --timeout 6000 --check-leaks --reporter spec --bail","test-ci":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --timeout 6000 --check-leaks --reporter spec","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --timeout 6000 --check-leaks --reporter dot"},"gitHead":"6789cdfd124295a3df2518e8afe6005b6714f755","versions":[{"number":"0.0.1","date":"2014-12-09T16:14:50.485Z"},{"number":"0.0.2","date":"2014-12-10T03:45:52.850Z"},{"number":"0.1.0","date":"2015-05-19T06:54:39.121Z"},{"number":"0.1.1","date":"2015-05-20T08:09:06.912Z"},{"number":"0.1.2","date":"2015-11-11T10:02:20.929Z"},{"number":"0.1.3","date":"2016-02-29T09:22:01.113Z"},{"number":"1.0.0","date":"2016-03-01T04:13:23.013Z"},{"number":"1.0.1","date":"2016-03-14T02:23:51.486Z"},{"number":"1.0.2","date":"2016-04-19T02:36:00.142Z"},{"number":"1.0.3","date":"2016-05-05T10:40:36.404Z"},{"number":"1.0.4","date":"2016-05-17T07:15:20.292Z"},{"number":"1.0.5","date":"2016-05-20T08:54:07.534Z"},{"number":"2.0.0","date":"2016-07-08T10:02:14.379Z"},{"number":"2.0.1","date":"2016-07-12T10:06:48.146Z"},{"number":"2.0.2","date":"2016-08-18T03:36:02.251Z"},{"number":"2.0.3","date":"2016-09-21T03:43:24.400Z"},{"number":"2.0.4","date":"2016-11-10T07:57:09.143Z"},{"number":"2.0.6","date":"2016-11-11T06:00:54.089Z"},{"number":"2.0.7","date":"2017-02-09T02:51:11.730Z"},{"number":"2.0.8","date":"2017-03-03T07:33:02.071Z"},{"number":"2.0.9","date":"2017-03-16T02:52:45.941Z"},{"number":"2.1.0","date":"2017-03-16T07:14:03.141Z"},{"number":"2.1.1","date":"2017-03-21T07:24:28.302Z"},{"number":"2.1.2","date":"2017-04-20T04:00:45.541Z"},{"number":"2.1.3","date":"2017-05-24T10:32:09.106Z"},{"number":"2.1.4","date":"2017-06-02T09:38:25.136Z"}],"readme":"# file-send\n\n>A http/https file send\n>\n>[![NPM Version][npm-image]][npm-url]\n>[![Download Status][download-image]][npm-url]\n>[![Linux Status][travis-image]][travis-url]\n>[![Windows Status][appveyor-image]][appveyor-url]\n>[![Test Coverage][coveralls-image]][coveralls-url]\n>![Node Version][node-image]\n>[![Dependencies][david-image]][david-url]\n\n## Installation\n\n```bash\n$ npm install file-send\n```\n\n## API\n\n```js\nvar http = require('http');\nvar FileSend = require('file-send');\nvar through2 = require('through2');\n\nhttp.createServer(function(request, response) {\n  FileSend(request, {\n    root: '/',\n    etag: false,\n    maxAge: '30d'\n  }) // Create a new file send stream\n  .on('headers', function(headers) {\n    // headers events\n  })\n  .on('dir', function(realpath, stats, next) {\n    // dir events\n  })\n  .on('error', function(error, next) {\n    // error events\n  })\n  .on('finish', function(headers) {\n    // finish events\n  })\n  .pipe(through2()) // Send file to custom stream\n  .pipe(response); // Send file to response\n});\n```\n\n### FileSend(request, [options])\n\n  Create a new `FileSend` for the given options to initialize.\n\n#### Options\n\n##### *root* - ```String```\n\n  Set server root.\n\n##### *ignore* - ```String|Array```\n\n  Set ignore rules, support glob string.  see: [micromatch](https://github.com/jonschlinkert/micromatch)\n\n##### *glob* - ```Object```\n\n  Set micromatch options.  see: [micromatch](https://github.com/jonschlinkert/micromatch#options)\n\n##### *ignoreAccess* - ```String```\n\n  Set how \"ignore\" are treated when encountered.\n\n  The default value is `'deny'`.\n\n  - `'deny'` Send a 403 for any request for ignore matched.\n  - `'ignore'` Pretend like the ignore matched does not exist and 404.\n\n##### *charset* - ```String```\n\n  Set Content-Type charset.\n\n##### *parseQueryString* - ```String```\n\n  Set url.parse options. see node url module.\n\n##### *slashesDenoteHost* - ```String```\n\n  Set url.parse options. see node url module.\n\n##### *etag* - ```Boolean```\n\n  Enable or disable etag generation, defaults to true.\n\n##### *index* - ```String|Array|Boolean```\n\n  By default send supports \"index.html\" files, to disable this set `false` or to supply a new index pass a string or an array in preferred order.\n\n##### *lastModified*\n\n  Enable or disable `Last-Modified` header, defaults to true. Uses the file system's last modified value.\n\n##### *maxAge*\n\n  Provide a max-age in milliseconds for http caching, defaults to 0.\n  This can also be a string accepted by the [ms](https://www.npmjs.org/package/ms#readme) module.\n\n### FileSend(request, [options]).pipe(response)\n\n The `pipe` method is like stream.pipe, but only hava one param.\n\n### Events\n  The `FileSend` is an event emitter and will emit the following events:\n\n  - `headers` the headers are about to be set on a file `(headers)`\n  - `dir` a directory was requested`(realpath, stats, next)`\n  - `error` an error occurred `(error, next)`\n  - `finish` streaming has completed\n\n## Error-handling\n\n  By default when no `error` listeners are present an automatic response will be made, otherwise you have full control over the response, aka you may show a 5xx page etc.\n\n## Caching\n\n  It does _not_ perform internal caching, you should use a reverse proxy cache such as Varnish for this, or those fancy things called CDNs. If your application is small enough that it would benefit from single-node memory caching, it's small enough that it does not need caching at all ;).\n\n## Running tests\n\n```\n$ npm install\n$ npm test\n```\n\n## Examples\n\n```js\n'use strict';\n\nvar http = require('http');\nvar FileSend = require('../index');\nvar colors = require('colors/safe');\nvar cluster = require('cluster');\nvar NUMCPUS = require('os').cpus().length;\n\n// create server\nfunction createServer(root, port) {\n  http.createServer(function(request, response) {\n    var send = new FileSend(request, {\n      root: root || '../',\n      maxAge: '3day',\n      ignore: ['/**/.*?(/*.*|/)'],\n      index: ['index.html']\n    });\n\n    send.pipe(response).on('headers', function(headers) {\n      var message = 'URL      : ' + colors.green.bold(send.url) +\n        '\\r\\nPATH     : ' + colors.yellow.bold(send.path) +\n        '\\r\\nROOT     : ' + colors.magenta.bold(send.root) +\n        '\\r\\nREALPATH : ' + colors.magenta.bold(send.realpath) +\n        '\\r\\nSTATUS   : ' + colors.cyan.bold(send.statusCode) +\n        '\\r\\nHEADERS  : ' + colors.cyan.bold(JSON.stringify(headers, null, 2)) +\n        '\\r\\n-----------------------------------------------------------------------------------------';\n\n      process.send(message);\n    });\n  }).listen(port || 8080, '127.0.0.1');\n}\n\nif (cluster.isMaster) {\n  // fork workers\n  for (var i = 0; i < NUMCPUS; i++) {\n    var worker = cluster.fork().on('listening', (function(i) {\n      return function(address) {\n        // worker is listening\n        if (i === NUMCPUS - 1) {\n          console.log(\n            colors.green.bold('Server run at:'),\n            colors.cyan.bold(address.address + ':' + address.port),\n            '\\r\\n-----------------------------------------------------------------------------------------'\n          );\n        }\n      };\n    }(i)));\n\n    worker.on('message', function(message) {\n      console.log(message);\n    });\n  }\n} else {\n  // workers can share any tcp connection\n  // in this case it is an http server\n  createServer();\n}\n```\n\n## License\n\n[MIT](LICENSE)\n\n[travis-image]: https://img.shields.io/travis/nuintun/file-send.svg?style=flat-square&label=linux\n[travis-url]: https://travis-ci.org/nuintun/file-send\n[appveyor-image]: https://img.shields.io/appveyor/ci/nuintun/file-send.svg?style=flat-square&label=windows\n[appveyor-url]: https://ci.appveyor.com/project/nuintun/file-send\n[coveralls-image]: https://img.shields.io/coveralls/nuintun/file-send/master.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/nuintun/file-send?branch=master\n[node-image]: https://img.shields.io/node/v/file-send.svg?style=flat-square\n[david-image]: https://img.shields.io/david/nuintun/file-send.svg?style=flat-square\n[david-url]: https://david-dm.org/nuintun/file-send\n[npm-image]: https://img.shields.io/npm/v/file-send.svg?style=flat-square\n[npm-url]: https://www.npmjs.org/package/file-send\n[download-image]: https://img.shields.io/npm/dm/file-send.svg?style=flat-square\n","created":"2014-12-09T16:14:50.485Z","modified":"2017-06-02T09:38:25.136Z","lastPublisher":{"name":"nuintun","email":"nuintun@qq.com"},"owners":[{"name":"nuintun","email":"nuintun@qq.com"}],"other":{"_attachments":{},"_id":"file-send","_nodeVersion":"8.0.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/file-send-2.1.4.tgz_1496396305043_0.5093667923938483"},"_npmUser":{"name":"nuintun","email":"nuintun@qq.com"},"_npmVersion":"5.0.1","_rev":"11-494ad085b8f66085cd329c05de50784a","author":{"name":"nuintun","email":"nuintun@qq.com"},"bugs":{"url":"https://github.com/nuintun/file-send/issues","email":"nuintun@qq.com"},"directories":{},"dist-tags":{"latest":"2.1.4"},"dist":{"integrity":"sha512-jAg2mNbdVCQRz8M4prYes0GHEToZz8CdjAVklAR5rWdtR8GEDYZT2A6Ijzfbbq0w3aEgE+s6h4uJNqcamj5vtQ==","shasum":"7a52ce5a2bf153685f56cc1892d352d18c0cf8bb","tarball":"https://registry.npmjs.org/file-send/-/file-send-2.1.4.tgz"},"maintainers":[{"name":"nuintun","email":"nuintun@qq.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-02T09:38:25.136Z","created":"2014-12-09T16:14:50.485Z","0.0.1":"2014-12-09T16:14:50.485Z","0.0.2":"2014-12-10T03:45:52.850Z","0.1.0":"2015-05-19T06:54:39.121Z","0.1.1":"2015-05-20T08:09:06.912Z","0.1.2":"2015-11-11T10:02:20.929Z","0.1.3":"2016-02-29T09:22:01.113Z","1.0.0":"2016-03-01T04:13:23.013Z","1.0.1":"2016-03-14T02:23:51.486Z","1.0.2":"2016-04-19T02:36:00.142Z","1.0.3":"2016-05-05T10:40:36.404Z","1.0.4":"2016-05-17T07:15:20.292Z","1.0.5":"2016-05-20T08:54:07.534Z","2.0.0":"2016-07-08T10:02:14.379Z","2.0.1":"2016-07-12T10:06:48.146Z","2.0.2":"2016-08-18T03:36:02.251Z","2.0.3":"2016-09-21T03:43:24.400Z","2.0.4":"2016-11-10T07:57:09.143Z","2.0.6":"2016-11-11T06:00:54.089Z","2.0.7":"2017-02-09T02:51:11.730Z","2.0.8":"2017-03-03T07:33:02.071Z","2.0.9":"2017-03-16T02:52:45.941Z","2.1.0":"2017-03-16T07:14:03.141Z","2.1.1":"2017-03-21T07:24:28.302Z","2.1.2":"2017-04-20T04:00:45.541Z","2.1.3":"2017-05-24T10:32:09.106Z","2.1.4":"2017-06-02T09:38:25.136Z"}}}