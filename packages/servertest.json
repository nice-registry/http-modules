{"name":"servertest","version":"1.2.1","description":"A simple HTTP server testing tool","main":"servertest.js","scripts":{"test":"node test.js"},"license":"MIT","repository":"https://github.com/rvagg/servertest","keywords":["api","bolognese","http","test","testing"],"dependencies":{"bl":"~1.0.0","hyperquest":"~1.2.0","reduplexer":"~1.1.0","through2":"~2.0.0"},"devDependencies":{"tape":"~2.14.0"},"gitHead":"9ed30f641445ec94691754c625e3138b8805bd9a","homepage":"https://github.com/rvagg/servertest#readme","versions":[{"number":"1.0.0","date":"2014-08-17T11:51:02.537Z"},{"number":"1.0.1","date":"2014-08-17T11:51:58.139Z"},{"number":"1.0.2","date":"2014-08-17T11:55:51.427Z"},{"number":"1.0.3","date":"2014-08-17T12:26:37.767Z"},{"number":"1.1.0","date":"2014-08-19T12:46:20.205Z"},{"number":"1.1.1","date":"2014-11-10T11:36:18.774Z"},{"number":"1.2.0","date":"2014-12-24T10:49:01.663Z"},{"number":"1.2.1","date":"2015-06-27T02:17:20.977Z"}],"readme":"# servertest\n\n**A simple HTTP server testing tool**\n\n[![NPM](https://nodei.co/npm/servertest.png?downloads=true&downloadRank=true)](https://nodei.co/npm/servertest/)\n[![NPM](https://nodei.co/npm-dl/servertest.png?months=6&height=3)](https://nodei.co/npm/servertest/)\n\n## Why?\n\n**servertest** exists because [supertest](https://github.com/visionmedia/supertest) does way too much and gets in the way when you need to do anything novel (the typical \"framework\" problem).\n\n**servertest** doesn't do any assertions for you, you simply hand it an HTTP server and it manages the start / stop lifecycle and makes a request for you, passing you back the results. **servertest** is built on **[hyperquest](https://github.com/substack/hyperquest)** as an HTTP client and supports the same options as hyperquest and will stream if you need to (in and/or out).\n\n## Examples\n\n```js\nvar server = http.createServer(function (req, res) {\n  res.end('OK')\n})\n\ntest('simple web server', function (t) {\n  servertest(server, '/', { encoding: 'utf8' }, function (err, res) {\n    t.ifError(err, 'no error')\n    t.equal(res.statusCode, 200, 'correct statusCode')\n    t.equal(res.body, 'OK', 'correct body content')\n    t.end()\n  })\n})\n```\n\nEven JSON encoding can be handled for you:\n\n```js\nvar server = http.createServer(function (req, res) {\n  res.end(JSON.stringify({ ok: 'mate' }))\n})\n\ntest('json web server', function (t) {\n  servertest(server, '/', { encoding: 'json' }, function (err, res) {\n    t.ifError(err, 'no error')\n    t.equal(res.statusCode, 200, 'correct statusCode')\n    t.deepEqual(res.body, { ok: 'mate' }, 'correct body content')\n    t.end()\n  })\n})\n```\n\nAnd of course it's streams all the way:\n\n```js\n// uppercasing server, post it a string and it'll return\n// an uppercased version of it\nvar server = http.createServer(function (req, res) {\n  req.pipe(through2(function (chunk, enc, callback) {\n    callback(null, chunk.toString().toUpperCase())\n  })).pipe(res)\n})\n\ntest('duplex uppercasing server', function (t) {\n  // servertest is a duplex stream when posting data\n  var serverStream = servertest(server, '/', { method: 'POST' })\n\n  // pipe data to the POST request\n  fs.createReadStream(__filename).pipe(serverStream)\n\n  // pipe data from the response\n  serverStream.pipe(bl(function (err, data) {\n    t.ifError(err, 'no error')\n\n    var expected = fs.readFileSync(__filename, 'utf8').toUpperCase()\n    t.equal(data.toString(), expected, 'uppercased data')\n    t.end()\n  }))\n})\n```\n\nOf course this assumes that you have easy access to your `http.Server` object in your tests. Normally you will want to expose it on your server directly on your main server start script and not perform the `listen()` yourself if it's not being run as the \"main\":\n\n**index.js**\n\n```js\nmodule.exports = function () {\n  return http.createServer(handler)\n}\n\nif (require.main === module) {\n  module.exports().listen(port, function (err) {\n    console.log('Server started on port %d', port)\n  })\n}\n```\n\nThen you can do this:\n\n**test.js**\n\n```js\nvar server = require('./index')\n\ntest('test server', function (t) {\n  servertest(server(), '/path/to/test', function (err, data) {\n  \t// ...\n  })\n})\n```\n\nOr you could reuse the same `server` object but that's probably not so savoury for testing.\n\n## API\n\n### servertest(server, uri, options, callback)\n\nFull arguments form, taking an `http.Server` instance (or similar object that performs a `listen()`), the `uri` to append to `http://localhost` and the random port number assigned on the `listen()`, the `options` object which is mostly passed on to [hyperquest](https://github.com/substack/hyperquest). The `callback` function will receive either an `Error` as the first argument or a special `response` object that contains data about the response, see below\n\n### servertest(server, uri, callback)\n\nThe `options` argument is optional, default options will be used for hyperquest, including assuming this is a GET request.\n\n### var stream = servertest(server, uri, { method: 'POST' }, callback)\n\nA common POST request form whereby you have a WritableStream you can write data to (either via a `pipe()` or simply `write()` and `end()`).\n\n### var stream = servertest(server, uri, { method: 'POST' })\n\nDon't use a `callback` function to receive the data. Instead, the `stream` is a DuplexStream which has some metadata on the `stream` object (including the `request` object direct from hyperquest) and you will need to `pipe()` it to a WritableStream (or `read()` or `on('data')`, whatever you prefer).\n\n### options\n\n- <b><code>'encoding'</code></b>: the only option **servertest** currently cares about. If you provide `'utf8'` the `callback` will receive a `String` rather than a `Buffer`. If you provide `'json'` the data received from the server will be passed through `JSON.parse()` and any exceptions will be returned as the `Error` argument to the `callback`.\n\n**[hyperquest](https://github.com/substack/hyperquest)** uses the following options:\n\n- <b><code>'method'</code></b>: request method, defaults to `'GET'`\n- <b><code>'headers'</code></b>: an `Object` (`{}`) defining headers to set on the request\n- <b><code>'auth'</code></b>: if HTTP authentication is required, must be of the form `'user:pass'`\n\nPlus a bunch more for HTTPS.\n\n### response\n\nThe `callback` receives a special `response` object containing data from the server. It will have the following properties:\n\n- <b><code>'headers'</code></b>: an `Object` containing a mapping of the header keys and values received from the server\n- <b><code>'statusCode'</code></b>: the status code of the response from the server\n- <b><code>'body'</code></b>: the response body. By default it will be a `Buffer`. If you use `'utf8'` as the `'encoding'` you'll get a `String` and if you use `'json'` as the `'encoding'` you'll get whatever `JSON.parse()` gives you for the response string.\n\n### error\n\nwhen `servertest` has an encoding error like this [case](test.js#L276-L284), you can access a `response` with the default encoding `UTF-8` or `utf8` from `error.response`, this should give you, the users, much clue as to what your program went wrong.\n\n## License\n\n**servertest** is Copyright (c) 2014 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licenced under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE.md file for more details.\n","starsCount":1,"created":"2014-08-17T11:51:02.537Z","modified":"2015-06-27T02:17:20.977Z","lastPublisher":{"name":"rvagg","email":"rod@vagg.org"},"owners":[{"name":"rvagg","email":"rod@vagg.org"}],"other":{"_attachments":{},"_from":".","_id":"servertest","_nodeVersion":"2.3.2-nightly20150625dcbb9e1da6","_npmUser":{"name":"rvagg","email":"rod@vagg.org"},"_npmVersion":"2.11.3","_rev":"1-a414d11c9040cd8c842b33834b6db526","_shasum":"0a7e9b3ebb6feecb690393b4855771339ca98e8a","author":{"name":"Rod","email":"rod@vagg.org","url":"http://r.va.gg/"},"bugs":{"url":"https://github.com/rvagg/servertest/issues"},"directories":{},"dist-tags":{"latest":"1.2.1"},"dist":{"shasum":"0a7e9b3ebb6feecb690393b4855771339ca98e8a","tarball":"http://registry.npmjs.org/servertest/-/servertest-1.2.1.tgz"},"maintainers":[{"name":"rvagg","email":"rod@vagg.org"}],"readmeFilename":"README.md","time":{"modified":"2015-06-27T02:17:20.977Z","created":"2014-08-17T11:51:02.537Z","1.0.0":"2014-08-17T11:51:02.537Z","1.0.1":"2014-08-17T11:51:58.139Z","1.0.2":"2014-08-17T11:55:51.427Z","1.0.3":"2014-08-17T12:26:37.767Z","1.1.0":"2014-08-19T12:46:20.205Z","1.1.1":"2014-11-10T11:36:18.774Z","1.2.0":"2014-12-24T10:49:01.663Z","1.2.1":"2015-06-27T02:17:20.977Z"},"users":{"cybo42":true}}}