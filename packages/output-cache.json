{"name":"output-cache","description":"A Node JS module to help with caching HTTP responses","version":"1.0.0","dependencies":{"eidetic":"0.1.0","underscore":"1.3.3"},"devDependencies":{"mocha":"1.0.0","jshint":"0.6.3"},"keywords":["cache","output cache","memory","REST"],"engines":{"node":">= 0.6.0"},"main":"./lib/OutputCache.js","repository":"https://github.com/mac-/output-cache","scripts":{"test":"make test"},"readme":"output-cache\n===\n\nOutput-cache is a NodeJS module that can be used to cache HTTP responses in memory on the server.\n\n* Perfect for caching your RESTful endpoints\n* Similar functionality to .NET OutputCache attribute\n* Configurable and easy to invalidate entries in the cache\n* 100% unit test coverage\n\n[![Build Status](https://secure.travis-ci.org/mac-/output-cache.png)](http://travis-ci.org/mac-/output-cache)\n\nInstallation\n===\n\tnpm install output-cache\n\nUsage\n===\n\nDisclaimer: The output-cache module defines a cache on a per-route basis, and therefore, you'll most likely need to have some sort of routing framework in place. The caching needs to happen after routing. I recommend using this in conjunction with a module like express or restify.\n\nYou can create a new output cache instance like so:\n\n\tvar OutputCache = require('output-cache');\n\tvar outputCache = new OutputCache(options);\n\nThe constructor takes an options object that can have the following properties:\n\n* maxCacheSizePerRoute (default: 50) - The maximum number of items to keep in the cache on a per route basis\n* removeOldEntriesWhenFull (default: false) - If set to true and the cache is full, it will always keep the newest entries and automatically remove the oldest ones\n* parametersPropertyName (default: 'params') - Modules like express and restify assign route paramters to a 'params' property on the request object. If you are using a module that stores route parameters on a different named property on the request object, use this to configure where parameters are stored.\n* headersPropertyName (default: 'headers') - Modules like express and restify assign request header values to a 'headers' property on the request object. If you are using a module that stores request header values on a different named property on the request object, use this to configure where request header values are stored.\n\nNote: these are also available as public properties.\n\n\nThe cache method is used to define the route and options for caching the response to a given endpoint:\n\n\tcache(route:String, options:Object, routeHandler:Function)\n\n* route - required, the route that the cached response will be associated to\n* options - optional, the options to use for caching; see below for more deatils\n* routeHandler - required, the logic that will be run when there is nothing in the cache for the request (your normal route handling logic)\n* returns a handle to a function that is used to intercept the sending of responses (you really don't need to care much about this :))\n\nCaching Options:\n\n* location (default: 'none') - tells the server what cache control headers should be sent along with the response and if responses should be cached on the server. Valid locations are:\n\t* 'none' - Not cached on server, Cache-Control: none\n\t* 'server - Cached on server, Cache-Control: none\n\t* 'downstream' - Not cached on server, Cache-Control: public\n\t* 'any' - Cached on server, Cache-Control: public\n\t* 'client' - Not cached on server, Cache-Control: private\n\t* 'serverAndClient' - Cached on server, Cache-Control: private\n* varyByParam (default: []) - a collection of the names of parameters to vary the cache on\n* varyByHeader (default: []) - a collections of the names of headers to vary the cache on\n* durationSeconds (default: 1) - the number of seconds to cache the response\n* useSlidingExpiration (default: false) - tells the module whether or not the entry's cache duration will be reset on a cache hit\n\n\nThe invalidate method is used to remove entries from the cache:\n\n\tinvalidate(route:String, parameters:Object, headers:Object)\n\n* route - required, the route that the cached response will be associated to\n* parameters - required, an object containing the names and values of the parameters of the request to invalidate\n* headers - required, an object containing the names and values of the headers of the request to invalidate\n\nHere is an example:\n\n\tvar app = require('express').createServer(),\n\t\tOutputCache = require('output-cache'),\n\t\toutputCache = new OutputCache({ maxCacheSizePerRoute: 10, removeOldEntriesWhenFull: true}),\n\t\tcacheOptions = {\n\t\t\tlocation: outputCache.cacheLocation.SERVER,\n\t\t\tvaryByParam: ['userId'],\n\t\t\tdurationSeconds: 60\n\t\t};\n\t\n\tapp.get('/users/:userId', outputCache.cache('/users/:userId', cacheOptions, function(req, res, next) {\n\t\tif (req.params.userId < 1) {\n\t\t\tres.send(404, 'Not Found');\n\t\t\treturn;\n\t\t}\n\t\tres.send(200, 'hello user:' + req.params.userId);\n\t}));\n\n\tapp.listen(3000);\n\n\nLicense\n===\nThe MIT License (MIT) Copyright (c) 2012 Mac Angell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","versions":[{"number":"0.1.0","date":"2012-08-08T05:11:07.433Z"},{"number":"0.1.1","date":"2012-08-09T05:24:31.835Z"},{"number":"1.0.0","date":"2012-09-20T06:27:31.111Z"}],"created":"2012-08-08T05:11:06.353Z","modified":"2012-09-20T06:27:31.111Z","lastPublisher":{"name":"mac-","email":"mac.ang311@gmail.com"},"owners":[{"name":"mac-","email":"mac.ang311@gmail.com"}],"other":{"_attachments":{},"_id":"output-cache","_npmUser":{"name":"mac-","email":"mac.ang311@gmail.com"},"_npmVersion":"1.1.59","_rev":"1-6f5116ab9ef0225e7e7006cd56313139","contributors":[{"name":"Mac Angell","email":"mac.ang311@gmail.com"}],"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"1e7ed1458dd79873f7ce885a16c93515d5aca334","tarball":"http://registry.npmjs.org/output-cache/-/output-cache-1.0.0.tgz"},"maintainers":[{"name":"mac-","email":"mac.ang311@gmail.com"}],"time":{"modified":"2012-09-20T06:27:31.111Z","created":"2012-08-08T05:11:06.353Z","0.1.0":"2012-08-08T05:11:07.433Z","0.1.1":"2012-08-09T05:24:31.835Z","1.0.0":"2012-09-20T06:27:31.111Z"}}}