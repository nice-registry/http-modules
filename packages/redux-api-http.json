{"name":"redux-api-http","version":"2.0.1","description":"calling api's using redux architecture","main":"./dist/app.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1","build":"grunt"},"repository":"https://github.com/ksibesh/redux-api-http","keywords":["redux","api","ajax","axios"],"license":"ISC","homepage":"https://github.com/ksibesh/redux-api-http#readme","devDependencies":{"babel-preset-es2015":"^6.9.0","grunt":"^1.0.1","grunt-babel":"^6.0.0"},"dependencies":{"axios":"^0.13.1"},"gitHead":"251828cc9dc09062461e6090624d523a958eed14","versions":[{"number":"0.0.1","date":"2016-07-15T18:40:16.977Z"},{"number":"1.0.0","date":"2016-07-16T17:40:32.901Z"},{"number":"1.0.1","date":"2016-07-16T17:46:59.313Z"},{"number":"1.0.2","date":"2016-07-19T13:39:30.064Z"},{"number":"2.0.0","date":"2016-07-27T15:18:19.880Z"},{"number":"2.0.1","date":"2016-07-29T15:27:12.752Z"}],"readme":"# redux-api-http\n\nLibrary to send http request while following redux architecture.\n\n**Installation**\n\n> npm install redux-api-http --save\n\n**Importing the service**\n\nit can be imported as a reference of class object\n```javascript\nimport {asyncService} from 'redux-api-http';\n```\n\nor, as the class itself\n```javascript\nimport AsyncService from 'redux-api-http';\n```\n\nin the first case we can import reducers also as a constant import\n```javascript\nimport {asyncService, apiReducer} from 'redux-api-http';\n```\n\nfor the second case we need to fetch the reducer by creating object of class\n```javascript\nimport AsyncService from 'redux-api-http';\n\nAsyncService service = new AsyncService();\nlet reducer = service.getReducer();\n```\n\nThis service exposes two major function for users `dispatch` method for sending api request and `remove` method for removing api response from the store (the later functionality is useful in some cases)\n\nmethod signature for `dispatch`\n```javascript\ndispatch = function(key, api, method, data, headers) {\n\t// some defination\n}\n```\n\nhere `key` is the unique api identifier used to distinguish api data in store from one another. This package also export a constant object for `method` field\n```javascript\napiMethod = {\n\tGET: 'get',\n\tPOST: 'post',\n\tPUT: 'put', \n\tDELETE: 'delete'\n}\n```\n\nto import it\n```javascript\nimport {apiMethod} from 'redux-api-http';\n```\n\nmethod signature for `remove`\n```javascript\nremove = function(key) {\n\t// some defination\n}\n```\n\nhere `key` is the same key which we used in dispatch method to uniquely identify the api and distinguish its state in the store.\n\n*generalised usage*\n```javascript\nimport {asyncService} from 'redux-api-http';\n\nlet data = {\n\tkey1: 'value',\n\tkey2: 'value'\n};\nlet header = {\n\theader1: 'value',\n\theader2: 'value'\n};\n\nasyncService.dispatch('myApiKey', 'http://mySampleApi.com/service1', 'get', data, header);\n\nasynService.remove('myApiKey');\n```\n\n**Example**\n```javascript\n\n// Container Component\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {combineReducers, createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport {apiReducer} from 'redux-api-http';\nimport DummyComponent from '<path>';\n\nlet reducers = combineReducers({\n\t'apiReducer': apiReducer\n});\nlet store = createStore(reducers);\n\nclass SomeComponent extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<Provider store={store}>\n\t\t\t\t<DummyComponent />\n\t\t\t</Provider>\n\t\t);\n\t}\n}\nReactDOM.render(<SomeComponent />, document.getElementById('container'));\n\n// Dummy Component\nimport React from 'react';\nimport {asyncService, apiMethod} from 'redux-api-http';\n\nclass DummyComponent extends React.Component {\n\tcomponentDidMount() {\n\t\tthis.props.dispatch(asyncService.dispatch('key','http://someapi.com/service', apiMethod.GET, {}, {}));\n\t}\n\t\n\trender() {\n\t\tconsole.log(this.props.someProp);\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tdummy component\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// here apiReducer is used because we register our reducer with this name in the above code\nlet mapStateToProps = (state) => ({\n\tsomeProp: state.apiReducer.key\n})\nexport default connect(mapStateToProps)(DummyComponent);\n```\n","starsCount":1,"created":"2016-07-15T18:40:16.977Z","modified":"2016-07-29T15:27:12.752Z","lastPublisher":{"name":"ksibesh","email":"ksibesh@gmail.com"},"owners":[{"name":"ksibesh","email":"ksibesh@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"redux-api-http","_nodeVersion":"6.2.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/redux-api-http-2.0.1.tgz_1469806032492_0.8418226616922766"},"_npmUser":{"name":"ksibesh","email":"ksibesh@gmail.com"},"_npmVersion":"3.10.5","_rev":"1-62db687e4b9f1b0d977c5a8ae019cd17","_shasum":"c6abb8c3d72dc5abed5429b377731433fd00b17a","author":{"name":"ksibesh"},"bugs":{"url":"https://github.com/ksibesh/redux-api-http/issues"},"directories":{},"dist-tags":{"latest":"2.0.1"},"dist":{"shasum":"c6abb8c3d72dc5abed5429b377731433fd00b17a","tarball":"http://registry.npmjs.org/redux-api-http/-/redux-api-http-2.0.1.tgz"},"maintainers":[{"name":"ksibesh","email":"ksibesh@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-07-29T15:27:12.752Z","created":"2016-07-15T18:40:16.977Z","0.0.1":"2016-07-15T18:40:16.977Z","1.0.0":"2016-07-16T17:40:32.901Z","1.0.1":"2016-07-16T17:46:59.313Z","1.0.2":"2016-07-19T13:39:30.064Z","2.0.0":"2016-07-27T15:18:19.880Z","2.0.1":"2016-07-29T15:27:12.752Z"},"users":{"ksibesh":true}}}