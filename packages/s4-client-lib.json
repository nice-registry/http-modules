{"name":"s4-client-lib","version":"2.1.1","description":"Client library for S4 clients. Provides the necessary API to convert a stream of incoming data into an HTTP request with necessary metadata in headers.","main":"lib/index.js","scripts":{"test":"grunt test:unit"},"keywords":["Audio Source Separation","Speech Recognition","Lyric Semiconductor"],"license":"ISC","dependencies":{"q":"^1.1.2"},"devDependencies":{"chai":"^1.9.1","chai-as-promised":"^4.1.1","grunt":"^0.4.5","grunt-bump":"^0.3.0","grunt-contrib-clean":"^0.6.0","grunt-contrib-jshint":"^0.10.0","grunt-contrib-watch":"^0.6.1","grunt-jsbeautifier":"^0.2.7","grunt-mocha-istanbul":"^2.3.1","istanbul":"^0.3.11","jshint-stylish":"^0.4.0","load-grunt-tasks":"^0.6.0","mocha":"^2.2.1","nock":"^0.45.0","node-uuid":"^1.4.1","request":"^2.40.0","sinon":"^1.10.3","sinon-chai":"^2.6.0","time-grunt":"^1.0.0","uuid":"^2.0.1","wysknd-lib":"git+http://github.com/vamship/wysknd-lib.git"},"repository":{"type":"git","url":"https://gitlab.lyricsemiconductor.com/platformdevops/s4-client-lib.git"},"gitHead":"d24ee7a3580b739568628606263baae052c46faf","versions":[{"number":"1.0.0","date":"2015-03-19T14:32:20.191Z"},{"number":"1.0.1","date":"2015-04-13T17:16:02.442Z"},{"number":"1.1.0","date":"2015-04-14T19:39:20.788Z"},{"number":"1.1.1","date":"2015-04-15T20:09:18.628Z"},{"number":"1.1.2","date":"2015-04-28T16:43:11.775Z"},{"number":"2.0.0","date":"2015-06-02T16:14:42.474Z"},{"number":"2.1.0","date":"2015-06-10T17:33:30.372Z"},{"number":"2.1.1","date":"2015-06-15T18:57:29.956Z"}],"readme":"\n# S4 Client Library\nA client library developed on node.js that can be used to send data files to the S4 service for processing.\n\n# Contents\n- [Overview](#overview)\n- [Installation](#installation)\n- [Usage](#usage)\n\n# Overview\nThe goal of this library is to abstract from an end user application the mechanics of creating and dispatching HTTP requests, and handling coressponding responses. In addition to using this library in scenarios where the input data is a real time audio stream, it can also be used in test scenarios, where the data is read from a static file and sent to the server for testing/evaluation.\n\nThis documentation outlines how the library can be downloaded and used as a dependency to an application.\n\nThis library has been developed using JavaScript for the NodeJs engine, specifically version 10+ of NodeJS.\n\n# Installation\nThis library can be installed by using the npm tool as follows:\n```shell\nnpm install git+https://gitlab.lyricsemiconductor.com/platformdevops/s4-client-lib.git\n```\n> ** NOTE: ** \n> - Use the `--save` option to save the dependency in your project's `package.json` file\n\n## Usage\n\nInclude the library in your code by using `require`:\n```javascript\nvar s4ClientLib = require('s4-client-lib');\n```\n\n## Making Requests\nBefore data can be sent to a server, a new client object must be created as follows:\n```javascript\nvar client = new s4ClientLib.S4Client('http://asr.lyricsemiconductor.com/service_path', {\n    apiKey: 'QRTV4Fh2W+ID',\n    micConfig: '<mic config data>'\n});\n```\nThe first argument to the constructor is the url of the S4 service endpoint. The second argument is configuration information for the client request. Details are as follows:\n- `apiKey`: A shared secret key that the client can use to authenticate against the server\n- `micConfig`: A string that specifies the microphone configuration\n\nOnce a client object has been created, a data can be streamed to the service by invoking the `sendStream(readable)` method, with a readable stream as the first argument.\n\n```javascript\nvar stream = createStreamFromSource();\nvar promise = client.sendStream(stream);\n```\n## Handling Responses\nAll requests made using the client object will return a promise that conforms to the (Promises/A+)[https://promisesaplus.com/] specification. Each promise supports a `then` method that can be invoked with a success handler and a failure handler, as shown below:\n\n```javascript\npromise.then(function(response) {\n    //Handle success here. The response parameter is the return object from the server.\n}, function(err) {\n    // Handle failure here. The err object contains details of the error that caused the failure.\n});\n```\n","created":"2015-03-19T14:32:20.191Z","modified":"2015-06-15T18:57:29.956Z","lastPublisher":{"name":"vamship","email":"vamshi.ponnapalli@gmail.com"},"owners":[{"name":"vamship","email":"vamshi.ponnapalli@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"s4-client-lib","_nodeVersion":"0.12.0","_npmUser":{"name":"vamship","email":"vamshi.ponnapalli@gmail.com"},"_npmVersion":"2.5.1","_rev":"1-60e046487d22d67469205b7f037c8814","_shasum":"b271379239163323a2443abb9e56f6aff9468d0a","author":{"name":"vamshi.ponnapalli@gmail.com"},"directories":{"test":"test"},"dist-tags":{"latest":"2.1.1"},"dist":{"shasum":"b271379239163323a2443abb9e56f6aff9468d0a","tarball":"http://registry.npmjs.org/s4-client-lib/-/s4-client-lib-2.1.1.tgz"},"maintainers":[{"name":"vamship","email":"vamshi.ponnapalli@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-06-15T18:57:29.956Z","created":"2015-03-19T14:32:20.191Z","1.0.0":"2015-03-19T14:32:20.191Z","1.0.1":"2015-04-13T17:16:02.442Z","1.1.0":"2015-04-14T19:39:20.788Z","1.1.1":"2015-04-15T20:09:18.628Z","1.1.2":"2015-04-28T16:43:11.775Z","2.0.0":"2015-06-02T16:14:42.474Z","2.1.0":"2015-06-10T17:33:30.372Z","2.1.1":"2015-06-15T18:57:29.956Z"}}}