{"version":"0.2.2","name":"jf-http-request","description":"Simple wrapper for NodeJS HTTP request. Use promises, events or callbacks.","keywords":["ajax","callback","callbacks","event","events","http","promise","promises","request"],"license":"MIT","homepage":"http://www.joaquinfernandez.net","repository":"https://github.com/joaquinfq/jf-http-request","scripts":{"test":"node test"},"dependencies":{"jf-http-headers":"^0.1.0"},"gitHead":"8e51e024e8cfb639da4cd2f3b6ee8ca15b97edf4","versions":[{"number":"0.1.2","date":"2017-04-02T16:09:17.497Z"},{"number":"0.2.0","date":"2017-05-09T15:07:37.707Z"},{"number":"0.2.1","date":"2017-06-21T06:45:37.110Z"},{"number":"0.2.2","date":"2017-06-21T08:34:59.061Z"}],"readme":"# jf-http-request [![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\n[![npm install jf-http-request](https://nodei.co/npm/jf-http-request.png?mini=true)](https://npmjs.org/package/jf-http-request/)\n\nSimple wrapper for NodeJS HTTP request.\n\n## Options\n\nOption       |  Type  | Description\n-------------|--------|--------------\nauth         | string | Basic authentication i.e. `user:password` to compute an `Authorization` header.\nfamily       | number | IP address family to use when resolving host and hostname. Valid values are 4 or 6. When unspecified, both IP v4 and v6 will be used.\nheaders      | object | An object containing request headers.\nhost         | string | A domain name or IP address of the server to issue the request to (default: `localhost`).\nhostname     | string | Alias for `host`. To support `url.parse()`, `hostname` is preferred over `host`.\nlocalAddress | string | Local interface to bind for network connections.\nmethod       | string | A string specifying the HTTP request method (default: `GET`).\npath         | string | Request path (default: `/`). Should include query string if any: `/index.html?page=12`. An exception is thrown when the request path contains illegal characters. Currently, only spaces are rejected but that may change in the future.\nport         | number | Port of remote server (default: `80`).\nprotocol     | string | Protocol to use (default: `http:`).\nsocketPath   | string | Unix Domain Socket (use one of host:port or socketPath).\ntimeout      | number | A number specifying the socket timeout in milliseconds. This will set the timeout before the socket is connected.\nbody         | *      | Content to send to server (default: `undefined`).\nrequestType  | string | Type of result to return ('promise', 'events') or use a function for use the callback system (defaults: `events`).\nurl          | string | A string specifying the URL for request and passed to `url.parse`.\n\n\n## Response types\n\nThere are three types of responses:\n\n* ok    : `code >= 200 && code < 300 || code = 304`\n* fail  : `code < 200 || (code >= 300 && code !== 304)`\n* error : Any request error (timeout, no host, etc).\n\n## Request types:\n\nWith parameter `requestType` you can change value returned (default: `events`).\n\n### Using callbacks\n\n```js\nconst jfHttpRequest = require('jf-http-request');\n//...\njfHttpRequest(\n    {\n        url         : 'http://jsonplaceholder.typicode.com/posts/1',\n        // Callback: NodeJS way\n        requestType : (response, status) => {\n            switch (status)\n            {\n                case 'request-error':\n                    console.log('ERROR: %s', error.message);\n                    break;\n                case 'request-fail':\n                    console.log('FAIL : %d', response.statusCode);\n                    break;\n                case 'request-ok':\n                    console.log('OK   : %s', response.body);\n                    break;\n            }\n        }\n    }\n)\n```\n\n### Using events\n\n```js\nconst jfHttpRequest = require('jf-http-request');\n\n// events: EDP way\njfHttpRequest('http://jsonplaceholder.typicode.com/posts/1')\n    .on('request-error', error    => console.log('ERROR: %s', error.message))\n    .on('request-fail',  response => console.log('FAIL : %d', response.statusCode))\n    .on('request-ok',    response => console.log('OK   : %s', response.body));\n```\n\n### Using promises\n\n```js\nconst jfHttpRequest = require('jf-http-request');\n\njfHttpRequest(\n        {\n            // promise: wrong way :-(\n            requestType : 'promise',\n            url         : 'http://jsonplaceholder.typicode.com/posts/1'\n        }\n    )\n    .then (response => console.log(response))       // ok & fail\n    .catch(error    => console.log(error.message)); // error\n```\n","created":"2017-04-02T16:09:17.497Z","modified":"2017-06-21T08:34:59.061Z","lastPublisher":{"name":"joaquinfq","email":"public@joaquinfernandez.net"},"owners":[{"name":"joaquinfq","email":"public@joaquinfernandez.net"}],"other":{"_attachments":{},"_from":".","_id":"jf-http-request","_nodeVersion":"8.1.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jf-http-request-0.2.2.tgz_1498034098133_0.5982604003511369"},"_npmUser":{"name":"joaquinfq","email":"public@joaquinfernandez.net"},"_npmVersion":"4.6.1","_rev":"4-b08ead61424a42d79a36019313485cdc","_shasum":"4bdbb727d7812ea797d67dc4c8254e327ad29cf7","author":{"name":"Joaquín Fernández"},"bugs":{"url":"https://github.com/joaquinfq/jf-http-request/issues"},"directories":{},"dist-tags":{"latest":"0.2.2"},"dist":{"shasum":"4bdbb727d7812ea797d67dc4c8254e327ad29cf7","tarball":"https://registry.npmjs.org/jf-http-request/-/jf-http-request-0.2.2.tgz"},"maintainers":[{"name":"joaquinfq","email":"public@joaquinfernandez.net"}],"readmeFilename":"README.md","time":{"modified":"2017-06-21T08:34:59.061Z","created":"2017-04-02T16:09:17.497Z","0.1.2":"2017-04-02T16:09:17.497Z","0.2.0":"2017-05-09T15:07:37.707Z","0.2.1":"2017-06-21T06:45:37.110Z","0.2.2":"2017-06-21T08:34:59.061Z"}}}