{"name":"express-egraphql","version":"0.1.3","description":"Production ready GraphQL HTTP middleware.","license":"BSD-3-Clause","repository":"https://github.com/graphql/express-graphql","keywords":["express","connect","http","graphql","middleware","api"],"main":"dist/index.js","files":["dist","README.md","LICENSE","PATENTS"],"options":{"mocha":"--require resources/mocha-bootload src/**/__tests__/**/*.js"},"nyc":{"sourceMap":false,"instrument":false},"babel":{"presets":["es2015"],"plugins":["transform-class-properties","transform-flow-strip-types"]},"scripts":{"prepublish":". ./resources/prepublish.sh","test":"npm run lint && npm run check && npm run testonly","testonly":"mocha $npm_package_options_mocha","lint":"eslint src","check":"flow check","build":"rm -rf dist/* && babel src --ignore __tests__ --out-dir dist","watch":"node resources/watch.js","cover":"babel-node node_modules/.bin/nyc --reporter=html --reporter=text node_modules/.bin/mocha $npm_package_options_mocha","cover:lcov":"babel-node node_modules/.bin/nyc --reporter=lcov --reporter=text node_modules/.bin/mocha $npm_package_options_mocha","preversion":"npm test"},"dependencies":{"accepts":"^1.3.0","content-type":"^1.0.0","flow-bin":"^0.36.0","http-errors":"^1.3.0","raw-body":"^2.1.0"},"devDependencies":{"babel-cli":"6.18.0","babel-eslint":"7.1.1","babel-plugin-istanbul":"^3.1.2","babel-plugin-transform-async-to-generator":"6.16.0","babel-plugin-transform-class-properties":"6.19.0","babel-plugin-transform-flow-strip-types":"6.21.0","babel-plugin-transform-runtime":"6.15.0","babel-preset-es2015":"6.18.0","babel-register":"6.18.0","babel-runtime":"6.20.0","body-parser":"1.15.2","chai":"3.5.0","connect":"3.5.0","content-type":"1.0.2","coveralls":"2.11.15","egraphql-fetch":"^0.2.0","eslint":"3.12.2","eslint-plugin-babel":"4.0.0","eslint-plugin-flowtype":"2.29.1","express":"4.14.0","express3":"*","flow-bin":"0.36.0","graphql":"0.8.1","mocha":"3.2.0","multer":"1.2.1","nyc":"^10.0.0","raw-body":"2.1.7","sane":"1.4.1","sinon":"1.17.6","supertest":"2.0.1"},"peerDependencies":{"graphql":"^0.5.0-b || ^0.6.0 || ^0.7.0 || ^0.8.0-b"},"gitHead":"2190f09ccbcf02abff5e0e8d61be1c346c23a25d","homepage":"https://github.com/graphql/express-graphql#readme","versions":[{"number":"0.0.1","date":"2017-01-16T16:37:24.215Z"},{"number":"0.1.0","date":"2017-01-18T16:56:53.386Z"},{"number":"0.1.1","date":"2017-01-18T19:38:43.254Z"},{"number":"0.1.2","date":"2017-01-24T01:31:13.468Z"},{"number":"0.1.3","date":"2017-01-24T01:32:35.525Z"}],"readme":"eGraphQL HTTP Server Middleware\n==============================\n\n[![Build Status](https://travis-ci.org/martinheidegger/express-egraphql.svg?branch=master)](https://travis-ci.org/martinheidegger/express-egraphql)\n[![Coverage Status](https://coveralls.io/repos/martinheidegger/express-egraphql/badge.svg?branch=master&service=github)](https://coveralls.io/github/martinheidegger/express-egraphql?branch=master)\n\n**This is a Fork of [express-graphql](https://github.com/graphql/express-graphql)\nwith support for symmetric encryption.**\n\nCreate a GraphQL HTTP server with any HTTP web framework that supports connect styled middleware, including [Connect](https://github.com/senchalabs/connect) itself and [Express](http://expressjs.com).\n\n## Installation\n\n```sh\nnpm install --save express-graphql\n```\n\nThen mount `express-graphql` as a route handler:\n\n```js\nconst express = require('express');\nconst graphqlHTTP = require('express-graphql');\n\nconst app = express();\n\napp.use('/graphql', graphqlHTTP({\n  schema: MyGraphQLSchema,\n  graphiql: true\n}));\n\napp.listen(4000);\n```\n\n## Options\n\nThe `graphqlHTTP` function accepts the following options:\n\n  * **`schema`**: A `GraphQLSchema` instance from [`GraphQL.js`][].\n    A `schema` *must* be provided.\n\n  * **`graphiql`**: If `true`, presents [GraphiQL][] when the GraphQL endpoint is\n    loaded in a browser. We recommend that you set\n    `graphiql` to `true` when your app is in development, because it's\n    quite useful. You may or may not want it in production.\n\n  * **`rootValue`**: A value to pass as the `rootValue` to the `graphql()`\n    function from [`GraphQL.js`][].\n\n  * **`context`**: A value to pass as the `context` to the `graphql()`\n    function from [`GraphQL.js`][]. If `context` is not provided, the\n    `request` object is passed as the context.\n\n  * **`pretty`**: If `true`, any JSON response will be pretty-printed.\n\n  * **`formatError`**: An optional function which will be used to format any\n    errors produced by fulfilling a GraphQL operation. If no function is\n    provided, GraphQL's default spec-compliant [`formatError`][] function will be used.\n\n  * **`extensions`**: An optional function for adding additional metadata to the\n    GraphQL response as a key-value object. The result will be added to\n    `\"extensions\"` field in the resulting JSON. This is often a useful place to\n    add development time metadata such as the runtime of a query or the amount\n    of resources consumed. This may be an async function. The function is\n    give one object as an argument: `{ document, variables, operationName, result }`.\n\n  * **`validationRules`**: Optional additional validation rules queries must\n    satisfy in addition to those defined by the GraphQL spec.\n\n  * **`getPrivateKey`**: Optional handler that enables encrypted requests to the\n    endpoint. `getPrivateKey(keyID) { return Promise.resolve('privateKey')}`.\n    The method will be called once a request to encrypt arrives. The resulting\n    privateKey will be used to en-/decrypt the requests.\n\n  * **`acceptedCipherAlgorithms`**: By default, with encryption enabled, only\n    the `aes-256-ecb` algorithm encryption is allowed.\n\n\n## HTTP Usage\n\nOnce installed at a path, `express-graphql` will accept requests with\nthe parameters:\n\n  * **`query`**: A string GraphQL document to be executed.\n\n  * **`variables`**: The runtime values to use for any GraphQL query variables\n    as a JSON object.\n\n  * **`operationName`**: If the provided `query` contains multiple named\n    operations, this specifies which operation should be executed. If not\n    provided, a 400 error will be returned if the `query` contains multiple\n    named operations.\n\n  * **`raw`**: If the `graphiql` option is enabled and the `raw` parameter is\n    provided raw JSON will always be returned instead of GraphiQL even when\n    loaded from a browser.\n\nGraphQL will first look for each parameter in the URL's query-string:\n\n```\n/graphql?query=query+getUser($id:ID){user(id:$id){name}}&variables={\"id\":\"4\"}\n```\n\nIf not found in the query-string, it will look in the POST request body.\n\nIf a previous middleware has already parsed the POST body, the `request.body`\nvalue will be used. Use [`multer`][] or a similar middleware to add support\nfor `multipart/form-data` content, which may be useful for GraphQL mutations\ninvolving uploading files. See an [example using multer](https://github.com/graphql/express-graphql/blob/master/src/__tests__/http-test.js#L650).\n\nIf the POST body has not yet been parsed, express-graphql will interpret it\ndepending on the provided *Content-Type* header.\n\n  * **`application/json`**: the POST body will be parsed as a JSON\n    object of parameters.\n\n  * **`application/x-www-form-urlencoded`**: this POST body will be\n    parsed as a url-encoded string of key-value pairs.\n\n  * **`application/graphql`**: The POST body will be parsed as GraphQL\n    query string, which provides the `query` parameter.\n\n\n## Combining with Other Express Middleware\n\nBy default, the express request is passed as the GraphQL `context`.\nSince most express middleware operates by adding extra data to the\nrequest object, this means you can use most express middleware just by inserting it before `graphqlHTTP` is mounted. This covers scenarios such as authenticating the user, handling file uploads, or mounting GraphQL on a dynamic endpoint.\n\nThis example uses [`express-session`][] to provide GraphQL with the currently logged-in session.\n\n```js\nconst session = require('express-session');\nconst graphqlHTTP = require('express-graphql');\n\nconst app = express();\n\napp.use(session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}));\n\napp.use('/graphql', graphqlHTTP({\n  schema: MySessionAwareGraphQLSchema,\n  graphiql: true\n}));\n```\n\nThen in your type definitions, you can access the request via the third \"context\" argument in your `resolve` function:\n\n```js\nnew GraphQLObjectType({\n  name: 'MyType',\n  fields: {\n    myField: {\n      type: GraphQLString,\n      resolve(parentValue, args, request) {\n        // use `request.session` here\n      }\n    }\n  }\n});\n```\n\n\n## Providing Extensions\n\nThe GraphQL response allows for adding additional information in a response to\na GraphQL query via a field in the response called `\"extensions\"`. This is added\nby providing an `extensions` function when using `graphqlHTTP`. The function\nmust return a JSON-serializable Object.\n\nWhen called, this is provided an argument which you can use to get information\nabout the GraphQL request:\n\n`{ document, variables, operationName, result }`\n\nThis example illustrates adding the amount of time consumed by running the\nprovided query, which could perhaps be used by your development tools.\n\n```js\nconst graphqlHTTP = require('express-graphql');\n\nconst app = express();\n\napp.use(session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}));\n\napp.use('/graphql', graphqlHTTP(request => {\n  const startTime = Date.now();\n  return {\n    schema: MyGraphQLSchema,\n    graphiql: true,\n    extensions({ document, variables, operationName, result }) {\n      return { runTime: Date.now() - startTime };\n    }\n  };\n}));\n```\n\nWhen querying this endpoint, it would include this information in the result,\nfor example:\n\n```js\n{\n  \"data\": { ... }\n  \"extensions\": {\n    \"runTime\": 135\n  }\n}\n```\n\n\n## Other Exports\n\n**`getGraphQLParams(request: Request): Promise<GraphQLParams>`**\n\nGiven an HTTP Request, this returns a Promise for the parameters relevant to\nrunning a GraphQL request. This function is used internally to handle the\nincoming request, you may use it directly for building other similar services.\n\n```js\nconst graphqlHTTP = require('express-graphql');\n\ngraphqlHTTP.getGraphQLParams(request).then(params => {\n  // do something...\n})\n```\n\n\n## Debugging Tips\n\nDuring development, it's useful to get more information from errors, such as\nstack traces. Providing a function to `formatError` enables this:\n\n```js\nformatError: error => ({\n  message: error.message,\n  locations: error.locations,\n  stack: error.stack\n})\n```\n\n\n[`GraphQL.js`]: https://github.com/graphql/graphql-js\n[`formatError`]: https://github.com/graphql/graphql-js/blob/master/src/error/formatError.js\n[GraphiQL]: https://github.com/graphql/graphiql\n[`multer`]: https://github.com/expressjs/multer\n[`express-session`]: https://github.com/expressjs/session\n","created":"2017-01-16T16:37:24.215Z","modified":"2017-01-24T01:32:35.525Z","lastPublisher":{"name":"leichtgewicht","email":"martin.heidegger@gmail.com"},"owners":[{"name":"leichtgewicht","email":"martin.heidegger@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"express-egraphql","_nodeVersion":"7.2.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/express-egraphql-0.1.3.tgz_1485221555302_0.05660285637713969"},"_npmUser":{"name":"leichtgewicht","email":"martin.heidegger@gmail.com"},"_npmVersion":"4.1.1","_rev":"5-26c07cd1c0c4807b73179dd6bff1f9f0","_shasum":"07a6250323f26c92615a26aa2edb58533b044b85","bugs":{"url":"https://github.com/graphql/express-graphql/issues"},"contributors":[{"name":"Lee Byron","email":"lee@leebyron.com","url":"http://leebyron.com/"},{"name":"Daniel Schafer","email":"dschafer@fb.com"},{"name":"Caleb Meredith","email":"calebmeredith8@gmail.com"},{"name":"Martin Heidegger","email":"martin.heidegger@gmail.com"}],"directories":{"lib":"./dist"},"dist-tags":{"latest":"0.1.3"},"dist":{"shasum":"07a6250323f26c92615a26aa2edb58533b044b85","tarball":"https://registry.npmjs.org/express-egraphql/-/express-egraphql-0.1.3.tgz"},"maintainers":[{"name":"leichtgewicht","email":"martin.heidegger@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-01-24T01:32:35.525Z","created":"2017-01-16T16:37:24.215Z","0.0.1":"2017-01-16T16:37:24.215Z","0.1.0":"2017-01-18T16:56:53.386Z","0.1.1":"2017-01-18T19:38:43.254Z","0.1.2":"2017-01-24T01:31:13.468Z","0.1.3":"2017-01-24T01:32:35.525Z"}}}