{"name":"devicer","version":"0.1.3","description":"Easily detect client device informations over http requests","main":"index.js","repository":"https://github.com/sixpounder/devicer","scripts":{"test":"node ./tests/test.js"},"keywords":["device","user","agent","mobile","desktop","request","http"],"devDependencies":{"simple-mocha":"0.0.9"},"license":"GPL-2.0","gitHead":"ef1d8d8d6c3be9d98b0cbe9a07f32c43f0bad664","homepage":"https://github.com/sixpounder/devicer#readme","versions":[{"number":"0.1.1","date":"2016-05-27T10:22:23.013Z"},{"number":"0.1.2","date":"2016-05-27T11:24:19.097Z"},{"number":"0.1.3","date":"2016-05-27T12:07:13.166Z"}],"readme":"![Buid status](https://travis-ci.org/sixpounder/devicer.svg?branch=master)\n# DeviceR\n\nEasily get informations about client devices over http requests.\n\n**We are adding more detections over time, there is a lot of stuff to keep track of.**\n\n### Install and quick usage\n\n```bash\nnpm install --save devicer\n```\n\nTest it if you want to\n```bash\nnpm test\n```\n\nIn any NodeJS module\n\n```javascript\nvar devicer = require('devicer');\nvar details = devicer.parseUserAgent(userAgentString);\n\n// or, if you have an http request object\ndetails = devicer.detect(req);\n```\n\nConnect/Express middleware (see below for configuration options)\n```javascript\nvar devicer = require('devicer');\nvar app = require('express');\n\n// req.device will be available after this middleware\napp.use(devicer.middleware());\n```\n\n# DeviceR API\n\n#### devicer.detect(request)\nSearches the request object for a ```User-Agent``` header and parses it\n\n**returns**: ```object```\n\n\n#### devicer.parseUserAgent(userAgentString)\nParses the ```userAgentString```\n\n**returns**: ```object```\n\n### devicer.middleware(options)\nA middleware to use in connect/express applications.\nYou may pass an ```options``` object to configure the middleware behaviour.\nThe following example also illustrates the default behaviour.\n```javascript\nvar devicer = require('devicer');\nvar app = require('express');\n\napp.use(devicer.middleware({\n  // The property name on req that will hold the parse result\n  propertyName: 'device',\n\n  // If an error occurs\n  onError: function(err, req, res, next) {\n    next(err);\n  },\n\n  // If parse is succesfull\n  onSuccess: function(req, res, next) {\n    next(); // no-op\n  }\n}));\n```\n\n# Output API\n\n## Class Device\nA Device instance is what a call to ```detect```, ```parseUserAgent``` methods returns and the DeviceR middleware sets on the request ```device```Â property.\n\n### Properties\n\n- ```Device.match``` The user agent string matched as valid\n- ```Device.compliance``` The user agent compliance level. Usually \"Mozilla/5.0\" in modern browsers\n- ```Device.platform``` The platform on which the client is running\n- ```Device.build``` The platform build, if specified\n- ```Device.additional``` Any further specification on the user agent\n- ```Device.engine``` A ```BrowserEngine``` instance\n\n### Methods\n- ```Device#isIPad``` Returns ```true``` if the device is likely to be an iPad\n- ```Device#isIPhone``` Returns ```true``` if the device is likely to be an iPhone\n- ```Device#isAndroid``` Returns ```true``` if the device is likely to be an android device\n- ```Device#isDesktop``` Returns ```true``` if the device is likely to be a desktop computer\n- ```Device#isMobile``` Returns ```true``` if the device is likely to be a mobile device\n- ```Device#isWin``` Returns ```true``` if the device is running Windows\n- ```Device#isOSX``` Returns ```true``` if the device is running MAC OSX\n- ```Device#isLinux``` Returns ```true``` if the device is running Linux\n\n## Class BrowserEngine\n\n### Properties\n- ```BrowserEngine.name``` The browser name string\n\n### Methods\n- ```BrowserEngine#isChrome``` Returns ```true``` if it is a Chrome browser\n- ```BrowserEngine#isWebKit``` Returns ```true``` if it is a WebKit based browser\n- ```BrowserEngine#isFirefox``` Returns ```true``` if it is a Firefox browser\n- ```BrowserEngine#isOpera``` Returns ```true``` if it is an Opera browser\n- ```BrowserEngine#isSafari``` Returns ```true``` if it is a Safari browser\n- ```BrowserEngine#isIE``` Returns ```true``` if it is an Internet Explorer or Microsoft Edge browser\n","starsCount":1,"created":"2016-05-27T10:22:23.013Z","modified":"2016-05-27T12:07:13.166Z","lastPublisher":{"name":"sixpounder","email":"blackeye84@gmail.com"},"owners":[{"name":"sixpounder","email":"blackeye84@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"devicer","_nodeVersion":"6.2.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/devicer-0.1.3.tgz_1464350831270_0.47433327231556177"},"_npmUser":{"name":"sixpounder","email":"blackeye84@gmail.com"},"_npmVersion":"3.8.9","_rev":"1-f31ea6b4a6b466272ed05a90f70868e2","_shasum":"cefc978198added03f00a4decff2d60509c10eec","author":{"name":"sixpounder"},"bugs":{"url":"https://github.com/sixpounder/devicer/issues"},"directories":{},"dist-tags":{"latest":"0.1.3"},"dist":{"shasum":"cefc978198added03f00a4decff2d60509c10eec","tarball":"http://registry.npmjs.org/devicer/-/devicer-0.1.3.tgz"},"maintainers":[{"name":"sixpounder","email":"blackeye84@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-05-27T12:07:13.166Z","created":"2016-05-27T10:22:23.013Z","0.1.1":"2016-05-27T10:22:23.013Z","0.1.2":"2016-05-27T11:24:19.097Z","0.1.3":"2016-05-27T12:07:13.166Z"},"users":{"tapmodo":true}}}