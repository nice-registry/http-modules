{"name":"node-uptime","description":"Remote monitoring for HTTP applications","version":"3.0.0","dependencies":{"mongoose":"3.2.2","mongoose-lifecycle":"1.0.0","express":"3.0.0","express-partials":"0.0.6","connect-flash":"0.1.0","ejs":"0.8.0","config":"0.4.15","async":"0.1.22","socket.io":"0.9.10","semver":"1.1.0","moment":"1.7.2"},"devDependencies":{"should":"1.1.0"},"keywords":["uptime","monitoring","api","check"],"repository":"https://github.com/fzaninotto/uptime","license":"MIT","engines":{"node":"0.8.x"},"readme":"uptime\n======\n\nA simple remote monitoring utility using Node.js and MongoDB.\n\n<img src=\"https://github.com/downloads/fzaninotto/uptime/uptime.png\" title=\"Uptime screenshot\" />\n\nYou can watch a [demo screencast on Vimeo](https://vimeo.com/39302164).\n\nFeatures\n--------\n\n* Monitor thousands of websites (powered by [Node.js asynchronous programming](http://dotheweb.posterous.com/nodejs-for-php-programmers-1-event-driven-pro))\n* Tweak frequency of monitoring on a per-check basis, up to the millisecond\n* Receive instant web alerts on every page when a check goes down (thanks [socket.io](http://socket.io/))\n* Record availability statistics for further reporting (powered by [MongoDB](http://www.mongodb.org/))\n* Detailed uptime reports with animated charts (powered by [Highcharts](http://www.highcharts.com/))\n* Monitor availability, responsiveness, average response time , and total uptime/downtime\n* Get details about failed checks (HTTP error code, etc.)\n* Group checks by tags and get reports by tag\n* Familiar web interface (powered by [Twitter Bootstrap 2.0](http://twitter.github.com/bootstrap/index.html))\n* complete API for integration with third-party monitoring services\n* Easy installation and zero administration\n\nInstalling Uptime\n-----------------\n\nOne line:\n\n    > npm install node-uptime\n\nAlternatively, clone the repository from GitHub and install dependencies using npm:\n\n    > git clone git://github.com/fzaninotto/uptime.git\n    > npm install\n\nLastly, start the application with:\n\n    > node app.js\n\nNote that Uptime requires at least Node.js 0.6.\n\nAdding Checks\n-------------\n\nBy default, the web UI runs on port 8082, so just browse to \n\n    http://localhost:8082/\n\nAnd you're ready to begin. Create your first check by entering an URL, wait for the first ping, and you'll soon see data flowing through your charts!\n\nConfiguring\n-----------\n\nUptime uses [node-config](https://github.com/lorenwest/node-config) to allow YAML configuration and environment support. Here is the default configuration, taken from `config/default.yaml`:\n\n    mongodb:\n      server:   localhost\n      database: uptime\n      user:     root \n      password:\n    \n    monitor:\n      name:                   origin\n      apiUrl:                 'http://localhost:8082/api'\n      pollingInterval:        10000      # ten seconds\n      timeout:                5000       # five seconds\n    \n    analyzer:\n      updateInterval:         60000      # one minute\n      qosAggregationInterval: 600000     # ten minutes\n      pingHistory:            8035200000 # three months\n    \n    autoStartMonitor: true\n    \n    server:\n      port:     8082\n\nTo modify this configuration, create a `development.yaml` or a `production.yaml` file in the same directory, and override just the settings you need. For instance, to run Uptime on port 80 in production, create a `production.yaml` file as follows:\n\n    server:\n      port:     80\n\nNode that Uptime works great behind a proxy - it uses the http_proxy environment variable transparently.\n\nRunning The Monitor In a Separate Process\n-----------------------------------------\n\nHeavily browsing the web dashboard may slow down the server - including the polling monitor. In other terms, using the application can influence the uptime measurements. To avoid this effect, it is recommended to run the polling monitor in a separate process.\n\nTo that extent, set the `autoStartMonitor` setting to `false` in the `production.yaml`, and launch the monitor by hand:\n\n    > node monitor.js &\n    > node app.js\n\nYou can also run the monitor in a different server. This second server must be able to reach the API of the dashboard server: set the `monitor.apiUrl` setting accordingly in the `production.yaml` file of the monitor server.\n\nYou can even run several monitor servers in several datacenters to get average response time. In that case, make sure you set a different `monitor.name` setting for all monitor servers to be able to tell which server make a particular ping.\n\nUsing Plugins\n-------------\n\nUptime provides plugins that you can enable to add more functionality.\n\nTo enable plugins, create a `plugins/index.js` module. This module must offer a public `init()` method, where you will require and initialize plugin modules. For instance, to enable only the `console` plugin:\n\n    // in plugins/index.js\n    exports.init = function() {\n      require('./console').init();\n    }\n\nCurrently supported plugins:\n\n * `console`: log pings and events in the console in real time\n\nYou can add your own plugins under the `plugins` directory. A plugin is simply a module with a public `init()` method. For instance, if you had to recreate a simple version of the `console` plugin, you could write it as follows:\n\n    // in plugins/console/index.js\n    var CheckEvent = require('../../models/checkEvent');\n    exports.init = function() {\n      CheckEvent.on('postInsert', function(checkEvent) {\n        checkEvent.findCheck(function(err, check) {\n          console.log(new Date() + check.name + checkEvent.isGoDown ? ' goes down' : ' goes back up');\n        });\n      });\n    }\n\nAll Uptime entities emit lifecycle events that you can listen to on the Model class. These events are `preInsert`, `postInsert`, `preUpdate`, `postUpdate`, `preSave` (called for both inserts and updates), `postSave` (called for both inserts and updates), `preRemove`, and `postRemove`.\n\nLicense\n-------\n\nThe Uptime code is free to use and distribute, under the [MIT license](https://raw.github.com/fzaninotto/uptime/master/LICENSE).\n\nUptime uses third-party libraries:\n\n* [NodeJS](http://nodejs.org/), licensed under the [MIT License](https://github.com/joyent/node/blob/master/LICENSE#L5-22),\n* [Socket.io](http://socket.io/), licensed under the [MIT License](https://github.com/LearnBoost/socket.io/blob/master/Readme.md),\n* [MongooseJS](http://mongoosejs.com/), licensed under the [MIT License](https://github.com/LearnBoost/mongoose/blob/master/README.md),\n* [jQuery](http://jquery.com/), licensed under the [MIT License](http://jquery.org/license),\n* [TwitterBootstrap](http://twitter.github.com/bootstrap/), licensed under the [Apache License v2.0](http://www.apache.org/licenses/LICENSE-2.0),\n* [Highcharts.js](http://shop.highsoft.com/highcharts.html), free for non-commercial use under the [Creative Commons Attribution-NonCommercial 3.0 License](http://creativecommons.org/licenses/by-nc/3.0/).\n\nIf you like the software, please help improving it by contributing PRs on the [GitHub project](https://github.com/fzaninotto/uptime)!\n\nTODO\n----\n\n* Allow email alerts in case of non-availability (not sure if this should be part of the lib)\n* Account for scheduled maintenance (and provide two QoS calculations: with and without scheduled maintenance)\n* Allow for JavaScript execution in the monitored resources by using a headless browser (probably zombie.js)\n* Unit tests","versions":[{"number":"1.2.0","date":"2012-05-21T19:24:34.283Z"},{"number":"1.3.0","date":"2012-08-05T11:33:16.637Z"},{"number":"1.4.0","date":"2012-09-19T09:49:57.105Z"},{"number":"2.0.0","date":"2012-12-07T08:22:24.482Z"},{"number":"3.0.0","date":"2012-12-07T10:10:44.961Z"},{"number":"2.0.0-rc0","date":"2012-09-19T10:11:35.147Z"}],"starsCount":2,"created":"2012-05-21T19:24:32.517Z","modified":"2012-12-07T10:10:44.961Z","lastPublisher":{"name":"fzaninotto","email":"fzaninotto@gmail.com"},"owners":[{"name":"fzaninotto","email":"fzaninotto@gmail.com"}],"other":{"_attachments":{},"_id":"node-uptime","_npmUser":{"name":"fzaninotto","email":"fzaninotto@gmail.com"},"_npmVersion":"1.1.65","_rev":"1-1122119501881a37d607f9ced9e2c214","author":{"name":"Francois Zaninotto"},"directories":{},"dist-tags":{"latest":"3.0.0"},"dist":{"shasum":"c3abe2a2632ed88aa274e78a065960337049ece9","tarball":"http://registry.npmjs.org/node-uptime/-/node-uptime-3.0.0.tgz"},"maintainers":[{"name":"fzaninotto","email":"fzaninotto@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2012-12-07T10:10:44.961Z","created":"2012-05-21T19:24:32.517Z","1.2.0":"2012-05-21T19:24:34.283Z","1.3.0":"2012-08-05T11:33:16.637Z","1.4.0":"2012-09-19T09:49:57.105Z","2.0.0":"2012-12-07T08:22:24.482Z","3.0.0":"2012-12-07T10:10:44.961Z","2.0.0-rc0":"2012-09-19T10:11:35.147Z"},"users":{"hsujian":true,"snowdream":true}}}