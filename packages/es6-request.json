{"name":"es6-request","version":"2.1.7","description":"HTTP Request library written in ES6 for Node.js","main":"index.js","repository":"https://github.com/alexrsagen/node-es6-request","keywords":["request","es6","http","https"],"license":"MIT","homepage":"https://github.com/alexrsagen/node-es6-request#readme","gitHead":"bdc9e1625375eeb7ff3442624bd21ee74fde6d7b","scripts":{},"versions":[{"number":"1.0.0","date":"2016-03-24T21:25:04.709Z"},{"number":"1.1.0","date":"2016-03-24T22:33:54.692Z"},{"number":"1.2.0","date":"2016-03-24T22:38:58.955Z"},{"number":"1.2.1","date":"2016-03-24T22:51:15.703Z"},{"number":"1.2.2","date":"2016-03-24T22:53:43.283Z"},{"number":"2.0.0","date":"2016-06-29T21:29:05.671Z"},{"number":"2.0.1","date":"2016-06-29T21:36:08.454Z"},{"number":"2.0.2","date":"2016-08-09T10:06:05.432Z"},{"number":"2.1.0","date":"2016-08-17T07:10:56.538Z"},{"number":"2.1.1","date":"2016-08-17T12:12:44.278Z"},{"number":"2.1.2","date":"2016-08-22T06:41:54.326Z"},{"number":"2.1.3","date":"2016-10-09T11:26:22.052Z"},{"number":"2.1.4","date":"2017-05-20T19:40:34.592Z"},{"number":"2.1.5","date":"2017-05-23T16:29:53.832Z"},{"number":"2.1.6","date":"2017-05-23T16:58:18.381Z"},{"number":"2.1.7","date":"2017-05-23T16:59:33.018Z"}],"readme":"# node-es6-request\nHTTP Request library written in ES6 for Node.js\n\n## Installation\n```\nnpm install es6-request --save\n```\n\n## API\nFunctions that return a new `Request` instance:\n* `es6-request`.get(`url`)\n* `es6-request`.put(`url`)\n* `es6-request`.post(`url`)\n* `es6-request`.head(`url`)\n* `es6-request`.patch(`url`)\n* `es6-request`.delete(`url`)\n* `es6-request`.options(`url`)\n\n##### `Request`\n\n##### `Request`.query(`key`/`object`, `val`)\n\nCan be called with only one object as argument, or two arguments (key and value). This function adds to the query string of the `url` or creates a new query string that will be added to the `url` before performing the reuqest.\n\n##### `Request`.header(`key`, `val`)\n\nAdds a header to the request by the name of `key` and the content of `val`.\n\n##### `Request`.headers(`object`)\n\nAdds headers from a key/value object.\n\n##### `Request`.authBasic(`username`, `password`)\n\nAdds an `Authorization: Basic <token>` header to your request.\n\n##### `Request`.authBearer(`bearer`)\n\nAdds an `Authorization: Bearer <bearer>` header to your request.\n\n##### `Request`.options(`object`)\n\nAdds options from a key/value object to the Node.js HTTP [options](https://nodejs.org/api/http.html#http_new_agent_options).\n\n##### `Request`.option(`key`, `val`)\n\nAdds an option to the Node.js HTTP [options](https://nodejs.org/api/http.html#http_new_agent_options).\n\n##### `Request`.json(`object`)\n\nTranslates the `object` into a key/value string and sends the request as `x-www-form-urlencoded`.\n\n##### `Request`.write(`chunk`[, `encoding`][, `callback`])\n\nYou must run `Request`.start() before running this function. Directly writes to the request using [this](https://nodejs.org/api/http.html#http_request_write_chunk_encoding_callback) function from Node.js.\n\n##### `Request`.send(`chunk`[, `encoding`][, `callback`])\n\nStarts a request, then directly writes to the it using [this](https://nodejs.org/api/http.html#http_request_write_chunk_encoding_callback) function from Node.js, then performs the request.\n\n##### `Request`.start()\n\nStarts a request. After this function has been called, helper functions like `Request`.headers(), `Request`.header() and `Request`.query() will no longer work until the request has ended.\n\n##### `Request`.pipe(`destination`)\n\nStarts the request if it is not already started. Pipes the response chunks to the destination stream using [this](https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options) function from Node.js, then performs the request.\n\n##### `Request`.perform()\n\nThis function ends a request. It is called by other functions like [Request.send()](#requestsend) and [Request.pipe()](#requestpipe). This function returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n## Usage\n\n#### Simple GET Request\n```javascript\nconst request = require(\"es6-request\");\n\n// you can exchange \"get\" with \"head\", \"delete\" or \"options\" here\n// they all have the exact same API\nrequest.get(\"https://raw.githubusercontent.com/alexrsagen/node-es6-request/master/README.md\")\n.then(([body, res]) => {\n    console.log(body);\n    // should output this README file!\n});\n```\n\n#### POST Request\nThe following example will send a x-www-form-urlencoded request to the server containing keys and values from the json object.\n```javascript\nconst request = require(\"es6-request\");\n\n// you can exchange \"post\" with either \"put\" or \"patch\" here\n// they all have the exact same API\nrequest.post(\"http://api.somewebsite.com/endpoint\")\n.json({somekey: \"somevalue\"})\n.then(([body, res]) => {\n    // ...\n});\n```\nThis example will send a raw string to the server.\n```javascript\nconst request = require(\"es6-request\");\n\n// you can exchange \"post\" with either \"put\" or \"patch\" here\n// they all have the exact same API\nrequest.post(\"http://api.somewebsite.com/endpoint\")\n.send(\"i am a string, i will be sent to the server with a POST request.\")\n.then(([body, res]) => {\n    // ...\n});\n```\n\n#### Query string\nThis works the same way with any other request type.\n```javascript\nconst request = require(\"es6-request\");\n\n// sends a GET request to http://api.somewebsite.com/endpoint?this=that&one=two&three=four\nrequest.get(\"http://api.somewebsite.com/endpoint\")\n.query(\"this\", \"that\")\n.query({\n    \"one\": \"two\",\n    \"three\": \"four\"\n})\n.then(([body, res]) => {\n    // ...\n});\n```\n\n##### Headers\n```javascript\nconst request = require(\"es6-request\");\n\n// Sends a GET request with these headers:\n// {\n//     \"Accept\": \"application/json\",\n//     \"Header-Name\": \"header value\",\n//     \"Another-Header\": \"another value\"\n// }\nrequest.get(\"http://api.somewebsite.com/endpoint\");\n.header(\"Accept\", \"application/json\")\n.headers({\n    \"Header-Name\": \"header value\",\n    \"Another-Header\": \"another value\"\n})\n.then(([body, res]) => {\n    console.log(res.headers);\n    // ...\n});\n```\n\n##### Pipes\nThe following example POSTs all data you enter to STDIN to the local server we create, which then logs the data back to the console.\n```javascript\nconst request = require(\"es6-request\");\nconst server = require(\"http\").createServer((req, res) => {\n  req.setEncoding('utf8');\n  req.on('data', (chunk) => {\n    console.log(chunk);\n  });\n  req.on('end', () => {\n    res.end();\n  });\n}).listen(1337);\n\nprocess.stdin.pipe(request.post(\"http://localhost:1337\"));\n```\n\nThis example pipes the GitHub logo to a file named `logo.png`.\n```javascript\nconst request = require(\"es6-request\");\nconst fs = require(\"fs\");\n\nrequest.get(\"https://github.com/images/modules/logos_page/GitHub-Mark.png\").pipe(fs.createWriteStream(\"logo.png\")).perform();\n```\n","created":"2016-03-24T21:25:04.709Z","modified":"2017-05-23T16:59:33.018Z","lastPublisher":{"name":"alexrsagen","email":"alexander@sagen.me"},"owners":[{"name":"alexrsagen","email":"alexrsagen@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"es6-request","_nodeVersion":"7.4.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/es6-request-2.1.7.tgz_1495558771796_0.42072482919320464"},"_npmUser":{"name":"alexrsagen","email":"alexander@sagen.me"},"_npmVersion":"4.1.1","_rev":"5-9c0b386f8c9d558f652acc5ecff9a0b7","_shasum":"25c3a0926ed0e21fba10f691d1225d28829335ed","author":{"name":"alexrsagen"},"bugs":{"url":"https://github.com/alexrsagen/node-es6-request/issues"},"directories":{},"dist-tags":{"latest":"2.1.7"},"dist":{"shasum":"25c3a0926ed0e21fba10f691d1225d28829335ed","tarball":"https://registry.npmjs.org/es6-request/-/es6-request-2.1.7.tgz"},"maintainers":[{"name":"alexrsagen","email":"alexrsagen@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-23T16:59:33.018Z","created":"2016-03-24T21:25:04.709Z","1.0.0":"2016-03-24T21:25:04.709Z","1.1.0":"2016-03-24T22:33:54.692Z","1.2.0":"2016-03-24T22:38:58.955Z","1.2.1":"2016-03-24T22:51:15.703Z","1.2.2":"2016-03-24T22:53:43.283Z","2.0.0":"2016-06-29T21:29:05.671Z","2.0.1":"2016-06-29T21:36:08.454Z","2.0.2":"2016-08-09T10:06:05.432Z","2.1.0":"2016-08-17T07:10:56.538Z","2.1.1":"2016-08-17T12:12:44.278Z","2.1.2":"2016-08-22T06:41:54.326Z","2.1.3":"2016-10-09T11:26:22.052Z","2.1.4":"2017-05-20T19:40:34.592Z","2.1.5":"2017-05-23T16:29:53.832Z","2.1.6":"2017-05-23T16:58:18.381Z","2.1.7":"2017-05-23T16:59:33.018Z"}}}