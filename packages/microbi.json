{"name":"microbi","version":"0.4.3","description":"api server and http server","main":"microbi.js","scripts":{"test":"jasmine","start":"node microbi.js"},"repository":"https://github.com/nzonbi/microbi","bin":{"microbi":"bin/microbi"},"keywords":["http server","web server","api","api server","static server","web framework","api framework","single page apps"],"license":"MIT","homepage":"https://github.com/nzonbi/microbi#readme","dependencies":{"mimemap":"0.0.14"},"gitHead":"7f1c29caadfa8f6fad3f98a222f90eb00546c242","versions":[{"number":"0.2.0","date":"2015-08-13T21:14:00.357Z"},{"number":"0.3.0","date":"2015-08-13T23:40:09.194Z"},{"number":"0.3.1","date":"2015-08-14T02:13:49.409Z"},{"number":"0.3.2","date":"2015-08-17T19:12:54.587Z"},{"number":"0.4.0","date":"2015-09-18T19:02:36.257Z"},{"number":"0.4.1","date":"2015-09-18T19:20:54.946Z"},{"number":"0.4.2","date":"2015-10-13T20:33:14.992Z"},{"number":"0.4.3","date":"2017-03-12T20:30:01.940Z"}],"readme":"\n![microbi](http://lignixz.github.io/microbi/img/microbi.png)\n\n# microbi.js\nv0.4.2\n\nMinimalist api server and static http server for Node.js.\n\n## Overview\n\nMicrobi is a minimalist api server and static http server.\nIt allows to easily serve apis and static files from a single tool.\nWhich may be good for having a simple setup for locally installed apps,\nor for development, prototyping, and/or production of low traffic web apps.\n\nlicense (MIT)\n\n## Features\n\n* Can function as an api server and/or static server.\n* Api ops use a global mime type, individual ops can override it.\n* Api ops support streams.\n* Allows to set up multiple servers.\n* All server features are supported by test cases.\n\n## Documentation\n\nMicrobi has two ways to use:\n- Installed globally, the microbi command can be used to launch\n  static servers on any folder.\n- Use `require('microbi')` and can be used as an api server and/or\n  static server.\n\n### Global command: static server\n\nInstall globally\n\n     npm install -g microbi\n\nGo to the folder that you want to serve:\n\n     cd some/folder/toServe\n\nLaunch the static server with the global command:\n\n     microbi\n\nReady! the static server is active.\n\nOptionally pass a port number. Serve the current folder on port 50000:\n\n     microbi 50000\n\nOptionally pass a port and IP to the microbi command. The defaults\nare port: 8080, ip: 127.0.0.1\n\n     microbi 50000 0.0.0.0\n\n### Api server\n\nTo use as an api server, create a script file where you define an\napi, and launch the server. Require microbi on it. An example Api\nscript is provided:\n\n     apiServer_example.js\n\nTo define an api, install microbi if it is not installed. Either globally\nor locally:\n\n     npm install microbi\n\nCreate a script file, similar to the mentioned example file above.\nThe first step is to require microbi in the script. Then create an\n\"api object\", where the routes and methods to call will be defined.\nOnce the api object is ready, pass it to microbi.\nFor example:\n\n```javascript\n     var microbi = require( 'microbi' )\n\n     // create the api object\n     var api = {}\n     microbi.api = api\n\n     // define routes as properties\n     api.stuff = {}\n     api.stuff.items = {}\n\n     // api operations are functions\n     // the request method goes at the end of the route\n     api.stuff.items.GET = function( reqUrl ) {\n       return 'Hello World!'\n     }\n\n     // start the server\n     microbi.start()\n```\n\nRun with node. Then pointing the browser to the path:\n\n     someHost/stuff/items\n\nFor Get request methods, it will serve whatever the function returns:\n\n     Hello World!\n\n\n## Reference\n\nMicrobi object: get an instance of the microbi object with require:\n```javascript\n     var microbi = require( 'microbi' )\n```\n### Microbi properties and methods\n\n#####     microbi.start( [port], [ip] )\nStarts a microbi server with the optional port and ip address.\nIf these are not provided, defaults to port 8080, ip 127.0.0.1\n\n#####     microbi.startHttps( [port], [ip] )\nStarts an https microbi server with the optional port and ip address.\nIf these are not provided, defaults to port 8080, ip 127.0.0.1\n\n#####     microbi.setMime( extension )\nSets the default api content type from the provided extension.\nFor example, pass \"txt\" to set content type to \"text/plain\"\n\n#####     microbi.api\nDefaults to null. set it to the api object to use. A generic object\ncontaining routes and api functions. Url paths will be mapped to\nfunctions in this object. For example, the path:\n\n     exampleHost/user/items\n\nfor a GET request, will be mapped to the next function on the api object:\n\n     microbi.api.user.items.GET\n\nIf there is a function there, it will be called, and whatever it returns\nwill be the server response.\n\n#####     microbi.staticServer\nBoolean, defaults to true. If this is set to false, microbi the static server\nwill be disabled, and microbi will only try to function as an api server.\nRequests that don't match an api op, will be answered with 404.\n\n### Defining api ops\n\nApi ops are defined by setting up functions on a tree of properties,\non the api object: `microbi.api` Property names on the tree, will match\npaths on the url. The api ops response is what the function returns.\nUseful request data is available in the info parameter.\nFor example:\n```javascript\n     microbi.api.stuff.items.POST = function( info ) {\n       return 'Hello World!'\n     }\n```\nThis api op will respond with \"Hello World!\" to incoming requests\nwith the POST method, to the path: host.com/stuff/items\nWhen there is no defined api that matches the path, microbi will\ntry to look for a static file to serve under that path.\n\nApi ops get the info object as parameter. Its content is described in the\nnext section.\n\n#### Properties of the info parameter\n\n##### info.method (String)\n  Name of the request method in uppercase.<br>\n  Examples:<br>\n  `\"GET\"`, `\"POST\"`, `\"PUT\"`, etc.\n\n\n##### info.pathname (String)\n  The request pathname. The part of the url that goes after the host,\n  and before the query string.<br>\n  Example:<br>\n    request url: `example.com/stuff/items?a=1&b=2`<br>\n    info.pathname: `\"/stuff/items\"`\n\n\n##### info.queryParams (Object)\n  An object containing name - value pairs, for each of the query parameters.<br>\n  Example:<br>\n    request url: `example.com/stuff/items?a=1&b=2`<br>\n    info.queryParams: `{ a: 1, b: 2 }`\n\n\n##### info.body (String)\n  The complete content of the request body as a string.\n\n\n##### info.pathParams (Array)\n  pathParams are a way of matching any path parts in a path, and returning\n  them as a parameters.<br>\n  Example:<br>\n  when an api method is defined with one of its paths as \"$x\", it will\n  match any path piece, and return it as an element of the pathParams\n  array.<br>\n    request url: `example.com/stuff/items/11523`<br>\n    api op defined at: `microbi.api.stuff.items.$x.GET`<br>\n    The code `$x` matches `11523`, and it is returned in the array<br>\n    info.pathParams: `[ \"11523\" ]`\n\n\n### Overriding the default mime type for api ops\n\nTo specify a different mime type than the default one for an api op,\nset a property with a name composed of:\n  the request method, a colon, and the word mime.\nSet it to the extension name of the mime type:\nFor example:\n```javascript\n     api.stuff.items.[\"POST:mime\"] = \"html\"\n```\nThe above definition, will make the api op\n```javascript\n     api.stuff.items.POST\n```\nTo get a mime type of \"text/html\".\n\n#### Alternate options: Using streams on api functions\n\nThere is the option to get Node stream objects as parameters on api functions.\nFor this, set a \"stream\" flag on the api op, as follows:\n```javascript\n     api.stuff.items.[\"POST:stream\"] = true\n```\nThe above will flag the `api.stuff.items.POST` api op as streaming.\nApi functions that have this flag set, will not get the info\nobject as parameter. Instead these api functions will get the\nrequest and response node stream objects as follows:\n```javascript\n     api.stuff.items.POST = function( request, response ) {\n       return 'Hello World!'\n     }\n```\n`request` and `response` are the same parameters that nodejs http server\ncallback functions gets on each request. Parameter `request` is an instance\nof Node http.IncomingMessage, and `response` is an instance of Node\nhttp.ServerResponse. See: https://nodejs.org/api/http.html#http_event_request\n","created":"2015-08-13T21:14:00.357Z","modified":"2017-03-12T20:30:01.940Z","lastPublisher":{"name":"nzonbi","email":"nzonbi@gmail.com"},"owners":[{"name":"nzonbi","email":"nzonbi@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"microbi","_nodeVersion":"4.4.2","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/microbi-0.4.3.tgz_1489350601221_0.9777488424442708"},"_npmUser":{"name":"nzonbi","email":"nzonbi@gmail.com"},"_npmVersion":"2.15.0","_rev":"2-7643762e10400e72b001372bc6d76ae2","_shasum":"b604636ef076ebf978fed2dcc7cb16099208c1f9","author":{"name":"nzonbi"},"bugs":{"url":"https://github.com/nzonbi/microbi/issues"},"directories":{},"dist-tags":{"latest":"0.4.3"},"dist":{"shasum":"b604636ef076ebf978fed2dcc7cb16099208c1f9","tarball":"https://registry.npmjs.org/microbi/-/microbi-0.4.3.tgz"},"maintainers":[{"name":"nzonbi","email":"nzonbi@gmail.com"}],"readmeFilename":"readme.md","time":{"modified":"2017-03-12T20:30:01.940Z","created":"2015-08-13T21:14:00.357Z","0.2.0":"2015-08-13T21:14:00.357Z","0.3.0":"2015-08-13T23:40:09.194Z","0.3.1":"2015-08-14T02:13:49.409Z","0.3.2":"2015-08-17T19:12:54.587Z","0.4.0":"2015-09-18T19:02:36.257Z","0.4.1":"2015-09-18T19:20:54.946Z","0.4.2":"2015-10-13T20:33:14.992Z","0.4.3":"2017-03-12T20:30:01.940Z"}}}