{"name":"multiwaydb","description":"A lightweight database that can load in JSON, set and get according to table and key/value pairs, and be accessed over http","version":"1.0.0","license":"MIT","url":"http://github.com/deitch/multiwaydb","engines":["node >= 0.3"],"main":"./lib/multiwaydb.js","dependencies":{"searchjs":">=0.3.5","lodash":">=3.10.1","superagent":">=0.15.4"},"devDependencies":{"mocha":">=1.12.0","supertest":">=0.7.1","async":"0.2.x","should":">=1.1.0"},"scripts":{"test":"mocha"},"repository":"https://github.com/deitch/multiwaydb","gitHead":"84597ff862103a95547a192895c901d54bd78d4d","homepage":"https://github.com/deitch/multiwaydb#readme","versions":[{"number":"0.1.0","date":"2011-12-07T11:06:29.978Z"},{"number":"0.1.1","date":"2011-12-07T11:06:29.978Z"},{"number":"0.1.2","date":"2011-12-07T11:06:29.978Z"},{"number":"0.1.3","date":"2011-12-07T11:06:29.978Z"},{"number":"0.1.4","date":"2011-12-07T11:06:29.978Z"},{"number":"0.1.5","date":"2011-12-12T10:00:34.720Z"},{"number":"0.1.6","date":"2012-03-06T11:07:16.278Z"},{"number":"0.1.7","date":"2012-03-20T17:17:48.114Z"},{"number":"0.1.8","date":"2012-03-20T17:19:23.330Z"},{"number":"0.1.9","date":"2012-05-01T17:38:19.292Z"},{"number":"0.1.10","date":"2012-06-06T07:06:20.550Z"},{"number":"0.2.0","date":"2013-02-27T14:34:16.926Z"},{"number":"0.3.0","date":"2013-08-11T12:02:14.683Z"},{"number":"0.3.1","date":"2013-08-15T14:00:56.875Z"},{"number":"0.3.2","date":"2013-08-15T14:11:53.160Z"},{"number":"0.4.0","date":"2013-08-25T11:54:36.479Z"},{"number":"0.4.1","date":"2013-08-25T12:56:05.232Z"},{"number":"0.4.2","date":"2013-08-25T17:50:08.101Z"},{"number":"0.4.3","date":"2013-08-27T09:25:48.616Z"},{"number":"0.4.4","date":"2013-08-27T11:10:39.649Z"},{"number":"0.4.5","date":"2013-10-03T10:02:00.446Z"},{"number":"0.4.6","date":"2013-12-31T10:33:22.998Z"},{"number":"0.4.7","date":"2014-11-11T01:26:44.416Z"},{"number":"0.4.8","date":"2014-11-12T02:56:48.269Z"},{"number":"0.5.0","date":"2014-12-07T11:52:13.277Z"},{"number":"0.6.0","date":"2015-02-10T08:42:00.040Z"},{"number":"0.6.1","date":"2015-03-24T18:33:27.697Z"},{"number":"1.0.0","date":"2015-12-09T14:29:49.800Z"}],"readme":"# multiwayDB\n\n## Overview\nin-memory database loaded from a JSON file and allows all CRUD operations simultaneously via REST *or* direct API, *plus* using the direct API over REST.\n\nThis is not intended for production use; at least the author never does. I use it primarily to test data points. I will\nload the data in on one end, have my app being tested use the REST API, and then validate the data from directly within the\ndatabase.\n\n\n## Changes \nPlease see at the end of this README for any breaking changes.\n\n## Installation\n\n    npm install multiwaydb\n\t\t\n\n\n## Instantiation\nRequire it, initialize it and listen for connections:\n\n    var db = require('multiwaydb');\n\n    db.init(pathToJsonFile); // initialize the database with data from path\n\t\t\n\t\tdb.listen(port); // listen for HTTP REST requests on a particular port\n\t\t\n\t\t\n\n*Note*: The database keeps track of the last path you used to load using `init(path)`. If you call `init()` a second (or third or fourth) time *without* a path, it will simply refresh from the same path as last time.\n\n## Administration\n\n### Clear\nClear all of the records in a single table asynchronously, then execute callback:\n\n    db.clearTable(table,callback)\n\nClear the entire database and then execute a callback\n\n\t\tdb.clear(callback)\n\n\n## Direct API\nThe direct API provides access to the data *from within the app that initialized multiwaydb*. It loads the data file from the filesystem, and then handles all modification in memory, similar to sqlite.\n\n\n    db.set(table,key,value,callback); // set the \"table\" with key = value, and then execute \"callback\" asynchronously. \n    db.update(table,key,value,callback); // alias for db.set()\n\n    db.patch(table,key,value,callback); // update the data \"table\" entry of value \"key\" with value by merging value and the data already in place, then execute \"callback\" asynchronously.\n\t\tdb.create(table,value,callback); // create a new entry in \"table\" with value, then execute callback asynchronously. Callback will have single parameter, new entry id for success, or false for failure.\n    \n\t\tdb.get(table,key,callback); // get the value of key in \"table\", then execute callback asynchronously, passing the value as the argument to callback.\n\t\tdb.get(table,callback); // get all of the records in \"table, then execute callback asynchronously.\n\n    db.find(table,search,callback) // search table for records that match \"search\", and passe the results to callback as the argument. \"search\" should match the jsql syntax for searchjs package.\n\n    db.del(table,key,callback) // delete the record of key in table, and then execute callback.\n    db.destroy(table,key,callback) // alias for db.del()\n\n\nFor all API calls except `create`, an entry of \"key\" **must** already exist.\n\nFor create calls, you have 2 choices for creation of the key:\n\n1. If `value.id` already exists, it will use it. In the case of a conflict, it will return an error \"conflict\" or a `409` for the REST API\n2. If `value.id` does not exist, it will create one.\n\nThe algorithm for creating a new unique ID is as follows:\n\n    sha1.hash(new Date().toString().split(\"\").sort(function(){return Math.round(Math.random())-0.5;}).join(\"\")).substr(0,12)\n\t\t\nWhich essentially takes today's date as a full ISO string, randomly jumbles the characters, SHA1 hashes them, and then takes the first 12 characters. **This is more than good enough for most non-production use**. Actually, it is good enough for a ot of lightweight production use too.\n\nFor production use, you should use your own algorithms, or perhaps GUIDs. Either way, if you do not want to use this algorithm just override it by setting your own `id` property on the object.\n\n### Options for searching\n\nThe `db.find()` API to search for items has additional options beyond the usual searchjs options. \n\n##### Field matches\nThe normal usage of `search` is to match field names and values, using standard [searchjs](https://github.com/deitch/searchjs) \n\nThus, `db.find('users',{age:35,gender:'male'}, callback)` will find all records from the \"users\" table whose age field equals 35 and whose gender field equals \"male\".\n\nYou can use extended and complex [searchjs](https://github.com/deitch/searchjs) searches; see the documentation there for complex matches.\n\n##### Return options\nIn addition to the usual fields, any field in the search that begins with \"$s.\" will be treated as a search option. It will **not** be passed to search js. Instead, it will be used to determine *how* to return results to you, and which ones. The following fields currently are supported. Examples follow.\n\n* `$s.sort`: sort by a particular field, whether ascending or descending. Key is the term `$s.sort`, value is the name of the field. If it is given as is, sort ascending; if preceded by `-`, then descending.\n* `$s.count`: return only a the first `count` number of records. Key is the term `$s.count`, value is an integer, how many records to return. It can be an actual number, or a string that can be converted to a number via `parseInt(count,10)`\n\nHere are some examples. \n\n* Get all of the users: `db.find('users',{},callback)`\n* Get all of the users who are male: `db.find('users',{gender:'male'},callback)`\n* Get the first 20 male users: `db.find('users',{gender:'male',`$s.count`:20},callback)` - note that these are the first 20 in the database, not necessarily sorted in any given order.\n* Get all of the users sorted by ascending age: `db.find('users',{'$s.sort':'age'},callback)`\n* Get all of the users sorted by descending age: `db.find('users',{'$s.sort':'-age'},callback)`\n* Get the 20 youngest users: `db.find('users',{'$s.sort':'age','$s.count':20},callback)` - note that we sort ascending by age, so the first `$s.count` (i.e. `20` as given) users are the youngest\n* Get the 10 oldest male users: `db.find('users',{'gender':'male','$s.sort':'-age','$s.count':20},callback)`\n\n\n\n\n### What is returned?\n\nThe callback always has the signature `callback(err,res)`. If there are no errors, then `err` will be undefined or null.\n\nThe value of `res` depends on each case. In all cases, if there is an error, then `res` is the string value of the error.\n\n* `set`/`update`/`patch`: no meaning.\n* `create`: key of the newly created object.\n* `get`: If a single item was requested as `get(\"user\",\"123\")` then a single JavaScript object as `{id:\"123\",name:\"john\"}`. If multiple items were requested as `get(\"user\",[\"123\",\"456\"])` then an array of such JavaScript objects as `[{id:\"123\",name:\"john\"},{id:\"456\",name:\"sally\"}]`\n* `find`: Always an array of as many objects as were found, or null if none found.\n* `del`/`destroy`: no meaning.\n\n\n## REST API\nThe REST API provides the same CRUD functionality as the direct API, but over HTTP.\n\n#### GET\n    GET /table/:key\n\nGet the record \"key\" from \"table\". Can have multiple keys, separated by commas\n\n    GET /table?search={a:1,b:2}\n\nSearch in table for records that match the value of \"search\" parameter. Parameter must be valid JSON that matches the parameters passed for `search` in `db.find()` in the direct API, and should be urlencoded. You can include the extended search options. See above at \"Options for Searching\".\n\n\n#### PUT\n    PUT /table/:key\n\t\t\nReplace the record \"key\" from \"table\" with the body of the http request. Body *must* be valid JSON.\n\n#### PATCH\n    \n\t\tPATCH /table/:key\n\t\t\nUpdate the record \"key\" from \"table\" with the body of the http request. Body *must* be valid JSON.\n\n\n#### POST\n    POST /table\n\t\t\nCreate a new record in \"table\" with the body of the http request. Body *must* be valid JSON.\n\n#### DELETE\n    DELETE /table/:key\n\t\t\nDelete record \"key\" from \"table\".\n\n\n## Remote API\nThe Remote API functions *exactly* like the Direct API, but accesses a remote multiwaydb over REST. You could just as easily use [superagent](http://visionmedia.github.io/superagent/) or [request](https://github.com/mikeal/request) to make REST API calls, but this is easier.\n\n\n````JavaScript\nvar db = require('multiwaydb').client(url); // You can have multiple of these, if you want\n\ndb.set(table,key,value,callback); // set the \"table\" with key = value, and then execute \"callback\" asynchronously. \ndb.update(table,key,value,callback); // alias for db.set()\n\ndb.patch(table,key,value,callback); // update the data \"table\" entry of value \"key\" with value by merging value and the data already in place, then execute \"callback\" asynchronously.\ndb.create(table,value,callback); // create a new entry in \"table\" with value, then execute callback asynchronously. Callback will have single parameter, new entry id for success, or false for failure.\n\ndb.get(table,key,callback); // get the value of key in \"table\", then execute callback asynchronously, passing the value as the argument to callback.\ndb.get(table,callback); // get all of the records in \"table, then execute callback asynchronously.\n\ndb.find(table,search,callback) // search table for records that match \"search\", and passe the results to callback as the argument. \"search\" should match the jsql syntax for searchjs package.\n\ndb.del(table,key,callback) // delete the record of key in table, and then execute callback.\ndb.destroy(table,key,callback) // alias for db.del()\n````\n\n\n## Breaking Changes\nAs of v0.4.0, all Direct API and Remote API methods invoke the callback with the following signature:\n\n\n    callback(err,res);\n\t\t\nThis is consistent with most nodejs apps. Previously, some methods would simply invoke `callback(res)`.\n\n\n## License\nmultiwaydb is released under the MIT License http://www.opensource.org/licenses/mit-license.php\n","created":"2011-10-02T14:17:07.146Z","modified":"2015-12-09T14:29:49.800Z","lastPublisher":{"name":"deitch","email":"avi@deitcher.net"},"owners":[{"name":"deitch","email":"avi@deitcher.net"}],"other":{"_attachments":{},"_from":".","_id":"multiwaydb","_nodeVersion":"4.2.1","_npmUser":{"name":"deitch","email":"avi@deitcher.net"},"_npmVersion":"3.5.1","_rev":"1-bdacadabc1d971ada8a0bf960b2c5916","_shasum":"5ca3a3e5e8ff0d4a2c47b695ff193c984cbf8586","author":{"name":"Avi Deitcher","email":"avi@deitcher.net"},"bugs":{"url":"https://github.com/deitch/multiwaydb/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"5ca3a3e5e8ff0d4a2c47b695ff193c984cbf8586","tarball":"http://registry.npmjs.org/multiwaydb/-/multiwaydb-1.0.0.tgz"},"maintainers":[{"name":"deitch","email":"avi@deitcher.net"}],"readmeFilename":"README.md","time":{"modified":"2015-12-09T14:29:49.800Z","created":"2011-10-02T14:17:07.146Z","0.1.0":"2011-12-07T11:06:29.978Z","0.1.1":"2011-12-07T11:06:29.978Z","0.1.2":"2011-12-07T11:06:29.978Z","0.1.3":"2011-12-07T11:06:29.978Z","0.1.4":"2011-12-07T11:06:29.978Z","0.1.5":"2011-12-12T10:00:34.720Z","0.1.6":"2012-03-06T11:07:16.278Z","0.1.7":"2012-03-20T17:17:48.114Z","0.1.8":"2012-03-20T17:19:23.330Z","0.1.9":"2012-05-01T17:38:19.292Z","0.1.10":"2012-06-06T07:06:20.550Z","0.2.0":"2013-02-27T14:34:16.926Z","0.3.0":"2013-08-11T12:02:14.683Z","0.3.1":"2013-08-15T14:00:56.875Z","0.3.2":"2013-08-15T14:11:53.160Z","0.4.0":"2013-08-25T11:54:36.479Z","0.4.1":"2013-08-25T12:56:05.232Z","0.4.2":"2013-08-25T17:50:08.101Z","0.4.3":"2013-08-27T09:25:48.616Z","0.4.4":"2013-08-27T11:10:39.649Z","0.4.5":"2013-10-03T10:02:00.446Z","0.4.6":"2013-12-31T10:33:22.998Z","0.4.7":"2014-11-11T01:26:44.416Z","0.4.8":"2014-11-12T02:56:48.269Z","0.5.0":"2014-12-07T11:52:13.277Z","0.6.0":"2015-02-10T08:42:00.040Z","0.6.1":"2015-03-24T18:33:27.697Z","1.0.0":"2015-12-09T14:29:49.800Z"}}}