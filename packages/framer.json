{"name":"framer","version":"0.5.4","description":"A simple dynamic photo resizing http server intended to be behind an http cache that stores files in S3","main":"index.js","scripts":{"test":"jshint *.js --config .jshintrc && mocha test/test*"},"repository":"https://github.com/mbrevoort/framer","keywords":["image","resizing","server","cache","aws","amazon","s3"],"license":"MIT","dependencies":{"gm":"~1.9.1","knox":"~0.8.2","mkdirp":"~0.3.5","node-uuid":"~1.4.0","multiparty":"~2.1.7","batch":"~0.3.2","mime":"~1.2.9"},"devDependencies":{"mocha":"~1.10.0","request":"~2.21.0","buffertools":"~1.1.1","jshint":"~2.1.3"},"engines":{"node":">=0.10.0"},"homepage":"https://github.com/mbrevoort/framer","versions":[{"number":"0.1.0","date":"2013-06-01T16:36:05.834Z"},{"number":"0.2.0","date":"2013-06-03T04:43:09.987Z"},{"number":"0.2.1","date":"2013-06-17T23:38:36.352Z"},{"number":"0.3.0","date":"2013-06-25T17:35:08.845Z"},{"number":"0.3.1","date":"2013-09-20T03:16:26.466Z"},{"number":"0.3.2","date":"2013-11-04T16:59:00.130Z"},{"number":"0.3.3","date":"2013-11-14T20:23:37.637Z"},{"number":"0.4.0","date":"2014-03-06T18:32:39.216Z"},{"number":"0.5.0","date":"2014-03-11T20:28:31.111Z"},{"number":"0.5.1","date":"2014-03-14T17:15:31.114Z"},{"number":"0.5.2","date":"2014-03-20T20:32:17.958Z"},{"number":"0.5.4","date":"2014-03-29T15:18:12.670Z"}],"readme":"# Framer \n\n[![build status](https://secure.travis-ci.org/mbrevoort/framer.png)](http://travis-ci.org/mbrevoort/framer)\n\nFramer is a simple, dynamic file proxy and photo resizing http server intended to be behind an http cache or act as a CDN root server. Framer accepts uploads and stores it's files in Amazon S3.\n\nFramer does not cache anything itself but rather sets a max-age Cache-Control header so the browser or caching proxy should act appropriately. It keeps the files it manages in S3 side-stepping the burden of managing, syncronizing and backing files across instances essentially making the instances stateless.\n\nLastly, Framer will generate a path to each file prefixed with a `uuid` that should be difficult to guess. All files are essentially public and accessible if you know the URI.\n\n## Usage\n\nLet's cut to the chase. Look in the example directory at `server.js` for a working example.\n\n### Installing\n\n```\nnpm install framer\n```\n\n# Uploading\n\nFramer accepts multipart uploads. It takes the raw file an streams it into your S3 bucket.\n\n```\n// configure, passing an optional authHandler function to handle upload \n// authorization. If ommitting, any client can upload unauthenticated\nvar handleUpload = framer.handleUpload({\n  authHandler: function (authValue, cb) {\n    // check if authorization value is valid, if so execute callback \n    // without an error and pass along a user identifier to prefix\n    // the path of the location to store the image so that you know\n    // who owns which images and perhaps authorization can be applied\n    // this way in the future\n    var userId = userIdFromToken(authValue);\n    if (userId)\n      cb(null, userId);\n    else\n      cb(new Error('unauthorized));\n  },\n  prefix: '/img'  // uri prefix you expect to serve images from\n});\n\nif (req.url === '/upload' && req.headers['content-type']) {\n  handleUpload(req, res);\n}\n```\n\nThe result of a successful upload will be an `application/json` response with a `uri` property containing the relative URI of the new resource. *Note*: this doesn't include the protocol, host or port and will be prefixed with `opts.prefix` if specified. For example:\n\n```\n{\n    \"statusCode\": 200,\n    \"uri\": \"/prefix/raw/c84d9b70-caca-11e2-8e30-ab79663612ac/image.jpg\"\n}\n```\n\nIf the upload fails, the respons will look something like this:\n\n```\n{\n    \"statusCode\": 403,\n    \"error\": \"some ugly error message\"\n}\n```\n\n# Serving\n\nOnce uploaded, the images can be served from the result URL. Look at the example\nto more easily understand how to use it. Basically you would wire it up like this:\n\n```\n// configure\nvar serveImage = framer.serveImage({ prefix: '/img', cacheMaxAge: 3600 });\nvar serveFile = framer.serveFile({ prefix: '/file', cacheMaxAge: 3600 });\n\n// handle a request: \nif (req.url.indexOf('/img/') === 0) serveImage(req, res);\nelse if (req.url.indexOf('/file/') === 0) serveImage(req, res);\n```\n\n## Serving Images\n\nFramer provides a simple API for resizing images on the fly to suite your needs.\nThis is helpful when you need multiple sizes or an image, and it's not practical\nto generate all of the sizes up front.\n\nThe most useful is scale, center and crop. For example, let's say you have need\nto render 100x100 thumbnails of images but that have different dimensions and size.\nTo scale a 1200x800 image to be a 100x100 square without changing the aspect ratio,\nwe do this in two stages. First we scale the height to 100 pixels resulting in an\nintermediate image that's now 150x100, then we orient to the center of the image and\nand crop the width to the center 100 pixel. The resulting image is 100x100, cropping out\n25 pixels from each side or 200 pixels from each size of the original image.\n\nThere are two other options for scaling images that will either result in a result that\nwill fit into the wxh box or fill the wxh box, resulting in images 100x67 and 150x100,\nrespectively if considering the example above.\n\nImages are served by passing the request and response to the function produced by \n`serveImage`.\n\n### Original Image\n\nUse `raw`:\n\n`/raw/<path_to_image>`\n\n### Scale, Center, Crop\n\nUse a `x` to delimit width and height:\n\n`/100x100/<path_to_image>`\n\n### Scale within Box\n\nUse a `-` to delimit width and height:\n\n`/100-100/<path_to_image>`\n\n### Scale within Box\n\nUse a `+` to delimit width and height:\n\n`/100+100/<path_to_image>`\n\n\n## Serving files\n\nOther non image files may be uploaded and served as well. Files are served by passing \nthe request and response to the function produced by `serveFile` without the sizing \nprefix of serveImage:\n\n`<path_to_file>`\n\n\n# Contributing\n\nPull request and issues are totally welcome. If you have quick questions hit me up on Twitter @mbrevoort.\n","starsCount":0,"created":"2013-06-01T16:36:04.791Z","modified":"2014-03-29T15:18:12.670Z","lastPublisher":{"name":"roycehaynes","email":"royce.haynes@gmail.com"},"owners":[{"name":"mbrevoort","email":"mike@brevoort.com"},{"name":"roycehaynes","email":"royce.haynes@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"framer","_npmUser":{"name":"roycehaynes","email":"royce.haynes@gmail.com"},"_npmVersion":"1.3.21","_rev":"1-e040bfdd5079f462744cfed42e5012b9","author":{"name":"Mike Brevoort"},"bugs":{"url":"https://github.com/mbrevoort/framer/issues"},"directories":{},"dist-tags":{"latest":"0.5.4"},"dist":{"shasum":"f6ce5ffb66c825d97094cb44bd2452316d61e917","tarball":"http://registry.npmjs.org/framer/-/framer-0.5.4.tgz"},"maintainers":[{"name":"mbrevoort","email":"mike@brevoort.com"},{"name":"roycehaynes","email":"royce.haynes@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-03-29T15:18:12.670Z","created":"2013-06-01T16:36:04.791Z","0.1.0":"2013-06-01T16:36:05.834Z","0.2.0":"2013-06-03T04:43:09.987Z","0.2.1":"2013-06-17T23:38:36.352Z","0.3.0":"2013-06-25T17:35:08.845Z","0.3.1":"2013-09-20T03:16:26.466Z","0.3.2":"2013-11-04T16:59:00.130Z","0.3.3":"2013-11-14T20:23:37.637Z","0.4.0":"2014-03-06T18:32:39.216Z","0.5.0":"2014-03-11T20:28:31.111Z","0.5.1":"2014-03-14T17:15:31.114Z","0.5.2":"2014-03-20T20:32:17.958Z","0.5.4":"2014-03-29T15:18:12.670Z"},"users":{}}}