{"name":"morgan","description":"HTTP request logger middleware for node.js","version":"1.8.2","license":"MIT","keywords":["express","http","logger","middleware"],"repository":"https://github.com/expressjs/morgan","dependencies":{"basic-auth":"~1.1.0","debug":"2.6.8","depd":"~1.1.0","on-finished":"~2.3.0","on-headers":"~1.0.1"},"devDependencies":{"eslint":"3.19.0","eslint-config-standard":"10.2.1","eslint-plugin-import":"2.2.0","eslint-plugin-markdown":"1.0.0-beta.6","eslint-plugin-node":"4.2.2","eslint-plugin-promise":"3.5.0","eslint-plugin-standard":"3.0.1","istanbul":"0.4.5","mocha":"2.5.3","split":"1.0.0","supertest":"1.1.0"},"files":["LICENSE","HISTORY.md","README.md","index.js"],"engines":{"node":">= 0.8.0"},"scripts":{"lint":"eslint --plugin markdown --ext js,md .","test":"mocha --check-leaks --reporter spec --bail","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --check-leaks --reporter dot","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --check-leaks --reporter spec"},"gitHead":"475ae38b5c308113bbf6b3a535351ceb2c419682","homepage":"https://github.com/expressjs/morgan#readme","versions":[{"number":"1.0.0","date":"2014-02-08T19:19:24.247Z"},{"number":"1.0.1","date":"2014-05-05T02:24:08.112Z"},{"number":"1.1.0","date":"2014-05-19T02:58:09.506Z"},{"number":"1.1.1","date":"2014-05-21T00:37:33.859Z"},{"number":"1.2.0","date":"2014-07-20T04:43:26.387Z"},{"number":"1.2.1","date":"2014-07-26T20:36:30.481Z"},{"number":"1.2.2","date":"2014-07-27T19:27:37.659Z"},{"number":"1.2.3","date":"2014-08-17T03:02:44.575Z"},{"number":"1.3.0","date":"2014-09-02T04:40:10.622Z"},{"number":"1.3.1","date":"2014-09-14T16:45:45.169Z"},{"number":"1.3.2","date":"2014-09-28T03:41:37.865Z"},{"number":"1.4.0","date":"2014-10-17T01:28:49.389Z"},{"number":"1.4.1","date":"2014-10-23T03:07:40.290Z"},{"number":"1.5.0","date":"2014-11-07T06:13:59.487Z"},{"number":"1.5.1","date":"2014-12-31T19:23:19.367Z"},{"number":"1.5.2","date":"2015-03-15T20:10:36.552Z"},{"number":"1.5.3","date":"2015-05-11T06:43:31.370Z"},{"number":"1.6.0","date":"2015-06-13T06:17:35.005Z"},{"number":"1.6.1","date":"2015-07-04T03:04:11.234Z"},{"number":"1.7.0","date":"2016-02-19T05:00:03.572Z"},{"number":"1.8.0","date":"2017-02-05T00:47:54.712Z"},{"number":"1.8.1","date":"2017-02-11T01:48:30.165Z"},{"number":"1.8.2","date":"2017-05-24T02:01:41.057Z"}],"readme":"# morgan\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nHTTP request logger middleware for node.js\n\n> Named after [Dexter](http://en.wikipedia.org/wiki/Dexter_Morgan), a show you should not watch until completion.\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar morgan = require('morgan')\n```\n\n### morgan(format, options)\n\nCreate a new morgan logger middleware function using the given `format` and `options`.\nThe `format` argument may be a string of a predefined name (see below for the names),\na string of a format string, or a function that will produce a log entry.\n\nThe `format` function will be called with three arguments `tokens`, `req`, and `res`,\nwhere `tokens` is object with all defined tokens, `req` is the HTTP request and `res`\nis the HTTP response. The function is expected to return a string that will be the log\nline, or `undefined` / `null` to skip logging.\n\n#### Using a predefined format string\n\n<!-- eslint-disable no-undef -->\n\n```\nmorgan('tiny')\n```\n\n#### Using format string of predefined tokens\n\n<!-- eslint-disable no-undef -->\n\n```js\nmorgan(':method :url :status :res[content-length] - :response-time ms')\n```\n\n#### Using a custom format function\n\n<!-- eslint-disable no-undef -->\n\n``` js\nmorgan(function (tokens, req, res) {\n  return [\n    tokens.method(req, res),\n    tokens.url(req, res),\n    tokens.status(req, res),\n    tokens.res(req, res, 'content-length'), '-',\n    tokens['response-time'](req, res), 'ms'\n  ].join(' ')\n})\n```\n\n#### Options\n\nMorgan accepts these properties in the options object.\n\n##### immediate\n\nWrite log line on request instead of response. This means that a requests will\nbe logged even if the server crashes, _but data from the response (like the\nresponse code, content length, etc.) cannot be logged_.\n\n##### skip\n\nFunction to determine if logging is skipped, defaults to `false`. This function\nwill be called as `skip(req, res)`.\n\n<!-- eslint-disable no-undef -->\n\n```js\n// EXAMPLE: only log error responses\nmorgan('combined', {\n  skip: function (req, res) { return res.statusCode < 400 }\n})\n```\n\n##### stream\n\nOutput stream for writing log lines, defaults to `process.stdout`.\n\n#### Predefined Formats\n\nThere are various pre-defined formats provided:\n\n##### combined\n\nStandard Apache combined log output.\n\n```\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length] \":referrer\" \":user-agent\"\n```\n\n##### common\n\nStandard Apache common log output.\n\n```\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length]\n```\n\n##### dev\n\nConcise output colored by response status for development use. The `:status`\ntoken will be colored red for server error codes, yellow for client error\ncodes, cyan for redirection codes, and uncolored for all other codes.\n\n```\n:method :url :status :response-time ms - :res[content-length]\n```\n\n##### short\n\nShorter than default, also including response time.\n\n```\n:remote-addr :remote-user :method :url HTTP/:http-version :status :res[content-length] - :response-time ms\n```\n\n##### tiny\n\nThe minimal output.\n\n```\n:method :url :status :res[content-length] - :response-time ms\n```\n\n#### Tokens\n\n##### Creating new tokens\n\nTo define a token, simply invoke `morgan.token()` with the name and a callback function.\nThis callback function is expected to return a string value. The value returned is then\navailable as \":type\" in this case:\n\n<!-- eslint-disable no-undef -->\n\n```js\nmorgan.token('type', function (req, res) { return req.headers['content-type'] })\n```\n\nCalling `morgan.token()` using the same name as an existing token will overwrite that\ntoken definition.\n\nThe token function is expected to be called with the arguments `req` and `res`, representing\nthe HTTP request and HTTP response. Additionally, the token can accept further arguments of\nit's choosing to customize behavior.\n\n##### :date[format]\n\nThe current date and time in UTC. The available formats are:\n\n  - `clf` for the common log format (`\"10/Oct/2000:13:55:36 +0000\"`)\n  - `iso` for the common ISO 8601 date time format (`2000-10-10T13:55:36.000Z`)\n  - `web` for the common RFC 1123 date time format (`Tue, 10 Oct 2000 13:55:36 GMT`)\n\nIf no format is given, then the default is `web`.\n\n##### :http-version\n\nThe HTTP version of the request.\n\n##### :method\n\nThe HTTP method of the request.\n\n##### :referrer\n\nThe Referrer header of the request. This will use the standard mis-spelled Referer header if exists, otherwise Referrer.\n\n##### :remote-addr\n\nThe remote address of the request. This will use `req.ip`, otherwise the standard `req.connection.remoteAddress` value (socket address).\n\n##### :remote-user\n\nThe user authenticated as part of Basic auth for the request.\n\n##### :req[header]\n\nThe given `header` of the request.\n\n##### :res[header]\n\nThe given `header` of the response.\n\n##### :response-time[digits]\n\nThe time between the request coming into `morgan` and when the response\nheaders are written, in milliseconds.\n\nThe `digits` argument is a number that specifies the number of digits to\ninclude on the number, defaulting to `3`, which provides microsecond precision.\n\n##### :status\n\nThe status code of the response.\n\nIf the request/response cycle completes before a response was sent to the\nclient (for example, the TCP socket closed prematurely by a client aborting\nthe request), then the status will be empty (displayed as `\"-\"` in the log).\n\n##### :url\n\nThe URL of the request. This will use `req.originalUrl` if exists, otherwise `req.url`.\n\n##### :user-agent\n\nThe contents of the User-Agent header of the request.\n\n### morgan.compile(format)\n\nCompile a format string into a `format` function for use by `morgan`. A format string\nis a string that represents a single log line and can utilize token syntax.\nTokens are references by `:token-name`. If tokens accept arguments, they can\nbe passed using `[]`, for example: `:token-name[pretty]` would pass the string\n`'pretty'` as an argument to the token `token-name`.\n\nThe function returned from `morgan.compile` takes three arguments `tokens`, `req`, and\n`res`, where `tokens` is object with all defined tokens, `req` is the HTTP request and\n`res` is the HTTP response. The function will return a string that will be the log line,\nor `undefined` / `null` to skip logging.\n\nNormally formats are defined using `morgan.format(name, format)`, but for certain\nadvanced uses, this compile function is directly available.\n\n## Examples\n\n### express/connect\n\nSimple app that will log all request in the Apache combined format to STDOUT\n\n```js\nvar express = require('express')\nvar morgan = require('morgan')\n\nvar app = express()\n\napp.use(morgan('combined'))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n### vanilla http server\n\nSimple app that will log all request in the Apache combined format to STDOUT\n\n```js\nvar finalhandler = require('finalhandler')\nvar http = require('http')\nvar morgan = require('morgan')\n\n// create \"middleware\"\nvar logger = morgan('combined')\n\nhttp.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n  logger(req, res, function (err) {\n    if (err) return done(err)\n\n    // respond to request\n    res.setHeader('content-type', 'text/plain')\n    res.end('hello, world!')\n  })\n})\n```\n\n### write logs to a file\n\n#### single file\n\nSimple app that will log all requests in the Apache combined format to the file\n`access.log`.\n\n```js\nvar express = require('express')\nvar fs = require('fs')\nvar morgan = require('morgan')\nvar path = require('path')\n\nvar app = express()\n\n// create a write stream (in append mode)\nvar accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'), {flags: 'a'})\n\n// setup the logger\napp.use(morgan('combined', {stream: accessLogStream}))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n#### log file rotation\n\nSimple app that will log all requests in the Apache combined format to one log\nfile per day in the `log/` directory using the\n[rotating-file-stream module](https://www.npmjs.com/package/rotating-file-stream).\n\n```js\nvar express = require('express')\nvar fs = require('fs')\nvar morgan = require('morgan')\nvar path = require('path')\nvar rfs = require('rotating-file-stream')\n\nvar app = express()\nvar logDirectory = path.join(__dirname, 'log')\n\n// ensure log directory exists\nfs.existsSync(logDirectory) || fs.mkdirSync(logDirectory)\n\n// create a rotating write stream\nvar accessLogStream = rfs('access.log', {\n  interval: '1d', // rotate daily\n  path: logDirectory\n})\n\n// setup the logger\napp.use(morgan('combined', {stream: accessLogStream}))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n### use custom token formats\n\nSample app that will use custom token formats. This adds an ID to all requests and displays it using the `:id` token.\n\n```js\nvar express = require('express')\nvar morgan = require('morgan')\nvar uuid = require('node-uuid')\n\nmorgan.token('id', function getId (req) {\n  return req.id\n})\n\nvar app = express()\n\napp.use(assignId)\napp.use(morgan(':id :method :url :response-time'))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n\nfunction assignId (req, res, next) {\n  req.id = uuid.v4()\n  next()\n}\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/morgan.svg\n[npm-url]: https://npmjs.org/package/morgan\n[travis-image]: https://img.shields.io/travis/expressjs/morgan/master.svg\n[travis-url]: https://travis-ci.org/expressjs/morgan\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/morgan/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/morgan?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/morgan.svg\n[downloads-url]: https://npmjs.org/package/morgan\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n","starsCount":324,"created":"2014-02-08T19:19:24.247Z","modified":"2017-06-23T16:37:31.228Z","lastPublisher":{"name":"dougwilson","email":"doug@somethingdoug.com"},"owners":[{"name":"dougwilson","email":"doug@somethingdoug.com"}],"other":{"_attachments":{},"_from":".","_id":"morgan","_nodeVersion":"6.10.3","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/morgan-1.8.2.tgz_1495591299170_0.17843790841288865"},"_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"_npmVersion":"3.10.10","_rev":"105-0f31a76121a491e24737e40ffb4383a0","_shasum":"784ac7734e4a453a9c6e6e8680a9329275c8b687","bugs":{"url":"https://github.com/expressjs/morgan/issues"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"},{"name":"Jonathan Ong","email":"me@jongleberry.com","url":"http://jongleberry.com"}],"directories":{},"dist-tags":{"latest":"1.8.2"},"dist":{"shasum":"784ac7734e4a453a9c6e6e8680a9329275c8b687","tarball":"https://registry.npmjs.org/morgan/-/morgan-1.8.2.tgz"},"maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-23T16:37:31.228Z","created":"2014-02-08T19:19:24.247Z","1.0.0":"2014-02-08T19:19:24.247Z","1.0.1":"2014-05-05T02:24:08.112Z","1.1.0":"2014-05-19T02:58:09.506Z","1.1.1":"2014-05-21T00:37:33.859Z","1.2.0":"2014-07-20T04:43:26.387Z","1.2.1":"2014-07-26T20:36:30.481Z","1.2.2":"2014-07-27T19:27:37.659Z","1.2.3":"2014-08-17T03:02:44.575Z","1.3.0":"2014-09-02T04:40:10.622Z","1.3.1":"2014-09-14T16:45:45.169Z","1.3.2":"2014-09-28T03:41:37.865Z","1.4.0":"2014-10-17T01:28:49.389Z","1.4.1":"2014-10-23T03:07:40.290Z","1.5.0":"2014-11-07T06:13:59.487Z","1.5.1":"2014-12-31T19:23:19.367Z","1.5.2":"2015-03-15T20:10:36.552Z","1.5.3":"2015-05-11T06:43:31.370Z","1.6.0":"2015-06-13T06:17:35.005Z","1.6.1":"2015-07-04T03:04:11.234Z","1.7.0":"2016-02-19T05:00:03.572Z","1.8.0":"2017-02-05T00:47:54.712Z","1.8.1":"2017-02-11T01:48:30.165Z","1.8.2":"2017-05-24T02:01:41.057Z"},"users":{"83057396":true,"afftee":true,"jmervine":true,"afollestad":true,"japh":true,"codematix":true,"pierrenel":true,"boustanihani":true,"mswanson1524":true,"mr.raindrop":true,"kingcron":true,"bkimminich":true,"salvatorelab":true,"anthonybruno":true,"kabomi":true,"rstellar":true,"zhangyaochun":true,"silverbeetle":true,"kws4679":true,"pstoev":true,"akiva":true,"tsm91":true,"r3nya":true,"gaboo":true,"idev":true,"kh3phr3n":true,"f124275809":true,"dlpowless":true,"ronder":true,"andreaspag":true,"prabhash1785":true,"drdanryan":true,"robermac":true,"manxisuo":true,"amirmehmood":true,"simplyianm":true,"nickeljew":true,"dongxu":true,"shaneli":true,"skarface":true,"pengzhisun":true,"elrolito":true,"jmorris":true,"alexkval":true,"markthethomas":true,"staraple":true,"iamwiz":true,"godion":true,"sanketss84":true,"junjiansyu":true,"alexcoady":true,"webnicola":true,"broxmgs":true,"ishitcno1":true,"sculove":true,"jabbrwcky":true,"nadimix":true,"glebec":true,"luuhoangnam":true,"program247365":true,"nanhualyq":true,"leny":true,"nex":true,"nikitka_m":true,"gochomugo":true,"xngiser":true,"adamlu":true,"nonoroazoro":true,"wilbeibi":true,"jack546":true,"amanvirk":true,"flockonus":true,"hibrahimsafak":true,"nathanhornby":true,"jeffb_incontact":true,"macdaddy":true,"boyw165":true,"iliyat":true,"leandro.maioral":true,"monolithed":true,"santihbc":true,"karlbateman":true,"aahz":true,"arifulhb":true,"isik":true,"crazyjingling":true,"ssh0702":true,"saravananr":true,"ddffx":true,"chrisyipw":true,"jonatasnona":true,"vwal":true,"decoda":true,"karlbright":true,"esundahl":true,"gollojs":true,"kinday":true,"mjurincic":true,"ruyadorno":true,"bpatel":true,"nmccready":true,"jerkovicl":true,"karl.alnebratt":true,"erikvold":true,"ral.amgstromg":true,"cspotcode":true,"kparkov":true,"austinwo":true,"m0dred":true,"chadyred":true,"shiva127":true,"luckyulin":true,"honzajde":true,"windhamdavid":true,"silva23":true,"kenkao":true,"imd92":true,"panlw":true,"wangnan0610":true,"andrew.medvedev":true,"magicxiao85":true,"bian17888":true,"figroc":true,"snowdream":true,"shadowlong":true,"thomashzhu":true,"novalu":true,"evan2x":true,"cfleschhut":true,"yatsu":true,"wzbg":true,"jamesbedont":true,"msjcaetano":true,"davidbraun":true,"eserozvataf":true,"algonzo":true,"sasquatch":true,"thomas.miele":true,"lwgojustgo":true,"brightchen":true,"swookie":true,"dkannan":true,"vishwasc":true,"ansuman":true,"coolhanddev":true,"hughescr":true,"mikestaub":true,"garenyondem":true,"pedrotp":true,"ryanlee":true,"arnold-almeida":true,"amenadiel":true,"wisecolt":true,"goodnighthsu":true,"craigdmckenna":true,"koskokos":true,"hyungdookil":true,"surajkarnati":true,"vladyslav.tserman":true,"spanser":true,"jasonwang1888":true,"asm2hex":true,"igorissen":true,"hinx":true,"tonyljl526":true,"samlaudev":true,"jfernandezgersol":true,"elviopita":true,"mseminatore":true,"bapinney":true,"princetoad":true,"clarenceho":true,"emarcs":true,"itskdk":true,"p4r4n0id":true,"hiu_yan_chong":true,"usama.ashraf":true,"sroveda":true,"obouchari":true,"nickeltobias":true,"snarky":true,"siirial":true,"tobitobitobi":true,"pmasa":true,"sqrtthree":true,"ekmpls":true,"yash3492":true,"ramzesucr":true,"duskalbatross":true,"rbecheras":true,"ridermansb":true,"klombomb":true,"shide":true,"james3299":true,"hugovila":true,"joshuadavidson":true,"alin.alexa":true,"mevlutsahin":true,"lakipatel":true,"itsakt":true,"n0f3":true,"mluberry":true,"bkarak":true,"nagra":true,"kjarisk":true,"dcavalcante":true,"ymk":true,"mickaelb":true,"xyyjk":true,"phoenix-xsy":true,"apopek":true,"hifaraz":true,"manikantag":true,"jmsherry":true,"crisperdue":true,"scottfreecode":true,"andreipetcu":true,"shakakira":true,"largepuma":true,"staydan":true,"ethancai":true,"jtrh":true,"rocket0191":true,"adrian110288":true,"defking":true,"abuelwafa":true,"gejiawen":true,"wozhizui":true,"phoenixsoul":true,"jonathas":true,"slmcassio":true,"kistoryg":true,"sansgumen":true,"mr-smiley":true,"ykimnpmjs":true,"quafoo":true,"zixinliango":true,"calldanfeng":true,"13lank.null":true,"chunxchun":true,"mhaidarh":true,"nohomey":true,"fahadjadoon":true,"icerainnuaa":true,"dzhou777":true,"craigpatten":true,"langri-sha":true,"mrwanashraf":true,"jamiechoi":true,"plashchynski":true,"strydom":true,"hitalos":true,"landy2014":true,"walnut":true,"isaacvitor":true,"ab.moon":true,"webmato":true,"geekish":true,"vchouhan":true,"boopathisakthivel.in":true,"nxc":true,"mrbgit":true,"bobmhong":true,"evdokimovm":true,"charlietango592":true,"ognjen.jevremovic":true,"leonzhao":true,"sachacr":true,"giussa_dan":true,"pr-anoop":true,"ejmason":true,"chirag8642":true,"steel1990":true,"madalozzo":true,"stevepsharpe":true,"wittrura":true,"ungurys":true,"archcorsair":true,"chinawolf_wyp":true,"oxocode":true,"gabestevy":true,"nate-river":true,"alexey-mish":true,"thomas.li":true,"rajivmehtajs":true,"cunningdj":true,"junos":true,"jaguarj":true,"bengi":true,"jk6":true,"vicsandoli":true,"shreyawhiz":true,"tomchao":true,"astesio":true,"kodekracker":true,"sadmansamee":true,"chinjon":true,"serge-nikitin":true,"stoneren":true,"gpuente":true,"kevinhassan":true,"shuoshubao":true,"milan322":true,"kaashin":true,"modood":true,"dylanh724":true,"superchenney":true,"liuningww":true,"ray0214":true,"sibawite":true,"wangxx":true,"chiaychang":true,"windyh":true,"bigbird92":true,"456wyc":true,"u19950930":true,"terrychan":true,"jmkim9":true,"karzanosman984":true,"alek-s":true,"martinspinks":true,"kuzmicheff":true,"zhyq0826":true,"loind":true}}}