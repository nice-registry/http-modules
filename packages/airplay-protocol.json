{"name":"airplay-protocol","version":"2.0.2","description":"A low level protocol wrapper on top of the AirPlay HTTP API","main":"index.js","dependencies":{"bplist-creator":"^0.0.6","bplist-parser":"^0.1.1","concat-stream":"^1.5.1","plist":"^1.2.0","reverse-http":"^1.2.0"},"devDependencies":{"standard":"^6.0.8","tape":"^4.5.1"},"scripts":{"test":"standard && tape test.js"},"repository":"https://github.com/watson/airplay-protocol","keywords":["airplay","protcol","http","api","video","stream","streaming"],"engines":{"node":">= 0.12"},"license":"MIT","homepage":"https://github.com/watson/airplay-protocol#readme","coordinates":[52.5306897,13.3840121],"gitHead":"1675e296885e5405ebbe14eca0ae27be9dbd3695","versions":[{"number":"1.0.0","date":"2016-04-17T22:09:25.445Z"},{"number":"1.0.1","date":"2016-04-18T00:47:24.064Z"},{"number":"1.1.0","date":"2016-04-20T20:45:49.197Z"},{"number":"1.2.0","date":"2016-04-20T22:57:09.699Z"},{"number":"1.2.1","date":"2016-04-20T23:04:39.027Z"},{"number":"2.0.0","date":"2016-04-29T10:56:20.276Z"},{"number":"2.0.1","date":"2016-04-29T23:17:31.258Z"},{"number":"2.0.2","date":"2016-04-30T21:38:49.515Z"}],"readme":"# airplay-protocol\n\nA low level protocol wrapper on top of the AirPlay HTTP API used to\nconnect to an Apple TV.\n\n**For a proper AirPlay client, see\n[airplayer](https://github.com/watson/airplayer) instead.**\n\nCurrently only the video API is implemented.\n\n[![Build status](https://travis-ci.org/watson/airplay-protocol.svg?branch=master)](https://travis-ci.org/watson/airplay-protocol)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n\n## Installation\n\n```\nnpm install airplay-protocol --save\n```\n\n## Example Usage\n\n```js\nvar AirPlay = require('airplay-protocol')\n\nvar airplay = new AirPlay('apple-tv.local')\n\nairplay.play('http://example.com/video.m4v', function (err) {\n  if (err) throw err\n\n  airplay.playbackInfo(function (err, res, body) {\n    if (err) throw err\n    console.log('Playback info:', body)\n  })\n})\n```\n\n## API\n\n### `new AirPlay(host[, port])`\n\nInitiate a connection to a specific AirPlay server given a host or IP\naddress and a port. If no port is given, the default port 7000 is used.\n\nReturns an instance of the AirPlay object.\n\n```js\nvar AirPlay = require('airplay-protocol')\n\nvar airplay = new AirPlay('192.168.0.42', 7000)\n```\n\n### Event: `event`\n\n```js\nfunction (event) {}\n```\n\nEmitted every time the AirPlay server sends an event. Events can hold\ndifferent types of data, but will among other things be used to send\nupdates to the playback state.\n\nExample event object indicating the state of the playback have changed:\n\n```js\n{\n  category: 'video',\n  params: {\n    uuid: 'D90C289F-DE6A-480C-A741-1DA92CEEE8C3-40-00000004654E2487'\n  },\n  sessionID: 3,\n  state: 'loading'\n}\n```\n\nThe `event.params` property can potentially hold a lot more data than\nshown in this example.\n\nExample event object indicating an update to the access log:\n\n```js\n{\n  params: {\n    uuid: '96388EC8-05C8-4BC4-A8EB-E9B6FCEB1A55-41-000000135E436A63'\n  },\n  sessionID: 0,\n  type: 'accessLogChanged'\n}\n```\n\n### `airplay.state`\n\nProperty holding the latest playback state emitted by the `event` event.\nWill be `undefined` if no `event` event have been emitted yet.\n\nPossible states: `loading`, `playing`, `paused` or `stopped`.\n\n### `airplay.serverInfo(callback)`\n\nGet the AirPlay server info.\n\nArguments:\n\n- `callback` - Will be called when the request have been processed by\n  the AirPlay server. The first argument is an optional Error object.\n  The second argument is an instance of [`http.IncomingMessage`][1] and\n  the third argument is a parsed plist object containing the server info\n\n### `airplay.play(url[, position][, callback])`\n\nStart video playback.\n\nArguments:\n\n- `url` - The URL to play\n- `position` (optional) - A floating point number between `0` and `1`\n  where `0` represents the begining of the video and `1` the end.\n  Defaults to `0`\n- `callback` (optional) - Will be called when the request have been\n  processed by the AirPlay server. The first argument is an optional\n  Error object. The second argument is an instance of\n  [`http.IncomingMessage`][1]\n\n### `airplay.scrub(callback)`\n\nRetrieve the current playback position.\n\nArguments:\n\n- `callback` - Will be called when the request have been processed by\n  the AirPlay server. The first argument is an optional Error object.\n  The second argument is an instance of [`http.IncomingMessage`][1] and\n  the third argument is the current playback position\n\n### `airplay.scrub(position[, callback])`\n\nSeek to an arbitrary location in the video.\n\nArguments:\n\n- `position` - A float value representing the location in seconds\n- `callback` (optional) - Will be called when the request have been\n  processed by the AirPlay server. The first argument is an optional\n  Error object. The second argument is an instance of\n  [`http.IncomingMessage`][1]\n\n### `airplay.rate(speed[, callback])`\n\nChange the playback rate.\n\nArguments:\n\n- `speed` - A float value representing the playback rate: 0 is paused, 1\n  is playing at the normal speed\n- `callback` (optional) - Will be called when the request have been\n  processed by the AirPlay server. The first argument is an optional\n  Error object. The second argument is an instance of\n  [`http.IncomingMessage`][1]\n\n### `airplay.pause([callback])`\n\nPause playback.\n\nAlias for `airplay.rate(0, callback)`.\n\n### `airplay.resume([callback])`\n\nResume playback.\n\nAlias for `airplay.rate(1, callback)`.\n\n### `airplay.stop([callback])`\n\nStop playback.\n\nArguments:\n\n- `callback` (optional) - Will be called when the request have been\n  processed by the AirPlay server. The first argument is an optional\n  Error object. The second argument is an instance of\n  [`http.IncomingMessage`][1]\n\n### `airplay.playbackInfo(callback)`\n\nRetrieve playback informations such as position, duration, rate,\nbuffering status and more.\n\nArguments:\n\n- `callback` - Will be called when the request have been processed by\n  the AirPlay server. The first argument is an optional Error object.\n  The second argument is an instance of [`http.IncomingMessage`][1] and\n  the third argument is a parsed plist object containing the playback info\n\n### `airplay.property(name, callback)`\n\nGet playback property.\n\nArguments:\n\n- `name` - The name of the property to get\n- `callback` - Will be called when the request have been processed by\n  the AirPlay server. The first argument is an optional Error object.\n  The second argument is an instance of [`http.IncomingMessage`][1] and\n  the third argument is a parsed plist object containing the property\n\n### `airplay.property(name, value[, callback])`\n\nSet playback property.\n\nArguments:\n\n- `name` - The name of the property to set\n- `value` - The plist object to set\n- `callback` (optional) - Will be called when the request have been\n  processed by the AirPlay server. The first argument is an optional\n  Error object. The second argument is an instance of\n  [`http.IncomingMessage`][1]\n\n### `airplay.destroy()`\n\nDestroy the reverse-http server set up to receive AirPlay events.\n\n## License\n\nMIT\n\n[1]: https://nodejs.org/api/http.html#http_class_http_incomingmessage\n","starsCount":1,"created":"2016-04-17T22:09:25.445Z","modified":"2016-04-30T21:38:49.515Z","lastPublisher":{"name":"watson","email":"w@tson.dk"},"owners":[{"name":"watson","email":"w@tson.dk"}],"other":{"_attachments":{},"_from":".","_id":"airplay-protocol","_nodeVersion":"4.2.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/airplay-protocol-2.0.2.tgz_1462052327176_0.2355630814563483"},"_npmUser":{"name":"watson","email":"w@tson.dk"},"_npmVersion":"2.14.7","_rev":"1-1b23554e98ff002110b1322751cabbbb","_shasum":"b5b2a7137331f5545acbe196ba5693c13238fc5e","author":{"name":"Thomas Watson Steen","email":"w@tson.dk","url":"https://twitter.com/wa7son"},"bugs":{"url":"https://github.com/watson/airplay-protocol/issues"},"directories":{},"dist-tags":{"latest":"2.0.2"},"dist":{"shasum":"b5b2a7137331f5545acbe196ba5693c13238fc5e","tarball":"http://registry.npmjs.org/airplay-protocol/-/airplay-protocol-2.0.2.tgz"},"maintainers":[{"name":"watson","email":"w@tson.dk"}],"readmeFilename":"README.md","time":{"modified":"2016-04-30T21:38:49.515Z","created":"2016-04-17T22:09:25.445Z","1.0.0":"2016-04-17T22:09:25.445Z","1.0.1":"2016-04-18T00:47:24.064Z","1.1.0":"2016-04-20T20:45:49.197Z","1.2.0":"2016-04-20T22:57:09.699Z","1.2.1":"2016-04-20T23:04:39.027Z","2.0.0":"2016-04-29T10:56:20.276Z","2.0.1":"2016-04-29T23:17:31.258Z","2.0.2":"2016-04-30T21:38:49.515Z"},"users":{"qisong":true}}}