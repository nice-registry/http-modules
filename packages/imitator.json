{"name":"imitator","version":"0.0.7","bin":{"imitator":"bin/www"},"description":"A server that help you to imitate http response.","repository":"https://github.com/hanan198501/imitator","license":"ISC","scripts":{"start":"node ./bin/www"},"keywords":["mock","imitate","http","json","response","request"],"dependencies":{"body-parser":"~1.13.2","cookie-parser":"~1.3.5","express":"~4.13.1","http-proxy":"^1.11.1","morgan":"~1.6.1","optimist":"^0.6.1","serve-favicon":"~2.3.0"},"devDependencies":{"expect.js":"*"},"gitHead":"d3dee04285a15293f9be929a31822c4212662b6b","homepage":"https://github.com/hanan198501/imitator#readme","versions":[{"number":"0.0.0","date":"2015-07-19T15:18:14.666Z"},{"number":"0.0.1","date":"2015-07-21T17:13:59.373Z"},{"number":"0.0.2","date":"2015-07-24T15:37:38.411Z"},{"number":"0.0.3","date":"2015-07-25T02:43:26.702Z"},{"number":"0.0.4","date":"2015-07-27T08:36:26.560Z"},{"number":"0.0.5","date":"2015-07-27T08:50:28.208Z"},{"number":"0.0.6","date":"2015-08-30T06:53:15.887Z"},{"number":"0.0.7","date":"2016-02-27T03:11:27.345Z"}],"readme":"imitator\n========\n\n一个简单易用的 nodejs 服务器, 主要用于模拟 HTTP 接口数据, 请求代理与转发 。\n使用imitator，可以解决前后端分离开发中的数据模拟问题，也可以作为代理服务器与静态资源服务器使用。\n\n### 为什么会有 imitator？\n\n前后端开发协作的过程中，为了不依赖于后端环境，我们常常会和后端童鞋定好接口，然后采用前后端分离的开发模式。\n但是这样的模式，需要前端自己来实现接口数据的模拟。通常使用 nginx 可以满足我们绝大部分场景的需求了。\n但是，nginx 的配置文件相对前端同学来说还是不够友好，而且有些个性的接口格式无法满足。\nimitator 使用 nodejs 并基于 express.js 实现， 配置文件相当简单， 而且易于订制，前端同学使用起来非常顺手。\n\n### 快速上手\n\n1. 安装——首先你要先安装 nodejs 和 npm， 然后全局安装imitator。\n\n        npm install imitator -g\n    \n2. 编写配置文件——在你的用户目录(比如我的是/User/hanan)下新建一个名为 Imitatorfile.js 的文件（这是 imitator 的默认配置文件）， 内容如下。\n    \n        module.exports = function(imitator) {\n            // 返回一个json\n            imitator('/json', {name: 'hello world'});\n        }\n    \n3. 启动服务——命令行输入以下命令，启动 imitator server.\n\n        imitator\n    \n4. 浏览器访问 127.0.0.1:8888/json ， 将会看到：\n\n        {\"name\":\"hello world\"}\n    \n\n### 命令行参数\n\nimitator 命令接受2参数：\n\n-p 设置 imitator server 的端口号，默认是8888。\n\n-f 设置配置文件的路径，支持相对路径和绝对路径，默认为：用户目录/Imitatorfile.js 。\n\n下面的命令将使用 9000 端口， /home/myconfig.js 这个文件作为配置文件来启动 imitator server 。\n    \n    imitator -p 9000 -f /home/myconfig.js\n    \n### 配置文件\n\nimitator 的配置文件是其实就是一个 nodejs 模块， module.exports 是一个函数，接受一个参数：imitator 。 通过调用 imitator(option) 来设置一条规则。\n其中 option 是规则的参数对象。如：\n\n    module.exports = function(imitator) {\n        imitator({\n            url: '/json',   // 匹配的url\n            result: {name: 'json test'} // 返回的内容\n        });\n    }\n    \n如上，当请求地址匹配到 /json 这个路径的时候，就会返回 {name: 'json test'} 的json字符串。\n\n当 option 中只包含 url，result 两个参数时，可以简写成 imitator(url, result) 的形式，上面的例子可以写成：\n\n    module.exports = function(imitator) {\n        imitator('/json', {name: 'json test'});\n    }    \n\n\n### 规则参数（option）\n\n配置文件中可以通过 imitator(option) 来制定一条规则，其中参数对象包含以下属性：\n\n#### option.url\n\n必填，设置请求的匹配模式，支持正则。如：\n\n    module.exports = function(imitator) {\n    \n        imitator({\n            url: '/json',\n            ……\n        });\n        \n        imitator({\n            url: /\\/\\d{1,3}/,  // 支持正则\n            ……\n        });\n    }\n\n#### option.result\n\n必填，设置请求的返回内容，如果是一个 object 或者 array，将会被 JSON.stringify 后返回；如果是一个 function，将会接受 req 和 res 两个参数执行，可用于实现一些个性化的返回内容。如：\n\n    module.exports = function(imitator) {\n    \n        imitator({\n            ……\n            result: 'my result',  //普通字符串\n        });\n        \n        imitator({\n            ……\n            result: {name: 'json test'}, //json\n        });\n        \n        imitator({\n            ……\n            result: function (req, res) {  // 自定义内容\n                if (req.param.name === 'hanan') {\n                    res.send('中年痴呆症患者');\n                }\n                else {\n                    res.send('i do not know .');\n                }\n            },\n        });\n    }\n\n#### option.type\n\n设置通过 <a href=\"https://github.com/broofa/node-mime?_ga=1.127462925.164520609.1437794879#mimelookuppath\" target=\"_blank\">mime.lookup()</a> 转化的 Content-Type HTTP header。如：\n\n    module.exports = function(imitator) {\n        \n        imitator({\n            ……\n            type: 'json',  ==> 'application/json'\n            ……\n        });\n        \n        imitator({\n            ……\n            type: 'html',  ==> 'text/html'\n            ……\n        });\n        \n    }    \n\n#### option.headers\n\n设置 HTTP header。如：\n\n    module.exports = function(imitator) {\n            \n        imitator({\n            ……\n            headers: {\n                myheadername: 'myheader value'\n            }\n            ……\n        });\n        \n    }     \n\n#### option.cookies\n\n设置 cookie，如：\n\n    module.exports = function(imitator) {\n                \n        imitator({\n            ……\n            cookies: [\n                {name: 'myname', value: 'hanan', maxAge: 900000, httpOnly: true}\n            ]\n            ……\n        });\n        \n    }\n\n#### option.timeout\n   \n设置请求响应的延时时间，单位为毫秒，如：\n \n     module.exports = function(imitator) {\n                 \n         imitator({\n             ……\n             timeout: 1000\n             ……\n         });\n         \n     }\n     \n### HTTP代理\n\n通过 imitator.base() 可以将规则之外的请求，转发到其他的服务器上。这样可以在实现接口模拟的同时，使用其他服务器的返回内容。如：\n\n    module.exports = function(imitator) {\n          \n         // 这里是各种规则========\n         imitator(……);\n         imitator(……);\n         imitator(……);\n         \n         \n         // 没有命中规则的请求, 转发到192.168.8.8:9000下\n         imitator.base('http://192.168.8.8:9000');\n    }\n\n\n### 静态目录\n\n通过 imitator.static(url, path) 可以设置静态文件目录。 url 为匹配的请求地址，支持正则；path 为静态文件的目录，路径相对于配置文件。如：\n\n    module.exports = function(imitator) {\n          \n         imitator.static('/static', './public');\n    }\n\n### 读取文件内容\n\n通过 imitator.file(filePath) 可以读取文件内容，filePath是文件路径，相对于配置文件。如：\n    \n    module.exports = function(imitator) {\n              \n        // 当请求匹配到 /file 时 ，返回文件 ./myfile.txt 的内容\n        imitator('/file', imitator.file('./myfile.txt'));\n    }\n\n### 返回jsonp内容\n\n通过 imitator.jsonp(context， callbackName) 可以设置返回 jsonp 内容，其中 context 是内容实体，类型为 object|string， callbackName 为回调函数名称， 默认为 'callback'。如：\n\n    module.exports = function(imitator) {\n\n            // 当请求匹配到 /myjsonp 时，将文件文件 ./myfile.txt 的内容经过 jsonp 包裹后返回\n            imitator('/myjsonp', imitator.jsonp(imitator.file('./myfile.txt')));\n\n            // 当请求匹配到 /myjsonp2 时，将一个对象用 'mycb' 这个回调函数名经过 jsonp 包裹后返回，\n            imitator('/myjsonp', imitator.jsonp({url: 'annn.me'}, 'mycb'));\n        }\n\n    \n### 配置文件(Imitatorfile.js)参考\n\n详见：[https://github.com/hanan198501/imitator/blob/master/test/Imitatorfile.js](https://github.com/hanan198501/imitator/blob/master/test/Imitatorfile.js)\n","created":"2015-07-19T15:18:14.666Z","modified":"2016-02-27T03:11:27.345Z","lastPublisher":{"name":"hanan198501","email":"annn.han@gmail.com"},"owners":[{"name":"hanan198501","email":"annn.han@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"imitator","_nodeVersion":"0.12.4","_npmOperationalInternal":{"host":"packages-5-east.internal.npmjs.com","tmp":"tmp/imitator-0.0.7.tgz_1456542684775_0.15248636808246374"},"_npmUser":{"name":"hanan198501","email":"annn.han@gmail.com"},"_npmVersion":"2.10.1","_rev":"1-1ef9fac419920ffeb3fd4ec760aeda73","_shasum":"65b4ff55557b5a454d234b02dc420d3439a044d7","author":{"name":"hanan"},"bugs":{"url":"https://github.com/hanan198501/imitator/issues"},"directories":{},"dist-tags":{"latest":"0.0.7"},"dist":{"shasum":"65b4ff55557b5a454d234b02dc420d3439a044d7","tarball":"http://registry.npmjs.org/imitator/-/imitator-0.0.7.tgz"},"maintainers":[{"name":"hanan198501","email":"annn.han@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-02-27T03:11:27.345Z","created":"2015-07-19T15:18:14.666Z","0.0.0":"2015-07-19T15:18:14.666Z","0.0.1":"2015-07-21T17:13:59.373Z","0.0.2":"2015-07-24T15:37:38.411Z","0.0.3":"2015-07-25T02:43:26.702Z","0.0.4":"2015-07-27T08:36:26.560Z","0.0.5":"2015-07-27T08:50:28.208Z","0.0.6":"2015-08-30T06:53:15.887Z","0.0.7":"2016-02-27T03:11:27.345Z"}}}