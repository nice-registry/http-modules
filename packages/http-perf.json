{"name":"http-perf","preferGlobal":true,"version":"0.0.5","description":"a simple utility to test an http server and get stats","homepage":"https://github.com/zanchin/node-http-perf","keywords":["http","performance","testing","load"],"repository":"https://github.com/zanchin/node-http-perf","bin":{"nperf":"./bin/nperf"},"dependencies":{"optimist":"0.3.x","colors":"0.6.x"},"license":"MIT","engines":{"node":">=0.6.0"},"versions":[{"number":"0.0.1","date":"2012-05-24T16:11:15.052Z"},{"number":"0.0.2","date":"2012-09-22T23:30:19.229Z"},{"number":"0.0.3","date":"2012-10-13T05:08:00.651Z"},{"number":"0.0.4","date":"2012-12-10T19:04:09.434Z"},{"number":"0.0.5","date":"2014-04-17T22:27:44.777Z"}],"readme":"# Node HTTP Server Performance Tool\n\nhttp-perf is a tool used to test HTTP/S server performance. It is basically an HTTP client that executes specified requests against a server and then measures and records response times and other metrics.\n\nIts function is similar to the popular [ab](http://httpd.apache.org/docs/2.0/programs/ab.html) tool, and in fact the basic usage is identical. However, this tool goes above what `ab` provides for my needs. For example, it parses the server-side request time (if reported in headers) and displays it along with the client's view of request time for each request. It can also output its data in JSON.\n\n## Install\n\nvia `npm`, preferrably globally (-g)\n\n    $ npm install -g http-perf\n\nThis installs an executable called `nperf`.\n\nYou can run the tool directly\n\n    $ node node_modules/http-perf/bin/nperf\n\nOr if installed globally\n\n    $ nperf\n\n\n## Quick Start\n\nSend 10 requests to google.com with 5 concurrent requests:\n\n    $ nperf -c 5 -n 10 http://www.google.com/\n    [status] response# /request_id time: client time (ms) (server time (ms))\n    [200] 1 /1 time: 78 (-1)\n    [200] 2 /0 time: 89 (-1)\n    [200] 3 /3 time: 86 (-1)\n    [200] 4 /4 time: 88 (-1)\n    [200] 5 /2 time: 91 (-1)\n    [200] 6 /6 time: 76 (-1)\n    [200] 7 /5 time: 82 (-1)\n    [200] 8 /7 time: 82 (-1)\n    [200] 9 /9 time: 82 (-1)\n    [200] 10 /8 time: 100 (-1)\n    stats:\n    { min: 76,\n      max: 100,\n      avg: 85.4,\n      count: 10,\n      rate: 50.76142131979695,\n      start: 1337831509423,\n      total_time: 197 }\n    \nWe see that 10 requests were sent to the server with the average response time being 85.4 ms. The server processed requests at a rate of about 50 requests per second.\n\nServer processing time is not available (-1) because Google does not return it in a header. Supported headers are: _X-Response-Time_ and _X-Runtime_.\n\n## Usage\n\nDisplay usage:\n\n    $ nperf -h\n    Stress test an HTTP server.\n    Usage: node ./bin/nperf [options] [target server]\n    \n    Options:\n      --conf, --config  Configuration file with targets                 \n      --target, -t      Target server name in config file               \n      -c                Number of concurrent requests                   \n      -n                Max number of total requests                    \n      -o                Output format: [text|json]. Default: text       \n      -v, --verbose     Verbose output                                  \n      --dry-run         Read config, but don't run (can be used with -v)\n      --help, -h        Print this usage and exit \n\n\nOne useful feature of the tool is that you can save all parameters and server targets in a config file and refer to it instead of specifying them on the commandline. All parameters specified on the commandline override their counterparts in the config file.\n\nSample config file `config.js`:\n\n    module.exports = {\n        settings: {\n            concurrency: 10,  // -c\n            max_requests: 200,  // -n\n            output_format: 'text' // -o 'text' or 'json'\n        },\n        targets: {\n            // can have multiple targets here\n            // pick one using the --target commandline argument\n            local: {\n                host: 'localhost',\n                port: 8080,\n                path: '/path/to/http/resource',\n                headers: {  \n                    'X-Optional-Header': \"header value\"\n                }\n            },\n            google: {\n                host: 'www.google.com',\n                port: 80,\n                path: '/'\n            }\n        }\n    };\n\nSet the port to `443` for HTTPS.\n\nTo use the config file and specify the `google` target, run:\n\n    $ nperf --conf config.js -t google\n    [status] response# /request_id time: client time (ms) (server time (ms))\n    [200] 1 /1 time: 161 (-1)\n    [200] 2 /3 time: 164 (-1)\n    [200] 3 /6 time: 165 (-1)\n     ... output truncated ...\n    [200] 198 /198 time: 67 (-1)\n    [200] 199 /197 time: 81 (-1)\n    [200] 200 /199 time: 71 (-1)\n    stats:\n    { min: 43,\n      max: 722,\n      avg: 110.34500000000004,\n      count: 200,\n      rate: 88.65248226950355,\n      start: 1337832532680,\n      total_time: 2256 }\n\nThe number of requests and concurrency values are taken from the config file, as well as the details for the `google` target. Output above is truncated for brevity.\n\n\n## More examples\n\nOverride config with commandline parameters:\n\n    $ nperf --config config.js --target google -c 1 -n 20\n\nJSON output:\n\n    $ nperf -o json http://www.google.com -n 5\n    {\"status\":\"status\",\"response_count\":\"response#\",\"request_id\":\"request_id\",\"client_time\":\"client time (ms)\",\"server_time\":\"server time (ms)\"}\n    {\"status\":200,\"request_id\":2,\"response_count\":1,\"client_time\":467,\"server_time\":-1}\n    {\"status\":200,\"request_id\":0,\"response_count\":2,\"client_time\":475,\"server_time\":-1}\n    {\"status\":200,\"request_id\":4,\"response_count\":3,\"client_time\":475,\"server_time\":-1}\n    {\"status\":200,\"request_id\":1,\"response_count\":4,\"client_time\":477,\"server_time\":-1}\n    {\"status\":200,\"request_id\":3,\"response_count\":5,\"client_time\":486,\"server_time\":-1}\n    stats:\n    { min: 467,\n      max: 486,\n      avg: 476,\n      count: 5,\n      rate: 10.101010101010102,\n      start: 1337833296687,\n      total_time: 495 }\n\n\n## Contributing\n\nI welcome pull requests!\n\n## License\n\nThis software is distributed under the MIT License.\n","starsCount":1,"created":"2012-05-24T16:11:14.683Z","modified":"2014-04-17T22:27:44.777Z","lastPublisher":{"name":"zanchin","email":"ilya@cloudmine.me"},"owners":[{"name":"zanchin","email":"ilya@cloudmine.me"}],"other":{"_attachments":{},"_from":".","_id":"http-perf","_npmUser":{"name":"zanchin","email":"ilya@cloudmine.me"},"_npmVersion":"1.4.3","_rev":"1-658228c8c723dee0108e5ecc717a6a4f","author":{"name":"Ilya Braude","email":"ilya@cloudmine.me"},"bugs":{"url":"https://github.com/zanchin/node-http-perf/issues"},"directories":{"bin":"./bin"},"dist-tags":{"latest":"0.0.5"},"dist":{"shasum":"a2249f342286d1f8b78dcb4aba75b9861c2f479b","tarball":"http://registry.npmjs.org/http-perf/-/http-perf-0.0.5.tgz"},"maintainers":[{"name":"zanchin","email":"ilya@cloudmine.me"}],"readmeFilename":"Readme.md","time":{"modified":"2014-04-17T22:27:44.777Z","created":"2012-05-24T16:11:14.683Z","0.0.1":"2012-05-24T16:11:15.052Z","0.0.2":"2012-09-22T23:30:19.229Z","0.0.3":"2012-10-13T05:08:00.651Z","0.0.4":"2012-12-10T19:04:09.434Z","0.0.5":"2014-04-17T22:27:44.777Z"},"users":{"hckhanh":true}}}