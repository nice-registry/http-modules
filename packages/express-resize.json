{"name":"express-resize","version":"1.0.2","description":"Express middleware to resize images on the fly using simple http requests","main":"index.js","scripts":{"preinstall":"npm config set msvs_version 2013 --global","test":"mocha test","docs":"docha test"},"repository":"https://github.com/GeeWizWow/express-resize","keywords":["express","middleware","resize","sharp","nodejs"],"license":"ISC","homepage":"https://github.com/GeeWizWow/express-resize#readme","dependencies":{"sharp":"^0.12.0"},"devDependencies":{"docha":"^0.1.2","mocha":"^2.3.4"},"gitHead":"5807d9d25b37c1cae09e4abeb0bedeb454786d14","versions":[{"number":"1.0.0","date":"2015-12-05T16:48:58.136Z"},{"number":"1.0.1","date":"2015-12-05T16:54:41.606Z"},{"number":"1.0.2","date":"2015-12-06T12:48:28.427Z"}],"readme":"# Express-Resize\r\n\r\n**Express middleware to resize images on the fly.**\r\n\r\n## Installation\r\n\r\n`npm install --S express-resize`\r\n\r\n## Usage\r\n\r\n**If you are using other middleware make sure to include express-resize before them!**\r\n\r\n```\r\nvar express = require('express');\r\nvar resize = require('express-resize');\r\n\r\nvar app = express();\r\n\r\napp.use(resize);\r\napp.use(express.static());\r\n\r\napp.listen(3030);\r\n```\r\n\r\nJust put the full sized image in your content directory and request it with the width and or height parameters. For example:\r\n\r\n* Need a small image for mobiles? get *http://yoursite/image.jpg?width=150*\r\n\r\n* Need to crop an image to a square format for an avatar? get *http://yoursite/avatar.jpg?width=100&height=100*\r\n\r\n*Supported formats are: jpg, jpeg, png, gif, svg.*\r\n\r\n## Todo\r\n\r\n* Provide options for crop positioning\r\n\r\n## Tests\r\n\r\n### params\r\n params should return an object with two keys: height, width\r\n\r\n```\r\nvar req = {\r\n    query: {\r\n        height: 600,\r\n        width: 600\r\n    }\r\n};\r\nvar result = util.params(req);\r\nassert.equal(2, Object.keys(result).length);\r\n```\r\n\r\n\r\n params should return an object with the keys: height = 600, width = null\r\n\r\n```\r\nvar req = {\r\n    query: {\r\n        height: 600,\r\n        width: '6dsf00'\r\n    }\r\n};\r\nvar result = util.params(req);\r\nassert.equal((Object.keys(result).length == 2),(result.width == null));\r\n```\r\n\r\n\r\n params should return an object with the keys: height = null, width = 600\r\n\r\n```\r\nvar req = {\r\n    query: {\r\n        height: 0,\r\n        width: 600\r\n    }\r\n};\r\nvar result = util.params(req);\r\nassert.equal((Object.keys(result).length == 2),(result.height == null));\r\n```\r\n\r\n\r\n params should return null\r\n\r\n```\r\nvar req = {\r\n    query: {}\r\n};\r\nvar result = util.params(req);\r\nassert.equal(null, result);\r\n```\r\n\r\n\r\n### relativePath\r\n relativePath should return a path without leading slash\r\n\r\n```\r\nvar path = '/Content/Images/car.jpeg';\r\nvar result = util.relativePath(path);\r\nassert.equal(true, (result.charAt(0) !== '/'));\r\n```\r\n\r\n\r\n### parseReqUrl\r\n parseReqUrl return an array\r\n\r\n```\r\nvar path = 'content/image.jpg';\r\nvar result = util.parseReqURL(path);\r\nassert.equal(\"object\", typeof(result));\r\n```\r\n\r\n\r\n parseReqUrl return an array with two keys\r\n\r\n```\r\nvar path = 'content/image.jpg';\r\nvar result = util.parseReqURL(path);\r\nassert.equal(2, result.length);\r\n```\r\n\r\n\r\n### assetAvaialble\r\n assetAvaialble should callback when asset is available\r\n\r\n```\r\nvar path = 'tests/test.png';\r\nutil.assetAvailable(path, function (err) {\r\n    if (err)\r\n        assert.equal(true, false);\r\n    assert.equal(true, true);\r\n});\r\n```\r\n\r\n\r\n assetAvaialble should callback with error when asset is unavailable\r\n\r\n```\r\nvar path = 'tests/test.jpg';\r\nutil.assetAvailable(path, function (err) {\r\n    if (err)\r\n        assert.equal(true, false);\r\n    assert.equal(true, true);\r\n});\r\n```\r\n","created":"2015-12-05T16:48:58.136Z","modified":"2015-12-06T12:48:28.427Z","lastPublisher":{"name":"geewizwow","email":"ifinnscott@gmail.com"},"owners":[{"name":"geewizwow","email":"ifinnscott@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"express-resize","_nodeVersion":"5.1.0","_npmUser":{"name":"geewizwow","email":"ifinnscott@gmail.com"},"_npmVersion":"3.3.12","_rev":"1-a9e00187cfb08432405f85f3c9473e48","_shasum":"3762e736076a554073f2aa8d8faa72bca6f5b311","author":{"name":"Finn Scott"},"bugs":{"url":"https://github.com/GeeWizWow/express-resize/issues"},"directories":{},"dist-tags":{"latest":"1.0.2"},"dist":{"shasum":"3762e736076a554073f2aa8d8faa72bca6f5b311","tarball":"http://registry.npmjs.org/express-resize/-/express-resize-1.0.2.tgz"},"maintainers":[{"name":"geewizwow","email":"ifinnscott@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-12-06T12:48:28.427Z","created":"2015-12-05T16:48:58.136Z","1.0.0":"2015-12-05T16:48:58.136Z","1.0.1":"2015-12-05T16:54:41.606Z","1.0.2":"2015-12-06T12:48:28.427Z"}}}