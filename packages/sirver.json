{"name":"sirver","version":"1.3.1","description":"A tiny, very polite, server for building simple async HTTP services.","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/danillouz/sirver","keywords":["async","http","server","http-server","http-services"],"license":"MIT","homepage":"https://github.com/danillouz/sirver#readme","dependencies":{"content-type":"^1.0.2","raw-body":"^2.2.0"},"engines":{"node":">=7.6"},"gitHead":"9d4755fa08dd24273a7ba207185fad1683796e3c","versions":[{"number":"1.0.0","date":"2017-02-25T23:39:02.276Z"},{"number":"1.1.0","date":"2017-02-26T16:44:18.336Z"},{"number":"1.1.1","date":"2017-02-26T16:52:26.649Z"},{"number":"1.2.0","date":"2017-02-26T18:46:21.651Z"},{"number":"1.2.1","date":"2017-02-26T18:50:52.583Z"},{"number":"1.3.0","date":"2017-02-26T19:22:27.022Z"},{"number":"1.3.1","date":"2017-02-26T19:28:25.136Z"}],"readme":"# Sir ðŸŽ© ver\nA tiny, very polite, server for building simple async HTTP services.\n\n# Install\n```\nnpm i -S sirver\n```\n\n# API\nThe following methods are exposed:\n\n| method | arguments | returns | description |\n| --- | --- | --- | --- |\n| [sir](#sirrequesthandler) | Yes | Object | Creates and returns an instance of the [http.Server](https://nodejs.org/api/http.html#http_class_http_server) Object. |\n| [bodyParser](#bodyparserrequest) | Yes | Promise | Parses and returns an incoming HTTP JSON request body as a JavaScript Object. |\n\n## sir(requestHandler)\nCreates and returns an instance of the [http.Server](https://nodejs.org/api/http.html#http_class_http_server) Object.\n\n### Arguments\n| argument | type | required | description |\n| --- | --- | --- | --- |\n| requestHandler | Function | Yes | This handler is invoked upon every incoming HTTP request and exposes the [http.incomingMessage](https://nodejs.org/api/http.html#http_class_http_incomingmessage) and [http.serverResponse](https://nodejs.org/api/http.html#http_class_http_serverresponse) Objects. The `requestHandler` supports `async-await`, see [this example](#async) for more information. |\n\n#### Response convenience methods\nThe `requestHandler` exposes a couple of convenience methods on the\n`http.serverResponse` Object:\n\n- `res.status(code:Number)`: `code` is a valid http status code.\n- `res.html(html:String)`: `html` is a valid HTML document representation.\n- `res.json(data:Object)`: `data` is a valid JavaScript Object, which can be parsed to JSON.\n\nSee the [examples](#examples) section for more information.\n\n### Returns\n[http.Server](https://nodejs.org/api/http.html#http_class_http_server)\n\n## bodyParser(request, limit)\nParses and returns an incoming HTTP JSON request body as a JavaScript Object.\n\n### Arguments\n| argument | type | required | description |\n| --- | --- | --- | --- |\n| request | Object | Yes | The [http.incomingMessage](https://nodejs.org/api/http.html#http_class_http_incomingmessage) Object, exposed by [requestHandler](#sirrequesthandler). See [this example](#parsing-request-body) for more information. |\n| limit | Number or String | No | The byte limit of the body. This is the number of bytes or any string format supported by [bytes](https://github.com/visionmedia/bytes.js), for example `1000`, `'500kb'` or `'3mb'`. If the body ends up being larger than this limit, a `413` error code is returned. **Defaults to 1 MB**. |\n\n_Note that the [raw-body](https://github.com/stream-utils/raw-body) module is used\nfor body parsing functionality._\n\n### Returns\n`Promise`\n\n# Examples\n\n## Basic\n```js\n'use strict';\n\nconst { sir } = require('sirver');\n\nconst server = sir((req, res) => {\n\tres.end('ok');\n});\n\nserver.listen(7777);\n```\n\n## JSON\n```js\n'use strict';\n\nconst { sir } = require('sirver');\n\nconst server = sir((req, res) => {\n\tres.json({ status: 'ok' });\n});\n\nserver.listen(7777);\n```\n\n## HTML\n```js\n'use strict';\n\nconst { sir } = require('sirver');\n\nconst server = sir((req, res) => {\n\tres.html(`\n\t\t<!DOCTYPE html>\n\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<title>HTML</title>\n\t\t\t</head>\n\n\t\t\t<body>\n\t\t\t\t<h1>Hello World!</h1>\n\t\t\t</body>\n\t\t</html>\n\t`);\n});\n\nserver.listen(7777);\n```\n\n## Async\n```js\n'use strict';\n\nconst { sir } = require('sirver');\n\nconst server = sir(async (req, res) => {\n\tconst _async = () => new Promise(\n\t\t(resolve, reject) => {\n\t\t\tsetTimeout(\n\t\t\t\t() => resolve({ status: 'async' }),\n\t\t\t\t2e3\n\t\t\t)\n\t\t}\n\t);\n\n\tconst data = await _async();\n\n\tres.json(data);\n});\n\nserver.listen(7777);\n```\n\n## Parsing request body\n```js\n'use strict';\n\nconst { sir, bodyParser } = require('sirver');\n\nconst server = sir(async (req, res) => {\n\tconst body = await bodyParser(req);\n\n\tconsole.log('request body: ', body);\n\n\tres.end();\n});\n\nserver.listen(7777);\n```\n\n## Custom response codes\n```js\n'use strict';\n\nconst { sir, bodyParser } = require('sirver');\n\nconst server = sir(async (req, res) => {\n\tconst { name } = await bodyParser(req);\n\n\tif (!name) {\n\t\treturn res\n\t\t\t.status(400)\n\t\t\t.json({ error: 'Name is required' });\n\t}\n\n\tres.json({ name });\n});\n\nserver.listen(7777);\n```\n\n## Route handling\n```js\n'use strict';\n\nconst url = require('url');\nconst { sir, bodyParser } = require('sirver');\n\nconst server = sir(async (req, res) => {\n\ttry {\n\t\tconst { method } = req;\n\t\tconst { pathname } = url.parse(req.url);\n\n\t\tif (method === 'GET' && pathname === '/') {\n\t\t\treturn res.json({\n\t\t\t\tstatus: 'ok for route \"/\"'\n\t\t\t});\n\t\t}\n\n\t\tif (method === 'POST' && pathname === '/run') {\n\t\t\treturn res.json({\n\t\t\t\tstatus: 'ok for route \"/run\"'\n\t\t\t});\n\t\t}\n\n\t\tres.status(404).json({\n\t\t\terror: 'The requested route doesn\\'t exist.'\n\t\t});\n\t} catch (err) {\n\t\tres.status(err.code || 500).json({\n\t\t\terror: err.toString()\n\t\t});\n\t}\n});\n\nserver.listen(7777);\n```\n\n# Engine\nNode `7.6` or greater is required due to use of `async-await`.\n\n# Todos\nThere's no proper error handling yet.\n\n# License\nMIT Copyright (c) 2017 DaniÃ«l Illouz\n","created":"2017-02-25T23:39:02.276Z","modified":"2017-02-26T19:28:25.136Z","lastPublisher":{"name":"danillouz","email":"daniel.illouz@me.com"},"owners":[{"name":"danillouz","email":"daniel.illouz@me.com"}],"other":{"_attachments":{},"_from":".","_id":"sirver","_nodeVersion":"7.6.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/sirver-1.3.1.tgz_1488137303280_0.6640958159696311"},"_npmUser":{"name":"danillouz","email":"daniel.illouz@me.com"},"_npmVersion":"4.1.2","_rev":"7-67708109eace10c26e7e77e973dc75c9","_shasum":"6477ca2365c4d12f0f445b9226bc2d684a563fa5","author":{"name":"DaniÃ«l Illouz","email":"daniel.illouz@me.com"},"bugs":{"url":"https://github.com/danillouz/sirver/issues"},"directories":{},"dist-tags":{"latest":"1.3.1"},"dist":{"shasum":"6477ca2365c4d12f0f445b9226bc2d684a563fa5","tarball":"https://registry.npmjs.org/sirver/-/sirver-1.3.1.tgz"},"maintainers":[{"name":"danillouz","email":"daniel.illouz@me.com"}],"readmeFilename":"README.md","time":{"modified":"2017-02-26T19:28:25.136Z","created":"2017-02-25T23:39:02.276Z","1.0.0":"2017-02-25T23:39:02.276Z","1.1.0":"2017-02-26T16:44:18.336Z","1.1.1":"2017-02-26T16:52:26.649Z","1.2.0":"2017-02-26T18:46:21.651Z","1.2.1":"2017-02-26T18:50:52.583Z","1.3.0":"2017-02-26T19:22:27.022Z","1.3.1":"2017-02-26T19:28:25.136Z"}}}