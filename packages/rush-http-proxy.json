{"name":"rush-http-proxy","version":"0.1.11","description":"Easy to setup, convenient, universal, parallel, http/https proxy daemon. Setup in 1 minute, run, configure, adapt. Based on excellent node-http-proxy.","main":"rush-http-proxy","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"","keywords":["http","https","proxy"],"bin":{"rush-http-proxy":"./rush-http-proxy"},"license":"BSD","dependencies":{"http-proxy":"~0.10.3","optimist":"~0.6.0","extend":"~1.2.0","jsonlint-lines":"~1.6.0","node-watch":"~0.3.4","async":"~0.2.9"},"versions":[{"number":"0.0.1","date":"2013-09-10T22:16:43.069Z"},{"number":"0.0.2","date":"2013-09-11T08:32:46.789Z"},{"number":"0.0.4","date":"2013-09-11T12:44:41.422Z"},{"number":"0.0.5","date":"2013-09-13T00:29:45.716Z"},{"number":"0.0.6","date":"2013-09-13T00:40:00.281Z"},{"number":"0.0.7","date":"2013-09-13T00:43:46.502Z"},{"number":"0.0.8","date":"2013-09-14T11:48:51.026Z"},{"number":"0.1.0","date":"2013-09-14T11:55:50.354Z"},{"number":"0.1.1","date":"2013-09-14T12:02:59.430Z"},{"number":"0.1.2","date":"2013-09-14T12:39:50.662Z"},{"number":"0.1.3","date":"2013-09-14T14:12:35.423Z"},{"number":"0.1.4","date":"2013-09-14T14:28:51.674Z"},{"number":"0.1.5","date":"2013-09-14T14:55:22.625Z"},{"number":"0.1.6","date":"2013-09-14T15:23:57.771Z"},{"number":"0.1.7","date":"2013-09-14T16:38:11.864Z"},{"number":"0.1.8","date":"2013-09-19T12:34:01.382Z"},{"number":"0.1.9","date":"2013-09-21T01:53:27.264Z"},{"number":"0.1.10","date":"2013-09-21T21:24:33.044Z"},{"number":"0.1.11","date":"2013-09-21T21:28:43.633Z"}],"readme":"rush-http-proxy\n===============\n\nrush-http-proxy is based on node-http-proxy, the extra features are:\n* Run multiple host/port configurations on a single instance.\n* Run worker instances to parallelize workload. Number of workers defaults to CPU number\n* Support reading SSL SNI configurations from file and CRT bundle files. This means handling multiple SSL certificates on the same domain.\n* Watch for config changes and reloads the proxy logic without any downtime.\n* Simple redirect. Redirect http to https or any simple direct directs. No regexp yet.\n* Asynchronous logging module. Logs either to stdout or to file.\n* Link to custom config preprocessor so that you may devise your own config file format.\n* Drop privileges to user/group once started.\n\nFuture plans:\n* Improve logging to format string to apache format.\n* Logging per route.\n* Regexps in redirect.\n\nUsage\n===============\n\n`rush-http-proxy --config config.json`\n\nExample config:\n\n```\n{\n  \"ports\": {\n    \"80\": {\n        \"router\": {\n            \"code2flow.*\": \"127.0.0.1:8099\",\n            \".*\": \"127.0.0.1:8080\"\n        }\n    },\n    \"443\": {\n        \"router\": {\n            \"code2flow.*\": \"127.0.0.1:9991\",\n            \"service.myapp.com/downloads/.*\": \"127.0.0.1:10443\",\n            \"service.myapp.com/uploads/.*\": \"127.0.0.1:15000\",\n            \".*\": \"127.0.0.1:4443\"\n        },\n        \"https\": {\n            \"SNI\": {\n                \".*service.myapp.com\": {\n                    \"key\": \"/etc/keys/myapp_com.key\",\n                    \"cert\": \"/etc/keys/myapp_com.pem\",\n                    \"ca\": [\n                        \"/etc/keys/ca.pem\",\n                        \"/etc/keys/sub.class1.server.ca.pem\"\n                    ]\n                }\n            },\n            \"key\": \"/etc/keys/star_code2flow_com.key\",\n            \"cert\": \"/etc/keys/star_code2flow_com.pem\",\n            \"ca\": \"/etc/keys/certum.crt\"\n        }\n    }\n  }\n}\n```\n\nEach entry in the `ports` is the format that would be normally fed to `node-http-proxy`.\nConsult https://github.com/nodejitsu/node-http-proxy\n\nWatch config for changes\n===============\nAdd `--watch` or add to config `\"watchConfig\": true`.\n\nYou may also trigger reload manually by sending USR1 signal to the master process. (only on *nix)\n\nUse config preprocessor\n===============\n`rush-http-proxy --config myconfig.conf --preprocessor ./myconfig.js`\nThe above will feed `myconfig.conf` to a module loaded by `require(\"./myconfig.js\")`. Feeding will also happen in the event of config reload due to changes or USR1 signal.\n\nThe module needs to define a function such as below that would return the configuration object.\n```\n  module.exports = function(argv, data) { \n    return JSON.parse(data); // this does the same as default loading\n  }\n```\n\nRedirect\n===============\nPut a configuration object under \"redirect\" in a specific port configuration. You may mix redirects and router options.\nFor documentation purpose, comments will be put to the JSON.\n```\n{\n  \"ports\": {\n      \"80\": {\n        \"redirect\": {\n          \"test.pl/test\" : \"anothersite.pl\" // redirect only when path /test matches\n          \"test2.pl/\" : \"anothersite.pl\" // redirect only from main site\n          \"test3.pl\" : \"anothersite.pl/[path]\" // redirect from all test3.pl paths and translate path to new host\n          \"test4.pl\" : \"https//test4.secure.pl/[path]\" // redirect from test4.pl to https site\n        },\n        \"router\": {\n          ...\n        }\n      }\n  }\n```\n\nLogging\n===============\nSample logging entry:\n```\n{\"timestamp\":1379159076291,\"method\":\"GET\",\"httpVersion\":\"1.0\",\"headers\":{\"host\":\"test.pl:8081\",\"user-agent\":\"ApacheBench/2.3\",\"accept\":\"*/*\",\"x-forwarded-for\":\"127.0.0.1\",\"x-forwarded-port\":33439,\"x-forwarded-proto\":\"http\"},\"url\":\"/de629fb8-ff7f-4920-ab29-6a0f2f4176bf\",\"statusCode\":200,\"responseTime\":23}\n```\nContains:\n* timestamp - time when request started\n* method - HTTP method\n* httpVersion - protocol version\n* url - URL from the request\n* headers - all HTTP headers\n* statusCode - code that application sent\n* responseTime - time taken to finish the response\n\nLog to stdout:\n```\n{\n  \"logging\": true,\n  \"ports\": {\n    ...\n  }\n}\n```\n\nLog to file:\n```\n{\n  \"logging\": {\n    \"logFile\": \"/var/log/rush-http-proxy.log\"\n  },\n  \"ports\": {\n    ...\n  }\n}\n```\n\nsystemd unit file\n=================\nWe provide an example systemd unit file for the proxy. The config file is set to /etc/http-proxy/config.json by default. Copy the `http-proxy.service` to /etc/systemd/system to use it.\n\n* `systemctl start/stop/restart http-proxy`\n* `systemctl enable http-proxy` - auto-start the proxy\n* `systemctl reload http-proxy` - reload config with `kill -USR1`\n\n","starsCount":1,"created":"2013-09-10T22:16:38.793Z","modified":"2016-04-04T16:52:34.027Z","lastPublisher":{"name":"RushPL","email":"rush@rushbase.net"},"owners":[{"name":"rush","email":"rush@rushbase.net"}],"other":{"_attachments":{},"_from":".","_id":"rush-http-proxy","_npmUser":{"name":"RushPL","email":"rush@rushbase.net"},"_npmVersion":"1.2.18","_rev":"1-e6eb1109f037d274018d123eee3bc3e9","author":{"name":"Damian Kaczmarek","email":"rushpl@gmail.com"},"directories":{},"dist-tags":{"latest":"0.1.11"},"dist":{"shasum":"cbfbc14e4e5e2759195923105f326ca8561925c6","tarball":"http://registry.npmjs.org/rush-http-proxy/-/rush-http-proxy-0.1.11.tgz"},"maintainers":[{"name":"rush","email":"rush@rushbase.net"}],"readmeFilename":"README.md","time":{"modified":"2016-04-04T16:52:34.027Z","created":"2013-09-10T22:16:38.793Z","0.0.1":"2013-09-10T22:16:43.069Z","0.0.2":"2013-09-11T08:32:46.789Z","0.0.4":"2013-09-11T12:44:41.422Z","0.0.5":"2013-09-13T00:29:45.716Z","0.0.6":"2013-09-13T00:40:00.281Z","0.0.7":"2013-09-13T00:43:46.502Z","0.0.8":"2013-09-14T11:48:51.026Z","0.1.0":"2013-09-14T11:55:50.354Z","0.1.1":"2013-09-14T12:02:59.430Z","0.1.2":"2013-09-14T12:39:50.662Z","0.1.3":"2013-09-14T14:12:35.423Z","0.1.4":"2013-09-14T14:28:51.674Z","0.1.5":"2013-09-14T14:55:22.625Z","0.1.6":"2013-09-14T15:23:57.771Z","0.1.7":"2013-09-14T16:38:11.864Z","0.1.8":"2013-09-19T12:34:01.382Z","0.1.9":"2013-09-21T01:53:27.264Z","0.1.10":"2013-09-21T21:24:33.044Z","0.1.11":"2013-09-21T21:28:43.633Z"},"users":{"bitsonic":true}}}