{"name":"seraph-resource","version":"0.3.4","description":"expose crud functions for a seraph model over http","main":"lib/resource.js","scripts":{"test":"./node_modules/mocha/bin/mocha -s 5000 -t 10000 -R spec"},"repository":"https://github.com/brikteknologier/seraph-resource","license":"BSD","dependencies":{"async":"~0.2.6","controller":"^0.6.0","naan":"~1.3.10","underscore":"~1.3.3"},"devDependencies":{"async":"*","disposable-seraph":"^0.3.2","express":"*","mocha":"*","seraph-model":"~0.6.12","supertest":"*"},"homepage":"https://github.com/brikteknologier/seraph-resource","versions":[{"number":"0.1.1","date":"2012-08-06T08:54:43.249Z"},{"number":"0.1.2","date":"2012-08-16T12:01:39.773Z"},{"number":"0.1.3","date":"2012-08-20T09:52:39.738Z"},{"number":"0.1.4","date":"2012-08-20T10:39:49.660Z"},{"number":"0.2.0","date":"2013-03-04T18:02:32.813Z"},{"number":"0.2.1","date":"2013-04-16T12:26:19.961Z"},{"number":"0.2.2","date":"2013-04-22T12:37:01.520Z"},{"number":"0.2.3","date":"2013-04-24T11:58:29.906Z"},{"number":"0.2.4","date":"2013-06-28T11:14:01.488Z"},{"number":"0.2.5","date":"2013-07-15T14:48:15.909Z"},{"number":"0.2.6","date":"2013-08-19T10:08:21.413Z"},{"number":"0.2.7","date":"2013-08-19T10:36:49.086Z"},{"number":"0.2.8","date":"2013-08-19T13:19:15.778Z"},{"number":"0.2.9","date":"2013-09-05T13:53:55.852Z"},{"number":"0.2.10","date":"2013-09-29T21:48:20.877Z"},{"number":"0.2.11","date":"2013-09-29T21:57:07.678Z"},{"number":"0.2.12","date":"2014-01-09T09:40:06.329Z"},{"number":"0.2.13","date":"2014-03-03T14:01:49.667Z"},{"number":"0.2.14","date":"2014-03-24T16:16:30.270Z"},{"number":"0.3.0","date":"2014-05-14T09:37:57.333Z"},{"number":"0.3.1","date":"2014-05-20T14:47:59.598Z"},{"number":"0.3.2","date":"2014-05-21T13:23:12.906Z"},{"number":"0.3.3","date":"2014-08-01T12:03:35.637Z"},{"number":"0.3.4","date":"2014-11-10T13:31:30.422Z"}],"readme":"seraph-resource\n====================\n\ncreates a [controller](http://github.com/brikteknologier/controller) with crud\nmethods for a [seraph](http://github.com/brikteknologier/seraph)\n[model](http://github.com/brikteknologier/seraph-model).\n\n# why?\n\n[seraph](http://github.com/brikteknologier/seraph) gives us access to a neo4j \ndb. [seraph-model](http://github.com/brikteknologier/seraph-model) gives us\nmodels for this db. __seraph-resource__ gives us a base controller for these\nmodels. \n\n# install\n\n`npm install seraph-resource`\n\n# example\n\n## setup\n\n```javascript\nvar db = require('seraph')('http://localhost:7474');\nvar User = require('seraph-model')(db, 'user');\nvar resource = require('seraph-resource');\n\nvar express = require('express');\nvar app = express();\nvar Users = resource(User);\n\napp.use(Users);\napp.listen(3000);\n```\n\n## in action\n\n__Create a new node__\n```\n>> curl -d '{\"name\":\"Jon\",\"age\":23}' http://localhost:3000/user/ -H \"Content-type: application/json\"\n{\"name\":\"Jon\",\"age\":23,\"id\":8}\n```\n\n__Read an existing node__\n```\n>> curl http://localhost:3000/user/8\n{\"name\":\"Jon\",\"age\":23,\"id\":8}\n```\n\n__Update a node__\n```\n>> curl -X PUT -d '{\"name\":\"Jon Packer\",\"age\":23}' http://localhost:3000/user/8 -H \"Content-type: application/json\"\n{\"name\":\"Jon Packer\",\"age\":23,\"id\":\"8\"}\n```\n\n__Delete a node__\n```\n>> curl -X DELETE http://localhost:3000/user/8\nOK\n```\n\n__And more!__\n\n# usage\n## resource(seraphModel, [options])\n\nCreates a [controller](http://github.com/brikteknologier/controller) with CRUD \nactions implemented and routed for the given seraph model. \n\n**options**\n\n* `relRoutes`: (defaults to false) - add routes that expose the ability to\n  create, read and update relationships to and from the model. This is turned off\n  by default because there is no easy way to consistently control access to the\n  nodes being modified, and because it can create some security loopholes. If \n  this is not a concern for your usecase, you can turn it on. The routes that are\n  added are listed in the 'default actions' section below as 'rel:read', \n  'rel:nodes', and 'rel:create'.\n* `strictContentType`: (defaults to true) - only accept `application/json`\n  content types. If set to false, more abstract content types such as formdata\n  will be parsed by [connect-bodyParser](http://www.senchalabs.org/connect/middleware-bodyParser.html) as well.\n\n### Default actions\n\n* `'read'` read a node and send as json (required params: `:<model.type>`)\n* `'create'` create a new node\n* `'update'` update a node (required params: `:_id?`)\n* `'update-root'` update the root of a model (exclude compositions). required\n  params: `:_id?`.\n* `'delete'` delete a node (required params: `:_id?`)\n\n#### Only available if `relRoutes` option is specified\n\n* `'rel:read'` read the node's relationships (required params: \n  `:_id`, `:_type`, `:_direction`)\n* `'rel:nodes'` read the node's related nodes (required params:\n  `:_id`, `:_type`, `:_direction`)\n* `'rel:create'` create a relationship (required params: `:_from`, `:_type`,\n  `:_to`\n\nIn addition, if the model has `fields` defined, CRUD actions are provided for\neach field. For example, if model.fields includes `'name'`, these actions are\ndefined: `'read:name'`, `'create:name'`, `'update:name'`, and `'delete:name'`.\nThese all take a `:<model.type>` param.\n\n\\*\\**note - params are prefixed with an underscore to prevent conflict with\nmodel types*\n\n## default routes\n\nIf `model.type` is set `'model'`:\n\n```\nGET    /model/:model                        -> 'read'\nPOST   /model/                              -> 'create'\nPUT    /model/:_id?                         -> 'update'\nPUT    /model/root/:_id?                    -> 'update-root'\nDELETE /model/:_id?                         -> 'delete'\n\nthese are only available if the \"relRoutes\" option is specified\n\nGET    /model/:_id/rel/:_type/:_direction?  -> 'rel:read'\nGET    /model/:_id/rel/:_type/:_direction?/nodes -> 'rel:nodes'\nPOST   /model/:_from/rel/:_type/:_to        -> 'rel:create'\n\nadditionally, if fields are defined (replace 'field' with the target field below)\n\nGET    /model/:_id/field -> 'read:field'\nPOST   /model/:_id/field -> 'create:field'\nPUT    /model/:_id/field -> 'update:field'\nDELETE /model/:_id/field -> 'delete:field'\n\nfor compositions: (replace 'comp' with the target comp name below)\n\nGET   /model/:model/comp -> 'read:comp' (model.readComposition)\nPOST  /model/:_id/comp -> 'push:comp' (model.push)\nPUT   /model/:_id/comp -> 'update:comp' (model.saveComposition)\n\n```\n\n\\*\\**note - params are prefixed with an underscore to prevent conflict with\nmodel types*\n\n## middleware groups\n\nResource groups each of the actions into middleware groups to make it easier\nfor you to apply targeted middleware for actions. For more information on how\nthe groups work, see the [docs in controller](https://github.com/brikteknologier/controller#groups).\n\n* `'relationships'` actions that will work with relationships (note that there\n  will be nothing in this group unless relationship routes are turned on)\n* `'properties'` actions that will work with individual properties\n* `'compositions'` actions the work with composited nodes\n\n## express param\n\nEach resource has a `param` property which can be used to resolve instances of\nthis model when specified in express routes. For example:\n\n__example__\n```javascript\nvar User = model(db, 'user');\napp.param(':user', User.param);\napp.get('/posts/:user', function(req, res) {\n  // Because :user was defined on the route, `req.user` is now set to the user\n  // specified by the id passed at that point. \n  Posts.where({user: req.user.id}, function(err, posts) {\n    res.json(posts);\n  });\n});\n```\n\n## complete demonstration\n\n### Server\n\n```javascript\nvar db = require('seraph')('http://localhost:7474');\nvar User = require('seraph-model')(db, 'user');\nvar resource = require('seraph-resource');\n\nvar express = require('express');\nvar app = express();\n\nUser.fields = ['name', 'age', 'country'];\nvar Users = resource(User);\n\napp.use(Users);\napp.listen(3000);\n```\n\n\n__Create a new node__\n```\n>> curl -d '{\"name\":\"Jon\",\"age\":23}' http://localhost:3000/user/ -H \"Content-type: application/json\"\n{\"name\":\"Jon\",\"age\":23,\"id\":8}\n```\n\n__Read an existing node__\n```\n>> curl http://localhost:3000/user/8\n{\"name\":\"Jon\",\"age\":23,\"id\":8}\n```\n\n__Update a node__\n```\n>> curl -X PUT -d '{\"name\":\"Jon Packer\",\"age\":23}' http://localhost:3000/user/8 -H \"Content-type: application/json\"\n{\"name\":\"Jon Packer\",\"age\":23,\"id\":\"8\"}\n```\n\n__Delete a node__\n```\n>> curl -X DELETE http://localhost:3000/user/8\nOK\n```\n\n__Create a relationship__\n```\n>> curl -d '{\"since\":\"2005\"}' http://localhost:3000/user/8/rel/friend/6 -H \"Content-type: application/json\"\n{\"from\":8,\"to\":6,\"id\":0,\"type\":\"friend\",\"properties\":{\"since\":\"2005\"}}\n```\n\n__Read a relationship__\n```\n>> curl http://localhost:3000/user/8/rel/friend/out\n[{\"from\":8,\"to\":6,\"id\":0,\"type\":\"friend\",\"properties\":{\"since\":\"2005\"}}]\n```\n\n__Create a property__\n```\n>> curl -d '\"Australia\"' http://localhost:3000/user/8/country -H \"Content-type: application/json\"\n{\"name\":\"Jon\",\"age\":23,\"id\":8,\"country\":\"Australia\"}\n```\n\n__Read an existing property__\n```\n>> curl http://localhost:3000/user/8/country\n\"Australia\"\n```\n\n__Update a node__\n```\n>> curl -X PUT -d '\"Norway\"' http://localhost:3000/user/8/country -H \"Content-type: application/json\"\n{\"name\":\"Jon Packer\",\"age\":23,\"id\":\"8\",\"country\":\"Norway\"}\n```\n\n__Delete a node__\n```\n>> curl -X DELETE http://localhost:3000/user/8/country\n{\"name\":\"Jon Packer\",\"age\":23,\"id\":\"8\"}\n```\n","created":"2012-08-06T08:54:41.512Z","modified":"2014-11-10T13:31:30.422Z","lastPublisher":{"name":"jonpacker","email":"contact@jonpacker.com"},"owners":[{"name":"jonpacker","email":"contact@jonpacker.com"}],"other":{"_attachments":{},"_from":".","_id":"seraph-resource","_npmUser":{"name":"jonpacker","email":"contact@jonpacker.com"},"_npmVersion":"1.4.6","_rev":"1-43d4fac89384a223846bb47a0569c6f0","bugs":{"url":"https://github.com/brikteknologier/seraph-resource/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"0.3.4"},"dist":{"shasum":"f917e14f67bcb4fe7357267e8e8df9c01195a41b","tarball":"http://registry.npmjs.org/seraph-resource/-/seraph-resource-0.3.4.tgz"},"maintainers":[{"name":"jonpacker","email":"contact@jonpacker.com"}],"readmeFilename":"README.md","time":{"modified":"2014-11-10T13:31:30.422Z","created":"2012-08-06T08:54:41.512Z","0.1.1":"2012-08-06T08:54:43.249Z","0.1.2":"2012-08-16T12:01:39.773Z","0.1.3":"2012-08-20T09:52:39.738Z","0.1.4":"2012-08-20T10:39:49.660Z","0.2.0":"2013-03-04T18:02:32.813Z","0.2.1":"2013-04-16T12:26:19.961Z","0.2.2":"2013-04-22T12:37:01.520Z","0.2.3":"2013-04-24T11:58:29.906Z","0.2.4":"2013-06-28T11:14:01.488Z","0.2.5":"2013-07-15T14:48:15.909Z","0.2.6":"2013-08-19T10:08:21.413Z","0.2.7":"2013-08-19T10:36:49.086Z","0.2.8":"2013-08-19T13:19:15.778Z","0.2.9":"2013-09-05T13:53:55.852Z","0.2.10":"2013-09-29T21:48:20.877Z","0.2.11":"2013-09-29T21:57:07.678Z","0.2.12":"2014-01-09T09:40:06.329Z","0.2.13":"2014-03-03T14:01:49.667Z","0.2.14":"2014-03-24T16:16:30.270Z","0.3.0":"2014-05-14T09:37:57.333Z","0.3.1":"2014-05-20T14:47:59.598Z","0.3.2":"2014-05-21T13:23:12.906Z","0.3.3":"2014-08-01T12:03:35.637Z","0.3.4":"2014-11-10T13:31:30.422Z"}}}