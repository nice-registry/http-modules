{"name":"bid","version":"1.0.0","description":"A simple, chainable way to construct HTTP requests in Node or the browser","main":"index.js","scripts":{"test":"npm run lint && npm run build && npm run test-server && npm run test-browser","test-server":"echo '\nTesting Server:\n' && mocha test/server/**/*.js --reporter spec","test-browser":"echo '\nTesting Angular:\n\n' && ./node_modules/karma/bin/karma start karma.conf.js","lint":"jshint index.js lib/","build":"npm run bundle-standalone && npm run bundle-angular","bundle-standalone":"build/standalone.js","bundle-angular":"build/angular.js"},"repository":"https://github.com/divshot/bid","keywords":["request","xhr","ajax","browserify","http"],"license":"MIT","homepage":"https://github.com/divshot/bid","devDependencies":{"browserify":"^6.0.3","chai":"^1.9.2","jshint":"^2.5.6","karma":"^0.12.24","karma-expect":"^1.1.0","karma-mocha":"^0.1.9","karma-phantomjs-launcher":"^0.1.4","minify":"^1.0.3","mkdirp":"^0.5.0","mocha":"^1.21.4","mocksy":"^0.1.7","ngmin":"^0.5.0","testling":"^1.7.1"},"dependencies":{"httpify":"^1.0.0","as-array":"^1.0.0","slasher":"^0.1.5","promise":"^6.0.0","mix-into":"^0.4.0","deap":"^1.0.0"},"gitHead":"f991320c5d0fd3718f254718e6e004d846802a50","deprecated":"Use ask module instead","versions":[{"number":"0.1.0","date":"2014-10-08T17:50:42.331Z"},{"number":"1.0.0","date":"2014-10-08T22:12:54.194Z"}],"readme":"# bid\n\nA simple, chainable way to construct HTTP requests in Node or the browser (Angular or Standalone);\n\n**Usage Environments:**\n\n* [Node]()\n* [Angular]()\n* [Browser Standalone]()\n\n## Install\n\nBower\n\n```\nbower install bid --save\n```\n\nNPM\n\n```\nnpm install bid --save\n```\n\n## Usage\n\n### Include in App\n\nStandalone\n\n```html\n<script src=\"/bower_components/bid/dist/bid.js\"></script>\n```\n\nAngular\n\n```html\n<script src=\"/bower_components/bid/dist/bid.angular.js\"></script>\n```\n\n```js\nvar myApp = angular.module('myApp', ['bid']);\n\nmyApp.config(function (bidProvider) {\n  \n  /* This is optional */\n  \n  bidProvider.configure({\n    origin: 'http://api.example.com',\n    headers: {/* optional default headers */},\n    xhrOptions: {/* optional xhr options */}\n  });\n});\n\nmyApp.controller('SomeController', function (bid /* instance of Bid */) {\n  \n});\n\nmyApp.controller('AnotherController', function (Bid /* ready to instantiate */) {\n  \n})\n```\n\nNodejs/Browserify\n\n```js\nvar bid = require('bid');\n```\n\n### How to Build Requests\n\nSimple `GET` request\n\n```js\nvar request = bid({\n  origin: '', /* default origin */\n  headers: {/* set default headers */},\n  xhrOptions: {/* default xhr options */\n});\n\n// Settings for all endpoints\nrequest\n  .origin('http://api.example.com')\n  .header('Authorzation', 'Bearer 1234')\n  .xhrOption('withCredentials', true);\n\n// Create an endpoint and customize with endpoint-specific settings\n// Returns a function to execute later\nvar getUserFriends = request\n  .get('users', 123, 'friends')\n  .query('page', 1)\n  .query('limit', 10);\n\n// Request to '/users/123/friends'\ngetUserFriends().then(function (res) {\n  var users = res.body;\n}, function (err) {\n  // err.body\n});\n```\n\nSimple `POST` request\n\n```js\nvar request = bid();\n\nrequest.origin('http://api.example.com');\n\nvar createUser = request.post('users');\n\n// Send body data with request\ncreateUser({\n  name: 'example',\n  email: 'something@aol.com'\n}).then(function (res) {\n\t// Success!\n});\n\n```\n\n## API\n\n(Coming soon)\n\n## Mocking HTTP Requests\n\nA useful feature with Bid is the ability to intercept http/xhr requests and provide custom response attributes, such as statusCode, headers, etc. This is is very helpful when testing code that uses the Bid module.\n\nBefore building a request:\n\n```js\nvar bid = require('bid');\nvar request = bid();\n\nrequest\n  .when('GET', '/some/path')\n  .respond('custom response')\n  .status(201)\n  .header('content-type', 'text/html');\n\nvar somePath = request.get('some', 'path');\n\nsomePath().then(function (res) {\n\t\n});\n```\n\n### Mocking API\n\n#### when(method, path)\n\nSet up the http mocking interceptor. Returns an object mocking helper methods\n\n* `method` - GET, POST, PUT, DELETE, etc.\n* `path` - the relative path to intercept\n\n#### respond(body)\n\nSet the response body text for the mocked request\n\n* `body` - the data to set the response to\n\n#### status(code)\n\nSet the status code of the mocked response. Any code that is greater than or equal to 400 will cause the request promise to be rejected.\n\n* `code` - a number, 200, 201, etc., that sets the statusCode of the response\n\n#### header(name, value)\n\nSet individual headers for the response. If no value is provided, the current header value is returned.\n\n* `name` - the name of the header (case-insensitive)\n* `value` - the value of the header\n\n## Build\n\nBuilds standalone and Angular version of the module\n\n```\nnpm install\nnpm run build\n```\n\n## Run Tests\n\n```\nnpm install\nnpm test\n```","created":"2014-10-08T17:50:42.331Z","modified":"2014-11-06T19:47:58.201Z","lastPublisher":{"name":"scottcorgan","email":"scottcorgan@gmail.com"},"owners":[{"name":"scottcorgan","email":"scottcorgan@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"bid","_npmUser":{"name":"scottcorgan","email":"scottcorgan@gmail.com"},"_npmVersion":"1.4.23","_rev":"1-3284dd19477f92b36fbb469110e99623","_shasum":"548232b35d17bc4fda1a6389a55a1fd1007443f5","author":{"name":"Divshot"},"bugs":{"url":"https://github.com/divshot/bid/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"548232b35d17bc4fda1a6389a55a1fd1007443f5","tarball":"http://registry.npmjs.org/bid/-/bid-1.0.0.tgz"},"maintainers":[{"name":"scottcorgan","email":"scottcorgan@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-11-06T19:47:58.201Z","created":"2014-10-08T17:50:42.331Z","0.1.0":"2014-10-08T17:50:42.331Z","1.0.0":"2014-10-08T22:12:54.194Z"}}}