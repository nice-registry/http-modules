{"name":"blackbird-server","version":"0.1.0","description":"HTTP for JavaScript","main":"src","scripts":{"lint":"eslint .","test":"mocha spec/**/*.js","integration":"mocha integration/**/*.js","coverage":"istanbul cover node_modules/mocha/bin/_mocha 'spec/**/*.spec.js'","build":"./build.sh"},"dependencies":{"bluebird":"^3.4.1","bodec":"^1.1.0","bufferedstream":"^3.1.1","daggy":"0.0.1","describe-property":"^1.0.0","fantasy-eithers":"0.0.2","fantasy-options":"0.0.1","object-assign":"^2.0.0","parsimmon":"^0.8.1","qs":"^2.3.3","ramda":"*","strftime":"^0.9.0","urijs":"^1.18.1","redis":"~0.11.0"},"optionalDependencies":{"redis":"~0.11.0"},"devDependencies":{"base-64":"^0.1.0","chai":"^3.5.0","eslint":"^3.0.0","expect":"^1.3.0","istanbul":"^0.4.4","jsverify":"^0.7.1","mocha":"^2.0.1","np":"^2.6.0","request-promise":"^3.0.0"},"repository":"https://github.com/theqabalist/blackbird","keywords":["web","server","http","strata","jsgi","then","promise","promises"],"engines":{"node":"6.2.0"},"license":"MIT","gitHead":"b2a499385090c5a852a74cb33f3163d3768f0349","homepage":"https://github.com/theqabalist/blackbird#readme","versions":[{"number":"0.0.1","date":"2016-07-10T19:50:53.513Z"},{"number":"0.0.2","date":"2016-07-10T19:56:39.486Z"},{"number":"0.0.3","date":"2016-07-10T20:00:34.278Z"},{"number":"0.0.4","date":"2016-07-13T02:28:39.229Z"},{"number":"0.0.5","date":"2016-07-13T02:57:59.664Z"},{"number":"0.1.0","date":"2016-07-28T20:26:36.664Z"}],"readme":"Master Branch: [![CircleCI](https://circleci.com/gh/theqabalist/blackbird.svg?style=svg&circle-token=d32d4715e49ec8dcda656acfe86280b446a57af3)](https://circleci.com/gh/theqabalist/blackbird)\n\n[Blackbird](https://github.com/theqabalist/blackbird) is an HTTP server that runs on Node (ES6+). It has the following goals:\n\n  * Simplicity: straightforward mapping of HTTP requests to JavaScript function calls\n  * Asynchronous: responses can be deferred using Promises/A+ promises\n  * Streaming: request and response bodies can be streamed\n  * Composability: middleware composes easily using promises\n  * Robustness: promises propagate errors up the call stack, simplifying error handling\n\n### Servers\n\nWriting a \"Hello world\" HTTP server in BB is simple.\n\n```js\nlet BB = require('blackbird-server');\n\nBB.serve(function (conn) {\n  return \"Hello world!\";\n});\n```\n\nAll Blackbird applications receive a single argument: a [Connection](https://github.com/theqabalist/blackbird/blob/master/modules/Connection.js) object. This object contains information about both the request and the response, as well as metadata including the `method` used in the request, the [location](https://github.com/theqabalist/blackbird/blob/master/modules/Location.js) of the request, the `status` of the response, and some helper methods.\n\nApplications can send responses asynchronously using JavaScript promises. Simply return a promise from your app that resolves when the response is ready.\n\n```js\nlet app = BB.stack();\n\napp.use(BB.logger);\n\napp.get('/users/:id', function (conn) {\n  let id = conn.params.id;\n\n  return getUser(id).then(function (user) {\n    conn.json(200, user);\n  });\n});\n```\n\nThe call to `app.use` above illustrates how middleware is used to compose applications. BB ships with the following middleware:\n\n- [`BB.basicAuth`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/basicAuth.js): Provides authentication using [HTTP Basic auth](http://en.wikipedia.org/wiki/Basic_access_authentication)\n- [`BB.catch`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/catch.js): Error handling at any position in the stack\n- [`BB.charset`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/charset.js): Provides a default [charset](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17) in responses\n- [`BB.contentType`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/contentType.js): Provides a default [`Content-Type`](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17)\n- [`BB.favicon`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/favicon.js): Handles requests for `/favicon.ico`\n- [`BB.file`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/file.js): Efficiently serves static files\n- [`BB.gzip`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/gzip.js): [Gzip](http://en.wikipedia.org/wiki/Gzip)-encodes response content for clients that `Accept: gzip`\n- [`BB.logger`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/logger.js): Logs HTTP requests to the console\n- [`BB.mapper`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/mapper.js): Provides virtual host mapping, similar to [Apache's Virtual Hosts](http://httpd.apache.org/docs/2.2/vhosts/) or [nginx server blocks](http://nginx.org/en/docs/http/ngx_http_core_module.html#server)\n- [`BB.methodOverride`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/methodOverride.js): Overrides the HTTP method used in the request, for clients (like HTML forms) that don't support methods other than `GET` and `POST`\n- [`BB.modified`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/modified.js): HTTP caching using [`Last-Modified`](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.29) and [`ETag`](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19)\n- [`BB.params`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/params.js): Multipart request parsing and handling\n- [`BB.proxy`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/proxy.js): Proxy request through to an alternate location\n- [`BB.rewrite`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/rewrite.js): Rewrites request URLs on the fly, similar to [Apache's mod_rewrite](http://httpd.apache.org/docs/current/mod/mod_rewrite.html)\n- [`BB.router`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/router.js): Request routing (ala [Sinatra](http://www.sinatrarb.com/)) based on the URL pathname\n- [`BB.session`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/session.js): HTTP sessions with pluggable storage including [memory](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/session/MemoryStore.js) (for development and testing), [cookies](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/session/CookieStore.js), and [Redis](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/session/RedisStore.js)\n- [`BB.stack`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/stack.js): Provides a `use` mechanism for composing applications fronted by middleware\n- [`BB.token`](https://github.com/theqabalist/blackbird/blob/master/modules/middleware/token.js): Cross-site request forgery protection\n\n### Proxies\n\nBecause all BB applications share the same signature, it's easy to combine them in interesting ways. BB's HTTP proxy implementation illustrates this beautifully: a proxy is simply an application that forwards the request somewhere else.\n\n```js\nlet proxyApp = BB.createProxy('http://twitter.com');\n\n// In a server environment we can use the BB.proxy middleware\n// to proxy all requests to the proxy's location.\napp.use(BB.proxy, proxyApp);\n\n// In a client application we can call the proxy directly to\n// send a request to the proxy's location.\nBB.post(proxyApp, {\n  params: {\n    username: 'bkeown'\n  }\n});\n```\n\n### Installation\n\nUsing [npm](https://www.npmjs.org/):\n\n    $ npm install blackbird\n\n### Issues\n\nPlease file issues on the [issue tracker on GitHub](https://github.com/theqabalist/blackbird/issues).\n\n### Tests\n\nTo run the tests in node:\n\n    $ npm install\n    $ npm test\n\nThe Redis session store tests rely on Redis to run successfully. By default they are skipped, but if you want to run them fire up a Redis server on the default host and port and set the `$WITH_REDIS` environment variable.\n\n    $ WITH_REDIS=1 npm test\n\nTo run the tests in Chrome:\n\n    $ npm install\n    $ npm run test-browser\n\n### Influences\n\n  * [Strata](http://stratajs.org/)\n  * [Q-HTTP](https://github.com/kriskowal/q-http)\n  * [JSGI & Jack](http://jackjs.org/)\n  * [node.js](http://nodejs.org/)\n  * [Mach](http:/github.com/mjackson/mach)\n\n### License\n\n[MIT](http://opensource.org/licenses/MIT)\n","created":"2016-07-10T19:50:53.513Z","modified":"2016-11-06T16:27:46.324Z","lastPublisher":{"name":"theqabalist","email":"me@brandonkeown.com"},"owners":[{"name":"arzig","email":"zeiglerr@gmail.com"},{"name":"theqabalist","email":"me@brandonkeown.com"}],"other":{"_attachments":{},"_from":".","_id":"blackbird-server","_nodeVersion":"6.3.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/blackbird-server-0.1.0.tgz_1469737594397_0.532240831060335"},"_npmUser":{"name":"theqabalist","email":"me@brandonkeown.com"},"_npmVersion":"3.10.3","_rev":"2-325a57d1e49eff55550286bd36fb3dca","_shasum":"035dda5b3ecf61bcacfd09223da7aaf929397768","author":{"name":"Brandon Keown"},"bugs":{"url":"https://github.com/theqabalist/blackbird/issues"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"035dda5b3ecf61bcacfd09223da7aaf929397768","tarball":"http://registry.npmjs.org/blackbird-server/-/blackbird-server-0.1.0.tgz"},"maintainers":[{"name":"arzig","email":"zeiglerr@gmail.com"},{"name":"theqabalist","email":"me@brandonkeown.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-06T16:27:46.324Z","created":"2016-07-10T19:50:53.513Z","0.0.1":"2016-07-10T19:50:53.513Z","0.0.2":"2016-07-10T19:56:39.486Z","0.0.3":"2016-07-10T20:00:34.278Z","0.0.4":"2016-07-13T02:28:39.229Z","0.0.5":"2016-07-13T02:57:59.664Z","0.1.0":"2016-07-28T20:26:36.664Z"}}}