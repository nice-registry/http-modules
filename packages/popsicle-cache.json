{"name":"popsicle-cache","version":"5.0.1","description":"Cache HTTP responses using Popsicle","main":"dist/index.js","browser":"dist/browser.js","files":["dist/","LICENSE"],"scripts":{"lint":"tslint \"src/**/*.ts\"","build":"rimraf dist && tsc","test-cov":"jest --verbose --coverage","test":"npm run lint && npm run build && npm run test-cov","prepublish":"typings install && npm run build"},"repository":"https://github.com/blakeembrey/popsicle-cache","keywords":[],"license":"MIT","homepage":"https://github.com/blakeembrey/popsicle-cache","devDependencies":{"catbox-memory":"^2.0.4","jest":"^18.0.0","nock":"^9.0.2","popsicle":"^9.0.0","rimraf":"^2.4.3","tslint":"^4.1.1","tslint-config-standard":"^2.0.0","typescript":"^2.1.4","typings":"^2.0.0"},"dependencies":{"catbox":"^7.1.2"},"gitHead":"476427786c7a584982ea33a60e703ecddcf86125","versions":[{"number":"0.0.1","date":"2015-09-19T01:00:29.877Z"},{"number":"0.0.2","date":"2015-09-19T01:06:31.845Z"},{"number":"0.0.3","date":"2015-09-21T21:51:45.153Z"},{"number":"0.0.4","date":"2015-10-10T22:35:36.965Z"},{"number":"0.1.0","date":"2015-10-28T23:14:32.635Z"},{"number":"0.1.1","date":"2015-10-28T23:16:16.034Z"},{"number":"0.2.0","date":"2015-11-01T23:00:29.582Z"},{"number":"1.0.0","date":"2015-11-04T08:14:09.569Z"},{"number":"2.0.0","date":"2015-12-27T00:53:33.199Z"},{"number":"2.0.1","date":"2016-01-08T23:43:15.689Z"},{"number":"3.0.0","date":"2016-01-10T02:15:46.390Z"},{"number":"3.1.0","date":"2016-02-01T22:43:35.198Z"},{"number":"4.0.0","date":"2016-11-25T22:48:22.324Z"},{"number":"4.1.0","date":"2016-12-05T20:39:35.556Z"},{"number":"5.0.0","date":"2016-12-19T00:54:39.874Z"},{"number":"5.0.1","date":"2016-12-19T02:02:49.172Z"}],"readme":"# Popsicle Cache\n\n[![NPM version][npm-image]][npm-url]\n[![NPM downloads][downloads-image]][downloads-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n\n> Cache HTTP responses using `popsicle`.\n\n## Installation\n\n```sh\nnpm install popsicle-cache --save\n```\n\n## Usage\n\n```js\nimport { request } from 'popsicle'\nimport { plugin, cacheables, ttls } from 'popsicle-cache'\n\nconst cache = plugin({ engine: require('catbox-fs'), ttl: ttls.forever() })\n\npopsicle('http://example.com')\n  .use(cache.handle)\n  .then(function (res) {\n    console.log(res) //=> If still fresh, the cached response, otherwise it makes a new request.\n  })\n```\n\nUse `popsicleCache.plugin(options)` to initialize the cache middleware. It returns an object with three methods:\n\n* `handle` - Regular Popsicle middleware for handling the cache.\n* `forceUpdate` - Force a refresh of the cache on every request (**does not** read from cache, only sets it).\n* `stop` - Stop the underlying `catbox` engine.\n\n## Options\n\n**Popsicle Cache** does not include any external caching strategy by default. Instead, it is compatible with [`catbox`](https://github.com/hapijs/catbox#installation) strategies.\n\n### `engine` (Object | Function)\n\nAn engine instance from [`catbox`](https://github.com/hapijs/catbox#installation).\n\n### `cacheable` (Function, Default = `cacheables.standard()`)\n\n```ts\n(req: Request, res: Response) => boolean\n```\n\nA function that determines whether a request/response should be cacheable.\n\nBuilt-in cacheable implementations:\n\n* `cacheables.standard()` - Caches on `res.status === 200 && req.method === 'GET' && !res.get('Cache-Control').contains('no-cache')` only.\n* `cacheables.always()` - Always caches the response (`return true`).\n\n### `ttl` (Function, Default = `ttls.standard(0, 1000 * 60 * 60 * 24 * 365)`)\n\n```ts\n(req: Request, res: Response) => number\n```\n\nA function that determines the TTL of the cached response.\n\nBuilt-in TTL implementations:\n\n* `ttls.standard(minTtl, maxTtl)` - Calculates the [freshness](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#Freshness) from the `Cache-Control`, `Expires` and/or `Last-Modified` headers. Returns `minTtl + Math.min(maxTtl, freshness)`.\n* `ttls.forever()` - Caches forever (`return Infinity`).\n\n### `serializer` (Object, Default = `serializers.standard()`)\n\n```ts\ninterface Serializer <T> {\n  name: string\n  parse (value: string): T\n  stringify (value: T, cache: (err: Error | null, value?: string | null) => void): T\n}\n```\n\nAn object that represents a serializer instance. Must have a name and implement `parse` and `stringify` methods. Some serializations are asynchronous in nature, or require the response body to be augmented, so a callback must be used to cache the actual value. Pass `null` or `undefined` as the `cache` value to skip the cache (E.g. `cache()` or `cache(null, null)`).\n\nBuilt-in serializer implementations:\n\n* `serializers.standard()` - Simple implementation using `JSON.parse` and `JSON.stringify`.\n* `stream(maxBufferLength?: number)` - Buffers the response body from a stream, skipping the cache if the buffer exceeds `maxBufferLength` (defaults to `1mb`)\n\n### `handler` (Function, Default = `handlers.standard()`)\n\n```ts\nclass CachedResponse extends popsicle.Response {\n  ttl: number\n  stored: number\n  response: Response\n  varyHeaders: Array<[string, string]>\n}\n\n(req: Request, cache: CachedResponse, next: () => Promise<Response>): Response | CachedResponse | Promise<Response | CachedResponse>\n```\n\nThe request handler that decides whether to use the existing cache, regular response or a combination of both (E.g. by setting `If-None-Match` or `If-Modified-Since`).\n\nBuilt-in handler implmentations:\n\n* `handlers.standard()` - Based on [freshness](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#Freshness), it will decide whether to use the cache directly or validate the cache by sending the request with `If-None-Match` or `If-Modified-Since`. If it responds with `304` (not modified), it will use the cached response body and headers.\n* `handlers.always()` - Always return the cached resource, even if expired or stale (`return cache.response`).\n\n### `catchCacheError` (Function, Default = `undefined`)\n\n```ts\n(err: Error) => void\n```\n\nHandler for catching cache errors. Useful for debugging errors with setting the cache engine or serializer errors which would otherwise be swallowed.\n\n### `staleFallback` (Boolean, Default = `true`)\n\nWhen the network is down or the server responds with `5xx`, we always default to the cached entry (instead of passing the error onward).\n\n### `getId` (Function, Default = `getIds.standard()`)\n\nThe ID for the cache entry. The default is `${serializer.name}~${req.method}~${req.url}`.\n\n### `waitForCache` (Boolean, Default = `false`)\n\nUsually persisting to cache occurs in parallel with the response. This overrides that behaviour by waiting for the cache to finish before responding.\n\n### `segment` (String, Default = `'popsicle-cache'`)\n\nThe `catbox` segment name.\n\n## License\n\nMIT license\n\n[npm-image]: https://img.shields.io/npm/v/popsicle-cache.svg?style=flat\n[npm-url]: https://npmjs.org/package/popsicle-cache\n[downloads-image]: https://img.shields.io/npm/dm/popsicle-cache.svg?style=flat\n[downloads-url]: https://npmjs.org/package/popsicle-cache\n[travis-image]: https://img.shields.io/travis/blakeembrey/popsicle-cache.svg?style=flat\n[travis-url]: https://travis-ci.org/blakeembrey/popsicle-cache\n[coveralls-image]: https://img.shields.io/coveralls/blakeembrey/popsicle-cache.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/blakeembrey/popsicle-cache?branch=master\n","starsCount":1,"created":"2015-09-19T01:00:29.877Z","modified":"2016-12-19T02:02:49.172Z","lastPublisher":{"name":"blakeembrey","email":"hello@blakeembrey.com"},"owners":[{"name":"blakeembrey","email":"hello@blakeembrey.com"}],"other":{"_attachments":{},"_from":".","_id":"popsicle-cache","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/popsicle-cache-5.0.1.tgz_1482112967398_0.6954927714541554"},"_npmUser":{"name":"blakeembrey","email":"hello@blakeembrey.com"},"_npmVersion":"4.0.3","_rev":"5-4fc63a214bc3f92c4752e7db9b5826fa","_shasum":"abdac3c2c8c1ed049b3be4f62b639ce673a9a6a8","author":{"name":"Blake Embrey","email":"hello@blakeembrey.com"},"bugs":{"url":"https://github.com/blakeembrey/popsicle-cache/issues"},"directories":{},"dist-tags":{"latest":"5.0.1"},"dist":{"shasum":"abdac3c2c8c1ed049b3be4f62b639ce673a9a6a8","tarball":"http://registry.npmjs.org/popsicle-cache/-/popsicle-cache-5.0.1.tgz"},"maintainers":[{"name":"blakeembrey","email":"hello@blakeembrey.com"}],"readmeFilename":"README.md","time":{"modified":"2016-12-19T02:02:49.172Z","created":"2015-09-19T01:00:29.877Z","0.0.1":"2015-09-19T01:00:29.877Z","0.0.2":"2015-09-19T01:06:31.845Z","0.0.3":"2015-09-21T21:51:45.153Z","0.0.4":"2015-10-10T22:35:36.965Z","0.1.0":"2015-10-28T23:14:32.635Z","0.1.1":"2015-10-28T23:16:16.034Z","0.2.0":"2015-11-01T23:00:29.582Z","1.0.0":"2015-11-04T08:14:09.569Z","2.0.0":"2015-12-27T00:53:33.199Z","2.0.1":"2016-01-08T23:43:15.689Z","3.0.0":"2016-01-10T02:15:46.390Z","3.1.0":"2016-02-01T22:43:35.198Z","4.0.0":"2016-11-25T22:48:22.324Z","4.1.0":"2016-12-05T20:39:35.556Z","5.0.0":"2016-12-19T00:54:39.874Z","5.0.1":"2016-12-19T02:02:49.172Z"},"users":{"shanewholloway":true}}}