{"name":"perror","description":"Smart named error objects with HTTP compatibility","version":"0.0.2","license":"MIT","repository":"https://github.com/kolypto/nodejs-perror","main":"./lib/index","keywords":["error","exception"],"dependencies":{},"devDependencies":{"nodeunit":"0.8.2"},"engines":{"node":">= 0.9.0"},"scripts":{"test":"./node_modules/.bin/nodeunit tests/*-test.js"},"readme":"[![Version](https://badge.fury.io/js/perror.png)](https://npmjs.org/package/perror)\n[![Dependency Status](https://gemnasium.com/kolypto/nodejs-perror.png)](https://gemnasium.com/kolypto/nodejs-perror)\n[![Build Status](https://travis-ci.org/kolypto/nodejs-perror.png?branch=master)](https://travis-ci.org/kolypto/nodejs-perror)\n\nperror\n======\nSmart named Error objects with HTTP compatibility.\n\nKey features:\n\n* Error object presets\n* Predefined codes and messages\n* HTTP-compatible errors\n* Errors can contain additional debug data\n* JSON-friendly\n* Automatically wraps other error objects\n* Extremely lightweight\n* Unit-tested\n\n\n\n\n\n\nTable of Contents\n=================\n\n* <a href=\"#example\">Example</a>\n* <a href=\"#perror-1\">perror()</a>\n* <a href=\"#use-cases\">Use Cases</a>\n    * <a href=\"#generic-errors\">Generic Errors</a>\n    * <a href=\"#code-and-message\">Code and Message</a>\n    * <a href=\"#error-instances\">Error Instances</a>\n        * <a href=\"#throwing-errors\">Throwing Errors</a>\n        * <a href=\"#wrapping-errors\">Wrapping Errors</a>\n    * <a href=\"#http-compatible-errors\">HTTP-compatible errors</a> \n\n\n\nExample\n=======\n\n```js\nvar perror = require('perror');\n\n// Create an error  with code, name and predefined title.\n// The associated HTTP code is optional\nvar NotFoundError = perror(1, 'NotFound', 'Not found').httpCode(404);\n\n// Another error with no code and message: both are `undefined`\nvar GenericError = perror('GenericError');\n\n// Throw it\ntry {\n    // Set a message, provide some debug context data\n    throw new NotFoundError('Page was not found', { page_url: '/index' });\n}\n// Catch it\ncatch(e){\n    e.name; // Error name: 'NotFound'\n    e.code; // Code: 1\n    e.message; // Error message: 'Not found: Page was not found'\n    e.httpCode; // HTTP error code: 404\n    e.data; // Debug data: { page_url: '/index' } (if provided)\n    e.stack; // stack trace still available\n}\n```\n\n\n\nperror()\n========\n`perror()` builds an Error object constructor with some presents and fine-tuning.\n\nThe errors are indistinguishable from generic `Error` objects, including names and stack traces.\n\nThe generic signature is:\n\n> perror([code, ] name [, message] [, superCtor])\n\nArguments:\n\n* `code: Number?`: Optional numeric error code, stored into the `code` property.\n  When not provided - the property is not set.\n\n  Note: only numeric error codes are supported!\n* `name: String`: Error object name. Is stored into the `name` property.\n* `message: String?`: Optional error message prefix. If specified - is prepended to the error message.\n* `superCtor: Function?`: Optional parent superclass constructor. Use to inherit from specific error objects.\n\nIt returns an Error object which accepts the following arguments:\n\n* `message: String|Error`: Error message string, or another Error object to wrap.\n* `data: *?`: Arbitrary metadata to store into the `data` property\n\nIn addition, the following chain methods are available:\n\n* `httpCode(Number)`: Associate an HTTP code with the error. Is stored into the `httpCode` property.\n* `extra(Object)`: Add arbitrary fields to error instances: the provided object fields are copied into the error instance.\n\nAn error instance has the following properties:\n\n* `name: String`: Error name\n* `message: String`: Error message\n* `code: Number?`: Error code, if set\n* `data: *?`: Error debug data, if provided\n* `httpCode: Number?`: HTTP error code, if set\n\n\n\nUse Cases\n=========\n\nGeneric Errors\n--------------\nYou can use `perror()` to create generic error objects.\n\n> perror(name[, superCtor])\n\nArguments:\n\n* `name: String`: Name for the error object\n* `superCtor: Function?`: Optional parent Error object to inherit from. By default, it inherits from `Error`.\n\nThe function returns a generic Error object constructor.\n\nExample:\n\n```js\nvar RuntimeError = perror('RuntimeError');\n\ntry { throw new RuntimeError('something bad'); }\ncatch(e){\n    // Standard Error object fields\n    e.name;\n    e.message;\n    // Convertible to string\n    console.log(e); // -> 'RuntimeError: something bad'\n}\n```\n\n\nCode and Message\n----------------\nYou can associate numeric error codes and message prefixes with the error object.\n\n> perror([code, ], name[, message] [, superCtor])\n\nExample:\n\n```js\nvar NotFoundError = perror(10, 'NotFoundError', 'Not found');\n\ntry { throw new NotFoundError('page'); }\ncatch(e){\n    e.name; // -> 'NotFoundError'\n    e.code; // -> 10\n    e.message; // -> 'Not Found: page'\n}\n```\n\nError Instances\n---------------\n\n### Throwing Errors\nEach Error constructor built by `perror()` accepts two arguments: the message, and the optional debug data.\n\nExample:\n\n```js\nvar RuntimeError = perror('RuntimeError');\n\ntry {\n    throw new RuntimeError('broken', { a: 1 });\n}\ncatch(e){\n    e.data; // -> { a: 1 }\n}\n```\n\n### Wrapping Errors\nError objects from `perror()` can wrap other objects: all properties are copied to the wrapper, saving the original message prefix.\n\nIs useful when you need to make sure the value got from elsewhere is an Error object with some known fields,\nlike `httpCode` (see below).\n\nExample:\n\n```js\n    // An error with defaults\n    var GenericError = perror(1024, 'GenericError', 'Generic Error');\n\n    // A specific error with overrides\n    var CustomError = perror(10, 'CustomError', 'Custom Error');\n\n    try {\n        throw new GenericError(\n            new CustomError('Hey!')\n        );\n    } catch(e){\n        e.code; // -> 10              -- copied\n        e.name; // -> 'CustomError'   -- copied\n        e.message; // -> 'Generic Error: Custom Error: Hey!'   -- merged\n    }\n```\n\nHTTP-compatible errors\n----------------------\nThe Error constructor has a `httpCode(Number)` method which allows you to specify an associated HTTP error code.\nThis comes extremely handy when the exception is to be reported via HTTP.\n\nCombine it with Wrapping and get defaults for your HTTP response codes in case of errors!\n\nExample:\n\n```js\nvar ServerError = perror('ServerError').httpCode(500);\n\napp.get('/', function(req, res){\n    get_page(function(err, page){\n        if (err){\n            err = new ServerError(err); // wrap it to get a guaranteed httpCode\n            res.type('json').send(\n                err.httpCode,\n                err // send the whole error object. stack trace is not exported\n            );\n        }\n    });\n});\n```\n\n\n\n\n\n\nperror.Lookup\n=============\nHaving all those names and codes at hand, it's natural to desire a tool that creates Error objects by name or code.\n\nperror.Lookup does precisely this: construct it with an object of Errors (most probably - a module), and enjoy the\nlookup!\n\n```js\nvar perror = require('perror);\n\n// Define your objects\nexports.AuthError   = perror(403, 'AuthError',   'Unauthorized');\nexports.NotFound    = perror(404, 'NotFound',    'Not found');\nexports.ServerError = perror(500, 'ServerError', 'Server Error');\n\n// Create the Lookup\nvar lookup = exports.lookup = new perror.Lookup(exports);\n\n// Throw errors by name & code\nthrow lookup.code(403, 'Invalid password');\nthrow lookup.name('NotFound', 'Page not found');\n```\n\n*Note*: both `code()` and `name()` use the generic `Error` object when no matching Error is found!\n","homepage":"https://github.com/kolypto/nodejs-perror","versions":[{"number":"0.0.1","date":"2013-12-25T00:13:42.243Z"},{"number":"0.0.2","date":"2013-12-25T01:16:56.617Z"}],"created":"2013-12-25T00:13:42.243Z","modified":"2013-12-25T01:16:56.617Z","lastPublisher":{"name":"kolypto","email":"kolypto@gmail.com"},"owners":[{"name":"kolypto","email":"kolypto@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"perror","_npmUser":{"name":"kolypto","email":"kolypto@gmail.com"},"_npmVersion":"1.3.21","_rev":"1-bc1f875181e47e3c1be6db7e24c369c0","author":{"name":"kolypto","email":"kolypto@gmail.com"},"bugs":{"url":"https://github.com/kolypto/nodejs-perror/issues"},"directories":{},"dist-tags":{"latest":"0.0.2"},"dist":{"shasum":"5708e9a3f77336360b423e716c0ed5ae5c64f5db","tarball":"http://registry.npmjs.org/perror/-/perror-0.0.2.tgz"},"maintainers":[{"name":"kolypto","email":"kolypto@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2013-12-25T01:16:56.617Z","created":"2013-12-25T00:13:42.243Z","0.0.1":"2013-12-25T00:13:42.243Z","0.0.2":"2013-12-25T01:16:56.617Z"}}}