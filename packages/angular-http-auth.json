{"name":"angular-http-auth","version":"1.5.0","description":"HTTP Auth Interceptor Module for AngularJS.","main":"src/http-auth-interceptor.js","repository":"https://github.com/witoldsz/angular-http-auth","license":"MIT","keywords":["angular","auth"],"homepage":"https://github.com/witoldsz/angular-http-auth","devDependencies":{"mkdirp":"^0.5.1","rimraf":"^2.5.4","uglifyjs":"^2.4.10"},"scripts":{"clean":"rimraf dist/*","prebuild":"npm run clean -s && mkdirp dist","build":"npm run build:minify -s && npm run build:copy -s","build:minify":"uglifyjs src/http-auth-interceptor.js -o dist/http-auth-interceptor.min.js -c","build:copy":"cat src/http-auth-interceptor.js > dist/http-auth-interceptor.js","version":"npm run build && git add -A dist","postversion":"git push && git push --tags"},"gitHead":"fc131b5a0d122c31e2bd77edd28a39b2fac5c1d5","versions":[{"number":"1.2.1","date":"2015-06-06T21:36:18.758Z"},{"number":"1.3.0","date":"2016-03-24T23:39:42.083Z"},{"number":"1.4.0","date":"2016-11-11T23:36:39.778Z"},{"number":"1.4.1","date":"2016-11-12T12:18:25.469Z"},{"number":"1.5.0","date":"2016-11-17T15:22:03.814Z"}],"readme":"HTTP Auth Interceptor Module\n============================\nfor AngularJS\n-------------\n\nThis is the implementation of the concept described in\n[Authentication in AngularJS (or similar) based application](http://espeo.eu/blog/authentication-in-angularjs-or-similar-based-application/).\n\nThere are releases for both AngularJS **1.0.x** and **1.2.x**,\nsee [releases](https://github.com/witoldsz/angular-http-auth/releases).\n\nLaunch demo [here](http://witoldsz.github.com/angular-http-auth/)\nor switch to [gh-pages](https://github.com/witoldsz/angular-http-auth/tree/gh-pages)\nbranch for source code of the demo.\n\nUsage\n------\n\n- Install via bower: `bower install --save angular-http-auth`\n- ...or via npm: `npm install --save angular-http-auth`\n- Include as a dependency in your app: `angular.module('myApp', ['http-auth-interceptor'])`\n\nManual\n------\n\nThis module installs $http interceptor and provides the `authService`.\n\nThe $http interceptor does the following:\nthe configuration object (this is the requested URL, payload and parameters)\nof every HTTP 401 response is buffered and everytime it happens, the\n`event:auth-loginRequired` message is broadcasted from $rootScope.\n\nThe `authService` has only 2 methods: `loginConfirmed()` and `loginCancelled()`.\n\nYou are responsible to invoke `loginConfirmed()` after user logs in. You may optionally pass in\na data argument to this method which will be passed on to the loginConfirmed\n$broadcast. This may be useful, for example if you need to pass through details of the user\nthat was logged in. The `authService` will then retry all the requests previously failed due\nto HTTP 401 response.\n\nYou are responsible to invoke `loginCancelled()` when authentication has been invalidated. You may optionally pass in\na data argument to this method which will be passed on to the loginCancelled\n$broadcast. The `authService` will cancel all pending requests previously failed and buffered due\nto HTTP 401 response.\n\nIn the event that a requested resource returns an HTTP 403 response (i.e. the user is\nauthenticated but not authorized to access the resource), the user's request is discarded and\nthe `event:auth-forbidden` message is broadcast from $rootScope.\n\n#### Ignoring the 401 interceptor\n\nSometimes you might not want the interceptor to intercept a request even if one returns 401 or 403. In a case like this you can add `ignoreAuthModule: true` to the request config. A common use case for this would be, for example, a login request which returns 401 if the login credentials are invalid.\n\n###Typical use case:\n\n* somewhere (some service or controller) the: `$http(...).then(function(response) { do-something-with-response })` is invoked,\n* the response of that requests is a **HTTP 401**,\n* `http-auth-interceptor` captures the initial request and broadcasts `event:auth-loginRequired`,\n* your application intercepts this to e.g. show a login dialog:\n * DO NOT REDIRECT anywhere (you can hide your forms), just show login dialog\n* once your application figures out the authentication is OK, call: `authService.loginConfirmed()`,\n* your initial failed request will now be retried and when proper response is finally received,\nthe `function(response) {do-something-with-response}` will fire,\n* your application will continue as nothing had happened.\n\n###Advanced use case:\n\n####Sending data to listeners:\nYou can supply additional data to observers across your application who are listening for `event:auth-loginConfirmed` and `event:auth-loginCancelled`:\n\n      $scope.$on('event:auth-loginConfirmed', function(event, data){\n      \t$rootScope.isLoggedin = true;\n      \t$log.log(data)\n      });\n\n      $scope.$on('event:auth-loginCancelled', function(event, data){\n        $rootScope.isLoggedin = false;\n        $log.log(data)\n      });\n\nUse the `authService.loginConfirmed([data])` and `authService.loginCancelled([data])` methods to emit data with your login and logout events.\n\n####Updating [$http(config)](https://docs.angularjs.org/api/ng/service/$http):\nSuccessful login means that the previous request are ready to be fired again, however now that login has occurred certain aspects of the previous requests might need to be modified on the fly. This is particularly important in a token based authentication scheme where an authorization token should be added to the header.\n\nThe `loginConfirmed` method supports the injection of an Updater function that will apply changes to the http config object.\n\n    authService.loginConfirmed([data], [Updater-Function])\n\n    //application of tokens to previously fired requests:\n    var token = reponse.token;\n\n    authService.loginConfirmed('success', function(config){\n      config.headers[\"Authorization\"] = token;\n      return config;\n    })\n\nThe initial failed request will now be retried, all queued http requests will be recalculated using the Updater-Function.\n\nIt is also possible to stop specific request from being retried, by returning ``false`` from the Updater-Function:\n\n    authService.loginConfirmed('success', function(config){\n      if (shouldSkipRetryOnSuccess(config))\n        return false;\n      return config;\n    })\n","created":"2015-06-06T21:36:18.758Z","modified":"2016-11-17T15:22:03.814Z","lastPublisher":{"name":"witoldsz","email":"witoldsz.dev@gmail.com"},"owners":[{"name":"witoldsz","email":"witoldsz.dev@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"angular-http-auth","_nodeVersion":"4.6.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/angular-http-auth-1.5.0.tgz_1479396121960_0.5502650265116245"},"_npmUser":{"name":"witoldsz","email":"witoldsz.dev@gmail.com"},"_npmVersion":"2.15.9","_rev":"4-e5fe9b21ea641f172b83ec30af6290ff","_shasum":"a84aaa2f94fda1c5b641efc4c9a7958d57f61ef0","author":{"name":"Witold Szczerba"},"bugs":{"url":"https://github.com/witoldsz/angular-http-auth/issues"},"directories":{},"dist-tags":{"latest":"1.5.0"},"dist":{"shasum":"a84aaa2f94fda1c5b641efc4c9a7958d57f61ef0","tarball":"http://registry.npmjs.org/angular-http-auth/-/angular-http-auth-1.5.0.tgz"},"maintainers":[{"name":"witoldsz","email":"witoldsz.dev@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-17T15:22:03.814Z","created":"2015-06-06T21:36:18.758Z","1.2.1":"2015-06-06T21:36:18.758Z","1.3.0":"2016-03-24T23:39:42.083Z","1.4.0":"2016-11-11T23:36:39.778Z","1.4.1":"2016-11-12T12:18:25.469Z","1.5.0":"2016-11-17T15:22:03.814Z"}}}