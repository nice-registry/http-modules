{"name":"test-client","version":"1.0.2","description":"HTTP assertions for node","homepage":"https://github.com/braddunbar/test-client","repository":"https://github.com/braddunbar/test-client","main":"index.js","scripts":{"test":"standard --fix && tape test/index.js | faucet"},"license":"ISC","devDependencies":{"co":"4.6.0","faucet":"0.0.1","standard":"8.4.0","tape":"4.6.2"},"dependencies":{"cookiejar":"2.1.0","mime-types":"2.1.12"},"gitHead":"da6c6382e8eec254576a9d091f99849dcf40734c","versions":[{"number":"0.3.1","date":"2016-10-16T16:48:46.979Z"},{"number":"0.3.2","date":"2016-10-18T00:35:32.521Z"},{"number":"0.3.3","date":"2016-10-18T02:52:55.820Z"},{"number":"1.0.1","date":"2016-10-22T04:22:25.680Z"},{"number":"1.0.2","date":"2017-04-21T10:38:11.376Z"}],"readme":"# test-client\n\n`test-client` is a small HTTP assertion library that uses promises, allowing\ntests to be written with[`co`][co] generators or `async`/`await`.\n\n```js\n'use strict'\n\nconst co = require('co')\nconst http = require('http')\nconst Client = require('test-client')\n\nco(function *() {\n  const server = http.createServer((request, response) => {\n    response.setHeader('content-type', 'application/json')\n    response.end(JSON.stringify({x: 2}))\n  })\n\n  const client = new Client(server)\n\n  const response = yield client\n    .get('/test')\n    .type('json')\n    .accept('json')\n    .set('user-agent', 'smith')\n    .send({x: 1})\n\n  response\n    .assert(200, {x: 2})\n    .assert('content-type', /json/)\n})\n```\n\n# Install\n\n`npm install test-client`\n\n# API\n\n## Client\n\n### new Client(app)\n\n`app` can be a [koa][koa]/[express][express] app, an `http.Server`, or anything\nwith a `.listen()` method.\n\n### .request(path, method)\n\nReturns a `Request` with the corresponding `path` and `method`. `method` can be\nany of the values in `http.METHODS`.\n\n### .get(path) / .put(path) / .post(path) / .delete(path) / …\n\nThere is a convenience method proxying `.request(…)` for each method in\n`http.METHODS`. Returns a `Request`.\n\n### .jar\n\nA [`CookieJar`][cookiejar] instance for storing cookies.\n\n## Request\n\n### .set(key, value)\n\nSet a request header by key and value. Returns the request.\n\n### .set(headers)\n\nSet headers from an object containing header key/value pairs. Returns the\nrequest.\n\n### .accept(type)\n\nSet the `accept` header from a content-type or extension via\n[`mime-types`][mime-types]. Returns the request.\n\n### .type(type)\n\nSet the `content-type` header from a content-type or extension via\n[`mime-types`][mime-types]. Returns the request.\n\n### .send()\n\nSend the request with no body. Returns a promise that resolves as a `Response`.\n\n### .send(body)\n\nSend the request with the specified `body`. If `body` is an object, it's JSON\nencoded and `content-type` is set to `application/json`. If `body` is a stream,\nit's piped to the request. Returns a promise that resolves as a `Response`.\n\n## Response\n\n### .status\n\nThe numeric status code from the response.\n\n### .headers\n\nAn object containing header values from the response.\n\n### .body\n\nIf the response is JSON as indicated by the `content-type`, the decoded\nresponse. Otherwise, the response string.\n\n### .assert(number)\n\nAssert the HTTP status value. Returns the response.\n\n### .assert(string)\n\nAssert the repsonse body value. Returns the response.\n\n### .assert(regexp)\n\nAssert that the response body matches a RegExp. Returns the response.\n\n### .assert(object)\n\nAssert the response body as a JSON object. Returns the response.\n\n### .assert(number, string)\n\nAssert the HTTP status and response body value. Returns the response.\n\n### .assert(number, regexp)\n\nAssert the HTTP status value and the response body matches a RegExp. Returns\nthe response.\n\n### .assert(string, string)\n\nAssert an HTTP header value. Returns the response.\n\n### .assert(string, regexp)\n\nAssert an HTTP header matches a RegExp. Returns the response.\n\n[co]: https://github.com/tj/co\n[koa]: http://koajs.com/\n[express]: http://expressjs.com/\n[cookiejar]: https://github.com/bmeck/node-cookiejar\n[mime-types]: https://github.com/jshttp/mime-types\n","created":"2016-10-16T16:48:46.979Z","modified":"2017-04-21T10:38:11.376Z","lastPublisher":{"name":"braddunbar","email":"dunbarb2@gmail.com"},"owners":[{"name":"braddunbar","email":"dunbarb2@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"test-client","_nodeVersion":"7.9.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/test-client-1.0.2.tgz_1492771089531_0.787336593028158"},"_npmUser":{"name":"braddunbar","email":"dunbarb2@gmail.com"},"_npmVersion":"4.2.0","_rev":"3-1e8a9714861333f24b6df549f4865eb5","_shasum":"e503ee3a31d030f71c44923d2d316f9739aefd40","author":{"name":"Brad Dunbar","email":"dunbarb2@gmail.com","url":"http://braddunbar.net/"},"bugs":{"url":"https://github.com/braddunbar/test-client/issues","email":"dunbarb2@gmail.com"},"directories":{},"dist-tags":{"latest":"1.0.2"},"dist":{"shasum":"e503ee3a31d030f71c44923d2d316f9739aefd40","tarball":"https://registry.npmjs.org/test-client/-/test-client-1.0.2.tgz"},"maintainers":[{"name":"braddunbar","email":"dunbarb2@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-21T10:38:11.376Z","created":"2016-10-16T16:48:46.979Z","0.3.1":"2016-10-16T16:48:46.979Z","0.3.2":"2016-10-18T00:35:32.521Z","0.3.3":"2016-10-18T02:52:55.820Z","1.0.1":"2016-10-22T04:22:25.680Z","1.0.2":"2017-04-21T10:38:11.376Z"}}}