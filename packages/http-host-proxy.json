{"name":"http-host-proxy","version":"1.0.0","description":"HTTP(s) proxy with host based routing to front servers, with optional SSL or authentication","main":"./http-host-proxy.js","preferGlobal":true,"bin":{"http-host-proxy":"./http-host-proxy.js"},"scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/bahamas10/node-http-host-proxy","license":"MIT","dependencies":{"access-log":"~0.3.9","hashp":"~0.0.2","http-proxy":"~1.11.2","latest":"~0.2.0","log-buffer":"~0.0.3","node-uuid":"~1.4.2","posix-getopt":"~1.2.0","strsplit":"~1.0.0"},"gitHead":"df010021ae28d09719b866ff123da25096e8373e","homepage":"https://github.com/bahamas10/node-http-host-proxy#readme","versions":[{"number":"0.0.0","date":"2013-11-14T23:10:03.781Z"},{"number":"0.0.1","date":"2013-11-15T12:52:24.044Z"},{"number":"0.0.2","date":"2013-11-15T15:17:59.310Z"},{"number":"0.0.7","date":"2013-11-18T17:34:15.920Z"},{"number":"0.0.8","date":"2014-01-24T20:15:51.132Z"},{"number":"0.0.9","date":"2014-01-24T23:53:52.366Z"},{"number":"0.0.10","date":"2014-01-25T19:45:38.243Z"},{"number":"0.0.11","date":"2014-07-25T22:09:30.622Z"},{"number":"0.0.12","date":"2014-08-19T03:14:37.363Z"},{"number":"0.0.13","date":"2014-08-25T22:48:50.793Z"},{"number":"0.1.0","date":"2014-08-26T17:54:31.136Z"},{"number":"0.1.1","date":"2014-08-26T22:05:41.350Z"},{"number":"0.1.2","date":"2015-01-14T19:23:33.908Z"},{"number":"0.1.3","date":"2015-02-25T00:54:19.877Z"},{"number":"0.1.4","date":"2015-02-25T01:18:30.650Z"},{"number":"0.1.5","date":"2015-04-22T17:28:40.193Z"},{"number":"1.0.0","date":"2015-10-09T17:06:03.820Z"}],"readme":"HTTP Host Proxy\n===============\n\nHTTP(s) proxy with host based routing to front servers, with optional SSL or authentication\n\n**NOTE**: as of version `1.0.0` this module no longer uses [Passhash][1]\nfor user authentication - it has been replaced with [HashP][2]\nwhich has a different file format that is not backwards compatible.\n\nInstallation\n------------\n\nFirst, install [Node.js][0].  Then:\n\n    [sudo] npm install -g http-host-proxy\n\nExample\n-------\n\nFirst create a router file\n\n`example-router.json`\n\n``` json\n{\n  \"test1.com\": \"localhost:8080\",\n  \"test2.com\": \"127.0.0.1:8081\",\n  \"test3.com\": {\n    \"host\": \"192.168.1.15\",\n    \"port\": 8000\n  },\n  \"daveeddy.com\": \"daveeddy.com\",\n  \"google.com\": \"google.com:80\",\n  \"github.com\": {\n    \"host\": \"github.com\",\n    \"port\": 80\n  }\n}\n```\n\nThis file maps incoming `host` headers, to the endpoint the server will proxy.\nAny of the above forms are permitted in the config.\n\n### Basic\n\nNow, we can fire up the server:\n\n    $ http-host-proxy -r example-router.json\n    listening on http://0.0.0.0:8080\n\nBy default, the server listens on HTTP, host `0.0.0.0`, port `8080`\n\nIn a second terminal, we can trigger some requests to the server\n\n    $ curl -i localhost:8080\n    HTTP/1.1 404 Not Found\n    Date: Thu, 14 Nov 2013 22:14:59 GMT\n    Connection: keep-alive\n    Transfer-Encoding: chunked\n\n    no route found for host: localhost:8080\n    $ curl -i -H 'host: daveeddy.com' localhost:8080\n    HTTP/1.1 200 OK\n    server: nginx\n    date: Thu, 14 Nov 2013 22:15:12 GMT\n    content-type: text/html\n    content-length: 18692\n    last-modified: Tue, 12 Nov 2013 23:58:31 GMT\n    connection: keep-alive\n    accept-ranges: bytes\n\n    <!doctype html>\n    <html>\n    .... SNIPPED ....\n\nIn the first request, you can see that we are thrown a `404` from the proxy itself,\nbecause it doesn't have a route defined for the host header `localhost:8080`.  In the\nsecond request however a manual host header is set to `daveeddy.com`, which matches\na route in the router.  The request is proxied to http://www.daveeddy.com, and the\nresponse headers and the body are delivered directly through the proxy.\n\nOn the server end, you can see Apache style logs, prefixed with the host header.\n\n    $ http-host-proxy -r example-router.json\n    listening on http://0.0.0.0:8080\n    [localhost:8080] 127.0.0.1 - - [14/Nov/2013:17:14:59 -0500] \"GET / HTTP/1.1\" 404 - \"-\" \"curl/7.30.0\"\n    [daveeddy.com] 127.0.0.1 - - [14/Nov/2013:17:15:12 -0500] \"GET / HTTP/1.1\" 200 18692 \"-\" \"curl/7.30.0\"\n\n### Default Route\n\nYou can specify the following in the router file to create a default route for\nunmatched host headers:\n\n``` json\n{\n  \"*\": \"google.com\"\n}\n```\n\nWith the above in place, any successful request will be proxied to google\n\n### SSL\n\nEnabling ssl is easy.  You need to already have a certificate and key file, or\ngenerate your own.  To generate your own you can run:\n\n    openssl genrsa -out my.key 4096\n    openssl req -new -x509 -days 1826 -key my.key -out my.crt\n\nThese 2 commands will create `my.key` and `my.crt` in your current directory.  Now,\njust fire up the server with the following options to listen securely.\n\n    $ http-host-proxy -r example-router.json --ssl -k my.key -c my.crt\n    listening on https://0.0.0.0:8080\n    [daveeddy.com] 127.0.0.1 - - [14/Nov/2013:17:25:19 -0500] \"GET / HTTPS/1.1\" 200 18692 \"-\" \"curl/7.30.0\"\n\nAnd to generate a request, just change `curl` to use `https`, and supply `-k` if the certificate\nis self-signed.\n\n    $ curl -k -i -H 'host: daveeddy.com' https://localhost:8080\n    HTTP/1.1 200 OK\n    server: nginx\n    date: Thu, 14 Nov 2013 22:26:03 GMT\n    content-type: text/html\n    content-length: 18692\n    last-modified: Tue, 12 Nov 2013 23:58:31 GMT\n    connection: keep-alive\n    accept-ranges: bytes\n\n    <!doctype html>\n    <html>\n    .... SNIPPED ....\n\n### Authentication\n\nAuthentication can also be done by the proxy; It will use basic HTTP auth\nbefore proxying any requests.  The file format for the authentication database file\ncan be thought of as a stronger version of `htpasswd`, and can be found in the\n[HashP Node Module][2].\n\nFirst, we can create a passhash authentication database by running the following commands:\n\n    $ npm install -g hashp\n    $ echo -n 'password' | hashp username > passhash.txt\n    $ cat passhash.txt\n    username:QLZ6oPKVhm:swQfzk8F6gVhPrA3k2/1CTzitYo+LdZ8Qx+pmwBV7CFk/pZwsiunjYxmgzkXpJK+22mF4fvqI7t3neFXBi6SpQ==:89\n\nOr optionally visiting http://bahamas10.github.io/node-hashp/\n\nNow, we start the server with this file\n\n    $ http-host-proxy -r example-router.json -a passhash.txt\n    listening on http://0.0.0.0:8080\n\nMake a few requests, first without authorization, then with it supplied\n\n     $ curl -i -H 'host: daveeddy.com' localhost:8080\n     HTTP/1.1 401 Unauthorized\n     WWW-Authenticate: Basic realm=\"Auth Required\"\n     Date: Thu, 14 Nov 2013 22:51:30 GMT\n     Connection: keep-alive\n     Transfer-Encoding: chunked\n\n     $ curl -i -H 'host: daveeddy.com' --user username:password localhost:8080\n     HTTP/1.1 200 OK\n     server: nginx\n     date: Thu, 14 Nov 2013 22:51:42 GMT\n     content-type: text/html\n     content-length: 18692\n     last-modified: Tue, 12 Nov 2013 23:58:31 GMT\n     connection: keep-alive\n     accept-ranges: bytes\n\n     <!doctype html>\n     <html>\n     .... SNIPPED ....\n\nAnd on the server we see:\n\n    $ http-host-proxy -r example-router.json -a passhash.txt\n    listening on http://0.0.0.0:8080\n    [<empty>@daveeddy.com] 127.0.0.1 - - [14/Nov/2013:17:51:30 -0500] \"GET / HTTP/1.1\" 401 - \"-\" \"curl/7.30.0\"\n    [username@daveeddy.com] 127.0.0.1 - - [14/Nov/2013:17:51:42 -0500] \"GET / HTTP/1.1\" 200 18692 \"-\" \"curl/7.30.0\"\n\nIn the logs you can see `username@daveeddy.com`, the username is automatically prepended to the host\nheader when authentication is enabled.\n\n**NOTE:** The authorization header is stripped out by the proxy before being sent\nto the destination.\n\nUsage\n-----\n\n    usage: http-host-proxy [options] -r routefile.json\n\n    HTTP(s) proxy with host based routing to front servers, with optional SSL or authentication\n\n    required options\n      -r, --routes <file.json>      [env HTTPHOSTPROXY_ROUTES] a JSON file of host based routes\n\n    authentication options\n      -a, --auth <authfile>         [env HTTPHOSTPROXY_AUTH] enable basic http authorization\n                                    and use <authfile> as the `hashp` file\n      -f, --fail-delay <seconds>    [env HTTPHOSTPROXY_FAIL_DELAY] delay, in seconds, before sending a response to a client\n                                    that failed authentication, defaults to 2\n\n    ssl options\n      -c, --cert <certfile>         [env HTTPHOSTPROXY_CERT] the SSL cert file to use when `--ssl` is switched on\n      -k, --key <keyfile>           [env HTTPHOSTPROXY_KEY] the SSL key file to use when `--ssl` is switched on\n      -s, --ssl                     [env HTTPHOSTPROXY_SSL] enable ssl, requires `--key` and `--cert` be specified\n\n    socket options\n      -H, --host <host>             [env HTTPHOSTPROXY_HOST] the host address on which to listen, defaults to 0.0.0.0\n      -p, --port <port>             [env HTTPHOSTPROXY_PORT] the port on which to listen, defaults to 8080\n\n    options\n      -b, --buffer                  [env HTTPHOSTPROXY_BUFFER] buffer log output, useful if this webserver is heavily used\n      -d, --debug                   [env HTTPHOSTPROXY_DEBUG] print verbose logs, defaults to false\n      -h, --help                    print this message and exit\n      -u, --updates                 check for available updates on npm\n      -v, --version                 print the version number and exit\n\nConfiguration\n-------------\n\n- `process.env.HTTPHOSTPROXY_AUTH` - same as `-a` or `--auth`\n- `process.env.HTTPHOSTPROXY_BUFFER` - same as `-b` or `--buffer`\n- `process.env.HTTPHOSTPROXY_CERT` - same as `-c` or `--cert`\n- `process.env.HTTPHOSTPROXY_DEBUG` - same as `-d` or `--debug`\n- `process.env.HTTPHOSTPROXY_FAIL_DELAY` - same as `-f` or `--fail-delay`\n- `process.env.HTTPHOSTPROXY_GID` - group ID to drop privileges to after server has started\n- `process.env.HTTPHOSTPROXY_HOST` - same as `-H` or `--host`\n- `process.env.HTTPHOSTPROXY_KEY` - same as `-k` or `--key`\n- `process.env.HTTPHOSTPROXY_PORT` - same as `-p` or `--port`\n- `process.env.HTTPHOSTPROXY_ROUTES` - same as `-r` or `--routes`\n- `process.env.HTTPHOSTPROXY_SSL` - same as `-s` or `--ssl`\n- `process.env.HTTPHOSTPROXY_UID` - group ID to drop privileges to after server has started\n\nSend a `SIGHUP` to the process to reload the router file\n\nAuthors\n-------\n\n- [bahamas10](https://github.com/bahamas10)\n- [shaggy-rl](https://github.com/shaggy-rl)\n\nLicense\n-------\n\nMIT License\n\n[0]: http://nodejs.org\n[1]: https://github.com/shaggy-rl/passhash\n[2]: https://github.com/bahamas10/node-hashp\n","created":"2013-11-14T23:09:58.095Z","modified":"2015-10-09T17:06:03.820Z","lastPublisher":{"name":"bahamas10","email":"dave@daveeddy.com"},"owners":[{"name":"bahamas10","email":"dave@daveeddy.com"}],"other":{"_attachments":{},"_from":".","_id":"http-host-proxy","_nodeVersion":"0.10.40","_npmUser":{"name":"bahamas10","email":"dave@daveeddy.com"},"_npmVersion":"2.14.4","_rev":"1-85e3939f1dd54d63f7a34f5e088a31fa","_shasum":"98a1303242ffa2d9c1634a4a8b4c5c47af189dab","author":{"name":"Dave Eddy","email":"dave@daveeddy.com","url":"http://www.daveeddy.com"},"bugs":{"url":"https://github.com/bahamas10/node-http-host-proxy/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"98a1303242ffa2d9c1634a4a8b4c5c47af189dab","tarball":"http://registry.npmjs.org/http-host-proxy/-/http-host-proxy-1.0.0.tgz"},"maintainers":[{"name":"bahamas10","email":"dave@daveeddy.com"}],"readmeFilename":"README.md","time":{"modified":"2015-10-09T17:06:03.820Z","created":"2013-11-14T23:09:58.095Z","0.0.0":"2013-11-14T23:10:03.781Z","0.0.1":"2013-11-15T12:52:24.044Z","0.0.2":"2013-11-15T15:17:59.310Z","0.0.7":"2013-11-18T17:34:15.920Z","0.0.8":"2014-01-24T20:15:51.132Z","0.0.9":"2014-01-24T23:53:52.366Z","0.0.10":"2014-01-25T19:45:38.243Z","0.0.11":"2014-07-25T22:09:30.622Z","0.0.12":"2014-08-19T03:14:37.363Z","0.0.13":"2014-08-25T22:48:50.793Z","0.1.0":"2014-08-26T17:54:31.136Z","0.1.1":"2014-08-26T22:05:41.350Z","0.1.2":"2015-01-14T19:23:33.908Z","0.1.3":"2015-02-25T00:54:19.877Z","0.1.4":"2015-02-25T01:18:30.650Z","0.1.5":"2015-04-22T17:28:40.193Z","1.0.0":"2015-10-09T17:06:03.820Z"}}}