{"name":"concurrency-logger","version":"2.0.1","description":"Log HTTP requests/responses separately, visualize their concurrency and report logs/errors in context of a request","main":"lib/index.js","files":["lib"],"scripts":{"compile":"babel ./src --out-dir ./lib","coverage":"nyc npm test && nyc report --reporter=text-lcov","create-fixtures":"TZ=UTC rm -rf ./test/fixtures && mkdir ./test/fixtures && CREATE_FIXTURES=true npm run test","lint":"eslint .","prepublish":"rm -rf ./lib && npm run compile","preversion":"npm run test","report-coverage":"npm run coverage | coveralls","test":"TZ=UTC mocha --compilers js:babel-core/register","travis":"npm run lint && npm run compile && npm run test"},"repository":"https://github.com/PabloSichert/concurrency-logger","keywords":["http","request","log","logger","concurrent","concurrency","koa","middleware"],"license":"MIT","homepage":"https://github.com/PabloSichert/concurrency-logger#readme","devDependencies":{"babel-cli":"^6.16.0","babel-core":"^6.17.0","babel-eslint":"^7.0.0","babel-plugin-transform-async-to-generator":"^6.16.0","babel-plugin-transform-es2015-modules-commonjs":"^6.16.0","babel-plugin-transform-object-rest-spread":"^6.16.0","coveralls":"^2.11.14","eslint":"^3.7.1","mocha":"^3.1.2","nyc":"^8.3.2","sinon":"^1.17.6","unexpected":"^10.18.1","unexpected-sinon":"^10.5.0"},"dependencies":{"ansi-256-colors":"^1.1.0"},"gitHead":"663728e3898676f2f1f710d0480a983e74fd627b","versions":[{"number":"1.0.0","date":"2016-10-23T02:41:59.960Z"},{"number":"2.0.0","date":"2016-10-30T14:34:21.498Z"},{"number":"2.0.1","date":"2016-10-30T16:02:46.800Z"}],"readme":"# concurrency-logger\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Coverage status][coveralls-image]][coveralls-url]\n[![Dependency status][david-dm-image]][david-dm-url]\n[![Dev dependency status][david-dm-dev-image]][david-dm-dev-url]\n\nHTTP logging middleware especially useful to unwind concurrent operations without losing the request context\n\n<a href=\"https://pablosichert.github.io/concurrency-logger/\">\n    <p align=\"center\">\n        <img src=\"https://cloud.githubusercontent.com/assets/4450694/19836607/c60e0ed2-9ea5-11e6-8696-556eed7ea7c9.gif\" alt=\"HTTP logs in a terminal, visualizing server status codes, response times, debug information and errors for concurrent requests\" />\n        <br />\n        Launch demo in your browser\n    </p>\n</a>\n\n## Install\n```\n$ npm install concurrency-logger\n```\n\n## Usage\n\n### With [koa](https://github.com/koajs/koa)\n\n#### Basic usage\n```js\nimport Koa from 'koa';\nimport createLogger from 'concurrency-logger';\n\nconst app = new Koa;\n\n// Logger is stateful as it contains information about concurrent requests\n// Same instance needs to be reused across requests\nconst logger = createLogger(/* options */);\n\napp.use(logger);\n```\n\n#### Log from middleware\n```js\n// Log something in context to a specific request to trace it back easily -\n// also when there are multiple concurrent requests\napp.use(async (context, next) => {\n    context.log('Log!');\n    context.log.info('Info!');\n    context.log.error('Error!');\n\n    await next();\n});\n```\n\n#### Attach more [context](https://github.com/koajs/koa/blob/master/docs/api/context.md#request-aliases) to the log\n```js\nconst logger = createLogger({\n    req: context => (\n        context.originalUrl + '\\n' +\n        context.get('User-Agent')\n    )\n});\n```\n\n#### Include localized timestamps\n```js\nconst logger = createLogger({\n    timestamp: true\n});\n```\n\n#### Write log to file\n```js\nimport { createWriteStream } from 'fs';\n\n// To read log use program that interprets ANSI escape codes,\n// e.g. cat or less -r\nconst log = createWriteStream('logs/requests.log');\n\nconst logger = createLogger({\n    reporter: log\n});\n```\n\n#### Adjust alert levels per method and response time\n```js\nconst logger = createLogger({\n    getLevel: (responseTime, context) => {\n        /*\n            GET\n              0 -  99ms: 0\n            100 - 149ms: 1\n            150 - 199ms: 2\n            200 - 249ms: 3\n            250 - 299ms: 4\n            300 - 349ms: 5\n            > 350ms    : 6\n\n            POST\n              0 - 149ms: 0\n            150 - 225ms: 1\n                   ... : ...\n        */\n\n        let threshold = 50; // ms\n\n        if (['POST', 'PUT'].includes(context.method)) {\n            threshold *= 1.5;\n        }\n\n        return Math.floor(responseTime / threshold) - 1;\n    }\n});\n```\n\n### Standalone\n```js\nimport createLogger from 'concurrency-logger';\n\nconst logger = createLogger(/* options */);\n\n(async () => {\n    const context = {\n        method: 'GET',\n        originalUrl: '/'\n    };\n\n    const next = async () => {\n        await new Promise(resolve => setTimeout(resolve, 100));\n\n        context.status = 200;\n    };\n\n    try {\n        await logger(context, next);\n    } catch (error) {\n        // Errors are passed through\n    }\n})();\n```\n\n## API\n| Option | Type | Default | Description | Example |\n| ---- | ---- | ------- | ----------- | ------- |\n| minSlots | integer | `1` | Amount of space that is provisioned to display concurrent request lanes. Number of lanes will automatically scale up as the number of concurrent requests grow. | `3`\n| getLevel | integer: function(responseTime: integer) | `responseTime => Math.floor(responseTime / 50) - 1` | Map response time to alert level. Alert levels go from 0 (default color) to 6 (dark red). By default that means `<100ms: 0`, `<150ms: 1` `<200ms: 2`, ..., `>=350ms: 6`. | `responseTime => Math.floor(responseTime / 100)`\n| width | integer, boolean(`false`) | `undefined` | If no width is provided, it will be dynamically read from `process.stdout.columns`. Pass in an integer to break all lines according to the specified fixed (terminal character) width. Pass in `false` if you want the lines not to break at all. | `80`, `132`, `false`\n| timestamp | boolean | `false` | Print localized timestamp for every requests. | `true`, `false`\n| slim | boolean | `false` | \"Slim mode\": don't use an extra character between request lanes to shrink width, but make them harder to separate visually. | `true`, `false`\n| reporter | writable stream | `process.stdout` | Specify a stream that handles the output lines. Write to terminal or stream to a log file, for example. Note that the lines contain ANSI color codes, so when streaming to a file you might need a program that can read those. E.g. `less -r requests.log` | `require('fs').createWriteStream('logs/requests.log')`\n| req | any: function(context: object) | `context => context.originalUrl` | Attach additional information to the request log line. | `context => context.originalUrl + '\\n' + context.get('User-Agent')`\n| res | any: function(context: object) | `context => context.originalUrl` | Attach additional information to the response log line. | `context => context.originalUrl + '\\n' + context.get('User-Agent')`\n\n## Developing\nInstall development dependencies\n```\n$ npm install\n```\n\nCreate new fixtures to test against\n```\n$ npm run create-fixtures\n```\n\nManually review fixtures (you need a program that renders ANSI escape codes)\n```\n$ less -r test/fixtures/*\n```\n\nRun tests\n```\n$ npm test\n```\n\nRun code linter\n```\n$ npm run lint\n```\n\nCompile to ES5 from /src to /lib\n```\n$ npm run compile\n```\n\nInitialize demo project\n```\n$ git clone git@github.com:PabloSichert/concurrency-logger demo\n$ cd demo\ndemo $ git checkout gh-pages\ndemo $ npm install\n```\n\nBuild demo\n```\ndemo $ npm run compile\n```\n\n[npm-url]: https://npmjs.org/package/concurrency-logger\n[npm-image]: https://badge.fury.io/js/concurrency-logger.svg\n[travis-url]: https://travis-ci.org/PabloSichert/concurrency-logger\n[travis-image]: http://img.shields.io/travis/PabloSichert/concurrency-logger.svg\n[coveralls-url]:https://coveralls.io/r/PabloSichert/concurrency-logger\n[coveralls-image]:https://coveralls.io/repos/PabloSichert/concurrency-logger/badge.svg\n[david-dm-url]:https://david-dm.org/PabloSichert/concurrency-logger\n[david-dm-image]:https://david-dm.org/PabloSichert/concurrency-logger.svg\n[david-dm-dev-url]:https://david-dm.org/PabloSichert/concurrency-logger#info=devDependencies\n[david-dm-dev-image]:https://david-dm.org/PabloSichert/concurrency-logger/dev-status.svg\n","created":"2016-10-23T02:41:59.960Z","modified":"2016-10-30T16:02:46.800Z","lastPublisher":{"name":"pablosichert","email":"mail@pablosichert.de"},"owners":[{"name":"pablosichert","email":"mail@pablosichert.de"}],"other":{"_attachments":{},"_from":".","_id":"concurrency-logger","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/concurrency-logger-2.0.1.tgz_1477843366202_0.6220357134006917"},"_npmUser":{"name":"pablosichert","email":"mail@pablosichert.de"},"_npmVersion":"3.10.8","_rev":"3-f78b18fb17a0105c7754cb64e5f401c8","_shasum":"e832532489efa101baa74daa67d40cb683fb9b0e","author":{"name":"Pablo Sichert","email":"mail@pablosichert.de"},"bugs":{"url":"https://github.com/PabloSichert/concurrency-logger/issues"},"directories":{},"dist-tags":{"latest":"2.0.1"},"dist":{"shasum":"e832532489efa101baa74daa67d40cb683fb9b0e","tarball":"http://registry.npmjs.org/concurrency-logger/-/concurrency-logger-2.0.1.tgz"},"maintainers":[{"name":"pablosichert","email":"mail@pablosichert.de"}],"readmeFilename":"README.md","time":{"modified":"2016-10-30T16:02:46.800Z","created":"2016-10-23T02:41:59.960Z","1.0.0":"2016-10-23T02:41:59.960Z","2.0.0":"2016-10-30T14:34:21.498Z","2.0.1":"2016-10-30T16:02:46.800Z"}}}