{"name":"http-fetch","version":"0.1.8","description":"使用fetch代替ajax请求","keywords":["fetch","ajax","http","request"],"main":"http-fetch.js","repository":"https://github.com/aweiu/http-fetch","license":"ISC","gitHead":"727f0589b2492c636cf4204433bc0c48d34c8367","homepage":"https://github.com/aweiu/http-fetch#readme","scripts":{},"versions":[{"number":"0.0.0","date":"2016-10-31T08:22:37.534Z"},{"number":"0.0.1","date":"2016-11-01T03:33:45.738Z"},{"number":"0.0.2","date":"2016-11-01T03:36:17.634Z"},{"number":"0.0.3","date":"2016-11-01T07:24:21.017Z"},{"number":"0.0.4","date":"2016-11-01T09:02:10.296Z"},{"number":"0.0.5","date":"2016-11-01T09:37:41.490Z"},{"number":"0.0.6","date":"2016-11-01T10:27:19.140Z"},{"number":"0.0.7","date":"2016-11-02T10:22:43.766Z"},{"number":"0.0.8","date":"2016-11-03T11:56:23.649Z"},{"number":"0.0.9","date":"2016-11-03T12:38:47.582Z"},{"number":"0.1.0","date":"2016-11-04T12:13:22.509Z"},{"number":"0.1.1","date":"2016-11-05T14:41:21.998Z"},{"number":"0.1.2","date":"2016-11-05T15:17:31.882Z"},{"number":"0.1.3","date":"2016-11-05T15:27:23.426Z"},{"number":"0.1.4","date":"2016-11-05T15:32:47.565Z"},{"number":"0.1.5","date":"2016-11-17T06:31:04.692Z"},{"number":"0.1.6","date":"2016-12-08T02:26:53.820Z"},{"number":"0.1.7","date":"2016-12-15T08:12:51.072Z"},{"number":"0.1.8","date":"2017-02-16T07:27:07.312Z"}],"readme":"# http-fetch\n使用fetch代替ajax请求\n\n## 安装\n```\nnpm install http-fetch\n```\n## 使用\n```\nimport httpFetch from 'http-fetch'\n// 发起一个get请求\nhttpFetch.get('/users')\n  .then(response => console.log(response))\n```\n## 配置\n### onError\n全局错误处理。\n```\nhttpFetch.onError = error => console.dir(error)\n```\n**Error**对象\n```\n{\n  url: '请求地址',\n  body: '请求参数',\n  method: '请求方法',\n  status: 'http返回码',\n  data: '请求结果',\n  type: 'httpFetchError'\n}\n```\n### onRequest\n请求提交的拦截器。一般用于修改提交参数／终止请求\n```\n// 修改提交参数\nhttpFetch.onRequest = (request, next) {\n  request.body = '...'\n  next()\n}\n// 终止请求\nhttpFetch.onRequest = (request, next) {\n  // 传入任意非undefined参数表示终止请求并立即resolve你传入的参数\n  next('不给你请求！')\n}\n```\n**Request**对象\n```\n{\n  url: '请求地址',\n  body: '请求参数',\n  method: '请求方法',\n  options: '请求配置'\n}\n```\n### onResponse\n请求返回的拦截器。一般用于修改返回参数／**返回自定义异常**<br>\n```\n// 修改返回参数\nhttpFetch.onResponse = (response, next) => {\n  response.data = '...'\n  next()\n}\n// 返回自定义异常\n// 请认真看下面错误对象的定义过程\n// 抛出的异常会正常走全局onError ＝> 局部catch的流程\nhttpFetch.onResponse = (response, next) => {\n  var data = response.data\n  if (data.hasOwnProperty('err_msg')) {\n    var error = Error(data.err_msg)\n    // httpFetch仅会处理type = 'httpFetchError'的错误，否则抛出\n    error.type = 'httpFetchError'\n    throw error\n  } else next()\n}\n```\n**Response**对象\n```\n{\n  url: '请求地址',\n  body: '请求参数',\n  method: '请求方法',\n  options: '请求配置',\n  data: '请求结果'\n}\n```\n**next([resolveData])**方法<br>\n你可以传入一个参数来代替本次的Response\n```\nhttpFetch.onResponse = (response, next) => {\n  if (response.url === '/hello') next({msg: 'hello'})\n  else next()\n}\nhttpFetch.get('/hello')\n  .then(response => {\n    // response: {msg: 'hello'}\n  })\n```\n### cache\n应用层缓存。默认false（**仅缓存'get', 'head', 'jsonp'这三种请求**）\n```\n// 同一个请求会从缓存中取，除非刷新了页面。\nhttpFetch.cache = true\n// 你也可以设置一个超时时间（单位：毫秒），过期则重新获取\nhttpFetch.cache = 3600000\n```\n### loading\n获取数据的等待提示。用于给所有请求添加等待提示。\n```\n// 配置获取数据的等待提示\nhttpFetch.loading = {\n  show () {\n    // 这里写等待提示的显示方法\n  },\n  hide () {\n    // 这里写等待提示的关闭方法\n  }\n}\n```\n### requestOptions\n[fetch request请求配置](https://developer.mozilla.org/en-US/docs/Web/API/Request)\n```\n// 注意：method和body配置项你无法修改，因为这两项已经默认在你的请求方法中了\nhttpFetch.requestOptions = {\n  headers: {\n    // 配置请求头\n  },\n  // 配置跨域模式\n  mode: 'no-cors'\n}\n```\n\n## 默认行为\n* 所有Response.data||Error.data优先转成json格式\n* 如果**600**毫秒内没有返回数据才会调用loading.show()\n* 'Content-Type': 'application/x-www-form-urlencoded'\n* 'Cache-Control': 'no-cache'\n* 'X-Requested-With': 'XMLHttpRequest'\n* credentials: 'same-origin'\n* jsonp请求的回调参数名为'callback'\n\n## 请求方法\n* get (url, [option])\n* head (url, [option])\n* jsonp (url, [option])\n* delete (url, body, [option])\n* post (url, body, [option])\n* put (url, body, [option])\n* patch (url, body, [option])\n\n### url\n请求地址\n\n### body\n请求参数 [Fetch Body](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Body)\n\n### option\n```\n{\n  // 错误处理模式 0：交给全局onError处理 1：本次请求自行catch处理 2：全局onError＋自行catch处理 默认：0\n  errMode: 0,\n  // 是否走全局request拦截器 默认：true\n  hookRequest: true,\n  // 是否走全局response拦截器 默认：true\n  hookResponse: true,\n  // 本次请求是否显示等待提示 默认：true\n  loading: true,\n  // 本次请求的缓存配置 默认：全局cache配置\n  cache: true,\n  // 本次请求的fetch request配置 默认：全局requestOptions配置\n  requestOptions: {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }\n}\n```\n*cache的检测机制是通过对比request.url和request.method是否相同来决定是否复用*\n\n## 其他方法\n### jsonToUrlParams (json)\n用于将json对象转成url参数\n```\nvar json = {\n  name: '张三',\n  age: 18\n}\nconsole.log(httpFetch.jsonToUrlParams(json))\n// 返回：'name=张三&age=18'\n```\n\n## 兼容问题\n如果浏览器原生不支持fetch方法，在使用本插件之前，先在您项目的入口文件中引入一次[Fetch Polyfill](https://github.com/github/fetch)即可解决。\n","created":"2016-10-31T08:22:37.534Z","modified":"2017-02-16T07:27:07.312Z","lastPublisher":{"name":"aweiu","email":"328080339@qq.com"},"owners":[{"name":"aweiu","email":"328080339@qq.com"}],"other":{"_attachments":{},"_from":".","_id":"http-fetch","_nodeVersion":"6.5.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/http-fetch-0.1.8.tgz_1487230025491_0.34002127568237484"},"_npmUser":{"name":"aweiu","email":"328080339@qq.com"},"_npmVersion":"3.10.3","_rev":"19-ba7d01e99a092bf3dcf2ba08578d43fc","_shasum":"f6c6150b9df5fdd61eafda8ca8a36445954f4788","author":{"name":"余阿伟"},"bugs":{"url":"https://github.com/aweiu/http-fetch/issues"},"directories":{},"dist-tags":{"latest":"0.1.8"},"dist":{"shasum":"f6c6150b9df5fdd61eafda8ca8a36445954f4788","tarball":"https://registry.npmjs.org/http-fetch/-/http-fetch-0.1.8.tgz"},"maintainers":[{"name":"aweiu","email":"328080339@qq.com"}],"readmeFilename":"README.md","time":{"modified":"2017-02-16T07:27:07.312Z","created":"2016-10-31T08:22:37.534Z","0.0.0":"2016-10-31T08:22:37.534Z","0.0.1":"2016-11-01T03:33:45.738Z","0.0.2":"2016-11-01T03:36:17.634Z","0.0.3":"2016-11-01T07:24:21.017Z","0.0.4":"2016-11-01T09:02:10.296Z","0.0.5":"2016-11-01T09:37:41.490Z","0.0.6":"2016-11-01T10:27:19.140Z","0.0.7":"2016-11-02T10:22:43.766Z","0.0.8":"2016-11-03T11:56:23.649Z","0.0.9":"2016-11-03T12:38:47.582Z","0.1.0":"2016-11-04T12:13:22.509Z","0.1.1":"2016-11-05T14:41:21.998Z","0.1.2":"2016-11-05T15:17:31.882Z","0.1.3":"2016-11-05T15:27:23.426Z","0.1.4":"2016-11-05T15:32:47.565Z","0.1.5":"2016-11-17T06:31:04.692Z","0.1.6":"2016-12-08T02:26:53.820Z","0.1.7":"2016-12-15T08:12:51.072Z","0.1.8":"2017-02-16T07:27:07.312Z"}}}