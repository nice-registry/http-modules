{"name":"angular-http-batcher","version":"1.11.2","description":"Enables transparent HTTP batch requests with Angular","main":"angular-http-batcher.min.js","scripts":{"test":"default"},"repository":"https://github.com/jonsamwell/angular-http-batcher","keywords":["angularjs","performance","http","http batch"],"license":"MIT","homepage":"https://github.com/jonsamwell/angular-http-batcher","devDependencies":{"bower":"^1.3.4","chai":"^1.9.1","grunt":"^0.4.5","grunt-cli":"^0.1.13","grunt-contrib-clean":"^0.5.0","grunt-contrib-concat":"^0.4.0","grunt-contrib-connect":"^0.7.1","grunt-contrib-copy":"^0.5.0","grunt-contrib-jshint":"^0.10.0","grunt-contrib-uglify":"^0.4.0","grunt-jsbeautifier":"^0.2.7","grunt-karma":"^0.8.3","grunt-plato":"^1.0.0","karma":"^0.12.16","karma-chai":"^0.1.0","karma-chrome-launcher":"^0.1.4","karma-coverage":"^0.2.4","karma-ie-launcher":"^0.1.5","karma-mocha":"^0.1.3","karma-phantomjs-launcher":"^0.1.4","karma-sinon":"^1.0.3","mocha":"^1.20.1","sinon":"^1.10.2"},"ignore":["**/.*","node_modules","bower_components","tests","reports"],"gitHead":"18daecf74020868f370c65f0c337589220265031","versions":[{"number":"1.11.2","date":"2015-08-25T01:12:05.851Z"}],"readme":"Angular Http Batcher - enabling transparent HTTP batch request with AngularJS\r\n====================\r\n\r\nThe biggest performance boost you will get with modern single page style apps is to reduce the number of HTTP request you \r\nsend.  This module has been designed to batch http requests to the same endpoint following the http 1.1 batch spec and after the\r\n1.11.0 update it can now support serialising to any number of batch formats and I'm planning to implement that Facebook batch protocol very soon.  All you need to do is configure the batch endpoint with the library and the rest is taken care of!\r\n\r\nSee my original blog post for a detailed overview - http://jonsamwell.com/batching-http-requests-in-angular/\r\n\r\n<h3 id=\"angular-http-batcher-getting-started\">Getting Started</h3>\r\n\r\nInstall the module via bower or download the latest [distribution](https://github.com/jonsamwell/angular-http-batcher/blob/master/dist/angular-http-batch.min.js) from github.\r\n\r\n```language-javascript\r\nbower install angular-http-batcher --save-dev \r\n```\r\n\r\nInclude the javascript file in your html.\r\n\r\n```language-markup\r\n<script src=\"bower_components/angular-http-batcher/dist/angular-http-batch.min.js\"></script>\r\n```\r\n\r\nAdd the module as one of you application's dependencies.\r\n\r\n```langauge-javascript\r\nangular.module('myApp', ['jcs.angular-http-batch']);\r\n```\r\n\r\nThis module aims to be as transparent as possible.  I didn't want to add specific methods to send batch requests manually (although this feature is in the pipeline) as I think this should happen transparently for the developer so you are not tying your application to a specific implementation.  So in order for the library to be able to digisuse batchable HTTP request you need to register an endpoint that can accept a HTTP 1.1 batch request.\r\n\r\n```language-javascript\r\nangular.module('myApp', ['jcs.angular-http-batch']);\r\n   .config([\r\n      'httpBatchConfigProvider',\r\n          function (httpBatchConfigProvider) {\r\n             httpBatchConfigProvider.setAllowedBatchEndpoint(\r\n                     // root endpoint url\r\n                     'http://api.myapp.com',\r\n                     \r\n                     // endpoint batch address\r\n                     'http://api.myapp.com/batch',\r\n                     \r\n                     // optional configuration parameters\r\n                     {\r\n                     \tmaxBatchedRequestPerCall: 20\r\n                     });\r\n         }\r\n]);\r\n```\r\n\r\nThe root endpoint url is simply the base address of your api and the endpoint batch address is the url of the method that can accept the batch request (usually just /batch or /$batch).  You are able to pass some optional configuration paramaters to this call in the third argument (see below)\r\n\r\nThe setAllowedBatchEndpoint has some options that can be passed in as a third parameter to the call which are explained below.\r\n\r\n```language-javascript\r\n{\r\n\tmaxBatchedRequestPerCall: 10,\r\n\tminimumBatchSize: 2,\r\n\tbatchRequestCollectionDelay: 100,\r\n\tignoredVerbs: ['head'],\r\n    sendCookies: false,\r\n    enabled: true,\r\n    adapter: 'httpBatchAdapter' //defaults to this value we currently also support a node js multifetch format as well\r\n}\r\n```\r\n\r\n####adapter\r\nThe key of the adapter to use to serialise/deserialise batch requests.  Defaults to the HTTP 1.1 adapter 'httpBatchAdapter'.\r\n\r\nCurrent adapters are:\r\n\r\n 1. 'httpBatchAdapter': supports the HTTP 1.1 spec and used by .Net (WebAPI) and JAVA servers.\r\n 2. 'nodeJsMultiFetchAdapter': supports batching GET requests to a node server that uses the multifetch library.\r\n    \r\nComing soon:\r\n\r\n 1. 'facebookAdapter': will support the facebook batching protocol.\r\n\r\n**Please request adapters that are not present.**\r\n\r\nAdapters convert http requests into a single batch request and parse the batch response.  They consist of two methods defined below.\r\n\r\nThis adapter parameter can also be an object with the two below functions if you need to be more specific about the way\r\nrequests and responses are handled.\r\n\r\n```javascript\r\n   /**\r\n    * Builds the single batch request from the given batch of pending requests.\r\n    * Returns a standard angular httpConfig object that will be use to invoke the $http service.\r\n    * See:\r\n    * https://developers.google.com/storage/docs/json_api/v1/how-tos/batch\r\n    * http://blogs.msdn.com/b/webdev/archive/2013/11/01/introducing-batch-support-in-web-api-and-web-api-odata.aspx\r\n    *\r\n    * @param requests - the collection of pending http request to build into a single http batch request.\r\n    * @param config - the http batch config.\r\n    * @returns {object} - a http config object.\r\n    */\r\n   function buildRequestFn(requests, config) {\r\n     var httpConfig = {\r\n         method: 'POST',\r\n         url: config.batchEndpointUrl,\r\n         cache: false,\r\n         headers: config.batchRequestHeaders || {}\r\n       };\r\n\r\n     // do processing...\r\n\r\n     return httpConfig;\r\n   }\r\n\r\n   /**\r\n    * Parses the raw response into an array of HttpBatchResponseData objects.  If is this methods job\r\n    * to parse the response and match it up with the orginal request object.\r\n    * @param rawResponse\r\n    * @param config\r\n    * @returns {Array.HttpBatchResponseData[]}\r\n    */\r\n   function parseResponseFn(requests, rawResponse, config) {\r\n     var batchResponses = []; // array of HttpBatchResponseData\r\n\r\n     //do processing..\r\n\r\n     return batchResponses;\r\n   }\r\n```\r\n\r\n####maxBatchedRequestPerCall\r\nThe maximum number of single http request that are allow to be sent in one http batch request.  If this limit is reached the call will be split up into multiple batch requests.  This option defaults to 10 request per batch but it is probably worth playing around with this number to see the optimal batch size between total request size and response speed.\r\n\r\n####minimumBatchSize\r\nThe smallest number of individual calls allowed in a batch request.  This has a default value of 2 as I think the overhead for sending a single HTTP request wrapped up in a batch request on the server would out wieght the efficency.  Therefore if only one request is in the batch that request is allow to continue down the normal $http pipeline.\r\n\r\n####ignoredVerbs\r\nThis is a string array of the HTTP verbs that are **not** allowed to form part of a batch request.  By default HEAD requests will not be batched.  If for instance you did not want to batch HEAD and DELETE calls you would pass in this array as an option <code>['head', 'delete']</code>\r\n\r\n####enabled\r\nTrue by default.  If this is set to false the batcher will ignore all requests and they will be send as normal single HTTP requests.\r\n\r\n####canBatchRequest\r\nAn optional function which determines if the request can be batched - if present this overrides the default mechanism used by the library.  It takes in the url and http method of a pending request and returns true if this request can be batched otherwise false.\r\n\r\nFor example:\r\n\r\n```language-javascript\r\n    function(url, method) {\r\n      return url.indexOf('api') > -1 && method.toLowerCase() === 'get';\r\n    }\r\n```\r\n\r\n####batchRequestHeaders\r\n\r\nAn optional object of header keys and values that will be added to a batched request header's before sending to the server.\r\nFor instance java servlet <= 3.1 parses multipart requests looking for the Content-Disposition header, expecting all multipart requests to include form data\r\n\r\n{\r\n    batchRequestHeaders: {'Content-disposition': 'form-data'}\r\n}\r\n\r\nSee notes on running this with java servlet <= 3.1\r\n\r\n####batchPartRequestHeaders\r\n\r\nAn optional object of header keys and values that will be added to each batched request part header's before sending to the server.\r\nFor instance java servlet <= 3.1 parses multipart requests looking for the Content-Disposition header, expecting all multipart requests to include form data\r\n\r\n{\r\n    batchPartRequestHeaders: {'Content-disposition': 'form-data'}\r\n}\r\n\r\nSee notes on running this with java servlet <= 3.1\r\n\r\n####sendCookies\r\nFalse by default to reduce request size.  If this is set to true cookies available on the document.cookie property will be set\r\nin each segment of a batch request.  Note that only non HTTPOnly cookies will be sent as HTTPOnly cookies cannot be access by JavaScript\r\nbecause of security limitations.\r\n\r\nNote that if you are sending CORS request you will have to enable withCredentials on $http to allow cookies to be sent on the XHR request.\r\n\r\n```language-javascript\r\n    angular.module('myApp').config(['$httpProvider', function($httpProvider) {\r\n        $httpProvider.defaults.withCredentials = true;\r\n    }]);\r\n```\r\n\r\nAlso ensure the server responds to the OPTIONS call with the below header:\r\n\r\n```language-csharp\r\nAccess-Control-Allow-Credentials: true\r\n\r\n// As an attribute on the controller\r\n[EnableCors(\"*\", \"*\", \"*\", SupportsCredentials=true)]\r\n\r\nor\r\n\r\n// Comples scenario on the config\r\nconfig.EnableCors();\r\nvar defaultPolicyProvider = new EnableCorsAttribute(\"*\", \"*\", \"*\");\r\ndefaultPolicyProvider.SupportsCredentials = true; //important if you are sending cookies\r\nAttributeBasedPolicyProviderFactory policyProviderFactory = new AttributeBasedPolicyProviderFactory();\r\npolicyProviderFactory.DefaultPolicyProvider = defaultPolicyProvider;\r\nconfig.SetCorsPolicyProviderFactory(policyProviderFactory);\r\n\r\nconfig.Routes.MapHttpRoute(\r\n    name: \"BatchApi\",\r\n    routeTemplate: \"api/batch\",\r\n    defaults: null,\r\n    constraints: null,\r\n    handler: new CorsMessageHandler(config) { InnerHandler = new DefaultHttpBatchHandler(GlobalConfiguration.DefaultServer) });\r\n```\r\n\r\n####batchRequestCollectionDelay\r\nThis is undoubtedly the most important option.  As this module tries to be as transparent as possible to the user.\r\n\r\nThe default time in milliseconds the http batcher should wait to collection all request to this domain after the first http call that can be batched has been collect.  This defaults to 100ms.  Therefore if you send a HTTP GET call that can be batched the HTTP batcher will receive this call and wait a further 100ms before sending the call in order to wait for other calls to the same domain in order to add them to the current batch request.  If no other calls are collected the initial HTTP call will be allowed to continue as normal and will not be batched unless the config property - **minimumBatchSize** is set to one.\r\n\r\n<h4 id=\"flushing-all-requests\">Immediately flushing all pending requests</h4>\r\nIn some instances you might want to immediately send all pending request regardless of if the request quota or timeout limit has been reached.  To do this you can simply call the flush method on the httpBatcher service and optionally pass in the url of the batch endpoint you want to flush (if no parameter is passed in all pending requests to all endpoints are flushed).\r\n\r\n```language-javascript\r\nangular.module('myApp', ['jcs.angular-http-batch']);\r\n   .run([\r\n      'httpBatcher',\r\n          function (httpBatcher) {\r\n             httpBatcher.flush();\r\n         }\r\n]);\r\n```\r\n\r\n<h3 id=\"angular-http-batcher-getting-started-with-asp-web-api\">Configuring .Net Web API 2 for Batch Requests</h3>\r\n\r\nThis is **really** simple the web api team have done a really good job here.  To enable batch request handling you just add a new route to your application and the rest is done for you!  It's so easy I don't see any reason for you not to do it!  See [this link](http://blogs.msdn.com/b/webdev/archive/2013/11/01/introducing-batch-support-in-web-api-and-web-api-odata.aspx) for a more detailed setup guide.  Just add the below code to your web api configuration class and you are good to go!\r\n\r\n```language-csharp\r\nconfiguration.Routes.MapHttpBatchRoute(\r\n        routeName:\"batch\",\r\n        routeTemplate:\"api/batch\",\r\n        batchHandler:new DefaultHttpBatchHandler(server));\r\n```\r\n\r\n<h4 id=\"running-with-java-servlet-3-1\">Configuring for Java Servlet <= 3.1</h4>\r\nJava Servlet <= 3.1 parses multipart requests looking for the Content-Disposition header, expecting all multipart requests to include form data.\r\nIt also expects a content disposition header per request part in the batch.\r\n\r\nTherefore you will need to setup the library to do this.  Add the below to your config object when initialising the batch endpoint.\r\n\r\n```language-javascript\r\n{\r\n    batchRequestHeaders: {'Content-disposition': 'form-data'},\r\n    batchPartRequestHeaders: {'Content-disposition': 'form-data'}\r\n}\r\n```\r\n","starsCount":1,"created":"2015-08-25T01:12:05.851Z","modified":"2015-08-25T01:12:05.851Z","lastPublisher":{"name":"jonsamwell","email":"jonsamwell@gmail.com"},"owners":[{"name":"jonsamwell","email":"jonsamwell@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"angular-http-batcher","_npmUser":{"name":"jonsamwell","email":"jonsamwell@gmail.com"},"_npmVersion":"1.4.28","_rev":"1-f91f0158c522bbb6270b03a1a34f9af8","_shasum":"485d23c27652221842246f58f998bda29802731d","author":{"name":"Jon Samwell","email":"jonsamwell@gmail.com","url":"http://jonsamwell.com"},"bugs":{"url":"https://github.com/jonsamwell/angular-http-batcher/issues"},"directories":{},"dist-tags":{"latest":"1.11.2"},"dist":{"shasum":"485d23c27652221842246f58f998bda29802731d","tarball":"http://registry.npmjs.org/angular-http-batcher/-/angular-http-batcher-1.11.2.tgz"},"maintainers":[{"name":"jonsamwell","email":"jonsamwell@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-08-25T01:12:05.851Z","created":"2015-08-25T01:12:05.851Z","1.11.2":"2015-08-25T01:12:05.851Z"},"users":{"jonabasque":true}}}