{"name":"express-bifrost","version":"0.0.4","description":"Bridges the HTTP world (Express middleware) to the pure controller world","main":"index.js","repository":"https://github.com/atesgoral/express-bifrost","license":"MIT","versions":[{"number":"0.0.1","date":"2016-12-16T15:49:15.191Z"},{"number":"0.0.2","date":"2016-12-16T20:56:30.005Z"},{"number":"0.0.3","date":"2016-12-17T04:58:13.094Z"},{"number":"0.0.4","date":"2016-12-17T04:59:33.436Z"}],"readme":"# express-bifrost\nDecouples the HTTP world (Express middleware) from the rest of your code so that HTTP concerns don't leak between them. Actually, express-bifrost doesn't do the decoupling itself, but provides a pattern to encourage you to do it.\n\n![Thor wades while the æsir ride by Frølich](https://cloud.githubusercontent.com/assets/50832/21269637/76d0ce1c-c381-11e6-901b-3ea18580322c.jpg)\n\nAs analogies that are pushed too far for the sake of a catchy name go:\n\n> [Bifröst](https://en.wikipedia.org/wiki/Bifr%C3%B6st) is a burning rainbow bridge that reaches between Midgard (Earth) and Asgard, the realm of the gods.\n\n## Usage\n\nInstall from npm: `npm install express-bifrost` or `yarn add express-bifrost`\n\nInclude in your code:\n\n```js\nconst bifrost = require('express-bifrost');\n```\n\nor\n\n```js\nimport bifrost from 'express-bifrost';\n```\n\nWhere you would typically pass the Request and Response objects of Express directly down to a controller, use express-bifrost as a bridge between the HTTP Request/Response objects and an HTTP-agnostic controller. express-bifrost acts as a factory for Express middleware.\n\nBefore:\n\n```js\n// Controller directly knows about HTTP Request/Response\nfunction readHorse(req, res, next) {\n  const horseId = req.params.horseId;\n\n  Horse\n    .findById(horseId)\n    .then(horse => {\n      if (horse) {\n        res.json(horse)\n      } else {\n        res.status(404).send('Horse not found');\n      }\n    })\n    .catch(next);\n}\n\napp.get('/horses/:horseId', readHorse);\n```\n\nAfter:\n\n```js\n// Controller is HTTP-agnostic -- just returns a Promise\nfunction readHorse(horseId) {\n  return Horse\n    .findById(horseId)\n    .then(horse => {\n      if (horse) {\n        return horse;\n      } else {\n        throw new Error('Horse not found');\n      }\n    });\n}\n\napp.get('/horses/:horseId', bifrost(req => {\n  // Collect everything we need from the Request\n  const horseId = req.params.horseId;\n\n  // Pass on to non-HTTP land\n  return readHorse(horseId);\n});\n\n// Or, super-compact version:\napp.get('/horses/:horseId', bifrost(req => readHorse(req.params.horseId));\n```\n\nBy default, express-bifrost sends the promise resolution value as the response using `.send()`, which will automatically send objects as JSON. Also, promise rejection values (errors) are passed down to other middleware through `next()`. When you need fine-grained control over how responses are sent, and how errors are handled, you can use the extended syntax and pass express-bifrost an object with `req`, `res` and `err` properties, which are all optional:\n\n```js\napp.get('/horses/:horseId', bifrost({\n  req: req => readHorse(req.params.horseId),\n  res: (res, data) => {\n    // Wrap the response returned from the request handler inside an envelope\n    res.json({\n      meta: { horseId },\n      data\n    });\n  },\n  err: (res, next, error) => {\n    if (/not found/i.test(error.message)) { // Note: Hacky! Just OK for the sake of this example.\n      // Be nice and return a 404\n      res.status(404).send(error.message);\n    } else {\n      // Pass down to other middleware / default error handling\n      next(error);\n    }\n  }\n});\n```\n\n## API\n\n_Actually, the implementation of express-bifrost is so tiny, you might be better off just reading [the entire source](index.js)._\n\n### Options\n\nexpress-bifrost takes a single argument which is either an Object or a Function. The Function flavour acts as a shorthand for the Object flavour with just the `req` property. The following two forms are functionally identical:\n\n```js\nbifrost(req => fetchMySword(req.params.urgency))\n\nbifrost({\n  req: req => fetchMySword(req.params.urgency)\n})\n```\n\nThe Object flavour expects the following properties:\n\n#### req\n\n_Function_, _optional_. The request handler. This should be a function that takes an [Express Request](http://expressjs.com/en/api.html#req) object instance. Its purpose should be to grab whatever is needed from the request object and pass it down to controller/service layers in your application. The function may return a Promise. It may also return a value to be returned in the response or throw an exception to trigger error handling.\n\nExamples:\n\n```js\nbifrost({\n  req: req => {\n    return authenticate(req.body.username, req.body.password); // returns a Promise\n  }\n})\n\nbifrost({\n  req: req => {\n    if (isAuthenticated(req.body.username, req.body.password)) { // returns a Boolean\n      return 'Yay!';\n    } else {\n      throw new Error('Nay!');\n    }\n  }\n})\n```\n\n#### res\n\n_Function_, _optional_. The response handler. This should be a function that takes an [Express Response](http://expressjs.com/en/api.html#res) object and the data returned from the request handler (`undefined` if no response handler was provided). The function takes over express-bifrost's default response handling of sending whatever was returned by the request handler via the Response object's `.send()` method.\n\nExample:\n\n```js\nbifrost({\n  req: req => collateDashboardData(),\n  res: (res, data) => res.render('dashboard', data)\n})\n```\n\n#### err\n\n_Function_, _optional_. The error handler. This should be a function that takes an Express Response object, the Express `next` callback handler, and an error value. The function takes over express-bifrost's default error handling of passing the error value down to the Express `next` callback. You can use this to apply custom error handling depending on the error value and respond with the appropriate HTTP response codes.\n\nExample:\n\n```js\nbifrost({\n  err: (res, next, error) => {\n    // Handle custom errors thrown by the controller\n    if (error instanceof AuthorizationError) {\n      res.status(403).end();\n    } else if (error instanceof ResourceNotFoundError) {\n      res.status(404).end();\n    } else {\n      next(error);\n    }\n  }\n})\n```\n\n### Defaults\n\nThe `defaults` property of express-bifrost holds default values for the options above. All default options are set to `null` by default. Override any of these properties to have global handlers that are applied across all express-bifrost middleware instances.\n\nExample:\n\n```js\n// Generic response handler\nbifrost.defaults.res = (res, data) => {\n  if (data instanceof File) {\n    res.sendFile(data.path);\n  } else {\n    res.json(data);\n  }\n};\n\n// Generic error handler\nbifrost.defaults.err = (res, next, error) => {\n  if (error instanceof AuthorizationError) {\n    res.status(403).end();\n  } else if (error instanceof ResourceNotFoundError) {\n    res.status(404).end();\n  } else if (error instanceof BadArgumentsError) {\n    res.status(400).end();\n  } else {\n    res.status(500).end();\n  }\n};\n```\n\n## License\n\nMIT\n\n## Credits\n\nInspired by [fxrm-action](https://github.com/fxrm/fxrm-action), written by [Nick Matantsev](https://github.com/unframework).\n","created":"2016-12-16T15:49:15.191Z","modified":"2016-12-17T04:59:33.436Z","lastPublisher":{"name":"atesgoral","email":"ates@magnetiq.com"},"owners":[{"name":"atesgoral","email":"ates@magnetiq.com"}],"other":{"_attachments":{},"_id":"express-bifrost","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/express-bifrost-0.0.4.tgz_1481950772710_0.257353174732998"},"_npmUser":{"name":"atesgoral","email":"ates@magnetiq.com"},"_rev":"4-0e2860fbf09b9be324e242e3eade3860","author":{"name":"Ates Goral","email":"ates@magnetiq.com"},"directories":{},"dist-tags":{"latest":"0.0.4"},"dist":{"shasum":"396b975e07c624b8178add5f0aa358cc21675828","tarball":"http://registry.npmjs.org/express-bifrost/-/express-bifrost-0.0.4.tgz"},"maintainers":[{"name":"atesgoral","email":"ates@magnetiq.com"}],"readmeFilename":"README.md","time":{"modified":"2016-12-17T04:59:33.436Z","created":"2016-12-16T15:49:15.191Z","0.0.1":"2016-12-16T15:49:15.191Z","0.0.2":"2016-12-16T20:56:30.005Z","0.0.3":"2016-12-17T04:58:13.094Z","0.0.4":"2016-12-17T04:59:33.436Z"}}}