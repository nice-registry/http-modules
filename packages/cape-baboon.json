{"name":"cape-baboon","version":"1.5.1","description":"Request throttler for http requests against enemy webservices with unpredictable behavior for mass requests.","main":"src/cape-baboon.js","scripts":{"test":"tap test/*.js --cov"},"repository":"https://github.com/HitFox/cape-baboon","keywords":["http","request","throttler","node","node.js"],"license":"MIT","homepage":"https://github.com/HitFox/cape-baboon#readme","dependencies":{"bluebird":"^3.1.1","lodash":"^4.0.0","request-promise":"^2.0.0"},"devDependencies":{"benchmark":"^2.0.0","nock":"^5.2.1","tap":"^5.1.1"},"gitHead":"77b9d3d488477236e8203593098205798c649c9e","versions":[{"number":"1.0.0","date":"2016-01-19T13:16:22.266Z"},{"number":"1.0.1","date":"2016-01-19T13:23:13.336Z"},{"number":"1.0.2","date":"2016-01-19T13:29:35.412Z"},{"number":"1.0.3","date":"2016-01-19T13:45:01.305Z"},{"number":"1.0.4","date":"2016-01-20T13:26:04.065Z"},{"number":"0.0.4","date":"2016-01-21T13:11:10.559Z"},{"number":"1.1.0","date":"2016-01-22T11:52:23.742Z"},{"number":"1.2.0","date":"2016-01-22T11:56:46.253Z"},{"number":"1.3.0","date":"2016-01-22T12:20:14.307Z"},{"number":"1.3.1","date":"2016-01-22T12:22:09.594Z"},{"number":"1.3.2","date":"2016-01-22T12:27:50.974Z"},{"number":"1.3.3","date":"2016-01-29T00:45:06.640Z"},{"number":"1.3.4","date":"2016-02-05T17:00:55.121Z"},{"number":"1.4.0","date":"2016-03-31T08:13:35.134Z"},{"number":"1.5.0","date":"2016-03-31T12:29:51.417Z"},{"number":"1.5.1","date":"2016-04-01T08:24:22.936Z"}],"readme":"[![npm version](https://badge.fury.io/js/cape-baboon.svg)](https://badge.fury.io/js/cape-baboon) \n[![npm](https://img.shields.io/npm/dt/cape-baboon.svg)](https://www.npmjs.com/package/cape-baboon)\n[![Build Status](https://travis-ci.org/HitFox/cape-baboon.svg?branch=master)](https://travis-ci.org/HitFox/cape-baboon)\n\n[![NPM](https://nodei.co/npm/cape-baboon.png?compact=true)](https://nodei.co/npm/cape-baboon/)\n# cape-baboon\nThe cape baboon is a node module for mass requests to helpless enemy servers.\n![Baboons with Car](http://i.dailymail.co.uk/i/pix/2009/07/20/article-1200917-05C68C79000005DC-619_634x399.jpg)\n\nIt throttles requests and retries them until they are completed regardless of limits and restrictions of the enemy server.\n\n## Installation\nin console:\n```\nnpm install cape-baboon\n```\nand in file:\n```javascript\nvar CapeBaboon = require('cape-baboon');\n```\n\n## Usage\n\n### creating a queue\nwith standard configuration:\n```javascript\nvar baboon = new CapeBaboon();\n```\nwith own config:\n```javascript\nvar baboon = new CapeBaboon({\n  RETRY_TIMEOUT: 1000,\n  LIMIT_PER_SECOND: 10\n});\n```\n### enqueue\nThere are two ways of enqueueing a request.\n\n1. The first way is creating a wrapper function for the call and the pushing it to the queue:\n\n  ```javascript\n  var requestCall = function(){\n    return Request('http://www.google.de')\n  };\n\n  baboon.push(requestCall);\n  ```\n2. The second way is using the more handy build in request method:\n\n  ```javascript\n  var requestOptions = {\n    uri: 'http://www.google.de'\n  };\n  baboon.request(requestOptions);\n  ```\n\n  The Cape baboon uses the request-promise node-module.\n  Please refer to: [request-promise](https://www.npmjs.com/package/request-promise) for documentation.\n\n\n\n## Configuration\nYou can configure every baboon queue with initializing it with a options object.\nAll the options are, as you might have guessed, optional.\nThis is the standard configuration:\n```javascript\nvar options = {\n  RETRY_TIMEOUT     : 1000,         // the time to wait for retrying a request\n  LIMIT_PER_SECOND  : 10,           // how many requests are available per second.\n                                    // rule of thumb: 4.0 * 1000/LIMIT_PER_SECOND\n  SLOT_RESPAWN      : 4000,         // Time in miliseconds for respawning the slots\n  TOO_MANY_REQUESTS : 429,          // The return Status from the Server if there are too many request sent to it. If applicable.\n  INFLIGHT          : 'inflight',   // Status while the request call is active\n  FULFILLED         : 'fulfilled',  // Status when the request was successfull\n  THROTTLED         : 'throttled',  // Status when the request gets throttled\n  ERRORED           : 'errored',    // Status when the request has thrown an internal error\n  RETRY_ERRORED     : false,        // whether to retry a request if it throws an internal error or not\n  RETRY_FAILED      : false,        // whether to retry a request if it returns an http error code\n\n  // Logger function\n  LOGGER            : function(text){console.log(text);}\n};\n```\n\n## Examples\n```javascript\nvar CapeBaboon = require('./../src/cape-baboon');\nvar Request = require('request-promise');\n\n// use standard options\nvar optionsÂ = {};\n\n// init CapeBaboon Queue\nvar baboon = new CapeBaboon(options);\n\n// define request call\nvar requestCall = function(){\n  return Request('http://www.google.de')\n};\n\n// give the request call to the baboon\nbaboon.push(requestCall);\n\n// push returns a promise so you can chain it. the result is the result from the request call\nbaboon.push(requestCall)\n        .then(function(result){\n                console.log(result);\n              }\n        );\n\n// the more handy way of request abstraction.\n// the request are build with the request-promise module. View https://www.npmjs.com/package/request-promise for documentation\nvar requestOptions = {\n  uri: 'http://www.google.de'\n};\n\n// .request fires the request-promise method wrapped in a request call function\nbaboon.request(requestOptions);\n\n// with promise chain\nbaboon.request(requestOptions)\n    .then(function (htmlString) {\n        // Process html...\n    })\n    .catch(function (err) {\n        // Crawling failed...\n    });\n```\n\n## How it works\n![How it works](http://i.giphy.com/pFwRzOLfuGHok.gif)\n\n## Thanks\nThe original code is written by [@agento](https://github.com/janv) and the module is enhanced and maintained by [@jbinsen](https://github.com/julianbei).\nSpecial thanks to [@LewisCowper](https://github.com/lewiscowper) for reviewing and testing.\n","created":"2016-01-19T13:16:22.266Z","modified":"2016-04-01T08:24:22.936Z","lastPublisher":{"name":"julianbei","email":"j.beisenkoetter@googlemail.com"},"owners":[{"name":"julianbei","email":"julian.beisenkoetter@hitfoxgroup.com"}],"other":{"_attachments":{},"_from":".","_id":"cape-baboon","_nodeVersion":"5.7.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/cape-baboon-1.5.1.tgz_1459499060503_0.34570110542699695"},"_npmUser":{"name":"julianbei","email":"j.beisenkoetter@googlemail.com"},"_npmVersion":"3.6.0","_rev":"1-d0f52fceea8e1d0696f686b01cf7980a","_shasum":"a353bf5731a8282f21aa2bcf34645664d53c98e9","author":{"name":"julianbei"},"bugs":{"url":"https://github.com/HitFox/cape-baboon/issues"},"directories":{},"dist-tags":{"latest":"1.5.1"},"dist":{"shasum":"a353bf5731a8282f21aa2bcf34645664d53c98e9","tarball":"http://registry.npmjs.org/cape-baboon/-/cape-baboon-1.5.1.tgz"},"maintainers":[{"name":"julianbei","email":"julian.beisenkoetter@hitfoxgroup.com"}],"readmeFilename":"README.md","time":{"modified":"2016-04-01T08:24:22.936Z","created":"2016-01-19T13:16:22.266Z","1.0.0":"2016-01-19T13:16:22.266Z","1.0.1":"2016-01-19T13:23:13.336Z","1.0.2":"2016-01-19T13:29:35.412Z","1.0.3":"2016-01-19T13:45:01.305Z","1.0.4":"2016-01-20T13:26:04.065Z","0.0.4":"2016-01-21T13:11:10.559Z","1.1.0":"2016-01-22T11:52:23.742Z","1.2.0":"2016-01-22T11:56:46.253Z","1.3.0":"2016-01-22T12:20:14.307Z","1.3.1":"2016-01-22T12:22:09.594Z","1.3.2":"2016-01-22T12:27:50.974Z","1.3.3":"2016-01-29T00:45:06.640Z","1.3.4":"2016-02-05T17:00:55.121Z","1.4.0":"2016-03-31T08:13:35.134Z","1.5.0":"2016-03-31T12:29:51.417Z","1.5.1":"2016-04-01T08:24:22.936Z"}}}