{"name":"orq","version":"0.1.8","description":"HTTP Request Queue Optimized for Web Workers.","main":"index.js","repository":"https://github.com/Kriegslustig/orq","license":"MIT","scripts":{"test":"ava","test:watch":"ava --watch","build":"npm run build:babel && npm run build:flow","build:babel":"babel src --ignore __tests__ -d .","build:watch":"chokidar src -c 'npm run build:babel'","build:flow":"flow gen-flow-files src/index.js > index.flow.js","prepublish":"npm run build","flow":"flow","flow:watch":"chokidar src -c 'flow'","flow-typed":"flow-typed","release":"standard-version"},"devDependencies":{"ava":"^0.19.1","babel-cli":"^6.24.1","babel-preset-es2015":"6.24.1","babel-preset-flow":"^6.23.0","babel-register":"^6.24.1","chokidar-cli":"^1.2.0","dom-event-target":"^1.0.0","flow-bin":"^0.46.0","flow-typed":"^2.1.2","standard-version":"^4.0.0"},"ava":{"files":["src/**/__tests__/*.js"],"require":["babel-register"],"babel":"inherit"},"dependencies":{"rxjs":"^5.4.0","uuid":"^3.0.1"},"gitHead":"f5737789bd37df2f3a8ae492b9c6ff5296b22c3b","homepage":"https://github.com/Kriegslustig/orq#readme","versions":[{"number":"0.1.0","date":"2017-05-21T15:46:13.628Z"},{"number":"0.1.1","date":"2017-05-21T17:01:08.620Z"},{"number":"0.1.2","date":"2017-05-24T17:20:10.388Z"},{"number":"0.1.3","date":"2017-05-24T17:55:24.934Z"},{"number":"0.1.4","date":"2017-05-24T18:02:55.469Z"},{"number":"0.1.5","date":"2017-05-25T19:06:59.664Z"},{"number":"0.1.6","date":"2017-05-25T19:31:15.812Z"},{"number":"0.1.7","date":"2017-05-25T19:34:22.842Z"},{"number":"0.1.8","date":"2017-06-01T14:50:00.284Z"}],"readme":"# orq - Observable Request Queue\n\n[![Build Status](https://travis-ci.org/Kriegslustig/orq.svg?branch=master)](https://travis-ci.org/Kriegslustig/orq)\n\nHTTP Request Queue Optimized for Web Workers.\n\n## Features\n\n* TTL cache\n* RESTful cache policy\n* Cancelable requests\n* Duplicate request elimination\n* Works with Web Workers\n* Platform independent\n\n## Usage\n\n`worker.js`\n\n```js\nimport { mkMemCache, mkCachePolicy, mkReceiver } from 'orq'\nimport request from '@orq/superagent'\n\nconst fiveMinutes = 300000\nconst applyCachePolicy = mkCachePolicy({ ttl: fiveMinutes })\nconst cache = applyCachePolicy(mkMemCache())\nmkReceiver(self, request, cache)\n```\n\n`main.js`\n\n```js\nimport mkInterface from 'orq/interface'\n\nconst orqWorker = new Worker('worker.js')\n\nconst orq = mkInterface(orqWorker)\n````\n\n## Featrues in detail\n\n### TTL cache\n\n```js\nmkCachePolicy({\n  ttl: 3600000, // 1 hour in milliseconds\n  ressources: {\n    'https://example.com/api': {\n      '/fish': {\n        // override default ttl, since fish get stale quickly\n        ttl: 180000, // 3 minutes in milliseconds\n      },\n    },\n  },\n})\n```\n\n## RESTful cache policy\n\n> ⚠️ Pseudo code ahead\n\n```js\norq.addRequest('https://example.com/api/fish')\n  .subscribe() // network call made, will now be served from cache\norq.addRequest('https://example.com/api/fish/42', { method: 'PUT' })\n  .subscribe() // invalidates /fish/* and /fish caches\norq.addRequest('https://example.com/api/fish/42')\n  .subscribe() // another network call is made, since cache was invalidated before\n```\n\n## Cancelable requests\n\n```js\nconst requestSub = orq.addRequest('https://example.com/api/fish', { cancelable: true })\n  .subscribe()\nsetTimeout(() => {\n  requestSub.unsubscribe() // Signals the worker to cancel the request\n}, 1000)\n```\n\nBy default all requests are cancelable except `GET` requests. The reasoning is, that the user might request the same resource again, at which point the response can be served from cache. So that's why we have to pass the option explicitly in the above `GET` request.\n\n## Duplicate request elimination\n\n```js\norq.addRequest('https://example.com/api/fish')\n  .subscribe() // Starts network call from worker\norq.addRequest('https://example.com/api/fish')\n  .subscribe() // Doesn't start another network call, since the first hasn't been completed. Instead the result of the first will be served to this request too.\n```\n\n## Platform independent\n\nThe `request` implementation isn't implemented by `orq` itself. So you may write your own. For example by wrapping the node internal `http`/`https` modules. `orq` only uses a subset of the worker API. You could easily wrap the node cluster module to provide a worker like API. Those wrapped node master/worker can then be passed to `orq` `mkInterface` and `mkReceiver`. See [test helpers](https://github.com/Kriegslustig/observable-request-queue/blob/master/src/__tests__/helpers/index.js#L7-L21) to see how this could be done.\n\n## TODO\n\n* update deps\n* write @orq/superagent\n* cannot add type constraints on request and response bodies\n* cache policy should limit cache item size\n\n-----\n\n_Developed at [Vimcar](https://vimcar.com/)._\n","created":"2017-05-21T15:46:13.628Z","modified":"2017-06-01T14:50:00.284Z","lastPublisher":{"name":"kriegslustig","email":"npm@ls7.ch"},"owners":[{"name":"kriegslustig","email":"npm@ls7.ch"}],"other":{"_attachments":{},"_id":"orq","_nodeVersion":"8.0.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/orq-0.1.8.tgz_1496328599109_0.721771078882739"},"_npmUser":{"name":"kriegslustig","email":"npm@ls7.ch"},"_npmVersion":"5.0.0","_rev":"9-a4f0449606abafaf97e80608ea8efb2a","author":{"name":"Luca Nils Schmid","email":"luca.schmid@vimcar.com"},"bugs":{"url":"https://github.com/Kriegslustig/orq/issues"},"directories":{},"dist-tags":{"latest":"0.1.8"},"dist":{"integrity":"sha512-2+u8keSJKkCpeyk5oxha8H36i+4kcl9j78NBWOj3soSSh6RjaDETaHk8CtnEbCDciU3kxaLrxfY3xRai66aoLA==","shasum":"586f60c6770171921ad8e2fa7388d2a64d537139","tarball":"https://registry.npmjs.org/orq/-/orq-0.1.8.tgz"},"maintainers":[{"name":"kriegslustig","email":"npm@ls7.ch"}],"readmeFilename":"README.md","time":{"modified":"2017-06-01T14:50:00.284Z","created":"2017-05-21T15:46:13.628Z","0.1.0":"2017-05-21T15:46:13.628Z","0.1.1":"2017-05-21T17:01:08.620Z","0.1.2":"2017-05-24T17:20:10.388Z","0.1.3":"2017-05-24T17:55:24.934Z","0.1.4":"2017-05-24T18:02:55.469Z","0.1.5":"2017-05-25T19:06:59.664Z","0.1.6":"2017-05-25T19:31:15.812Z","0.1.7":"2017-05-25T19:34:22.842Z","0.1.8":"2017-06-01T14:50:00.284Z"}}}