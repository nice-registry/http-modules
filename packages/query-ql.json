{"name":"query-ql","version":"1.1.5","main":"dist/index.js","license":"MIT","standard":{"parser":"babel-eslint","ignore":["dist"]},"scripts":{"build":"NODE_ENV=production babel src/ -d dist/","test":"mocha --require babel-polyfill --compilers js:babel-register"},"devDependencies":{"babel-cli":"^6.24.1","babel-eslint":"^7.2.2","babel-plugin-transform-object-rest-spread":"^6.23.0","babel-polyfill":"^6.23.0","babel-preset-es2015":"^6.24.1","babel-register":"^6.24.1","mocha":"^3.2.0","rewire":"^2.5.2","should":"^11.2.1"},"repository":"https://github.com/unordered/query-ql","keywords":["sql","query"],"gitHead":"cff8a3694dafd59b343b56363d9d4913ab15e069","description":"parse http query to sql.","homepage":"https://github.com/unordered/query-ql#readme","versions":[{"number":"1.0.0","date":"2017-04-20T17:01:34.070Z"},{"number":"1.0.1","date":"2017-04-20T17:02:43.419Z"},{"number":"1.0.2","date":"2017-04-21T06:52:27.011Z"},{"number":"1.1.0","date":"2017-04-21T13:32:31.018Z"},{"number":"1.1.1","date":"2017-04-24T05:10:33.841Z"},{"number":"1.1.2","date":"2017-04-24T05:54:45.502Z"},{"number":"1.1.3","date":"2017-05-02T07:37:03.319Z"},{"number":"1.1.4","date":"2017-05-19T02:12:24.133Z"},{"number":"1.1.5","date":"2017-05-22T09:56:43.316Z"}],"readme":"# query-ql\n\nparse http query to sql.\n\n## use with pg (es6)\n\n```\nconst res = pg.query(...parsePGQuery(model, query))\nconst total = pg.query(...parsePGCount(model, query))\n```\n\n## parsePGQuery (model, query, pagination = true)\n\n```\nconst model = {\n  __config__: {\n    tableName: 'member',\n    pagination: {\n      defaultRows: 20,\n      maxRows: 30\n    }\n  },\n  id: {\n    type: 'number',\n    name: 'id'\n  },\n  name: {\n    type: 'string',\n    name: 'name'\n  },\n  age: {\n    type: 'number',\n    name: 'age'\n  },\n  createTime: {\n    type: 'number',\n    name: '_create_time'\n  },\n  other: 'this property is unused'\n}\n\nconst query = {\n  id: ['[0, 10]', '<-1, 11, 32>'],\n  name: ['%name', 'name', ''],\n  age: [],\n  createTime: ['[200, 1000]'],\n  sorter: '-id, +name, age, -createTime',\n  rows: '20',\n  page: '2'\n}\n\nconst sql = parsePGQuery(model, query)\n// sql is array\n// sql[0] is 'SELECT id, name, age, _create_time FROM member WHERE (((id >= $1 AND id <= $2) OR (id = $3 OR id = $4 OR id = $5))) AND ((name LIKE $6 OR name = $7)) AND (((_create_time >= $8 AND _create_time <= $9))) ORDER BY id DESC, name ASC, age ASC, _create_time DESC OFFSET $10 LIMIT $11',\n// sql[1] is [0, 10, -1, 11, 32, '%name', 'name', 200, 1000, 20, 20]\n\nconst sql2 = parsePGQuery(mdoel, query, false)\n// sql is array\n// sql[0] is 'SELECT id, name, age, _create_time FROM member WHERE (((id >= $1 AND id <= $2) OR (id = $3 OR id = $4 OR id = $5))) AND ((name LIKE $6 OR name = $7)) AND (((_create_time >= $8 AND _create_time <= $9))) ORDER BY id DESC, name ASC, age ASC, _create_time DESC'\n// sql[1] is [0, 10, -1, 11, 32, '%name', 'name', 200, 1000]\n```\n\n## parsePGCount (model, query)\n\n```\nconst sql = parsePGCount(model, query)\n// sql[0] is 'SELECT COUNT(id)::INTEGER FROM member WHERE (((id >= $1 AND id <= $2) OR (id = $3 OR id = $4 OR id = $5))) AND ((name LIKE $6 OR name = $7)) AND (((_create_time >= $8 AND _create_time <= $9)))\n// sql[1] is [0, 10, -1, 11, 32, '%name', 'name', 200, 1000]\n```\n\n## parseWhere (model, query)\n\n```\nconst model = {\n  id: {\n    type: 'number',\n    name: 'id'\n  },\n  name: {\n    type: 'string',\n    name: 'name'\n  },\n  age: {\n    type: 'number',\n    name: 'age'\n  },\n  createTime: {\n    type: 'number',\n    name: '_create_time'\n  }\n}\n\nconst query = {\n  id: ['[0, 10]', '<-1, 11, 32>'],\n  name: ['%name', 'name', ''],\n  age: [],\n  createTime: ['[200, 1000]']\n}\n\nconst sql = parseWhere(model, query)\n// the sql is: ['(((id >= $ AND id <= $) OR (id = $ OR id = $ OR id = $))) AND ((name LIKE $ OR name = $)) AND (((_create_time >= $ AND _create_time <= $)))', [0, 10, -1, 11, 32, '%name', 'name', 200, 1000]]\n```\n\n## parseSorters (model, query)\n\n```\nconst model = {\n  id: {\n    type: 'number',\n    name: 'id'\n  },\n  name: {\n    type: 'string',\n    name: 'name'\n  },\n  age: {\n    type: 'number',\n    name: 'age'\n  },\n  createTime: {\n    type: 'number',\n    name: '_create_time'\n  }\n}\nconst query = {\n  sorter: '-id, +name, age, -createTime'\n}\nconst sorter = parseSorters(model, query)\n// sorter is: 'id DESC, name ASC, age ASC, _create_time DESC'\n```\n\n\n# pattern\n\n## interval\n\n`?id=[0, 10]` -> `0 <= id <= 10`\n\n`?id=[0, 10)` -> `0 <= id < 10`\n\n`?id=(0, 10)` -> `0 < id < 10`\n\n`?id=(0, 10]` -> `0 < id <= 10`\n\n`?id=(0,]` -> `0 < id`\n\n`?id=(0,)` -> `0 < id`\n\n`?id=[0,]` -> `0 <= id`\n\n`?id=[0,)` -> `0 <= id`\n\n`?id=(, 10]` -> `id <= 10`\n\n`?id=[, 10]` -> `id <= 10`\n\n`?id=(, 10)` -> `id < 10`\n\n`?id=[, 10)` -> `id < 10`\n\n## equal\n\n`?id=10` -> `id = 10`\n\n`?name=foo` -> `name = 'foo'`\n\n## like\n\n`?name=%foo` -> `name LIKE '%foo'`\n\n## or\n\n`?id=<0, 1, 5>` -> `id = 0 OR id = 1 OR id = 5`\n\n`?name=<foo, %bar>` -> `name = 'foo' OR name LIKE '%bar'`\n","created":"2017-04-20T17:01:34.070Z","modified":"2017-05-22T09:56:43.316Z","lastPublisher":{"name":"unordered","email":"unordered.xyz@qq.com"},"owners":[{"name":"unordered","email":"unordered.xyz@qq.com"}],"other":{"_attachments":{},"_from":".","_id":"query-ql","_nodeVersion":"7.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/query-ql-1.1.5.tgz_1495447003162_0.7545973991509527"},"_npmUser":{"name":"unordered","email":"unordered.xyz@qq.com"},"_npmVersion":"4.2.0","_rev":"9-174f2c1ac0dd5d79b4ce39619d4fab4f","_shasum":"de4d27b2679ecebd30217f451d1044807dbb9f7d","author":{"name":"unordered"},"bugs":{"url":"https://github.com/unordered/query-ql/issues"},"directories":{},"dist-tags":{"latest":"1.1.5"},"dist":{"shasum":"de4d27b2679ecebd30217f451d1044807dbb9f7d","tarball":"https://registry.npmjs.org/query-ql/-/query-ql-1.1.5.tgz"},"maintainers":[{"name":"unordered","email":"unordered.xyz@qq.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-22T09:56:43.316Z","created":"2017-04-20T17:01:34.070Z","1.0.0":"2017-04-20T17:01:34.070Z","1.0.1":"2017-04-20T17:02:43.419Z","1.0.2":"2017-04-21T06:52:27.011Z","1.1.0":"2017-04-21T13:32:31.018Z","1.1.1":"2017-04-24T05:10:33.841Z","1.1.2":"2017-04-24T05:54:45.502Z","1.1.3":"2017-05-02T07:37:03.319Z","1.1.4":"2017-05-19T02:12:24.133Z","1.1.5":"2017-05-22T09:56:43.316Z"}}}