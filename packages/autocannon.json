{"name":"autocannon","version":"0.16.5","description":"Fast HTTP benchmarking tool written in Node.js","main":"autocannon.js","bin":{"autocannon":"autocannon.js"},"scripts":{"test":"standard && tap test/*.test.js","start":"node server.js"},"pre-commit":["test"],"repository":"https://github.com/mcollina/autocannon","keywords":["http","soak","load","fast","wrk","ab","test"],"license":"MIT","homepage":"https://github.com/mcollina/autocannon#readme","devDependencies":{"bl":"^1.1.2","pre-commit":"^1.1.2","split2":"^2.1.0","standard":"^9.0.0","tap":"^10.3.0"},"dependencies":{"chalk":"^1.1.3","color-support":"^1.1.1","deep-extend":"^0.4.1","hdr-histogram-percentiles-obj":"^1.1.0","http-parser-js":"^0.4.2","hyperid":"^1.1.0","minimist":"^1.2.0","native-hdr-histogram":"^0.4.0","pretty-bytes":"^4.0.2","progress":"^1.1.8","reinterval":"^1.1.0","retimer":"^1.0.1","table":"^4.0.1","timestring":"^3.0.1","xtend":"^4.0.1"},"gitHead":"4805c4b6ab3ecce27b7cbf4c015d55f5090ffd88","versions":[{"number":"0.0.1","date":"2016-03-31T17:25:31.925Z"},{"number":"0.1.0","date":"2016-04-04T17:47:47.386Z"},{"number":"0.2.0","date":"2016-04-06T10:46:51.542Z"},{"number":"0.3.0","date":"2016-04-07T16:16:16.866Z"},{"number":"0.3.1","date":"2016-04-07T21:00:36.985Z"},{"number":"0.4.0","date":"2016-04-08T09:42:16.700Z"},{"number":"0.5.0","date":"2016-06-03T10:38:41.219Z"},{"number":"0.5.1","date":"2016-06-03T15:04:43.527Z"},{"number":"0.5.2","date":"2016-06-08T14:07:36.333Z"},{"number":"0.6.0","date":"2016-06-24T14:27:38.236Z"},{"number":"0.7.0","date":"2016-06-25T15:34:31.397Z"},{"number":"0.7.2","date":"2016-06-26T17:01:10.377Z"},{"number":"0.8.0","date":"2016-06-28T08:48:51.992Z"},{"number":"0.9.0","date":"2016-07-04T22:29:14.523Z"},{"number":"0.9.1","date":"2016-07-05T18:04:30.490Z"},{"number":"0.9.2","date":"2016-07-05T21:16:41.549Z"},{"number":"0.10.0","date":"2016-07-08T11:34:58.657Z"},{"number":"0.11.0","date":"2016-07-08T15:35:43.838Z"},{"number":"0.11.1","date":"2016-07-11T15:28:26.659Z"},{"number":"0.11.2","date":"2016-07-13T10:28:28.007Z"},{"number":"0.11.3","date":"2016-07-14T10:51:26.683Z"},{"number":"0.11.4","date":"2016-07-18T10:56:20.292Z"},{"number":"0.12.0","date":"2016-07-21T09:51:53.247Z"},{"number":"0.12.1","date":"2016-07-21T14:18:31.455Z"},{"number":"0.13.0","date":"2016-07-22T15:36:07.962Z"},{"number":"0.13.1","date":"2016-07-25T17:50:42.667Z"},{"number":"0.13.2","date":"2016-08-04T12:06:57.965Z"},{"number":"0.13.3","date":"2016-08-16T09:54:19.971Z"},{"number":"0.14.0","date":"2016-08-16T15:44:29.796Z"},{"number":"0.14.1","date":"2016-09-01T14:19:32.725Z"},{"number":"0.15.0","date":"2016-11-11T14:03:20.587Z"},{"number":"0.15.1","date":"2016-11-16T14:14:59.880Z"},{"number":"0.15.2","date":"2016-12-02T14:30:53.678Z"},{"number":"0.16.0","date":"2016-12-12T14:04:42.508Z"},{"number":"0.16.1","date":"2017-03-02T22:16:57.044Z"},{"number":"0.16.2","date":"2017-03-28T10:02:00.284Z"},{"number":"0.16.3","date":"2017-03-29T11:56:17.961Z"},{"number":"0.16.4","date":"2017-03-31T08:46:06.278Z"},{"number":"0.16.5","date":"2017-04-14T09:28:21.014Z"}],"readme":"![banner](autocannon-banner.png)\n\n# autocannon\n\n[![Join the chat at https://gitter.im/mcollina/autocannon](https://badges.gitter.im/mcollina/autocannon.svg)](https://gitter.im/mcollina/autocannon?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Travis Build Status](https://travis-ci.org/mcollina/autocannon.svg?branch=master)](https://travis-ci.org/mcollina/autocannon)\n[![Appveyor Build Status](https://ci.appveyor.com/api/projects/status/github/mcollina/autocannon?svg=true)](https://ci.appveyor.com/project/mcollina/autocannon)\n\n\n![demo](https://raw.githubusercontent.com/mcollina/autocannon/master/demo.gif)\n\nA HTTP/1.1 benchmarking tool written in node, greatly inspired by [wrk][wrk]\nand [wrk2][wrk2], with support for HTTP pipelining and HTTPS.\nOn _my_ box, *autocannon* can produce more load than `wrk` and `wrk2`.\n\n* [Installation](#install)\n* [Usage](#usage)\n* [Benchmarks](#benchmarks)\n* [API](#api)\n* [Acknowledgements](#acknowledgements)\n* [License](#license)\n\n## Install\n\n```\nnpm i autocannon -g\n```\n\nor if you want to use the [API](#api) or as a dependency:\n\n```\nnpm i autocannon --save\n```\n\n### Supported systems\n\n**autocannon** is supported on Linux, Mac OS X and Windows.\nIf you see any errors during installation, you might need to configure\nyour system to compile native addons:\nfollow the instructions at [node-gyp][node-gyp].\n\n## Usage\n\n### Command Line\n\n```\nUsage: autocannon [opts] URL\n\nURL is any valid http or https url.\n\nAvailable options:\n\n  -c/--connections NUM\n        The number of concurrent connections to use. default: 10.\n  -p/--pipelining NUM\n        The number of pipelined requests to use. default: 1.\n  -d/--duration SEC\n        The number of seconds to run the autocannnon. default: 10.\n  -a/--amount NUM\n        The amount of requests to make before exiting the benchmark. If set, duration is ignored.\n  -m/--method METHOD\n        The http method to use. default: 'GET'.\n  -t/--timeout NUM\n        The number of seconds before timing out and resetting a connection. default: 10\n  -T/--title TITLE\n        The title to place in the results for identification.\n  -b/--body BODY\n        The body of the request.\n  -i/--input FILE\n        The body of the request.\n  -H/--headers K=V\n        The request headers.\n  -B/--bailout NUM\n        The number of failures before initiating a bailout.\n  -M/--maxConnectionRequests NUM\n        The max number of requests to make per connection to the server.\n  -O/--maxOverallRequests NUM\n        The max number of requests to make overall to the server.\n  -r/--connectionRate NUM\n        The max number of requests to make per second from an individual connection.\n  -R/--overallRate NUM\n        The max number of requests to make per second from an all connections.\n        connection rate will take precedence if both are set.\n        NOTE: if using rate limiting and a very large rate is entered which cannot be met,\n              Autocannon will do as many requests as possible per second.\n  -D/--reconnectRate NUM\n        Some number of requests to make before resetting a connections connection to the\n        server.\n  -n/--no-progress\n        Don't render the progress bar. default: false.\n  -l/--latency\n        Print all the latency data. default: false.\n  -I/--idReplacement\n        Enable replacement of [<id>] with a randomly generated ID within the request body. default: false.\n  -j/--json\n        Print the output as newline delimited json. This will cause the progress bar and results not to be rendered. default: false.\n  -f/--forever\n        Run the benchmark forever. Efficiently restarts the benchmark on completion. default: false.\n  -v/--version\n        Print the version number.\n  -h/--help\n        Print this menu.\n```\n\n### Programmatically\n\n```js\n'use strict'\n\nconst autocannon = require('autocannon')\n\nautocannon({\n  url: 'http://localhost:3000',\n  connections: 10, //default\n  pipelining: 1, // default\n  duration: 10 // default\n}, console.log)\n```\n\n## API\n\n### autocannon(opts[, cb])\n\nStart autocannon against the given target.\n\n* `opts`: Configuration options for the autocannon instance. This can have the following attributes. _REQUIRED_.\n    * `url`: The given target. Can be http or https. _REQUIRED_.\n    * `connections`: The number of concurrent connections. _OPTIONAL_ default: `10`.\n    * `duration`: The number of seconds to run the autocannon. Can be a [timestring](https://www.npmjs.com/package/timestring). _OPTIONAL_ default: `10`.\n    * `amount`: A `Number` stating the amount of requests to make before ending the test. This overrides duration and takes precedence, so the test won't end until the amount of requests needed to be completed are completed. _OPTIONAL_.\n    * `timeout`: The number of seconds to wait for a response before . _OPTIONAL_ default: `10`.\n    * `pipelining`: The number of [pipelined requests](https://en.wikipedia.org/wiki/HTTP_pipelining) for each connection. Will cause the `Client` API to throw when greater than 1. _OPTIONAL_ default: `1`.\n    * `bailout`: The threshold of the number of errors when making the requests to the server before this instance bail's out. This instance will take all existing results so far and aggregate them into the results. If none passed here, the instance will ignore errors and never bail out. _OPTIONAL_ default: `undefined`.\n    * `method`: The http method to use. _OPTIONAL_ `default: 'GET'`.\n    * `title`: A `String` to be added to the results for identification. _OPTIONAL_ default: `undefined`.\n    * `body`: A `String` or a `Buffer` containing the body of the request. Insert one or more randomly generated IDs into the body by including `[<id>]` where the randomly generated ID should be inserted (Must also set idReplacement to true). This can be useful in soak testing POST endpoints where one or more fields must be unique. Leave undefined for an empty body. _OPTIONAL_ default: `undefined`.\n    * `headers`: An `Object` containing the headers of the request. _OPTIONAL_ default: `{}`.\n    * `setupClient`: A `Function` which will be passed the `Client` object for each connection to be made. This can be used to customise each individual connection headers and body using the API shown below. The changes you make to the client in this function will take precedence over the default `body` and `headers` you pass in here. There is an example of this in the samples folder. _OPTIONAL_ default: `function noop () {}`.\n    * `maxConnectionRequests`: A `Number` stating the max requests to make per connection. `amount` takes precedence if both are set. _OPTIONAL_\n    * `maxOverallRequests`: A `Number` stating the max requests to make overall. Can't be less than `connections`. `maxConnectionRequests` takes precedence if both are set. _OPTIONAL_\n    * `connectionRate`: A `Number` stating the rate of requests to make per second from each individual connection. No rate limiting by default. _OPTIONAL_\n    * `overallRate`: A `Number` stating the rate of requests to make per second from all connections. `conenctionRate` takes precedence if both are set. No rate limiting by default. _OPTIONAL_\n    * `reconnectRate`: A `Number` which makes the individual connections disconnect and reconnect to the server whenever it has sent that number of requests. _OPTIONAL_\n    * `requests`: An `Array` of `Object`s which represents the sequence of requests to make while benchmarking. Can be used in conjunction with the `body`, `headers` and `method` params above. The `Object`s in this array can have `body`, `headers`, `method`, or `path` attributes, which overwrite those that are passed in this `opts` object. Therefore, the ones in this (`opts`) object take precedence and should be viewed as defaults. Check the samples folder for an example of how this might be used. _OPTIONAL_.\n    * `idReplacement`: A `Boolean` which enables the replacement of `[<id>]` tags within the request body with a randomly generated ID, allowing for unique fields to be sent with requests. Check out [an example of programatic usage](./samples/using-id-replacement.js) can be found in the samples. _OPTIONAL_ default: `false`\n    * `forever`: A `Boolean` which allows you to setup an instance of autocannon that restarts indefinatly after emiting results with the `done` event. Useful for efficiently restarting your instance. To stop running forever, you must cause a `SIGINT` or call the `.stop()` function on your instance. _OPTIONAL_ default: `false`\n* `cb`: The callback which is called on completion of a benchmark. Takes the following params. _OPTIONAL_.\n    * `err`: If there was an error encountered with the run.\n    * `results`: The results of the run.\n\n**Returns** an instance/event emitter for tracking progress, etc.\n\n### autocannon.track(instance[, opts])\n\nTrack the progress of your autocannon, programmatically.\n\n* `instance`: The instance of autocannon. _REQUIRED_.\n* `opts`: Configuration options for tracking. This can have the following attibutes. _OPTIONAL_.\n    * `outputStream`: The stream to output to. default: `process.stderr`.\n    * `renderProgressBar`: A truthy value to enable the rendering of the progress bar. default: `true`.\n    * `renderResultTable`: A truthy value to enable the rendering of the results table. default: `true`.\n    * `renderLatencyTable`: A truthy value to enable the rendering of the advanced latency table. default: `false`.\n    * `progressBarString`: A `string` defining the format of the progress display output. Must be valid input for the [progress bar module](http://npm.im/progress). default: `'running [:bar] :percent'`.\n\nExample that just prints the table of results on completion:\n\n```js\n'use strict'\n\nconst autocannon = require('autocannon')\n\nconst instance = autocannon({\n  url: 'http://localhost:3000'\n}, console.log)\n\n// this is used to kill the instance on CTRL-C\nprocess.once('SIGINT', () => {\n  instance.stop()\n})\n\n// just render results\nautocannon.track(instance, {renderProgressBar: false})\n```\n\nCheckout [this example](./samples/track-run.js) to see it in use, as well.\n\n### autocannon events\n\nBecause an autocannon instance is an `EventEmitter`, it emits several events. these are below:\n\n* `start`: Emitted once everything has been setup in your autocannon instance and it has started. Useful for if running the instance forever.\n* `tick`: Emitted every second this autocannon is running a benchmark. Useful for displaying stats, etc. Used by the `track` function.\n* `done`: Emitted when the autocannon finishes a benchmark. passes the `results` as an argument to the callback.\n* `response`: Emitted when the autocannons http-client gets a http response from the server. This passes the following arguments to the callback:\n    * `client`: The `http-client` itself. Can be used to modify the headers and body the client will send to the server. API below.\n    * `statusCode`: The http status code of the response.\n    * `resBytes`: The response byte length.\n    * `responseTime`: The time taken to get a response for the initiating the request.\n* `reqError`: Emitted in the case of a request error e.g. a timeout.\n* `error`: Emitted if there is an error during the setup phase of autocannon.\n\n### `Client` API\n\nThis object is passed as the first parameter of both the `setupClient` function and the `response` event from an autocannon instance. You can use this to modify the requests you are sending while benchmarking. This is also an `EventEmitter`, with the events and their params listed below.\n\n* `client.setHeaders(headers)`: Used to modify the headers of the request this client iterator is currently on. `headers` should be an `Object`, or `undefined` if you want to remove your headers.\n* `client.setBody(body)`: Used to modify the body of the request this client iterator is currently on. `body` should be a `String` or `Buffer`, or `undefined` if you want to remove the body.\n* `client.setHeadersAndBody(headers, body)`: Used to modify the both the headers and body this client iterator is currently on.`headers` and `body` should take the same form as above.\n* `client.setRequest(request)`: Used to modify the both the entire request that this client iterator is currently on. Can have `headers`, `body`, `method`, or `path` as attributes. Defaults to the values passed into the autocannon instance when it was created. `Note: call this when modifying multiple request values for faster encoding`\n* `client.setRequests(newRequests)`: Used to overwrite the entire requests array that was passed into the instance on initiation. `Note: call this when modifying multiple requests for faster encoding`\n\n### `Client` events\n\nThe events a `Client` can emit are listed here:\n\n* `headers`: Emitted when a request sent from this client has received the headers of its reply. This received an `Object` as the parameter.\n* `body`: Emitted when a request sent from this client has received the body of a reply. This receives a `Buffer` as the parameter.\n* `response`: Emitted when the client has received a completed response for a request it made. This is passed the following arguments:\n    * `statusCode`: The http status code of the response.\n    * `resBytes`: The response byte length.\n    * `responseTime`: The time taken to get a response for the initiating the request.\n\nExample using the autocannon events and the client API and events:\n\n```js\n'use strict'\n\nconst autocannon = require('autocannon')\n\nconst instance = autocannon({\n  url: 'http://localhost:3000',\n  setupClient: setupClient\n}, (err, result) => handleResults(result))\n// results passed to the callback are the same as those emitted from the done events\ninstance.on('done', handleResults)\n\ninstance.on('tick', () => console.log('ticking'))\n\ninstance.on('response', handleResponse)\n\nfunction setupClient (client) {\n  client.on('body', console.log) // console.log a response body when its received\n}\n\nfunction handleResponse (client, statusCode, resBytes, responseTime) {\n  console.log(`Got response with code ${statusCode} in ${responseTime} milliseconds`)\n  console.log(`response: ${resBytes.toString()}`)\n\n  //update the body or headers\n  client.setHeaders({new: 'header'})\n  client.setBody('new body')\n  client.setHeadersAndBody({new: 'header'}, 'new body')\n}\n\nfunction handleResults(result) {\n  // ...\n}\n```\n\n<a name=\"acknowledgements\"></a>\n## Acknowledgements\n\nThis project was kindly sponsored by [nearForm](http://nearform.com).\n\nLogo and identity designed by Beibhinn Murphy O'Brien: https://www.behance.net/BeibhinnMurphyOBrien.\n\n[wrk][wrk] and [wrk2][wrk2] provided great inspiration.\n\n### Chat on Gitter\n\nIf you are using autocannon or you have any questions, let us know: [Gitter](https://gitter.im/mcollina/autocannon)\n\n## License\n\nCopyright [Matteo Collina](https://github.com/mcollina) and other contributors, Licensed under [MIT](./LICENSE).\n\n[node-gyp]: https://github.com/nodejs/node-gyp#installation\n[wrk]: https://github.com/wg/wrk\n[wrk2]: https://github.com/giltene/wrk2\n","starsCount":9,"created":"2016-03-31T17:25:31.925Z","modified":"2017-05-30T15:51:10.941Z","lastPublisher":{"name":"matteo.collina","email":"hello@matteocollina.com"},"owners":[{"name":"davidmarkclements","email":"huperekchuno@googlemail.com"},{"name":"matteo.collina","email":"hello@matteocollina.com"},{"name":"thekemkid","email":"glenkeane.94@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"autocannon","_nodeVersion":"6.10.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/autocannon-0.16.5.tgz_1492162098711_0.07415030640549958"},"_npmUser":{"name":"matteo.collina","email":"hello@matteocollina.com"},"_npmVersion":"3.10.10","_rev":"17-b57870518a1ab37eab6950350c3abacb","_shasum":"2538c3d50e796a3659eea50127805711d0736c04","author":{"name":"Matteo Collina","email":"hello@matteocollina.com"},"bugs":{"url":"https://github.com/mcollina/autocannon/issues"},"contributors":[{"name":"Glen Keane","email":"glenkeane.94@gmail.com","url":"http://glenkeane.me/"},{"name":"Donald Robertson"}],"directories":{},"dist-tags":{"latest":"0.16.5"},"dist":{"shasum":"2538c3d50e796a3659eea50127805711d0736c04","tarball":"https://registry.npmjs.org/autocannon/-/autocannon-0.16.5.tgz"},"maintainers":[{"name":"davidmarkclements","email":"huperekchuno@googlemail.com"},{"name":"matteo.collina","email":"hello@matteocollina.com"},{"name":"thekemkid","email":"glenkeane.94@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-30T15:51:10.941Z","created":"2016-03-31T17:25:31.925Z","0.0.1":"2016-03-31T17:25:31.925Z","0.1.0":"2016-04-04T17:47:47.386Z","0.2.0":"2016-04-06T10:46:51.542Z","0.3.0":"2016-04-07T16:16:16.866Z","0.3.1":"2016-04-07T21:00:36.985Z","0.4.0":"2016-04-08T09:42:16.700Z","0.5.0":"2016-06-03T10:38:41.219Z","0.5.1":"2016-06-03T15:04:43.527Z","0.5.2":"2016-06-08T14:07:36.333Z","0.6.0":"2016-06-24T14:27:38.236Z","0.7.0":"2016-06-25T15:34:31.397Z","0.7.2":"2016-06-26T17:01:10.377Z","0.8.0":"2016-06-28T08:48:51.992Z","0.9.0":"2016-07-04T22:29:14.523Z","0.9.1":"2016-07-05T18:04:30.490Z","0.9.2":"2016-07-05T21:16:41.549Z","0.10.0":"2016-07-08T11:34:58.657Z","0.11.0":"2016-07-08T15:35:43.838Z","0.11.1":"2016-07-11T15:28:26.659Z","0.11.2":"2016-07-13T10:28:28.007Z","0.11.3":"2016-07-14T10:51:26.683Z","0.11.4":"2016-07-18T10:56:20.292Z","0.12.0":"2016-07-21T09:51:53.247Z","0.12.1":"2016-07-21T14:18:31.455Z","0.13.0":"2016-07-22T15:36:07.962Z","0.13.1":"2016-07-25T17:50:42.667Z","0.13.2":"2016-08-04T12:06:57.965Z","0.13.3":"2016-08-16T09:54:19.971Z","0.14.0":"2016-08-16T15:44:29.796Z","0.14.1":"2016-09-01T14:19:32.725Z","0.15.0":"2016-11-11T14:03:20.587Z","0.15.1":"2016-11-16T14:14:59.880Z","0.15.2":"2016-12-02T14:30:53.678Z","0.16.0":"2016-12-12T14:04:42.508Z","0.16.1":"2017-03-02T22:16:57.044Z","0.16.2":"2017-03-28T10:02:00.284Z","0.16.3":"2017-03-29T11:56:17.961Z","0.16.4":"2017-03-31T08:46:06.278Z","0.16.5":"2017-04-14T09:28:21.014Z"},"users":{"tonillo":true,"shanewholloway":true,"ninjatux":true,"mhaidarh":true,"jrthib":true,"matthiasg":true,"dpjayasekara":true,"modood":true,"quocnguyen":true}}}