{"name":"request-client","version":"1.0.0","description":"HTTP request client","main":"requestclient.js","repository":"https://github.com/pengng/request-client","keywords":["request","http","post","client"],"license":"MIT","gitHead":"2c532851613314e7fff8803e466ba495d589cc88","homepage":"https://github.com/pengng/request-client#readme","scripts":{},"versions":[{"number":"1.0.0","date":"2017-05-22T09:37:55.482Z"}],"readme":"# request-client\r\n\r\nHTTP request client.\r\n\r\n## Usage\r\n\r\n```bash\r\n  npm i -S request-client\r\n```\r\n\r\n```javascript\r\nconst request = require('request-client');\r\n\r\nrequest('https://github.com', function (error, response, body) {\r\n\r\n  if (err) {\r\n  return console.error(err);    \r\n  }\r\n\r\n  console.log(body);\r\n});\r\n```\r\n\r\n## stream\r\n\r\nYou can simply import the response stream into the file stream.\r\n\r\n```javascript\r\nrequest('http://www.google.com/images/errors/robot.png')\r\n  .on('error', console.error)\r\n  .pipe(fs.createWriteStream('robot.png'));\r\n```\r\n\r\n## Forms\r\n\r\n`request-client` support `application/x-www-form-urlencoded` and `application/json` forms upload.\r\n\r\n* application/x-www-form-urlencoded\r\n\r\n```javascript\r\nrequest({\r\n  url: 'https://api.google.com/',\r\n  form: {\r\n  content: 'Hello world!'\r\n  }\r\n}, function (err, res, body) {\r\n  console.log(body);\r\n});\r\n```\r\n\r\n* application/json\r\n\r\n```javascript\r\nrequest({\r\n  url: 'https://api.google.com/',\r\n  body: {\r\n  content: {\r\n      text: 'Hello world',\r\n      color: '#000000'\r\n    }\r\n  }\r\n}, function (err, res, body) {\r\n  console.log(body);\r\n});\r\n```\r\n\r\n## methods\r\n\r\nSupport __GET__, __POST__, __PUT__, __DELETE__, __HEAD__, __PATCH__ method.\r\n\r\n```javascript\r\nrequest.put({\r\n  url: 'https://google.com',\r\n  body: 'Hello world!'\r\n}, function (err, res, body) {\r\n  \r\n  console.log(body);\r\n});\r\n```\r\n\r\n## request(options, callback)\r\n\r\nThe first argument can be either `url` or `options` object.\r\n\r\n* `url` - request path. ( default: `\"/\"`)\r\n* `method` - http method. ( default: `\"GET\"` ) \r\n* `headers` - http headers ( default: `{}` )\r\n* `qs` - object containing querystring values to be appended to the `uri`\r\n* `body` - entity body for PATCH, POST and PUT requests. Must be a String or a JSON-serializable object.\r\n* `form` - entity body for PATCH, POST and PUT requests. Must be a string of querystring format or a JSON-serializable object.\r\n\r\n```javascript\r\nrequest({\r\n  url: 'https://api.google.com/',\r\n  method: 'post',\r\n  form: {\r\n  content: 'hello world',\r\n  title: 'google'\r\n  }\r\n}, function (err, res, body) {\r\n  console.log(body);\r\n});\r\n```\r\n\r\n# request-client\r\n\r\nHTTP 请求客户端。\r\n\r\n## 使用方法\r\n\r\n```bash\r\n  npm i -S request-client\r\n```\r\n\r\n```javascript\r\nconst request = require('request-client');\r\n\r\nrequest('https://github.com', function (error, response, body) {\r\n\r\n  if (err) {\r\n  return console.error(err);    \r\n  }\r\n\r\n  console.log(body);\r\n});\r\n```\r\n\r\n## 流\r\n\r\n您可以简单地将响应流导入到文件流中。\r\n\r\n```javascript\r\n// 下载图片\r\n\r\nconst fs = require('fs');\r\nconst request = require('request-client');\r\n\r\nvar img = fs.createWriteStream('robot.png');\r\n\r\nrequest('http://www.google.com/images/errors/robot.png')\r\n  .on('error', console.error)\r\n  .pipe(img);\r\n\r\nimg.on('finish', function () {\r\n  console.log('success!');\r\n});\r\n```\r\n\r\n## 表单\r\n\r\n`request-client` 支持 `application/x-www-form-urlencoded` and `application/json` 表单提交。\r\n\r\n* application/x-www-form-urlencoded\r\n\r\n```javascript\r\nrequest({\r\n  url: 'https://api.google.com/',\r\n  form: {\r\n  content: 'Hello world!'\r\n  }\r\n}, function (err, res, body) {\r\n  console.log(body);\r\n});\r\n```\r\n\r\n* application/json\r\n\r\n```javascript\r\nrequest({\r\n  url: 'https://api.google.com/',\r\n  body: {\r\n  content: {\r\n      text: 'Hello world',\r\n      color: '#000000'\r\n    }\r\n  }\r\n}, function (err, res, body) {\r\n  console.log(body);\r\n});\r\n```\r\n\r\n## HTTP 方法\r\n\r\n支持 __GET__, __POST__, __PUT__, __DELETE__, __HEAD__, __PATCH__ 方法。\r\n\r\n```javascript\r\nrequest.put({\r\n  url: 'https://google.com',\r\n  body: 'Hello world!'\r\n}, function (err, res, body) {\r\n  \r\n  console.log(body);\r\n});\r\n```\r\n\r\n## request(options, callback)\r\n\r\n第一个参数可以是`url`或`options`对象。\r\n\r\n* `url` - 请求路径。（默认: `\"/\"`）\r\n* `method` - HTTP 方法。（默认： `\"GET\"`） \r\n* `headers` - HTTP 请求首部。（默认：`{}`）\r\n* `qs` - 包含要附加到`uri`的querystring值的对象。\r\n* `body` - 实体主体用于PATCH，POST和PUT请求。必须是字符串或可用于JSON序列化对象。\r\n* `form` - 实体主体用于PATCH，POST和PUT请求。必须是querystring格式的字符串或可用于JSON序列化对象。\r\n\r\n```javascript\r\nrequest({\r\n  url: 'https://api.google.com/',\r\n  method: 'post',\r\n  form: {\r\n  content: 'hello world',\r\n  title: 'google'\r\n  }\r\n}, function (err, res, body) {\r\n  console.log(body);\r\n});\r\n```\r\n","created":"2017-05-22T09:37:55.482Z","modified":"2017-05-22T09:37:55.482Z","lastPublisher":{"name":"pengengng","email":"870788308@qq.com"},"owners":[{"name":"pengengng","email":"870788308@qq.com"}],"other":{"_attachments":{},"_from":".","_id":"request-client","_nodeVersion":"7.9.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/request-client-1.0.0.tgz_1495445875406_0.17756718420423567"},"_npmUser":{"name":"pengengng","email":"870788308@qq.com"},"_npmVersion":"4.2.0","_rev":"1-ce7190b3100d7d7ae55fb26baf6c6588","_shasum":"99e8b9b488036489e970b8d5c4f4eca6917c1564","author":{"name":"pengng"},"bugs":{"url":"https://github.com/pengng/request-client/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"99e8b9b488036489e970b8d5c4f4eca6917c1564","tarball":"https://registry.npmjs.org/request-client/-/request-client-1.0.0.tgz"},"maintainers":[{"name":"pengengng","email":"870788308@qq.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-22T09:37:55.482Z","created":"2017-05-22T09:37:55.482Z","1.0.0":"2017-05-22T09:37:55.482Z"}}}