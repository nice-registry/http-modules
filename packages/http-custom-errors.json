{"name":"http-custom-errors","version":"8.0.0","description":"Custom error classes based on HTTP statuses","main":"error.js","scripts":{"test":"make test"},"keywords":["error","errors","http","status","util"],"license":"ISC","devDependencies":{"mocha":"","should":"","jshint":"","blanket":"","mocha-lcov-reporter":"","coveralls":"","codeclimate-test-reporter":"","travis-cov":""},"repository":"https://github.com/jproulx/node-http-error","homepage":"https://jproulx.github.io/node-http-error","dependencies":{"custom-error-generator":""},"config":{"blanket":{"pattern":"/error.js","data-cover-never":"node_modules"},"travis-cov":{"threshold":80}},"versions":[{"number":"2.0.0","date":"2014-05-05T12:34:02.760Z"},{"number":"3.0.0","date":"2014-05-05T13:48:33.302Z"},{"number":"4.0.0","date":"2014-05-05T19:05:44.533Z"},{"number":"6.0.0","date":"2014-05-08T00:02:41.650Z"},{"number":"7.0.0","date":"2014-05-12T02:25:24.372Z"},{"number":"8.0.0","date":"2014-05-12T08:59:36.086Z"}],"readme":"http-custom-errors\n==================\n[![Build Status](http://img.shields.io/travis/jproulx/node-http-error.svg)](https://travis-ci.org/jproulx/node-http-error)\n[![Code Climate](http://img.shields.io/codeclimate/github/jproulx/node-http-error.svg)](https://codeclimate.com/github/jproulx/node-http-error)\n[![Coverage Status](http://img.shields.io/coveralls/jproulx/node-http-error.svg)](https://coveralls.io/r/jproulx/node-http-error?branch=master)\n[![Dependency Status](http://img.shields.io/gemnasium/jproulx/node-http-error.svg)](https://gemnasium.com/jproulx/node-http-error)\n\n[![NPM](https://nodei.co/npm/http-custom-errors.png)](https://nodei.co/npm/http-custom-errors/)\n\nCustom errors based on HTTP status codes -- http://jproulx.github.io/node-http-error\n\n## Install\n```bash\nnpm install http-custom-errors\n```\n## Usage\n```js\nvar HTTPErrors = require('http-custom-errors');\nvar error = HTTPErrors.createHTTPError(500); // Create a \"500 Internal Server Error\" exception\nthrow new HTTPErrors.NotFoundError('/missing'); // Throw a \"404 Not Found Error\" exception\n```\nThe `createHTTPError(code);` function export will inherit and return a new error exception, with the additional `code` and `status` fields that correspond to the HTTP Server Statuses advertised by node's internal HTTP module.\n\nOne practical use would allow you to use a polymorphic error handler with `express.js`:\n```js\napp.use(function (err, res, req, next) {\n  res.status(err.code || 500);\n  // respond with html page\n  if (req.accepts('html')) {\n    return res.render(err.code || 500, { url: req.url });\n  }\n  // respond with json\n  if (req.accepts('json')) {\n    res.send({ 'message' : err.message || 'Server Error' });\n    return;\n  }\n  // default to plain-text. send()\n  res.type('txt').send(err.message || 'Server Error');\n});\n```\nWith this middleware you would be able to simply throw the appropriate HTTP status error in the right situation:\n```js\nfunction authorize (req, res, next) {\n    if (// not authorized logic) {\n        return next(new HTTPErrors.ForbiddenError('Please log in'));\n    }\n    return next();\n});\napp.get('/sensitive', authorize, function (req, res, next) {\n    return res.render('logged_in');\n});\napp.use(function (req, res, next) {\n    throw new HTTPErrors.NotFoundError(req.url);\n});\n```\nAdditionally, each error type is exposed as its own Error constructor:\n\n* `HTTPErrors.BadRequestError(message);`\n* `HTTPErrors.UnauthorizedError(message);`\n* `HTTPErrors.PaymentRequiredError(message);`\n* `HTTPErrors.ForbiddenError(message);`\n* `HTTPErrors.NotFoundError(message);`\n* `HTTPErrors.MethodNotAllowedError(message);`\n* `HTTPErrors.NotAcceptableError(message);`\n* `HTTPErrors.ProxyAuthenticationRequiredError(message);`\n* `HTTPErrors.RequestTimeoutError(message);`\n* `HTTPErrors.ConflictError(message);`\n* `HTTPErrors.GoneError(message);`\n* `HTTPErrors.LengthRequiredError(message);`\n* `HTTPErrors.PreconditionFailedError(message);`\n* `HTTPErrors.RequestEntityTooLargeError(message);`\n* `HTTPErrors.RequestURITooLargeError(message);`\n* `HTTPErrors.UnsupportedMediaTypeError(message);`\n* `HTTPErrors.RequestedRangeNotSatisfiableError(message);`\n* `HTTPErrors.ExpectationFailedError(message);`\n* `HTTPErrors.ImATeapotError(message);`\n* `HTTPErrors.UnprocessableEntityError(message);`\n* `HTTPErrors.LockedError(message);`\n* `HTTPErrors.FailedDependencyError(message);`\n* `HTTPErrors.UnorderedCollectionError(message);`\n* `HTTPErrors.UpgradeRequiredError(message);`\n* `HTTPErrors.PreconditionRequiredError(message);`\n* `HTTPErrors.TooManyRequestsError(message);`\n* `HTTPErrors.RequestHeaderFieldsTooLargeError(message);`\n* `HTTPErrors.InternalServerError(message);`\n* `HTTPErrors.NotImplementedError(message);`\n* `HTTPErrors.BadGatewayError(message);`\n* `HTTPErrors.ServiceUnavailableError(message);`\n* `HTTPErrors.GatewayTimeoutError(message);`\n* `HTTPErrors.HTTPVersionNotSupportedError(message);`\n* `HTTPErrors.VariantAlsoNegotiatesError(message);`\n* `HTTPErrors.InsufficientStorageError(message);`\n* `HTTPErrors.BandwidthLimitExceededError(message);`\n* `HTTPErrors.NotExtendedError(message);`\n* `HTTPErrors.NetworkAuthenticationRequiredError(message);`\n\n## Notes\nCare is taken to preserve the built-in error handling behavior as much as possible, with support for checking `instanceof` and `typeof`, as well as making sure the error constructor behaves the same whether it is called with the `new` operator or not.\n\nIn other words, you shouldn't have to worry about these errors affecting your syntax or existing code. Simply drop in place for any existing errors you're throwing and it should work just the same.\n","starsCount":3,"created":"2014-05-05T12:34:02.760Z","modified":"2014-05-12T08:59:36.086Z","lastPublisher":{"name":"jproulx","email":"github@jproulx.net"},"owners":[{"name":"jproulx","email":"github@jproulx.net"}],"other":{"_attachments":{},"_from":".","_id":"http-custom-errors","_npmUser":{"name":"jproulx","email":"github@jproulx.net"},"_npmVersion":"1.4.3","_rev":"1-c944d685b4aa85887b40b800085edd18","author":{"name":"Jesse Proulx","email":"jproulx@github.com"},"bugs":{"url":"https://github.com/jproulx/node-http-error/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"8.0.0"},"dist":{"shasum":"d55dedb555a935306a181bab00d88e62e1ab4b16","tarball":"http://registry.npmjs.org/http-custom-errors/-/http-custom-errors-8.0.0.tgz"},"maintainers":[{"name":"jproulx","email":"github@jproulx.net"}],"readmeFilename":"README.md","time":{"modified":"2014-05-12T08:59:36.086Z","created":"2014-05-05T12:34:02.760Z","2.0.0":"2014-05-05T12:34:02.760Z","3.0.0":"2014-05-05T13:48:33.302Z","4.0.0":"2014-05-05T19:05:44.533Z","6.0.0":"2014-05-08T00:02:41.650Z","7.0.0":"2014-05-12T02:25:24.372Z","8.0.0":"2014-05-12T08:59:36.086Z"},"users":{"jproulx":true,"tunnckocore":true,"detj":true}}}