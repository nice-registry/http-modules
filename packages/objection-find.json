{"name":"objection-find","version":"0.4.0","description":"Build search queries for objection.js models using HTTP query parameters.","main":"objection-find.js","license":"MIT","scripts":{"test":"istanbul --config=.istanbul.yml cover _mocha -- --slow 10 --timeout 5000 --reporter spec tests/test.js","test-only":"mocha --slow 10 --timeout 50000 --reporter spec tests/test.js","perf-test":"node tests/perf.js","perf-test-init":"node tests/perf-init.js","coveralls":"cat ./test-coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js"},"repository":"https://github.com/vincit/objection-find","keywords":["objection","sql","query","postgresql","mysql","sqlite3","query parameter"],"files":["README.md","LICENSE","objection-find.js","lib/*"],"dependencies":{"bluebird":"^3","lodash":"^4"},"devDependencies":{"coveralls":"^2","expect.js":"^0.3.1","istanbul":"^0.4","knex":"^0.12","mocha":"^2","mysql":"^2","objection":"^0.7.0","pg":"^6","sqlite3":"^3"},"peerDependencies":{"objection":"^0.7.0"},"gitHead":"f6e2316a5042ed8b90049f5e2af7555b9b9c32e7","homepage":"https://github.com/vincit/objection-find#readme","versions":[{"number":"0.1.0","date":"2015-08-27T11:16:35.405Z"},{"number":"0.1.1","date":"2015-12-19T23:00:16.860Z"},{"number":"0.2.0","date":"2016-10-19T09:12:10.807Z"},{"number":"0.3.0","date":"2016-11-14T14:25:59.770Z"},{"number":"0.4.0","date":"2017-03-10T08:44:17.130Z"}],"readme":"[![Build Status](https://travis-ci.org/Vincit/objection-find.svg?branch=master)](https://travis-ci.org/Vincit/objection-find) [![Coverage Status](https://coveralls.io/repos/Vincit/objection-find/badge.svg?branch=master&service=github)](https://coveralls.io/github/Vincit/objection-find?branch=master)\n\n# Topics\n\n- [Introduction](#introduction)\n- [Installation](#installation)\n- [Getting started](#getting-started)\n- [Query parameters](#query-parameters)\n- [API documentation](API.md)\n\n# Introduction\n\nObjection-find is a module for building search queries for [objection.js](https://github.com/Vincit/objection.js/)\nmodels using HTTP query parameters. You can easily filter, order and page the result based on model's properties and\nrelations using simple expressions. Relations can be eagerly fetched for the results using objection.js relation\nexpressions.\n\nUsing objection-find in an [express](http://expressjs.com/) route is as easy as this:\n\n```js\nvar findQuery = require('objection-find');\n// Our objection.js model.\nvar Person = require('../models/Person');\n\nexpressApp.get('/api/persons', function (req, res, next) {\n  findQuery(Person)\n    .allow(['firstName', 'movies.name', 'children.age', 'parent.lastName'])\n    .allowEager('[children.movies, movies, parent.movies]')\n    .build(req.query)\n    .then(function (persons) {\n      res.send(persons);\n    })\n    .catch(next);\n});\n```\n\nObjection-find can be used with any node.js framework. Express is not a requirement. The route we just created can\nbe used like this:\n\n```js\n$http({\n  method: 'GET',\n  url: '/api/persons',\n\n  // HTTP Query parameters.\n  params: {\n    // Select all persons whose first name starts with 'j' or 'J'\n    'firstName:likeLower': 'J%',\n\n    // And who have acted in the movie 'Silver Linings Playbook'.\n    // This checks if the relation `movies` contains at least\n    // one movie whose name equals 'Silver Linings Playbook'.\n    'movies.name:eq': 'Silver Linings Playbook',\n\n    // And who have at least one child younger than 10.\n    // This checks if the relation `children` contains at least\n    // one person whose age is less than 10.\n    'children.age:lt': 10,\n\n    // Order the result by person's parent's last name.\n    // `parent` is a one-to-one relation.\n    'orderBy': 'parent.lastName',\n\n    // Fetch relations for the results. This is an objection.js\n    // relation expression. Check out objection.js for more info.\n    'eager': '[children, movies, parent.movies]',\n\n    // Select a range starting from index 0\n    'rangeStart': 0,\n\n    // Select a range ending to index 4\n    'rangeEnd': 4\n  }\n}).then(function (res) {\n  var persons = res.data.results;\n\n  console.log(persons.length); // --> 5\n  console.log(persons[0].children);\n  console.log(persons[0].movie);\n  console.log(persons[0].parent.movies);\n\n  // Total size of the result if the range wasn't given.\n  console.log(res.data.total);\n});\n```\n\nIn our example `Person` model had a one-to-one relation `parent`, a many-to-many relation `movies` and one-to-many\nrelation `children`. This example used the `$http` module of [AngularJS](https://angularjs.org/) but you can use\nobjection-find with anything that can send an HTTP request.\n\nDocumentation on the supported query parameters can be found [here](#query-parameters) and API documentation\n[here](API.md).\n\n# Installation\n\n```sh\nnpm install objection objection-find\n```\n\n# Getting started\n\nEasiest way to get started is to use [the objection.js example project](https://github.com/Vincit/objection.js/tree/master/examples/express)\nand copy paste this to the `api.js` file:\n\n```js\nvar findQuery = require('objection-find');\n\napp.get('/persons/search', function (req, res, next) {\n  findQuery(Person).build(req.query).then(function (persons) {\n    res.send(persons);\n  }).catch(next);\n});\n```\n\nYou also need to run this in the root of the example project to install objection-find:\n\n```sh\nnpm install --save objection-find\n```\n\nNow you can start bombing the `/persons/search` route. Documentation on the supported query parameters can be found\n[here](#query-parameters).\n\n# Query parameters\n\nObjection-find understands two kinds of query parameters: `filters` and `special parameters`.\n\n## Filters\n\nA filter parameter has the following format:\n\n```\n<propertyReference>|<propertyReference>|...:<filter>=<value>\n```\n\nA `propertyReference` is either simply a property name like `firstName` or a reference to a relation's property like\n`children.age` (`children` is the name of the relation).\n\n`filter` is one of the built-in filters `eq`, `lt`, `lte`, `gt`, `gte`, `like`, `likeLower` `in`, `notNull` or `isNull`.\nFilter can also be a custom filter registered using the `registerFilter` method.\n\nThe following examples explain how filter parameters work. For the examples, assume we have an objection.js model\n`Person` that has a one-to-one relation `parent`, a many-to-many relation `movies` and one-to-many relation `children`.\n\n| Filter query parameter             | Explanation                                                                                             |\n|------------------------------------|---------------------------------------------------------------------------------------------------------|\n| `firstName=Jennifer`               | Returns all Persons whose first name is 'Jennifer'.                                                     |\n| `firstName:eq=Jennifer`            | Returns all Persons whose first name is 'Jennifer'.                                                     |\n| `children.firstName:like=%rad%`    | Returns all Persons who have at least one child whose first name contains 'rad'.                        |\n| `lastName|movies.name:like=%Gump%` | Returns all Persons whose last name contains 'Gump' or who acted in a movie whose name contains 'Gump'. |\n| `parent.age:lt=60`                 | Returns all persons whose parent's age is less than 60.                                                 |\n| `parent.age:in=20,22,24`           | Returns all persons whose parent's age is 20, 22 or 24.                                                 |\n\nFilters are joined with `AND` operator so for example the query string:\n\n```\nfirstName:eq=Jennifer&parent.age:lt=60&children.firstName:like=%rad%\n```\n\nwould return the Persons whose firstName is 'Jennifer' and whose parent's age is less than 60 and who have\nat least one child whose name contains 'rad'.\n\n\n## Special parameters\n\nIn addition to the filter parameters, there is a set of query parameters that have a special meaning:\n\n| Special parameter                 | Explanation                                                                                              |\n|-----------------------------------|----------------------------------------------------------------------------------------------------------|\n| `eager=[children, parent.movies]` | Which relations to fetch eagerly for the result models. An objection.js relation expression.             |\n| `orderBy=firstName`               | Sort the result by certain property.                                                                     |\n| `orderByDesc=firstName`           | Sort the result by certain property in descending order.                                                 |\n| `rangeStart=10`                   | The start of the result range (inclusive). The result will be `{total: 12343, results: [ ... ]}`.        |\n| `rangeEnd=50`                     | The end of the result range (inclusive). The result will be `{total: 12343, results: [ ... ]}`.          |\n","created":"2015-08-27T11:16:35.405Z","modified":"2017-03-10T08:44:17.130Z","lastPublisher":{"name":"kapouer","email":"kapouer@melix.org"},"owners":[{"name":"kapouer","email":"kapouer@melix.org"},{"name":"koskimas","email":"sami.koskimaki@vincit.com"}],"other":{"_attachments":{},"_from":".","_id":"objection-find","_nodeVersion":"6.9.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/objection-find-0.4.0.tgz_1489135455115_0.6398770497180521"},"_npmUser":{"name":"kapouer","email":"kapouer@melix.org"},"_npmVersion":"3.10.6","_rev":"3-0c152b829d956701889478abca87633f","_shasum":"4f46b1e2b9f75958bbb0fe8a16b0243bb1ccbed0","author":{"name":"Sami Koskim√§ki","email":"sami.koskimaki@vincit.com","url":"https://github.com/koskimas"},"bugs":{"url":"https://github.com/vincit/objection-find/issues"},"directories":{},"dist-tags":{"latest":"0.4.0"},"dist":{"shasum":"4f46b1e2b9f75958bbb0fe8a16b0243bb1ccbed0","tarball":"https://registry.npmjs.org/objection-find/-/objection-find-0.4.0.tgz"},"maintainers":[{"name":"kapouer","email":"kapouer@melix.org"},{"name":"koskimas","email":"sami.koskimaki@vincit.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-10T08:44:17.130Z","created":"2015-08-27T11:16:35.405Z","0.1.0":"2015-08-27T11:16:35.405Z","0.1.1":"2015-12-19T23:00:16.860Z","0.2.0":"2016-10-19T09:12:10.807Z","0.3.0":"2016-11-14T14:25:59.770Z","0.4.0":"2017-03-10T08:44:17.130Z"}}}