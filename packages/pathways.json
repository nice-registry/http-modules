{"name":"pathways","version":"0.0.11","description":"Simple HTTP RESTful routing.","main":"lib/index.js","scripts":{"test":"mocha test"},"license":"MIT","repository":"https://github.com/joeandaverde/pathways","homepage":"https://github.com/joeandaverde/pathways","devDependencies":{"mocha":"^1.17.1"},"readme":"# Pathways\n\nA simple HTTP RESTful router.\n\n## Examples\n\n### Using string patterns\n\nProvides a simple string pattern to match. The pattern can specify URL parameters in the form of ```:parameterName``` and wildcards using ```*```. If the handlerFunction has an argument that matches a URL parameter, the value is passed to the callback. For example, the url ```/collection/:id``` has a url parameter ```:id```. If the handler function takes ```id``` as a parameter it will automatically be bound i.e. ```function (id) { }```.\n\nUsage:\n```javascript\npathways.get(string, handlerFunction);\n```\n\nExample:\n```javascript\nvar Pathways = require('pathways');\nvar http = require('http');\n\nvar pathways = Pathways();\nvar server = http.createServer(pathways);\n\npathways\n.get('/', function () {\n   this.response.write('Hello World!');\n   this.response.end();\n})\n.get('/collection/:id', function (id) {\n   this.response.write('Hello ' + id + '!');\n   this.response.end();\n})\n.post('/collection/:id', function (id) {\n   var data = '';\n\n   this.request.on('data', function (b) {\n      data += b;\n   });\n\n   this.request.on('end', function () {\n      console.log(id, data);\n      this.response.end();\n   }.bind(this));\n});\n\nserver.listen(3000);\n```\n\n### Using Regular Expressions\n\nThis is useful for more complicated matching scenarios. For example, ensuring that a url parameter is only digit characters or a certain length. The result of ```url.match(RegExp)``` is passed to the handler callback.\n\nUsage:\n```javascript\npathways.get(RegExp, handlerFunction);\n```\n\nExample:\n```javascript\nvar Pathways = require('pathways');\nvar http = require('http');\n\nvar pathways = Pathways();\nvar server = http.createServer(pathways);\n\npathways\n.get(/^\\/$/i, function () {\n   this.response.write('Hello World!');\n   this.response.end();\n})\n.get(/^\\/collection\\/(\\d+)$/i, function (matches) {\n   var id = matches[1];\n   this.response.write('Hello ' + id + '!');\n   this.response.end();\n})\n.post(/^\\/collection\\/(\\d+)$/i, function (matches) {\n   var id = matches[1];\n   var data = '';\n\n   this.request.on('data', function (b) {\n      data += b;\n   });\n\n   this.request.on('end', function () {\n      console.log(id, data);\n      this.response.end();\n   }.bind(this));\n});\n\nserver.listen(3000);\n```\n\n### Using a function\n\nThis is useful if you want to inspect things other than just the URL. You have access to the request and response just like the request handler callback.\n\nUsage:\n```javascript\npathways.get(filterFunction, handlerFunction);\n```\n\nExample:\n```javascript\nvar Pathways = require('pathways');\n\nvar http = require('http');\nvar pathways = Pathways();\nvar server = http.createServer(pathways);\n\nvar rootRoute = function (cb) {\n   cb(this.request.url === '/');\n};\n\nvar collectionRoute = function (cb) {\n   if (this.request.url.indexOf('/collection/') === 0) {\n      var id = this.request.url.replace('/collection/', '');\n      cb(true, id);\n   }\n   else {\n      cb(false);\n   }\n};\n\npathways\n.get(rootRoute, function () {\n   this.response.write('Hello World!');\n   this.response.end();\n})\n.get(collectionRoute, function (id) {\n   this.response.write('Hello ' + id + '!');\n   this.response.end();\n})\n.post(collectionRoute, function (id) {\n   var data = '';\n\n   this.request.on('data', function (b) {\n      data += b;\n   });\n\n   this.request.on('end', function () {\n      console.log(id, data);\n      this.response.end();\n   }.bind(this));\n});\n\nserver.listen(3000);\n```\n\n## Handler callback\n\nThe handler callback is invoked for the first registered route that matches via string, function, or regular expression. If no routes match, the server responds with a 404 status code.\n\n```javascript\npathways.get('/', function () {\n   // This is the handler callback\n});\n```\n\nThe handler callback will be invoked with ```this``` set to an object with properties:\n\n```javascript\n{\n   request: /* the HTTP request */,\n   response: /* the HTTP response */,\n   router: /* the pathways router */,\n   params: /* the query parameters provided in the HTTP request */\n}\n```\n\nThe handler will be provided arguments depending on the filter.\n\n*Using strings:*\n\nPathways will try to bind URL parameters to the callback functions with the same name.\n\n*Using RegExp:*\n\nThe callback will have the match collection as its first argument.\n\n*Using a function:*\n\nThe callback will be invoked with every argument provided to the filter callback after the first. For example ```cb(true, 1, 'a', 'b')``` will invoke the route handler with 3 arguments 1, 'a', and 'b'.","versions":[{"number":"0.0.1","date":"2014-03-12T04:58:33.779Z"},{"number":"0.0.2","date":"2014-03-12T05:10:34.775Z"},{"number":"0.0.3","date":"2014-03-12T05:14:26.481Z"},{"number":"0.0.4","date":"2014-03-12T05:18:54.200Z"},{"number":"0.0.5","date":"2014-03-12T16:09:12.109Z"},{"number":"0.0.6","date":"2014-03-21T03:24:22.990Z"},{"number":"0.0.8","date":"2014-03-21T05:11:43.604Z"},{"number":"0.0.9","date":"2014-03-21T18:36:15.298Z"},{"number":"0.0.10","date":"2014-03-22T03:11:34.473Z"},{"number":"0.0.11","date":"2014-03-25T17:50:46.853Z"}],"starsCount":0,"created":"2014-03-12T04:58:33.779Z","modified":"2014-03-25T17:50:46.853Z","lastPublisher":{"name":"joeandaverde","email":"joe@andaverde.net"},"owners":[{"name":"joeandaverde","email":"joe@andaverde.net"}],"other":{"_attachments":{},"_from":".","_id":"pathways","_npmUser":{"name":"joeandaverde","email":"joe@andaverde.net"},"_npmVersion":"1.4.3","_rev":"1-27968de89ebcada4557ce5c7d956680b","author":{"name":"Joe Andaverde"},"bugs":{"url":"https://github.com/joeandaverde/pathways/issues"},"directories":{},"dist-tags":{"latest":"0.0.11"},"dist":{"shasum":"46c8793e9bf6002cdf8d4db73acaa604a476cf78","tarball":"http://registry.npmjs.org/pathways/-/pathways-0.0.11.tgz"},"maintainers":[{"name":"joeandaverde","email":"joe@andaverde.net"}],"readmeFilename":"README.md","time":{"modified":"2014-03-25T17:50:46.853Z","created":"2014-03-12T04:58:33.779Z","0.0.1":"2014-03-12T04:58:33.779Z","0.0.2":"2014-03-12T05:10:34.775Z","0.0.3":"2014-03-12T05:14:26.481Z","0.0.4":"2014-03-12T05:18:54.200Z","0.0.5":"2014-03-12T16:09:12.109Z","0.0.6":"2014-03-21T03:24:22.990Z","0.0.8":"2014-03-21T05:11:43.604Z","0.0.9":"2014-03-21T18:36:15.298Z","0.0.10":"2014-03-22T03:11:34.473Z","0.0.11":"2014-03-25T17:50:46.853Z"},"users":{}}}