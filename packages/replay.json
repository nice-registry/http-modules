{"name":"replay","description":"When API testing slows you down: record and replay HTTP responses like a boss","version":"2.1.2","config":{"tag":"next"},"keywords":["test","testing","mock","stub","http","replay","vcr","api"],"main":"./lib","scripts":{"build":"gulp build","test":"mocha","prepublish":"gulp build","postpublish":"gulp tag"},"dependencies":{"babel-runtime":"^6.11.6","debug":"^2.2.0","js-string-escape":"^1.0.1"},"devDependencies":{"async":"^2.0.1","babel":"^6.5.2","babel-eslint":"^6.1.2","babel-preset-es2015-node4":"^2.1.0","babel-preset-stage-2":"^6.13.0","babel-register":"^6.14.0","body-parser":"^1.15.2","del":"^2.2.2","eslint":"^3.5.0","express":"^4.14.0","gulp":"^3.9.1","gulp-babel":"^6.1.2","gulp-eslint":"^3.0.1","gulp-exec":"^2.1.2","gulp-notify":"^2.2.0","gulp-sourcemaps":"^1.6.0","gulp-util":"^3.0.7","mocha":"^3.0.2","request":"^2.74.0"},"repository":"https://github.com/assaf/node-replay","licenses":[{"type":"MIT","url":"https://github.com/assaf/node-replay/blob/master/MIT-LICENSE"}],"gitHead":"aa5a9f6c9bccb2202461cee06b614667b3685239","homepage":"https://github.com/assaf/node-replay#readme","versions":[{"number":"0.1.0","date":"2011-11-29T17:53:38.276Z"},{"number":"0.2.0","date":"2011-12-01T00:42:36.830Z"},{"number":"0.3.0","date":"2011-12-01T21:59:25.008Z"},{"number":"0.3.1","date":"2011-12-01T22:40:09.931Z"},{"number":"0.3.2","date":"2011-12-01T22:49:07.682Z"},{"number":"0.4.0","date":"2011-12-02T01:04:41.498Z"},{"number":"1.0.0","date":"2011-12-02T06:48:41.863Z"},{"number":"1.0.1","date":"2011-12-06T00:10:14.222Z"},{"number":"1.1.0","date":"2011-12-06T01:18:46.123Z"},{"number":"1.1.1","date":"2011-12-06T21:15:21.600Z"},{"number":"1.2.0","date":"2011-12-27T19:42:00.812Z"},{"number":"1.2.1","date":"2011-12-27T19:59:07.243Z"},{"number":"1.2.2","date":"2011-12-27T20:28:03.590Z"},{"number":"1.2.3","date":"2012-01-17T07:17:51.953Z"},{"number":"1.3.0","date":"2012-03-15T14:30:13.413Z"},{"number":"1.3.1","date":"2012-03-15T15:22:03.860Z"},{"number":"1.4.0","date":"2012-04-30T18:56:43.064Z"},{"number":"1.4.1","date":"2012-04-30T21:16:42.512Z"},{"number":"1.4.2","date":"2012-05-02T18:23:29.931Z"},{"number":"1.4.3","date":"2012-05-02T20:14:48.160Z"},{"number":"1.4.4","date":"2012-05-03T00:07:19.740Z"},{"number":"1.5.0","date":"2012-05-08T21:05:40.947Z"},{"number":"1.5.1","date":"2012-05-14T19:19:05.154Z"},{"number":"1.5.2","date":"2012-05-15T21:57:41.368Z"},{"number":"1.5.3","date":"2012-06-30T18:03:04.553Z"},{"number":"1.6.0","date":"2013-02-18T19:38:29.597Z"},{"number":"1.5.4","date":"2013-02-18T19:31:49.425Z"},{"number":"1.6.1","date":"2013-02-18T20:36:17.393Z"},{"number":"1.7.0","date":"2013-05-07T03:07:19.026Z"},{"number":"1.8.0","date":"2013-10-02T03:26:04.980Z"},{"number":"1.9.0","date":"2013-11-07T02:04:39.662Z"},{"number":"1.9.1","date":"2013-12-06T02:19:42.234Z"},{"number":"1.9.2","date":"2014-02-12T05:23:15.608Z"},{"number":"1.10.0","date":"2014-04-18T17:59:12.648Z"},{"number":"1.10.1","date":"2014-04-19T21:59:07.939Z"},{"number":"1.10.2","date":"2014-04-19T22:23:54.984Z"},{"number":"1.10.3","date":"2014-05-25T18:38:55.946Z"},{"number":"1.11.0","date":"2014-11-11T20:19:12.106Z"},{"number":"1.12.0","date":"2014-12-05T01:37:26.643Z"},{"number":"2.0.0-0","date":"2015-03-06T23:56:21.810Z"},{"number":"2.0.1-0","date":"2015-03-08T04:32:33.179Z"},{"number":"2.0.2-0","date":"2015-03-10T16:22:09.642Z"},{"number":"2.0.3","date":"2015-03-11T02:50:42.982Z"},{"number":"2.0.4","date":"2015-03-11T03:48:53.355Z"},{"number":"2.0.5","date":"2015-04-28T21:57:19.794Z"},{"number":"2.0.6","date":"2015-05-01T03:16:04.577Z"},{"number":"2.1.1","date":"2016-09-12T17:55:42.615Z"},{"number":"2.1.2","date":"2016-09-13T10:53:12.683Z"}],"readme":"# Node Replay\n\n\n### When API testing slows you down: record and replay HTTP responses like a boss\n\nThings that will ruin your day when tests make HTTP requests to other services:\n\n- That other service has the uptime of Twitter's API\n- Network late ............ ncy\n- Being-rate limited and having to wait an hour for the next test run\n- Same request returns different result each time\n- Everyone else on the network is deep in BitTorrent territory\n\nThings **node-replay** can do to make these problems go away:\n\n- Record API response once, replay as often as necessary\n- Stub HTTP requests (TBD)\n- Replay different responses to same request (great for testing error handling)\n- Not suck\n\n\n## How to use node-replay\n\nLike this:\n\n```bash\nnpm install replay\n```\n\nNow write some simple test case:\n\n```javascript\nconst assert  = require('assert');\nconst HTTP    = require('http');\nconst Replay  = require('replay');\n\nHTTP.get({ hostname: 'www.iheartquotes.com', path: '/api/v1/random' }, function(response) {\n  var body = '';\n  response.on('data', function(chunk) {\n    response.body = response.body + chunk;\n  });\n  response.on('end', function() {\n\n    // Now check the request we made to the I <3 Quotes API\n    assert.equal(response.statusCode, 200);\n    assert.equal(response.body, 'Oxymoron 2. Exact estimate\\n\\n[codehappy] http://iheartquotes.com/fortune/show/38021\\n');\n    console.log('Woot!');\n\n  });\n});\n```\n\nThis, of course, will fail the first time you run it.  You'll see:\n\n```\nError: Connection to http://www.iheartquotes.com:80/api/v1/random refused: not recording and no network access\n    at Array.0 (/Users/assaf/projects/node-replay/lib/replay/proxy.coffee:87:21)\n    at EventEmitter._tickCallback (node.js:192:40)\n```\n\nUnless you tell it otherwise, **node-replay** runs in `replay` mode.  In this\nmode it will replay any previously captured HTTP response, but it will not allow\nany outgoing network connection.\n\nThat's the default mode for running tests.  \"Why?\" you ask.  Good question.\nRunning in `replay` mode forces any test you run to use recorded reponses, and\nso it will run (and fail or pass) the same way for anyone else, any other day of\nthe week, on whatever hardware they use.  Even if they're on the AT&T network.\n\nRunning in `replay` mode helps you write repeatable tests.  Repeatable tests are\na Good Thing.\n\nSo the first thing you want to do to get that test to pass, is to run\n**node-replay** in `record` mode.  In this mode it will replay any recorded\nresponse, but if no response was recorded, it will make a request to the server\nand capture the response.\n\nLet's do that:\n\n```bash\nREPLAY=record node test.js\n```\n\nThat wasn't too hard, but the test is still failing.  \"How?\"  You must be\nwondering and scratching your head in total disbelief.  It's actually quite\nsimple.\n\nEvery request you make to 'I 3> Quotes' returns a different quote, and that test\nis looking for a very specific quote.  So the test will fail, and each time fail\nwith a different error.\n\nSo one way we can fix this test is to change the assertion.  Look at the error\nmessage, get the actual quote and make the assertion look for that value.\n\nNow run the test:\n\n```bash\n$ node test.js\n=> Woot!\n```\n\nDid the test pass?  Of course it did.  Run it again.  Still passing?  Why, yes.\n\nSo let's have a look at that captured response.  All the respones recorded for\n'I <3 Quotes>' will be listed here:\n\n```bash\nls fixtures/www.iheartquotes.com/\n```\n\nThere should be only one file there, since we only recorded one response.  The\nfile name is a timestamp, but feel free to rename it to something more\nrescriptive.\n\nThe name of a response file doesn't matter, it can be whatever you want.  The\nname of the directory does, though, it matches the service hostname (and port\nwhen not 80).\n\nSo that was one way to fix the failing test.  Another one is to change the\nrecorded response to match the assertion.  Being able to edit (and create new)\nresponses is quite important.  Sometimes it's the easiest way to create mock\nresponses for testing, e.g. if you're trying to test failure conditions that are\nhard to come by.\n\nSo let's edit the response file and change the body part, so the entire response\nreads like this:\n\n```\n/api/v1/random\n\nHTTP/1.1 200 OK\nserver: nginx/0.7.67\ndate: Fri, 02 Dec 2011 02:58:03 GMT\ncontent-type: text/plain\nconnection: keep-alive\netag: \"a7131ebc1e81e43ea9ecf36fa2fdf610\"\nx-ua-compatible: IE=Edge,chrome=1\nx-runtime: 0.158080\ncache-control: max-age=0, private, must-revalidate\ncontent-length: 234\nx-varnish: 2274830138\nage: 0\nvia: 1.1 varnish\n\nOxymoron 2. Exact estimate\n\n[codehappy] http://iheartquotes.com/fortune/show/38021\n```\n\nAll responses are stored as text files using the simplest format ever, so you\ncan edit them in Vim, or any of the many non-Vim text editors in existence:\n\n- First comes the request path (including query string)\n- Followed by any headers sent as part of the request (like `Accept` and `Authorization`)\n- Then an empty line\n- Next the response status code and (optional) HTTP version number\n- Followed by any headers sent as part of the response\n- Then another empty line\n- And the rest taken by the response body\n\nIf you need to use regular expressions to match the request URL, add `REGEXP`\nbetween the method and path, for example:\n\n```\nGET REGEXP /\\/Aregexp\\d/i\n\nHTTP/1.1 200 OK\nContent-Type: text/html\n```\n\n\n## Settings\n\nWe've got them.  Just enough to make you happy and not enough to take all day to\nexplain.\n\nThe first and most obvious is the mode you run **node-reply** in:\n\n**bloody** -- All requests go out, none get replayed.  Use this if you want to\nremember what life was before you started using **node-replay**.  Also, to test\nyour code against changes to 3rd party API, because these do happen.  Too often.\n\n**cheat** -- Replays recorded responses, and allow HTTP outbound requests.  This\nis mighty convenient when you're writing new tests or changing code to make new,\nun-recorded HTTP requests, but you haven't quite settled on which requets to\nmake, so you don't want any responses recorded quite yet.\n\n**record** -- Replays recorded responses, or captures responses for future\nreplay.  Use this whenever you're writing new tests or code that makes new HTTP\nrequests.\n\n**replay** -- Replays recorded responses, does not allow outbound requests.\nThis is the default mode.  That's another way of saying, \"you'll be running in\nthis mode most of the time\".\n\nYou can set the mode by setting the environment variable `REPLAY` to one of\nthese values:\n\n```bash\nREPLAY=record node test.js\n```\n\nOf from your code by setting `replay.mode`:\n\n```javascript\nconst Replay = require('replay');\nReplay.mode = 'record';\n```\n\nOf course, **node-replay** needs to store all those captured responses somewhere,\nand by default it will put them in the directory `fixtures`.  Bet you have an\nidea for a better directory name.  Easy to change.\n\nLike this:\n\n```javascript\nReplay.fixtures = __dirname + '/fixtures/replay';\n```\n\nYou can tell **node-replay** what hosts to treat as \"localhost\".  Requests to\nthese hosts will be routed to 127.0.0.1, without capturing or replay.  This is\nparticularly useful if you're making request to a test server and want to use\nthe same URL as production.\n\nFor example:\n\n```javascript\nReplay.localhost('www.example.com');\n```\n\nIf you don't want requests going to specific server, you can add them to the\ndrop list.  For example, Google Analytics, where you don't care that the request\ngo through, and you don't want to record it.\n\n```javascript\nReplay.drop('www.google-analytics.com', 'rollbar.com');\n```\n\nLikewise, you can tell **node-reply** to pass through requests to specific hosts:\n\n```javascript\nReplay.passThrough('s3.amazonaws.com');\n```\n\nIf you're running into trouble, try turning debugging mode on.  It helps.\nSometimes.\n\n```bash\n$ DEBUG=replay node test.js\n=> Requesting http://www.iheartquotes.com:80/api/v1/random\n=> Woot!\n```\n\nBy default, **node-replay** will record the following headers with each request,\nand use only these headers when matching pre-recorded requests:\n\n- Headers starting with `Accept` (eg `Accept-Encoding`)\n- `Authorization`\n- `Body` (used to match the body of a POST request)\n- `Content-Type`\n- `Host`\n- Headers starting with `If-` (eg `If-Modified-Since`)\n- Headers starting with `X-` (eg `X-Requested-With`)\n\nYou can modify the list of matched headers, adding or removing headers, by\nchanging the value of `Replay.headers`.  The value is an array of regular\nexpressions.\n\nFor example, to capture `content-length` (useful with file uploads):\n\n```javascript\nReplay.headers.push(/^content-length/);\n```\n\nSince headers are case insensitive, we always match on the lower case name.\n\n\n## Geeking\n\nTo make all that magic possible, **node-replay** replaces\n`require('http').request` with its own method.  That method returns a\n`ProxyRequest` object that captures the request URL, headers and body.\n\nWhen it's time to fire the request, it gets sent through a chain of proxies.\nThe first proxy to have a response, returns it (via callback, this is Node.js\nafter all).  That terminates the chain.  A proxy that doesn't have a response\nstill has to call the callback, but with no arguments.  The request will then\npass to the next proxy down the chain.\n\nThe proxy chain looks something like this:\n\n- Logger dumps the request URL when running with `DEBUG=replay`\n- The pass-through proxy will pass the request directly to the server in `bloody` mode, or when talking to `localhost`\n- The recorder proxy will either replay a captured request (if it has one), talk to the server and capture the response\n  (in `record` mode), or pass to the next proxy\n- The pass-through proxy (2nd one) will pass the request to the server in `cheat` mode, return nothing in all other\n  modes\n\nLoading pre-recorded responses to memory, from where they can be replayed, and\nstoring new ones on disk, is handled by ... cue big band ... the `Catalog`.\n\n\n## Final words\n\n**node-replay** is released under the MIT license.  Pull requests are welcome.\n\n","starsCount":5,"created":"2011-11-29T17:53:36.792Z","modified":"2017-05-22T09:36:04.770Z","lastPublisher":{"name":"djanowski","email":"jano@dimaion.com"},"owners":[{"email":"jano@dimaion.com","name":"djanowski"},{"email":"assaf@labnotes.org","name":"assaf"}],"other":{"_attachments":{},"_from":".","_id":"replay","_nodeVersion":"4.4.6","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/replay-2.1.2.tgz_1473763990864_0.7224118374288082"},"_npmUser":{"name":"djanowski","email":"jano@dimaion.com"},"_npmVersion":"2.15.5","_rev":"3-890c9427b99b5d6b3d96b10a8955ff1d","_shasum":"8fa55e6546f0b29b1b850d60e571844711a2d67c","author":{"name":"Assaf Arkin","email":"assaf@labnotes.org","url":"http://labnotes.org/"},"bugs":{"url":"https://github.com/assaf/node-replay/issues"},"directories":{},"dist-tags":{"latest":"2.1.2","next":"2.0.2-0"},"dist":{"shasum":"8fa55e6546f0b29b1b850d60e571844711a2d67c","tarball":"http://registry.npmjs.org/replay/-/replay-2.1.2.tgz"},"maintainers":[{"email":"jano@dimaion.com","name":"djanowski"},{"email":"assaf@labnotes.org","name":"assaf"}],"readmeFilename":"README.md","time":{"modified":"2017-05-22T09:36:04.770Z","created":"2011-11-29T17:53:36.792Z","0.1.0":"2011-11-29T17:53:38.276Z","0.2.0":"2011-12-01T00:42:36.830Z","0.3.0":"2011-12-01T21:59:25.008Z","0.3.1":"2011-12-01T22:40:09.931Z","0.3.2":"2011-12-01T22:49:07.682Z","0.4.0":"2011-12-02T01:04:41.498Z","1.0.0":"2011-12-02T06:48:41.863Z","1.0.1":"2011-12-06T00:10:14.222Z","1.1.0":"2011-12-06T01:18:46.123Z","1.1.1":"2011-12-06T21:15:21.600Z","1.2.0":"2011-12-27T19:42:00.812Z","1.2.1":"2011-12-27T19:59:07.243Z","1.2.2":"2011-12-27T20:28:03.590Z","1.2.3":"2012-01-17T07:17:51.953Z","1.3.0":"2012-03-15T14:30:13.413Z","1.3.1":"2012-03-15T15:22:03.860Z","1.4.0":"2012-04-30T18:56:43.064Z","1.4.1":"2012-04-30T21:16:42.512Z","1.4.2":"2012-05-02T18:23:29.931Z","1.4.3":"2012-05-02T20:14:48.160Z","1.4.4":"2012-05-03T00:07:19.740Z","1.5.0":"2012-05-08T21:05:40.947Z","1.5.1":"2012-05-14T19:19:05.154Z","1.5.2":"2012-05-15T21:57:41.368Z","1.5.3":"2012-06-30T18:03:04.553Z","1.6.0":"2013-02-18T19:38:29.597Z","1.5.4":"2013-02-18T19:31:49.425Z","1.6.1":"2013-02-18T20:36:17.393Z","1.7.0":"2013-05-07T03:07:19.026Z","1.8.0":"2013-10-02T03:26:04.980Z","1.9.0":"2013-11-07T02:04:39.662Z","1.9.1":"2013-12-06T02:19:42.234Z","1.9.2":"2014-02-12T05:23:15.608Z","1.10.0":"2014-04-18T17:59:12.648Z","1.10.1":"2014-04-19T21:59:07.939Z","1.10.2":"2014-04-19T22:23:54.984Z","1.10.3":"2014-05-25T18:38:55.946Z","1.11.0":"2014-11-11T20:19:12.106Z","1.12.0":"2014-12-05T01:37:26.643Z","2.0.0-0":"2015-03-06T23:56:21.810Z","2.0.1-0":"2015-03-08T04:32:33.179Z","2.0.2-0":"2015-03-10T16:22:09.642Z","2.0.3":"2015-03-11T02:50:42.982Z","2.0.4":"2015-03-11T03:48:53.355Z","2.0.5":"2015-04-28T21:57:19.794Z","2.0.6":"2015-05-01T03:16:04.577Z","2.1.1":"2016-09-12T17:55:42.615Z","2.1.2":"2016-09-13T10:53:12.683Z"},"users":{"zeke":true,"phette23":true,"fredjourney":true,"davidatkinsondoyle":true,"pirxpilot":true}}}