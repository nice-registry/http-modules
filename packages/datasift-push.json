{"name":"datasift-push","version":"0.3.1","license":"MIT","description":"Node.js server for handling DataSift Push data over HTTP","keywords":["datasift","realtime","push","http","server"],"main":"index","repository":"https://github.com/dirkbonhomme/datasift-push","scripts":{"test":"make test"},"config":{"blanket":{"pattern":"lib/server.js"}},"devDependencies":{"mocha":"*","expect.js":"*","sinon":"*","node-mocks-http":"*","blanket":"git://github.com/alex-seville/blanket.git#development"},"engines":{"node":">=0.8"},"homepage":"https://github.com/dirkbonhomme/datasift-push","versions":[{"number":"0.1.0","date":"2013-10-10T12:54:00.972Z"},{"number":"0.2.0","date":"2013-10-15T12:43:26.194Z"},{"number":"0.2.1","date":"2013-12-06T14:20:17.288Z"},{"number":"0.3.1","date":"2014-09-03T11:41:41.090Z"}],"readme":"# DataSift Push Server for HTTP\n\nThis library is a Node.js implementation for DataSift's HTTP connector as described in their [HTTP docs](http://dev.datasift.com/docs/push/connectors/http). It should be used as a public endpoint for Push delivery.\n\n## Usage overview\n\nThe following topics are covered:\n\n* Installation\n* Configuration\n* Events\n* FAQ\n* Development & testing\n\n## Installation\n\nThis library is not a stand-alone server but should be used as a dependency in an app that is able to handle incoming data.\n\nAdd `datasift-push` to your package.json dependencies and run the following command:\n\n    $ npm install\n    \nInclude it in your app:\n\n    var DataSift = require('datasift-push');\n    var server = new DataSift({ port: 8080 });\n    server.on('data', datahandler);\n    \n## Configuration\n\n#### `hostname` (String, optional)\n\nLimit incoming requests to a certain hostname.\n\n#### `sslKey` and `sslCert` (String or Buffer, optional)\n\nProvide both your SSL private key and certificate to start an https server.\n\n#### `port` (Number, optional)\n\nListen for incoming requests on a certain port. Defaults to 80.\n\n#### `path` (String, optional)\n\nLimit incoming requests to a certain path. Defaults to \"/\".  \nA path of \"/lorem/ipsum\" will allow all requests to \"/lorem/ipsum\" and \"/lorem/ipsum/dolor\" but not \"/lorem/sit/amet\"\n\n#### `format` (String, optional)\n\nFormat of incoming data. One of `json_meta`, `json_array` or `json_new_line`. Defaults to json_meta.  \nMake sure that push subscriptions are created with the same format. The server will refuse all requests that cannot be parsed.\n\n#### `maxSize` (Number, optional)\n\nMaximum allowed size of request body (in bytes). Defaults to 20971520 (20MB, DataSift max)  \nThe server will immediately close the connection as soon as the size has been exceeded.\n\n#### `confirmData` (Boolean, optional)\n\nExpect app to confirm all emitted data. Defaults to false.  \nWhen set to true, the server expects your app to confirm that it has processed incoming data. The `data` event will have a third parameter with a \"done\" callback. Call this to confirm that the incoming data has been saved. If your app does not respond within 10 seconds, the server will automatically respond with a HTTP 500 message. As a result, DataSift will try to resend the data after a certain interval.\n\n#### `username` and `password` (String, optional)\n\nRequires incoming requests to be authorized. Defaults to undefined.\n\n### Example\n\n    var server = new DataSift({\n        port: 8080,\n        path: '/lorem/ipsum/',\n        username: 'john',\n        password: 'loremipsum'\n    });\n\n## Events\n\n#### `initialized`\n\nEmitted when server starts listening on the provided port. Arguments: `port`, `hostname`\n\n#### `refused`\n\nEmitted when an incoming request has been refused. Arguments: `reason`\n\n- Could not inflate compressed data\n- Request did not contain required authentication headers\n- Requested path \"...\" does not match \"...\"\n- Post data exceeded limit of ... bytes\n- Could not parse post data\n\n#### `error` \n\nEmitted on internal errors. Arguments: `error` (Error instance)\n\n#### `check`\n\nEmitted after handling a \"check\" request from DataSift. Arguments: none\n\n#### `data`\n\nEmitted after parsing incoming data. Arguments: `data`, `meta`, `done` (optional)\n\n- data: array of interactions and deletions\n- meta: object with the request's meta data\n    - url (raw url)\n    - url_parsed (parsed url)\n    - hash (playback id or stream hash)\n    - hash_type (either historic or stream)\n    - id (subscription id)\n- done: function to be called after processing incoming data. Only provided when option `confirmData` is true. Call as `done(false)` to respond with a HTTP 500.\n\n## FAQ\n\nQ: I do not receive any incoming data  \nA: Make sure the path, hostname and port are configured correctly and that your server is accessible from the internet.\n\nQ: I keep receiving the same data  \nA: Did you enable the `confirmData` option? Make sure you call the `done` function after processing incoming data. Make sure you are able to process incoming data in time.\n\nQ: I am unable to see what's going on  \nA: Listen to all described events to find out if there are any errors or refused connections. You might want to use `server.http` for more details debugging.\n\n\n## Developing\n\nThe library is published to NPM and can be installed with the following command:\n\n    $ npm install datasift-push\n\n## Testing\n\nNavigate to this module's repository and make sure you have the development modules installed:\n\n    $ npm install\n\n\nRun the tests:\n\n    $ npm test\n\n","created":"2013-10-10T12:53:59.427Z","modified":"2014-09-03T11:41:41.090Z","lastPublisher":{"name":"dirkbonhomme","email":"dirk@bytelogic.be"},"owners":[{"name":"dirkbonhomme","email":"dirk@bytelogic.be"}],"other":{"_attachments":{},"_from":".","_id":"datasift-push","_npmUser":{"name":"dirkbonhomme","email":"dirk@bytelogic.be"},"_npmVersion":"1.4.5","_rev":"1-08453320e0ff262632b9f7499715e0e5","author":{"name":"Dirk Bonhomme","email":"dirk@bytelogic.be"},"bugs":{"url":"https://github.com/dirkbonhomme/datasift-push/issues"},"directories":{},"dist-tags":{"latest":"0.3.1"},"dist":{"shasum":"b0c3b7e38564dbb41b2bb65508073c3a03c196de","tarball":"http://registry.npmjs.org/datasift-push/-/datasift-push-0.3.1.tgz"},"maintainers":[{"name":"dirkbonhomme","email":"dirk@bytelogic.be"}],"readmeFilename":"README.md","time":{"modified":"2014-09-03T11:41:41.090Z","created":"2013-10-10T12:53:59.427Z","0.1.0":"2013-10-10T12:54:00.972Z","0.2.0":"2013-10-15T12:43:26.194Z","0.2.1":"2013-12-06T14:20:17.288Z","0.3.1":"2014-09-03T11:41:41.090Z"}}}