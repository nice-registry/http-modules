{"name":"redux-http-middleware","version":"3.1.2","description":"Make http requests by dispatching actions!","main":"lib/redux-http-middleware","scripts":{"lint":"eslint src test","clean":"rimraf lib","compile":"babel src --out-dir lib","prepublish":"npm run clean && npm run compile","test":"mocha --compilers js:babel-register test/unit/**/* --require test/unit/setup.js","test:watch":"npm run test -- --watch"},"files":["lib"],"pre-push":["lint","test"],"license":"MIT","devDependencies":{"babel-cli":"^6.10.1","babel-plugin-transform-async-to-generator":"^6.16.0","babel-polyfill":"^6.16.0","babel-preset-es2015":"^6.9.0","babel-preset-stage-0":"^6.5.0","chai":"^3.5.0","eslint":"^2.6.0","eslint-config-airbnb":"^6.2.0","eslint-plugin-react":"^4.2.3","mocha":"^2.5.3","pre-push":"^0.1.1","redux":"^3.5.2","rimraf":"^2.5.2","sinon":"^1.17.4"},"dependencies":{"lodash":"^4.13.1"},"gitHead":"9a0f97da83be09f3924ff2b20af2256ddf7f4de9","versions":[{"number":"0.0.1","date":"2016-06-24T10:02:15.584Z"},{"number":"0.0.2","date":"2016-06-24T10:11:18.165Z"},{"number":"0.0.3","date":"2016-06-24T12:08:40.867Z"},{"number":"1.0.3","date":"2016-06-27T10:03:44.750Z"},{"number":"1.0.4","date":"2016-06-27T17:33:32.902Z"},{"number":"1.0.5","date":"2016-06-27T22:17:11.212Z"},{"number":"1.0.6","date":"2016-06-27T22:18:50.678Z"},{"number":"1.0.7","date":"2016-06-27T22:36:54.281Z"},{"number":"1.1.0","date":"2016-08-24T09:10:33.043Z"},{"number":"1.1.1","date":"2016-08-24T09:25:55.243Z"},{"number":"1.1.2","date":"2016-10-18T14:09:37.145Z"},{"number":"2.0.0","date":"2016-11-24T14:50:59.172Z"},{"number":"2.1.0","date":"2016-11-24T16:18:56.919Z"},{"number":"3.0.0","date":"2017-03-31T14:13:31.025Z"},{"number":"3.1.0","date":"2017-04-03T10:08:38.993Z"},{"number":"3.1.1","date":"2017-04-03T13:07:23.110Z"},{"number":"3.1.2","date":"2017-04-03T13:19:01.541Z"}],"readme":"# redux-http-middleware\nMake http requests by dispatching actions! **From V2.0: Only compatible with Axios >13.X**\n\nThe goal of this module is to move the imperative handling of HTTP requests out of \nRedux applications. Instead HTTP requests are declared as actions and the success\nor failure of the request is dispatched as another action.\n\nThis approach makes testing easy, simplifies code, provides\nclear responsibilities and reduces coupling.\n\n\n## Installation\n\n`npm install --save redux-http-middleware`\n\n\n## Quick Example\n\n```javascript\nimport { createStore, applyMiddleware } from 'redux'\nimport { reduxHttpMiddleware, GET } from 'redux-http-middleware'\nimport axios from 'axios'\n\n// ACTIONS\nconst getStatus = () => ({\n  GET,\n  url: 'https://status.github.com/api/status.json',\n  onResponse: 'GET_STATUS_RESPONSE'\n})\n\n// REDUCER\nconst reducer = (state, action) => {\n  if(action.type === 'GET_STATUS_RESPONSE') console.log(`Github status: ${action.payload.status}`)\n}\n\n// STORE\nconst config = {\n  client: axios\n};\nconst store = createStore(\n  reducer,\n  applyMiddleware(\n    reduxHttpMiddleware(config)\n  )\n)\n\n// DISPATCH\nstore.dispatch(getStatus())\n\n// console output: good\n\n```\n\n## Making multiple async requests\n\n```javascript\n// ACTIONS\n// Replace url attribute with urls attribute which is an array of endpoints\n// Each request will use the same HTTP Method, Headers and any other attributes specified in the action\nconst getStatus = () => ({\n  GET,\n  urls: ['https://status.github.com/api/status.json', 'https://status.github.com/api/statusTwo.json']\n  onResponse: 'GET_STATUS_RESPONSE'\n})\n\n\n// REDUCER\nconst reducer = (state, action) => {\n  if(action.type === 'GET_STATUS_RESPONSE') {\n    // When making multiple requests in the same action the action.payload will return an array.\n    const firstResponse = action.payload[0]\n    const secondResponse = action.payload[1]\n    console.log(`Status1: ${firstResponse}, Status2: ${secondResponse}`)\n  }\n}\n```\n\n## Detailed Usage\n\n1. Adding the middleware\n\n  This is done by adding the middleware when the Redux store is created using the `applyMiddleware` function.\n  The middleware is created by passing an HTTP client to middleware function. Currently the only supported client\n  is axios, but it would be possible to use any client if it is wrapped in the same interface.\n\n  ```javascript\n  import { reduxHttpMiddleware } from 'redux-http-middleware'\n  import axios from 'axios'\n  import otherMiddleware1 from 'other-middleware1'\n  import otherMiddleware2 from 'other-middleware2'\n  import { createStore, applyMiddlware } from 'redux'\n  import reducer from '../reducers'\n  \n  const configureStore = (initialData) => {\n    const config = { client: axios };\n    const store = createStore(\n      reducer,\n      initialData,\n      applyMiddleware(\n        reduxHttpMiddleware(config),\n        otherMiddleware1,\n        otherMiddleware2\n      )\n    )\n  }\n  \n  export default configureStore\n  ```\n  \n2. Creating an HTTP request action\n\n  HTTP requests are declared by importing the relevant HTTP method and creating an action\n  with the required keys. The mandatory key is `url`, and optional keys are: `headers`, \n  `body`, `onRequest`, `onResponse`, `onError`.\n  Additional keys can also be used. Additional keys are passed on to the resulting\n  actions.\n  \n  ```javascript\n  import { GET, POST } from 'redux-http-middleware'\n  \n  export const getRepo = ({ owner, repo }) => ({\n    GET,\n    url: `https://api.github.com/repos/${owner}/${repo}`,\n    onRequest: 'GET_REPO_REQUEST',\n    onResponse: 'GET_REPO_RESPONSE',\n    onError: 'GET_REPO_ERROR',\n    owner,\n    repo\n  })\n  \n  export const createIssue = ({ owner, repo, title, body }) => ({\n    POST,\n    url: `https://api.github.com/repos/${owner}/${repo}/issues`,\n    headers: {\n      Authorization: 'token OAUTH-TOKEN' // token needs to be retrieved (e.g. from a cookie)\n    },\n    body: { title, body },\n    onRequest: 'CREATE_ISSUE_REQUEST',\n    onResponse: 'CREATE_ISSUE_RESPONSE',\n    onError: 'CREATE_ISSUE_ERROR',\n    owner,\n    repo,\n    title\n  })\n  ```\n  \n  Explanation of keys:\n    - **url**: (string) the absolute or relative URL to make the request to (required).\n    - **headers**: (Map<string, string>) the HTTP headers as an object.\n    - **body**: (object|string) the data that is serialized as the body of the request.\n    - **onRequest**: (string) the type of the action that is dispatched immediately. This is sent\n      before the request is sent. For example you might handle this in the reducers by enabling a spinner.\n    - **onResponse**: (string) the type of the action that is dispatch when a successful response is made.\n    - **onError**: (string) the type of the action that is dispatch when there is a problem with the request.\n    \n  \n3. Dispatching the HTTP request\n\n  The actions are dispatched just like any Redux actions. For example the above actions are dispatched as follows\n  ```javascript\n  store.dispatch(getRepo({ owner: 'sky-uk', repo: 'feed' })\n  store.dispatch(createIssue({ \n    owner: 'sky-uk',\n    repo: 'feed',\n    title: 'The title of the issue',\n    body: 'The details of the issue'\n  })\n  ```\n  \n  If you are using React Redux then the `mapDispatchToState` is a good place to do this dispatching.\n  \n  \n4. Handling the HTTP request\n\n  The actions resulting from the HTTP request can be handled in the reducers (if the UI state can be updated directly from the data, e.g. populate a list of articles from an API response) or in middleware (if further external calls must be made, e.g. logging API errors to a 3rd party such as New Relic or making another request).\n  \n  Examples of the resulting actions from the `getRepo` method above:\n  \n    - onRequest (dispatched immediately):\n      ```javascript\n      {\n        method: 'GET',\n        url: 'https://api.github.com/repos/sky-uk/feeds',\n        owner: 'sky-uk',\n        repo: 'feed'\n      }\n      ```\n      \n    - onResponse (dispatched after a successful HTTP request):\n      ```javascript\n      {\n        method: 'GET',\n        url: 'https://api.github.com/repos/sky-uk/feed',\n        owner: 'sky-uk',\n        repo: 'feed',\n        payload: {\n          id: 58119137,\n          name: \"feed\",\n          full_name: \"sky-uk/feed\",\n            .\n            .\n            .\n          network_count: 0,\n          subscribers_count: 8\n        }\n      }\n      ```\n  \n    - onError (dispatched when something has gone wrong with the request):\n      ```javascript\n      {\n        method: 'GET',\n        url: 'https://api.github.com/repos/sky-uk/doesNotExist',\n        owner: 'sky-uk',\n        repo: 'feed',\n        status: 404,\n        payload: {\n          message: \"Not Found\",\n          documentation_url: \"https://developer.github.com/v3\"\n        }\n      }\n      ```\n\n4. Default dispatches \n  - defaultResponseDispatch\n  - defaultErrorDispatch\n\n  If you pass <code>defaultResponseDispatch</code> at the time of in the config <b>redux-http-middleware</b> will dispatch that action before it dispatches it's onResponse action. The same applies for onError;\n  NOTE: This is used a a default way of handling notifications. <b>redux-http-middleware<b/> will only dispatch default actions if they are defined in the config.\n```js\n    const config = { client: axios, defaultResponseDispatch: 'MY_DEFAULT_ACTION_NAME' };\n    const store = createStore(\n      reducer,\n      initialData,\n      applyMiddleware(\n        reduxHttpMiddleware(config),\n        otherMiddleware1,\n        otherMiddleware2\n      )\n    )\n\n  export const getRepo = ({ owner, repo }) => ({\n    GET,\n    url: `https://api.github.com/repos/${owner}/${repo}`,\n    onRequest: 'GET_REPO_REQUEST',\n    onResponse: 'GET_REPO_RESPONSE',\n    onError: 'GET_REPO_ERROR',\n    owner,\n    repo\n  })\n\n  # DISPACTHES\n  { type: 'MY_DEFAULT_ACTION_NAME', context: 'GET_REPO_REQUEST', response: {...}, method: 'GET' }\n```\n","created":"2016-06-24T10:02:15.584Z","modified":"2017-04-03T13:19:01.541Z","lastPublisher":{"name":"nowtv","email":"andrew.merrell@sky.uk"},"owners":[{"name":"nowtv","email":"andrew.merrell@sky.uk"}],"other":{"_attachments":{},"_from":".","_id":"redux-http-middleware","_nodeVersion":"6.9.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/redux-http-middleware-3.1.2.tgz_1491225539010_0.18290915456600487"},"_npmUser":{"name":"nowtv","email":"andrew.merrell@sky.uk"},"_npmVersion":"4.4.1","_rev":"7-f3bdd24a175ecf9f1f08b3202b4f4eb2","_shasum":"f7599c6d6ba13e0073fe6d7ebf99ade10745b1fc","author":{"name":"Now TV Service Team"},"directories":{},"dist-tags":{"latest":"3.1.2"},"dist":{"shasum":"f7599c6d6ba13e0073fe6d7ebf99ade10745b1fc","tarball":"https://registry.npmjs.org/redux-http-middleware/-/redux-http-middleware-3.1.2.tgz"},"maintainers":[{"name":"nowtv","email":"andrew.merrell@sky.uk"}],"readmeFilename":"README.md","time":{"modified":"2017-04-03T13:19:01.541Z","created":"2016-06-24T10:02:15.584Z","0.0.1":"2016-06-24T10:02:15.584Z","0.0.2":"2016-06-24T10:11:18.165Z","0.0.3":"2016-06-24T12:08:40.867Z","1.0.3":"2016-06-27T10:03:44.750Z","1.0.4":"2016-06-27T17:33:32.902Z","1.0.5":"2016-06-27T22:17:11.212Z","1.0.6":"2016-06-27T22:18:50.678Z","1.0.7":"2016-06-27T22:36:54.281Z","1.1.0":"2016-08-24T09:10:33.043Z","1.1.1":"2016-08-24T09:25:55.243Z","1.1.2":"2016-10-18T14:09:37.145Z","2.0.0":"2016-11-24T14:50:59.172Z","2.1.0":"2016-11-24T16:18:56.919Z","3.0.0":"2017-03-31T14:13:31.025Z","3.1.0":"2017-04-03T10:08:38.993Z","3.1.1":"2017-04-03T13:07:23.110Z","3.1.2":"2017-04-03T13:19:01.541Z"}}}