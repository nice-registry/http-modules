{"name":"owind","description":"Open Web Interface for Node - Devices (OWIN-D). A lightweight REST framework for Node.js. Open-source, standards-based, drop-in replacement for Connect, Express, and Koa, with built-in seamless bridging to Node's built-in HTTP server, COAP servers such as","version":"0.1.6","repository":"https://github.com/OWIN-D/owind","dependencies":{"bluebird":"*"},"keywords":["owind","middleware","router","route","http","connect","promise","async","framework","node","tasks"],"license":"MIT","homepage":"http://owind.org","gitHead":"2743a1c6d2006ed2f4bd88131aa02eca8163c773","scripts":{},"versions":[{"number":"0.1.1","date":"2015-02-08T16:24:38.200Z"},{"number":"0.1.3","date":"2015-02-08T16:26:28.778Z"},{"number":"0.1.4","date":"2015-02-08T16:29:53.471Z"},{"number":"0.1.5","date":"2015-02-08T16:42:43.171Z"},{"number":"0.1.6","date":"2015-02-08T16:50:24.175Z"}],"readme":"[![OWIN/JS](https://raw.github.com/OWIN-D/owind-spec/master/owind.png)](http://owind.github.io)\n\n# npm install owind\n[![Circle CI](https://circleci.com/gh/OWIN-D/owind.svg?style=shield)](https://circleci.com/gh/OWIN-D/owind)\n[![npm version](https://badge.fury.io/js/owind.png?version=1)](http://badge.fury.io/js/owind)\n\n## About\n`owind` is the reference implementation for OWIN-D, a lightweight REST framework for Node.js.  \n\nIt is an open-source, standards-based, drop-in replacement for Connect, Express, and Koa, with built-in seamless bridging to Node's built-in HTTP server, COAP servers such as [`node-coap`](https://github.com/mcollina/node-coap), and native OWIN servers such as [nodekit.io](https://github.com/nodekit-io/nodekit)\n\nThe [OWIN-D](https://github.com/OWIN-D/owind-spec) specification defines a standard interface between Node.js REST servers and application/device logic.   These include HTTP servers for web applications and COAP servers for Internet of Things (IOT) devices.\n\nIn fact, OWIN-D is a direct port of the [OWIN](http://owin.org) specification to expand the reach to Node.js servers as well as keep the reference .NET spec intact.  \n\nPublished as open-source standards without dependence on any implementation or platform , the OWIN-D specs allow applications to be developed independently of the actual server (nGinX, IIS, Node.js, Katana, node-coap, etc.)\n\nIn contrast to the  [OWIN-D](https://github.com/OWIN-D/owind-spec) *specification*, this repository contains an **actual** OWIN-D server **implementation** for node.js Javascript.  \n\nA broad ecosystem of servers and middleware, such as routers and view engines, exist in the the [OWIN-D Organization](https://github.com/OWIN-D] on GitHub.\n\n## Summary\n\nAn OWIN-D middleware/application is simply a `function(next)` that provides a single REST-server owin context for each request, where it is easy to access all the HTTP/COAP parameters  (`this.request.path`, `this.response.body` etc.).  \"Tasks\" (promises) are returned for full async programming without callbacks nor use of limited ES6 features.\n\nMiddleware can be chained with `app.use(middleware1).use(middleware2)` etc.\n\nOWIN-D servers can also call regular Node HTTP middleware in the same chain with `app.use( function(req,res){ ... }  )`. \n\nOWIN-D middleware and legacy middleware can be used with a COAP server such as [node-coap](https://github.com/mcollina/node-coap) with `app.buildCoap()` and can be used directly with Node's built-in http server with `app.buildHttp()`.    It can even be used in embedded webkit applications such as [nodekit.io](https://github.com/nodekit-io/nodekit).\n\n\n## NPM Package Contents\n\nThis repository contains a Node Package Manager (NPM) package with helper functions for:\n \n* AppBuilder for chaining middleware and applications, with automatic bridging to async-based Tasks (Promises conforming to Promise/A specification), use of *this* for owinContext instead of separate argument, and *next* argument for middleware chaining\n* Connect app bridge: An OWIN-D -> Connect/Express application bridge\n* HTTP server bridge:  A Node.js Http Server --> OWIN application bridge\n* COAP server bridge:  A node-coap Server --> OWIN application bridge\n* Promise:  Includes a dependency to the [bluebird](https://github.com/petkaantonov/bluebird) implementation which can be used by all other OWIN-D applications and middleware\n\nThis package is intended for use in Node.js applications that either run on a web server that conform to the OWIN-D specifications (such as the embedded webserver inside [nodekit.io](https://github.com/nodekit-io/nodekit)) or run using the included owinCoap and owinHttp bridge for node-coap and node Http servers respectively.\n\n## Middleware/Application Pipeline Builder: AppBuilder \n```js\napp.use(middleware)\n```\n\nAdds a middleware node to the OWIN-D function pipeline. The middleware are\ninvoked in the order they are added: the first middleware passed to `app.use` will\nbe the outermost function, and the last middleware passed to Use will be the\ninnermost.\n\n### middleware\nThe middleware parameter determines which behavior is being chained into the pipeline. \n\n* If the middleware given to use is a function that takes **one** argument, then it will be invoked with the `next` component in the chain as its parameter, and with the `this` context set to the OWIN-D context.  It MUST return a promise that conforms to the Promise/A specification.\n\n* If the middleware given to use is a function that takes **two** arguments, then it will be invoked with the `next` component in the chain as its parameter, with a Node-based callback (`function(err, result){}`)as its second parameter, and with the `this` context set to the Owin/JS context.  This type of middleware should return void.\n\n* Legacy middleware can also be invoked with  `app.use( function(req,res){ ... }  )`, `app.use( function(req, res, next){ ... }  )` or `app.use( function(err, req, res, next){ ... }  )`.  The AppBuilder is smart enough to detect the two argument function with parameters named req and res in this case (use of different naming conventions need to be wrapped in a `function(req,res){}`), and assumes three and four argument functions are legacy.\n\n\n### returns app\nThe AppBuilder `app` itself is returned. This enables you to chain your use statements together.\n\n### build pipeline when all middleware added:\n```js\napp.build()\n```\nreturns an Owin/JS AppFunc `(promise) function(owin)` that can be inserted into any OWIN-D server.\n\n## Bridges\n\nThree simple functions `owind.connect()`, `owind.COAP()` and `owind.REST()` are provided to bridge between OWIN-D context applications/middleware and Node.js COAP and HTTP REST-style `function(req,res)` based  applications/middleware.   Often these are not used directly as the AppBuilder functionality automatically wraps legacy middleware and can even return a node.js-ready pipeline with `.buildREST()`\n\nNote: The bridges are low overhead functions, binding by reference not by value wherever possible, so middleware can be interwoven throughout the pipeline, and open up the OWIN-D world to the entire Connect/Express based ecosystem and vice versa.   \n\nWe have not ported to Koa, Mach, Kraken or other similar frameworks but it would be relatively straightforward to do so.\n\n* `owin.connect()` consumes a Connect-based application function (one that would normally be passed to the http.CreateServer method) and returns an Owin-D **AppFunc**.\n* `owin.http()` consumes an Owin/JS **AppFunc** and returns a function (that takes http.requestMessage and http.requestMessage as arguments) and one that can be passed directly to the http.createServer method    \n* `app.buildHttp()` is syntactic sugar to build the pipleine and returns a node.js-ready function (that takes http.requestMessage and http.requestMessage as arguments) and one that can be passed directly to the http.createServer method   \n* `owin.coap()` consumes an Owin/JS **AppFunc** and returns a function (that takes http.requestMessage and http.requestMessage as arguments) and one that can be passed directly to the http.createServer method    \n* `app.buildCoap()` is syntactic sugar to build the pipleine and returns a node-coap-ready function (that takes req and res as arguments) and one that can be passed directly as server.on('request', ____) event handler   \n\n## Example Usage\n\n### Installation\n``` js\nnpm install owind\n```\n    \n### Hello World Example\n``` js\nvar owin = require('owind');\nvar app = new owin.app();\napp.use(function(next){\n    this.response.writeHead(200, {'Content-Type': 'text/html'});\n    this.response.end(\"<html><head></head><body>Hello World</body>\");\n    return next();\n    });\nowin.createServer(app.build()).listen();\n```\n   \n### Hello World with callbacks instead of Async Promises\n``` js\nvar owin = require('owind');\nvar app = new owin.app();\napp.use(function(next, callback){\n    this.response.writeHead(200, {'Content-Type': 'text/html'});\n    this.response.end(\"<html><head></head><body>Hello World</body>\");\n    next(this, function(err, result){callback(err,result)});\n    });\nowin.createServer(app.build()).listen();\n```\n\n### Automatic OwinConnect Bridge to Legacy Connect/Express Middleware    \n``` js\nvar owin = require('owind');\nvar app = new owin.app();  \napp.use(function(req, res) {\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.end(\"<html><head></head><body>Hello World</body>\");\n});\nowin.createServer(app.build()).listen(); \n```    \n\n### OwinHttp Bridge\n    \n``` js\nvar owin = require('owind');\nvar http = require('http');\nvar app = new owin.app();\napp.use(function(next){\n    this.response.writeHead(200, {'Content-Type': 'text/html'});\n    this.response.end(\"<html><head></head><body>Hello World</body>\");\nreturn next();\n});\nhttp.createServer(app.buildHttp()).listen();\n```  \n\n### OwinCoap Bridge\n    \n``` js\nvar owin = require('owind');\nvar coap = require('coap');\nvar server = coap.createServer();\nvar app = new owin.app();\napp.use(function(next){\n   this.response.end('Hello World from ' + this[\"owin.RequestPath\"].split('/')[1] + '\\n');\n   return next();\n    });\n\nserver.on('request', app.buildCoap());\n```  \n\n## Definitions\n\n * **appFunc** = `(Promise) function()` with `this` = **owin**\n * **app.use** = `(app)function(middleware)`\n * **middleware** = `(Promise) function(next)` with `this` = **owin**, `next`=**appFunc**\n * OR **middleware** = `(void) function(next, callback)`  with `this` = **owin**, `next`=(void) function(callback)  for compatibility with traditional node Callback-style  OWIN/JS middelware\n * OR **middleware** = `fn(req, res, next)` for compatibility with Connect/ExpressJS middleware\n * OR **middleware** = `fn(err, req, res, next)` for compatibility with Connect/ExpressJS middleware\n * **app.build** = `(appFunc) function()`   // builds middleware \n * **app.buildHttp** = `(function(req, res)) function()`   // builds middleware for compatibility with Connect/ExpressJS hosts\n * **app.buildCoap** = `(function(req, res)) function()`   // builds middleware for compatibility with node-coap hosts\n * **owin** = owin context\n\n## API Reference Specification\n \n[`OWIN-D/owind-spec`](https://github.com/OWIN-D/owind-spec/blob/master/Specification.md)\n","created":"2015-02-08T16:24:38.200Z","modified":"2015-02-08T16:50:24.175Z","lastPublisher":{"name":"owind","email":"admin@owind.org"},"owners":[{"name":"owind","email":"admin@owind.org"}],"other":{"_attachments":{},"_from":".","_id":"owind","_nodeVersion":"0.10.28","_npmUser":{"name":"owind","email":"admin@owind.org"},"_npmVersion":"2.1.16","_rev":"1-0cbe5ab77bd8f2d4e4b465b0ec792503","_shasum":"c72d5587e25d905594a3bc1b0c083e6db1a23f85","author":{"name":"OWIN-D"},"bugs":{"url":"https://github.com/OWIN-D/owind/issues"},"directories":{},"dist-tags":{"latest":"0.1.6"},"dist":{"shasum":"c72d5587e25d905594a3bc1b0c083e6db1a23f85","tarball":"http://registry.npmjs.org/owind/-/owind-0.1.6.tgz"},"maintainers":[{"name":"owind","email":"admin@owind.org"}],"readmeFilename":"README.md","time":{"modified":"2015-02-08T16:50:24.175Z","created":"2015-02-08T16:24:38.200Z","0.1.1":"2015-02-08T16:24:38.200Z","0.1.3":"2015-02-08T16:26:28.778Z","0.1.4":"2015-02-08T16:29:53.471Z","0.1.5":"2015-02-08T16:42:43.171Z","0.1.6":"2015-02-08T16:50:24.175Z"}}}