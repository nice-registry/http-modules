{"name":"nockingbird","version":"0.2.0","description":"Declarative HTTP mocking (for use with Nock)","tags":["http","mock","nock","test"],"repository":"https://github.com/plaid/nockingbird","main":"./lib/nockingbird","dependencies":{"ramda":"0.7.x"},"devDependencies":{"coffee-script":"1.8.x","mocha":"1.21.x","nock":"0.27.x","xyz":"0.4.x"},"gitHead":"411938763ed09d9a6d868777885da8817f1a385d","homepage":"https://github.com/plaid/nockingbird","scripts":{},"versions":[{"number":"0.1.2","date":"2014-06-06T00:53:24.267Z"},{"number":"0.1.3","date":"2014-07-16T01:23:29.160Z"},{"number":"0.1.4","date":"2014-07-16T17:59:27.127Z"},{"number":"0.2.0","date":"2014-10-23T18:16:04.611Z"}],"readme":"# Nockingbird\n\nNockingbird is an interface for [Nock][1]. With Nockingbird, mocks are\nspecified in straightforward text files, rather than in JavaScript code.\n\nExample from the Nock [documentation][2]:\n\n```javascript\nvar scope = nock('http://myapp.iriscouch.com')\n                .get('/users/1')\n                .reply(404)\n                .post('/users', {\n                  username: 'pgte',\n                  email: 'pedro.teixeira@gmail.com'\n                })\n                .reply(201, {\n                  ok: true,\n                  id: '123ABC',\n                  rev: '946B7D1C'\n                })\n                .get('/users/123ABC')\n                .reply(200, {\n                  _id: '123ABC',\n                  _rev: '946B7D1C',\n                  username: 'pgte',\n                  email: 'pedro.teixeira@gmail.com'\n                });\n```\n\nThe equivalent Nockingbird file is as follows:\n\n    -- chaining-example.nb\n\n    >> GET /users/1\n    << 404\n\n    >> POST /users\n    >>   username=pgte\n    >>   email=pedro.teixeira%40gmail.com\n    << 201\n    << content-type: application/json\n    << ={\"ok\":true,\"id\":\"123ABC\",\"rev\":\"946B7D1C\"}\n\n    >> GET /users/123ABC\n    << 200\n    << content-type: application/json\n    << ={\"_id\":\"123ABC\",\"_rev\":\"946B7D1C\",\"username\":\"pgte\",\"email\":\"pedro.teixeira@gmail.com\"}\n\n__nockingbird.load__ can be used to apply the declarations in a Nockingbird\nfile to a Nock scope object:\n\n```javascript\nvar nock = require('nock');\nvar nockingbird = require('nockingbird');\n\nvar scope = nock('http://myapp.iriscouch.com');\nnockingbird.load(scope, __dirname + '/mocks/chaining-example.nb');\n```\n\n### File format\n\nNockingbird files consist of zero or more \"chunks\". A file's text is broken\ninto chunks according to the delimiter `\\n\\n`. Each line within a chunk must\nbegin with `>>`, `<<`, or `--`. `>>` is for requests; `<<` is for responses.\nLines beginning with `--` are ignored. For example:\n\n```\n-- Retrieve John's account details from the /users endpoint.\n>> GET /users/1\n<< 200\n<< content-type: application/json\n<< ={\"id\":\"1\",\"username\":\"jsmith\",\"email\":\"jsmith@example.com\"}\n```\n\nThe extension for the Nockingbird file format is `.nb`.\n\n#### Chunks\n\nEach chunk must conform to the following grammar:\n\n```ebnf\nchunk               = request lines , response lines ;\n```\n\n#### Request lines\n\nEach chunk must contain one or more request lines (lines beginning with `>>`),\nin accordance with the following grammar:\n\n```ebnf\nrequest lines       = main request line , { request body } ;\nmain request line   = request prefix , method name , pathname , \"\\n\" ;\nmethod name         = \"GET\" | \"POST\" | \"PUT\" | \"HEAD\" | \"PATCH\" | \"MERGE\" | \"DELETE\" ;\npathname            = { any character } ;\nrequest body        = inline body ;\ninline body         = inline body line , { inline body line } ;\ninline body line    = request prefix , \"=\" , { any character } , \"\\n\" ;\nrequest prefix      = \">>\" , { \" \" } ;\nany character       = ? any character except \"\\n\" ? ;\n```\n\n#### Response lines\n\nEach chunk must contain two or more response lines (lines beginning with `<<`),\nin accordance with the following grammar:\n\n```ebnf\nresponse lines      = status code line , { header line } , response body ;\nstatus code line    = response prefix , status code , \"\\n\" ;\nstatus code         = digit , { digit } ;\ndigit               = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nheader line         = response prefix , header name , \":\" , { \" \" } , header value , \"\\n\" ;\nheader name         = { any character } ;\nheader value        = { any character } ;\nresponse body       = inline body | filename line ;\ninline body         = inline body line , { inline body line } ;\ninline body line    = response prefix , \"=\" , { any character } , \"\\n\" ;\nfilename line       = response prefix , { any character } , \"\\n\" ;\nresponse prefix     = \"<<\" , { \" \" } ;\nany character       = ? any character except \"\\n\" ? ;\n```\n\n\n[1]: https://github.com/pgte/nock\n[2]: https://github.com/pgte/nock#chaining\n","created":"2014-06-06T00:53:24.267Z","modified":"2014-10-23T18:16:04.611Z","lastPublisher":{"name":"davidchambers","email":"dc@davidchambers.me"},"owners":[{"name":"davidchambers","email":"dc@davidchambers.me"},{"name":"michaelckelly","email":"m@michaelckelly.com"},{"name":"charleswli","email":"charlesweiyili@gmail.com"},{"name":"baburkhwaja","email":"babur@plaid.com"}],"other":{"_attachments":{},"_from":".","_id":"nockingbird","_npmUser":{"name":"davidchambers","email":"dc@davidchambers.me"},"_npmVersion":"1.4.28","_rev":"1-8fcf7ef184f6e79ecd20d8969f7cdced","_shasum":"a41c34dc95ada53e7065e948ccd5733fc9033432","author":{"name":"David Chambers","email":"david@plaid.com"},"bugs":{"url":"https://github.com/plaid/nockingbird/issues"},"directories":{},"dist-tags":{"latest":"0.2.0"},"dist":{"shasum":"a41c34dc95ada53e7065e948ccd5733fc9033432","tarball":"http://registry.npmjs.org/nockingbird/-/nockingbird-0.2.0.tgz"},"maintainers":[{"name":"davidchambers","email":"dc@davidchambers.me"},{"name":"michaelckelly","email":"m@michaelckelly.com"},{"name":"charleswli","email":"charlesweiyili@gmail.com"},{"name":"baburkhwaja","email":"babur@plaid.com"}],"readmeFilename":"README.md","time":{"modified":"2014-10-23T18:16:04.611Z","created":"2014-06-06T00:53:24.267Z","0.1.2":"2014-06-06T00:53:24.267Z","0.1.3":"2014-07-16T01:23:29.160Z","0.1.4":"2014-07-16T17:59:27.127Z","0.2.0":"2014-10-23T18:16:04.611Z"}}}