{"name":"msb-http2bus","version":"0.7.4","description":"An HTTP server providing endpoints for services exposed through the MSB bus.","main":"app.js","scripts":{"npmrc":"printf \"_auth = $NPM_AUTH_TOKEN\nemail = $NPM_EMAIL\n\" > .npmrc","test":"npm run test-no-publish && if [ -n \"${TRAVIS_TAG}\" ]; then npm run npmrc && npm publish; fi","test-no-publish":"lab -t 90","test-watch":"nodemon node_modules/lab/bin/lab -cv -t 90","cs":"jscs **/*.js"},"repository":"https://github.com/tcdl/msb-http2bus","license":"MIT","homepage":"https://github.com/tcdl/msb-http2bus","devDependencies":{"code":"^1.5.0","jscs":"^2.0.0","lab":"^5.15.0","nodemon":"^1.4.0","simple-mock":"^0.3.1"},"dependencies":{"cors":"^2.7.1","debug":"^2.2.0","finalhandler":"^0.4.0","lodash":"^3.10.1","minimist":"^1.1.3","msb":">=0.8.0 <1","parseurl":"^1.3.0","raw-body":"^2.1.2","router":"^1.1.3"},"bin":{"http2bus":"./bin/http2bus"},"gitHead":"dc58aa515cd031d17de6b840dbbed227d6e7cc37","versions":[{"number":"0.6.0","date":"2015-08-07T10:54:18.042Z"},{"number":"0.6.1","date":"2015-08-10T13:04:53.934Z"},{"number":"0.7.0-0","date":"2015-08-10T13:30:12.403Z"},{"number":"0.7.0-2","date":"2015-08-10T16:40:09.273Z"},{"number":"0.7.0-3","date":"2015-08-11T08:50:05.917Z"},{"number":"0.7.0","date":"2015-08-19T12:05:58.701Z"},{"number":"0.7.1","date":"2015-08-24T15:19:05.741Z"},{"number":"0.7.2","date":"2015-08-24T15:23:01.413Z"},{"number":"0.7.3","date":"2015-10-22T11:29:33.697Z"},{"number":"0.7.4","date":"2015-11-09T15:42:44.338Z"}],"readme":"# msb-http2bus [![Build Status](https://travis-ci.org/tcdl/msb-http2bus.svg)](https://travis-ci.org/tcdl/msb-http2bus)\nAn HTTP server providing endpoints for services exposed through the [MSB](https://github.com/tcdl/msb) bus.\n\n## Installation\n\n```\n$ npm install msb-http2bus\n```\n\nTo run the server from the command line, globally install with option `-g`.\n\n## Server\n\nStart a server with a static configuration file:\n\n```\n$ http2bus example/http2bus.json\n```\n\nBase configuration format, provided as either _json_ or _js_:\n\n```js\n{\n  channelMonitorEnabled: true, // Default: true\n  port: 8080, // Default: 0 (random port)\n  routes: [\n    { /* ... */ },\n    { /* ... */ }\n  ]\n}\n```\n\n(All standard [MSB environment variables](https://github.com/tcdl/msb#environment-variables) should be provided for broker configuration.)\n\n### Routes\n\nRoutes are loaded as an array of configuration objects, always specifying an `http` section as well as either `bus` or `provider` section.\n\n- **http** Object An object required for all routes specifying HTTP behaviour.\n- **http.path** String An [Express-style path](https://github.com/pillarjs/path-to-regexp#usage) to listen on.\n- **http.basePath** _Optional_ URLs and redirects are relative to this path. (Default: '/')\n- **http.methods** _Optional_ Array The HTTP methods to listen for, e.g. `get`, `post`, `put`, `head`. (Default: `['get']`)\n- **http.remote** _Optional_ Boolean Route all traffic below this path, for no specific HTTP methods, to a remote router.  (Default: `false`)\n- **http.cors** _Optional_ Object CORS middleware [configuration options](https://github.com/expressjs/cors#configuration-options).\n- **bus** Object Must be a valid [Requester configuration](https://github.com/tcdl/msb#class-msbrequester).\n- **provider** Object Dynamic routes can provided by this provider.\n- **provider.name** String The name corresponding to the [Routes Agent](#routes-provider-agent).\n\n#### Static Route Example\n\nFor routing _GET_ requests similar to `/api/v1/example/abc123?depth=10` to `example:topic`:\n\n```js\n{\n  http: {\n    basePath: '/api/v1/examples',\n    path: '/:example-id',\n    methods: ['get']\n  },\n  bus: {\n    namespace: 'example:topic',\n    waitForResponses: 1\n  }\n}\n```\n\nThe payload placed on `example:topic` would be similar to:\n\n```js\n{\n  \"method\": \"get\",\n  \"url\": \"/abc123\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"params\": {\n    \"example-id\": \"abc123\"\n  },\n  \"query\": {\n    \"depth\": \"10\"\n  }\n}\n```\n\nSee [this normal responder](https://github.com/tcdl/msb#1-1-1) example.\n\nHeaders provided in the responder payload are sent in the HTTP response. E.g, for a redirect:\n\n```js\nresponse.writeHead(301, {\n  location: '/renamed-abc123'\n})\n```\n\nIf the `location` header, is not fully qualified, i.e. without protocol and domain name, it will be rewritten relative to this base path specified in the route, in this case `/api/v1/examples/renamed-abc123`.\n\n#### Dynamic Routes Example\n\nTo route all requests below `/api/v1/remotes` using routes configurations provided by this routes agent.\n\n```js\n{\n  http: {\n    basePath: '/api/v1/remotes'\n  },\n  provider: {\n    name: 'remotes-example-api'\n  }\n}\n```\n\nThe routes loaded by the corresponding [Routes Agent](#routes-provider-agent) will be published relative to the specified `basePath`.\n\n## Routes Agent\n\nYou can provide routes to http2bus servers from remote agents on the bus. An agent must be specified as a `provider` in a route on the server. Note: an agent does not actually process any requests, it only publishes routes to the servers.\n\n\nFor example:\n\n```js\nvar http2bus = require('msb-http2bus')\n\nvar agent = http2bus.routesAgent.create({\n  name: 'remotes-example-api',\n  ttl: 3600000\n})\n\nvar routes = [{\n  http: {\n    path: '/:example-id',\n    methods: ['get']\n  },\n  bus: {\n    namespace: 'example:topic',\n    waitForResponses: 1\n  }\n}]\n\nagent\n.start()\n.load(routes)\n```\n\nThe configuration format for routes are the same as on the http2bus server. You can dynamically change routes to be reloaded on all relevant http2bus servers:\n\n```js\nagent.load([])\n```\n\n(All standard [MSB environment variables](https://github.com/tcdl/msb#environment-variables) should be provided for broker configuration.)\n\n## License\n\nMIT\n","created":"2015-08-07T10:54:18.042Z","modified":"2016-03-02T13:30:09.782Z","lastPublisher":{"name":"tcdl","email":"tcdlmsb@gmail.com"},"owners":[{"name":"galkin","email":"nikita@galk.in"},{"name":"tcdl","email":"integration-dev@thomascookonline.com"}],"other":{"_attachments":{},"_from":".","_id":"msb-http2bus","_npmUser":{"name":"tcdl","email":"tcdlmsb@gmail.com"},"_npmVersion":"1.4.28","_rev":"1-83978b9aeedd58b9758f02305d90f06e","_shasum":"7923051d8ef73ff9d91340b7730fc4fe1fedceef","bugs":{"url":"https://github.com/tcdl/msb-http2bus/issues"},"directories":{},"dist-tags":{"latest":"0.7.4"},"dist":{"shasum":"7923051d8ef73ff9d91340b7730fc4fe1fedceef","tarball":"http://registry.npmjs.org/msb-http2bus/-/msb-http2bus-0.7.4.tgz"},"maintainers":[{"name":"galkin","email":"nikita@galk.in"},{"name":"tcdl","email":"integration-dev@thomascookonline.com"}],"readmeFilename":"README.md","time":{"modified":"2016-03-02T13:30:09.782Z","created":"2015-08-07T10:54:18.042Z","0.6.0":"2015-08-07T10:54:18.042Z","0.6.1":"2015-08-10T13:04:53.934Z","0.7.0-0":"2015-08-10T13:30:12.403Z","0.7.0-2":"2015-08-10T16:40:09.273Z","0.7.0-3":"2015-08-11T08:50:05.917Z","0.7.0":"2015-08-19T12:05:58.701Z","0.7.1":"2015-08-24T15:19:05.741Z","0.7.2":"2015-08-24T15:23:01.413Z","0.7.3":"2015-10-22T11:29:33.697Z","0.7.4":"2015-11-09T15:42:44.338Z"}}}