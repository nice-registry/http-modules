{"name":"httpmocker","version":"1.3.5","description":"http request mocker","main":"index.js","scripts":{"test":"NODE_ENV=test node test.js"},"repository":"https://github.com/yorkie/node-httpmocker.js","keywords":["mocker","http","injection"],"license":"MIT","homepage":"https://github.com/yorkie/node-httpmocker.js","devDependencies":{"event-stream":"^3.1.7","tape":"^3.0.3"},"dependencies":{"path-to-regexp":"^1.0.2"},"gitHead":"8e57a1bd708b4a071dd226688d1a1462a9a958b9","versions":[{"number":"1.0.0","date":"2014-11-11T10:07:29.018Z"},{"number":"1.0.1","date":"2014-11-11T10:09:12.658Z"},{"number":"1.0.2","date":"2014-11-13T08:15:46.800Z"},{"number":"1.0.3","date":"2014-11-13T08:24:08.901Z"},{"number":"1.0.4","date":"2014-11-13T14:51:50.372Z"},{"number":"1.0.5","date":"2014-11-13T15:37:54.312Z"},{"number":"1.0.6","date":"2014-11-13T15:52:47.470Z"},{"number":"1.0.7","date":"2014-11-13T15:54:28.811Z"},{"number":"1.1.0","date":"2014-11-28T08:50:07.445Z"},{"number":"1.1.1","date":"2014-11-28T09:19:16.829Z"},{"number":"1.1.2","date":"2014-11-28T09:48:49.858Z"},{"number":"1.1.3","date":"2014-11-30T06:31:08.845Z"},{"number":"1.1.4","date":"2014-11-30T06:54:45.514Z"},{"number":"1.2.0","date":"2014-12-30T13:27:09.309Z"},{"number":"1.3.0","date":"2015-01-02T14:34:48.278Z"},{"number":"1.3.1","date":"2015-01-02T14:39:47.493Z"},{"number":"1.3.2","date":"2015-01-02T14:42:42.052Z"},{"number":"1.3.3","date":"2015-01-03T19:46:48.998Z"},{"number":"1.3.4","date":"2015-01-03T19:56:49.814Z"},{"number":"1.3.5","date":"2015-02-25T11:54:17.929Z"}],"readme":"\nHTTP Mocker\n===========================\n\n[![Build Status](https://travis-ci.org/yorkie/node-httpmocker.svg)](https://travis-ci.org/yorkie/node-httpmocker)\n\n[![NPM](https://nodei.co/npm/httpmocker.png?stars&downloads)](https://nodei.co/npm/httpmocker/)\n\n[![NPM](https://nodei.co/npm-dl/httpmocker.png)](https://nodei.co/npm/httpmocker/)\n\n`httpmocker` is a testing tool for mocking any requests that you are not able to access in your test file.\n\n### Features\n\n* don't change any source codes from your lib directory\n* configurable (easy to filter requests)\n\n### Why?\n\nSometimes, you may use these third-party modules like `node-aws`, `node-semantics3` those control how the program call requests over HTTP/HTTPS, so if you wanna accurately filter these requests, it's hacky and ugly.\n\nImagine the following aws codes:\n\n```js\n// create the AWS.Request object\nvar request = new AWS.EC2().describeInstances();\n\n// register a callback to report on the data\nrequest.on('success', function(resp) {\n  console.log(resp.data); // log the successful data response\n});\n\n// send the request\nrequest.send();\n```\n\nif you wanna filter your program in your testing progress, you have to add 2 lines in your source code:\n\n```js\nif (process.env.NODE_ENV === 'test')\n  // return or callback\n```\n\nonce there are the certain amount number of third-party function calls in your source, you then need to write the corresponding number of above blocks, that's aweful.\n\n### Let's be graceful from `httpmocker`\n\nIn your test file:\n\n```js\nvar configmock = require('httpmocker').config;\nconfigmock({\n  'https://api.aws.com/': {\n    error: null,\n    statusCode: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: {foo: 'bar'}\n  }, {\n  'https://example.com/users/:id': {\n    error: null,\n    statusCode: 404,\n    body: 'not found'\n  }\n});\n```\n\nthen when you do request:\n\n```js\nrequest.send();\n```\n\nit will return:\n\n```js\nfunction onresponse (res) {\n  // res.statusCode = 200;\n  // res.headers['Content-Type'] = 'application/json';\n  // res.body = {foo: 'bar'};\n}\n```\n\n### API\n\n`httpmocker` exports one function `httpmocker.config(config)`, it provides a way to define responses which you are going to expect to mock.\n\nThe `config` is an object that maps the router, `Object.keys(config)` should return urls(prefix) that you wanna mock for testing. And every url prefix should hold a object that like:\n\n```js\n{\n  \"error\": \"...your error if you wanna throw\",\n  \"statusCode\": 400, // or status\n  \"headers\": {\n    \"head1_key\": \"head1_value\"\n  },\n  \"body\": \"string/buffer/object, will write to readable instance\"\n}\n```\n\n`httpmocker` exports 2nd function `httpmocker.clear([url])`, it provides a way to clear config that you set, it receives one optional argument, if provided, will remove config by `url` that you would pass, if not, will remove all configurations.\n\n**NOTE**: please use `httpmocker` with `NODE_ENV=test`\n\n### Installation\n\nRecommended command to install\n```sh\n$ npm install httpmocker --save-dev\n```\n\n### License\n\nMIT. Copyright (c) [Yorkie Liu](https://github.com/yorkie)\n","created":"2014-11-11T10:07:29.018Z","modified":"2015-02-25T11:54:17.929Z","lastPublisher":{"name":"yorkie","email":"yorkiefixer@gmail.com"},"owners":[{"name":"yorkie","email":"yorkiefixer@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"httpmocker","_npmUser":{"name":"yorkie","email":"yorkiefixer@gmail.com"},"_npmVersion":"1.4.28","_rev":"1-8c1c820d9cafa243c0aef2eb47750676","_shasum":"d3b121185f8dbe8d507412a30b42d3443879cc81","author":{"name":"Yorkie Liu","email":"yorkiefixer@gmail.com"},"bugs":{"url":"https://github.com/yorkie/node-httpmocker.js/issues"},"directories":{},"dist-tags":{"latest":"1.3.5"},"dist":{"shasum":"d3b121185f8dbe8d507412a30b42d3443879cc81","tarball":"http://registry.npmjs.org/httpmocker/-/httpmocker-1.3.5.tgz"},"maintainers":[{"name":"yorkie","email":"yorkiefixer@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-02-25T11:54:17.929Z","created":"2014-11-11T10:07:29.018Z","1.0.0":"2014-11-11T10:07:29.018Z","1.0.1":"2014-11-11T10:09:12.658Z","1.0.2":"2014-11-13T08:15:46.800Z","1.0.3":"2014-11-13T08:24:08.901Z","1.0.4":"2014-11-13T14:51:50.372Z","1.0.5":"2014-11-13T15:37:54.312Z","1.0.6":"2014-11-13T15:52:47.470Z","1.0.7":"2014-11-13T15:54:28.811Z","1.1.0":"2014-11-28T08:50:07.445Z","1.1.1":"2014-11-28T09:19:16.829Z","1.1.2":"2014-11-28T09:48:49.858Z","1.1.3":"2014-11-30T06:31:08.845Z","1.1.4":"2014-11-30T06:54:45.514Z","1.2.0":"2014-12-30T13:27:09.309Z","1.3.0":"2015-01-02T14:34:48.278Z","1.3.1":"2015-01-02T14:39:47.493Z","1.3.2":"2015-01-02T14:42:42.052Z","1.3.3":"2015-01-03T19:46:48.998Z","1.3.4":"2015-01-03T19:56:49.814Z","1.3.5":"2015-02-25T11:54:17.929Z"}}}