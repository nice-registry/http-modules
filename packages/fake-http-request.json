{"name":"fake-http-request","version":"1.3.0","description":"Utility class to fake HTTP/HTTPS requests for unit testing Node.js projects. It captures arguments for outgoing requests and allows you to simulate network errors and responses easily.","scripts":{"test":"node spec/support/jasmine-runner.js"},"main":"index.js","keywords":["http","https","request","post","rest","unit testing","mock"],"homepage":"https://github.com/gojko/fake-http-request","repository":"https://github.com/gojko/fake-http-request","license":"MIT","devDependencies":{"jasmine":"^2.4.1","jasmine-spec-reporter":"^2.4.0","request":"^2.72.0"},"gitHead":"f403382e1ac3e04b34942fe88deff5fe358eccc1","versions":[{"number":"1.0.0","date":"2016-06-02T15:12:45.273Z"},{"number":"1.1.0","date":"2016-06-02T16:24:41.603Z"},{"number":"1.2.0","date":"2016-06-02T18:24:48.737Z"},{"number":"1.3.0","date":"2016-06-10T13:02:30.399Z"}],"readme":"# Fake Node.js HTTP Request \n\nUtility class to fake a HTTP/HTTPS request for unit testing Node.js projects. It captures arguments for outgoing requests and allows you to simulate network errors and responses easily. It can also pipe outgoing HTTP/S requests to custom functions, so you can asynchronously wait for them.\n\n## Installation\n\n\n```\nnpm install fake-http-request\n```\n\n## Usage\n\nBefore the relevant HTTP/S requests, install the fake request:\n\n```javascript\nvar fake = require('fake-http-request');\n\nfake.install('https');\n\n```\n\nTo clean up and restore the original HTTP/S requests, after testing, use:\n\n```javascript\nfake.uninstall('https');\n```\n\nThis will replace the system `https.request` with a test method that captures calls instead of sending them out to the network, so it will work with any client code that uses the system http/https libraries.\n\nBoth `install` and `uninstall` can take an argument -- the module name where to install the fake requests. By default, they will use `https`.\n\nYou can then use `https.request.calls` to inspect individual calls. Each call object will have the following structure:\n\n* `args`: `array` -- arguments passed to the request\n* `body`: `array` -- chunks written to the request body\n* `networkError`: `function (error)` -- use this to simulate a network error for the call.\n* `respond`: `function(httpCode, statusMessage, body)` -- use this to simulate a successful network response.\n\nYou can also use `https.request.pipe` to pass in a function that will receive a call every time a network request is initiated.\n\n### Example\n\n```javascript\nvar fakeRequest = require('fake-http-request'),\n    https = require('https'),\n    request = require('request');\n\nfakeRequest.install();\n\n// simulate a response\n\nrequest('https://www.google.com', function (error, response, body) { \n  console.log('got response', response.statusCode, response.statusMessage, body) \n}).on('request', function () {\n  console.log('number of calls', https.request.calls.length);\n  console.log('first call', \n\thttps.request.calls[0].args[0].host, \n\thttps.request.calls[0].args[0].port, \n\thttps.request.calls[0].args[0].path\n  );\n\n  https.request.calls[0].respond(404, 'Not found', 'some html here');\n});\n\n// simulate errors\n\ncall = request('https://www.google.com', function (error, response, body) { \n  console.log('got error', error); \n}).on('request', function () {\n  var mostRecent = https.request.calls.length - 1;\n  console.log('number of calls', https.request.calls.length);\n  console.log('second call', \n    https.request.calls[mostRecent].args[0].host,\n\thttps.request.calls[mostRecent].args[0].port, \n\thttps.request.calls[mostRecent].args[0].path\n  );\n  https.request.calls[mostRecent].networkError('BOOM!');\n});\n\n// pipe calls for async processing\n\nhttps.request.pipe(function (options) {\n  console.log('Received call',  \n    https.request.calls[0].args[0].host, \n\thttps.request.calls[0].args[0].port, \n\thttps.request.calls[0].args[0].path\n  );\n});\n\nrequest('https://www.google.com');\n\n```\n","created":"2016-06-02T15:12:45.273Z","modified":"2016-06-10T13:02:30.399Z","lastPublisher":{"name":"gojko","email":"gojko@gojko.com"},"owners":[{"name":"gojko","email":"gojko@gojko.com"}],"other":{"_attachments":{},"_from":".","_id":"fake-http-request","_nodeVersion":"5.3.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/fake-http-request-1.3.0.tgz_1465563747776_0.905856165336445"},"_npmUser":{"name":"gojko","email":"gojko@gojko.com"},"_npmVersion":"3.3.12","_rev":"1-6e2aed4da5c278c440aa6dc8790ce10a","_shasum":"5850611b75b37c558c9b35f849f42c7e956deca3","author":{"name":"Gojko Adzic","email":"gojko@gojko.com"},"bugs":{"url":"https://github.com/gojko/fake-http-request/issues"},"directories":{},"dist-tags":{"latest":"1.3.0"},"dist":{"shasum":"5850611b75b37c558c9b35f849f42c7e956deca3","tarball":"http://registry.npmjs.org/fake-http-request/-/fake-http-request-1.3.0.tgz"},"maintainers":[{"name":"gojko","email":"gojko@gojko.com"}],"readmeFilename":"README.md","time":{"modified":"2016-06-10T13:02:30.399Z","created":"2016-06-02T15:12:45.273Z","1.0.0":"2016-06-02T15:12:45.273Z","1.1.0":"2016-06-02T16:24:41.603Z","1.2.0":"2016-06-02T18:24:48.737Z","1.3.0":"2016-06-10T13:02:30.399Z"}}}