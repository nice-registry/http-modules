{"name":"fie-plugin-mock","bin":{"fiemock":"./bin/fiemock"},"version":"1.0.6","description":"用于配置一个简单、易用、灵活的、可交互的前端 http 数据mock服务","main":"index.js","keywords":["用于配置一个简单、易用、灵活的、可交互的前端","http","数据mock服务"],"scripts":{"start":"node test/index.js"},"fieOption":{"icon":"","type":"plugin","update":false,"moduleName":"fie-plugin-mock"},"changeLog":[{"version":"1.0.0","log":["基本功能版本"]},{"version":"1.0.6","log":["mock路径可以通过--mockPath设置"]}],"dependencies":{"bluebird":"^3.4.1","chalk":"^1.1.3","commander":"^2.9.0","debug":"^2.2.0","faker":"3.1.0","gulp-util":"^3.0.8","inquirer":"^1.1.2","lodash":"^4.13.1","multiline":"^1.0.2","npm-request":"^1.0.0","rosie":"~0.2.0","watch":"^0.19.1"},"devDependencies":{"babel-eslint":"~6.0.2","eslint-plugin-react":"~5.0.1","eslint":"~2.7.0","faker":"3.1.0","rosie":"~0.2.0"},"publishConfig":{"registry":"https://registry.npmjs.org/"},"repository":"https://github.com/fieteam/fie-plugin-mock","homepage":"https://github.com/fieteam/fie-plugin-mock#readme","license":"ISC","gitHead":"19cc1bc50c31be9f5106d8d4347a6c394c67d44e","versions":[{"number":"1.0.1","date":"2016-12-06T08:19:55.478Z"},{"number":"1.0.2","date":"2016-12-06T08:24:35.871Z"},{"number":"1.0.3","date":"2017-01-06T04:39:47.297Z"},{"number":"1.0.4","date":"2017-01-06T04:59:42.662Z"},{"number":"1.0.5","date":"2017-01-06T05:11:50.228Z"},{"number":"1.0.6","date":"2017-01-22T09:50:11.625Z"}],"readme":"# fie-plugin-mock\n\n> fie-plugin-mock 插件用于配置一个简单、易用、灵活的、可交互的前端 http 数据mock服务。\n\n## 说明\n\n0. 前端与后端定义接口规范，[DIP](http://dip.alibaba-inc.com/?spm=a312q.7764190.0.0.20YyEM)可以解决，它也可以生成基于请求/响应规范的mock数据及接口。\n但这样的mock接口是<b>不可交互的</b>，比如请求的数据不支持分页、不支持搜索、不支持更新..... \n\n0. 即使通过DIP与后端定义接口规范后，联调等待将是一个相对比较漫长的过程，要依赖后端mock数据，还要依赖他们不稳定的环境。\n\n如果前端可以配置一套完整的接口就好了，所以为解决以下痛点，通过本地配置一套接口的方法,实现: \n\n*  自动生成mock数据\n* 接口的常用操作:\n    * 添加\n    * 修改(更新)\n    * 删除\n    * 搜索(带分页，带搜索条件，带排序)\n0. mock自定义接口返回\n\n\n## 使用场景\n\n适合前后端分离的项目。项目中需要通过jsonp的方式\n\n* 获取数据列表(带分页，带搜索条件，带排序)\n* 添加或修改一条数据（添加后，获取当前数据或数据列表会相应更新)\n* mock接口返回定义一些额外逻辑\n\n## 安装\n\n1. 基于FIE开发流程的安装\n```bash\n    $ npm install fie -g\n    $ fie install fie-plugin-mock\n```\n该套件依赖 [Node.js](http://nodejs.org/) 、 [tnpm](http://web.npm.alibaba-inc.com/) 、 [fie](http://fie.alibaba.net/) 。\n请先确保本机已安装了fie的运行环境，若第一次使用，请[参考该文档进行环境搭建](http://fie.alibaba.net/doc)。\n\n2. 如果单独使用插件\n \n```bash-\n    $ npm install fie-plugin-mock -g\n```\n\n**注意，因为此插件原是FIE体制下的插件。如果您的项目需要单独使用插件，对应的命令行使用方式只需将fie与mock之间的空格去掉**\n\n如\n \n* $ fie mock init -> fiemock init \n* $ fie mock start -> fiemock start \n* $ fie mock fake -> fiemock fake\n* $ fie mock help -> fiemock help  \n\n\n## 使用\n\n### 初始化\n项目根目录下或随便一个目录\n```bash\n    $ fie mock init  \n```\n\n即可看到目录下生成以下文件\n\n```\n.\n└── mock\n    ├── mock-api.js\n    ├── mock-db.json  \n    └── mock-seed.js  \n```\n### 配置\n\n在mock-seed.js定义mock数据生成规则。\n\n* 第一步：定义表名(资源名)\n* 第二步：添加字段,设置主键, 及生成mock数据规则\n* 第三步：设置循环生成mock数据\n\n### 生成mock数据\n根据mock-seed.js中定义的规则, 生成 mock-db.json\n\n```bash\n    $ fie mock fake\n```\n\n### 启动mock服务\n\n\n```bash\n    $ fie mock start\n```\n\n就可以通过http://localhost:9090 进行http请求了\n\n### 显示帮助\n\n\n```bash\n    $ fie mock help\n```\n\n## 例子\n\n### todo List\n\n0. todos 是很多工具或框架入门常用例子。假设他的其本功能有:\n\n    0. 获取所有的todo list，需要分页、排序\n\t0. 条件查询状态\"末开始\" 或“进行中”或“已完成” 的todo list, 需要分页、排序\n\t0. 新增一条todo 记录\n    0. 根据itemId,获得一条todo 记录\n\t0. 改变一条todo 记录状态（由\"未完成\"改为“进行中”）\n\t0. 删除一条todo 记录\n0. 基于6个需求功能点，以下一步一步设置：\n\t0. 安装好fie 及 初始化 fie mock init 后，打开 ./mock/mock-seed.js(参看默认代码)\n\t\t* 在 step1_baseSet()方法中: 定义表名(资源名),如\n        * 在 step2_design()方法中: 添加字段,设置主键, 及生成mock数据规则\n        * 在 step3_generate()方法中:设置循环生成mock数据\n    0. 执行 \n    ```bash\n       $ fie mock fake\n    ```\n    根据mock-seed.js中定义的规则, 生成 mock-db.json\n    0. 执行 \n    ```bash\n       $ fie mock start\n    ```\n    http://localhost:9090 mock服务起动\n    \n0. http://localhost:9090 mock服务起动后，服务接口将支持的功能如下\n\t\n功能点|调用 Api | Ajax Method| 参数| 返回结果|\n------| ----------------|-----------|-----|--------|\n获取所有的todo list，需要分页、排序。|http://127.0.0.1:9090/todos?pramas=xxxx<br>或http://127.0.0.1:9090/getlist?pramas=xxxx<br>基中 xxxx = JSON.stringify(参数)|GET|```{ \"query\": {\"pageSize\":10, \"pageNum\":1}, \"sort\": \"itemId desc\"}``` |todos list|\n条件查询状态\"末开始\" 或“进行中”或“已完成” 的todo list, 需要分页、排序|同上|GET|```{ \"query\": {\"pageSize\":10, \"pageNum\":1, \"status\":\"末开始\"}, \"sort\": \"itemId desc\"}``` |todos list|\n新增一条todo 记录 |http://127.0.0.1:9090/todos <br>或 http://127.0.0.1:9090/todos/create| POST | {\"title\":\"code review\", \"status\":\"未开始\",...others } <br>(...others指其他字段数据) |新增的todo|\n根据itemId,获得一条todo 记录|http://127.0.0.1:9090/todos/1<br>或 http://127.0.0.1:9090/todos/get?itemId=1|GET |{\"itemId\":\"1\"} | 将 返回id = 1 的那条数据。|\n改变一条todo 记录状态（由\"未完成\"改为“已完成”）|http://127.0.0.1:9090/todos/1<br>或http://127.0.0.1:9090/todos/edit |PUT或POST | {\"itemId\": 1,\"status\":\"已完成\"}|返回更新(修改)后id = 1 的那条数据|\n删除一条todo 记录|http://127.0.0.1:9090/todos/1 <br>http://127.0.0.1:9090/todos/delete|DELETE或POST|{\"itemId\":\"1\"}  | 将 删除掉id = 1 的那条数据。再调用http://127.0.0.1:9090/todos 会发现数据已经被删除|\n\n\nPS: 调用API有的有两个，插件默认是支持[Resful Api规范](http://www.ruanyifeng.com/blog/2014/05/restful_api.html)的， 但实际项目中，后端不一定遵循此规范。\n所以, 增删改查的接口用 :resoure/keyworks 方式：\n\n*  http://127.0.0.1:9090/todos/create \n*  http://127.0.0.1:9090/todos/edit\n*  http://127.0.0.1:9090/todos/delete\n*  http://127.0.0.1:9090/todos/get?Id=xxx\n*  http://127.0.0.1:9090/todos/getlist?pramas=JSON.stringify({ \"query\": {\"pageSize\":10, \"pageNum\":1, \"status\":\"末开始\"})\n\n\n\n## 进阶使用方法\n\n上面例子是其本用法, 也是推荐用法。满足生成数据的mock规范，以及70%左右mock接口需求。\n\n0. 如果觉得mock规范比较麻烦，可以直接手动编辑./mock/mock-db.json\n\n比如您在JSON根节点添加：\n\n```\n   \t\"bu\":[ {\n      \t\"id\": 1,\n      \t\"name\": \"taobao\"\n    \t},\n    \t{\n      \t\"id\": 2,\n      \t\"name\": \"tmall\"\n    \t}\n  \t]\n```\n\t\nfie mock start 后，您就会获得支持接口支持:\n如 http://127.0.0.1:9090/bu/create （把上面表的todos 变在 bu ）\n\nPS:  但您就不能再执行 fie mock fake 了，否则会被mock-seed.js 生成的数据覆盖\n\n0.  如何自定义接口返回格式?\n\t* 打开./mock/mock-api.js 便是一个让你灵活配置的地方\n\t如下你可以改变查询列表返回的的数据结构\n\n\t```\n        /*根据请求条件获取列表数据----响应JSON结构*/            \n        return {\n            success: true,\n            totalCount: dataResult.totalCount,\n            pageSize: dataResult.pageSize,\n            pageNum: dataResult.pageNum,\n            totalPage:  dataResult.totalPage,\n            hasMore: dataResult.hasMore,\n            data:  dataResult.data // 你可以把data 改为model: dataResult.data \n        }\n\t```\n\n0.  如何新增自定义接口?\n\t* 比如要添加一个 http://127.0.0.1:9090/helloworld 的接口，返回数据随着\n\t\t* 打开./mock/mock-api.js \n\t\t* 在apiRouteMap 下添加:  \n\t\n\t\t```\n\t\t\"helloworld\": function(data , method) {\n\t    \t//data 是POST或GET过来的数据，method是POST/GET/PUT/DELETE\n        \treturn {\n            \tsuccess: true,\n            \tdata: \"hello world!\"\n        \t}\n   \t\t}\n    \t```\n    \t\n    \t* http://127.0.0.1:9090/helloworld 就可以访问了。\n\n        ＊  如果需要返回一个极其复杂的数据结构呢？既包含数组又包含对象,比如这样的返回:\n\n        ``` \n         {\n                success: true,\n                data: {\n                    a: [], \n                    b: {},\n                    c: \"whatever\"\n                }\n         }\n        ```\n        你可以选择在helloworld里面写死，但a,b 数据量较大的时候，mock-api.js 这个文件会变得臃肿。\n        所以建议造数据及字段尽量在mock.seed.js 中定义好。 因为 数据a 或实体b 对应的字段可重复列用的可能性较大\n        这时我们就可以这样:\n        \n        ```\n        \"helloworld\": function(data , method) {\n           return  {\n                success: true,\n                data: {\n                    a: this.db.get(\"a\").value(), //获取一个数组的数据,注意：this.db.get(\"a\")是[loadash对象](https://lodash.com/docs/4.15.0), 你可以用loadash方法做数据过滤\n                    b: this.db.get(\"b\").value()[0], //取一条数据当对象\n                    c: \"whatever\"\n                }\n            }\n        }\n        ```\n\n0.  我不想用以上方式定义数据接口，我只有一份json 数据，怎么快速生成接口？\n    * 你只需要将你的json数据以 *.json后缀文件保存在 ./mock 目录下\n    * $ fie mock start \n    * 你就可以 http://localhost:9090/yourfile 或 http://localhost:9090/yourfile.json 就能请求到了。\n\n\n\n## todo \n    * 接口平台化 \n\n## 问题反馈\n\n0. 套件开发者：@六韬\n0. 建议及问题反馈入口：[https://github.com/fieteam/fie-plugin-mock/issues/new](https://github.com/fieteam/fie-plugin-mock/issues/new)   \n     PS: 注意将issues Assignee 给@俞上津_Alex Yu。","created":"2016-12-06T08:19:55.478Z","modified":"2017-01-22T09:50:11.625Z","lastPublisher":{"name":"yubhbh","email":"yubhbh@gmail.com"},"owners":[{"name":"yubhbh","email":"yubhbh@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"fie-plugin-mock","_nodeVersion":"5.0.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/fie-plugin-mock-1.0.6.tgz_1485078609768_0.22309209336526692"},"_npmUser":{"name":"yubhbh","email":"yubhbh@gmail.com"},"_npmVersion":"4.0.3","_rev":"6-4c50dd156e1a6b991108ae0f1ee64982","_shasum":"59fe373061ef55ce3a9257408d56486cfb990906","author":{"name":"alexyu","email":"yubhbh@gmail.com"},"bugs":{"url":"https://github.com/fieteam/fie-plugin-mock/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"1.0.6"},"dist":{"shasum":"59fe373061ef55ce3a9257408d56486cfb990906","tarball":"https://registry.npmjs.org/fie-plugin-mock/-/fie-plugin-mock-1.0.6.tgz"},"maintainers":[{"name":"yubhbh","email":"yubhbh@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-01-22T09:50:11.625Z","created":"2016-12-06T08:19:55.478Z","1.0.1":"2016-12-06T08:19:55.478Z","1.0.2":"2016-12-06T08:24:35.871Z","1.0.3":"2017-01-06T04:39:47.297Z","1.0.4":"2017-01-06T04:59:42.662Z","1.0.5":"2017-01-06T05:11:50.228Z","1.0.6":"2017-01-22T09:50:11.625Z"}}}