{"name":"request-stats","version":"3.0.0","description":"Get stats on your Node.js HTTP server requests","main":"index.js","scripts":{"test":"standard && tape test.js"},"repository":"https://github.com/watson/request-stats","keywords":["stats","statistics","http","https","middleware","connect","express","analytics"],"license":"MIT","homepage":"https://github.com/watson/request-stats","dependencies":{"http-headers":"^3.0.1","once":"^1.4.0"},"devDependencies":{"https-pem":"^1.0.4","keep-alive-agent":"^0.0.1","standard":"^8.6.0","tape":"^4.6.3"},"engines":{"node":">=0.12"},"coordinates":[55.6811129,12.564524],"gitHead":"3ee1f52cb7777da424ff6c25f7e2b610664cc7be","versions":[{"number":"0.1.0","date":"2014-06-09T15:50:53.669Z"},{"number":"0.2.0","date":"2014-06-10T08:12:54.068Z"},{"number":"0.2.1","date":"2014-06-10T08:20:47.607Z"},{"number":"0.2.2","date":"2014-06-10T10:03:25.392Z"},{"number":"0.3.0","date":"2014-06-16T08:10:11.847Z"},{"number":"0.3.1","date":"2014-06-20T12:03:17.138Z"},{"number":"0.3.2","date":"2014-07-11T13:10:24.978Z"},{"number":"1.0.0","date":"2014-08-10T09:12:21.147Z"},{"number":"1.0.1","date":"2014-08-12T15:16:51.605Z"},{"number":"2.0.0","date":"2016-11-24T10:09:36.838Z"},{"number":"2.0.1","date":"2016-12-15T22:04:17.676Z"},{"number":"3.0.0","date":"2017-05-01T13:13:54.663Z"}],"readme":"# request-stats\n\n[![Build status](https://travis-ci.org/watson/request-stats.svg?branch=master)](https://travis-ci.org/watson/request-stats)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n\nGet stats on your Node.js HTTP server requests.\n\nEmits two events:\n\n- `request` when ever a request starts: Passes a [Request object](#request-object) that can later be used to [query for the progress](#progress) of a long running request\n- `complete` when ever a request completes: Passes a [stats object](#oncomplete-callback) containing the overall stats for the entire HTTP request\n\n## Installation\n\n```\nnpm install request-stats --save\n```\n\n## Example usage\n\nGet stats for each completed HTTP request:\n\n```javascript\nvar requestStats = require('request-stats')\nvar server = http.createServer(...)\n\nrequestStats(server, function (stats) {\n  // this function will be called every time a request to the server completes\n  console.log(stats)\n})\n```\n\nGet periodic stats for long running requests:\n\n```javascript\nvar server = http.createServer(...)\n\nvar stats = requestStats(server)\n\nstats.on('request', function (req) {\n  // evey second, print stats\n  var interval = setInterval(function () {\n    var progress = req.progress()\n    console.log(progress)\n    if (progress.completed) clearInterval(interval)\n  }, 1000)\n})\n```\n\n## API\n\n### Constructor\n\n#### `requestStats(server[, callback])`\n\nAttach request-stats to a HTTP server.\n\nInitialize request-stats with an instance a HTTP server. Returns a\nStatsEmitter object. Optionally provide a callback which will be called\nfor each completed HTTP request with a stats object (see stats object\ndetails below).\n\nIf no callback is provided, you can later attach a listener on the\n\"complete\" event.\n\n#### `requestStats(req, res[, callback])`\n\nAttach request-stats to a single HTTP request.\n\nInitialize request-stats with an instance a HTTP request and response.\nReturns a StatsEmitter object. Optionally provide a callback which will\nbe called with a stats object when the HTTP request completes (see stats\nobject details below).\n\nIf no callback is provided, you can later attach a listener on the\n\"complete\" event.\n\n### StatsEmitter object\n\n#### `.on('complete', callback)`\n\nCalls the callback function with a stats object when a HTTP request\ncompletes:\n\n```javascript\n{\n  ok: true,           // `true` if the connection was closed correctly and `false` otherwise\n  time: 0,            // The milliseconds it took to serve the request\n  req: {\n    bytes: 0,         // Number of bytes sent by the client\n    headers: { ... }, // The headers sent by the client\n    method: 'POST',   // The HTTP method used by the client\n    path: '...',      // The path part of the request URL\n    ip: '...',        // The remote ip\n    raw: [Object]     // The original `http.IncomingMessage` object\n  },\n  res: {\n    bytes: 0,         // Number of bytes sent back to the client\n    headers: { ... }, // The headers sent back to the client\n    status: 200,      // The HTTP status code returned to the client\n    raw: [Object]     // The original `http.ServerResponse` object\n  }\n}\n```\n\n#### `.on('request', callback)`\n\nCalls the callback function with a special [Request\nobject](#request-object) when a HTTP request is made to the server.\n\n### Request object\n\nThe Request object should not be confused with the Node.js\n[http.IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage)\nobject. The request-stats Request object provides only a single\nbut powerfull function:\n\n#### `.progress()`\n\nReturns a progress object if called while a HTTP request is in progress.\nIf called multiple times, the returned progress object will contain the\ndelta of the previous call to `.progress()`.\n\n```javascript\n{\n  completed: false, // `false` if the request is still in progress\n  time: 0,          // The total time the reuqest have been in progress\n  timeDelta: 0,     // The time since previous call to .progress()\n  req: {\n    bytes: 0,       // Total bytes received\n    bytesDelta: 0,  // Bytes received since previous call to .progress()\n    speed: 0,       // Bytes per second calculated since previous call to .progress()\n    bytesLeft: 0,   // If the request contains a Content-Size header\n    timeLeft: 0     // If the request contains a Content-Size header\n  },\n  res: {\n    bytes: 0,       // Total bytes send back to the client\n    bytesDelta: 0,  // Bytes sent back to the client since previous call to .progress()\n    speed: 0        // Bytes per second calculated since previous call to .progress()\n  }\n}\n```\n\n## Acknowledgement\n\nThanks to [mafintosh](https://github.com/mafintosh) for coming up with\nthe initial concept and pointing me in the right direction.\n\n## License\n\nMIT\n","starsCount":2,"created":"2014-06-09T15:50:53.669Z","modified":"2017-05-01T13:13:54.663Z","lastPublisher":{"name":"watson","email":"w@tson.dk"},"owners":[{"name":"watson","email":"w@tson.dk"}],"other":{"_attachments":{},"_from":".","_id":"request-stats","_nodeVersion":"7.8.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/request-stats-3.0.0.tgz_1493644433935_0.5643991858232766"},"_npmUser":{"name":"watson","email":"w@tson.dk"},"_npmVersion":"4.2.0","_rev":"6-6b5eed3bf5e31f47570294a581efce7f","_shasum":"769155dc8974d78d4a1cb87bbf14eaab985afe25","author":{"name":"Thomas Watson Steen","email":"w@tson.dk"},"bugs":{"url":"https://github.com/watson/request-stats/issues"},"directories":{},"dist-tags":{"latest":"3.0.0"},"dist":{"shasum":"769155dc8974d78d4a1cb87bbf14eaab985afe25","tarball":"https://registry.npmjs.org/request-stats/-/request-stats-3.0.0.tgz"},"maintainers":[{"name":"watson","email":"w@tson.dk"}],"readmeFilename":"README.md","time":{"modified":"2017-05-01T13:13:54.663Z","created":"2014-06-09T15:50:53.669Z","0.1.0":"2014-06-09T15:50:53.669Z","0.2.0":"2014-06-10T08:12:54.068Z","0.2.1":"2014-06-10T08:20:47.607Z","0.2.2":"2014-06-10T10:03:25.392Z","0.3.0":"2014-06-16T08:10:11.847Z","0.3.1":"2014-06-20T12:03:17.138Z","0.3.2":"2014-07-11T13:10:24.978Z","1.0.0":"2014-08-10T09:12:21.147Z","1.0.1":"2014-08-12T15:16:51.605Z","2.0.0":"2016-11-24T10:09:36.838Z","2.0.1":"2016-12-15T22:04:17.676Z","3.0.0":"2017-05-01T13:13:54.663Z"},"users":{"aj888907":true,"rocket0191":true}}}