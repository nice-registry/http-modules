{"name":"http-test-double","version":"0.1.0","description":"From your unit tests, interactively program a real HTTP server with expected requests and responses. Ideal for testing a component that makes HTTP requests to the outside world.","scripts":{"test":"mocha"},"main":"main.js","license":"MIT","devDependencies":{"async":"^1.2.0","chai":"^2.3.0","mocha":"^2.2.5","tsd":"^0.6.0","typescript":"1.4.1"},"gitHead":"d8669720bbe81e8240cdfb55038bb508665e4285","versions":[{"number":"0.1.0","date":"2015-06-24T11:37:01.971Z"}],"readme":"TypeScript\n==========\n\nStarting a new project:\n\n~~~\n# Create a package.json file\nnpm init \n~~~\n\nThen:\n\n~~~\n# Install dev tools and add them to package.json\nnpm install typescript --save-dev\nnpm install tsd --save-dev\n# Install dev dependencies, and add them to the package.json\nnpm install mocha --save-dev\nnpm install chai --save-dev\n# Download type definitions for the dev dependencies above\n# This creates a `tsd.json` file and `typed` directory\nnode_modules/.bin/tsd query chai --save --action install\nnode_modules/.bin/tsd query node --save --action install\nnode_modules/.bin/tsd query mocha --save --action install\n# Set up some files for the VisualStudio Code editor (so you get intellisense help)\ncat << EOF > tsconfig.json\n{\n    \"compilerOptions\": {\n        \"target\": \"ES3\",\n        \"module\": \"commonjs\",\n        \"sourceMap\": true\n    }\n}\nEOF\nmkdir .settings\ncat << EOF > tasks.json\n// Available variables which can be used inside of strings.\n// ${workspaceRoot}: the root folder of the team\n// ${file}: the current opened file\n// ${fileBasename}: the current opened file's basename\n// ${fileDirname}: the current opened file's dirname\n// ${fileExtname}: the current opened file's extension\n// ${cwd}: the current working directory of the spawned process\n\n// A task runner that calls the Typescipt compiler (tsc) and \n// Compiles a HelloWorld.ts program\n{\n    \"version\": \"0.1.0\",\n    \"command\": \"make\",\n    // Show the output window only if unrecognized errors occur. \n    \"showOutput\": \"always\",\n    \"isShellCommand\": true,\n    \"args\": [\"test\"],\n    // use the standard tsc problem matcher to find compile problems\n    // in the output.\n    \"problemMatcher\": \"$tsc\"\n}\nEOF\ncat << EOF > .settings/launch.json\n{\n    \"version\": \"0.1.0\",\n    // List of configurations. Add new configurations or edit existing ones.  \n    // ONLY \"node\" and \"mono\" are supported, change \"type\" to switch.\n    \"configurations\": [\n        {\n            // Name of configuration; appears in the launch configuration drop down menu.\n            \"name\": \"Launch make\",\n            // Type of configuration. Possible values: \"node\", \"mono\".\n            \"type\": \"node\",\n            // Workspace relative or absolute path to the program.\n            \"program\": \"main.js\",\n            // Automatically stop program after launch.\n            \"stopOnEntry\": true,\n            // Command line arguments passed to the program.\n            \"args\": [],\n            // Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.\n            \"cwd\": \".\",\n            // Workspace relative or absolute path to the runtime executable to be used. Default is the runtime executable on the PATH.\n            \"runtimeExecutable\": null,\n            // Environment variables passed to the program.\n            \"env\": { }\n        }, \n        {\n            \"name\": \"Attach\",\n            \"type\": \"node\",\n            // TCP/IP address. Default is \"localhost\".\n            \"address\": \"localhost\",\n            // Port to attach to.\n            \"port\": 5858\n        }\n    ]\n}\nEOF\n# Create a main script\ncat << EOF > main.ts\nexport function main() {\n    return \"Hello world!\";\n};\nEOF\n# Create a test directory\nmkdir test\ncat << EOF > test/test.ts\n/// <reference path=\"../typings/mocha/mocha.d.ts\" />\n/// <reference path=\"../typings/chai/chai.d.ts\" />\n\nimport chai = require('chai');\nvar expect = chai.expect;\nimport main = require('../main');\n\ndescribe('User Model Unit Tests:', () => {\n    describe('2 + 4', () => {\n        it('should be 6', (done) => {\n            expect(2+4).to.equals(6);\n            done();\n        });\n\n        it('should not be 7', (done) => {\n            expect(2+4).to.not.equals(7);\n            done();\n        });\n    });\n});\ndescribe('Main', () => {\n    it('should return greeting', (done) => {\n        expect(main.main()).to.equals(\"Hello World!\");\n        done();\n    });\n});\nEOF\n# Set up some project files\ncat << EOF > .gitignore\nnode_modules\n./*.js\ntest/*.js\nEOF\ncat << EOF > README.md\nTypeScript\n==========\nEOF\ncat << EOF > Makefile\n.PHONY: test\nbuild:\n\tnode_modules/.bin/tsc --module commonjs test/test.ts\n\ntest: | build\n\tmocha\nEOF\n\n~~~\n\n\nAt this point you can:\n\n* Make a build with `make`\n* Run the tests with `make test`\n\nMaking a Release\n================\n\nInstall:\n\n~~~\nnpm install\n~~~\n\n\nBuild the .js files and run the tests:\n\n~~~\nmake test\n~~~\n\nUpdate the `package.json` file then publish to npm:\n\n~~~\n~~~\n","created":"2015-06-24T11:37:01.971Z","modified":"2015-06-24T11:37:01.971Z","lastPublisher":{"name":"thejimmyg","email":"james@pythonweb.org"},"owners":[{"name":"thejimmyg","email":"james@pythonweb.org"}],"other":{"_attachments":{},"_from":".","_id":"http-test-double","_nodeVersion":"0.12.4","_npmUser":{"name":"thejimmyg","email":"james@pythonweb.org"},"_npmVersion":"2.10.1","_rev":"1-495924eaa18329fe01d45dc07b41b61a","_shasum":"8e18f40d374ee0bdc2f77a3232866b9fa7e444e6","author":{"name":"James Gardner and Vlad Mettler"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"8e18f40d374ee0bdc2f77a3232866b9fa7e444e6","tarball":"http://registry.npmjs.org/http-test-double/-/http-test-double-0.1.0.tgz"},"maintainers":[{"name":"thejimmyg","email":"james@pythonweb.org"}],"readmeFilename":"README.md","time":{"modified":"2015-06-24T11:37:01.971Z","created":"2015-06-24T11:37:01.971Z","0.1.0":"2015-06-24T11:37:01.971Z"}}}