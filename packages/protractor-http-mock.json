{"name":"protractor-http-mock","version":"0.9.2","description":"Mock HTTP calls in your protractor specs.","main":"index.js","scripts":{"example":"grunt example","test":"grunt verify","webdriver-update":"node node_modules/grunt-protractor-runner/scripts/webdriver-manager-update"},"license":"MIT","devDependencies":{"grunt":"~1.0.1","grunt-browserify":"^5.0.0","grunt-contrib-connect":"^1.0.2","grunt-contrib-jasmine":"^1.0.3","grunt-contrib-jshint":"~1.1.0","grunt-jasmine-nodejs":"^1.5.2","grunt-protractor-runner":"^4.0.0","phantomjs-prebuilt":"^2.1.3","protractor-http-mock-sample-plugin":"0.0.1"},"repository":"https://github.com/atecarlos/protractor-http-mock","dependencies":{"query-string":"<=4.2.3"},"engines":{"node":">=4.0.0"},"gitHead":"eef0034c9250f5f41c0adab96d688c061850b290","homepage":"https://github.com/atecarlos/protractor-http-mock#readme","versions":[{"number":"0.0.1","date":"2014-08-26T20:28:42.388Z"},{"number":"0.1.0","date":"2014-08-28T12:59:52.024Z"},{"number":"0.1.1","date":"2014-10-31T18:26:08.394Z"},{"number":"0.1.2","date":"2014-10-31T18:41:35.286Z"},{"number":"0.1.3","date":"2014-12-12T03:42:02.301Z"},{"number":"0.1.4","date":"2014-12-28T16:01:53.270Z"},{"number":"0.1.5","date":"2015-01-05T14:09:31.088Z"},{"number":"0.1.6","date":"2015-03-17T11:09:33.930Z"},{"number":"0.1.7","date":"2015-03-17T11:45:09.368Z"},{"number":"0.1.8","date":"2015-04-13T01:27:02.164Z"},{"number":"0.1.9","date":"2015-04-29T11:09:44.117Z"},{"number":"0.1.10","date":"2015-04-29T12:04:48.759Z"},{"number":"0.1.11","date":"2015-05-08T19:38:20.106Z"},{"number":"0.1.12","date":"2015-05-12T17:33:15.152Z"},{"number":"0.1.13","date":"2015-05-18T19:51:24.712Z"},{"number":"0.1.14","date":"2015-06-28T02:36:10.243Z"},{"number":"0.1.15","date":"2015-07-12T02:35:20.976Z"},{"number":"0.1.16","date":"2015-07-12T03:27:47.029Z"},{"number":"0.1.17","date":"2015-08-10T13:14:28.030Z"},{"number":"0.1.18","date":"2015-10-23T21:48:20.350Z"},{"number":"0.2.0","date":"2015-12-03T01:04:58.785Z"},{"number":"0.2.1","date":"2016-01-09T22:41:07.569Z"},{"number":"0.3.0","date":"2016-02-16T14:21:20.802Z"},{"number":"0.4.0","date":"2016-03-23T16:30:25.996Z"},{"number":"0.5.0","date":"2016-04-07T03:02:37.303Z"},{"number":"0.6.0","date":"2016-04-26T13:13:04.493Z"},{"number":"0.7.0","date":"2016-04-29T12:26:14.867Z"},{"number":"0.8.0","date":"2016-06-02T00:18:43.799Z"},{"number":"0.9.0","date":"2016-06-24T21:43:50.386Z"},{"number":"0.9.1","date":"2016-12-04T18:25:57.695Z"},{"number":"0.9.2","date":"2017-01-13T19:42:49.974Z"}],"readme":"# Protractor Mock\nA NodeJS module to be used alongside [Protractor](https://github.com/angular/protractor) to facilitate setting up mocks for HTTP calls for the AngularJS applications under test.\n\nThis allows the developer to isolate the UI and client-side application code in our tests without any dependencies on an API.\n\n**This plugin does not depend on Angular Mocks (ngMockE2E) being loaded into your app; therefore, there is no need to modify anything within your current Angular web application.**\n\n[![Build Status](https://travis-ci.org/atecarlos/protractor-http-mock.png)](https://travis-ci.org/atecarlos/protractor-http-mock)\n\n## Installation\n\tnpm install protractor-http-mock --save-dev\n## Configuration\nIn your protractor configuration file, we can set the following options:\n\n### Mocks\nWe can set a collection of default mocks to load for every test, and the name of the folder where your mocks will reside. More on this later.\n\n  \tmocks: {\n    \tdefault: ['mock-login'], // default value: []\n    \tdir: 'my-mocks' // default value: 'mocks'\n  \t},\n\n### Directories and file names\nWe can also configure our root directory where the mocks and protractor configuration will be located; as well as, the name of the protractor configuration file.\n\n  \tonPrepare: function(){\n    \trequire('protractor-http-mock').config = {\n\t\t\trootDirectory: __dirname, // default value: process.cwd()\n\t\t\tprotractorConfig: 'my-protractor-config.conf' // default value: 'protractor-conf.js'\n    \t};\n  \t}\n\n## Usage\nMocks are defined as JSON objects describing the request and response for a particular HTTP call:\n\n  \t  {\n\t\trequest: {\n\t      path: '/users/1',\n\t      method: 'GET'\n\t    },\n\t    response: {\n\t      data: {\n\t        userName: 'pro-mock',\n\t        email: 'pro-mock@email.com'\n\t      }\n\t    }\n\t  }\n\nAnd then set the mock at the beginning of your test before your application loads:\n\n\tvar mock = require('protractor-http-mock');\n\t...\n\n\t  mock([{\n\t    request: {\n\t      path: '/users/1',\n\t      method: 'GET'\n\t    },\n\t    response: {\n\t      data: {\n\t        userName: 'pro-mock',\n\t        email: 'pro-mock@email.com'\n\t      }\n\t    }\n\t  }]);\n\nMake sure to clean up after test execution. This should be typically done in the `afterEach` call to ensure the teardown is executed regardless of what happens in the test execution:\n\n\tafterEach(function(){\n\t  mock.teardown();\n\t});\n\nPlease note that the `mock()` function needs to be called before the browser opens. If you have different mock data for different tests, please make sure that, either the tests always start in a new browser window, or that its possible to setup all the mocks for each test case before any of tests start running.\n\n### Mock files\nMocks can also be loaded from physical files located in the `mocks.dir` directory that we defined in our configuration:\n\n  \ttests\n\t    e2e\n\t      protractor.conf.js\n\t      mocks\n\t        users.js\n\t      specs\n\t        ...\n\n\nYou could simply load your mocks as follows:\n\n\tmock(['users']);\n\nFiles are structured as standard node modules. The strings passed are the path of the file relative to the mocks directory - the same as if you would be doing a standard `require()` call.\n\n\tmodule.exports = { ... }; // for a single mock.\n\nor\n\n\tmodule.exports = [ ... ]; // for multiple mocks.\n\n\n### Schema\nThe full GET schema for defining your mocks is as follows:\n\n\t  request: {\n\t    path: '/products/1/items',\n\t    method: 'GET',\n\t\t\tregex: false, // Boolean to enable Regular Expression matching on path. This is an optional field.\n\t    params: { // These match params as they would be passed to the $http service. This is an optional field.\n\t      page: 2,\n\t      status: 'onsale'\n\t    },\n\t    queryString: { // These match query string parameters that are part of the URL as passed in to the $http service. This is an optional field.\n\t      param1: 'My first qs parameters',\n\t      param2: 'Second parameter'\n\t    },\n\t    headers: { //These match headers as the end result of the expression provided to the $http method.\n\t    \thead1: 'val1',\n\t    \thead2: 'val2'\n\t    }\n\t  },\n\t  response: {\n\t  \tdata: {}, // This is the return value for the matched request\n\t    status: 500 // The HTTP status code for the mocked response. This is an optional field.\n\t    delay: 2 // number of milliseconds to delay sending back the response.\n\t  }\n\nA full mock for a POST call takes the following options:\n\n\t  request: {\n\t    path: '/products/1/items',\n\t    method: 'POST',\n\t\t\tregex: false, // Boolean to enable Regular Expression matching on path. This is an optional field.\n\t    data: { // These match POST data. This is an optional field.\n\t      status: 'onsale',\n\t      title: 'Blue Jeans',\n          price: 24.99\n\t    }\n\t  },\n\t  response: {\n\t    data: { // This is the return value for the matched request\n\t      status: 'onsale',\n\t      title: 'Blue Jeans',\n          id: 'abc123',\n          price: 24.99\n        },\n\t    status: 204 // The HTTP status code for the mocked response. This is an optional field.\n\t  }\n\nPUT, DELETE, HEAD, PATCH, and JSONP methods are also supported. Please see the examples in the source code for more information.\n\n#### Request\nDefining `params`, `queryString`, `headers`, or `data` will help the plugin match more specific responses but neither is required. Both correspond to their matching objects as they would be passed into the $http object call.\n\nHeaders must be defined as the headers that will be used in the http call. Therefore, if in the code to be tested, the headers are defined using properties with function values, these functions will be evaluated as per the $http specification and matched by end result.\n\n#### Response\nThe default `status` value is 200 if none is specified.\n\nAn optional `delay` value can be set on the response to assert any state that occurs when waiting for the response in your application, i.e. loading messages or spinners. Please note that UI tests with timing expectations can be somewhat unstable and provide inconsistent results. Please use this feature carefully.\n\n### Precendence\nprotractor-http-mock will respond with the **last** matched request in case there are several matches. The plugin will start matching the default mocks first, followed by those added within the test itself in the order they are added. In other words, the last mock defined will always win.\n\n### Inspection\nFor testing or debugging purposes, it is possible to extract a list of http requests. Simply call the `requestsMade` function as follows:\n\n\tvar mock = require('protractor-http-mock');\n\t...\n\n\t  expect(mock.requestsMade()).toEqual([\n\t\t\t{ url : '/default', method : 'GET' },\n\t\t\t{ url : '/users', method : 'GET' }\n\t\t]);\n\nIt is also possible to clear the list of requests with the `clearRequests()` method.\n\nIf you wish to assert anything but the full list of requests, then you can do the following to piece out the information needed on the requests:\n\n\tmock.requestsMade().then(function(requests){\n\t\texpect(requests[1]).toEqual({ url : '/users', method : 'GET' })\n\t});\n\n### Runtime mocks\nIf there is a need to add or remove mocks during test execution, please use the `add()` and `remove()` functions:\n\n\tmock.add([{\n\t\trequest: {\n\t\t\tpath: '/users',\n\t\t\tmethod: 'GET',\n\t\t\tparams: {\n\t\t\t\tname: 'Charlie'\n\t\t\t}\n\t\t},\n\t\tresponse: {\n\t\t\tdata: {\n\t\t\t\tname: 'Override'\n\t\t\t}\n\t\t}\n\t}]);\n\n\t...\n\n\tmock.remove([{\n\t\trequest: {\n\t\t\tpath: '/users',\n\t\t\tmethod: 'GET',\n\t\t\tparams: {\n\t\t\t\tname: 'Charlie'\n\t\t\t}\n\t\t},\n\t\tresponse: {\n\t\t\tdata: {\n\t\t\t\tname: 'Override'\n\t\t\t}\n\t\t}\n\t}]);\n\nThese will dynamically modify your current set of mocks, and any new request that happens after that will work with the updated set of mocks. Please note that these functions only work by adding or removing mocks using inline objects. As of now, it is not possible to add or remove mocks using mock files.\n\n### Plugins\n\nPlugins can be used to extend the matching functionality of protractor-http-mock. These are separate from protractor plugins.\n\nA plugin can be defined as either an NPM package or a function.\n\nThey can be declared in your protractor configuration to be consumed by all your tests:\n\n\tbaseUrl: 'http://localhost:8000/',\n    specs: [\n      'spec/*.spec.js'\n    ],\n    httpMockPlugins: {\n      default: ['protractor-http-mock-sample-plugin']\n    }\n\nor in each individual test:\n\n\tmock([\n\t\t//mocks go here\n\t], [\n\t\t{\n\t\t\tmatch: function(mockRequest, requestConfig){\n\t\t\t\t...\n\t\t\t}\n\t\t}\n\t]);\n\nNote that in both your protractor configuration and tests, a plugin can be declared as either an npm package name, or definining the object inline.\n\nSee this [sample plugin](https://github.com/atecarlos/protractor-http-mock-sample-plugin) for more information.\n\n### Defaults\n\nIf necessary, default mocks and plugins can be skipped for a particular test simply by passing true at the end of your `mock` call:\n\n\tmock(mocks, plugins, true);\n\n\n### Examples\nIncluded in the code base is an extensive list examples on how to use all the features of this plugin. Please take a look if you have any questions.\n\nTo run these tests locally, please follow these steps from the root directory:\n\n1. `npm install`\n2. `npm run webdriver-update`\n3. `npm run example`\n","created":"2014-08-26T20:28:41.467Z","modified":"2017-01-13T19:42:49.974Z","lastPublisher":{"name":"atecarlos","email":"atecarlos@gmail.com"},"owners":[{"name":"atecarlos","email":"atecarlos@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"protractor-http-mock","_nodeVersion":"5.12.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/protractor-http-mock-0.9.2.tgz_1484336569323_0.21408057725057006"},"_npmUser":{"name":"atecarlos","email":"atecarlos@gmail.com"},"_npmVersion":"3.8.6","_rev":"3-d43c5542a6954fbbb087ac6f13753594","_shasum":"916a486232a39bede5e9fc78dbf4fb2155eed734","author":{"name":"Carlos Atencio"},"bugs":{"url":"https://github.com/atecarlos/protractor-http-mock/issues"},"directories":{},"dist-tags":{"latest":"0.9.2","0.1.1":"0.1.1"},"dist":{"shasum":"916a486232a39bede5e9fc78dbf4fb2155eed734","tarball":"https://registry.npmjs.org/protractor-http-mock/-/protractor-http-mock-0.9.2.tgz"},"maintainers":[{"name":"atecarlos","email":"atecarlos@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-01-13T19:42:49.974Z","created":"2014-08-26T20:28:41.467Z","0.0.1":"2014-08-26T20:28:42.388Z","0.1.0":"2014-08-28T12:59:52.024Z","0.1.1":"2014-10-31T18:26:08.394Z","0.1.2":"2014-10-31T18:41:35.286Z","0.1.3":"2014-12-12T03:42:02.301Z","0.1.4":"2014-12-28T16:01:53.270Z","0.1.5":"2015-01-05T14:09:31.088Z","0.1.6":"2015-03-17T11:09:33.930Z","0.1.7":"2015-03-17T11:45:09.368Z","0.1.8":"2015-04-13T01:27:02.164Z","0.1.9":"2015-04-29T11:09:44.117Z","0.1.10":"2015-04-29T12:04:48.759Z","0.1.11":"2015-05-08T19:38:20.106Z","0.1.12":"2015-05-12T17:33:15.152Z","0.1.13":"2015-05-18T19:51:24.712Z","0.1.14":"2015-06-28T02:36:10.243Z","0.1.15":"2015-07-12T02:35:20.976Z","0.1.16":"2015-07-12T03:27:47.029Z","0.1.17":"2015-08-10T13:14:28.030Z","0.1.18":"2015-10-23T21:48:20.350Z","0.2.0":"2015-12-03T01:04:58.785Z","0.2.1":"2016-01-09T22:41:07.569Z","0.3.0":"2016-02-16T14:21:20.802Z","0.4.0":"2016-03-23T16:30:25.996Z","0.5.0":"2016-04-07T03:02:37.303Z","0.6.0":"2016-04-26T13:13:04.493Z","0.7.0":"2016-04-29T12:26:14.867Z","0.8.0":"2016-06-02T00:18:43.799Z","0.9.0":"2016-06-24T21:43:50.386Z","0.9.1":"2016-12-04T18:25:57.695Z","0.9.2":"2017-01-13T19:42:49.974Z"}}}