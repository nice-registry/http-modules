{"name":"http-hash-router","version":"1.1.0","description":"Server route handler for http-hash","keywords":[],"repository":"https://github.com/Matt-Esch/http-hash-router","dependencies":{"error":"^5.0.0","http-hash":"^1.0.2","http-methods":"^1.0.0","xtend":"^4.0.0"},"devDependencies":{"istanbul":"^0.3.5","opn":"^1.0.1","tape":"^3.0.3","test-server-request":"^2.0.1"},"scripts":{"test":"istanbul cover --print detail --report html test/index.js","view-cover":"opn coverage/index.html"},"main":"index","gitHead":"b3d4857382f3e7a35a6927adccdba77b24d62232","homepage":"https://github.com/Matt-Esch/http-hash-router","versions":[{"number":"0.0.0","date":"2014-11-19T23:14:18.819Z"},{"number":"0.0.1","date":"2015-01-02T13:42:47.120Z"},{"number":"0.0.2","date":"2015-01-04T01:44:04.617Z"},{"number":"1.0.0","date":"2015-01-04T02:28:39.208Z"},{"number":"1.1.0","date":"2015-01-19T02:00:56.271Z"}],"readme":"# http-hash-router\n\nServer route handler for http-hash\n\n## Example\n\n```js\nvar http = require('http');\nvar HttpHashRouter = require('http-hash-router');\n\nvar router = HttpHashRouter();\n\nrouter.set('/health', function health(req, res) {\n    res.end('OK');\n});\n\nvar server = http.createServer(function handler(req, res) {\n    router(req, res, {}, onError);\n\n    function onError(err) {\n        if (err) {\n            // use your own custom error serialization.\n            res.statusCode = err.statusCode || 500;\n            res.end(err.message);\n        }\n    }\n});\nserver.listen(3000);\n```\n\n## Documentation\n\n### `var router = HttpHashRouter()`\n\n```ocaml\ntype NotFoundError : Error & {\n    type: \"http-hash-router.not-found\",\n    statusCode: 404\n}\n\ntype Router : {\n    set: (pattern: String, handler: Function | Object) => void\n} & (\n    req: HttpReqest,\n    res: HttpResponse,\n    opts: Object,\n    cb: Callback<NotFoundError | Error, void>\n) => void\n\nhttp-hash-router : () => Router\n```\n\n`HttpHashRouter` will create a new router function.\n\nThe `HttpHashRouter` itself takes no options and returns a\nfunction that takes four arguments, `req`, `res`, `opts`, `cb`.\n\n### `router(req, res, opts, cb)`\n\n```ocaml\ntype NotFoundError : Error & {\n    type: \"http-hash-router.not-found\",\n    statusCode: 404\n}\n\nrouter : (\n    req: HttpReqest,\n    res: HttpResponse,\n    opts: Object,\n    cb: Callback<NotFoundError | Error, void>\n) => void\n```\n\n - throw `http-hash-router.expected.callback` exception.\n\nIt is expected that you call the `router` function with the\n`HTTPRequest` and `HTTPResponse` as the first and second\narguments.\n\nThe third argument is the options object. The `router` will\ncopy the options object and set the `params` and `splat` field.\n\nThe fourth argument is a callback function, this function\neither gets called with a `http-hash-router.not-found` error\nor gets passed to the route handler function.\n\nIf you do not pass a callback to the `router` function then\nit will throw the `http-hash-router.expected-callback` exception.\n\n### `router.set(pattern, handler)`\n\n```ocaml\ntype RoutePattern : String\ntype RouteHandler : Object<method: String, RouteHandler> | (\n    req: HttpRequest,\n    res: HttpResponse,\n    opts: Object & {\n        params: Object<String, String>,\n        splat: String | null\n    },\n    cb: Callback<Error, void>\n) => void\n\nset : (RoutePattern, RouteHandler) => void\n```\n\nYou can call `.set()` on the router and it will internally\nstore your handler against the pattern.\n\n`.set()` takes a route pattern and a route handler. A route\n    handler is either a function or an object. If you use\n    an object then we will create a route handler function\n    using the [`http-methods`][http-methods] module.\n\nThe `.set()` functionality is implemented by\n[`http-hash`][http-hash] itself and you can find documentation\nfor it at [HttpHash#set][http-hash-set].\n\nYour handler function will get called with four arguments.\n\n - `req` the http request stream\n - `res` the http response stream\n - `opts` options object. This contains properties defined\n    in the server and also contains the `params` and `splat`\n    fields.\n - `cb` callback.\n\nIf your route pattern contains a param, i.e. `\"/foo/:bar\"` or\nyour route pattern contains a splat, i.e. `\"/foo/*\"` then \nthe values of the params and splat will be passed to the\n`params` and `splat` field on `opts`.\n\n  [http-hash]: https://github.com/Matt-Esch/http-hash\n  [http-hash-set]: https://github.com/Matt-Esch/http-hash#hashsetpath-handler\n  [http-methods]: https://github.com/Raynos/http-methods\n","starsCount":2,"created":"2014-11-19T23:14:18.819Z","modified":"2017-04-07T07:55:12.775Z","lastPublisher":{"name":"mattesch","email":"matt@mattesch.info"},"owners":[{"name":"mattesch","email":"matt@mattesch.info"},{"name":"raynos","email":"raynos2@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-hash-router","_npmUser":{"name":"mattesch","email":"matt@mattesch.info"},"_npmVersion":"1.4.28","_rev":"2-d920bc718c3267cae34f1be2cecbc595","_shasum":"a3032c76844545f7e5a983c1a1ed171558cd9af8","author":{"name":"Matt Esch","email":"matt@mattesch.info"},"bugs":{"url":"https://github.com/Matt-Esch/http-hash-router/issues"},"directories":{},"dist-tags":{"latest":"1.1.0"},"dist":{"shasum":"a3032c76844545f7e5a983c1a1ed171558cd9af8","tarball":"http://registry.npmjs.org/http-hash-router/-/http-hash-router-1.1.0.tgz"},"maintainers":[{"name":"mattesch","email":"matt@mattesch.info"},{"name":"raynos","email":"raynos2@gmail.com"}],"readmeFilename":"Readme.md","time":{"modified":"2017-04-07T07:55:12.775Z","created":"2014-11-19T23:14:18.819Z","0.0.0":"2014-11-19T23:14:18.819Z","0.0.1":"2015-01-02T13:42:47.120Z","0.0.2":"2015-01-04T01:44:04.617Z","1.0.0":"2015-01-04T02:28:39.208Z","1.1.0":"2015-01-19T02:00:56.271Z"},"users":{"michaelnisi":true,"wenbing":true}}}