{"name":"node-http-write","version":"0.1.2","license":"MIT","description":"HTTP response writer","main":"index.js","repository":"https://github.com/wtsi-hgi/node-http-write","gitHead":"295e5916bfdbd4e2fe35e4269b39ad83875fdeef","homepage":"https://github.com/wtsi-hgi/node-http-write","scripts":{},"readme":"# httpWrite\n\nSay you've taken leave of your wits and, rather than running your\nNode.js application as an upstream server -- what Node.js does so well\n-- you run it as a CGI script. Well, in which case, you'll want this, so\nyou can write out the HTTP response to `stdout` somewhat more easily!\n\n## Installation\n\nInstall from NPM:\n\n    npm install node-http-write\n\nThen, to include in your software:\n\n```js\nvar httpWrite = require('node-http-write');\n```\n\n# Documentation\n\n## Templating\n\nhttpWrite provides a *very* basic (find-and-replace) templating engine,\nto make your life slightly easier.\n\n### `httpWrite.template.create([id,] template)`\n\nCreate a new template, either as an ID-template pair, or a hash of the\nsame. Both the ID and template must be strings. Template tags are\nencoded within double curly braces.\n\nFor example:\n\n```js\nhttpWrite.template.create('pageHeader', '<html><head><title>{{title}}</head>');\nhttpWrite.template.create({\n  'pageBody':   '<body><p>Hello, {{name}}!</p></body>',\n  'pageFooter': '</html>'\n});\n```\n\nn.b., There is one predefined template, `_error`, which is used by the\nHTTP error writing function (see below). This can be overridden, if\ndesired, with the following template tags:\n\n* `{{status}}` HTTP status code (e.g., 404)\n* `{{response}}` HTTP status message (e.g., Not Found)\n* `{{body}}` Error text\n\n### `httpWrite.template(id, data)`\n\nReturn the template given by `id`, merged with the key-value pairs\nprovided in `data` (where keys correspond to template tags). This\nprobably won't be used by you directly -- as it's called internally by\nthe main HTTP writer -- but can be useful if you want to create a new\ntemplate based on another (i.e., by specifying no `data`).\n\nFor example, using the definitions from above:\n\n```js\nvar foo = httpWrite.template('pageBody', {name: 'John Doe'});\n// foo is now \"<body><p>Hello, John Doe!</p></body>\"\n```\n\n## `httpWrite.headers(status, headerData)`\n\nWrite the HTTP headers, starting with the status code, then any further\nheaders specified as key-value pairs in `headerData`.\n\nFor example:\n\n```js\nhttpWrite.headers(200, {'Content-Type': 'application/json'});\n```\n\n...will write:\n\n```http\nStatus: 200 OK\nContent-Type: application/json\n\n```\n\nNote that you can only write the HTTP headers once. If you attempt to\ncall it again, an exception will be thrown and the parent server should\ntakeover with a *500 Internal Server Error*.\n\nn.b., You can omit the header writing explicitly; in which case, a\ndefault *200 OK* header, in `text/html`, will be written.\n\n## `httpWrite.body([template,] data)`\n\nIf you supply one argument (a string) to this function, that string will\nsimply be written.\n\nIf you supply two arguments, the `data` hash will be applied to the\n`template` ID (as above) and the result will be written.\n\nFor example:\n\n```js\n// Output \"Hello World!\"\nhttpWrite.body('Hello World!');\n\n// Output 'pageHeader' template with respective values\nhttpWrite.body('pageHeader', {title: 'An Example'});\n```\n\nn.b., If you haven't explicitly written any headers at this point, a\ndefault *200 OK* header, in `text/html`, will be written.\n\n## `httpWrite.error(status, body)`\n\nSend the HTTP `status` code and apply it and `body` to the builtin\n`_error` template. This outputs a simple, but relatively useful error\npage to the client.\n\nn.b., `status` can technically be anything. It probably should be a 4xx\nor 5xx code, though!\n\n# MIT License\n\nCopyright (c) 2014 Genome Research Limited\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","versions":[{"number":"0.1.0","date":"2014-12-22T10:39:14.421Z"},{"number":"0.1.1","date":"2014-12-22T10:46:03.808Z"},{"number":"0.1.2","date":"2014-12-22T11:00:34.959Z"}],"created":"2014-12-22T10:39:14.421Z","modified":"2014-12-22T11:00:34.959Z","lastPublisher":{"name":"xophmeister","email":"npm@acc.xoph.co"},"owners":[{"name":"xophmeister","email":"npm@acc.xoph.co"}],"other":{"_attachments":{},"_from":".","_id":"node-http-write","_npmUser":{"name":"xophmeister","email":"npm@acc.xoph.co"},"_npmVersion":"1.4.28","_rev":"1-b9c7705192f49432a7d0a7ace9b3d8cb","_shasum":"b2a1d5cca26713644773575c9b952c188bf1b399","author":{"name":"Christopher Harrison"},"bugs":{"url":"https://github.com/wtsi-hgi/node-http-write/issues"},"directories":{},"dist-tags":{"latest":"0.1.2"},"dist":{"shasum":"b2a1d5cca26713644773575c9b952c188bf1b399","tarball":"http://registry.npmjs.org/node-http-write/-/node-http-write-0.1.2.tgz"},"maintainers":[{"name":"xophmeister","email":"npm@acc.xoph.co"}],"readmeFilename":"README.md","time":{"modified":"2014-12-22T11:00:34.959Z","created":"2014-12-22T10:39:14.421Z","0.1.0":"2014-12-22T10:39:14.421Z","0.1.1":"2014-12-22T10:46:03.808Z","0.1.2":"2014-12-22T11:00:34.959Z"}}}