{"name":"node-http-cache","version":"2.3.0","description":"This module uses a simple filesystem storage to persist http responses.\nThen you can retrieve those responses from disk instead of an http connection.","main":"index.js","scripts":{"test":"mocha"},"devDependencies":{"mocha":"^2.4.5","should":"^8.3.2","winston":"2.2.0"},"dependencies":{"cron":"1.1.0","debug":"2.2.0","level":"1.4.0","lodash":"4.15.0","q":"1.4.1","q-io":"1.13.2"},"repository":"https://github.com/neuquino/node-http-cache","license":"Apache-2.0","engines":{"node":">=4.4.x"},"publishConfig":{"registry":"https://registry.npmjs.org"},"homepage":"https://github.com/neuquino/node-http-cache#readme","gitHead":"1aac17b43ef82373fd3d5f601a5b5b7761a22d8d","versions":[{"number":"1.0.0","date":"2016-05-23T14:45:04.723Z"},{"number":"1.0.1","date":"2016-05-23T18:51:25.743Z"},{"number":"1.1.0","date":"2016-05-24T18:58:55.322Z"},{"number":"1.1.1","date":"2016-05-24T20:56:18.421Z"},{"number":"1.1.2","date":"2016-06-02T13:21:33.620Z"},{"number":"2.0.0","date":"2016-08-12T18:45:00.305Z"},{"number":"2.0.1","date":"2016-08-16T13:13:20.421Z"},{"number":"2.0.2","date":"2016-08-16T20:45:07.151Z"},{"number":"2.0.3","date":"2016-08-19T17:44:28.223Z"},{"number":"2.0.4","date":"2016-08-19T18:25:55.549Z"},{"number":"2.1.0","date":"2016-08-23T14:10:21.239Z"},{"number":"2.2.0","date":"2016-08-24T18:39:25.989Z"},{"number":"2.3.0","date":"2016-10-05T13:10:42.755Z"}],"readme":"[![Build Status](https://secure.travis-ci.org/neuquino/node-http-cache.svg?branch=master)](http://travis-ci.org/neuquino/node-http-cache)\n[![Build Status](https://david-dm.org/neuquino/node-http-cache.svg)](https://david-dm.org/neuquino/node-http-cache.svg)\n[![NPM version](https://badge.fury.io/js/node-http-cache.svg)](http://badge.fury.io/js/node-http-cache)\n\n[![Gitter](https://badges.gitter.im/node-http-cache/Lobby.svg)](https://gitter.im/node-http-cache/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n[![NPM](https://nodei.co/npm/node-http-cache.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/node-http-cache/)\n\n\n#HTTP Cache\n\n>This module uses a simple filesystem storage ([levelup](https://www.npmjs.com/package/levelup)) to persist http responses. Storage is updated using cron expressions (see [crontab manpage](http://crontab.org/) for more detail on how to build these expressions).\n\n---\n\n\n##Usage\n\n```javascript\nvar cacheFactory = require('node-http-cache');\n\n// (...)\n\nvar config = {\n  //Any logger with the following defined functions: error, warn, info, debug.\n\tlogger: require('winston'),\n\t//Folder where the storage will be created.\n\tlocation: '/tmp',\n\t//List of services\n\tservices:[{\n\t\t//Update every day at 00:00\n\t\tcronExpression: '0 0 * * *',\n\t\tname: 'cities',\n\t\ttimezone: 'America/Buenos_Aires',\n\t\thttpOptions:{\n\t\t\turl: 'http://api.geonames.org/citiesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&lang=de&username=demoapp',\n\t\t\theaders: {\n\t\t\t\t'accept':'application/json'\n\t\t\t}\n\t\t},\n\t\tindexes: ['countrycode']\n\t}]\n};\n\n// (...)\n\nvar cache = cacheFactory(config);\n\n// (...)\n\n// Retrieves all cities\nvar allCities = cache.get(\n  {\n    name: 'cities'\n  }\n);\nvar onlyMXCities = cache.get(\n  {\n\t  name: 'cities', \n\t  indexKey: 'countrycode',\n\t  indexValue: 'MX'\n); \n```\n\n## Configuration\n\n### location\n\n*Required*: `true`\n\nRoot folder for levelup storage. Inside this directory a folder with the name `node-http-cache.db` will be created. \n\n### logger\n\n*Required*: `true`\t\n\nAny logger can be used here. The only requirement is to have this functions defined: `error`, `warn`, `info`, `debug`.\n\n### services.name\n\n*Required*: `true`\n\nService identifier, this name **MUST BE UNIQUE** among all services.\n\n### services.cronExpression\n\n*Required*: `true`\n\nUse [crontab expressions](http://crontab.org/) to specify when the snapshot should be updated. \n\n### services.httpOptions\n\n*Required*: `true`\n\nNode HTTP Cache uses [q-io](https://github.com/kriskowal/q-io) internally to make the requests. You can set any option specified in [its docs](https://github.com/kriskowal/q-io#request). Only `service.httpOptions.url` is required.\n\n### services.timezone \n\n*Required*: `false`\n\n*Default*: `'GMT-0'`\n\n### services.itemsPath\n\n*Required*: `false`\n\nPath to specify where is the array of objects to store. For example, if the response of the service is: `{items:[]}`, then `itemsPath: 'items'`. To specify nested elements, you can use dot notation (i.e.: `itemsPath: 'root.items'`)\n\n### services.indexes\n\n*Required*: `false`\n\nArray of fields to be indexed. For example, if the response of the service is `[{ \"user\": \"barney\", \"age\": 36, \"active\": true},{ \"user\": \"fred\",   \"age\": 40, \"active\": false }]`, then you can create an index by user using `indexes: [\"user\"]`\n\n## Retrieve data\n\n### get(config)\n\nRetrieves data saved using the config received as parameter.\n\nReturns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n#### config.name\n\n*Required*: true\n\nName used in config when the snapshot was created.\n\n#### config.indexKey\n\n*Required*: false\n\nName of the index used to search.\n\n#### config.indexValue\n\n*Required: false\n\nIf you specify an indexKey you *MUST* specify an indexValue.\n\n\n## Events\n\n### getData\n\nOnce data is retrieved from the filesystem storage.\n\n```javascript\n{\n  //Name of service retrieved\n  name: String,\n  //Data retrieved\n  data: Object\n}\n```\n\n### getError\n\nError retrieving data from the filesystem storage. The returning value is an instance of [Error](https://nodejs.org/dist/latest-v4.x/docs/api/errors.html#errors_class_error)\n\n### updateData\n\nOnce data is updated to the filesystem storage.\n\n```javascript\n{\n  //Name of service updated\n  name: String,\n  //Data retrieved\n  data: Object\n}\n```\n\n### updateError\n\nError updating data for service. The returning value is an instance of [Error](https://nodejs.org/dist/latest-v4.x/docs/api/errors.html#errors_class_error)\n\n## TO DO\n\n- Partial Updates\n- ~~In memory storage~~\n- ~~Indexes~~","created":"2016-05-23T14:45:04.723Z","modified":"2016-10-05T13:10:42.755Z","lastPublisher":{"name":"fchambo","email":"fchambo@yahoo.com"},"owners":[{"name":"fchambo","email":"fchambo@yahoo.com"}],"other":{"_attachments":{},"_from":".","_id":"node-http-cache","_nodeVersion":"4.4.5","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-http-cache-2.3.0.tgz_1475673040828_0.9092971251811832"},"_npmUser":{"name":"fchambo","email":"fchambo@yahoo.com"},"_npmVersion":"2.15.5","_rev":"1-1792748ed684b81a1931a739e38e99fe","_shasum":"37c8cc20e2af6a762915d58170ac827e259307db","author":{"name":"Facundo Chamb√≥","email":"fchambo@gmail.com","url":"https://github.com/neuquino"},"bugs":{"url":"https://github.com/neuquino/node-http-cache/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"2.3.0"},"dist":{"shasum":"37c8cc20e2af6a762915d58170ac827e259307db","tarball":"http://registry.npmjs.org/node-http-cache/-/node-http-cache-2.3.0.tgz"},"maintainers":[{"name":"fchambo","email":"fchambo@yahoo.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-05T13:10:42.755Z","created":"2016-05-23T14:45:04.723Z","1.0.0":"2016-05-23T14:45:04.723Z","1.0.1":"2016-05-23T18:51:25.743Z","1.1.0":"2016-05-24T18:58:55.322Z","1.1.1":"2016-05-24T20:56:18.421Z","1.1.2":"2016-06-02T13:21:33.620Z","2.0.0":"2016-08-12T18:45:00.305Z","2.0.1":"2016-08-16T13:13:20.421Z","2.0.2":"2016-08-16T20:45:07.151Z","2.0.3":"2016-08-19T17:44:28.223Z","2.0.4":"2016-08-19T18:25:55.549Z","2.1.0":"2016-08-23T14:10:21.239Z","2.2.0":"2016-08-24T18:39:25.989Z","2.3.0":"2016-10-05T13:10:42.755Z"}}}