{"name":"passport-slim","version":"1.1.3","description":"A HTTP auth service using passport","main":"index.js","scripts":{"test":"echo tbc"},"repository":"https://github.com/binocarlos/passport-slim","license":"MIT","dependencies":{"async":"^2.1.4","concat-stream":"^1.5.2","connect-redis":"^3.1.0","cookie-parser":"^1.4.3","express":"^4.14.0","express-session":"^1.14.2","ioredis":"^2.4.0","jsonist":"^1.3.0","minimist":"^1.2.0","pino":"^3.0.5","express-pino-logger":"^2.0.0","hat":"^0.0.3","passport":"^0.3.2"},"devDependencies":{},"gitHead":"daaf62c55ef3a24945d67bc2c6e0e1be2545b39a","homepage":"https://github.com/binocarlos/passport-slim#readme","versions":[{"number":"1.0.1","date":"2016-12-03T16:39:50.154Z"},{"number":"1.0.2","date":"2016-12-03T21:50:55.844Z"},{"number":"1.1.1","date":"2016-12-12T22:13:45.509Z"},{"number":"1.1.3","date":"2016-12-15T23:49:53.224Z"}],"readme":"# passport-slim\n\nA REST api service to handle authentication that uses a webhook to hand off state to a storage service and redis to save session state.\n\n## install\n\n```bash\n$ docker pull binocarlos/passport-slim\n```\n\n## example\n\nThere is a example of a stack running that uses [passport-service-gui](https://github.com/binocarlos/passport-service-gui)\n\n```bash\n$ make frontend.build\n$ docker-compose up\n```\n\nThen visit: http://localhost:8000\n\n## overview\n\npassport-slim provides a REST api gateway for user login and registration where state is kept in a backend storage service.\n\n```\n         browser\n            |\n         passport     admin\n       /   slim     / panel\n      /     |      /\n     /     user   /\n redis    storage\n```\n\nIt can be used in conjunction with [passport-service-gui](https://github.com/binocarlos/passport-service-gui)\n\nIt uses [passportjs](http://passportjs.org/) and so will be able to make use of the extensive list of [OAuth Providers](https://github.com/jaredhanson/passport#search-all-strategies)\n\n## CLI options\n\nWhen running in standalone mode from the command line:\n\n * --port - PORT - the port to listen on (default = 80)\n * --mountpath - MOUNTPATH - the path to mount the router on (default = /)\n * --usernamefield - USERNAME_FIELD - a boolean to activate the username field\n * --emailfield - EMAIL_FIELD - a boolean to activate the email field\n * --cookiesecret - COOKIE_SECRET - use to encode the browser cookie (default = 'secret')\n * --redishost - REDIS_SERVICE_HOST - the hostname of the redis service\n * --redisport - REDIS_SERVICE_PORT - the port of the redis service (default = 6379)\n * --redisprefix - REDIS_SERVICE_PREFIX - prepend redis keys with this value (default = 'sessions:')\n * --storagehost - STORAGE_SERVICE_HOST - the hostname of the storage service\n * --storageport - STORAGE_SERVICE_PORT - the port of the storage service (default = 80)\n * --storagepath - STORAGE_SERVICE_PATH - the path of the storage service api\n \nThere are several use cases the `usernamefield` and `emailfield` boolean options are controlling:\n\n * a system that uses email address as primary login username (emailfield=1,usernamefield=0)\n * login using a `username` (like `bob`) but also use register an email address (emailfield=1,usernamefield=1)\n * login with a username and no email address is required (emailfield=0,usernamefield=0)\n\nYou have to provide at least one of `usernamefield` and `emailfield` (or both).\n\n## public routes\n\nThese routes are provided by the service to your frontend code.\n\nAll routes are mounted under the mountpath argument.\n(e.g. `/version` with mountpath `/auth/v1` becomes `/auth/v1/version`).\n\n#### version\n\n`GET /version`\n\nReturns `text/plain` with the semver of the current package.\n\n#### current user status\n\n`GET /status`\n\nReturns the user details loaded from the storage service for the cookie passed in the request.\n\nIf the user is logged in - it will return `HTTP 200 - application/json`:\n\n```json\n{\n  \"loggedIn\":true,\n  \"data\":{\n    \"id\":123,\n    \"username\":\"bob\",\n    \"email\":\"bob@bob.com\"\n  }\n}\n```\n\nIf the user is not logged in - it will return `HTTP 200 - application/json`:\n\n```json\n{\n  \"loggedIn\":false\n}\n```\n\n#### login\n\n`POST /login`\n\n```json\n{\n  \"username\":\"bob\",\n  \"password\":\"apples\"\n}\n```\n\nOr if using email address as username:\n\n```json\n{\n  \"email\":\"bob@bob.com\",\n  \"password\":\"apples\"\n}\n```\n\nIf successful - returns `HTTP 200 - application/json`:\n\n```json\n{\n  \"loggedIn\":true,\n  \"data\":{\n    \"id\":123,\n    \"username\":\"bob\",\n    \"email\":\"bob@bob.com\"\n  }\n}\n```\n\nIf not successful - returns `HTTP 401 - application/json`:\n\n```json\n{\n  \"loggedIn\":false\n}\n```\n\nIf errors were found in the request - this route returns `HTTP 400 - application/json`:\n\n```json\n{\n  \"loggedIn\":false,\n  \"error\":true,\n  \"error\":\"invalid email\"\n}\n```\n\nIf errors were occurred when processing the request - returns `HTTP 500 - application/json`:\n\n```json\n{\n  \"loggedIn\":false,\n  \"error\":\"database connection lost\"\n}\n```\n\nThe `errors` property is decided by the backend storage service.\n\n#### register\n\n`POST /register`:\n\n```json\n{\n  \"email\":\"bob@bob.com\",\n  \"username\":\"bob\",\n  \"password\":\"apples\"\n}\n```\n\nIf successful - returns `HTTP 200 - application/json`:\n\n```json\n{\n  \"registered\":true,\n  \"data\":{\n    \"id\":123,\n    \"username\":\"bob\",\n    \"email\":\"bob@bob.com\"\n  }\n}\n```\n\nIf another user with the same username/email already exists - it returns `HTTP 409 - application/json`:\n\n```json\n{\n  \"registered\":false,\n  \"error\":\"username already exists\"\n}\n```\n\nIf errors were found in the request - returns `HTTP 400 - application/json`:\n\n```json\n{\n  \"registered\":false,\n  \"error\":\"invalid email\"\n}\n```\n\nIf errors were occurred when processing the request - returns `HTTP 500 - application/json`:\n\n```json\n{\n  \"registered\":false,\n  \"error\":\"database connection lost\"\n}\n```\n\nThe `errors` property is decided by the backend storage service.\n\n#### logout\n\n`GET /logout`\n\nRemoves the session and redirects the user to `/`\n\n\n## backend storage\n\nThe `passport-lite` service is stateless and will use HTTP to contact another service for storage.\n\nThe 3 variables to control where this service lives:\n\n * `--storage-host` - 1.2.3.4\n * `--storage-port` - 80\n * `--storage-path` - /api/v1/user\n\nSo using the example above we would create a HTTP server on `http://1.2.3.4:80/api/v1/user` that could handle the following requests:\n\n#### get user\n\n`GET /data?id=<id>`\n`GET /data?username=<username>`\n`GET /data?email=<email>`\n\nGet a user by it's id, email or username - what data is viewable by the client is controlled by what this route returns.\n\nIf the user is found then return `HTTP 200 - application/json`:\n\n```json\n{\n  \"id\":123,\n  \"username\":\"bob\",\n  \"email\":\"bob@bob.com\"\n}\n```\n\nYou **should** include an `id` field in your response.\nYou **should not** return any passwords or other sensitive information.\n\nIf the user is not found then return a `HTTP 404` and an empty body.\n\nIf there was an error - return a `HTTP 500 - application/json`:\n\n```json\n{\n  \"error\":\"no query parameter given\"\n}\n```\n\n#### authenticate user\n\nThis route will handle taking the password the user entered and deciding if it is the correct password.  This leaves password hashing up to your storage service.\n\n`POST /authenticate`\n\n```json\n{\n  \"username\":\"bob@bob.com\",\n  \"password\":\"apples\"\n}\n```\n\nOr if using email as username:\n\n```json\n{\n  \"email\":\"bob@bob.com\",\n  \"password\":\"apples\"\n}\n```\n\nIf valid then return `HTTP 200 - application/json`:\n\n```json\n{\n  \"authenticated\":true,\n  \"id\":123\n}\n```\n\nIf the credentials are not correct return `HTTP 401 - application/json`:\n\n```json\n{\n  \"authenticated\":false\n}\n```\n\nIf there was an error in authenticating the user - return a `HTTP 500 - application/json`:\n\n```json\n{\n  \"authenticated\":false,\n  \"error\":\"database connection missing\"\n}\n```\n\n#### create user\n\n`POST /create`\n\n```json\n{\n  \"email\":\"bob@bob.com\",\n  \"username\":\"bob\",\n  \"password\":\"apples\"\n}\n```\n\nThe usage of the `usernamefield` and `emailfield` options control what fields are included in the create user request.\n\nIf the user was created successfully - return `HTTP 201 - application/json`:\n\n```json\n{\n  \"created\":true,\n  \"id\":123\n}\n```\n\nIf you want to validate the details given (for example enforcing minimum password length or validating email address) - you can check the incoming JSON and return a `HTTP 400 - application/json`:\n\n```json\n{\n  \"created\":false,\n  \"error\":\"invalid email\"\n}\n```\n\nIf there was an error in creating the user - return a `HTTP 500 - application/json`:\n\n```json\n{\n  \"created\":false,\n  \"error\":\"database connection missing\"\n}\n```\n\n## license\n\nMIT","created":"2016-12-03T16:39:50.154Z","modified":"2016-12-15T23:49:53.224Z","lastPublisher":{"name":"binocarlos","email":"kaiyadavenport@gmail.com"},"owners":[{"name":"binocarlos","email":"kaiyadavenport@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"passport-slim","_nodeVersion":"5.4.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/passport-slim-1.1.3.tgz_1481845791087_0.6432595602236688"},"_npmUser":{"name":"binocarlos","email":"kaiyadavenport@gmail.com"},"_npmVersion":"3.3.12","_rev":"4-f2a01ec541da49f85cf5e10a4b5da50b","_shasum":"08dec5b68b9d4107f42988bed7838772c9e6be12","author":{"name":"Kai Davenport"},"bugs":{"url":"https://github.com/binocarlos/passport-slim/issues"},"directories":{},"dist-tags":{"latest":"1.1.3"},"dist":{"shasum":"08dec5b68b9d4107f42988bed7838772c9e6be12","tarball":"http://registry.npmjs.org/passport-slim/-/passport-slim-1.1.3.tgz"},"maintainers":[{"name":"binocarlos","email":"kaiyadavenport@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-12-15T23:49:53.224Z","created":"2016-12-03T16:39:50.154Z","1.0.1":"2016-12-03T16:39:50.154Z","1.0.2":"2016-12-03T21:50:55.844Z","1.1.1":"2016-12-12T22:13:45.509Z","1.1.3":"2016-12-15T23:49:53.224Z"}}}