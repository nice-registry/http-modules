{"name":"schemajs","description":"validate objects (including http request params) against a schema. includes express middleware","version":"0.1.14","repository":"https://github.com/eleith/schemajs","devDependencies":{"mocha":">= 1.0.3","chai":">= 1.0.3"},"dependencies":{"underscore":">= 1.1.7"},"engine":["node >= 0.4.8"],"main":"schema","scripts":{"test":"mocha -R spec test/*.js"},"homepage":"https://github.com/eleith/schemajs","versions":[{"number":"0.1.0","date":"2011-09-23T22:11:16.136Z"},{"number":"0.1.1","date":"2011-09-23T22:15:01.023Z"},{"number":"0.1.2","date":"2011-09-24T19:08:00.512Z"},{"number":"0.1.3","date":"2011-09-25T05:17:35.415Z"},{"number":"0.1.4","date":"2011-11-15T06:50:37.471Z"},{"number":"0.1.5","date":"2012-02-08T22:35:01.798Z"},{"number":"0.1.6","date":"2012-03-18T14:59:39.251Z"},{"number":"0.1.7","date":"2012-05-28T01:09:09.308Z"},{"number":"0.1.8","date":"2012-10-07T23:25:06.304Z"},{"number":"0.1.9","date":"2012-10-08T00:19:38.732Z"},{"number":"0.1.10","date":"2012-10-09T07:36:45.533Z"},{"number":"0.1.11","date":"2014-08-24T06:37:45.657Z"},{"number":"0.1.12","date":"2015-08-09T16:31:20.255Z"},{"number":"0.1.13","date":"2015-11-22T17:54:21.493Z"},{"number":"0.1.14","date":"2015-11-22T17:55:11.518Z"}],"readme":"### schemajs [![Build Status](https://secure.travis-ci.org/eleith/schemajs.png)](http://travis-ci.org/eleith/schemajs)\n\nvalidate objects (including http request params) against a schema. includes express middleware.\n\n### Installing \n\n\tnpm install schemajs\n\n# FEATURES\n - validates schema for deep objects and arrays as well\n - schema is in JSON, making it portable\n - properties, types and filters are extensible\n\n# EXAMPLE USAGE - validate an object\n\n```javascript\nvar schema  = require(\"./path/to/schemajs\");\nvar model   = schema.create(\n{\n  name:\t   {type:\"string\", filters:\"trim\", properties:{max:255}, required:true},\n  email:   {type:\"email\", filters:\"trim\", required:true},\n  wins:    {type:\"int\", filters:[\"trim\", \"toInt\"], default:0},\n  average: {type:\"float\", filters:[\"trim\", \"toFloat\"], default:0}\n});\n\nvar form = model.validate({name:\" your name \", email:\" name@example.com \"});\n\n// form.valid  - boolean, true if object matches schema\n// form.data   - contains filtered version of the object {name:\"your name\", email:\"name@example.com\", wins:0, average:0}\n// form.errors - contains associative array of any errors found\n```\n\nIf you pass `{strict: true}` as additional arguments into `Schema#validate`, the validation will fail if there are additional keys in the object which are not defined in the schema.\n\n\n# EXAMPLE USAGE - in expressjs, validate the request parameters\n```javascript\nvar schema  = require(\"./path/to/schemajs\");\nvar query   = schema.create(\n{\n  wins:    {type:\"int\", filters:\"toInt\"},\n  query:   {type:\"string\", filters:\"trim\", required:true, error:\"invalid query\"}\n});\n\napp.get(\"/users\", schema.middleware(query), function(req, res)\n{\n  // schema validation is attached to req.form\n  if(req.form.valid)\n  {\n    db_lookup({query:req.form.data.query, wins: req.form.data.wins});\n  }\n  else\n  {\n    next(new Error(\"invalid request\"));\n    //next(req.form.errors, 400);\n  }\n});\n```\n# API \n\n## schema.test(schema)\n\nquickly test an individual schema\n\n```javascript\nfield = schema.test(\"email@email.com\", {type:\"email\", trim:true, properties:{min:5}});\n```\n\n## schema.create(schema)\n\nschema for a simple object of one integer value\n\n```javascript\nschema =\n{\n         // [string] value for acceppted parameters of the object you want to test\n  \"wins\":\n  {\n    // [string (built in types) or function (custom types)] the type declaration for accepted values\n    \"type\": \"int\",\n      \n    // [string (built in filters) or function (custom filters) or array (mix and match!)] \n    // OPTIONAL, filters to process and optionally modify values\n    \"filters\": [\"trim\", \"toInt\", custom_filter],\n      \n    // [anything] \n    // OPTIONAL, the default value if none is supplied by the object\n    \"default\": 0,\n      \n    // [boolean] \n    // OPTIONAL, if true, this parameter must exist to validate\n    \"required\": true,\n\n    // [boolean] \n    // OPTIONAL, if true, this parameter can be null, despite any other rules\n    \"allownull\": true,\n \n    // [object] \n    // OPTIONAL, functions are custom property checks, else a built in property will be looked up\n    \"properties\": {max:100, min:0, special:custom_property},\n      \n    // [string, object] OPTIONAL, if there is an error, you can override the message that is returned\n    // use a string or the \"default\" key to use the default error message\n    // keys can be any property key that was used as well as \"filters\", \"required\", \"type\"\n    \"error\": {max: \"too many wins\", min: \"too few wins\", \"default\": \"something is wrong with your wins value\"}\n  }\n};\n```\n\nschema with embedded schemas for object and array types\n\n```javascript\nschema =\n{\n  \"user\":\n  {\n    \"type\":  \"object\",\n    \"schema\":\n    {\n      \"name\":  { type: \"string\", properties: { max: 255 }, required: true},\n      \"email\": { type: \"email\", error: \"email is not a valid email address\"}\n    },\n    \"error\": \"user needs an email and a name\"\n  },\n      \n  \"tags\":\n  {\n    \"type\":  \"array\",\n    \"schema\":\n    {\n      \"type\": \"string\"\n    },\n    \"properties\":  { max: 10, min: 3},\n    \"error\": { max: \"too many tags\", min: \"too few tags\" }\n  }\n};\n```\t\n\n## schema.types\n\t\nbuilt in types \n\n\t[string+, string (empty string allowed), alpha, alphanum, email, object, array, date, number, int, boolean, url, zipcode]\n\nto extend, add a function onto schema.types that accepts a value and returns a boolean if the type matches\n\ntest is run AFTER schema.filters are run\n\n```javascript\nschema.types.awesome = function(value)\n{\n  if(isAwesome(value))\n    return true;\n  else\n    return false;\n}\n```\n## schema.filters\n\t\nbuilt in filters:\n\n\t[toInt, toFloat, toString, toDate, toBoolean (converts on/off, true/false, 1/0, yes/no to bools), trim, lowercase, uppercase]\n\nto extend, add a function onto schema.filters that takes in a value and returns the updated value\n\nfilters are run BEFORE schema.test is run\n\n```javascript\nschema.filters.surround = function(value)\n{\n  if(value == needs_surrounding)\n    return \"----\" + value + \"----\";\n  else\n    return value;\n}\n```\n\n## schema.properties\n\nbuilt in properties\n\n\t[max, min, regex, in]\n\nto extend, add a function onto schema.properties that takes in a value and any additional arguments\n\nproperties are run AFTER test and filters\n\n```javascript\nschema.properties.unique = function(value)\n{\n  if(isArray(value) && allUnique(value))\n    return true;\n  else\n    return false;\n}\n\nschema.properties.notIn = function(value, badwords)\n{\n  if(badwords.indexOf(value) != -1)\n    return false;\n  else\n    return true;\n}\n```\n\n\n## Browser usage\nYou can use it in the browser by using [browserify](http://browserify.org/), however if that's too much work just use <https://wzrd.in/>. There is also an example <examples/cdn.html>\n\n\n# ideas\n\n   - dependency property making one parameters existance depend on another\n   - more types (phone numbers, credit card, ip address)\n   - more filters (camelcase, encode/unencode)\n   - more properties\n","starsCount":1,"created":"2011-09-23T22:11:14.840Z","modified":"2015-11-22T17:55:11.518Z","lastPublisher":{"name":"eleith","email":"online@eleith.com"},"owners":[{"name":"eleith","email":"work@eleith.com"}],"other":{"_attachments":{},"_from":".","_id":"schemajs","_npmUser":{"name":"eleith","email":"online@eleith.com"},"_npmVersion":"1.4.3","_rev":"1-a792afa220b3fbf16ceb53769450853b","author":{"name":"eleith"},"bugs":{"url":"https://github.com/eleith/schemajs/issues"},"contributors":[{"name":"andychilton"}],"directories":{},"dist-tags":{"latest":"0.1.14"},"dist":{"shasum":"2c7d8ba5382745d35fe16c939a6def6444fe0f4e","tarball":"http://registry.npmjs.org/schemajs/-/schemajs-0.1.14.tgz"},"maintainers":[{"name":"eleith","email":"work@eleith.com"}],"readmeFilename":"README.md","time":{"modified":"2015-11-22T17:55:11.518Z","created":"2011-09-23T22:11:14.840Z","0.1.0":"2011-09-23T22:11:16.136Z","0.1.1":"2011-09-23T22:15:01.023Z","0.1.2":"2011-09-24T19:08:00.512Z","0.1.3":"2011-09-25T05:17:35.415Z","0.1.4":"2011-11-15T06:50:37.471Z","0.1.5":"2012-02-08T22:35:01.798Z","0.1.6":"2012-03-18T14:59:39.251Z","0.1.7":"2012-05-28T01:09:09.308Z","0.1.8":"2012-10-07T23:25:06.304Z","0.1.9":"2012-10-08T00:19:38.732Z","0.1.10":"2012-10-09T07:36:45.533Z","0.1.11":"2014-08-24T06:37:45.657Z","0.1.12":"2015-08-09T16:31:20.255Z","0.1.13":"2015-11-22T17:54:21.493Z","0.1.14":"2015-11-22T17:55:11.518Z"},"users":{"vbauer":true}}}