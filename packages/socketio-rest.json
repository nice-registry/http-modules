{"name":"socketio-rest","version":"1.0.0","description":"Websockets are way faster than http. This package seeks to provide a replacement for http when creating RESTful APIs.","main":"index.js","scripts":{"start":"jest --watch","test":"jest"},"license":"ISC","devDependencies":{"babel-cli":"^6.24.0","babel-jest":"^19.0.0","babel-preset-env":"^1.3.2","babel-preset-stage-2":"^6.22.0","babel-preset-stage-3":"^6.22.0","jest":"^19.0.2","server-destroy":"^1.0.1","socket.io":"^1.7.3","socket.io-client":"^1.7.3"},"dependencies":{"babel-plugin-transform-class-properties":"^6.23.0","uuid":"^3.0.1"},"jest":{"testEnvironment":"node"},"gitHead":"974d6edf2153a26268c85caf925fbcc2bb3a3250","versions":[{"number":"1.0.0","date":"2017-04-06T15:34:06.825Z"}],"readme":"# Motivation\n\nWebsockets are way faster than http. This package seeks to provide a replacement\nfor http when creating RESTful APIs.\n\n# To do\n- Limit calls to WATCH handler so that it's only called when the matches of the query is changed. Now it is triggered for all changes within a resource.\n- Move `CHANGE`-events away from strategy\n\n# Usage\n\n## Client\n\n```javascript\nimport {Frontend} from 'socketio-rest'\nimport socketio from 'socket.io-client'\n\nconst io = socketio('http://localhost')\nconst realtime = new Frontend(io)\n\n// Meta data for all messages\n\nrealtime.options.token = 'some jwt token'\n\n// Create\n\nasync function createUser(options) {\n  return realtime.create('users', options)\n}\n\n// Read\n\nasync function getUser(id) {\n  return realtime.getOne('users', { id })\n}\n\nasync function getUserByEmail(email) {\n  return realtime.getOne('users', { email })\n}\n\nasync function getAllUsers() {\n  return realtime.get('users')\n}\n\nasync function getAdminUsers() {\n  return realtime.get('users', { role: 'admin' })\n}\n\n// Watch/unwatch\n\nasync function watchAdminUsers() {\n  const watchId = await realtime.watch('users')\n\n  return function unwatch() {\n    return realtime.unwatch(watchId)\n  }\n}\n\nasync function watchAdminUsers() {\n  const watchId = realtime.watch('users', { role: 'admin' })\n\n  return function unwatch() {\n    return realtime.unwatch(watchId)\n  }\n}\n\n// Update\n\nasync function updateRole(userId, newRole) {\n  return realtime.update('users', { role: newRole })\n}\n\n// Delete\n\nasync function deleteUser(id) {\n  return realtime.destroy('users', { id })\n}\n```\n\n## Server\n\n```javascript\nimport {Backend} from 'socketio-rest'\nimport EventEmitter from 'events'\nimport socketio from 'socket.io'\nimport http from 'http'\n\nconst server = http.createServer()\nconst io = socketio(server)\nconst events = new EventEmitter()\nconst resources = ['users']\n\nconst databaseAdapter = {\n  async getOne(resource, query, metaData) {\n    // Return one instance of the resource matching the query\n    // ‹Your implementation›\n  },\n  async get(resource, query, metaData) {\n    // Return an array of instances matching the query\n    // ‹Your implementation›\n  },\n  async update(resource, updates, metaData) {\n    // Update an instance of the query using updates = { id, ...updates }\n    // ‹Your implementation›\n\n    // Then notify socketio-rest that a change has occurred\n    events.emit('CHANGE ' + resource)\n  },\n  async create(resource, data, metaData) {\n    // Create an instance of the resource\n    // ‹Your implementation›\n\n    // Then notify socketio-rest that a change has occurred\n    events.emit('CHANGE ' + resource)\n  },\n  async destroy(resource, query, metaData) {\n    // Delete an instance of the resource\n    // ‹Your implementation›\n\n    // Then notify socketio-rest that a change has occurred\n    events.emit('CHANGE ' + resource)\n  }\n}\n\n// Initialize\n\nconst realtime = new Backend(io, resources)\n\n// Specify a strategy\n\nconst strategy = {\n  db,\n  events,\n}\n\nrealtime.useStrategy(strategy)\n\nserver.listen(1234, () => {\n  console.log('Server listening on port 1234')\n})\n```\n\n# Testing\n\n```\nyarn test\n```\n\n```\nnpm test\n```\n\n","created":"2017-04-06T15:34:06.825Z","modified":"2017-04-06T15:34:06.825Z","lastPublisher":{"name":"adrianhelvik","email":"adrianhelvik100@gmail.com"},"owners":[{"name":"adrianhelvik","email":"adrianhelvik100@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"socketio-rest","_nodeVersion":"7.7.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/socketio-rest-1.0.0.tgz_1491492844822_0.6671438957564533"},"_npmUser":{"name":"adrianhelvik","email":"adrianhelvik100@gmail.com"},"_npmVersion":"4.1.2","_rev":"1-99276034f29c3ee9410abe51b909e5f7","_shasum":"edf82777c4d8ea1edab0e24c0fb83ddd51433170","author":"","directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"edf82777c4d8ea1edab0e24c0fb83ddd51433170","tarball":"https://registry.npmjs.org/socketio-rest/-/socketio-rest-1.0.0.tgz"},"maintainers":[{"name":"adrianhelvik","email":"adrianhelvik100@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-06T15:34:06.825Z","created":"2017-04-06T15:34:06.825Z","1.0.0":"2017-04-06T15:34:06.825Z"}}}