{"name":"koa-server","version":"1.2.2","description":"A HTTP Server for NodeJS and Koa","homepage":"https://github.com/KID-WuMeng/koa-server","repository":"https://github.com/KID-WuMeng/koa-server","scripts":{"use":"node --harmony demo/use","get":"node --harmony demo/get","post":"node --harmony demo/post","put":"node --harmony demo/put","delete":"node --harmony demo/delete","all":"node --harmony demo/all","render":"node --harmony demo/render","base":"node --harmony demo/base","static":"node --harmony demo/static","cookie":"node --harmony demo/cookie","session":"node --harmony demo/session","file-io":"node --harmony demo/file-io","markdown":"node --harmony demo/markdown","mongo":"node --harmony demo/mongo","upload":"node --harmony demo/upload","mult-server":"node --harmony demo/mult-server"},"dependencies":{"co-busboy":"^1.3.0","co-views":"^2.1.0","hogan.js":"^3.0.2","koa":"^1.0.0","koa-body-parser":"^1.1.2","koa-mongo":"^0.4.1","koa-override":"^1.0.0","koa-router":"^5.1.2","koa-session":"^3.3.1","koa-sleep":"^0.1.0","koa-static":"^1.4.9","marked":"^0.3.5","mongodb":"^2.0.42","thunkify":"^2.1.2"},"gitHead":"320307ebad7a444c4779afe1270eea958417873a","versions":[{"number":"1.0.0","date":"2015-09-15T13:03:04.405Z"},{"number":"1.1.0","date":"2015-09-16T11:32:36.866Z"},{"number":"1.2.0","date":"2015-09-18T07:21:54.268Z"},{"number":"1.2.1","date":"2015-09-18T08:01:09.526Z"},{"number":"1.2.2","date":"2015-09-18T08:12:52.920Z"}],"readme":"# koa-server\nA HTTP Server for NodeJS and Koa\n\n# Install\n```\nnpm install koa-server --save\n```\n\n# Usage\nCreate a http server\n```js\nvar KoaServer = require('koa-server')\nvar server = new KoaServer()\n\nserver.get('/', function*(){\n  this.body = 'hello world'\n})\n\nserver.listen(8080)\n```\n\nYou can run multiple servers\n```js\nvar server1 = new KoaServer()\nvar server2 = new KoaServer()\n\nserver1.get('/', function*(){\n  this.body = 'first server'\n})\nserver2.get('/', function*(){\n  this.body = 'second server'\n})\n\nserver1.listen( 8080 )\nserver2.listen( 8081 )\n```\n\nUse some middlewares\n```js\nserver.get('/blog', check, function*(next){\n  this.body = 'hello world'\n  yield next\n}, log )\n\nfunction* check(next){\n  if(this.data.topic){\n    yield next\n  }\n}\nfunction* log(next){\n  console.log('...')\n  yield next\n}\n```\n\nOr, you can use some middlewares for all routers\n```js\nvar KoaServer = require('koa-server')\nvar sleep = require('koa-sleep')\n\nvar server = new KoaServer({\n  use: [ log, abc, sleep(3000) ]\n})\n\nfunction* log( next ){\n  console.log('...')\n  yield next\n}\nfunction* abc( next ){\n  this.abc = 'abc'\n  yield next\n}\n\nserver.get('/', function*(){\n  this.body = this.abc\n})\n```\n\nSupport the routers: all, get, post, put, delete\n\nThe this.param is the value of url's path\n\nThe this.data is the data from request ( GET's query, others' body )\n\n```js\nfunction* response(){\n  // The param and data will convert some value'type automatically\n  // For example:\n  // '18'    -> 18\n  // '4.5'   -> 4.5\n  // 'true'  -> true\n  // 'false' -> false\n  // 'null'  -> null\n  // ''      -> null\n  this.body = {\n    param: this.param,\n    data: this.data\n  }\n}\n\nserver.all('/books/:name/:page', response)\nserver.get('/books/:name/:page', response)\nserver.post('/books/:name/:page', response)\nserver.put('/books/:name/:page', response)\nserver.delete('/books/:name/:page', response)\n```\n\nTo render a page ( template's extname should be the .html )\n```js\nvar server = new KoaServer({\n  // The directory to store html files\n  // default: 'view'\n  view: '/pages',\n  // The template engine, need to install package\n  // default: 'hogan'\n  engine: 'mustache'\n})\n\nserver.get('/', function*(){\n  this.body = yield this.render('index',{\n    name:'kid',\n    age:18\n  })\n})\n```\n\nUser base path and static resources\n```js\nvar server = new Server({\n  base: 'child-site',\n  static: ['css','js','image']\n})\n\n// Real path: child-site/view/index.html\nthis.body = yield this.render('index')\n```\n```html\n<!-- Real path: child-site/css/index.css -->\n<link rel=\"stylesheet\" href=\"index.css\">\n\n<!-- Real path: child-site/js/index.js -->\n<script src=\"index.js\"></script>\n\n<!-- Real path: child-site/image/logo.png -->\n<img src=\"logo.png\">\n```\n\nSupport file upload\n```html\n<form method=\"post\" action=\"result\" enctype=\"multipart/form-data\">\n  <input type=\"file\" name=\"file\" />\n  <input type=\"submit\" />\n</form>\n```\n```js\n// Must ensure the save directory ( the 'tmp' in example ) has existed\n// Must yield to next\nserver.post('/result', function*( next ){\n  this.file.saveTo('temp/')\n  this.body = 'success'\n  yield next\n})\n```\n\nYou can check file size or rename file\n```js\nserver.post('/result', function*( next ){\n  var checkSize = this.file.size <= 1024 * 1024\n  if(checkSize){\n    // For example, filename is 'abc.jpg'\n    // The name is 'abc' and type is '.jpg'\n    this.file.name = function(name,type){\n      return new Date().getTime() + type\n    }\n    \n    // Or use: this.file.name = 'xxx.xx'\n\n    this.file.saveTo('temp/')\n    this.body = 'success'\n  } else {\n    this.body = 'too large size'\n  }\n  yield next\n})\n```\n\nTo handle cookie\n```js\n// Get\nserver.get('/get',function*(){\n  var name = this.cookie.get('name')\n  this.body = 'ok'\n})\n// Set\nserver.post('/set',function*(){\n  this.cookie.set('name','kid')\n  this.body = 'ok'\n})\n```\n\nYou can set more options\n```js\nserver.get('/', function*(){\n  var maxAge = 10 * 60 * 1000  // MilliSeconds\n  this.cookie.set('name', 'kid', maxAge, {\n    domain: '.google.com',\n    path:   '/user'\n  })\n  this.body = 'ok'\n})\n```\n\nTo handle session\n```js\n// Get and set session\nserver.get('/', function*(){\n  if( this.session.name === 'kid' ){\n    this.body = 'hello kid'\n  } else {\n    this.session.name = 'kid'\n    this.session.maxAge = 10 * 60 * 1000  // MilliSeconds\n    this.body = 'login...'\n  }\n})\n\n// Clear session\nserver.get('/clear', function*(){\n  this.session = null\n  this.body = 'clear success'\n})\n```\n\nA syntactic sugar for file's IO\n```js\nserver.get('/', function*(){\n  var data = {\n    user: { id: 1, name: 'kid' },\n    act: ['click-a','input-text','download-img']\n  }\n  // If data'type is object, will use JSON.stringify\n  yield this.write('log/userAct.json', data)\n  // If extname of file is '.json', will use JSON.parse\n  this.body = yield this.read('log/userAct.json')\n})\n```\n\nBuild-in the markdown function ( GitHub Flavored )\n```js\nserver.get('/', function*(){\n  var text = yield this.read('README.md')\n  this.body = this.markdown( text )\n})\n```\n\nTo operate MongoDB\n```js\nvar server = new KoaServer({\n  mongo: {\n    defaultDB: 'test'\n  }\n})\n\nserver.get('/', function*(){\n  this.body = yield this.db('test').collect('users').find()\n  // Or use: yield this.collect('users').find(), will use defaultDB\n})\n```\n\nYou can set more options\n```js\nvar server = new KoaServer({\n  // These values in the example is default\n  mongo: {\n    host: 'localhost',\n    port: 27017,\n    user: null,\n    pass: null,\n    min: 1,\n    max: 100,\n    timeout: 30000,\n    defaultDB: 'test',\n    log: false\n  }\n})\n```\n\nHere are some examples, please see more in 'demo/mongo/index.js'\n```js\nserver.get('/findOne', function*(){\n  var result = yield this.collect('users').findOne({ age: 18 })\n  // If response is null, return a 204 status\n  this.body = result ? result : 'null'\n})\n\n\nserver.get('/find', function*(){\n  this.body = yield this.collect('users').skip(3).limit(5).sort({ age: 1 }).find()\n})\n\n\nserver.get('/insert', function*(){\n  var users = this.collect('users')\n  var result = yield users.insert({ name: 'kid', age: 18 })\n  this.body = result\n})\n\n\nserver.get('/update', function*(){\n  var users = this.collect('users')\n  // true means multi-update\n  var result = yield users.update({\n    age: 18\n  }, {\n    $inc: { age: 1 }\n  }, true)\n  this.body = result\n})\n\n\nserver.get('/remove', function*(){\n  var users = this.collect('users')\n  // remove({}) can remove all in users\n  var result = yield users.remove({ age: 18 })\n  this.body = result\n})\n```\n\nOf course, included the functions of koa-app\n```js\nserver.get('/login',function*(){\n  this.redirect('back')\n})\n```","starsCount":1,"created":"2015-09-15T13:03:04.405Z","modified":"2015-09-18T08:12:52.920Z","lastPublisher":{"name":"kid-wumeng","email":"kid.wumeng@gmail.com"},"owners":[{"name":"kid-wumeng","email":"kid.wumeng@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"koa-server","_nodeVersion":"0.12.2","_npmUser":{"name":"kid-wumeng","email":"kid.wumeng@gmail.com"},"_npmVersion":"2.7.4","_rev":"1-7cfbe519384a2e3c9e25b0ad966b508b","_shasum":"4d64f54d9a64c74a5c006038d74037d6f395e07a","author":{"name":"KID.WuMeng","email":"kid.wumeng@gmail.com","url":"https://github.com/KID-WuMeng"},"bugs":{"url":"https://github.com/KID-WuMeng/koa-server/issues"},"directories":{},"dist-tags":{"latest":"1.2.2","alpha":"1.1.0"},"dist":{"shasum":"4d64f54d9a64c74a5c006038d74037d6f395e07a","tarball":"http://registry.npmjs.org/koa-server/-/koa-server-1.2.2.tgz"},"maintainers":[{"name":"kid-wumeng","email":"kid.wumeng@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-09-18T08:12:52.920Z","created":"2015-09-15T13:03:04.405Z","1.0.0":"2015-09-15T13:03:04.405Z","1.1.0":"2015-09-16T11:32:36.866Z","1.2.0":"2015-09-18T07:21:54.268Z","1.2.1":"2015-09-18T08:01:09.526Z","1.2.2":"2015-09-18T08:12:52.920Z"},"users":{"kid-wumeng":true}}}