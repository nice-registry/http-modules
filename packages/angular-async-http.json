{"name":"angular-async-http","version":"1.1.0","description":"Angular 4 Async HTTP client in typescript with promises, interceptors, and timeouts.","main":"index.js","scripts":{"test":"gulp test","watch":"gulp default","prepublish":"gulp prepublish"},"repository":"https://github.com/yavin5/angular-async-http","keywords":["angular4","angulario","http","rest","client"],"license":"MIT","homepage":"https://github.com/yavin5/angular-async-http#readme","dependencies":{"@angular/common":"^4.0.0","@angular/compiler":"^4.0.0","@angular/core":"^4.0.0","@angular/http":"^4.0.0","@angular/platform-browser":"^4.0.0","reflect-metadata":"^0.1.8","rxjs":"^5.2.0","zone.js":"^0.8.4"},"devDependencies":{"@types/chai":"^3.4.34","@types/jasmine":"^2.5.41","@types/node":"^6.0.45","async":"^2.1.1","chai":"^3.5.0","codelyzer":"^2.0.1","del":"^2.2.2","gaze":"^1.1.2","gulp":"^3.9.0","gulp-html-extend":"^1.1.6","gulp-mocha":"^3.0.1","gulp-replace":"^0.5.4","gulp-typescript":"3.1.3","gulp-util":"^3.0.7","merge2":"^1.0.2","ts-node":"^2.0.0","tslint":"^4.3.0","typescript":"^2.1.5","vinyl-paths":"^2.1.0"},"gitHead":"d0b072171d80810d3147d35c5065f2ca54842e4c","versions":[{"number":"1.0.3","date":"2017-04-25T10:21:37.527Z"},{"number":"1.0.4","date":"2017-04-25T10:54:54.570Z"},{"number":"1.0.5","date":"2017-04-25T11:08:09.577Z"},{"number":"1.0.6","date":"2017-04-27T11:18:47.386Z"},{"number":"1.0.7","date":"2017-04-28T12:17:54.229Z"},{"number":"1.0.8","date":"2017-05-01T16:47:51.240Z"},{"number":"1.0.9","date":"2017-05-02T20:06:34.392Z"},{"number":"1.0.10","date":"2017-05-04T09:09:06.068Z"},{"number":"1.0.11","date":"2017-05-04T09:26:15.903Z"},{"number":"1.0.12","date":"2017-05-04T10:11:00.899Z"},{"number":"1.0.13","date":"2017-05-04T10:30:27.942Z"},{"number":"1.0.14","date":"2017-05-04T17:09:48.064Z"},{"number":"1.0.15","date":"2017-05-04T18:31:55.033Z"},{"number":"1.1.0","date":"2017-06-12T09:30:24.105Z"}],"readme":"[![npm version](https://badge.fury.io/js/angular-async-http.svg)](https://badge.fury.io/js/angular-async-http)\n[![GitHub version](https://badge.fury.io/gh/yavin5%2Fangular-async-http.svg)](https://badge.fury.io/gh/yavin5%2Fangular-async-http)\n[![GitHub forks](https://img.shields.io/github/forks/yavin5/angular-async-http.svg?style=social&label=Fork&style=plastic)](https://github.com/yavin5/angular-async-http)\n[![GitHub stars](https://img.shields.io/github/stars/yavin5/angular-async-http.svg?style=social&label=Star&style=plastic)](https://github.com/yavin5/angular-async-http)\n[![GitHub issues](https://img.shields.io/github/issues/yavin5/angular-async-http.svg?style=plastic)](https://github.com/yavin5/angular-async-http)\n[![GitHub pull requests](https://img.shields.io/github/issues-pr/yavin5/angular-async-http.svg?style=plastic)](https://github.com/yavin5/angular-async-http)\n[![license](https://img.shields.io/github/license/yavin5/angular-async-http.svg?style=plastic)](https://github.com/yavin5/angular-async-http)\n\n# angular-async-http\nAngular 4 Async HTTP client in typescript with promises, interceptors, and timeouts.\n**Note:** Production Ready! (Well tested)\n\n## Installation\n\n```sh\nnpm install angular-async-http --save\n```\n\n## Example\n\n```ts\n\nimport { Http, Request, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport {\n  HttpClient, RestClient, Client, GET, PUT, POST, DELETE, Headers, Path, Body, Query, Produces, MediaType\n} from 'angular-async-http';\n\nimport { Todo } from './models/Todo';\nimport { SessionFactory } from './sessionFactory';\n\n@Injectable()\n@Client({\n    serviceId: 'todo-service',\n    baseUrl: 'http://localhost:3000/api/',\n    headers: {\n        'content-type': 'application/json'\n    }\n})\nexport class TodoClient extends RestClient {\n\n    constructor(http:Http){\n        super(<HttpClient>http);\n    }\n\n    protected requestInterceptor(req: Request):void {\n        if (SessionFactory.getInstance().isAuthenticated) {\n            req.headers.append('jwt', SessionFactory.getInstance().credentials.jwt);\n        }\n    }\n\n    protected responseInterceptor(res: Observable<Response>): Observable<any> {\n        // do anything with responses\n        return res;\n    }\n\n    @Get(\"todo/\")\n    @Timeout(2000) //In milliseconds\n    @Produces(MediaType.JSON)\n    public getTodos( @Query(\"page\") page:number, @Query(\"size\", {default: 20}) size?:number, @Query(\"sort\") sort?: string): Observable<Todo[]> { return null; };\n\n    @Get(\"todo/{id}\")\n    @Timeout(2000) //In milliseconds\n    @Map(resp => new Todo(resp.json()))\n    public getTodoById( @Path(\"id\") id: number): Observable<Todo>{ return null; };\n\n    @Post(\"todo\")\n    @Timeout(2000) //In milliseconds\n    @Headers({\n        'content-type': 'application/json'\n    })\n    public postTodo( @Body todo: Todo): Observable<Response> { return null; };\n\n    @Put(\"todo/{id}\")\n    @Timeout(2000) //In milliseconds\n    public putTodoById( @Path(\"id\") id: string, @Body todo: Todo): Observable<Response> { return null; };\n\n    @Delete(\"todo/{id}\")\n    @Timeout(2000) //In milliseconds\n    public deleteTodoById( @Path(\"id\") id: string): Observable<Response> { return null; };\n}\n```\n\n### Using it in your component\n\n**```app.module.ts```**\n``` ts\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    HttpModule\n  ],\n  providers: [\n    TodoClient\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n**```todo.component.ts```**\n``` ts\n// You need some or all of the following rxjs imports for Promise and Observable.\nimport 'rxjs/add/observable/defer';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/timeout';\nimport 'rxjs/add/operator/toPromise';\nimport { Observable } from 'rxjs/Observable';\n\n@Component({\n  selector: 'to-do',\n})\nexport class ToDoCmp {\n\n  constructor(private todoClient: TodoClient) {\n  }\n\n  // Use todoClient.\n  sampleUsage() {\n    this.todoClient.getTodos( /* page */ 1).subscribe(data=>{\n      console.log(data)\n    })\n  }\n\n  // Another example, using Promises.\n  sampleUsage2() {\n    this.todoClient.getTodos( /* page */ 1).toPromise()\n      .then((response: Response) => console.log(response.json()))\n      .catch(this.handleError);\n    })\n  }\n\n  private handleError(error: any): Promise<any> {\n    console.error('An error occurred', error);\n    console.log('ERROR');\n    return Promise.reject(error.message || error);\n  }\n}\n```\n## API Docs\n\n### RestClient\n#### Methods:\n- `getServiceId(): string`: returns the serviceId of the RestClient\n- `getBaseUrl(): string`: returns the base url of RestClient\n- `getDefaultHeaders(): Object`: returns the default headers of RestClient in a key-value pair\n\n### Class decorators:\n- `@Client(args:{serviceId?: string, baseUrl?: string, headers?: any})`\n\n### Method decorators:\n- `@Get(url: String)`\n- `@Post(url: String)`\n- `@Put(url: String)`\n- `@Patch(url: String)`\n- `@Delete(url: String)`\n- `@Head(url: String)`\n- `@Headers(headers: Object)`\n- `@Map(mapper:(resp : any)=>any)`\n- `@OnEmit(emitter:(resp : Observable<any>)=>Observable<any>)`\n- `@Timeout(timeout: number)`\n\n### Parameter decorators:\n- `@Path(name: string, value?:any|{value?:any})`\n- `@Query(name: string, value?:any|{value?:any,format?:string})`\n- `@Header(name: string, value?:any|{value?:any,format?:string})`\n- `@Body`\n\n#### Collection Format\nDetermines the format of the array if type array is used. (used for ``@Query`` and ``@Header``) Possible values are:\n* ``Format.CSV`` - comma separated values ``foo,bar``.\n* ``Format.SSV`` - space separated values ``foo bar``.\n* ``Format.TSV`` - tab separated values ``foo\\tbar``.\n* ``Format.PIPES`` - pipe separated values ``foo|bar``.\n* ``Format.MULTI`` - corresponds to multiple parameter instances instead of multiple values for a single instance ``foo=bar&foo=baz``. This is valid only for parameters in \"query\" or \"formData\".\n\nDefault value is ``Format.CSV``.\n\n# Contributors\n\nBrought to you by many contributors, including:  \n  \nTrustPortal Solutions Ltd  [http://trustportal.org](http://trustportal.org)  \nYavin Five  \ndeblockt  \nDmitry-Gorbenko  \nMaxxton Group  [http://www.maxxton.com](http://www.maxxton.com)  \nDomonkos Pal : Paldom  \nDiscountrobot  \nTN-Kirontech  \nLeFinc  \nmmrath  [http://www.mmrath.com](http://www.mmrath.com)  \nsteven166  \nMayur Patel : mayur-novus\n\n# License\n\nMIT\n","created":"2017-04-25T10:21:37.527Z","modified":"2017-06-12T09:30:24.105Z","lastPublisher":{"name":"yavin5","email":"yavinfive464@gmail.com"},"owners":[{"name":"yavin5","email":"yavinfive464@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"angular-async-http","_nodeVersion":"6.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/angular-async-http-1.1.0.tgz_1497259822968_0.757246206048876"},"_npmUser":{"name":"yavin5","email":"yavinfive464@gmail.com"},"_npmVersion":"4.1.2","_rev":"14-c18e2b8a8b621acdc51730ef8816ce4e","_shasum":"56a77eb390476cef0c169d840e5d13dcfe390fef","author":{"name":"Yavin Five","email":"yavinfive464@gmail.com"},"bugs":{"url":"https://github.com/yavin5/angular-async-http/issues"},"contributors":[{"name":"Mayur Patel","email":"mayur-novus"}],"directories":{},"dist-tags":{"latest":"1.1.0"},"dist":{"shasum":"56a77eb390476cef0c169d840e5d13dcfe390fef","tarball":"https://registry.npmjs.org/angular-async-http/-/angular-async-http-1.1.0.tgz"},"maintainers":[{"name":"yavin5","email":"yavinfive464@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-12T09:30:24.105Z","created":"2017-04-25T10:21:37.527Z","1.0.3":"2017-04-25T10:21:37.527Z","1.0.4":"2017-04-25T10:54:54.570Z","1.0.5":"2017-04-25T11:08:09.577Z","1.0.6":"2017-04-27T11:18:47.386Z","1.0.7":"2017-04-28T12:17:54.229Z","1.0.8":"2017-05-01T16:47:51.240Z","1.0.9":"2017-05-02T20:06:34.392Z","1.0.10":"2017-05-04T09:09:06.068Z","1.0.11":"2017-05-04T09:26:15.903Z","1.0.12":"2017-05-04T10:11:00.899Z","1.0.13":"2017-05-04T10:30:27.942Z","1.0.14":"2017-05-04T17:09:48.064Z","1.0.15":"2017-05-04T18:31:55.033Z","1.1.0":"2017-06-12T09:30:24.105Z"}}}