{"name":"http-bat","license":"MIT","version":"2.0.30","dependencies":{"es6-promise":"^3.2.1","faker":"^3.1.0","glob":"^7.0.3","jsonpath":"^0.2.6","jsonschema":"^1.1.0","lodash":"^4.11.1","methods":"^1.1.2","mocha":"^2.4.5","pug":"^2.0.0-beta4","raml-1-parser":"^0.2.30","raml-path-match":"^2.0.0","supertest":"1.2.0","url":"^0.11.0","yaml-ast-parser":"0.0.28","yargs":"^4.7.0"},"devDependencies":{"@types/node":"^7.0.4","body-parser":"^1.15.0","connect-busboy":"0.0.2","coveralls":"^2.11.9","expect":"^1.20.2","express":"4.13.4","istanbul":"^0.4.3","jasmine-node":"^1.14.5","tslint":"^3.10.2","typescript":"^2.1.4","typings":"^1.3.2"},"scripts":{"test":"mocha --reporter spec && npm run jasmine && node dist/bin/http-bat.js test/valid-specs-negative-result/remote/tags.spec.yml --tags pass","jasmine":"jasmine-node --color test/JasmineSpec.js --verbose","coverage":"(`npm bin`/istanbul cover `npm bin`/_mocha || true)","test-travis":"npm run lint && npm run build && npm run coverage && npm run test && node dist/bin/http-bat.js test/valid-specs/cli.spec.yml","preversion":"npm test","postversion":"git push && git push --tags","lint":"`npm bin`/tslint -t msbuild src/**/*.ts","build":"rm -rf dist && typings install && `npm bin`/tsc -p tsconfig.json && (rm -rf test/typings || true) && cp -R src/typings test && cd test && `npm bin`/tsc -p tsconfig.json && cd .. && chmod +x dist/bin/http-bat.js"},"repository":"https://github.com/mulesoft/http-bat","main":"dist/index.js","typings":"dist/index.d.ts","bin":{"http-bat":"dist/bin/http-bat.js"},"gitHead":"93d68af240ef9993597dc99fa5dae85425c81657","description":"[![HTTP-BAT][logo-url]][repo-url] # Http Blackbox API Tester (`http-bat`)  [![NPM version][npm-image]][npm-url] [![NPM downloads][downloads-image]][npm-url] [![Build status][travis-image]][travis-url] [![Test coverage][coveralls-image]][coveralls-url]","homepage":"https://github.com/mulesoft/http-bat#readme","versions":[{"number":"0.1.0-alpha.0","date":"2016-05-01T20:43:22.978Z"},{"number":"0.1.5","date":"2016-05-03T19:04:09.601Z"},{"number":"0.1.6","date":"2016-05-04T19:04:53.746Z"},{"number":"0.2.0","date":"2016-05-05T13:58:39.921Z"},{"number":"0.2.1","date":"2016-05-05T21:51:13.379Z"},{"number":"0.2.2","date":"2016-05-05T21:52:20.715Z"},{"number":"0.3.0","date":"2016-05-06T16:39:58.543Z"},{"number":"0.3.1","date":"2016-05-06T16:46:32.508Z"},{"number":"0.4.0","date":"2016-05-09T20:03:09.866Z"},{"number":"0.5.0","date":"2016-05-25T18:49:32.589Z"},{"number":"0.5.1","date":"2016-05-25T19:37:42.142Z"},{"number":"1.0.0","date":"2016-07-07T17:59:28.293Z"},{"number":"1.0.2","date":"2016-07-07T19:00:26.306Z"},{"number":"1.0.5","date":"2016-07-07T21:19:15.780Z"},{"number":"1.0.6","date":"2016-07-11T18:40:56.761Z"},{"number":"1.1.0","date":"2016-07-20T22:29:10.633Z"},{"number":"1.1.1","date":"2016-07-21T19:33:10.853Z"},{"number":"1.2.0","date":"2016-07-24T21:59:28.189Z"},{"number":"1.2.1","date":"2016-07-25T21:44:52.317Z"},{"number":"1.2.3","date":"2016-07-25T22:04:36.070Z"},{"number":"1.3.0","date":"2016-07-26T22:27:22.297Z"},{"number":"2.0.0-alpha.1","date":"2016-08-05T15:29:52.424Z"},{"number":"2.0.0-alpha.2","date":"2016-08-05T16:10:22.075Z"},{"number":"2.0.0-alpha.3","date":"2016-08-08T18:14:22.371Z"},{"number":"2.0.0-alpha.4","date":"2016-08-09T13:46:47.346Z"},{"number":"2.0.0-alpha.5","date":"2016-08-09T20:19:31.806Z"},{"number":"2.0.0-alpha.7","date":"2016-08-11T18:13:50.849Z"},{"number":"2.0.0-alpha.8","date":"2016-08-13T15:11:07.384Z"},{"number":"2.0.0-alpha.9","date":"2016-08-15T20:55:55.546Z"},{"number":"2.0.0-alpha.10","date":"2016-08-17T02:27:12.410Z"},{"number":"2.0.0-alpha.11","date":"2016-08-17T20:45:20.916Z"},{"number":"2.0.0-alpha.12","date":"2016-08-19T02:19:05.206Z"},{"number":"2.0.0-alpha.13","date":"2016-08-21T00:49:49.924Z"},{"number":"2.0.0-alpha.14","date":"2016-08-22T15:25:18.035Z"},{"number":"2.0.0-alpha.15","date":"2016-08-23T00:36:06.753Z"},{"number":"2.0.0-alpha.16","date":"2016-08-23T01:08:43.709Z"},{"number":"2.0.0-alpha.17","date":"2016-08-23T22:38:25.950Z"},{"number":"2.0.0-alpha.18","date":"2016-11-01T16:11:00.849Z"},{"number":"2.0.0-alpha.19","date":"2016-12-15T19:38:17.182Z"},{"number":"2.0.0-alpha.21","date":"2016-12-26T14:57:39.974Z"},{"number":"2.0.0-alpha.22","date":"2017-01-16T19:00:13.455Z"},{"number":"2.0.0-alpha.23","date":"2017-01-16T19:37:45.117Z"},{"number":"2.0.0-alpha.24","date":"2017-01-31T20:49:28.215Z"},{"number":"2.0.0-alpha.25","date":"2017-03-31T20:41:55.773Z"},{"number":"2.0.0-alpha.26","date":"2017-04-12T18:51:18.778Z"},{"number":"2.0.0-alpha.27","date":"2017-04-14T19:38:45.725Z"},{"number":"2.0.29","date":"2017-05-04T18:43:26.550Z"},{"number":"2.0.30","date":"2017-06-10T21:10:50.278Z"}],"readme":"[![HTTP-BAT][logo-url]][repo-url]\n# Http Blackbox API Tester (`http-bat`) \n[![NPM version][npm-image]][npm-url] [![NPM downloads][downloads-image]][npm-url] [![Build status][travis-image]][travis-url] [![Test coverage][coveralls-image]][coveralls-url]\n\nDescribe your platform independient API tests using [ATL (Api Testing Language)](https://github.com/mulesoft/atl) and run them using `http-bat`. It also generates [coverage reports for your RAML files](https://coveralls.io/builds/6914230/source?filename=test%2Fserver%2Ffixtures%2Fexample.raml).\n\n## Usage\n\n## Install\n\nInstall the tool executing `npm install -g http-bat`\n\n### Using command line, useful for CI\n\nRun your tests on `api` folder:\n```\n$ http-bat api/*.spec.yml\n```\n\nRun your tests with a custom remote URI:\n```\n$ http-bat github_api/*.spec.yml --uri http://api.github.com\n```\n\n### You need it embeded on a Node project? (Useful for coverage and CI)\n\nInstall the package\n```\n$ npm install http-bat --save-dev\n```\n\n> `test/api.spec.js` <- mocha spec\n\n```typescript\nimport { GenericAdapter } from 'http-bat/dist/adapters'\n\nrequire('http-bat/dist/adapters/mocha') \n// Mocha detection should be automatic. But since mocha and node changes a lot, this line may be required.\n\nGenericAdapter.runFile('file.yaml')\n```\n\n[More details and examples](https://github.com/mulesoft/http-bat/wiki/Usage-from-Node.js)\n\n### Execute mocha on your project\n\n```\n$ mocha\n```\n\n![Imgur](http://i.imgur.com/zoV5lH7.gif)\n\n\n## Current features\n\nYou can read the entire list on [this page](https://github.com/mulesoft-labs/http-bat/wiki/Features)  \n[VSCode extension](https://marketplace.visualstudio.com/items?itemName=menduz.http-bat-vscode)\n\n## Examples\n\n### Wiki examples\n\n- [Full CRUD](https://github.com/mulesoft-labs/http-bat/wiki/Examples:-CRUD)\n- [Obtain and use access tokens](https://github.com/mulesoft-labs/http-bat/wiki/Examples:-Obtain-access-token)\n- [Travis CI for APIs](https://github.com/mulesoft-labs/http-bat/wiki/Examples:-Travis-CI-for-APIs)\n- [Travis CI for APIs (With RAML coverage)](https://github.com/mulesoft-labs/http-bat/wiki/Examples:-RAML-Coverage)\n- [Using environment variables](https://github.com/mulesoft-labs/http-bat/wiki/Examples:-Using-environment-variables-&-Login), e.g. storing credentials.\n\n### Test response status code\n\n```yaml\n#%ATL 1.0\n\ntests:\n  \"Favicon must exists\":\n    GET /favicon.ico:\n      response:\n        status: 200\n  \"Should return 401\":\n    GET /unauthorized_url:\n      response:\n        status: 401\n  \"Should return 404\":\n    GET /asjdnasjdnkasf:\n      response:\n        status: 404\n```\n\n### Send query string parameters\n\n```yaml\n#%ATL 1.0\n\ntests:\n  \"Inline query string\":\n    GET /orders?page=10:\n      response:\n        status: 200\n  \"Non inline\":\n    GET /orders:\n      queryParameters:\n        page: 10\n      response:\n        status: 200\n  \"Override inline query string\":\n    # The final url will be /orders?page=10&qty=20 \n    GET /orders?page={----asd---}&qty=20:\n      queryParameters:\n        page: 10\n      response:\n        status: 200\n```\n\n### Validate response Â´Content-TypeÂ´\n\n```yaml\n#%ATL 1.0\n\ntests:\n  \"Must return text\":\n    GET /responses/text:\n      response:\n        content-type: text/plain  \n  \"Must return json\":\n    GET /responses/json:\n      response:\n        content-type: application/json\n  \"Must return url-encoded\":\n    GET /responses/url-encoded:\n      response:\n        content-type: application/x-www-form-urlencoded\n```\n\n### Send headers\n\n```yaml\n#%ATL 1.0\n\ntests:\n  \"Headers\":\n    GET /profile#UNAUTHORIZED:\n      response: \n        status: 401 \n        \n    GET /profile:\n      headers:\n        Authorization: Bearer asfgsgh-fasdddss\n      response: \n        status: 200 \n```\n\n\n### Validate response headers\n\n```yaml\n#%ATL 1.0\n\ntests:\n  \"Headers\":\n    PUT /bounce/headers:\n      response:\n        headers: \n          Access-Control-Allow-Headers: \"Authorization, X-Default-Header, X-Custom-Header\" # literal value\n```\n\n### Validate response content\n\n```yaml\n#%ATL 1.0\n\ntests:\n  \"Must validate response body\":\n    GET /text:\n      response:\n        body: \n          content-type: text/plain\n          is: \"Success\"\n          # \"is\" means equals. In this case the response is the text \"Success\"\n          \n    GET /json:\n      response:\n        body: \n          content-type: application/json\n          is: !!map { json: true }\n          # \"is\" means equals. In this case the response is the JSON {\"json\":true}\n    \n    GET /json/v1:\n      response:\n        body: \n          content-type: application/json\n          is: \n            json: true\n            # \"is\" means equals. In this case the response is the JSON {\"json\":true}\n            # this is the same as the previous example\n```\n\n### Validate response (partially)\n\n```yaml\n#%ATL 1.0\n\ntests:\n  \"Must validate response body\":\n    GET /json:\n      response:\n        body: \n          content-type: application/json\n          # In this case the response is the JSON { \"json\":true, \"a\": 1, \"b\": 2 }\n          matches:\n            - a: 1\n          # \"json\" and \"b\" properties will be ignored\n          \n          \n    GET /users:\n      response:\n        body: \n          content-type: application/json\n          # In this case the response is the JSON \n          # [ \n          #    { \"id\": 1, \"name\": \"Agu\" }, \n          #    { \"id\": 2, \"name\": \"Dan\" } \n          # ]\n          matches:\n            - \"[0].id\": 1\n            - \"[1].name\": Dan\n```\n\n## Execute in sequence. Obtain access token\n\n```yaml\n#%ATL 1.0\n\nvariables: # anything can be stored here\n  oauth:\n    accessToken: \"INVALID_TOKEN\"\n\ntests:\n  \"Access control by token, executed in sequence\":\n    GET /secured_by_token#should-be-unauthorized:\n      description: Must be unauthorized\n      queryParameters: \n        accessToken: !!variable oauth.accessToken\n      response:\n        status: 401\n\n    POST /get_access_token:\n      # the server responds { new_token: \"asd\" }\n      description: Obtain access token\n      response:\n        body:\n          take: # take \"new_token\" from response body\n            - new_token: !!variable oauth.accessToken\n\n    GET /secured_by_token:\n      description: Now the status must be 200 OK\n      queryParameters: \n        # use the access token obtained previously\n        accessToken: !!variable oauth.accessToken\n      response:\n        status: 200\n        body:\n          is:\n            success: true\n```\n\n## CRUD\n\n> This example shows how to create an asset, check that it exists, put new content on it and delete it. Then check 404 for the same asset.  \nAlso shows how use ENVIRONMENTS variables. ENV variables are stored on variables.ENV, can be accessed using `!!variable ENV.*`\n\n```yaml\n#%ATL 1.0\n\nvariables:\n  ENV:\n    csToken: Bearer <<YOU MUST DEFINE YOUR csToken ON ENV>>\n    organizationId: abc123\n  flow:\n    id: \"\"\n\ntests:\n  \"Project create and delete\":\n    POST /organizations/{orgId}/projects#create'first:\n      description: Create project\n      uriParameters:\n        orgId: !!variable ENV.organizationId\n      headers:\n        Authorization: !!variable ENV.csToken\n      request:\n        json:\n          name: RetrieveEmployeeFlow,\n          created: 06-06-06\n          updated: 06-06-06\n          environmentId: asd1f65dasf656\n          organizationId: !!variable ENV.organizationId\n      response:\n        status: 201\n        body:\n          # store the whole response (project) in projectNuevo\n          take: !!variable projectNuevo\n\n    GET /organizations/{orgId}/projects/{projectId}:\n      description: Check that the created project exists\n      uriParameters:\n        orgId: !!variable ENV.organizationId\n        projectId: !!variable projectNuevo.id\n      headers:\n        Authorization: !!variable ENV.csToken\n      response:\n        status: 200\n        body:\n          matches:\n            - id: !!variable projectNuevo.id\n\n    PUT /organizations/{orgId}/projects/{projectId}:\n      uriParameters:\n        orgId: !!variable ENV.organizationId\n        projectId: !!variable projectNuevo.id\n      headers:\n        Authorization: !!variable ENV.csToken\n      request:\n        json: !!variable projectNuevo\n      response:\n       status: 200\n        body:\n          matches:\n            id: !!variable projectNuevo.id\n\n    DELETE /organizations/{orgId}/projects/{projectId}:\n      uriParameters:\n        orgId: !!variable ENV.organizationId\n        projectId: !!variable projectNuevo.id\n      headers:\n        Authorization: !!variable ENV.csToken\n      response:\n        status: 200\n\n    GET /organizations/{orgId}/projects/{projectId}#mustn't exists:\n      uriParameters:\n        orgId: !!variable ENV.organizationId\n        projectId: !!variable projectNuevo.id\n      headers:\n        Authorization: !!variable ENV.csToken\n      response:\n        status: 404\n\n```\n\n\n\n[repo-url]:https://github.com/mulesoft/http-bat\n[logo-url]:http://emojipedia-us.s3.amazonaws.com/cache/01/de/01de435caff4774e3ca70eb3b541e131.png\n[npm-image]:https://img.shields.io/npm/v/http-bat.svg?style=flat\n[npm-url]: https://npmjs.org/package/http-bat\n[downloads-image]:https://img.shields.io/npm/dt/http-bat.svg?style=flat\n[travis-image]: https://travis-ci.com/mulesoft/http-bat.svg?token=hy6C1oiNtXJSRHiv59vT&branch=develop&style=flat\n[travis-url]: https://travis-ci.com/mulesoft/http-bat\n[coveralls-image]: https://coveralls.io/repos/github/mulesoft/http-bat/badge.svg?branch=develop&t=XkMQnj&style=flat\n[coveralls-url]: https://coveralls.io/r/mulesoft/http-bat?branch=develop\n","created":"2016-05-01T20:43:22.978Z","modified":"2017-06-10T21:10:50.278Z","lastPublisher":{"name":"menduz","email":"agustin.mz.92@gmail.com"},"owners":[{"name":"menduz","email":"agustin.mz.92@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-bat","_nodeVersion":"4.8.3","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/http-bat-2.0.30.tgz_1497129048915_0.6573498076759279"},"_npmUser":{"name":"menduz","email":"agustin.mz.92@gmail.com"},"_npmVersion":"2.15.11","_rev":"12-e3eceec6d4ff90e3cd1162a9ddc218f3","_shasum":"6f1cf1d7ca6102078cf20132f8f0613692370fd8","author":{"name":"Agustin Mendez @ Mulesoft, Inc.","email":"agustin.mendez@mulesoft.com","url":"https://www.mulesoft.com"},"bugs":{"url":"https://github.com/mulesoft/http-bat/issues"},"directories":{},"dist-tags":{"develop":"2.0.0-alpha.27","latest":"2.0.30"},"dist":{"shasum":"6f1cf1d7ca6102078cf20132f8f0613692370fd8","tarball":"https://registry.npmjs.org/http-bat/-/http-bat-2.0.30.tgz"},"maintainers":[{"name":"menduz","email":"agustin.mz.92@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-10T21:10:50.278Z","created":"2016-05-01T20:43:22.978Z","0.1.0-alpha.0":"2016-05-01T20:43:22.978Z","0.1.5":"2016-05-03T19:04:09.601Z","0.1.6":"2016-05-04T19:04:53.746Z","0.2.0":"2016-05-05T13:58:39.921Z","0.2.1":"2016-05-05T21:51:13.379Z","0.2.2":"2016-05-05T21:52:20.715Z","0.3.0":"2016-05-06T16:39:58.543Z","0.3.1":"2016-05-06T16:46:32.508Z","0.4.0":"2016-05-09T20:03:09.866Z","0.5.0":"2016-05-25T18:49:32.589Z","0.5.1":"2016-05-25T19:37:42.142Z","1.0.0":"2016-07-07T17:59:28.293Z","1.0.2":"2016-07-07T19:00:26.306Z","1.0.5":"2016-07-07T21:19:15.780Z","1.0.6":"2016-07-11T18:40:56.761Z","1.1.0":"2016-07-20T22:29:10.633Z","1.1.1":"2016-07-21T19:33:10.853Z","1.2.0":"2016-07-24T21:59:28.189Z","1.2.1":"2016-07-25T21:44:52.317Z","1.2.3":"2016-07-25T22:04:36.070Z","1.3.0":"2016-07-26T22:27:22.297Z","2.0.0-alpha.1":"2016-08-05T15:29:52.424Z","2.0.0-alpha.2":"2016-08-05T16:10:22.075Z","2.0.0-alpha.3":"2016-08-08T18:14:22.371Z","2.0.0-alpha.4":"2016-08-09T13:46:47.346Z","2.0.0-alpha.5":"2016-08-09T20:19:31.806Z","2.0.0-alpha.7":"2016-08-11T18:13:50.849Z","2.0.0-alpha.8":"2016-08-13T15:11:07.384Z","2.0.0-alpha.9":"2016-08-15T20:55:55.546Z","2.0.0-alpha.10":"2016-08-17T02:27:12.410Z","2.0.0-alpha.11":"2016-08-17T20:45:20.916Z","2.0.0-alpha.12":"2016-08-19T02:19:05.206Z","2.0.0-alpha.13":"2016-08-21T00:49:49.924Z","2.0.0-alpha.14":"2016-08-22T15:25:18.035Z","2.0.0-alpha.15":"2016-08-23T00:36:06.753Z","2.0.0-alpha.16":"2016-08-23T01:08:43.709Z","2.0.0-alpha.17":"2016-08-23T22:38:25.950Z","2.0.0-alpha.18":"2016-11-01T16:11:00.849Z","2.0.0-alpha.19":"2016-12-15T19:38:17.182Z","2.0.0-alpha.21":"2016-12-26T14:57:39.974Z","2.0.0-alpha.22":"2017-01-16T19:00:13.455Z","2.0.0-alpha.23":"2017-01-16T19:37:45.117Z","2.0.0-alpha.24":"2017-01-31T20:49:28.215Z","2.0.0-alpha.25":"2017-03-31T20:41:55.773Z","2.0.0-alpha.26":"2017-04-12T18:51:18.778Z","2.0.0-alpha.27":"2017-04-14T19:38:45.725Z","2.0.29":"2017-05-04T18:43:26.550Z","2.0.30":"2017-06-10T21:10:50.278Z"}}}