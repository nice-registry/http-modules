{"name":"lambda-proxy","version":"0.0.6","description":"An HTTP proxy that invokes AWS Lambda functions.","main":"lib/lambda-proxy.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/digital-sailors/lambda-proxy","keywords":["http","proxy","aws","lambda","API","Gateway","nginx","apache","webserver","invoke","serverless","cloud"],"homepage":"https://github.com/digital-sailors/lambda-proxy#readme","license":"Apache-2.0","bin":{"lambda-proxy":"./lib/lambda-proxy.js"},"preferGlobal":true,"dependencies":{"aws-sdk":"^2.4.6"},"config":{"port":"8080"},"engines":{"node":">=4.4.4"},"gitHead":"df612fb2ef8b531745fc3913dedf198c28495a4f","versions":[{"number":"0.0.1","date":"2016-07-08T07:37:08.622Z"},{"number":"0.0.2","date":"2016-07-08T10:27:24.405Z"},{"number":"0.0.3","date":"2016-07-11T12:20:22.389Z"},{"number":"0.0.4","date":"2016-07-11T15:36:58.273Z"},{"number":"0.0.5","date":"2016-07-13T09:56:58.541Z"},{"number":"0.0.6","date":"2016-10-24T09:35:53.561Z"}],"readme":"# lambda-proxy\n\n__NOTE: A recent API Gateway update has improved the usage of Lambda functions from a web context considerably. Therefore this code is no longer maintained. We recommend switching to API Gateway to invoke Lambda functions from a web context.__\n\nA HTTP proxy that invokes AWS Lambda functions.\n\nLambda Proxy makes it easy to invoke Lambda Functions directly from your webserver (Nginx, Apache, etc.). It implements the [HTTP Function Protocol](https://github.com/digital-sailors/http-function-protocol).\n\nSee the [Tutorial](TUTORIAL.md) for an end-to-end example.\n\n## Installing\n\nThe preferred way to install the Lambda Proxy is to use the\n[npm](http://npmjs.org) package manager for Node.js. Simply type the following\ninto a terminal window:\n\n```sh\nsudo npm install lambda-proxy -g\n```\n\n## Running\n\nRun the Lambda Proxy:\n\n```sh\nlambda-proxy\n```\n\nRun the Lambda Proxy in background:\n\n```sh\nlambda-proxy &\n```\n\n## Configuration\n\n### Port\n\nBy default, Lambda Proxy listens on port 8080. To change that, use the `-port` flag:\n\n```sh\nlambda-proxy -port 8081 &\n```\n### Credentials\nLambda Proxy requires a set of AWS credentials that are authorized to invoke the Lambda functions.\n\n#### With the Shared Credentials File\nThe easiest way to provide these credentials is via a Shared Credentials File. This file needs to be located in your home directory: `~/.aws/credentials`. It contains the credentials:\n\n```\n[default]\naws_access_key_id = <YOUR_ACCESS_KEY_ID>\naws_secret_access_key = <YOUR_SECRET_ACCESS_KEY>\n```\n\nMore information can be found in the [AWS documentation](http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/node-configuring.html#Credentials_from_the_Shared_Credentials_File_____aws_credentials_)\n\n#### With environment variables\n\nYou can set your credentials in the environment variables\n`AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.\n\nMore information can be found in the [AWS documentation](http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/node-configuring.html#Credentials_from_Environment_Variables)\n\nAll other configuration is sent with the individual requests.\n\n### Invocation\n\nA Lambda function is invoked, when an HTTP-request is sent to the Lambda Proxy. Configuration for the invocation is sent via HTTP headers.\n\n#### Lambda function\n##### Lambda function name\nThe HTTP header `lambda-proxy-function` defines the Lambda function to invoke. You can specify a function name (e.g. `lambda-proxy-echo`) or you can specify an Amazon Resource Name (ARN) of the function (e.g. `arn:aws:lambda:eu-west-1:account-id:function:lambda-proxy-echo`).\n\n##### Qualifier\nThe qualifier for the Lambda function is set via the `lambda-proxy-qualifier` HTTP header. If this header is not present, empty or set to `$LATEST`, the latest version of the Lambda function is invoked. If it contains a version number or an alias for a Lambda function, the indicated Lambda function is invoked.\n\n##### Region\nThe region in which the Lambda function is defined is indicated with the HTTP header `lambda-proxy-region`.\n\n### Meta-Information for the request\nThe Lambda function needs some meta information to handle the request, specifically the scheme and host that were used for the initial request. This allows the Lambda function for example to create correct absolute links.\n\n#### Scheme\nThe scheme is indicated with the `lambda-proxy-scheme` HTTP header.\n\n#### Host\nThe host is indicated with the `lambda-proxy-host` HTTP header.\n\n#### URL\nThe URL is taken directly from the request to the Lambda Proxy and does not need to be specifically configured.\n\n\n### Minimal Nginx configuration:\n```\nlocation /some/location/ {\n  proxy_set_header 'lambda-proxy-region' 'eu-west-1';\n  proxy_set_header 'lambda-proxy-function' 'lambda-proxy-echo';\n  proxy_set_header 'lambda-proxy-parameters' '';\n  proxy_set_header 'lambda-proxy-scheme' '$scheme';\n  proxy_set_header 'lambda-proxy-host' '$host';\n  proxy_pass http://localhost:8080;\n}\n```\n\nTo avoid unneccessary repetition, it is recommended to move the `proxy_set_header`-directives to the `server` context and use variables to overwrite values selectively:\n\n```\n  server {\n    set $lambdaregion 'eu-west-1';\n    set $lambdaqualifier '';\n    set $lambdaparameters '';\n\n    proxy_set_header 'lambda-proxy-region' '$lambdaregion';\n    proxy_set_header 'lambda-proxy-qualifier' '$lambdaqualifier';\n    proxy_set_header 'lambda-proxy-function' '$lambdafunction';\n    proxy_set_header 'lambda-proxy-parameters' '$lambdaparameters';\n    proxy_set_header 'lambda-proxy-scheme' '$scheme';\n    proxy_set_header 'lambda-proxy-host' '$host';\n\n    location /some/location {\n      set $lambdafunction 'lambda-proxy-echo';\n      proxy_pass http://localhost:8080;\n    }\n  }\n```\n\nNote: If you use an additional `proxy_set_header`-directive inside a `location`-block, nginx discards all `proxy_set_header`-directives defined outside of the `location`-block, therefore you need to repeat all of them in this case.\n\n### Extended Nginx configuration example\nThis configuration leverages more of the nginx configuration directives and also changes the request method and sets a custom body.\n```\nhttp {\n\n  upstream lambda-proxy {\n    server localhost:8080;\n  }\n\n  server {\n    set $lambdaregion 'eu-west-1';\n    set $lambdaqualifier '';\n    set $lambdaparameters '';\n\n    proxy_set_header 'lambda-proxy-region' '$lambdaregion';\n    proxy_set_header 'lambda-proxy-qualifier' '$lambdaqualifier';\n    proxy_set_header 'lambda-proxy-function' '$lambdafunction';\n    proxy_set_header 'lambda-proxy-parameters' '$lambdaparameters';\n    proxy_set_header 'lambda-proxy-scheme' '$scheme';\n    proxy_set_header 'lambda-proxy-host' '$host';\n\n    location /some/location {\n      set $lambdafunction 'lambda-proxy-echo';\n      proxy_pass http://lambda-proxy;\n    }\n\n    location /some/other/location {\n      set $lambdafunction 'lambda-proxy-echo';\n      set $lambdaqualifier 'PROD'; # the qualifier for the Lambda function, use an empty string '' for $LATEST (because $ can not get escaped in the nginx configuration)\n      set $lambdaparameters '{\"real_ip\": \"$realip_remote_addr\"}';\n      proxy_method POST; # switch the request to POST to send custom body\n      proxy_set_body '{ \"some\": \"json\" }'; # set a custom JSON body with nginx variables\n      proxy_pass http://lambda-proxy;\n    }\n  }\n}\n```\n\n### Minimal Apache configuration\nTBD\n\n## Lambda Input/Output structure\nThe Input/Output structure is defined in the [HTTP Function Protocol](https://github.com/digital-sailors/http-function-protocol).\n\n### Input: Lambda Event\nThe Lambda function is invoked with this data structure as the event.\n\n```JavaScript\n{\n  method: 'GET | POST | ...',\n  scheme: 'http | https | ...',\n  host: 'STRING_VALUE', // the originally requested host\n  url: 'STRING_VALUE', // the request url, starting with \"/\", eg. \"/some/url?with=parameter&s=attached\"\n  httpVersion: '1.0 | ...',\n  parameters: {\n    'STRING_VALUE': value, // 'name': value\n    /* more parameters */\n  },\n  headers: {\n    'STRING_VALUE': 'STRING_VALUE', // 'headername': 'headervalue'\n    /* more headers */\n  },\n  body: 'STRING_VALUE'\n}\n```\n\nThe difference between *headers*/*body* and *parameters* is that `headers` and `body` may contain unchecked content that a malicious client sent, whereas `parameters` represents content that was added by the server that invokes the Lambda function. In terms of responsibility, the Lambda function is responsible for securely parsing, sanitizing and handling `header` and `body` values. On the other hand the Lambda function can treat the value of `parameters` as having been scrutinized by the server that invokes the Lambda version.\n\nWhen the *body* is a JSON-Document, you must parse it yourself:\n\n```JavaScript\nJSON.parse(event.body);\n```\n\n### Output:\nThe Lambda Function must return a JSON document with this structure in the callback:\n\n```JavaScript\n{\n  status: Number, // a valid HTTP status code\n  headers: {\n    'STRING_VALUE': 'STRING_VALUE', // 'headername': 'headervalue'\n    /* more headers */\n  },\n  body: 'STRING_VALUE'\n}\n```\n\nIf you want to return an object as a JSON-document in the body, use `JSON.stringify':\n\n```JavaScript\n  body: JSON.stringify(object),\n```\n\n#### Example 1: Returning HTML\n```JavaScript\nconst result = {\n  status: 200,\n  headers: {'Content-Type': 'text/html'},\n  body: '<html><head><title>Title</title></head><body><h1>Body</h1></body></html>'\n};\ncallback(null, result);\n```\n#### Example 2: Returning JSON\n```JavaScript\nconst data = { key: 'value'};\nconst result = {\n  status: 200,\n  headers: {'Content-Type': 'text/json'},\n  body: JSON.stringify(data),\n};\ncallback(null, result);\n```\n\n#### Example 3: Errors\nIf the output from the Lambda function does not conform to the HTTP-Lambda Gateway Protocol, the response is an HTTP status code 500 with an error message in the body.\n\n## Why?\nInvoking AWS Lambda functions from an HTTP context currently requires using the AWS API Gateway. While the API Gateway is a good solution for REST-style APIs, its complex configuration makes it hard to use from a more document-oriented context.\nThis is a shame, because Lambda functions could become what PHP currently is: An easy way to add server-side scripting to websites in a serverless world.\n\nThe Lambda Proxy let's you skip the step of defining an API in API Gateway. Instead, you just proxy any HTTP request to the Lambda Proxy and it invokes the Lambda function for you. All configuration, e.g. which Lambda function to call, which AWS region to use etc. is configured in your webserver configuration. This removes any complexity between your webserver and the Lambda function.\n\n## Security\nThe Lambda Proxy opens a configurable port. Whoever can send HTTP requests to this port can invoke all Lambda functions that can be invoked with the supplied AWS credentials. Therefore it is probably not a good idea to expose this port to the internet. By default, the Lambda Proxy listens on port `8080` on `localhost`.\n\nSince the `parameters`-object is trusted by the Lambda function to not contain malicious content, the header `lambda-proxy-parameters` MUST be set inside the webserver to something save or to an empty string. Leaving it unset allows a malicious client to provide this header and set an arbitrary value.\n","starsCount":1,"created":"2016-07-08T07:37:08.622Z","modified":"2016-10-24T09:35:53.561Z","lastPublisher":{"name":"digitalkapitaen","email":"oliver.gutperl@digital-sailors.de"},"owners":[{"name":"digitalkapitaen","email":"oliver.gutperl@digital-sailors.de"}],"other":{"_attachments":{},"_from":".","_id":"lambda-proxy","_nodeVersion":"4.4.4","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/lambda-proxy-0.0.6.tgz_1477301751906_0.6842200474347919"},"_npmUser":{"name":"digitalkapitaen","email":"oliver.gutperl@digital-sailors.de"},"_npmVersion":"3.8.3","_rev":"2-ea65dda8bdef5cc1123f84d7f9ea1239","_shasum":"3142bb56f170d69429c80afe4b93ef8956006c9b","author":{"name":"DigitalSailors e.K.","url":"https://www.digital-sailors.de"},"bugs":{"url":"https://github.com/digital-sailors/lambda-proxy/issues"},"contributors":[{"name":"Oliver Gutperl","email":"oliver.gutperl@digital-sailors.de"}],"directories":{"lib":"lib"},"dist-tags":{"latest":"0.0.6"},"dist":{"shasum":"3142bb56f170d69429c80afe4b93ef8956006c9b","tarball":"http://registry.npmjs.org/lambda-proxy/-/lambda-proxy-0.0.6.tgz"},"maintainers":[{"name":"digitalkapitaen","email":"oliver.gutperl@digital-sailors.de"}],"readmeFilename":"README.md","time":{"modified":"2016-10-24T09:35:53.561Z","created":"2016-07-08T07:37:08.622Z","0.0.1":"2016-07-08T07:37:08.622Z","0.0.2":"2016-07-08T10:27:24.405Z","0.0.3":"2016-07-11T12:20:22.389Z","0.0.4":"2016-07-11T15:36:58.273Z","0.0.5":"2016-07-13T09:56:58.541Z","0.0.6":"2016-10-24T09:35:53.561Z"},"users":{"pahud":true}}}