{"name":"hyperprox","version":"2.3.1","description":"simple HTTP proxy based on hyperquest","main":"index.js","scripts":{"test":"node test.js"},"repository":"https://github.com/binocarlos/hyperprox","keywords":["http","proxy","hyperquest"],"license":"MIT","homepage":"https://github.com/binocarlos/hyperprox","devDependencies":{"concat-stream":"^1.4.6","tape":"^2.14.0","through2":"^0.6.0"},"dependencies":{"duplexify":"^3.1.0","hyperquest":"^0.3.0","through2":"^0.6.0"},"gitHead":"2dae5aface1e9008cd60e26f534001fcbb6461be","versions":[{"number":"0.2.0","date":"2014-08-06T21:38:34.312Z"},{"number":"1.0.0","date":"2014-08-06T21:45:11.811Z"},{"number":"1.1.0","date":"2014-08-07T15:55:45.170Z"},{"number":"1.1.1","date":"2014-08-07T17:16:55.671Z"},{"number":"2.0.0","date":"2014-08-08T17:16:05.627Z"},{"number":"2.1.0","date":"2014-08-09T12:33:27.486Z"},{"number":"2.2.0","date":"2014-08-09T21:07:53.741Z"},{"number":"2.3.0","date":"2014-10-06T10:28:19.110Z"},{"number":"2.3.1","date":"2015-12-23T17:39:17.048Z"}],"readme":"hyperprox\n---------\n\nsimple HTTP proxy based on [hyperquest](https://github.com/substack/hyperquest)\n\n## install\n\n```\n$ npm install hyperprox\n```\n\n## usage\nCreate a proxy by passing a function that will resolve what backend to use to the given request\n\n```js\nvar http = require(\"http\")\nvar hyperprox = require('hyperprox')\n\nvar backends = hyperprox(function(req){\n  // calculate the proxy destination\n  var port = req.url=='/a' ? 8081 : 8082\n  return 'http://127.0.0.1:' + port\n})\n\n// the front facing web server\nvar router = http.createServer(backends.handler())\n\nbackends.on('request', function(req, res){\n\t\n})\n\nbackends.on('route', function(req, address){\n\t\n})\n\nvar serverA = http.createServer(function(req, res){\n  res.end('serverA')\n})\n\nvar serverB = http.createServer(function(req, res){\n  res.end('serverB')\n})\n\nrouter.listen(8080)\nserverA.listen(8081)\nserverB.listen(8082)\n```\n\n## streams\n\nWe can generate a duplex stream for a request that will auto-route - this lets us filter the input and output:\n\n```js\nvar through = require('through2')\nvar backends = hyperprox(function(req){\n  var port = req.url=='/a' ? 8081 : 8082\n  return 'http://127.0.0.1:' + port\n})\n\nvar router = http.createServer(function(req, res){\n\tvar proxy = backends.duplex(req, res)\n\n\t// filter the request body\n\tvar inputFilter = through(function(chunk, enc, next){\n\t\tthis.push(chunk.toString() + 'a')\n\t\tnext()\n\t})\n\n\t// filter the response body\n\tvar outputFilter = through(function(chunk, enc, next){\n\t\tthis.push(chunk.toUpperCase())\n\t\tnext()\n\t})\n\n\t// REQUEST -> INPUT FILTER -> PROXY -> OUTPUT FILTER -> RESPONSE\n\treq.pipe(inputFilter).pipe(proxy).pipe(outputFilter).pipe(res)\n})\n```\n\n## async routing\n\nYour routing function can be asynchronous - this means you can ask an external service for routing data:\n\nIf you define `next` in the parameters then it will be treated as an async router.\n\n```js\nvar proxy = hyperprox(function(req, next){\n\n\tloadRoute(req.url, function(err, address){\n\t\tnext(err, address)\n\t})\n\t\n})\n```\n\n## api\n\n#### `hyperprox.proxy(req, res, address, [input, output])`\n\nA direct proxy function that will send req via address to res\n\nInput and output are optional override streams to replace req and res\n\n#### `var backends = hyperprox(function(req, next){})`\n\nCreate a new proxy by passing a function that will resolve the backend address and pass it to the 'next' function\n\n#### `backends.handler()`\n\nReturn a `function(req,res){}` that will proxy requests using the routing function\n\n#### `backends.proxy(req, res, address, [input, output])`\n\nA direct proxy that will pipe req via address and to res\n\nIf input and output are provided - they will be used as the streams rather than req and res\n\n#### `backends.resolve(req, done)`\n\nThe resolving function that goes via the user supplied function\n\n#### `backends.duplex(req, res)`\n\nReturn a duplex stream going through the backend - you can write it to the original request / response how you want:\n\n```js\nvar duplex = backends.duplex(req, res)\nreq.pipe(duplex).pipe(res)\n```\n\nIf there is an error with routing the response will be set to 500 and the backend skipped\n\n## events\n\n#### `backends.on('request', function(req, res){})`\n\nwhen a request arrives at the proxy\n\n#### `backends.on('route', function(req, address){})`\n\nOnce a routing decision has been made\n\n## license\n\nMIT","created":"2014-08-06T21:38:34.312Z","modified":"2015-12-23T17:39:17.048Z","lastPublisher":{"name":"binocarlos","email":"kaiyadavenport@gmail.com"},"owners":[{"name":"binocarlos","email":"kaiyadavenport@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"hyperprox","_nodeVersion":"1.1.0","_npmUser":{"name":"binocarlos","email":"kaiyadavenport@gmail.com"},"_npmVersion":"2.4.1","_rev":"1-c471ffe7f0a6a6f820ba8174ba762b0e","_shasum":"b1f4440b5f649be366207db70a493af46637db76","author":{"name":"Kai Davenport"},"bugs":{"url":"https://github.com/binocarlos/hyperprox/issues"},"directories":{},"dist-tags":{"latest":"2.3.1"},"dist":{"shasum":"b1f4440b5f649be366207db70a493af46637db76","tarball":"http://registry.npmjs.org/hyperprox/-/hyperprox-2.3.1.tgz"},"maintainers":[{"name":"binocarlos","email":"kaiyadavenport@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-12-23T17:39:17.048Z","created":"2014-08-06T21:38:34.312Z","0.2.0":"2014-08-06T21:38:34.312Z","1.0.0":"2014-08-06T21:45:11.811Z","1.1.0":"2014-08-07T15:55:45.170Z","1.1.1":"2014-08-07T17:16:55.671Z","2.0.0":"2014-08-08T17:16:05.627Z","2.1.0":"2014-08-09T12:33:27.486Z","2.2.0":"2014-08-09T21:07:53.741Z","2.3.0":"2014-10-06T10:28:19.110Z","2.3.1":"2015-12-23T17:39:17.048Z"}}}