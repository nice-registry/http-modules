{"name":"http-party","version":"2.0.0","description":"Run multiple http servers that share a port file and does automatic failover if the server listening on the port crashes","repository":"https://github.com/mafintosh/http-party","dependencies":{"freeport":"^1.0.2","once":"^1.3.0"},"devDependencies":{"connections":"^1.0.0","tape":"^2.13.4"},"scripts":{"test":"tape test.js"},"gitHead":"583e77e06b2340ad478f81e18bf7cca3e403e2ca","homepage":"https://github.com/mafintosh/http-party","versions":[{"number":"1.0.0","date":"2014-04-15T23:53:58.577Z"},{"number":"1.1.0","date":"2014-04-16T06:44:04.168Z"},{"number":"1.2.0","date":"2014-07-28T12:36:18.353Z"},{"number":"2.0.0","date":"2014-07-28T15:18:07.943Z"}],"readme":"# http-party\n\nSimilar in scope to [level-party](https://github.com/substack/level-party) but for http.\nAllows you to run multiple http servers that share a port file and does automatic failover if\nthe server listening on the port crashes.\n\n```\nnpm install http-party\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/http-party.svg?style=flat)](http://travis-ci.org/mafintosh/http-party)\n![dat](http://img.shields.io/badge/Development%20sponsored%20by-dat-green.svg?style=flat)\n\n## Usage\n\n``` js\nvar party = require('http-party');\n\nparty('./PORT', // './PORT' is the port file the servers will use to coordinate.\n  function onserver(server) {\n    server.on('request', function(request, response) {\n      response.end('hello world from '+pid);\n    })\n  },\n  function ready(err, port) {\n    console.log('Someone is listening on', port);\n  }\n);\n```\n\nThe PORT file defaults to `./PORT`.\nTry running the above example in a folder and spawn multiple processes.\n\n```\ncd some-dir\nnode example.js &\nnode example.js &\nnode example.js &\nnode example.js &\nnode example.js\n```\n\nThe processes should print the same port. Try curling to that port\n\n```\ncurl http://127.0.0.1:PORT\n```\n\nThis should print the pid of a process. Try killing that process.\n\n```\nkill PID\n```\n\nIf you curl the same url again one of the other processes will be listening instead!\nYou can always cat the `PORT` file to figure out which port is being used.\nAlso since we use a regular file instead of unix sockets this should also work on windows!\n\nIf you already have a server just pass than instead of the `onserver` function\n\n``` js\nvar server = http.createServer(function(req, res) {\n  res.end('hello world\\n')\n})\n\nserver.on('listening', function() {\n  console.log('Server has started')\n})\n\nparty('./PORT', server, function(err, port) {\n  console.log('Someone is listening on', port);\n})\n```\n\n## License\n\nMIT\n","starsCount":2,"created":"2014-04-15T23:53:58.577Z","modified":"2014-07-28T15:18:07.943Z","lastPublisher":{"name":"mafintosh","email":"mathiasbuus@gmail.com"},"owners":[{"name":"mafintosh","email":"mathiasbuus@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-party","_npmUser":{"name":"mafintosh","email":"mathiasbuus@gmail.com"},"_npmVersion":"1.4.21","_rev":"1-848f60b8d7257e1eda868dd119c747e0","_shasum":"ceed4fcd05d20b0e95798f714f3b2242cf1c4552","bugs":{"url":"https://github.com/mafintosh/http-party/issues"},"directories":{},"dist-tags":{"latest":"2.0.0"},"dist":{"shasum":"ceed4fcd05d20b0e95798f714f3b2242cf1c4552","tarball":"http://registry.npmjs.org/http-party/-/http-party-2.0.0.tgz"},"maintainers":[{"name":"mafintosh","email":"mathiasbuus@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-07-28T15:18:07.943Z","created":"2014-04-15T23:53:58.577Z","1.0.0":"2014-04-15T23:53:58.577Z","1.1.0":"2014-04-16T06:44:04.168Z","1.2.0":"2014-07-28T12:36:18.353Z","2.0.0":"2014-07-28T15:18:07.943Z"},"users":{"tunnckocore":true,"ryanj":true}}}