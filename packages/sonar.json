{"name":"sonar","version":"0.0.0","description":"HTTP request simulation tools.","main":"lib/sonar.js","scripts":{"coverage":"NODE_ENV=test chasis coverage","pretest":"chasis lint","test":"NODE_ENV=test chasis test"},"repository":"https://github.com/jagoda/sonar","license":"MIT","dependencies":{"connect":"~2.7.3","jsdom":"~0.5.3"},"devDependencies":{"chai":"~1.5.0","chasis":"0.0.1","express":"~3.1.0"},"readme":"sonar\n=====\n\nSonar is a test tool for HTTP server instances in NodeJS. Sonar can be used with\nmost unit test frameworks to test [native HTTP server instances][1],\n[Connect][2] instances, and [Express][3] instances -- all without having to\ncall `listen`.\n\n## Basic Usage\n\n    npm install sonar\n\nSonar works by wrapping a handler or application instance and exposing a simple\nHTTP API for generating sythentic request/response objects. By default, Sonar\nwill capture all resulting response data and place it in the `body` attribute\nof the response. HTML responses are parsed using [jsdom][4] with \"jQueryify\"\nsupport for DOM navigation. For example, a simple test of the page title might\nlook like:\n\n    sonar(app).get(\"/page\", function (error, response) {\n        var title = response.body.$('title').text();\n        \n        expect(title).to.equal(\"Page Title\");\n    });\n\nSimilarly, Sonar will automatically parse JSON responses to objects and will\ngather all other responses into the `body` attribute as text.\n\n## Added Perks\n\nWhen run with [Cover][6], Sonar will add the ability to include coverage reports\nof your front-end code right along side your backend code. There's nothing to do\nother than invoke your test cases with [Cover][6].\n\n**NOTE:** currently only external script dependencies are instrumented. Inline\nscripts will not be covered and will not appear in the coverage report.\n\n## Usage Details\n\n### sonar(application, [options])\n\n + **application** - the application/handler to simulate requests to.\n + **options** - _Optional_. Configuration options for the wrapper.\n\nCreates a new `sonar` instance by wrapping an application or handler. The\nfollowing options are available:\n\n + **parseBody** - _Defaults to true_. When `true`, Sonar will buffer and\n    attempt to parse the response contents based on the response content type.\n    If set to `false`, the request callback is responsible for calling\n    `response.on(\"data\", . . .)` and `response.on(\"end\", . . .)` itself.\n + **plugins** - An array of jQuery plugins to use with the response. See\n    `sonar.plugin` for more information.\n\n### sonar.get(path, [headers], callback)\n### sonar.post(path, [headers], callback)\n### sonar.put(path, [headers], callback)\n### sonar.delete(path, [headers], callback)\n\n + **path** - the path to simulate a request to.\n + **headers** - _Optional_. A hash of headers to add to the request.\n + **callback** - called when the request has been processed. The callback is\n    passed two arguments, `(error, response)`.\n\nSimulates a request to the handler. Returns a request object similar to\n[http.IncomingMessage][5].\n\n### sonar.json\n\nProvides a covenience API for sending JSON payloads. This API is exactly the\nsame as the normal Sonar API except that it will automatically set the\n`Content-Type` header to `application/json` and will add a `send` method to\nthe returned `Request` object. The send method takes an object to be sent\n(this will automatically be stringified). For example:\n\n    var ping = sonar(app).json.post(\"/path\", function (error, response) {\n        . . .\n    });\n    ping.send({ hello: \"world\" });\n\n### sonar.plugin(implementation)\n\n + **implementation** - a function defining a custom jQuery plugin. The function\n    should expect the global jQuery object as its only argument.\n\nDefines a custom plugin to add to the jQuery API on the response object. This\nis a useful way to define custom test helpers. Returns a chainable reference to\nthe `sonar` instance.\n\n## For the Slightly More Adventurous\n\n`Request` and `Response` objects can be constructed and passed to handler\ninstances directly if desired. For example:\n\n    var request  = new Request(\"/path\"),\n        response = new Response(request);\n    \n    response.setEncoding(\"utf-8\");\n    response.on(\"data\", function (data) { console.log(data); });\n    app(request, response);\n    \n### sonar.Request([method], [path], [httpVersion])\n\n + **method** - _Defaults to \"GET\"_. The HTTP request method.\n + **path** - _Defaults to \"/\"_. The path to request.\n + **httpVersion** - _Defaults to \"1.1\"_. The HTTP protocol version.\n\n### sonar.Response(request)\n\n + **request** - The request to be responded to.\n\n[1]: http://nodejs.org/api/http.html#http_http_createserver_requestlistener \"HTTP Server\"\n[2]: http://www.senchalabs.org/connect/ \"Connect\"\n[3]: http://expressjs.com/ \"Express\"\n[4]: https://github.com/tmpvar/jsdom \"jsdom\"\n[5]: http://nodejs.org/api/http.html#http_http_incomingmessage \"IncomingMessage\"\n[6]: https://github.com/itay/node-cover.git \"Cover\"\n","versions":[{"number":"0.0.0","date":"2013-05-16T20:49:12.834Z"}],"created":"2013-05-16T20:49:11.022Z","modified":"2013-05-16T20:49:12.834Z","lastPublisher":{"name":"jagoda","email":"jeffrey.jagoda@gmail.com"},"owners":[{"name":"jagoda","email":"jeffrey.jagoda@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"sonar","_npmUser":{"name":"jagoda","email":"jeffrey.jagoda@gmail.com"},"_npmVersion":"1.2.18","_rev":"1-2cc2d1ca2eeb6f87ef2cd1c48549fd9a","author":{"name":"Jeff Jagoda","email":"jeffrey.jagoda@gmail.com"},"directories":{},"dist-tags":{"latest":"0.0.0"},"dist":{"shasum":"3dbab2738b36e8420924f2d07c803b512da331bf","tarball":"http://registry.npmjs.org/sonar/-/sonar-0.0.0.tgz"},"maintainers":[{"name":"jagoda","email":"jeffrey.jagoda@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2013-05-16T20:49:12.834Z","created":"2013-05-16T20:49:11.022Z","0.0.0":"2013-05-16T20:49:12.834Z"}}}