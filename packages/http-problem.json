{"name":"http-problem","version":"0.3.1","description":"HTTP Problem","main":"index.js","scripts":{"test":"mocha test/test"},"license":"Apache v2.0","repository":"https://github.com/jasnell/http-problem","devDependencies":{"express":"^4.13.3","mocha":"^2.3.2","request":"^2.62.0"},"dependencies":{"http-status":"^0.2.3"},"gitHead":"ade64c1723aef9743dc96ca201f3abf250f6ab06","homepage":"https://github.com/jasnell/http-problem#readme","versions":[{"number":"0.0.1","date":"2015-02-04T04:29:57.461Z"},{"number":"0.0.2","date":"2015-02-04T16:38:52.904Z"},{"number":"0.1.0","date":"2015-07-29T00:16:35.727Z"},{"number":"0.2.0","date":"2015-09-17T13:10:20.648Z"},{"number":"0.3.1","date":"2016-10-18T21:59:33.756Z"}],"readme":"# HTTP-PROBLEM\n\nProvides a simple implementation of the HTTP Problem Spec (JSON format only).\n\nSee: https://tools.ietf.org/html/draft-ietf-appsawg-http-problem\n\nNote: Use v0.1.0 for Node v0.12.x. With v0.2.0, the code starts to make use of\nnewer ES6 features.\n\n```bash\nnpm install http-problem\n```\n\nNothing really all that fancy here. There are a few ways to create a problem object:\n\nThe following creates a simple default problem for an HTTP status code\n```javascript\nvar Problem = require('http-problem');\nvar badrequest = Problem.BADREQUEST.raise();\nthrow badrequest;\n\n```\n\nYou can define then throw your own problem types:\n```javascript\n\nvar NoCreditType = new Problem.Type(\n  'http://example.com/probs/out-of-credit',\n  'You do not have enough credit.',\n  {status:400});\n\nNoCreditType.throw({\n  detail: 'Your current balance is 30, but that costs 50.',\n  instance: 'http://example.net/account/12345/msgs/abc',\n  balance: 30,\n  accounts: [\n    'http://example.net/account/12345',\n    'http://example.net/account/67890']\n});\n```\n\nStandard connect middleware is provided. The middleware intercepts Problem\nobjects thrown as exceptions and serializes them appropriately in the HTTP\nresponse.\n\n```javascript\nvar express = require('express');\nvar server = express();\n\nvar router = express.Router();\nrouter.get('/', function(req,res) {\n  Problem.GONE.throw();\n});\nrouter.use(Problem.middleware);\nserver.use('/',router).listen(8888);\n```\n\nUse the `problem.wrap` method to parse out a received problem:\n\n```javascript\nvar Problem = require('http-problem');\n\nvar obj = {\n  type: 'http://example.org',\n  status: 400\n};\n\nvar problem = problem.wrap(obj);\n\n// or\nvar str = JSON.stringify(obj);\nproblem = problem.wrap(str); // wrap from string\n```\n\n## API\n\n### Constructor: `Problem([type][, options])`\n\nConstructor for new Problem instances\n\n * `type` - either a Problem.Type instance or string with an absolute URL. Defaults to `Problem.BLANK` if unspecified.\n   identifying the error\n * `options`\n   * `status` - HTTP Status Code\n   * `detail` - Human readable explanation of the problem\n     that is specific to this instance.\n   * `instance` - An Absolute URL identifying the specific\n     occurence of the problem.\n\n Additional extension properties may be included as values on the `options`. When passed, these will become constant\n values on the generated Problem object\n\n### Property: `<string> Problem.prototype.type`\n\nReturns an absolute URL identifying the Problem type.\n\n### Property: `<string> Problem.prototype.title`\n\nReturns the Problem title.\n\n### Property: `<number> Problem.prototype.status`\n\nReturns the HTTP Status code for this problem.\n\n### Property: `<string> Problem.prototype.detail`\n\nReturns a human readable explanation specific to this instance of the problem.\n\n### Property: `<string> Problem.prototype.instance`\n\nReturns an absolute URL identifying the specific occurence of the problem.\n\n### Method: `<void> Problem.prototype.send(res)`\n\nSends the Problem on the HTTP Response. The `res` parameter is\nassumed to be an Express-style response object. The implementation of the `send` method is:\n\n```\nfunction(res) {\n  var status = this.status || 400;\n  res.setHeader('Content-Type', 'application/problem+json');\n  res.status(status).json(this);\n};\n```\n\n### Class Method: `<constructor> Problem.create()`\n\nCreate a new Problem class, allowing you to create your own Problem subclasses.\n\n```\nvar MyProblem = Problem.create();\nvar myProblem = new MyProblem(Problem.BLANK);\nmyProblem.throw();\n```\n\n### Class Method: `<boolean> Problem.registerProblemType(type)`\n\nRegister a custom `Problem.Type`\n\n```\nvar NoCreditType =\n  new Problem.Type(\n    'http://example.com/probs/out-of-credit',\n    'You do not have enough credit.',\n    {status:400});\nProblem.registerProblemType(NoCreditType);\n```\n\n### Class Method: `<boolean> Problem.registerProblemType(uri[, title])`\n\nRegister a custom `Problem.Type`\n\n```\nProblem.registerProblemType(\n  'http://example.com/probs/out-of-credit',\n  'You do not have enough credit.');\n```\n\n### Class Method: `<Problem.Type> Problem.lookupProblemType(uri)`\n\nLookup a registered custom `Problem.Type`\n\n### Class Method: `<Problem.Type> Problem.forStatus(status)`\n\nLookup the `Problem.Type` for a specific HTTP status code\n\n### Class Method: `<Problem> Problem.wrap(obj)`\n\nWrap a JavaScript object as a Problem.\n\n### Class Method: `<Problem> Problem.wrap(str)`\n\nParse the JSON string and wrap the resulting object as a Problem.\n\n### Class Property: `<function> Problem.middleware`\n\nConnect style middleware that can be used to intercept Problems thrown\nas errors and serialize them correctly on an HTTP response.\n\n```javascript\nvar express = require('express');\nvar server = express();\n\nvar router = express.Router();\nrouter.get('/', function(req,res) {\n  Problem.GONE.throw();\n});\nrouter.use(Problem.middleware);\nserver.use('/',router).listen(8888);\n```\n\n### Constructor: `Problem.Type(url[, title][, options])`\n\nCreates a new `Problem.Type`.\n\n * `url` - The absolute URL identifying the problem type.\n * `title` - The common title of the proble.\n * `options` -\n   * `status` - The default HTTP status code for problems of\n     this type.\n   * `ins` - The instance constructor for problems of this\n     type.\n\n```\nvar MyType = new Problem.Type(\n  'http://example.org', 'MyProblem', {status:400});\nMyType.throw();\n```\n### Property: `<string> Problem.Type.prototype.type`\n\nThe absolute URL identifying the problem type.\n\n### Property: `<string> Problem.Type.prototype.title`\n\nThe common title of the problem type.\n\n### Property: `<number> Problem.Type.prototype.status`\n\nThe default HTTP status code for problems of this type.\n\n### Method: `<void> Problem.Type.prototype.throw([options])`\n\nCreate a new instance of this problem type and throw it as an\nError. The `options` argument is the same as the `options` for\nthe `Problem` constructor.\n\n### Method: `<Problem> Problem.Type.prototype.raise([options])`\n\nCreate a new instance of this problem type and return it. The\n`options` argument is the same as the `options` for the\n`Problem` constructor.\n\n### Method: `<void> Problem.Type.prototype.reject([options])`\n\nCreate a new instance of this problem type and create a rejected\nPromise with the Error. The `options` argument is the same as the\n`options` for the `Problem` constructor.\n\n### Constants:\n\n *  `<Problem.Type> Problem.BLANK` - The `about:blank` Problem Type\n *  `<Problem.Type> Problem.OK`\n *  `<Problem.Type> Problem.CREATED`\n *  `<Problem.Type> Problem.ACCEPTED`\n *  `<Problem.Type> Problem.NON_AUTHORITATIVE_INFORMATION`\n *  `<Problem.Type> Problem.NO_CONTENT`\n *  `<Problem.Type> Problem.RESET_CONTENT`\n *  `<Problem.Type> Problem.PARTIAL_CONTENT`\n *  `<Problem.Type> Problem.MULTIPLE_CHOICES`\n *  `<Problem.Type> Problem.MOVED_PERMANENTLY`\n *  `<Problem.Type> Problem.FOUND`\n *  `<Problem.Type> Problem.SEE_OTHER`\n *  `<Problem.Type> Problem.NOT_MODIFIED`\n *  `<Problem.Type> Problem.USE_PROXY`\n *  `<Problem.Type> Problem.TEMPORARY_REDIRECT`\n *  `<Problem.Type> Problem.BAD_REQUEST`\n *  `<Problem.Type> Problem.UNAUTHORIZED`\n *  `<Problem.Type> Problem.PAYMENT_REQUIRED`\n *  `<Problem.Type> Problem.FORBIDDEN`\n *  `<Problem.Type> Problem.NOT_FOUND`\n *  `<Problem.Type> Problem.METHOD_NOT_ALLOWED`\n *  `<Problem.Type> Problem.NOT_ACCEPTABLE`\n *  `<Problem.Type> Problem.PROXY_AUTHENTICATION_REQUIRED`\n *  `<Problem.Type> Problem.REQUEST_TIMEOUT`\n *  `<Problem.Type> Problem.CONFLICT`\n *  `<Problem.Type> Problem.GONE`\n *  `<Problem.Type> Problem.LENGTH_REQUIRED`\n *  `<Problem.Type> Problem.PRECONDITION_FAILED`\n *  `<Problem.Type> Problem.REQUEST_ENTITY_TOO_LARGE`\n *  `<Problem.Type> Problem.REQUEST_URI_TOO_LONG`\n *  `<Problem.Type> Problem.UNSUPPORTED_MEDIA_TYPE`\n *  `<Problem.Type> Problem.REQUESTED_RANGE_NOT_SATISFIABLE`\n *  `<Problem.Type> Problem.EXPECTATION_FAILED`\n *  `<Problem.Type> Problem.UNPROCESSABLE_ENTITY`\n *  `<Problem.Type> Problem.TOO_MANY_REQUESTS`\n *  `<Problem.Type> Problem.INTERNAL_SERVER_ERROR`\n *  `<Problem.Type> Problem. NOT_IMPLEMENTED`\n *  `<Problem.Type> Problem.BAD_GATEWAY`\n *  `<Problem.Type> Problem.SERVICE_UNAVAILABLE`\n *  `<Problem.Type> Problem.GATEWAY_TIMEOUT`\n *  `<Problem.Type> Problem.HTTP_VERSION_NOT_SUPPORTED`\n","created":"2015-02-04T04:29:57.461Z","modified":"2016-10-18T21:59:33.756Z","lastPublisher":{"name":"jasnell","email":"jasnell@gmail.com"},"owners":[{"name":"jasnell","email":"jasnell@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-problem","_nodeVersion":"4.4.3","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/http-problem-0.3.1.tgz_1476827973521_0.9220246637705714"},"_npmUser":{"name":"jasnell","email":"jasnell@gmail.com"},"_npmVersion":"2.15.1","_rev":"1-8f89ecce7bc696e55ed13dcca1d77232","_shasum":"ca714430c81a93ea44592a6944d74237a13e2222","author":{"name":"James M Snell","email":"jasnell@gmail.com"},"bugs":{"url":"https://github.com/jasnell/http-problem/issues"},"directories":{},"dist-tags":{"latest":"0.3.1"},"dist":{"shasum":"ca714430c81a93ea44592a6944d74237a13e2222","tarball":"http://registry.npmjs.org/http-problem/-/http-problem-0.3.1.tgz"},"maintainers":[{"name":"jasnell","email":"jasnell@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-18T21:59:33.756Z","created":"2015-02-04T04:29:57.461Z","0.0.1":"2015-02-04T04:29:57.461Z","0.0.2":"2015-02-04T16:38:52.904Z","0.1.0":"2015-07-29T00:16:35.727Z","0.2.0":"2015-09-17T13:10:20.648Z","0.3.1":"2016-10-18T21:59:33.756Z"}}}