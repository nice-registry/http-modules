{"name":"http-stats","description":"Module for benchmarking HTTP servers with support for metrics such as response time, requests per second and CPU and memory usage. Generates friendly HTML reports and offers both a command line interface and a JavaScript API.","repository":"https://github.com/patrick-steele-idem/http-stats","main":"lib/index.js","scripts":{"test":"mocha --ui bdd --reporter spec ./test && node_modules/.bin/jshint lib"},"bin":{"http-stats":"bin/http-stats"},"keywords":["http","performance","stats","server","graph","load testing","capacity planning"],"devDependencies":{"mocha":"~1.15.1","chai":"~1.8.1","jshint":"~2.3.0","express":"^4.2.0"},"license":"MIT","publishConfig":{"registry":"https://registry.npmjs.org/"},"dependencies":{"async":"^0.8.0","jquery":"^2.1.0","jsonminify":"^0.2.3","marko":"^3.0.3","measured":"^1.1.0","mkdirp":"^0.5.0","raptor-args":"^1.0.0","shortstop":"^1.0.0","usage":"^0.7.1"},"version":"2.0.0","gitHead":"0bb9fd733f451567d4c4e9efc8d99203d48f4b0b","homepage":"https://github.com/patrick-steele-idem/http-stats#readme","versions":[{"number":"0.1.0-beta","date":"2014-05-20T20:55:46.788Z"},{"number":"1.0.0","date":"2015-02-11T22:30:33.113Z"},{"number":"1.0.1","date":"2015-02-12T19:54:23.012Z"},{"number":"1.0.2","date":"2016-06-29T21:41:44.452Z"},{"number":"2.0.0","date":"2016-06-29T22:04:12.335Z"}],"readme":"http-stats\n==========\nSimple tool for load testing an HTTP server that allows for increasing load to be applied over time. This module provides support for collecting various statistics, including requests per second, response time, CPU and memory usage. Resulting statistics can be saved to disk as a JSON file or written to an HTML report with graphs.\n\n# Installation\n\nTo install the command line tool:\n\n```bash\nnpm install http-stats --global\n```\n\nAlternatively, the JavaScript module can be installed into a project:\n\n```bash\nnpm install http-stats --save\n```\n\n\n# Usage\n\n## Command Line Interface\n\n```bash\nhttp-stats --url http://localhost:8080 -n 100 --begin-concurrency 1 --end-concurrency 50 --pids 1234 1235 --report-dir report\n```\n\nAlternatively, all of the configuration can be put into a configuration file:\n\n```bash\nhttp-stats --config my-config.json\n```\n\nExample contents of `my-config.json`:\n\n```json\n{\n    \"url\": \"http://localhost:8080\",\n    \"beginConcurrency\": 1,\n    \"endConcurrency\": 50,\n    \"stepRequests\": 100,\n    \"pids\": [1234, 1235],\n    \"report\": {\n        \"outputDir\": \"path:./report\"\n    }\n}\n```\n\n## JavaScript API\n\nAlternatively, the JavaScript API can be used to collect statistics as shown in the following sample code:\n\n```javascript\nvar httpStats = require('http-stats');\n\nhttpStats.measure({\n         url: 'http://localhost:8080',\n         beginConcurrency: 1,\n         endConcurrency: 50,\n         stepRequests: 100,\n         pids: [1234, 1235],\n         report: {\n             outputDir: require('path').join(__dirname, 'report')\n         }\n    }, function(err, results) {\n        // Do something with the resulting data\n    });\n```\n\n## Sample Statistics\n\n```json\n{\n    \"cpuAvailable\": true,\n    \"memoryAvailable\": true,\n    \"steps\": [\n        {\n            \"concurrency\": 1,\n            \"stats\": {\n                \"responseTime\": {\n                    \"min\": 11.562785029411316,\n                    \"max\": 19.471349954605103,\n                    \"sum\": 1358.6313557624817,\n                    \"variance\": 2.64784231895231,\n                    \"mean\": 13.586313557624816,\n                    \"stddev\": 1.627219198188219,\n                    \"count\": 100,\n                    \"median\": 13.028658986091614,\n                    \"p75\": 14.24703973531723,\n                    \"p95\": 16.65775092244148,\n                    \"p99\": 19.463981754779812,\n                    \"p999\": 19.471349954605103\n                },\n                \"requestsPerSecond\": {\n                    \"mean\": 73.32546082534017,\n                    \"count\": 100,\n                    \"currentRate\": 73.32433734563027,\n                    \"1MinuteRate\": 0,\n                    \"5MinuteRate\": 0,\n                    \"15MinuteRate\": 0\n                },\n                \"usage\": [\n                    {\n                        \"pid\": \"33062\",\n                        \"cpu\": {\n                            \"min\": 0,\n                            \"max\": 0.5,\n                            \"sum\": 11.199999999999989,\n                            \"variance\": 0.022248995983935746,\n                            \"mean\": 0.1333333333333332,\n                            \"stddev\": 0.14916097339430226,\n                            \"count\": 84,\n                            \"median\": 0.1,\n                            \"p75\": 0.2,\n                            \"p95\": 0.5,\n                            \"p99\": 0.5,\n                            \"p999\": 0.5\n                        },\n                        \"memory\": {\n                            \"min\": 68.20703125,\n                            \"max\": 68.20703125,\n                            \"sum\": 5797.59765625,\n                            \"variance\": 0,\n                            \"mean\": 68.20703125,\n                            \"stddev\": 0,\n                            \"count\": 85,\n                            \"median\": 68.20703125,\n                            \"p75\": 68.20703125,\n                            \"p95\": 68.20703125,\n                            \"p99\": 68.20703125,\n                            \"p999\": 68.20703125\n                        }\n                    }\n                ]\n            }\n        },\n        {\n            \"concurrency\": 2,\n            \"stats\": {\n                \"responseTime\": {\n                    \"min\": 11.659276962280273,\n                    \"max\": 21.81683897972107,\n                    \"sum\": 1383.8951340913773,\n                    \"variance\": 3.2013560905275846,\n                    \"mean\": 13.97873872819573,\n                    \"stddev\": 1.7892333806766474,\n                    \"count\": 99,\n                    \"median\": 13.467664003372192,\n                    \"p75\": 14.689211010932922,\n                    \"p95\": 17.55275595188141,\n                    \"p99\": 21.81683897972107,\n                    \"p999\": 21.81683897972107\n                },\n                \"requestsPerSecond\": {\n                    \"mean\": 141.74595662204692,\n                    \"count\": 99,\n                    \"currentRate\": 141.73979759785095,\n                    \"1MinuteRate\": 0,\n                    \"5MinuteRate\": 0,\n                    \"15MinuteRate\": 0\n                },\n                \"usage\": [\n                    {\n                        \"pid\": \"33062\",\n                        \"cpu\": {\n                            \"min\": 0,\n                            \"max\": 0.3,\n                            \"sum\": 5.9,\n                            \"variance\": 0.012024390243902443,\n                            \"mean\": 0.14390243902439026,\n                            \"stddev\": 0.1096557807135695,\n                            \"count\": 41,\n                            \"median\": 0.2,\n                            \"p75\": 0.2,\n                            \"p95\": 0.3,\n                            \"p99\": 0.3,\n                            \"p999\": 0.3\n                        },\n                        \"memory\": {\n                            \"min\": 68.20703125,\n                            \"max\": 68.20703125,\n                            \"sum\": 2864.6953125,\n                            \"variance\": 0,\n                            \"mean\": 68.20703125,\n                            \"stddev\": 0,\n                            \"count\": 42,\n                            \"median\": 68.20703125,\n                            \"p75\": 68.20703125,\n                            \"p95\": 68.20703125,\n                            \"p99\": 68.20703125,\n                            \"p999\": 68.20703125\n                        }\n                    }\n                ]\n            }\n        },\n        ...,\n        {\n            \"concurrency\": 10,\n            \"stats\": {\n                \"responseTime\": {\n                    \"min\": 11.175518989562988,\n                    \"max\": 29.486907958984375,\n                    \"sum\": 1753.7954921722412,\n                    \"variance\": 21.318200618972394,\n                    \"mean\": 19.272477935958694,\n                    \"stddev\": 4.617163698524495,\n                    \"count\": 91,\n                    \"median\": 19.485509037971497,\n                    \"p75\": 21.68475103378296,\n                    \"p95\": 28.69777555465698,\n                    \"p99\": 29.486907958984375,\n                    \"p999\": 29.486907958984375\n                },\n                \"requestsPerSecond\": {\n                    \"mean\": 504.8386172505691,\n                    \"count\": 91,\n                    \"currentRate\": 504.8419813195869,\n                    \"1MinuteRate\": 0,\n                    \"5MinuteRate\": 0,\n                    \"15MinuteRate\": 0\n                },\n                \"usage\": [\n                    {\n                        \"pid\": \"33062\",\n                        \"cpu\": {\n                            \"min\": 0,\n                            \"max\": 0.4,\n                            \"sum\": 2.4,\n                            \"variance\": 0.022857142857142864,\n                            \"mean\": 0.34285714285714286,\n                            \"stddev\": 0.1511857892036909,\n                            \"count\": 7,\n                            \"median\": 0.4,\n                            \"p75\": 0.4,\n                            \"p95\": 0.4,\n                            \"p99\": 0.4,\n                            \"p999\": 0.4\n                        },\n                        \"memory\": {\n                            \"min\": 68.2109375,\n                            \"max\": 68.2109375,\n                            \"sum\": 545.6875,\n                            \"variance\": 0,\n                            \"mean\": 68.2109375,\n                            \"stddev\": 0,\n                            \"count\": 8,\n                            \"median\": 68.2109375,\n                            \"p75\": 68.2109375,\n                            \"p95\": 68.2109375,\n                            \"p99\": 68.2109375,\n                            \"p999\": 68.2109375\n                        }\n                    }\n                ]\n            }\n        }\n    ],\n    \"url\": \"http://localhost:9900\",\n    \"pids\": [\n        33062\n    ],\n    \"options\": {\n        \"beginConcurrency\": 1,\n        \"endConcurrency\": 10,\n        \"stepRequests\": 100,\n        \"concurrencyIncrement\": 1,\n        \"delay\": 2000\n    }\n}\n```\n\n# TODO\n\n* Add documentation for all supported configuration options\n* Integrate support for [pm2](https://github.com/unitech/pm2) to query for process IDs using the [pm2-interface](https://github.com/Unitech/pm2-interface) module.\n* Provide ability to compare differences between statistics gathered at different times (to detect performance decreases/increases)\n* Improve tests\n* Provide link to sample HTML report from this documentation\n\n# Maintainers\n\n* Patrick Steele-Idem ([Github: @patrick-steele-idem](http://github.com/patrick-steele-idem)) ([Twitter: @psteeleidem](http://twitter.com/psteeleidem))\n\n# License\n\n[MIT](http://opensource.org/licenses/MIT)\n\n# Credits\n\n* The reports generated by this tool use [Highcharts](http://www.highcharts.com/) to render the graphs.\n* The [measured](https://www.npmjs.org/package/measured) module is used to collect statistics.","starsCount":1,"created":"2014-05-20T20:55:46.788Z","modified":"2017-03-22T06:59:08.395Z","lastPublisher":{"name":"pnidem","email":"pnidem@gmail.com"},"owners":[{"name":"pnidem","email":"pnidem@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-stats","_nodeVersion":"6.2.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/http-stats-2.0.0.tgz_1467237849720_0.04396590171381831"},"_npmUser":{"name":"pnidem","email":"pnidem@gmail.com"},"_npmVersion":"3.8.9","_rev":"2-1cfe3047a3471ace7a64c0795311b4f8","_shasum":"0613e2ea01ec1dabe4b784bf68f13c2c34f89639","author":{"name":"Patrick Steele-Idem","email":"pnidem@gmail.com"},"bugs":{"url":"https://github.com/patrick-steele-idem/http-stats/issues"},"directories":{},"dist-tags":{"latest":"2.0.0"},"dist":{"shasum":"0613e2ea01ec1dabe4b784bf68f13c2c34f89639","tarball":"http://registry.npmjs.org/http-stats/-/http-stats-2.0.0.tgz"},"maintainers":[{"name":"pnidem","email":"pnidem@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-22T06:59:08.395Z","created":"2014-05-20T20:55:46.788Z","0.1.0-beta":"2014-05-20T20:55:46.788Z","1.0.0":"2015-02-11T22:30:33.113Z","1.0.1":"2015-02-12T19:54:23.012Z","1.0.2":"2016-06-29T21:41:44.452Z","2.0.0":"2016-06-29T22:04:12.335Z"},"users":{"leonzhao":true}}}