{"name":"request-promise-middleware-framework","version":"0.0.4","description":"A framework to intercept HTTP calls made via the request-promise HTTP client.","main":"src/index.js","scripts":{"test":"grunt"},"repository":"https://github.com/Cimpress-MCP/request-promise-middleware-framework","keywords":["request-promise"],"license":"MIT","homepage":"https://github.com/Cimpress-MCP/request-promise-middleware-framework#readme","dependencies":{"assert-plus":"^1.0.0","bluebird":"^3.4.6","lodash":"^4.15.0"},"devDependencies":{"chai":"^3.5.0","chai-spies":"^0.7.1","grunt":"^1.0.1","grunt-contrib-jshint":"^1.0.0","grunt-jscs":"^3.0.1","grunt-mocha-istanbul":"^5.0.2","grunt-mocha-test":"^0.12.7","mocha":"^3.0.2","mocha-istanbul":"^0.3.0","node-uuid":"^1.4.7"},"gitHead":"522c1d5851a952df52d58ac80652b1e670edadc6","versions":[{"number":"0.0.4","date":"2016-10-06T22:14:49.540Z"}],"readme":"# request-promise-middleware-framework\n\nA framework to intercept HTTP calls made via the request-promise HTTP client.\n\n## Installation\n\n    npm install request-promise-middleware-framework\n\n## Middleware Definition\n\nThe framework simply expects any middleware to be a function of form:\n```\nfunction(options, callback, next) {\n  // Add custom logic here.\n  next(options, callback);\n}\n```\n\nThe ``next()`` call will call the next middleware in the chain. To add any logic on the response, you can modify the callback as follows:\n```\nfunction(options, callback, next) {\n  var _callback = function(err, response, body) {\n    // Add custom response logic here.\n    callback(err, response, body);\n  };\n  next(options, _callback);\n}\n```\n\nIf instead you want to completely short-circuit the HTTP call, you can simply call the callback and provide your own error or response:\n```\nfunction(options, callback, next) {\n  var body = \"Everything's fine.\"\n  callback(null, { statusCode: 200, body: body }, body);\n}\n```\n\n## Examples\n\nOnce you've defined your middleware, you can simply register it by creating a new framework object, and then getting the request object:\n```\nvar rpMiddlewareFramework = new RequestPromiseMiddlewareFramework(require(\"request-promise\"), middleware);\nvar rp = rpMiddlewareFramework.getMiddlewareEnabledRequestPromise();\n```\n\nYou can then use returned ``rp`` object just like you normally would.\n\nFor a full example inside an express app, see the [sample](sample) directory within this repository.\n\n## License\n\n[MIT](LICENSE)\n","created":"2016-10-06T22:14:49.540Z","modified":"2016-10-06T22:14:49.540Z","lastPublisher":{"name":"cimpress_mcp_infrastructure","email":"mcp_infrastructure@cimpress.com"},"owners":[{"name":"cimpress_mcp_infrastructure","email":"mcp_infrastructure@cimpress.com"}],"other":{"_attachments":{},"_from":".","_id":"request-promise-middleware-framework","_nodeVersion":"5.12.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/request-promise-middleware-framework-0.0.4.tgz_1475792086938_0.13964830758050084"},"_npmUser":{"name":"cimpress_mcp_infrastructure","email":"mcp_infrastructure@cimpress.com"},"_npmVersion":"3.8.6","_rev":"1-3ac9a419f93f17fdf653710c9d6241a6","_shasum":"ce978bb71c174c5bc419073d65b9ce152fbd9f8c","author":{"name":"Cimpress-MCP"},"bugs":{"url":"https://github.com/Cimpress-MCP/request-promise-middleware-framework/issues"},"directories":{},"dist-tags":{"latest":"0.0.4"},"dist":{"shasum":"ce978bb71c174c5bc419073d65b9ce152fbd9f8c","tarball":"http://registry.npmjs.org/request-promise-middleware-framework/-/request-promise-middleware-framework-0.0.4.tgz"},"maintainers":[{"name":"cimpress_mcp_infrastructure","email":"mcp_infrastructure@cimpress.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-06T22:14:49.540Z","created":"2016-10-06T22:14:49.540Z","0.0.4":"2016-10-06T22:14:49.540Z"}}}