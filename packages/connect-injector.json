{"name":"connect-injector","description":"A middleware to inject content into any HTTP response.","version":"0.4.4","homepage":"https://github.com/daffl/connect-injector","scripts":{"publish":"git push origin && git push origin --tags","release:patch":"npm version patch && npm publish","release:minor":"npm version minor && npm publish","release:major":"npm version major && npm publish","jshint":"jshint lib/. --config","test":"npm run jshint && mocha test/"},"repository":"https://github.com/daffl/connect-injector","licenses":[{"type":"MIT","url":"https://github.com/daffl/connect-injector/blob/master/LICENSE-MIT"}],"main":"lib/connect-injector","engines":{"node":">= 0.8.0"},"dependencies":{"debug":"^2.0.0","q":"^1.0.1","stream-buffers":"^0.2.3","uberproto":"^1.1.0"},"devDependencies":{"connect":"^2.7.2","http-proxy":"^1.1.5","jshint":"^2.9.2","mocha":"1.8.1","request":"2.12.0","should":"1.2.1"},"keywords":["connect","middleware","http"],"gitHead":"e78e3878bde44c116c33ae0d7dec607720f9f959","versions":[{"number":"0.1.0","date":"2013-02-09T07:01:16.055Z"},{"number":"0.2.0","date":"2013-02-14T16:02:52.626Z"},{"number":"0.2.1","date":"2013-02-15T14:43:00.786Z"},{"number":"0.2.2","date":"2013-07-07T18:35:35.714Z"},{"number":"0.2.3","date":"2013-09-17T04:57:08.827Z"},{"number":"0.3.0","date":"2014-07-15T03:46:48.808Z"},{"number":"0.4.0","date":"2014-07-15T22:40:54.714Z"},{"number":"0.4.1","date":"2014-09-23T21:56:48.043Z"},{"number":"0.4.2","date":"2014-11-14T21:29:32.836Z"},{"number":"0.4.3","date":"2016-04-15T04:33:48.272Z"},{"number":"0.4.4","date":"2016-06-04T05:31:53.345Z"}],"readme":"# connect-injector\n\nA middleware to inject content into any HTTP response.\n\n[![Build Status](https://travis-ci.org/daffl/connect-injector.png?branch=master)](https://travis-ci.org/daffl/connect-injector)\n\n## Getting Started\n\nInstall the module with: `npm install connect-injector`\n\n## Injecting\n\nThe basic API looks like this:\n\n```javascript\nvar injector = require('connect-injector');\nvar middleware = injector(function when(req, res) {\n  // for this request and repsonse\n  // return whether or not to enable injecting\n}, function converter(content, req, res, callback) {\n  content // the entire response buffer\n  req // the HTTP request\n  res // the HTTP response\n  callback // (error, data) with the injected data\n});\n```\n\nAnd can be used like any other Connect and Express middleware.\nYou need to make sure to use the injector middleware *before* the actual content is being written.\n\n## Examples\n\n### JSONP support\n\nA very useful example for connect-injector is to add [JSONP](http://en.wikipedia.org/wiki/JSONP)\nsupport to any `application/json` repsonse:\n\n```javascript\nvar injector = require('connect-injector');\nvar inject = injector(function(req, res) {\n  var isJSON = res.getHeader('content-type').indexOf('application/json') !== -1;\n  return isJSON && req.query.callback;\n}, function(data, req, res, callback) {\n  callback(null, req.query.callback + '(' + data.toString() + ')');\n});\n\n// inject needs to be used before any middleware that writes to the response\nconnect().use(connect.query()).use(inject).use(/* your other middleware here */);\n```\n\nNow any `application/json` response will be wrapped into a callback if given the\n`callback=xyz` query parameter.\n\n### Code minification\n\nAnother use case would be to minify JavaScript files on the fly using [UglifyJS](https://github.com/mishoo/UglifyJS):\n\n```js\nvar injector = require('connect-injector');\nvar connect = require('connect');\nvar UglifyJS = require('uglify-js');\n// Cache for already uglified files\nvar cache = {};\n// Function that uglifies JavaScript code\nvar uglify = function (code) {\n  var toplevel = UglifyJS.parse(code);\n\n  toplevel.figure_out_scope();\n\n  var compressor = UglifyJS.Compressor({\n    warnings: false\n  });\n  var compressed = toplevel.transform(compressor);\n\n  compressed.figure_out_scope();\n  compressed.compute_char_frequency();\n  compressed.mangle_names();\n\n  return compressed.print_to_string();\n};\n\nvar inject = injector(function(req, res) {\n  return res.getHeader('content-type').indexOf('application/javascript') !== -1;\n}, function(data, req, res, callback) {\n  // Check the cache, uglify the code if not and add it\n  if(!cache[req.url]) {\n    cache[req.url] = uglify(data.toString());\n  }\n\n  callback(null, cache[req.url]);\n});\n\n// inject needs to be used before any middleware that writes to the response\nvar app = connect().use(inject).use(connect.static(__dirname + '/../test'));\n\napp.listen(8080);\n```\n\n### Rewriting proxied files\n\nconnect-injector is tested to work with [http-proxy](https://github.com/nodejitsu/node-http-proxy)\nyou can rewrite existing proxied content:\n\n```js\nvar httpProxy = require('http-proxy');\nvar connect = require('connect');\nvar injector = require('connect-injector');\nvar proxy = httpProxy.createProxyServer();\nvar inject = injector(function(req, res) {\n  return res.getHeader('content-type').indexOf('text/html') === 0;\n}, function(data, req, res, callback) {\n  callback(null, data.toString().replace('</body>', '<p>Powered by connect-injector</p></body>'));\n});\nvar proxyMiddleware = function(req, res) {\n  // You need to rewrite your host in order to be able to hit virtual hosts\n  req.headers.host = 'daffl.github.io';\n  proxy.web(req, res, {\n    target: 'http://daffl.github.io'\n  });\n};\n\nvar proxyApp = connect().use(inject).use(proxyMiddleware);\n\nproxyApp.listen(8080);\n```\n\nAfter starting the server, check `http://localhost:8080/connect-injector/dummycontent.html`\nto see the injected content.\n\n## Release History\n\n__0.4.2__\n\n- Fix for empty responses not trying to be rewritten ([#13](https://github.com/daffl/connect-injector/issues/13), [#14](https://github.com/daffl/connect-injector/pull/14))\n\n__0.4.1__\n\n- Fix connect-injector to work with Node 0.10.32 ([#11](https://github.com/daffl/connect-injector/pull/11))\n- Add debug messages and remove header rewriting ([#12](https://github.com/daffl/connect-injector/pull/12))\n\n__0.4.0__\n\n- Fix issue when using GZip and refactor to use Q and proper NodeJS callbacks ([#9](https://github.com/daffl/connect-injector/pull/9))\n\n__0.3.0__\n\n- Injector works with HTTP proxy and GZipped content ([#4](https://github.com/daffl/connect-injector/pull/4), [#7](https://github.com/daffl/connect-injector/pull/7), [#8](https://github.com/daffl/connect-injector/pull/8))\n\n__0.2.3__\n\n- Fix caching issues for response headers not being written if there is no body ([#3](https://github.com/daffl/connect-injector/issues/3))\n\n__0.2.2__\n\n- Fix handling of responses with an empty body ([#1](https://github.com/daffl/connect-injector/pull/1))\n\n__0.2.1__\n\n- Fix bug not setting `isIntercepted` properly\n\n__0.2.0__\n\n- Allow chaining injectors\n- Unit tests and CI\n- Fixes for writing correct headers\n- Use [stream-buffers](https://github.com/samcday/node-stream-buffer) instead of concatenating\n\n__0.1.0__\n\n- Initial alpha release\n\n## License\n\nCopyright (c) 2016 David Luecke  \nLicensed under the MIT license.\n","starsCount":1,"created":"2013-02-09T07:01:14.930Z","modified":"2016-06-04T05:31:53.345Z","lastPublisher":{"name":"daffl","email":"daff@neyeon.de"},"owners":[{"name":"daffl","email":"daff@neyeon.de"}],"other":{"_attachments":{},"_from":".","_id":"connect-injector","_nodeVersion":"6.2.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/connect-injector-0.4.4.tgz_1465018312861_0.5437246686778963"},"_npmUser":{"name":"daffl","email":"daff@neyeon.de"},"_npmVersion":"3.8.9","_rev":"1-6ec8eeaad7e150653b7cfd03107a8fc7","_shasum":"a81959c31ecf5caa0f3dcc325c28ed90b830aa90","author":{"name":"David Luecke","email":"daff@neyeon.com"},"bugs":{"url":"https://github.com/daffl/connect-injector/issues"},"directories":{},"dist-tags":{"latest":"0.4.4"},"dist":{"shasum":"a81959c31ecf5caa0f3dcc325c28ed90b830aa90","tarball":"http://registry.npmjs.org/connect-injector/-/connect-injector-0.4.4.tgz"},"maintainers":[{"name":"daffl","email":"daff@neyeon.de"}],"readmeFilename":"README.md","time":{"modified":"2016-06-04T05:31:53.345Z","created":"2013-02-09T07:01:14.930Z","0.1.0":"2013-02-09T07:01:16.055Z","0.2.0":"2013-02-14T16:02:52.626Z","0.2.1":"2013-02-15T14:43:00.786Z","0.2.2":"2013-07-07T18:35:35.714Z","0.2.3":"2013-09-17T04:57:08.827Z","0.3.0":"2014-07-15T03:46:48.808Z","0.4.0":"2014-07-15T22:40:54.714Z","0.4.1":"2014-09-23T21:56:48.043Z","0.4.2":"2014-11-14T21:29:32.836Z","0.4.3":"2016-04-15T04:33:48.272Z","0.4.4":"2016-06-04T05:31:53.345Z"},"users":{"zhangyaochun":true}}}