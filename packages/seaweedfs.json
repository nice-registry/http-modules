{"name":"seaweedfs","version":"1.0.0","description":"A simple HTTP REST client for the seaweedFS file database","main":"lib/seaweedfs.js","scripts":{"prepublish":"coffee -o lib -cb src/seaweedfs.coffee","test":"mocha --timeout 60000 --compilers coffee:coffee-script/register --reporter spec test"},"keywords":["weedfs","client","http","rest"],"license":"MIT","devDependencies":{"chai":"3.2.0","coffee-script":"1.9.2","mocha":"2.2.5","shelljs":"0.5.3","tar.gz":"1.0.0"},"dependencies":{"bluebird":"2.9.34","bunyan":"^1.4.0","bunyan-format":"^0.2.1","lodash":"3.10.1","request":"2.60.0"},"gitHead":"a4f028c519755f99779942f18c3ac1c15addcbcd","versions":[{"number":"1.0.0","date":"2015-08-19T12:04:15.175Z"}],"readme":"#SeaWeedFs Nodejs Client\n\nA seaweedfs client that is stable and resilient. You most likely will never lose a write or a read.\n\n## Install\n`npm install seaweedfs --save`\n\nThe SeaweedFS class allows you to make calls like write, find, read, remove, clusterStatus\n```coffee\nSeaweedFS = require('seaweedfs')\nws = new SeaweedFS()\nws.connect()\n.then ->\n    clusterStatus()\n.then (status) ->\n    console.log status\n    ws.write(new Buffer('This is some text'))\n.then (file_info) ->\n    ws.find('1,00032423af')\n.then (locations) ->\n    console.log locations\n    ws.read('1,00032423af')\n.then (raw_data) ->\n    console.log raw_data\n    ws.remove('1,00032423af')\n.then (response) ->\n    console.log response\n.catch (err) ->\n    console.log err\n```\n\n## Documentation\nYou can initiate a client by default it connects to 1 master\n```coffee\nSeaweedFS = require('seaweedfs')\nws = new SeaweedFS({  # These are the default options\n  masters: [   # The list of masters the client could connect to it\n    {\n      host: 'localhost'\n      port: 9333\n    }\n  ]\n  scheme: 'http' # Whether http or https\n  retry_count: 60 # This is the no of times a request is retried until it fails\n  retry_timeout: 2000 #ms # This is used to retry any request that fails within the timeout All these methods return a bluebird Promise. All these methods return the request data only when full_response is false but return headers, status, body of the response when full_response is true.\n  log_name: 'SeaweedFS'\n  log_level: 'info'\n});  \n```\n\n### Methods\nAll these methods return a bluebird Promise\n\n**clusterStatus()**  \nThis function will query the master status for status information. The callback contains an object containing the information.\n```js\nclient.systemStatus()\n.then(function(status) {\n    console.log(status);\n});\n```\n\n**write(file)**  \nUse this to store files\n```js\nclient.write(\"./file.png\")\n.then(function(fileInfo) {\n    console.log(fileinfo)\n});\n```\n\nYou can also write multiple files:\n```js\nclient.write([\"./fileA.jpg\", \"./fileB.jpg\"])\n.then(function(fileInfo) {\n    // This callback will be called for both fileA and fileB.\n    // The fid's will be the same, to access each variaton just\n    // add _ARRAYINDEX to the end of the fid. In this case fileB\n    // would be: fid + \"_1\"\n    var fidA = fileInfo;\n    var fidB = fileInfo + \"_1\";\n    console.log(fileInfo);\n});\n```\n\n**find(fid)**  \nThis function can be used to find the locations of a file in the cluster.\n```js\nclient.find(fileId)\n.then(function(locations) {\n    console.log(locations);\n});\n```\n\n**read(fid, stream=null)**  \nThe read function supports streaming. To use simply do:\n```js\nclient.read(fileId, fs.createWriteStream(\"read.png\"));\n```\nIf you prefer not to use streams just use:\n```js\nclient.read(fileId)\n.then(function(data) {\n    console.log(data);\n});\n```\n\n**remove(fid)**  \nThis function will delete a file from the store. It will be deleted from all locations.\n```js\nclient.remove(fileId)\n.then(function(body) {\n    console.log(\"removed file.\")\n});\n```\n\n### Error Handling\nAny Call to the client can result in an error you can just catch the error and do what you need to do then\n\nHere is a list of errors that it can throw,\n```js\nnew Error(\"file '#{file_id}' not found\")\nnew Error(\"Failed request to #{uri}\")\nnew Error(\"Unable to perform file operations on '#{file_id}': #{JSON.stringify(errors)}\")\nnew Error(\"File location for '#{file_id}' not found\")\nnew Error(\"File '#{file_id}' is not a valid file_id\")\nnew Error(\"An error occured while upload files: #{JSON.stringify(results)}\")\nnew Error('Could not connect to any nodes')\n```\n\n# License\nPlaylyfe Weedfs Node Client v1.0.0  \nhttp://dev.playlyfe.com/  \nCopyright(c) 2013-2015, Playlyfe IT Solutions Pvt. Ltd, support@playlyfe.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","created":"2015-08-19T12:04:15.175Z","modified":"2015-08-19T12:04:15.175Z","lastPublisher":{"name":"atrniv","email":"johny@playlyfe.com"},"owners":[{"name":"atrniv","email":"johny@playlyfe.com"}],"other":{"_attachments":{},"_from":".","_id":"seaweedfs","_nodeVersion":"0.12.4","_npmUser":{"name":"atrniv","email":"johny@playlyfe.com"},"_npmVersion":"2.10.1","_rev":"1-7169b40b3553ac9a08b0d9a8c3c82c35","_shasum":"1d3252f330c42cd3200bb562a86dd055bfab3fc8","author":{"name":"Johny Jose","email":"johny@playlyfe.com"},"contributors":[{"name":"Peter John","email":"peter@playlyfe.com"}],"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"1d3252f330c42cd3200bb562a86dd055bfab3fc8","tarball":"http://registry.npmjs.org/seaweedfs/-/seaweedfs-1.0.0.tgz"},"maintainers":[{"name":"atrniv","email":"johny@playlyfe.com"}],"readmeFilename":"README.md","time":{"modified":"2015-08-19T12:04:15.175Z","created":"2015-08-19T12:04:15.175Z","1.0.0":"2015-08-19T12:04:15.175Z"}}}