{"name":"dirac-middleware","version":"0.1.9","description":"Express middleware for building JSON HTTP interfaces with dirac","main":"index.js","scripts":{"test":"./node_modules/mocha/bin/mocha"},"repository":"https://github.com/jrf0110/dirac-middleware","keywords":["express","middleware","dirac","postgres","api"],"license":"BSD","gitHead":"07e1494a7078ea6845b30535c82f45c9b5f0621d","peerDependencies":{"dirac":"*"},"dependencies":{"pluralize":"0.0.5"},"homepage":"https://github.com/jrf0110/dirac-middleware","versions":[{"number":"0.0.1","date":"2013-08-25T00:35:50.552Z"},{"number":"0.0.2","date":"2013-08-25T00:51:39.444Z"},{"number":"0.0.3","date":"2013-08-30T20:31:29.088Z"},{"number":"0.0.4","date":"2013-08-31T21:07:58.044Z"},{"number":"0.0.5","date":"2013-08-31T21:38:52.717Z"},{"number":"0.0.6","date":"2013-09-07T19:07:06.249Z"},{"number":"0.0.7","date":"2013-09-16T02:14:07.333Z"},{"number":"0.0.8","date":"2013-10-05T14:18:56.893Z"},{"number":"0.0.9","date":"2013-10-12T16:48:27.678Z"},{"number":"0.0.10","date":"2013-11-14T02:07:47.561Z"},{"number":"0.1.0","date":"2014-01-25T01:11:36.019Z"},{"number":"0.1.1","date":"2014-01-25T18:47:27.777Z"},{"number":"0.1.2","date":"2014-02-07T22:25:44.839Z"},{"number":"0.1.4","date":"2014-03-05T17:34:39.883Z"},{"number":"0.1.5","date":"2014-03-05T17:43:56.982Z"},{"number":"0.1.6","date":"2014-05-19T20:44:04.726Z"},{"number":"0.1.7","date":"2014-05-29T02:53:33.016Z"},{"number":"0.1.8","date":"2014-10-21T01:15:53.337Z"},{"number":"0.1.9","date":"2014-11-03T20:12:10.237Z"}],"readme":"# Dirac Middleware\n\nCommon express middleware for handling JSON responses for dirac queries. Calling ```app.use( dm() )``` will put a dirac query and options object on each request. Each middleware function modifies those two objects. There are some generic route handlers that will then take the query object and options, pass it along to dirac, and then pass the data back to the client.\n\n## Usage\n\n```javascript\nvar dirac = reuqire('dirac');\nvar dm = require('dirac-middleware');\nvar app = express();\n\napp.configure(function(){\n  // Initialize dirac query objects on each request\n  app.use( dm() );\n});\n\napp.get( '/api/users'\n  // pagination to add limit|offset support defaulting limit to 30\n, dm.pagination( 'pagination', 30 )\n\n  // Set table.some_condition = /users?some_condition defaulting to true\n, dm.param( 'some_condition', true /* Default value for param */ )\n\n  // Non-standard parameter? Set your own behavoir\n, dm.param( 'created_at', function( $query, options, created_at ){\n    // Where \"table\".\"created_at\" > $1\n    $query.created_at = { $gt: created_at };\n\n    // Ensure that an order by array exists on the options\n    if ( !options.order ) options.order = [];\n    // Since we're querying by, we should sort by it now\n    options.order.push({ column: 'created_at', direction: 'desc' });\n  }\n\n  // Use the query obj and options on the request to\n  // build a standard select query on users\n  // send a json result\n, dm.find( dirac.dals.users )\n);\n\napp.get( '/api/users/:id'\n  // where \"users\".\"id\" = :id\n, dm.param( 'id' )\n\n  // One result only returns the object\n, dm.findOne( dirac.dals.users )\n);\n\n// Render user view\napp.get( '/users/:id'\n, dm.param( 'id' )\n, dm.returning( 'id', 'name' )\n, dm.view( 'single_user_view', db.users )\n);\n```\n\n## API\n\nAll middleware functions will accept a function as their last parameter to provide custom behavior. They all follow this pattern:\n\n```javascript\n// The rest of the params to the function depend on the helper\n// they usually have something to do with the functionality of the helper itself\n// for instance, the param helper passes in the value of the parameter in the URI\ndm.middleware_fn_name( 'some_arg', function( $query, options, ... ){\n  /* custom behavior */\n})\n```\n\n### ```root( [options] )```\n\nThe exported value for this module is actually a middleware function to be used within the express ```app.use``` function:\n\n__Example:__\n\n```javascript\nvar dirac = reuqire('dirac');\nvar dm = require('dirac-middleware');\nvar app = express();\n\napp.configure(function(){\n  // Initialize dirac query objects on each request\n  app.use( dm({ envelope: true }) );\n});\n```\n\n__Parameters__:\n\n```\n* [options]\n  + envelope - Whether or not the response should enveloped\n               e.g { data: [/*...*/] } rather than just: [/*...*/]\n               Default: false\n```\n\n### ```dm.queryObj```\n\nThe ```root``` function is actually an alias for this function\n\n### ```dm.sort( [default_field], [custom_fn] )```\n\nSort on a field.\n\n__Parameters:__\n\n```\n* default_field [optional] - The default field to always be applied\n* custom_fn     [optional] - Custom behavior ( $query, options, sort )\n```\n\n__Example:__\n\n```\n-- name descending\n/api/users?sort=-name\n```\n\n```javascript\napp.get( '/api/users'\n  // By default, there is no sort\n, dm.sort()\n/* ... */\n);\n\n// To sort by name descending by default\napp.get( '/api/users'\n, dm.sort( '-name' )\n/* ... */\n);\n```\n\n### ```dm.param( field, [default], [custom_fn] )\n\nMap a query param field to a where condition.\n\n__Parameters:__\n\n```\n* field     [required] - Fieldname to map\n* default   [optional] - Default value for condition\n* custom_fn [optional] - Custom behavior ( $query, options, field_value )\n```\n\n__Example:__\n\n```javascript\napp.get( '/api/users/:id'\n  // Map ?id to \"users\".\"id\" in the where\n, dm.param( 'id' )\n/* ... */\n);\n\n// To Custom condition behavior\napp.get( '/api/users'\n, dm.param( 'created_at', function( $query, options, created_at ){\n    // Where \"table\".\"created_at\" > $1\n    $query.created_at = { $gt: created_at };\n\n    // Ensure that an order by array exists on the options\n    if ( !options.order ) options.order = [];\n    // Since we're querying by, we should sort by it now\n    options.order.push({ column: 'created_at', direction: 'desc' });\n  })\n/* ... */\n);\n```\n\n### ```dm.returning( fields, fieldB, fieldC, ... )```\n\nDefines what fields the query should return. Either pass in an array of fields or pass in each field individually as arguments.\n\n__Example:__\n\n```javascript\napp.get( '/api/users'\n, dm.returning([ 'id', 'name' ])\n  // Or\n, dm.returning( 'id', 'name' )\n);\n```\n\n## Generic Routes\n\nSome of the functions in this module expect to be route handlers. Since we're building up these query objects that just end up passing the data straight from the DB to the client, it makes sense to create generic route handlers.\n\n### ```dm.view( view_name, [dirac_collection], [options] )```\n\n__Parameters:__\n\n```\n* view_name         [required] - Name of the view to render\n* dirac_collection  [optional] - Reference to the dirac collection needing to perform\n                                 the query. If none is passed, no data extra data will\n                                 be passed to the view\n* options           [optional] - Object that will be passed to the render function. Can\n                                 also be used to specify which dirac.dal method to use\n                                 e.g. find, findOne, update, etc...\n```\n\n__Example:__\n\n```javascript\n// Render user view\napp.get( '/users/:id'\n, dm.param( 'id' )\n, dm.returning( 'id', 'name' )\n, dm.view( 'single_user_view', db.users, {\n    layout: 'admin/layout'\n  })\n);\n```\n\n__Special Options:__\n\nTo override `error` and `not found` behavior:\n\n```javascript\napp.get( '/users/:id'\n, dm.param( 'id' )\n, dm.returning( 'id', 'name' )\n, dm.view( 'single_user_view', db.users, {\n    layout: 'admin/layout'\n  , notFound: function( req, res ){ res.render('404'); }\n  , error: function( error, req, res ){ res.render('error', { error: error }); }\n  })\n);\n```\n\n### TODO: FINISH DOCS","created":"2013-08-25T00:35:50.201Z","modified":"2014-11-03T20:12:10.237Z","lastPublisher":{"name":"johndotawesome","email":"jrf0110@gmail.com"},"owners":[{"name":"johndotawesome","email":"jrf0110@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"dirac-middleware","_npmUser":{"name":"johndotawesome","email":"jrf0110@gmail.com"},"_npmVersion":"1.4.23","_rev":"1-c8420af7a293a21cce0acdc83df3e5fa","_shasum":"54c2d8daf8d386860299b6dc0be6938bef761ff3","author":{"name":"John Fawcett"},"bugs":{"url":"https://github.com/jrf0110/dirac-middleware/issues"},"directories":{},"dist-tags":{"latest":"0.1.9"},"dist":{"shasum":"54c2d8daf8d386860299b6dc0be6938bef761ff3","tarball":"http://registry.npmjs.org/dirac-middleware/-/dirac-middleware-0.1.9.tgz"},"maintainers":[{"name":"johndotawesome","email":"jrf0110@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-11-03T20:12:10.237Z","created":"2013-08-25T00:35:50.201Z","0.0.1":"2013-08-25T00:35:50.552Z","0.0.2":"2013-08-25T00:51:39.444Z","0.0.3":"2013-08-30T20:31:29.088Z","0.0.4":"2013-08-31T21:07:58.044Z","0.0.5":"2013-08-31T21:38:52.717Z","0.0.6":"2013-09-07T19:07:06.249Z","0.0.7":"2013-09-16T02:14:07.333Z","0.0.8":"2013-10-05T14:18:56.893Z","0.0.9":"2013-10-12T16:48:27.678Z","0.0.10":"2013-11-14T02:07:47.561Z","0.1.0":"2014-01-25T01:11:36.019Z","0.1.1":"2014-01-25T18:47:27.777Z","0.1.2":"2014-02-07T22:25:44.839Z","0.1.4":"2014-03-05T17:34:39.883Z","0.1.5":"2014-03-05T17:43:56.982Z","0.1.6":"2014-05-19T20:44:04.726Z","0.1.7":"2014-05-29T02:53:33.016Z","0.1.8":"2014-10-21T01:15:53.337Z","0.1.9":"2014-11-03T20:12:10.237Z"}}}