{"name":"pfinterfaceweb","version":"0.0.4","description":"An interface to PathfinderPC exposing methods as a HTTP REST API.  Also can optionally send messages to a STOMP compatible Message Queue server","dependencies":{"body-parser":"^1.15.0","debug":"^2.2.0","express":"3.x","http-auth":"^2.2.8","pfint":"0.0.4","stomp":"~0.1.1"},"optionalDependencies":{"stomp":"~0.1.1"},"repository":"https://github.com/naxxfish/pfinterface","license":"MIT","gitHead":"4d91792fa33cfdd661feaf204993a8d56cc4899c","homepage":"https://github.com/naxxfish/pfinterface#readme","scripts":{},"versions":[{"number":"0.0.1","date":"2014-03-19T00:13:12.688Z"},{"number":"0.0.2","date":"2016-02-25T18:04:23.174Z"},{"number":"0.0.4","date":"2016-02-25T21:23:37.066Z"}],"readme":"## PFInterface\r\n\r\nby Chris Roberts \r\n\r\n[PathfinderPC](http://www.pathfinderpc.com/) Server HTTP Interface\r\n\r\nThe purpose of this program is to provide a simple, interface into PathfinderPC Server - which is queryable via a HTTP request, or by a message through a STOMP broker. \r\n\r\nOnce configured, this program can connect to the Main SAProtocol port configured in PathfinderPC Server.  You can configure this in PathfinderPC Server under File->Master TCP Port #.  If you prefer, you can create another Protocol Translator using the \"Software Authority Protocol\" set up as a TCP server, and specify the port number of that instead.  \r\n\r\nMake sure you do\r\n\r\n    npm install\r\n\r\nTo run it, either run the batch file, or do\r\n\r\n    node interface.js\r\n\r\n### Debugging\r\nYou can enable debugging of various elements by setting the environment variable DEBUG to one of the following:\r\n * __stomp-pfinterface__ - for stuff to do with the STOMP interface\r\n * __www-pfinterface__ - for stuff to do with the web interface\r\n * __pfint__ - for the mucky details about talking to PathfinderPC.\r\n\t\r\n### Configuration\r\nTo configure, edit the config.js file.\r\n  \r\nAlways keep the below at the end of the file:\r\n\r\n    module.exports = config;\r\n\r\nYeah, I know - not the ideal way to do configuration, but it's convenient enough! \r\n\r\n#### PathfinderPC Connection\r\n\r\nThe settings concerned with connecting to the PathfinderPC Server are defined in the `config.pathfinder` section:\r\n\r\n    config.pathfinder = {\r\n    \t'user' : 'PFInterface',  // the \"user\" in the PathfinderPC server to log in as\r\n    \t'password' : 'PFInterface',\t// the password that user has in PathfinderPC server\r\n    \t'host' : '127.0.0.1', // the address of the PathfinderPC server\r\n    \t'port' : 9500 // the Protocol Translator port on the PathfinderPC Server (default is 9500)\r\n    }\r\n\r\n#### HTTP Server\t\r\nThe settings around the HTTP server are in the below. You can't use a port number below 1024! This section is required:\r\n    config.http = {\r\n    \t'port' : 8080 // what port to listen on\r\n    }\r\n\t\r\nOptionally, if you have a SSL certificate and keyfile, you can run a HTTPS server on a given port by defining the following section:\r\n     config.https = {\r\n     \tport: 8081,\r\n     \tkeyfile: 'server.key',\r\n     \tcert: 'server.crt'\r\n     }\r\n\t\r\nThe authentications settings are available in the auth section.  Currently we support HTTP Digest authentication only.  If you need to create the htdigest file and don't have a tool to do it, you can use gevorg's one here: [htdigest](https://github.com/gevorg/htdigest/).  \r\n\r\nYou can also restrict the access to memoryslots for of a given user using the ACL.  In the example below, the user `test` may read any memory slot, but only write to `ONAIR` .  \r\n\r\n**N.B.** it's a very very good idea to set this up!\r\n\r\n    config.auth = {\r\n    \trealm: 'PathfinderPC',\t// the realm which you used in the htdigest file\r\n    \tfile: 'testfile.htdigest', // the htdigest file to use\r\n    \tacl: \r\n    \t{\r\n    \t\t'test': { // each user exists here, and restricts what memory slots they can read/write to\r\n    \t\t\t'read' : '*', // either enter * for any and all memory slots\r\n    \t\t\t'write': ['ONAIR'] // or specify a list of allowable slots. \r\n    \t\t}\r\n\t    }\r\n    }\r\n\t\r\n#### STOMP Server\r\nWhenever a Memory Slot is changed, or a route is made, an event is fired. When these events are fired we can send a message to a message broker topic using STOMP so that your client applications simply have to subscribe to the topic to recieve the events.  If you'd like to connect this up to a message queue server via STOMP, you can do that.  \r\n\r\n    config.stomp = {\r\n    \t'enabled': true,\r\n    \t'host' : \"localhost\",\r\n    \t'port' :61613,\r\n    \t'login' : \"pfinterface\",\r\n    \t'passcode': \"pfinterface\",\r\n    \t'queues' : {\r\n\t\t\t// you may want to change these depending on your message queue sever setup\r\n    \t\t'memoryslot': \"/exchange/pathfinder.memoryslots\",  // all memory slot changes\r\n    \t\t'route': \"/exchange/pathfinder.routes\", // any route changes\r\n    \t\t'custom': \"/exchange/pathfinder.events\" // any other events that are recieved and not covered by the two above\r\n    \t}\r\n    }\r\n\t\r\n\r\n\t\r\n### Methods\r\nThe below methods may be used to query the state of the PathfinderPC Server.  \r\n\r\n\r\n#### /server\r\nProvides a list of server information.\r\n\r\n    {\r\n        \"itemType\": \"pathfinderserver\",\r\n        \"connected\": true,\r\n        \"loggedIn\": true,\r\n        \"host\": \"localhost\",\r\n        \"port\": 9500,\r\n        \"_id\": \"3p58qubZRv7taZ7x\",\r\n        \"logonMessage\": \"Login Successful\",\r\n        \"logonUser\": \"PFInterface\",\r\n        \"version\": \"PathfinderPC Server Pro Version 4.75\"\r\n    }\r\n\r\n#### /routers\r\nGets a list of all the routers in the system\r\n\r\n    [\r\n        {\r\n            \"itemType\": \"router\",\r\n            \"id\": \"1\",\r\n            \"avail\": \"Available\",\r\n            \"name\": \"Test Router\",\r\n            \"description\": \" \",\r\n            \"type\": \"SAPort\",\r\n            \"sourcecount\": \"18\",\r\n            \"destinationcount\": \"17\",\r\n            \"_id\": \"7ltisyUNmcwLI77Q\"\r\n        }\r\n    ]\r\n    \r\n#### /translators\r\nGets a list of all the current protocol translators set up on the system\r\n\r\n    [\r\n        {\r\n            \"itemType\": \"protocoltranslator\",\r\n            \"id\": \"1\",\r\n            \"avail\": \"Available\",\r\n            \"name\": \"PFInterface\",\r\n            \"description\": \"\",\r\n            \"type\": \"Software Authority\",\r\n            \"connectionstyle\": \"TCP\",\r\n            \"connectionport\": \"9004\",\r\n            \"_id\": \"NmIdRa3rY1t4TM8H\"\r\n        },\r\n        {\r\n            \"itemType\": \"protocoltranslator\",\r\n            \"id\": \"0\",\r\n            \"avail\": \"Available\",\r\n            \"name\": \"MainSAPort\",\r\n            \"description\": \"Main Software Authority Protocol Port\",\r\n            \"type\": \"Software Authority\",\r\n            \"connectionstyle\": \"TCP\",\r\n            \"connectionport\": \"9500\",\r\n            \"_id\": \"RSltrTJzGL2lnf6S\"\r\n        }\r\n    ]\r\n    \r\n#### /gpio\r\nGets a list of all GPIO states ... probably? (Can't test this yet!)\r\n\r\n#### /sources\r\nGives a list of available sources on all routers in Pathfinder\r\n\r\n    [\r\n        {\r\n            \"itemType\": \"source\",\r\n            \"id\": \"13\",\r\n            \"avail\": \"Available\",\r\n            \"name\": \"DeviceOutput 13\",\r\n            \"description\": \"\",\r\n            \"sourceId\": \"13\",\r\n            \"routerId\": \"1\",\r\n            \"_id\": \"5MTeEn1vwUt7Onlq\"\r\n        },\r\n        {\r\n            \"itemType\": \"source\",\r\n            \"id\": \"2\",\r\n            \"avail\": \"Available\",\r\n            \"name\": \"Stream TX\",\r\n            \"description\": \"Stream TX ON\",\r\n            \"sourceId\": \"2\",\r\n            \"routerId\": \"1\",\r\n            \"_id\": \"BEImf5MatfLWkGgG\"\r\n        },\r\n        ...\r\n    ]\r\n    \r\n#### /source/:sourceId\r\nGets a source with the provided source ID\r\n\r\n    {\r\n        \"itemType\": \"source\",\r\n        \"id\": \"1\",\r\n        \"avail\": \"Available\",\r\n        \"name\": \"FM TX\",\r\n        \"description\": \"FM TX ON\",\r\n        \"sourceId\": \"1\",\r\n        \"routerId\": \"1\",\r\n        \"_id\": \"Klu1DydarqtHRLBm\"\r\n    }\r\n    \r\n#### /destinations\r\nGets a list of all available destinations across all routers on the system\r\n\r\n    [\r\n        {\r\n            \"itemType\": \"destination\",\r\n            \"destinationid\": \"8\",\r\n            \"avail\": \"Available\",\r\n            \"id\": \"8\",\r\n            \"name\": \"S2 AUD\",\r\n            \"description\": \"S2 AUD ON\",\r\n            \"destinationId\": \"8\",\r\n            \"routerId\": \"1\",\r\n            \"_id\": \"27weib15446eUEHb\"\r\n        },\r\n        {\r\n            \"itemType\": \"destination\",\r\n            \"destinationid\": \"9\",\r\n            \"avail\": \"Available\",\r\n            \"id\": \"9\",\r\n            \"name\": \"S2 OS 1\",\r\n            \"description\": \"S2 OS 1 ON\",\r\n            \"destinationId\": \"9\",\r\n            \"routerId\": \"1\",\r\n            \"_id\": \"JDLjlwc2dh16aQBR\"\r\n        }\r\n        ...\r\n    ]\r\n    \r\n#### /destination/:destinationId\r\nGets a specific destination by ID\r\n\r\n    {\r\n        \"itemType\": \"destination\",\r\n        \"destinationid\": \"1\",\r\n        \"avail\": \"Available\",\r\n        \"id\": \"1\",\r\n        \"name\": \"S1 PGM\",\r\n        \"description\": \"S1 PGM ON\",\r\n        \"destinationId\": \"1\",\r\n        \"routerId\": \"1\",\r\n        \"_id\": \"Soommlo9Tbkei3s7\"\r\n    }\r\n\r\n#### /routes\r\nGets a list of all routes currently made on the system\r\n\r\n    [\r\n        {\r\n            \"itemType\": \"route\",\r\n            \"destinationid\": \"10\",\r\n            \"avail\": \"HostOffline\",\r\n            \"sourceid\": \"1\",\r\n            \"lock\": \"F\",\r\n            \"routerId\": \"1\",\r\n            \"_id\": \"5aJL06qxpaEYAFiQ\"\r\n        },\r\n        {\r\n            \"itemType\": \"route\",\r\n            \"destinationid\": \"15\",\r\n            \"avail\": \"HostOffline\",\r\n            \"sourceid\": \"1\",\r\n            \"lock\": \"F\",\r\n            \"routerId\": \"1\",\r\n            \"_id\": \"7poY3leZQKr3JBVr\"\r\n        }\r\n        ...\r\n    ]\r\n#### /route/source/:sourceId/destination/:destinationId\r\nGets details about a route between :sourceId and :destinationId\r\n\r\n    {\r\n        \"itemType\": \"route\",\r\n        \"destinationid\": \"1\",\r\n        \"avail\": \"HostOffline\",\r\n        \"sourceid\": \"1\",\r\n        \"lock\": \"F\",\r\n        \"routerId\": \"1\",\r\n        \"_id\": \"KmVIV96jiA2Av3Fp\"\r\n    }\r\n    \r\n#### /route/source/:sourceId\r\nGets a list of all the routes originating from :sourceId\r\n\r\n    [\r\n        {\r\n            \"itemType\": \"route\",\r\n            \"destinationid\": \"11\",\r\n            \"avail\": \"HostOffline\",\r\n            \"sourceid\": \"1\",\r\n            \"lock\": \"F\",\r\n            \"routerId\": \"1\",\r\n            \"_id\": \"07bpoVJMpGM2CfaV\"\r\n        },\r\n        {\r\n            \"itemType\": \"route\",\r\n            \"destinationid\": \"8\",\r\n            \"avail\": \"HostOffline\",\r\n            \"sourceid\": \"1\",\r\n            \"lock\": \"F\",\r\n            \"routerId\": \"1\",\r\n            \"_id\": \"0VHIjSTvOfA68ill\"\r\n        }\r\n        ...\r\n    ]\r\n    \r\n#### /route/destination/:destinationId\r\nGets the current route ending up at :destinationId\r\n\r\n    {\r\n        \"itemType\": \"route\",\r\n        \"destinationid\": \"1\",\r\n        \"avail\": \"HostOffline\",\r\n        \"sourceid\": \"1\",\r\n        \"lock\": \"F\",\r\n        \"routerId\": \"1\",\r\n        \"_id\": \"9RG7APbKC1XSVdDO\"\r\n    }\r\n    \r\n#### /memoryslots\r\nGets a list of all the current (set) MemorySlots\r\n\r\n    [\r\n        {\r\n            \"itemType\": \"memoryslot\",\r\n            \"number\": \"0\",\r\n            \"name\": \"TestThingy\",\r\n            \"value\": \"Doobery\",\r\n            \"_id\": \"8gDDPnzgzSkbIK30\"\r\n        },\r\n        {\r\n            \"itemType\": \"memoryslot\",\r\n            \"number\": \"1\",\r\n            \"name\": \"Doobery\",\r\n            \"value\": \"wabble\",\r\n            \"_id\": \"kI2DGgAw6Po9YD7T\"\r\n        }\r\n    ]\r\n    \r\n#### /memoryslot/:slotName\r\n##### GET\r\nGets the information about memoryslot called :slotName\r\n\r\n    {\r\n        \"itemType\": \"memoryslot\",\r\n        \"number\": \"0\",\r\n        \"name\": \"TestThingy\",\r\n        \"value\": \"Doobery\",\r\n        \"_id\": \"8gDDPnzgzSkbIK30\"\r\n    }\r\n\t\r\n##### POST\r\nIf you POST to this path, you can now SET a memory slot using the msValue paramter. \r\n\r\nFor example with cURL:\r\n      curl --data \"msValue=hello\" http://localhost:8080/memorySlot/ONAIR\r\n\r\nIt will return some JSON in the same format as you would with a GET, for confirmation. \r\n\r\n\r\n### License\r\nCopyright (c) 2015 Chris Roberts\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","created":"2014-03-19T00:13:12.688Z","modified":"2016-02-25T21:23:37.066Z","lastPublisher":{"name":"naxxfish","email":"chris@naxxfish.eu"},"owners":[{"name":"naxxfish","email":"chris@naxxfish.eu"}],"other":{"_attachments":{},"_from":".","_id":"pfinterfaceweb","_nodeVersion":"0.12.4","_npmOperationalInternal":{"host":"packages-6-west.internal.npmjs.com","tmp":"tmp/pfinterfaceweb-0.0.4.tgz_1456435414120_0.764803808182478"},"_npmUser":{"name":"naxxfish","email":"chris@naxxfish.eu"},"_npmVersion":"2.10.1","_rev":"1-e7b0336a8bb93036d3a63680f57a5eb3","_shasum":"9a688ed82f0a73da8ee20669aad1b95739e0ad1b","author":{"name":"Chris Roberts","email":"chris@naxxfish.eu","url":"http://naxxfish.eu/"},"bugs":{"url":"https://github.com/naxxfish/pfinterface/issues"},"directories":{},"dist-tags":{"latest":"0.0.4"},"dist":{"shasum":"9a688ed82f0a73da8ee20669aad1b95739e0ad1b","tarball":"http://registry.npmjs.org/pfinterfaceweb/-/pfinterfaceweb-0.0.4.tgz"},"maintainers":[{"name":"naxxfish","email":"chris@naxxfish.eu"}],"readmeFilename":"README.md","time":{"modified":"2016-02-25T21:23:37.066Z","created":"2014-03-19T00:13:12.688Z","0.0.1":"2014-03-19T00:13:12.688Z","0.0.2":"2016-02-25T18:04:23.174Z","0.0.4":"2016-02-25T21:23:37.066Z"}}}