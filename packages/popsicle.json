{"name":"popsicle","version":"9.1.0","description":"Simple HTTP requests for node and the browser","main":"dist/common.js","files":["dist/","typings.json","LICENSE","logo.svg"],"browser":{"buffer":false,"form-data":"./dist/browser/form-data.js","tough-cookie":"./dist/browser/tough-cookie.js","./dist/index.js":"./dist/browser.js","./dist/plugins/index.js":"./dist/plugins/browser.js","./dist/plugins/is-host/index.js":"./dist/plugins/is-host/browser.js"},"scripts":{"lint":"tslint \"src/**/*.ts\"","check-size":"browserify . -s popsicle --external bluebird > popsicle.js && du -h popsicle.js","build":"rm -rf dist/ && tsc && npm run check-size","test-spec":"npm run test-server-open && HTTPS_PORT=7358 PORT=7357 node dist/test/index.js; EXIT=$?; npm run test-server-close; exit $EXIT","test-cov":"HTTPS_PORT=7358 PORT=7357 istanbul cover --print none dist/test/index.js | tap-spec","test-browser":"HTTPS_PORT=7358 PORT=7357 browserify -d -t envify dist/test/index.js | tape-run --render tap-spec","test-server-open":"PORT=7357 node scripts/server.js & echo $! > server.pid; HTTPS_PORT=7358 node scripts/https-server.js & echo $! > https-server.pid","test-server-close":"if [ -f server.pid ]; then kill -9 $(cat server.pid); rm server.pid; fi; if [ -f https-server.pid ]; then kill -9 $(cat https-server.pid); rm https-server.pid; fi","test":"npm run lint && npm run build && npm run test-server-open && npm run test-cov && npm run test-browser; EXIT=$?; npm run test-server-close; exit $EXIT","prepublish":"typings install && npm run build"},"repository":"https://github.com/blakeembrey/popsicle","keywords":["request","ajax","http","node","browser","promise","agent"],"license":"MIT","homepage":"https://github.com/blakeembrey/popsicle","devDependencies":{"blue-tape":"^1.0.0","bluebird":"^3.0.5","body-parser":"^1.9.2","browserify":"^13.0.0","envify":"^4.0.0","express":"^4.10.2","istanbul":"^0.4.0","methods":"^1.1.2","tap-spec":"^4.1.1","tape-run":"2.1.0","tslint":"^4.0.2","tslint-config-standard":"^2.0.0","typescript":"^2.1.4","typings":"^2.0.0"},"dependencies":{"concat-stream":"^1.4.7","form-data":"^2.0.0","make-error-cause":"^1.2.1","tough-cookie":"^2.0.0"},"gitHead":"fa47bd475f89ea69d4d3b8b82d68e36c883c4f33","versions":[{"number":"0.0.1","date":"2014-11-25T03:50:43.502Z"},{"number":"0.0.2","date":"2014-12-03T03:50:52.332Z"},{"number":"0.0.3","date":"2014-12-05T22:32:17.095Z"},{"number":"0.1.0","date":"2014-12-10T01:48:53.831Z"},{"number":"0.1.1","date":"2014-12-10T03:28:07.150Z"},{"number":"0.2.0","date":"2014-12-23T06:37:42.838Z"},{"number":"0.2.1","date":"2014-12-23T18:33:48.713Z"},{"number":"0.2.2","date":"2014-12-25T01:04:31.493Z"},{"number":"0.2.3","date":"2014-12-25T04:06:29.937Z"},{"number":"0.3.0","date":"2014-12-25T04:50:11.823Z"},{"number":"0.3.1","date":"2014-12-27T22:17:04.643Z"},{"number":"0.3.2","date":"2014-12-27T22:45:33.685Z"},{"number":"0.3.3","date":"2015-01-06T22:44:45.046Z"},{"number":"0.3.4","date":"2015-01-06T23:33:30.548Z"},{"number":"0.3.5","date":"2015-01-19T13:29:17.921Z"},{"number":"0.3.6","date":"2015-01-21T17:24:08.398Z"},{"number":"0.3.7","date":"2015-01-23T10:57:55.996Z"},{"number":"0.3.8","date":"2015-01-23T11:05:22.706Z"},{"number":"0.3.9","date":"2015-01-30T15:31:14.380Z"},{"number":"0.3.10","date":"2015-02-05T11:48:54.483Z"},{"number":"0.3.11","date":"2015-02-24T15:07:23.743Z"},{"number":"0.4.0","date":"2015-03-06T19:42:08.331Z"},{"number":"0.5.0","date":"2015-03-14T09:29:16.773Z"},{"number":"0.5.1","date":"2015-03-14T10:22:43.354Z"},{"number":"0.5.2","date":"2015-03-14T10:37:36.138Z"},{"number":"0.5.3","date":"2015-03-14T10:52:36.877Z"},{"number":"0.5.4","date":"2015-03-14T10:58:20.921Z"},{"number":"0.5.5","date":"2015-03-14T12:11:31.801Z"},{"number":"0.5.6","date":"2015-03-14T12:15:34.861Z"},{"number":"0.5.7","date":"2015-04-15T17:48:16.644Z"},{"number":"0.5.8","date":"2015-04-22T19:44:04.996Z"},{"number":"0.5.9","date":"2015-04-26T21:11:16.003Z"},{"number":"0.5.10","date":"2015-04-29T03:25:58.173Z"},{"number":"0.5.11","date":"2015-05-07T18:08:33.269Z"},{"number":"0.5.12","date":"2015-05-10T22:32:13.525Z"},{"number":"0.5.13","date":"2015-07-24T11:34:37.152Z"},{"number":"1.0.0","date":"2015-07-25T08:42:11.738Z"},{"number":"1.1.0","date":"2015-08-05T02:46:40.680Z"},{"number":"1.1.1","date":"2015-09-18T21:48:59.841Z"},{"number":"1.2.0","date":"2015-10-29T00:07:39.640Z"},{"number":"1.2.1","date":"2015-10-29T00:14:56.423Z"},{"number":"1.2.2","date":"2015-11-04T08:06:03.462Z"},{"number":"1.3.0","date":"2015-11-05T06:42:35.193Z"},{"number":"1.3.1","date":"2015-11-22T03:03:15.327Z"},{"number":"1.3.2","date":"2015-11-22T03:10:26.918Z"},{"number":"1.4.0","date":"2015-12-08T00:56:51.797Z"},{"number":"2.0.0","date":"2015-12-14T20:59:03.047Z"},{"number":"2.0.1","date":"2015-12-17T21:40:27.516Z"},{"number":"2.0.2","date":"2016-01-08T23:02:03.516Z"},{"number":"3.0.0","date":"2016-01-10T01:54:58.933Z"},{"number":"3.0.1","date":"2016-01-11T22:48:29.956Z"},{"number":"3.0.2","date":"2016-01-19T00:40:36.159Z"},{"number":"3.0.3","date":"2016-01-20T06:23:04.102Z"},{"number":"3.1.1","date":"2016-02-01T20:19:16.198Z"},{"number":"3.2.0","date":"2016-02-09T21:37:02.328Z"},{"number":"3.2.1","date":"2016-02-10T02:55:41.405Z"},{"number":"3.2.2","date":"2016-02-10T04:54:44.517Z"},{"number":"4.0.0","date":"2016-03-05T04:14:11.837Z"},{"number":"5.0.0","date":"2016-03-14T22:20:44.767Z"},{"number":"5.0.1","date":"2016-03-30T22:00:57.944Z"},{"number":"6.0.0","date":"2016-05-08T00:15:27.914Z"},{"number":"6.1.0","date":"2016-05-08T18:49:02.625Z"},{"number":"6.2.0","date":"2016-05-11T22:21:07.537Z"},{"number":"6.2.1","date":"2016-06-20T18:32:04.486Z"},{"number":"6.2.2","date":"2016-07-07T21:40:16.462Z"},{"number":"7.0.0","date":"2016-07-11T01:27:43.344Z"},{"number":"7.0.1","date":"2016-07-11T01:48:19.070Z"},{"number":"8.0.0","date":"2016-07-12T02:39:53.121Z"},{"number":"8.0.1","date":"2016-07-20T23:32:36.571Z"},{"number":"8.0.2","date":"2016-07-20T23:46:20.459Z"},{"number":"8.0.3","date":"2016-08-01T10:54:16.384Z"},{"number":"8.0.4","date":"2016-08-02T04:07:59.643Z"},{"number":"8.1.0","date":"2016-08-27T06:32:27.879Z"},{"number":"8.1.1","date":"2016-08-27T06:38:04.947Z"},{"number":"8.2.0","date":"2016-09-20T17:51:42.245Z"},{"number":"9.0.0","date":"2016-12-09T05:36:21.074Z"},{"number":"9.1.0","date":"2017-02-09T03:31:57.825Z"}],"readme":"# ![Popsicle](https://cdn.rawgit.com/blakeembrey/popsicle/master/logo.svg)\n\n[![NPM version][npm-image]][npm-url]\n[![NPM downloads][downloads-image]][downloads-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n\n> **Popsicle** is the easiest way to make HTTP requests - a consistent, intuitive and tiny API that works on node and the browser. 9.37 kB in browsers, after minification and gzipping, including dependencies (with `url` being the bulk of it).\n\n```js\npopsicle.get('/users.json')\n  .then(function (res) {\n    console.log(res.status) //=> 200\n    console.log(res.body) //=> { ... }\n    console.log(res.headers) //=> { ... }\n  })\n```\n\n## Installation\n\n```\nnpm install popsicle --save\n```\n\n## Usage\n\n```js\nconst popsicle = require('popsicle')\n\npopsicle.request({\n  method: 'POST',\n  url: 'http://example.com/api/users',\n  body: {\n    username: 'blakeembrey',\n    password: 'hunter2'\n  },\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n})\n  .use(popsicle.plugins.parse('json'))\n  .then(function (res) {\n    console.log(res.status) // => 200\n    console.log(res.body) //=> { ... }\n    console.log(res.get('Content-Type')) //=> 'application/json'\n  })\n```\n\n**Popsicle** is a promise-based HTTP request library designed for extensibility. Here's the functions you can import from `popsicle`:\n\n* **request(options)** The default request handler (also `get`)\n* **defaults(options)** Create a new Popsicle instance with `defaults`\n* **form(obj?)** Cross-platform form data object\n* **plugins** Exposes the default plugins (Object)\n* **jar(store?)** Create a cookie jar instance for Node.js\n* **transport** Default transportation layer (Object)\n* **Request(options)** Constructor for the `Request` class\n* **Response(options)** Constructor for the `Response` class\n\n### Request Options\n\n* **url** _(string)_ The resource location.\n* **method** _(string)_ The HTTP request method (default: `\"GET\"`).\n* **headers** _(object)_ A map of header key to value (default: `{}`).\n* **query** _(object | string)_ A map or string to be appended to the URL as the query string.\n* **body** _(any)_ An object, string, form data, stream (node) or other to pass with the request.\n* **timeout** _(number)_ The number of milliseconds to wait before aborting the request (default: `Infinity`)\n* **use** _(array)_ An array of plugins to override the defaults (default: `[stringify(), headers()]`)\n* **transport** _(object)_ Set the transport layer (default: `createTransport({ type: 'text' })`)\n\n### Built-in Plugins\n\n#### `stringify` (default)\n\nAutomatically serialize the request body into a string (E.g. JSON, URL-encoded or multipart).\n\n#### `headers` (default)\n\nSets up default headers for environments. For example, `Content-Length`, `User-Agent`, `Accept`, etc.\n\n#### `parse`\n\nAutomatically parses allowed response type(s).\n\n* **json** Parse response as JSON\n* **urlencoded** Parse response as URL-encoded\n\n```js\npopsicle.get('/users')\n  .use(popsicle.plugins.parse(['json', 'urlencoded']))\n  .then(() => ...)\n```\n\n### Built-in Transports\n\nPopsicle provides two transports, one for node (using `{http,https}.request`) and one for browsers (using `XMLHttpRequest`). These transports have a number of \"types\" built-in for handling the response body.\n\n* **text** Handle response as a string (default)\n* **document** `responseType === 'document'` (browsers)\n* **blob** `responseType === 'blob'` (browsers)\n* **arraybuffer** `responseType === 'arraybuffer'` (browsers)\n* **buffer** Handle response as a buffer (node.js)\n* **array** Handle response as an array of integers (node.js)\n* **uint8array** Handle the response as a `Uint8Array` (node.js)\n* **stream** Respond with the response body stream (node.js)\n\n**Node transport options**\n\n* **type** Handle the response (default: `text`)\n* **unzip** Automatically unzip response bodies (default: `true`)\n* **jar** An instance of a cookie jar (`popsicle.jar()`) (default: `null`)\n* **agent** Custom HTTP pooling agent\n* **maxRedirects** Override the number of redirects allowed (default: `5`)\n* **maxBufferSize** The maximum size of the buffered response body (default: `2000000`)\n* **rejectUnauthorized** Reject invalid SSL certificates (default: `true`)\n* **confirmRedirect** Confirm redirects on `307` and `308` status codes (default: `() => false`)\n* **ca** A string, `Buffer` or array of strings or `Buffers` of trusted certificates in PEM format\n* **key** Private key to use for SSL (default: `null`)\n* **cert** Public x509 certificate to use (default: `null`)\n\n**Browser transport options**\n\n* **type** Handle the XHR response (default: `text`)\n* **withCredentials** Send cookies with CORS requests (default: `false`)\n* **overrideMimeType** Override the XHR response MIME type\n\n### Short-hand Methods\n\nCommon methods have a short hand exported (created using `defaults({ method })`).\n\n```js\npopsicle.get('http://example.com/api/users')\npopsicle.post('http://example.com/api/users')\npopsicle.put('http://example.com/api/users')\npopsicle.patch('http://example.com/api/users')\npopsicle.del('http://example.com/api/users')\n```\n\n### Default Instances\n\nCreate a new Popsicle instance with defaults pre-populated. Handy for a common cookie jar or transport to be used.\n\n```js\nconst cookiePopsicle = popsicle.defaults({\n  transport: popsicle.createTransport({\n    jar: popsicle.jar()\n  })\n})\n```\n\n### Automatically Stringify Request Body\n\nPopsicle will automatically serialize the request body using the `stringify` plugin. If an object is supplied, it will automatically be stringified as JSON unless the `Content-Type` was set otherwise. If the `Content-Type` is `application/json`, `multipart/form-data` or `application/x-www-form-urlencoded`, it will be automatically serialized accordingly.\n\n```js\npopsicle.get({\n  url: 'http://example.com/api/users',\n  body: {\n    username: 'blakeembrey'\n  },\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n})\n```\n\n### Multipart Request Bodies\n\nYou can manually create a `FormData` instance by calling `popsicle.form`. When you pass a form data instance as the body, it'll automatically set the correct `Content-Type` - complete with boundary.\n\n```js\nconst form = popsicle.form({\n  username: 'blakeembrey',\n  profileImage: fs.createReadStream('image.png')\n})\n\nform.append('x', 'y')\n\npopsicle.post({\n  url: '/users',\n  body: form\n})\n```\n\n### Cookie Jar (Node only)\n\nYou can create a reusable cookie jar instance for requests by calling `popsicle.jar`.\n\n```js\nconst jar = popsicle.jar()\n\npopsicle.request({\n  method: 'post',\n  url: '/users',\n  transport: popsicle.createTransport({\n    jar: jar\n  })\n})\n```\n\n### Request Class\n\nCalling any of the request functions will return an instance of `Request`.\n\n* **method** _(string)_ The request method.\n* **timeout** _(number)_ Configured request timeout.\n* **body** _(any)_ The request payload.\n* **transport** _(object)_ The transportation layer.\n* **events** _(object)_ A map of configured event listeners.\n* **middleware** _(array)_ The list of configured middleware.\n* **opened** _(boolean)_ A flag indicating the transport was started.\n* **aborted** _(boolean)_ A flag indicating the request was aborted before finishing.\n* **uploaded** _(number)_ The percentage of upload complete (between 0 and 1).\n* **downloaded** _(number)_ The percentage of download complete (between 0 and 1).\n* **uploadedBytes** (number)_ Number of bytes uploaded.\n* **downloadedBytes** _(number)_ Number of bytes downloaded.\n* **uploadLength** _(number)_ Known size of total upload bytes.\n* **downloadLength** _(number)_ Known size of total download bytes.\n* **error(message, code, original?)** Create a `PopsicleError` instance.\n* **then(onFulfilled?, onRejected?)** Promise interface.\n* **catch(onRejected)** Promise interface.\n* **exec(cb)** Callback interface.\n* **toOptions()** Return a new object representing the request options.\n* **toJSON()** A JSON friendly representation of the request.\n* **clone()** Return a new instance of `Request` from `toOptions()`.\n* **use(middleware)** Append middleware to the current request.\n* **on(event, fn)** Attach an event listener.\n* **off(event, fn)** Detach an event listener.\n* **once(event, fn)** Attach an event listener that automatically detaches after the first execution.\n* **emit(event, ...args)** Emit an event (mostly internal use).\n* **abort()** Abort the current request by emitting the `abort` event.\n\n**P.S.** When cloning a request instance, the current middleware and events are copied. This allows event tricks like `abort()` to also abort cloned request instances (e.g. in the case where working with request retries, and aborting should still work on re-attempts).\n\n#### Promises\n\nPromises are the most expressive interface. Just chain using `Request#then` or `Request#catch` and continue.\n\n```js\npopsicle.get('/users')\n  .then(function (res) {\n    // Success!\n  })\n  .catch(function (err) {\n    // Something broke.\n  })\n```\n\nIf you live on the edge, try with generators ([co](https://www.npmjs.com/package/co)) or ES7 `async`/`await`.\n\n```js\nco(function * () {\n  const users = yield popsicle.get('/users')\n})\n\nasync function () {\n  const users = await popsicle.get('/users')\n}\n```\n\n#### Callbacks\n\nFor tooling that expects node-style callbacks, you can use `Request#exec`. This accepts a single function to call when the response is complete.\n\n```js\npopsicle.get('/users')\n  .exec(function (err, res) {\n    if (err) {\n      // Something broke.\n    }\n\n    // Success!\n  })\n```\n\n### Aborting\n\nAll requests can be aborted before or during execution by calling `Request#abort`.\n\n```js\nconst request = popsicle.get('http://example.com')\n\nsetTimeout(function () {\n  request.abort()\n}, 100)\n\nrequest.catch(function (err) {\n  console.log(err) //=> { message: 'Request aborted', code: 'EABORTED' }\n})\n```\n\n#### Progress\n\nThe request object can be used to check progress at any time.\n\n* **request.uploadedBytes** Current upload size in bytes\n* **request.uploadLength** Total upload size in bytes\n* **request.uploaded** Total uploaded as a percentage\n* **request.downloadedBytes** Current download size in bytes\n* **request.downloadLength** Total download size in bytes\n* **request.downloaded** Total downloaded as a percentage\n* **request.completed** Total uploaded and downloaded as a percentage\n\nAll percentage properties (`request.uploaded`, `request.downloaded`, `request.completed`) are a number between `0` and `1`. Aborting the request will emit a progress event, if the request had started.\n\n```js\nconst request = popsicle.get('http://example.com')\n\nrequest.uploaded //=> 0\nrequest.downloaded //=> 0\n\nrequest.on('progress', function () {\n  console.log(request) //=> { uploaded: 1, downloaded: 0, completed: 0.5, aborted: false }\n})\n\nrequest.then(function (response) {\n  console.log(request.downloaded) //=> 1\n})\n```\n\n#### Errors\n\nAll response methods can return an error. Errors have a `popsicle` property set to the request object and a `code` string. The built-in codes are documented below, but custom errors can be created using `request.error(message, code, cause)`.\n\n* **EABORT** Request has been aborted by user\n* **EUNAVAILABLE** Unable to connect to the remote URL\n* **EINVALID** Request URL is invalid\n* **ETIMEOUT** Request has exceeded the allowed timeout\n* **ESTRINGIFY** Request body threw an error during stringification plugin\n* **EPARSE** Response body threw an error during parse\n* **EMAXREDIRECTS** Maximum number of redirects exceeded (Node only)\n* **EBODY** Unable to handle request body (Node only)\n* **EBLOCKED** The request was blocked (HTTPS -> HTTP) (Browsers only)\n* **ECSP** Request violates the documents Content Security Policy (Browsers only)\n* **ETYPE** Invalid transport type\n\n### Response Class\n\nEvery response will give a `Response` instance on success. T\n\n* **status** The HTTP response status code\n* **body** The response body from the transport layer (usually text or a stream)\n* **headers** An object of lower-cased keys to header values\n* **url** The final response URL (after redirects)\n* **statusType()** Return an integer with the HTTP status type (E.g. `200 -> 2`)\n* **get(key)** Retrieve a HTTP header using a case-insensitive key\n* **name(key)** Retrieve the original HTTP header name using a case-insensitive key\n* **type()** Return the response type (E.g. `application/json`)\n\n### Plugins\n\nPlugins can be set as an array with the initial options (which overrides default plugins), or they can be used via `Request#use`.\n\n#### External Plugins\n\n* [Server](https://github.com/blakeembrey/popsicle-server) - Automatically mount a server on an available for the request (helpful for testing a la `supertest`)\n* [Status](https://github.com/blakeembrey/popsicle-status) - Reject responses on HTTP failure status codes\n* [No Cache](https://github.com/blakeembrey/popsicle-no-cache) - Prevent caching of HTTP requests in browsers\n* [Basic Auth](https://github.com/blakeembrey/popsicle-basic-auth) - Add a basic authentication header to each request\n* [Prefix](https://github.com/blakeembrey/popsicle-prefix) - Prefix all HTTP requests\n* [Resolve](https://github.com/blakeembrey/popsicle-resolve) - Resolve all HTTP requests against a base URL\n* [Limit](https://github.com/blakeembrey/popsicle-limit) - Transparently handle API rate limits by grouping requests\n* [Group](https://github.com/blakeembrey/popsicle-group) - Group requests and perform operations on them all at once\n* [Proxy Agent](https://github.com/blakeembrey/popsicle-proxy-agent) - Enable HTTP(s) proxying under node (with environment variable support)\n* [Retry](https://github.com/blakeembrey/popsicle-retry) - Retry a HTTP request on network error or server error\n* [Rewrite](https://github.com/lbovet/popsicle-rewrite) - Rewrite request URLs dynamically\n* [Cache](https://github.com/blakeembrey/popsicle-cache) - Enable caching for HTTP requests into a store (E.g. filesystem)\n\n#### Helpful Utilities\n\n* [`throat`](https://github.com/ForbesLindesay/throat) - Throttle promise-based functions with concurrency support\n* [`is-browser`](https://github.com/ForbesLindesay/is-browser) - Check if your in a browser environment (E.g. Browserify, Webpack)\n* [`parse-link-header`](https://github.com/thlorenz/parse-link-header) - Handy for parsing HTTP link headers\n\n#### Creating Plugins\n\nPlugins must be a function that accept config and return a middleware function. For example, here's a basic URL prefix plugin.\n\n```js\nfunction prefix (url) {\n  return function (self, next) {\n    self.url = url + self.url\n    return next()\n  }\n}\n\npopsicle.request('/user')\n  .use(prefix('http://example.com'))\n  .then(function (response) {\n    console.log(response.url) //=> \"http://example.com/user\"\n  })\n```\n\nMiddleware functions accept two arguments - the current request and a function to proceed to the next middleware function (a la Koa `2.x`).\n\n**P.S.** The middleware array is exposed on `request.middleware`, which allows you to clone requests and tweak middleware - for example, using `request.middleware.slice(request.middleware.indexOf(currentFn))`. This is useful, as the pre and post steps of previous middleware attach before `currentFn` is executed.\n\n### Transportation Layers\n\nCreating a custom transportation layer is just a matter creating an object with `open`, `abort` and `use` options set. The open method should set any request information required between called as `request._raw`. Abort must abort the current request instance, while `open` must **always** resolve to a promise. You can set `use` to an empty array if no plugins should be used by default. However, it's recommended you keep `use` set to the defaults, or as close as possible using your transport layer.\n\n## JavaScript\n\nThis module is designed for ES5 environments, but requires two ES2015 polyfills to work:\n\n1. `Promise` - `popsicle` is designed heavily with promises in mind\n2. `Object.assign` - used internally for object cloning\n\n## TypeScript\n\nThis project is written using [TypeScript](https://github.com/Microsoft/TypeScript) and [typings](https://github.com/typings/typings). Since version `1.3.1`, you can install the type definition using `typings`.\n\n```\ntypings install npm:popsicle --save\n```\n\nNote that for a brand new project you might need to add the definition for node via the following command:\n\n```\ntypings install env~node --save --global\n```\n\nMake sure you add `typings/index.d.ts` to your TypeScript project (using `files` or `includes` in `tsconfig.json`) if it isn't already.\n\n## Development\n\nInstall dependencies and run the test runners (node and Electron using Tape).\n\n```\nnpm install && npm test\n```\n\n## Related Projects\n\n* [Superagent](https://github.com/visionmedia/superagent) - HTTP requests for node and browsers\n* [Fetch](https://github.com/github/fetch) - Browser polyfill for promise-based HTTP requests\n* [Axios](https://github.com/mzabriskie/axios) - HTTP request API based on Angular's $http service\n\n## License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/popsicle.svg?style=flat\n[npm-url]: https://npmjs.org/package/popsicle\n[downloads-image]: https://img.shields.io/npm/dm/popsicle.svg?style=flat\n[downloads-url]: https://npmjs.org/package/popsicle\n[travis-image]: https://img.shields.io/travis/blakeembrey/popsicle.svg?style=flat\n[travis-url]: https://travis-ci.org/blakeembrey/popsicle\n[coveralls-image]: https://img.shields.io/coveralls/blakeembrey/popsicle.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/blakeembrey/popsicle?branch=master\n","starsCount":6,"created":"2014-11-25T03:50:43.502Z","modified":"2017-05-25T08:46:37.503Z","lastPublisher":{"name":"blakeembrey","email":"hello@blakeembrey.com"},"owners":[{"name":"blakeembrey","email":"hello@blakeembrey.com"}],"other":{"_attachments":{},"_from":".","_id":"popsicle","_nodeVersion":"7.3.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/popsicle-9.1.0.tgz_1486611115637_0.6331810776609927"},"_npmUser":{"name":"blakeembrey","email":"hello@blakeembrey.com"},"_npmVersion":"3.10.10","_rev":"4-ab80b1985e366ff78daa79fd15415322","_shasum":"4f900f38d57a574ec170eda40496e364082bff66","author":{"name":"Blake Embrey","email":"hello@blakeembrey.com","url":"http://blakeembrey.me"},"bugs":{"url":"https://github.com/blakeembrey/popsicle/issues"},"directories":{},"dist-tags":{"latest":"9.1.0"},"dist":{"shasum":"4f900f38d57a574ec170eda40496e364082bff66","tarball":"https://registry.npmjs.org/popsicle/-/popsicle-9.1.0.tgz"},"maintainers":[{"name":"blakeembrey","email":"hello@blakeembrey.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-25T08:46:37.503Z","created":"2014-11-25T03:50:43.502Z","0.0.1":"2014-11-25T03:50:43.502Z","0.0.2":"2014-12-03T03:50:52.332Z","0.0.3":"2014-12-05T22:32:17.095Z","0.1.0":"2014-12-10T01:48:53.831Z","0.1.1":"2014-12-10T03:28:07.150Z","0.2.0":"2014-12-23T06:37:42.838Z","0.2.1":"2014-12-23T18:33:48.713Z","0.2.2":"2014-12-25T01:04:31.493Z","0.2.3":"2014-12-25T04:06:29.937Z","0.3.0":"2014-12-25T04:50:11.823Z","0.3.1":"2014-12-27T22:17:04.643Z","0.3.2":"2014-12-27T22:45:33.685Z","0.3.3":"2015-01-06T22:44:45.046Z","0.3.4":"2015-01-06T23:33:30.548Z","0.3.5":"2015-01-19T13:29:17.921Z","0.3.6":"2015-01-21T17:24:08.398Z","0.3.7":"2015-01-23T10:57:55.996Z","0.3.8":"2015-01-23T11:05:22.706Z","0.3.9":"2015-01-30T15:31:14.380Z","0.3.10":"2015-02-05T11:48:54.483Z","0.3.11":"2015-02-24T15:07:23.743Z","0.4.0":"2015-03-06T19:42:08.331Z","0.5.0":"2015-03-14T09:29:16.773Z","0.5.1":"2015-03-14T10:22:43.354Z","0.5.2":"2015-03-14T10:37:36.138Z","0.5.3":"2015-03-14T10:52:36.877Z","0.5.4":"2015-03-14T10:58:20.921Z","0.5.5":"2015-03-14T12:11:31.801Z","0.5.6":"2015-03-14T12:15:34.861Z","0.5.7":"2015-04-15T17:48:16.644Z","0.5.8":"2015-04-22T19:44:04.996Z","0.5.9":"2015-04-26T21:11:16.003Z","0.5.10":"2015-04-29T03:25:58.173Z","0.5.11":"2015-05-07T18:08:33.269Z","0.5.12":"2015-05-10T22:32:13.525Z","0.5.13":"2015-07-24T11:34:37.152Z","1.0.0":"2015-07-25T08:42:11.738Z","1.1.0":"2015-08-05T02:46:40.680Z","1.1.1":"2015-09-18T21:48:59.841Z","1.2.0":"2015-10-29T00:07:39.640Z","1.2.1":"2015-10-29T00:14:56.423Z","1.2.2":"2015-11-04T08:06:03.462Z","1.3.0":"2015-11-05T06:42:35.193Z","1.3.1":"2015-11-22T03:03:15.327Z","1.3.2":"2015-11-22T03:10:26.918Z","1.4.0":"2015-12-08T00:56:51.797Z","2.0.0":"2015-12-14T20:59:03.047Z","2.0.1":"2015-12-17T21:40:27.516Z","2.0.2":"2016-01-08T23:02:03.516Z","3.0.0":"2016-01-10T01:54:58.933Z","3.0.1":"2016-01-11T22:48:29.956Z","3.0.2":"2016-01-19T00:40:36.159Z","3.0.3":"2016-01-20T06:23:04.102Z","3.1.1":"2016-02-01T20:19:16.198Z","3.2.0":"2016-02-09T21:37:02.328Z","3.2.1":"2016-02-10T02:55:41.405Z","3.2.2":"2016-02-10T04:54:44.517Z","4.0.0":"2016-03-05T04:14:11.837Z","5.0.0":"2016-03-14T22:20:44.767Z","5.0.1":"2016-03-30T22:00:57.944Z","6.0.0":"2016-05-08T00:15:27.914Z","6.1.0":"2016-05-08T18:49:02.625Z","6.2.0":"2016-05-11T22:21:07.537Z","6.2.1":"2016-06-20T18:32:04.486Z","6.2.2":"2016-07-07T21:40:16.462Z","7.0.0":"2016-07-11T01:27:43.344Z","7.0.1":"2016-07-11T01:48:19.070Z","8.0.0":"2016-07-12T02:39:53.121Z","8.0.1":"2016-07-20T23:32:36.571Z","8.0.2":"2016-07-20T23:46:20.459Z","8.0.3":"2016-08-01T10:54:16.384Z","8.0.4":"2016-08-02T04:07:59.643Z","8.1.0":"2016-08-27T06:32:27.879Z","8.1.1":"2016-08-27T06:38:04.947Z","8.2.0":"2016-09-20T17:51:42.245Z","9.0.0":"2016-12-09T05:36:21.074Z","9.1.0":"2017-02-09T03:31:57.825Z"},"users":{"markbroadhead":true,"nsisodiya":true,"shanewholloway":true,"pnevares":true,"knksmith57":true,"panlw":true}}}