{"name":"express-http-response","version":"0.0.8","description":"Node.js response middleware to provide a standard response output","main":"./lib/index.js","repository":"https://github.com/danielemoraschi/express-http-response","keywords":["express","expressjs","middleware","http","http response","json"],"license":"MIT","devDependencies":{"chai":"^1.9.1","mocha":"^1.21.4","istanbul":"^0.3.0"},"scripts":{"prepublish":"npm prune","test":"mocha --reporter spec --bail --check-leaks --require test/support/should test/","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks --require test/support/should test/"},"versions":[{"number":"0.0.2","date":"2015-07-27T19:21:55.458Z"},{"number":"0.0.3","date":"2015-07-27T21:45:43.932Z"},{"number":"0.0.4","date":"2015-07-27T22:50:45.523Z"},{"number":"0.0.5","date":"2015-07-27T22:58:20.811Z"},{"number":"0.0.7","date":"2015-07-30T18:22:59.119Z"},{"number":"0.0.8","date":"2015-07-30T18:28:37.439Z"}],"readme":"# express-http-response\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![MIT License][license-image]][license-url]\n\n> Node.js http response middleware to provide a standard response output.\n\n## Install\n\n```bash\nnpm install --save http-response-middleware\n```\n\n## Example\n\n```js\n// # app.js\nvar express = require('express');\nvar httpResponse = require('express-http-response');\n\nvar BadRequestResponse = httpResponse.BadRequestResponse;\nvar OkResponse = httpResponse.OkResponse;\nvar app = express();\n\napp.get('/users', function(req, res, next) {\n\n    if (req.missing_parameter) {\n        throw new BadRequestResponse('Missing required parameter.');\n        /**\n        which will return:\n        Header status code: 400\n        {\n            type: \"BadRequestResponse\",\n            message: \"Missing required parameter.\",\n            status: 400,\n            success: false\n        }\n        logging to console.error\n        */\n    }\n\n    next(new OkResponse({\n        users: { /* ... */ },\n        page: 1,\n        total: 42\n    }));\n\n    /**\n    which will return:\n    Header status code: 200\n    {\n        type: \"OkResponse\",\n        message: \"OK\",\n        status: 200,\n        success: true,\n        data: {\n            users: { },\n            page: 1,\n            total: 42\n        }\n    }\n    */\n\n});\n\n// keep this after all routes that will use the response object\napp.use(httpResponse.Middleware);\n\napp.listen(3000);\n```\n\n## API\n\n### `Middleware`\n\nThe middleware will parse the thrown response returning to the user with a standard json response.\n\n```js\nvar httpResponse = require('express-http-response');\nvar express = require('express');\nvar app = express();\n\n/** [app routes] */\n\napp.use(httpResponse.Middleware);\n```\n\n### `HttpResponse`\n\n```js\nvar HttpResponse = require('express-http-response').HttpResponse;\n\nvar response = new HttpResponse (data, message, httpStatusCode, errorCode, moreInfo, success);\n\n/*\nresponse == {\n    type: \"HttpResponse\",     // String\n    data: `data`,             // Mixed/Object | not present if undefined\n    message: `message`,       // String\n    status: `httpStatusCode`, // Int\n    code: `errorCode`,        // Mixed/Object | not present if undefined\n    moreInfo: `moreInfo`,     // Mixed/Object | not present if undefined\n    success: `success`        // Boolean, false by default\n}\n*/\n```\n\n### `OkResponse`\n\n```js\nvar OkResponse = require('express-http-response').OkResponse;\n\nvar response = new OkResponse (data, message, moreInfo);\n\n/*\nresponse == {\n    type: \"OkResponse\",       // String\n    data: `data`,             // Mixed/Object | not present if undefined\n    message: `message`,       // String\n    status: 200,              // Int\n    moreInfo: `moreInfo`,     // Mixed/Object | not present if undefined\n    success: true             // Boolean\n}\n*/\n```\n\n### `BadRequestResponse`\n\n```js\nvar BadRequestResponse = require('express-http-response').BadRequestResponse;\n\nvar response = new BadRequestResponse (message, errorCode, moreInfo);\n\n/*\nresponse == {\n    type: \"BadRequestResponse\", // String\n    message: `message`,       // String\n    status: 400,              // Int\n    moreInfo: `moreInfo`,     // Mixed/Object | not present if undefined\n    success: false            // Boolean\n}\n*/\n```\n\n### `UnauthorizedResponse`\n\n```js\nvar UnauthorizedResponse = require('express-http-response').UnauthorizedResponse;\n\nvar response = new UnauthorizedResponse (message, errorCode, moreInfo);\n\n/*\nresponse == {\n    type: \"UnauthorizedResponse\", // String\n    message: `message`,       // String\n    status: 401,              // Int\n    moreInfo: `moreInfo`,     // Mixed/Object | not present if undefined\n    success: false            // Boolean\n}\n*/\n```\n\n### `ForbiddenResponse`\n\n```js\nvar ForbiddenResponse = require('express-http-response').ForbiddenResponse;\n\nvar response = new ForbiddenResponse (message, errorCode, moreInfo);\n\n/*\nresponse == {\n    type: \"ForbiddenResponse\", // String\n    message: `message`,       // String\n    status: 403,              // Int\n    moreInfo: `moreInfo`,     // Mixed/Object | not present if undefined\n    success: false            // Boolean\n}\n*/\n```\n\n### `NotFoundResponse`\n\n```js\nvar NotFoundResponse = require('express-http-response').NotFoundResponse;\n\nvar response = new NotFoundResponse (message, errorCode, moreInfo);\n\n/*\nresponse == {\n    type: \"NotFoundResponse\", // String\n    message: `message`,       // String\n    status: 404,              // Int\n    moreInfo: `moreInfo`,     // Mixed/Object | not present if undefined\n    success: false            // Boolean\n}\n*/\n```\n\n### `MethodNotAllowedResponse`\n\n```js\nvar MethodNotAllowedResponse = require('express-http-response').MethodNotAllowedResponse;\n\nvar response = new MethodNotAllowedResponse (message, errorCode, moreInfo);\n\n/*\nresponse == {\n    type: \"MethodNotAllowedResponse\", // String\n    message: `message`,       // String\n    status: 405,              // Int\n    moreInfo: `moreInfo`,     // Mixed/Object | not present if undefined\n    success: false            // Boolean\n}\n*/\n```\n\n### `ConflictResponse`\n\n```js\nvar ConflictResponse = require('express-http-response').ConflictResponse;\n\nvar response = new ConflictResponse (message, errorCode, moreInfo);\n\n/*\nresponse == {\n    type: \"ConflictResponse\", // String\n    message: `message`,       // String\n    status: 409,              // Int\n    moreInfo: `moreInfo`,     // Mixed/Object | not present if undefined\n    success: false            // Boolean\n}\n*/\n```\n\n### `InternalServerErrorResponse`\n\n```js\nvar InternalServerErrorResponse = require('express-http-response').InternalServerErrorResponse;\n\nvar response = new InternalServerErrorResponse (message, errorCode, moreInfo);\n\n/*\nresponse == {\n    type: \"InternalServerErrorResponse\", // String\n    message: `message`,       // String\n    status: 500,              // Int\n    moreInfo: `moreInfo`,     // Mixed/Object | not present if undefined\n    success: false            // Boolean\n}\n*/\n```\n\n## License\n\n[MIT][license-url]\n\n[npm-image]: https://img.shields.io/npm/v/express-http-response.svg?style=flat\n[npm-url]: https://npmjs.org/package/express-http-response\n[travis-image]: https://img.shields.io/travis/danielemoraschi/express-http-response.svg?style=flat\n[travis-url]: https://travis-ci.org/danielemoraschi/express-http-response\n[coveralls-image]: https://img.shields.io/coveralls/danielemoraschi/express-http-response.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/danielemoraschi/express-http-response?branch=master\n[downloads-image]: http://img.shields.io/npm/dm/express-http-response.svg?style=flat\n[downloads-url]: https://npmjs.org/package/express-http-response\n[license-image]: http://img.shields.io/badge/license-MIT-blue.svg?style=flat\n[license-url]: LICENSE\n","created":"2015-07-27T19:21:55.458Z","modified":"2015-07-30T18:28:37.439Z","lastPublisher":{"name":"dmoraschi","email":"daniele.moraschi@gmail.com"},"owners":[{"name":"dmoraschi","email":"daniele.moraschi@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"express-http-response","_npmUser":{"name":"dmoraschi","email":"daniele.moraschi@gmail.com"},"_npmVersion":"1.3.6","_rev":"1-372d71ca8167d74b719243dc8197c9de","author":{"name":"Daniele Moraschi","email":"daniele.moraschi@gmail.com"},"bugs":{"url":"https://github.com/danielemoraschi/express-http-response/issues"},"directories":{},"dist-tags":{"latest":"0.0.8"},"dist":{"shasum":"a5f721dce4dabdd5e1ef8b0bb4c5fad1f66e5569","tarball":"http://registry.npmjs.org/express-http-response/-/express-http-response-0.0.8.tgz"},"maintainers":[{"name":"dmoraschi","email":"daniele.moraschi@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-07-30T18:28:37.439Z","created":"2015-07-27T19:21:55.458Z","0.0.2":"2015-07-27T19:21:55.458Z","0.0.3":"2015-07-27T21:45:43.932Z","0.0.4":"2015-07-27T22:50:45.523Z","0.0.5":"2015-07-27T22:58:20.811Z","0.0.7":"2015-07-30T18:22:59.119Z","0.0.8":"2015-07-30T18:28:37.439Z"}}}