{"name":"chickendinosaur-http","version":"0.0.5","description":"Front-end, super slim, ajax, xhr, http library with promises.","main":"src/Http.js","files":["src/","dist/","LICENSE","README"],"repository":"https://github.com/JohnPittman/http-js","keywords":["fast","optimized","umd","universal","modular","js","module","javascript","chickendinosaur","ajax","http","promises","json","asyncronous","xhr","xmlxhrhttprequest"],"license":"MIT","homepage":"https://github.com/JohnPittman/http-js","devDependencies":{"gulp":"*","packagebuilder":"*"},"dependencies":{"es6-promise":"*"},"gitHead":"c7f94d4b13f907d82e4828edd3ed2930109dcc6c","scripts":{},"versions":[{"number":"0.0.4","date":"2014-12-10T00:27:07.235Z"},{"number":"0.0.5","date":"2014-12-10T01:38:43.166Z"}],"readme":"http-js\r\n=======\r\n\r\nFront-end, super slim, singleton, , http library with promises. The goal was to have a lightweight http library without having to use jQuery or having too many dependencies of libraries that will never get used anywhere else but still get loaded. Less is more!\r\n\r\n<h1>Notes</h1>\r\n\r\nUniversal module defined to be used with <b>requirejs</b>, <b>commonjs</b>, <b>node</b>, or <b>global scoped</b> if no module loader is used.\r\n\r\n- All files in the <b>dist</b> folder are minified for <b>production</b> use.\r\n- All files in the <b>src</b> directory are the source code for <b>development</b> use.\r\n- Packages point at the <b>dist</b> minified code with <b>source maps</b>.\r\n\r\n<h1>Development</h1>\r\n\r\n<h4>Requirements</h4>\r\n\r\n- nodejs\r\n- npm install\r\n- npm install -g gulp\r\n\r\n<h4>Test</h4>\r\n\r\ngulp test\r\n\r\n<h4>Gulp Commands</h4>\r\n\r\nEach process is dependent upon the previous. If one fails the build process exits.\r\n\r\n- gulp\r\n- gulp test (Unit specifications)\r\n- gulp build (Test, folder clean-ups, minification, source maps, renaming)\r\n- gulp deploy (Test, build, versioning)\r\n\r\n<h1>Usage</h1>\r\n\r\n<h4>Installation</h4>\r\n\r\nbower: bower install chickendinosaur-http\r\n\r\n<h4>How to use...</h4>\r\n\r\nUses the es6-promise library which is a smaller subset of the [RSVP](https://github.com/tildeio/rsvp.js) promise library so please check the documentation of those for more functionality. It's the smallest and most used library that I was able to find at the moment without writing my own.\r\n\r\n\t// Global usage.\r\n\tvar Http = ChickenDinosaur.Http;\r\n\r\n\t// Basic 'GET' with a query parameter.\r\n\tHttp.get('chickenosaurus' {\r\n\t    id: 'Snow Piercer'\r\n\t}).then(function(res) {\r\n\t    // res is the XHR.responseText object which has already parsed by JSON.parse if the response was JSON.\r\n\t    console.log(res);\r\n\t}, function(err) {\r\n\t    // err is the entire XHR object to be able to access anything needed for debugging.\r\n\t    console.log(err);\r\n\t});\r\n\r\n\t// Promise chaining\r\n\tHttp.get('chickenosaurus' {\r\n        id: 'Snow Piercer'\r\n    })\r\n    .then(function(res) {\r\n            // res is the XHR.responseText object which has already parsed by JSON.parse if the response was JSON.\r\n            console.log(res);\r\n\r\n            return Http.post('chickenosaurus', {\r\n                name: 'Dylan Riley',\r\n                skills: ['Sand Shredding', 'Skimming'],\r\n                diet: 'Wild Turkey.',\r\n                alias: 'Popcorn Frog'\r\n            });\r\n        },\r\n        function(err) {\r\n            // err is the entire XHR object to be able to access anything needed for debugging.\r\n            console.log(err);\r\n        })\r\n    .then(function(res) {\r\n            // res is the XHR.responseText object which has already parsed by JSON.parse if the response was JSON.\r\n            console.log(res);\r\n\r\n            return Http.put('chickenosaurus', {\r\n                name: 'Kevin Fincel',\r\n                skills: ['Killing everything in South Dakota', 'Nerdpress'],\r\n                diet: 'Jalepeno infused vodka.',\r\n                alias: 'The Incubationer'\r\n            }, {\r\n                id: '3452EW3453UN5'\r\n            });\r\n        },\r\n        function(err) {\r\n            // err is the entire XHR object to be able to access anything needed for debugging.\r\n            console.log(err);\r\n        })\r\n    .then(function(res) {\r\n            // res is the XHR.responseText object which has already parsed by JSON.parse if the response was JSON.\r\n            console.log(res);\r\n\r\n            return Http.delete('chickenosaurus', {\r\n                id: '3452EW3453UN5'\r\n            });\r\n        },\r\n        function(err) {\r\n            // err is the entire XHR object to be able to access anything needed for debugging.\r\n            console.log(err);\r\n        })\r\n    .then(function(res) {\r\n            // res is the XHR.responseText object which has already parsed by JSON.parse if the response was JSON.\r\n            console.log(res);\r\n\r\n            return Http.delete('chickenosaurus', {\r\n                id: '3452EW3453UN5'\r\n            });\r\n        },\r\n        function(err) {\r\n            // err is the entire XHR object to be able to access anything needed for debugging.\r\n            console.log(err);\r\n        });\r\n\r\nYou could create each Http call seperately like:\r\n\r\n    \tES6Promise.all([promise1, promise2])\r\n    \t.then(function(posts){\r\n    \t\t// posts is an array of results.\r\n    \t\t})\r\n    \t.catch(function(reason){\r\n    \t\t// if any promise fails.\r\n    \t\t});\r\n\r\nand have a single callback when they all have received a response or error thanks to the promise library which is the reason I went with it due to have needed the extra functionality for resolving multiple things in enterprise projects.\r\n\r\n<h1>Release Notes</h1>\r\n\r\n<h3>v0.0.1</h3>\r\n","created":"2014-12-10T00:27:07.235Z","modified":"2014-12-10T01:38:43.166Z","lastPublisher":{"name":"johnpittman","email":"johnrichardpittman@gmail.com"},"owners":[{"name":"johnpittman","email":"johnrichardpittman@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"chickendinosaur-http","_npmUser":{"name":"johnpittman","email":"johnrichardpittman@gmail.com"},"_npmVersion":"1.4.23","_rev":"1-89f61223fc0a50247c8e60ab550f1ad8","_shasum":"251b0adc30b2de01e8aeb8de50d8d2804a9c11b4","author":{"name":"John Pittman"},"bugs":{"url":"https://github.com/JohnPittman/http-js/issues"},"directories":{},"dist-tags":{"latest":"0.0.5"},"dist":{"shasum":"251b0adc30b2de01e8aeb8de50d8d2804a9c11b4","tarball":"http://registry.npmjs.org/chickendinosaur-http/-/chickendinosaur-http-0.0.5.tgz"},"maintainers":[{"name":"johnpittman","email":"johnrichardpittman@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-12-10T01:38:43.166Z","created":"2014-12-10T00:27:07.235Z","0.0.4":"2014-12-10T00:27:07.235Z","0.0.5":"2014-12-10T01:38:43.166Z"}}}