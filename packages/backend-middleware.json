{"name":"backend-middleware","version":"17.3.2","description":"The nodejs server middleware that serves json documents as http resources for user-defined or restful urls. Helps with developing web application html/js clients that will communicate with a backend serving the data user interface needs by mocking the bac","main":"src/middleware.js","scripts":{"test":"./node_modules/mocha/bin/mocha --recursive ./test/**","test:watch":"./node_modules/mocha/bin/mocha -w --recursive ./test/**","debug":"node-debug example/server/server.js example/ true","start":"node example/server/server.js example/ true"},"repository":"https://github.com/michr-cri/backend-middleware","keywords":["backend","middleware","backend-middleware","mock-backend","backend","mock-data","backend-data","restful-backend","rest","restful","rest-backend","json-resource-backend"],"license":"SEE LICENSE IN LICENSE","homepage":"https://github.com/michr-cri/backend-middleware#readme","devDependencies":{"browser-sync":"2.18.6","chai":"3.5.0","eslint":"3.13.1","eslint-config-standard":"6.2.1","eslint-plugin-promise":"3.4.0","eslint-plugin-standard":"2.0.1","mocha":"3.2.0","proxyquire":"^1.7.10","sinon":"^1.17.7"},"dependencies":{"body-parser":"1.16.0","moment":"^2.17.1","underscore":"^1.8.3","uniloc-michr-fork":"^0.3.2"},"gitHead":"51861297361afb6acf0545453b902fcf9ee81de0","versions":[{"number":"17.2.17","date":"2017-02-17T22:48:59.373Z"},{"number":"17.2.23","date":"2017-02-23T22:03:24.187Z"},{"number":"17.3.2","date":"2017-03-02T23:12:29.816Z"}],"readme":"# Why would you need backend-middleware?\n\nWhen this module is added as middleware to any nodejs http server it intercepts http requests and returns responses configured by the user. Then you can easily build and test your UI application making http requests to get data to bind to.  \n\n## Example use case\n\nYour application UI needs a json response after making a request to: https://mycompany.com/myAppContextPath/employees/1223  \nYou will need to write a server application that will respond to an HTTP request and return an http resource in json format implied by the url. That is sometimes too much work. However, if you are already building your UI and testing it using nodejs then you can use backend-middleware with a basic configuration to return a json document (object) for the urls such as https://mycompany.com/myAppContextPath/employees (identifies employees list), https://mycompany.com/myAppContextPath/employees/1223 (identifies employee with id 1223).\n\n\n# Quick Start\n\n## Installation\n\n```\nnpm install backend-middleware\n```\n\n## Usage\n\nYou need to use body-parser middleware for backend-middleware to work with json objects in http request body.\n\n```javascript\nvar bodyParser = require('body-parser');\nvar backendMiddleware = require('backend-middleware');\nvar config = {\n    dataFiles: {\n        path: './example/middleware-config/data',\n        extension: '.json'\n    },\n    resourceUrlParamMapFiles: {\n        path: './example/middleware-config/mapping',\n        extension: '.map.json'\n    }\n};\n//to insert the pre-req middleware functions e.g.: when using express\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended:true}));\napp.use(backendMiddleware.create(config));\n//When using browsersync, see the example application bundled with the project. (see the server.js under example/server folder)\n````\nThe two configuration parameters you have to specify at a minimum are your data file and resource to url parameter mapping.  \n\n_**dataFiles**_ specifies the location and type of files containing resource representations in JSON. The dataFiles can be viewed as your database which can be queried by the url expressions.    \nFrom the config above if the following was in <project_root_folder>/example/middleware-config/data/employees.json then https://..../backend-middleware/employees would return what was in that file as json. _The file names should be the same as the resource names you would expect in the url using the extension you specified in the config object._\n\n* **When the data files are read, if the mapping file designates an attribute to be of date type then those values will be converted to long numeric date representations using moment.js library and the date format specified in the config (_urlParameterDateFormat_) then stored.**\n```javascript\n[\n    {\n        \"id\":99,\n        \"firstName\":\"John\",\n        \"lastName\":\"Doe\",\n        \"birthDate\": \"1970-12-31\",\n        \"boss\":{\n            \"id\":1001,\n            \"firstName\":\"Jackie\",\n            \"lastName\":\"Chan\",\n            \"team\":{\n                \"id\":100,\n                \"name\":\"Awesome\"\n            }\n        }\n    },\n    {\n        \"id\":100,\n        \"firstName\":\"Jane\",\n        \"lastName\":\"Doe\",\n        \"birthDate\": \"1965-11-21\",\n        \"boss\":{\n            \"id\":1001,\n            \"firstName\":\"Jackie\",\n            \"lastName\":\"Chan\",\n            \"team\":{\n                \"id\":100,\n                \"name\":\"Awesome\"\n            }\n        }\n    }\n]\n```\n\n_**resourceUrlParamMapFiles**_ specifies location and type of files containing the info about which url parameter or url query string parameter maps to which resource attribute. The keys of the map are the query parameter names. The values are objects that specifies the resource attribute name, type and if it is a primary key.   \nIf the resource you are querying is inside another object, the attribute name is the JSON path to that resource attribute using dot notation. _The file names should be the same as the resource names you would expect in the url using the extension you specified in the config object._  \nGiven the data file example above the following can be in <project_root_folder>/example/middleware-config/mapping/employees.map.json file\n\nWhen type attribute is not specified it defaults to \"string\". The types other than string are: \"numeric\", \"date\" \n```javascript\n{\n    \"employee-id\":{\n        \"attribute\":\"id\",\n        \"type\":\"numeric\",\n        \"key\":true\n    },\n    \"last-name\":{\n        \"attribute\":\"lastName\"\n    },\n   \n    \"boss-id\":{\n        \"attribute\":\"boss.id\",\n        \"type\":\"numeric\"\n    }\n}\n```  \n\n### Dissecting the Url Parameter to Resource Attribute Mapping\nNow the backend-middleware would:  \nreturn the first employee in the data file (as a single object) when the url ../backend-middleware/employees/99 is called.  \nreturn the second employee in the data file (in an array) when the url ../backend-middleware/employees?last-name=Doe&boss-id=1001 is called.\n\n\nThe key for the mapping will be the url parameter i.e. 'last-name' and 'boss-id'. The value of 'last-name' will be like. When type is not specified it defaults to string. \n```javascript\n\"last-name\": {\n    \"attribute\":\"lastName\"\n}\n```\nSince \"boss-id\" refers to an attribute inside another object, we need to use JSON path as the attribute such as \"boss.id\".  \n```javascript\n\"boss-id\":{\n    \"attribute\":\"boss.id\",\n    \"type\":\"numeric\"\n}\n```\n\n\nThe default context path when making calls to the backend-middleware is /backend-middleware. The context path is configurable, you can specify any other string for it. (See the configuration section of the documentation)\n\nSee the example app for more details about the mapping files under example/middleware-config/mapping\n\n# Other configurations  \n\n## routes and handlers  \n\nGood number of times you will need to add your own routes and handlers because the default behavior of the backend-middleware will not be responding to different use cases.  \nFor example, the request to get a list employees is https://mycompany.com/myAppContextPath/departments/5/employees. The default behavior is that \"departments\" is a resource name so there should be a corresponding data and url parameter mapping file and 5 is the id of the json object to be returned from the file and \"employees\" will be ignored unless you can change the deafult url handling behavior.   \nIn order to handle requests like this, you need to write your own routes and handlers and specify _**routes**_ and _**handlers**_ in the config by requiring them when creating backend-middleware object.  \nAn example of _**routes**_ to handle the request may be like  \n\n```javascript\nvar routes = {\n    'getEmployees': 'GET /:parentResourceName/:departmentId/:childResourceName'\n};\nmodule.exports = routes;\n```\n\nAn example of _**handlers**_ that handles the routes will be like\n\n```javascript\nvar handlers = {\n    getEmployees: function(handlerPayload, responseTransformerCallback) {\n        //handlerPayLoad is created by the constructor function below\n        /*\n        function(request,urlParameters,parameterMapper){\n              // The request object passed by nodejs to backend-middleware\n              this.request = request; \n              \n              // url parameter/query string parameter name value map extracted from the url. \n              //e.g.: From the example above you can access departmentId from the url using handlerPayLoad.urlParameters.departmentId\n              this.urlParameters = urlParameters;\n              \n              //Instance of ResourceParameterMapper (resource.parameter.mapper.js) which reads url parameter mapper files to return a json object good for matching with the json objects specified in the corresponding data file.\n              this.parameterMapper = parameterMapper;                \n        };\n        */\n\n        // your handler implementation.....\n        var urlParameters= handlerPayload.urlParameters;\n        var parameterMapper = handlerPayload.parameterMapper;\n        var parentResourceName = urlParameters.parentResourceName;\n        var childResourceName = urlParameters.childResourceName;\n        // All data files are read into an object whose keys are the data file names without extension and values are \n        // what's inside the file. That object is globally exported for it to be available to your code so that you can \n        // easily write data access objects or directly query. (global.DATABASE)\n        var allParentObjects = global.DATABASE[parentResourceName];\n       \n        var dataQueryingObject = handlerPayload.parameterMapper.toResourceDaoQueryObject(parentResourceName,handlerPayload.urlParameters);\n        if(handlerPayload.parameterMapper.isQueryById(parentResourceName,handlerPayload.urlParameters)){\n            /*\n             * .... using allParentObjects and dataQueryingObject find the object matching (result) and return result[childResourceName]\n             */\n        }\n        else{\n            throw new 'No id specified for the resource.';\n        }\n    }\n};\nmodule.exports = handlers;\n```  \n\n## contextPath  \nSpecifies the context path after your server domain. _**The default value is backend-middleware**_. This will replace 'myAppContextPath' in our examples in this README  \n## urlParameterDateFormat  \nSpecifies the date format in your url parameters. **_The default value is 'YYYY-MM-DDThh.mm.ss.sss'**_  Because we are using moment.js to do date/time conversions, you can lookup date/time formats from [moment.js web site](https://momentjs.com/).\nFor example, if your request is https://mycompany.com/myAppContextPath/department/employees?dob='1975/02/01', you need to set _**urlParameterDateFormat**_ to 'YYYY/MM/DD' so that the date parameter will be extracted correctly.  \n## responseTransformerCallback  \nSpecifies a callback to process the response before returning to the client side. This will allow you to transform the response any way you want. See the example app for a server side pagination example. The function signature for a response transformer is the same as handler signature:\n```javascript\nfunction (handlerPayload, handlerResponse) {\n// For the explanation of handlerPayload see the handle example above\n//handlerResponse is specified by the constructor function in handler.response.js as below(The response that would eventually be returned by backend middleware):\n/*\nfunction (httpStatusCode, httpHeadersMap, body, resourceName) {\n    this.statusCode = httpStatusCode;\n    this.headers = httpHeadersMap;\n    this.body = body;\n    this.resourceName = resourceName;\n};\n*/\n}\n```\n\n# Example app  \n\n## How to run  \n```\nnpm start\n```  \n\n## URLs  \n* get all employees: https://localhost:3000/employees  \n* get one employee by id: https://localhost:3000/employees/1 (you can also try id 2, 3 and 4)\n* get employees by query string: https://localhost:3000/employees?last-name='Doe'&boss-id=10 (check the data file: middleware-config/data/employees.json for more details)\n* get employees by query string (server side pagination): https://localhost:3000/employees?last-name='Doe'&boss-id=10&page=1&page-size=5  \n\n&nbsp;&nbsp;&nbsp;&nbsp; **If the same query string parameter is specified multiple times, by default numeric and date parameters uses \"between\" operator if parameter is repeated twice or uses \"in\" operator.**\n* get employees whose birth date is between 1970-12-31 and 1965-01-01: https://localhost:3000/employees?dob=1970-12-31&dob=1965-01-01\n* get employees whose birth date is one of 1970-12-31, 1967-11-01, 1978-01-01: https://localhost:3000/employees?dob=1970-12-31&dob=1965-01-01&dob=1978-01-01  \n* login (need to use something like Postman to send a POST request, valid usernames and passwords are in example/middleware-config/users.json): https://localhost:3000/login\n\n## Files  \n* main file: _example/server/server.js_\n* data files: _example/middleware-config/data_\n* url parameter to resource attribute mapping files: _example/middleware-config/mapping_\n* customized routes: _example/routes.js_\n* customized handlers: _example/handlers.js_\n* customized response transformer: _example/response.transformer.js_\n* valid usernames and passwords for testing login: _example/middleware-config/users.json_\n\n","created":"2017-02-17T22:48:59.373Z","modified":"2017-03-02T23:12:29.816Z","lastPublisher":{"name":"michr","email":"michr-github@umich.edu"},"owners":[{"name":"michr","email":"michr-github@umich.edu"}],"other":{"_attachments":{},"_from":".","_id":"backend-middleware","_nodeVersion":"7.2.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/backend-middleware-17.3.2.tgz_1488496347777_0.21949543477967381"},"_npmUser":{"name":"michr","email":"michr-github@umich.edu"},"_npmVersion":"4.0.3","_rev":"6-bf1778cb5b849be2b264a1571809a244","_shasum":"3d817be5b94c2546004e4bb4106103b141f9920c","author":{"name":"Michigan Institute for Clinical & Health Research","url":"https://www.michr.umich.edu"},"bugs":{"url":"https://github.com/michr-cri/backend-middleware/issues"},"contributors":[{"name":"Melih Gunal","email":"gunalmel@umich.edu"},{"name":"Tianyun Zhang","email":"tianyunz@umich.edu"},{"name":"Raden Tonev","email":"rtonev@umich.edu"}],"directories":{},"dist-tags":{"latest":"17.3.2"},"dist":{"shasum":"3d817be5b94c2546004e4bb4106103b141f9920c","tarball":"https://registry.npmjs.org/backend-middleware/-/backend-middleware-17.3.2.tgz"},"maintainers":[{"name":"michr","email":"michr-github@umich.edu"}],"readmeFilename":"README.md","time":{"modified":"2017-03-02T23:12:29.816Z","created":"2017-02-17T22:48:59.373Z","17.2.17":"2017-02-17T22:48:59.373Z","17.2.23":"2017-02-23T22:03:24.187Z","17.3.2":"2017-03-02T23:12:29.816Z"}}}