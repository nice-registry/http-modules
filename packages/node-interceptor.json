{"name":"node-interceptor","version":"0.0.2","description":"HTTP & HTTPS request interceptor that allows to define which fixture (JSON object) to return, inspired by jQuery.fixture, thegreatape/fakeweb and ppcano/fixtures.","keywords":["testing","http interception","mocking"],"main":"interceptor","repository":"https://github.com/dearwish/node-interceptor","dependencies":{"deep-equal":"*","node-fixtures":"*","nodeunit":">=0.5.1"},"readme":"HTTP & HTTPS request interceptor. Allows to define which fixture (JSON object) to return for each request, inspired by [jQuery.fixture][3], [thegreatape/fakeweb][1] and [ppcano/fixtures][2].\r\n\r\n# Installation\r\n\r\n    npm install node-interceptor\r\n\r\n# Testing\r\n\r\n    git clone git://github.com/dearwish/node-interceptor.git\r\n    cd node-interceptor\r\n    npm install\r\n    npm test\r\n\r\n# Examples\r\n\r\n## 1. Registers a list of interception rules to spoof <code>HTTPS</code> requests to [Facebook Graph API][graphapi]:\r\n\r\n### This example is using the node-fixtures module for reading JSON objects from &lt;your-app&gt;/test/fixtures/*.js or *.json.\r\n\r\n#### Using <i>registerAll</i> which accepts an <code>Array</code> of interception rules and registers them one by one.\r\n\r\n    // Setup the <b>Interceptor</b> on HTTP and HTTPS protocols.\r\n    var interceptor = require('node-interceptor'),\r\n        // Fixtures are already preloaded\r\n        fixtures = interceptor.fixtures,\r\n        https = require('https');\r\n\r\n    https.Interceptor.registerAll([{ \r\n\r\n#### Mandatory\r\n\r\n        // properties checked to qualify a request for interception\r\n        test: {\r\n            // uri can be a string or regular expression\r\n            uri: '/' + process.env.FACEBOOK_APP_ID,\r\n            host: 'graph.facebook.com'\r\n        },\r\n\r\n#### Optional (with defaults)\r\n\r\n        // request property names to ignore\r\n        ignored: [\"headers\"],\r\n\r\n        // response properties to be returned\r\n        response: {\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(fixtures.app),\r\n            statusCode: 200\r\n        }}, {\r\n\r\n#### Using regular expression for URI matching:\r\n\r\n        test: {\r\n            // uri can be a regular expression (starts with \"/me\" in this case)\r\n            uri: /^\\/me/,\r\n            host: 'graph.facebook.com'\r\n        },\r\n        response: {\r\n            body: JSON.stringify(fixtures.me)\r\n        }}, {\r\n\r\n#### Using plain text as output body:\r\n\r\n        test: {\r\n            uri: '/you',\r\n            host: 'graph.facebook.com'\r\n        },\r\n        response: {\r\n            headers: {'Content-Type': 'text/plain'},\r\n            body: 'Unknown API call attempt!',\r\n            statusCode: 404\r\n        }\r\n    }]);\r\n\r\n#### Using <i>```register```</i> to register a single interception rule.\r\n\r\n    // This time an HTTP request\r\n    var http = require('http');\r\n\r\n    http.Interceptor.register({\r\n        test: {\r\n            uri: '/me/friends',\r\n            host: 'graph.facebook.com'\r\n        },\r\n\r\n        ignored: [\"headers\"],\r\n\r\n        response: {\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(fixtures.friends),\r\n            statusCode: 200\r\n        }\r\n    });\r\n\r\n#### Using <i>```unregister```</i> to unregister a single interception rule.\r\n\r\n    http.Interceptor.unregister({\r\n        // The test is required and it should match the registration rule.test\r\n        test: {\r\n            uri: '/me',\r\n            host: 'graph.facebook.com'\r\n        }\r\n    });\r\n\r\n#### Using <i>```unregisterAll```</i> or <i>```clear```</i> to unregister all interception rules.\r\n\r\n    http.Interceptor.unregisterAll();\r\n\r\n    // OR\r\n\r\n    http.Interceptor.clear();\r\n\r\n#### Providing a list of headers that will be compared using [```deep-equal```][deq] with the actual request headers.\r\n\r\n    rule: {\r\n        test: {\r\n            headers: {'Accept': '*/*', 'Content-Type': 'application/json'}\r\n            uri: '/me/friends',\r\n            host: 'graph.facebook.com'\r\n        },\r\n     ...\r\n\r\n#### Providing a list of custom headers that will be sent to the response.\r\n\r\n    rule: {\r\n        response: {\r\n            headers: {\r\n                'Set-Cookie': 'AuthSessId=41D3D0110BA61CB171B345F147C089BD; path=/',\r\n                'Content-Type': 'application/json'\r\n            }\r\n            uri: /^\\/dialog\\/oauth/,\r\n            host: 'www.facebook.com'\r\n        },\r\n     ...\r\n\r\n## 2. Sets defaults for all Interceptor instances\r\n\r\n### Default values defined in Interceptor are:\r\n\r\n    {\r\n        response: {\r\n            headers: {'Content-Type': 'application/json'},\r\n            statusCode: 200,\r\n            body: ''\r\n        },\r\n        ignored: [\"headers\"]\r\n    };\r\n\r\n### API to override default values\r\n\r\n#### Using <i>```getDefaults```</i> and <i>```setDefaults```</i> functions:\r\n\r\n    var interceptor = require('node-interceptor'),\r\n        Interceptor = interceptor.Interceptor,\r\n        ...;\r\n\r\n    var defaults = Interceptor.getDefaults();\r\n    defaults.ignored = [\"sweeties\"];\r\n    Interceptor.setDefaults(defaults);\r\n\r\n#### Using <i>```addDefaults```</i> to add more defaults to existing ones (defaults with the same name will be replaced):\r\n\r\n    Interceptor.addDefaults({\r\n        response: {\r\n            headers: {'Content-Type': 'text/html', 'Accept': \"*/*\"},\r\n            statusCode: 204\r\n        },\r\n        ignored: [\"headers\", \"footers\"]\r\n    });\r\n\r\n#### node-interceptor also provides a nodeunit test case that resets the uri intercept list in between tests. See ```tests/suits/testcase.js``` for an example.\r\n\r\n# Miscellaneous\r\n\r\n## Change log\r\n\r\n### version 0.0.2\r\n\r\n- Added Interceptor class\r\n- Both http and https have their own instance of Interceptor \r\n- Added status code to response\r\n- Added ```defaults``` configuration as static + API to modify them \r\n- Some bug fixes\r\n\r\n### version 0.0.1\r\n\r\n- Initial version - forked from [node-fakeweb][1]\r\n- Added HTTPS support\r\n- Integrated with fixtures (using [node-fixtures][fixtures] module)\r\n- Some bug fixes\r\n\r\n## Future enhancements\r\n\r\n1. Add Connect-like uri patterns mapping (i.e. \"/users/:id/edit\"). Currently it can be done using the regular expressions only.\r\n2. Add fixtures integration - the response messages will be read from .js or .json file that reside in application fixtures directory. Inspired by [ppcano's fixtures][2].\r\n3. Add dynamic fixtures similar to [jQuery.fixture][3].\r\n4. Add configuration on initialization\r\n    - to enable control over setup of interceptor on different protocols\r\n    - to give the ability not to initialize the fixtures\r\n\r\n## License\r\n\r\nMIT\r\n\r\n[1]: https://github.com/thegreatape/node-fakeweb\r\n[2]: https://github.com/ppcano/fixtures\r\n[3]: http://javascriptmvc.com/docs.html#!jQuery.fixture\r\n[graphapi]: https://developers.facebook.com/docs/reference/api/\r\n[fixtures]: https://github.com/dearwish/node-fixtures\r\n[deq]: https://github.com/substack/node-deep-equal","versions":[{"number":"0.0.2","date":"2012-11-29T01:00:41.863Z"}],"created":"2012-11-29T01:00:38.143Z","modified":"2012-11-29T01:00:41.863Z","lastPublisher":{"name":"dearwish","email":"davewish@gmail.com"},"owners":[{"name":"dearwish","email":"davewish@gmail.com"}],"other":{"_attachments":{},"_from":"node-interceptor","_id":"node-interceptor","_npmUser":{"name":"dearwish","email":"davewish@gmail.com"},"_npmVersion":"1.1.62","_rev":"1-0a7d3df1307c89f7b90807b3eeabc6f4","author":{"name":"David Roberin","email":"davewish@gmail.com"},"directories":{},"dist-tags":{"latest":"0.0.2"},"dist":{"shasum":"79970a26a26d585e6bc702855f6a3712aa267996","tarball":"http://registry.npmjs.org/node-interceptor/-/node-interceptor-0.0.2.tgz"},"maintainers":[{"name":"dearwish","email":"davewish@gmail.com"}],"time":{"modified":"2012-11-29T01:00:41.863Z","created":"2012-11-29T01:00:38.143Z","0.0.2":"2012-11-29T01:00:41.863Z"}}}