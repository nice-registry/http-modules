{"name":"node-httpx","version":"0.4.0","description":"Provides a TLS-agnostic HTTP server and eliminates the redundancy in providing both secure and insecure servers.","main":"httpx.js","dependencies":{},"devDependencies":{},"scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["http","https","server","client","request","response","get"],"license":"MIT","repository":"https://github.com/natewatson999/httpx","homepage":"https://github.com/natewatson999/httpx","gitHead":"8ae3b7e1ea89b953ce082c56c7b15303e9994279","versions":[{"number":"0.1.0","date":"2015-04-09T16:36:29.455Z"},{"number":"0.1.1","date":"2015-04-09T17:34:39.361Z"},{"number":"0.1.2","date":"2015-04-09T18:52:39.664Z"},{"number":"0.1.3","date":"2015-04-09T18:55:46.799Z"},{"number":"0.1.4","date":"2015-04-09T18:58:39.886Z"},{"number":"0.1.5","date":"2015-04-10T04:22:49.669Z"},{"number":"0.1.7","date":"2015-04-10T04:54:26.589Z"},{"number":"0.1.8","date":"2015-04-10T04:59:55.917Z"},{"number":"0.1.9","date":"2015-04-10T16:43:02.731Z"},{"number":"0.1.10","date":"2015-04-10T16:44:13.446Z"},{"number":"0.2.0","date":"2015-04-10T16:47:30.966Z"},{"number":"0.2.1","date":"2015-04-10T17:59:34.481Z"},{"number":"0.3.0","date":"2015-04-13T18:56:02.119Z"},{"number":"0.3.1","date":"2015-04-13T19:33:38.984Z"},{"number":"0.4.0","date":"2015-04-16T17:27:58.170Z"}],"readme":"# node-httpx\r\nnode-httpx provides a nodejs library for managing http and https servers at the same time. It also provides http and https requests.\r\n\r\nThis module, httpx , is published under the MIT license. It was written by Nate Watson and Oluwafunmiwo Judah Sholola. \r\n\r\nnode-httpx was written in response to this change request: https://github.com/joyent/node/issues/8827\r\n\r\n## How to install node-httpx\r\n\r\n### Local install\r\n\r\n0. Navigate to the directory where the script is needed with \"cd *directory*\".\r\n\r\n1. Run the following command:\r\n\r\n```\r\nnpm install node-httpx\r\n```\r\n\r\n2. Verify the installation.\r\n\r\n### Global install\r\n\r\n0. Make sure you have the right to make global NPM installations. If you don't have it, get it.\r\n\r\n1. Run the following command:\r\n\r\n```\r\nnpm install -g node-httpx\r\n```\r\n\r\n2. Verify the installation.\r\n\r\n### Verifying The Installation\r\n\r\n0. Navigate to the directory node-httpx is installed in.\r\n\r\n1. Run the following command:\r\n\r\n```\r\nnode httpxTester.js\r\n```\r\n\r\n2. Read the printout. It should print out a massive webpage. If it does not, perform network diagnostics. If the network is working properly, file a bug on github for httpx.\r\n\r\n3. Open a browser on the same machine. Navigate to \"https://localhost\" or \"http://localhost\". Both work. Ignore any security errors.\r\n\r\n4. The page should load correctly, and the script should end. If one of these things fails to happen, check the network. If the network is working correctly, file a bug on github for httpx.\r\n\r\n5. Assuming you have not reached the \"file a bug on github\" statements, the script is installed correctly. If you have reached one of those, try reinstalling.\r\n\r\n## Introduction\r\n\r\n```\r\n\r\nvar httpx = require(\"./httpx.js\");\r\nvar fs = require(\"fs\");\r\nconsole.dir(httpx.STATUS_CODES);\r\nvar config = {};\r\nconfig.key = fs.readFileSync(\"./pd69744_privatekey.pem\");\r\nconfig.cert = fs.readFileSync(\"./pd69744_cert.pem\");\r\nvar testServer = httpx.createServer(config, function(req, res){\r\n\tres.writeHead(200, {'Connection': 'close'}); \r\n\tres.write(\"Hello World! I provided this page with a single module that takes a single callback function, and works with both HTTP and HTTPS. But I don't get overtime, so screw you world!\");\r\n\tres.end();\r\n\ttestServer.close(function(){console.log(\"goodbye\");});\r\n});\r\ntestServer.listen();\r\n\r\nvar options = {};\r\noptions.hostname = \"encrypted.google.com\";\r\noptions.path = \"/\";\r\noptions.method = \"get\";\r\nvar googleRequest = httpx.request(options, function(res){\r\n\tvar answer = \"\";\r\n\tres.on(\"data\", function(d){\r\n\t\tanswer += d;\r\n\t});\r\n\tres.on(\"end\", function(){\r\n\t\tconsole.log(answer);\r\n\t});\r\n}); \r\ngoogleRequest.write(\"text\");\r\ngoogleRequest.end();\r\nconsole.log(\"By some miracle, the script didn\\'t crash\");\r\n```\r\n\r\n## Status Codes\r\n\r\nNode-httpx provides http's status codes object:\r\n```\r\nconsole.dir(httpx.STATUS_CODES);\r\n```\r\n\r\n## httpx.createServer\r\n\r\n```\r\nhttpx.createServer(config, function(req, res) {\r\n\r\n});\r\n```\r\n\r\nThis follows the same general behavior as https.createServer.\r\n\r\n### httpx.createServer config\r\n\r\nThis is the configuration object for this server. The following members are required:\r\n* key : this is the private key used for dealing with https requests. REQUIRED.\r\n* cert : this is the certificate used for dealing with https requests. REQUIRED.\r\n* httpPort : the port for http traffic. Default: 80.\r\n* httpsPort : the port for https traffic. default: 443.\r\n* address : the address to listen to. default: \"::\", meaning everything from IPv4 and IPv6.\r\n\r\n### httpx.createServer.listen\r\n\r\n```\r\nworkingServer.listen();\r\n```\r\n\r\nThis starts the servers. Note that this feature is still being improved.\r\n\r\n### httpx.createServer callback\r\n\r\nreq is the request. res is the response. This callback is identical to what is found in node.http and node.https.\r\n\r\n### httpx.createServer.close()\r\n\r\n```\r\nworkingServer.close(callback);\r\n```\r\n\r\nThis closes the http and https servers in this instance of an httpx server. Because of the HTTP 1.1 and 2.0 specifications, this action is very prone to causing crashes. Use it at your own risk. It can be used with a callback function.\r\n\r\n### httpx.createServer.setTimeout\r\n\r\n```\r\nworkingServer.setTimeout(time, callback);\r\n```\r\n\r\nCalling this function changes this.timeout to time, sets the timeouts of the internal servers to time, and calls the callback function. The default is 0.\r\n\r\n## Specific Requests\r\n\r\nIn addition to native request objects, node-httpx provides the request and get functions of the http and https modules. \r\n\r\n| Function           | Treat As      | Documentation                                                          |\r\n|--------------------|---------------|------------------------------------------------------------------------|\r\n| httpx.httpRequest  | http.request  | https://nodejs.org/api/http.html#http_http_request_options_callback    |\r\n| httpx.httpGet      | http.get      | https://nodejs.org/api/http.html#http_http_get_options_callback        |\r\n| httpx.httpsRequest | https.request | https://nodejs.org/api/https.html#https_https_request_options_callback |\r\n| httpx.httpsGet     | https.get     | https://nodejs.org/api/https.html#https_https_get_options_callback     |\r\n\r\n## httpx.request\r\n\r\nhttpx.request is for running http-style requests via httpx. By default, when a request is initiated, first the module tries to use https.request. If that fails for some reason, plain http.request is used instead with the same configuration. If that fails, an error is thrown.\r\n\r\nExample:\r\n```\r\nvar options = {};\r\noptions.hostname = \"encrypted.google.com\";\r\noptions.path = \"/\";\r\noptions.method = \"get\";\r\nvar googleRequest = httpx.request(options, function(res){\r\n\tvar answer = \"\";\r\n\tres.on(\"data\", function(d){\r\n\t\tanswer += d;\r\n\t});\r\n\tres.on(\"end\", function(){\r\n\t\tconsole.log(answer);\r\n\t});\r\n}); \r\ngoogleRequest.write(\"text\");\r\ngoogleRequest.end();\r\n```\r\n\r\n### httpx.request.write(payload)\r\n\r\nThis function is used to write context to a working httpx request object. This should not be used in httpx.get.\r\n\r\n### httpx.request.end()\r\n\r\nThis function states that everything has been sent that will be sent for this request. This should not be used in httpx.get.\r\n\r\n### httpx.request config object\r\n\r\n* hostname : either a valid domain or IP address of the server being requested. REQUIRED.\r\n* path : the part of the URL that's not the port, hostname, or protocol. REQUIRED.\r\n* method : the HTTP method to be used. Default: \"get\".\r\n* port : the port to be used. Default: 80/443\r\nNote: any setting that exists in node.http or node.https also exists in these settings. These are just the only ones the code explicitly interacts with.\r\n\r\n### httpx.request callback function\r\n\r\n```\r\nfunction (res) {\r\n\r\n}\r\n```\r\n\r\nRes is an event emmiter that is emmited once per request.\r\n\r\n### httpx.request.response.err\r\n\r\n```\r\nres.on(\"error\", errObject);\r\n```\r\n\r\nThis is emmited when both https.request and http.request failed with the given configuration. It contains the error object from node.http.\r\n\r\n### httpx.request.response.timeout\r\n\r\n```\r\nres.on(\"timeout\", action);\r\n```\r\n\r\nThis is emmited when the https attempt fails or times out, and the http request times out.\r\n\r\n### httpx.request.response.data\r\n\r\n```\r\nres.on(\"data\", segment);\r\n```\r\n\r\nThis is emmited when a section of the response arrives properly at the client. Segment is usually a string. \r\n\r\n### httpx.request.response.end\r\n\r\n```\r\nres.on(\"end\", callback);\r\n```\r\n\r\nThis is emmited when there is no more data that will come in the response. The callback function is required.\r\n\r\n## httpx.get\r\n\r\nThis is httpx.request, but the request is assumed to be a GET request, the payload is automatically empty, and the transmission ended automatically. The event listeners, configurations, and callbacks are identical.\r\n","starsCount":1,"created":"2015-04-09T16:36:29.455Z","modified":"2015-04-16T17:27:58.170Z","lastPublisher":{"name":"natewatson999","email":"natewatson999@gmail.com"},"owners":[{"name":"natewatson999","email":"natewatson999@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"node-httpx","_nodeVersion":"0.12.0","_npmUser":{"name":"natewatson999","email":"natewatson999@gmail.com"},"_npmVersion":"2.5.1","_rev":"1-7f8fce7ec6906ec2171c2d4231bd16b0","_shasum":"63f1989d63b9cbc4f728cd7be1fa2519d017880a","author":{"name":"Nate Watson, as part of Team GOTO"},"bugs":{"url":"https://github.com/natewatson999/httpx/issues"},"directories":{},"dist-tags":{"latest":"0.4.0"},"dist":{"shasum":"63f1989d63b9cbc4f728cd7be1fa2519d017880a","tarball":"http://registry.npmjs.org/node-httpx/-/node-httpx-0.4.0.tgz"},"maintainers":[{"name":"natewatson999","email":"natewatson999@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-04-16T17:27:58.170Z","created":"2015-04-09T16:36:29.455Z","0.1.0":"2015-04-09T16:36:29.455Z","0.1.1":"2015-04-09T17:34:39.361Z","0.1.2":"2015-04-09T18:52:39.664Z","0.1.3":"2015-04-09T18:55:46.799Z","0.1.4":"2015-04-09T18:58:39.886Z","0.1.5":"2015-04-10T04:22:49.669Z","0.1.7":"2015-04-10T04:54:26.589Z","0.1.8":"2015-04-10T04:59:55.917Z","0.1.9":"2015-04-10T16:43:02.731Z","0.1.10":"2015-04-10T16:44:13.446Z","0.2.0":"2015-04-10T16:47:30.966Z","0.2.1":"2015-04-10T17:59:34.481Z","0.3.0":"2015-04-13T18:56:02.119Z","0.3.1":"2015-04-13T19:33:38.984Z","0.4.0":"2015-04-16T17:27:58.170Z"},"users":{"natewatson999":true}}}