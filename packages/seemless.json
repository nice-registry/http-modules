{"name":"seemless","preferGlobal":true,"version":"0.3.2","description":"Works with http server to create a client side javascript jquery ajax calls.","main":"./src/lib/seemless.js","scripts":{"start":"node examples/app.js","test":"node tests/*.js || true"},"repository":"https://github.com/cgaspard/seemless","keywords":["seemless","http","restful"],"dependencies":{"restify":"*","mime":"*"},"analyze":false,"devDependencies":{"tape":"*"},"license":"MIT","engines":{"node":">=0.6"},"gitHead":"0eb20d4eec7f85517c822fe59c6d321ff6615ef4","homepage":"https://github.com/cgaspard/seemless#readme","bundleDependencies":[],"versions":[{"number":"0.1.0","date":"2014-03-20T17:51:03.907Z"},{"number":"0.1.1","date":"2014-03-20T17:53:27.447Z"},{"number":"0.1.2","date":"2014-04-08T02:51:11.624Z"},{"number":"0.1.3","date":"2014-04-08T02:53:13.693Z"},{"number":"0.1.4","date":"2014-04-08T02:55:48.629Z"},{"number":"0.1.5","date":"2014-04-08T03:09:21.731Z"},{"number":"0.1.6","date":"2014-10-03T02:38:33.812Z"},{"number":"0.1.7","date":"2015-01-13T03:41:29.877Z"},{"number":"0.1.8","date":"2015-01-24T16:18:33.139Z"},{"number":"0.1.9","date":"2015-09-23T15:59:38.840Z"},{"number":"0.2.0","date":"2015-09-23T16:42:52.964Z"},{"number":"0.2.1","date":"2016-02-09T02:19:10.271Z"},{"number":"0.2.2","date":"2016-06-02T12:01:14.235Z"},{"number":"0.2.3","date":"2016-09-06T13:55:52.971Z"},{"number":"0.2.4","date":"2016-09-06T14:00:36.069Z"},{"number":"0.2.5","date":"2016-09-06T14:05:59.412Z"},{"number":"0.2.6","date":"2016-09-06T14:24:46.110Z"},{"number":"0.2.7","date":"2016-09-06T14:27:42.271Z"},{"number":"0.2.8","date":"2016-09-15T13:44:14.002Z"},{"number":"0.3.0","date":"2017-02-12T17:05:36.588Z"},{"number":"0.3.1","date":"2017-02-12T17:19:26.979Z"},{"number":"0.3.2","date":"2017-02-13T16:22:55.004Z"}],"readme":"seemless restful API module\n============\nAt its core, seemless takes on the task of making restful APIs out of javascript objects.   It does this by enumerating the object and linking routes to functions inside the node http server.  In addition, seemless also creates a client side javascript file that maps to the same server side REST API.\n\nSeemless works with node.js http server.  However, it can work side by side with expresss and resitfy node.js modules.   See compatibilty notes at the end of the README.\n\nInstall seemless using npm, or package.json dependancy\n```\nnpm install seemless\n```\n\n### Example\n\nThis project comes with a fully funciton node.js server that exposes a sample API.   This server is contained inside the /examples folder.   To run the example:\n\n```\ngit clone https://github.com/cgaspard/seemless.git\ncd seemless\nnpm start\n```\n\nBrowse to http://localhost:8080/ to see a sample client side file that utilizes the restful API.\n\n## Steps to setup seemless\n\n### Step 1: Create a Nodejs module for your API\n\nHere is an example of a node module, that seemless will turn into a restful API module.\n\n```\nvar MyAPI = {\n    /// This function will be exposed at http://[serverip]/MyAPI/add\n    add: function(a, b, _request, _response, _callback) {\n        return a + b;\n    },\n\n    /// This function will be exposed at http://[serverip]/MyAPI/sub\n    sub: function(a, b _request, _response, _callback) {\n        return a - b;\n    },\n\n    /// To create a private function, prefix it with an underscore and seemless will ignore it\n    _privateFunction: function(_request, _response, _callback) {\n\n    }\n}\n\nmodule.exports = MyAPI;\n```\n\n### Step 2: Create an instance of an http server, require the API module, and tell seemless to make an API out of it.\n\n```\nconst http = require('http');\nconst port = 8080;\n\nvar MyAPI = require('myapi.js'); /// This is the module we created in Step 1\n\nvar seemless = require(\"seemless\");\n/// Add debug=true if you want to see console messages about how seemless creates its routes and when the restful API functions are called\nseemless.debug = true;  \n\n// Create an HTTP server\nvar server = http.createServer();\n\n// Start http server listening on port\nserver.listen(port, function(){ console.log(\"Server listening on: http://localhost:%s\", port); });\n\n/// Expose the restful API on the webserver\nseemless.generateRoutesForClientAPIAccess('/path/to/client.js', MyAPI, \"MyAPI\", server, \"/v1/\");\n```\n\n### Step 3: Use the API\n\nAfter step 2, seemless does two things.   \n\nFirst it adds routes into our http server that when called will execute the function that route is registered to.   So in the example above, the following routes will map to the function that generated them.\n\n```\n/v1/MyAPI/add => MyAPI.add();\n/v1/MyAPI/sub => MyAPI.sub();\n```\n\nThe second thing seemless does is generate a client side JS file that can be used in browser to call the API using the same object structure that resides in node.js application. \n\nIn our case we would use:\n\n```\n<script src=\"/path/to/client.js\"></script>\n```\n\nThe first parameter in the generateRoutesForClientAPIAccess call tells seemless the location to expose this Javascript file.  From there we could utilize the API on the client like so:\n\n```\ndocument.addEventListener(\"load\", function() {\n    MyAPI.add(1, 2, successCallback, errorCallback);\n\n    function successCallback(result) {\n        alert(result);  /// In this case it should alert 3;\n    }\n    function errorCallback(err) {\n        alert(\"We had an error calling our API:\" + err.message);\n    }\n});\n```\n\n## API Reference\n\nThere is only one function call to get seemless to expose the restful API.\n\n### generateRoutesForClientAPIAccess: function (clientURL, apiObject, namespace, httpServer, apiURLPrefix)\n\n### Paramters Definition\n\n    clientURL (string) - This parameter is the location at which the client side javascript file will be exposed.\n\n    apiObject (object) - This is the modules we will be exposing as a restful API.\n\n    namespace (string) - On the client side, this string will be the name of the variable that you use to access the API.\n\n    httpServer (object) - This is the node http server to expose the API on.\n\n    apiURLPrefix (optional, string) - If you want to prefix all of you restful API with a string, use this parameter to specify the prefix location.\n\n### Notes on API module functions and client side javascript\n\nFunction calls on the API object are passed the request, response, and a callBack method as their last 3 parameters. \nHere is the example from above:\n\n```\n    /// This function will be exposed at http://[serverip]/MyAPI/add\n    add: function(a, b, _request, _response, _callback) {\n        return a + b;\n    },\n```\n\nThe last three parameters all start with an underscore.   This is important because it tells seemless that these parameters should not be exposed to the client side javascript.  You can also use this to create your own hidden parameters.\n\nOn the client, the generated javascript file sets up an object that looks like this.\n\n```\n    object.add(a, b, successCallback, errorCallback);\n```\n\nNote that all seemless API calls are made asynchronously so be sure to setup the two callbacks.\n\n### Restify Compatibilty\n\nTo make seemless work along side restify, utilize the restify servers .server property when calling generateRoutesForClientAPIAccess.  Like so:\n\n```\nseemless.generateRoutesForClientAPIAccess('/path/to/client.js', MyAPI, \"MyAPI\", restifyServer, \"/v1/\");\n```\n\nIn order for seemless to expose and API object along side restify server make sure you have at least one post route setup.  Otherwise all post request will be rejected by restify before seemless can respond.  If you have no other post routes in restify add a post route that does nothing to make sure seemless can operate..\n\n``` \nrestifyServer.post(/\\.*/, function (req, res, next) { next(); });\n```\n\n","created":"2014-03-20T17:51:03.907Z","modified":"2017-02-13T16:22:55.004Z","lastPublisher":{"name":"cgaspard","email":"cgaspard@gmail.com"},"owners":[{"name":"cgaspard","email":"cgaspard@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"seemless","_nodeVersion":"7.4.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/seemless-0.3.2.tgz_1487002973079_0.5643020200077444"},"_npmUser":{"name":"cgaspard","email":"cgaspard@gmail.com"},"_npmVersion":"4.0.5","_rev":"4-926422644d2e13c6f32c99b1a7f1b621","_shasum":"a7575b1728ac91ca6957eac25ce2af61ec9abc2f","author":{"name":"Corey Gaspard","email":"cgaspard@gmail.com"},"bugs":{"url":"https://github.com/cgaspard/seemless/issues"},"contributors":[{"name":"Corey Gaspard","email":"cgaspard@gmail.com"}],"directories":{},"dist-tags":{"latest":"0.3.2"},"dist":{"shasum":"a7575b1728ac91ca6957eac25ce2af61ec9abc2f","tarball":"https://registry.npmjs.org/seemless/-/seemless-0.3.2.tgz"},"maintainers":[{"name":"cgaspard","email":"cgaspard@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-02-13T16:22:55.004Z","created":"2014-03-20T17:51:03.907Z","0.1.0":"2014-03-20T17:51:03.907Z","0.1.1":"2014-03-20T17:53:27.447Z","0.1.2":"2014-04-08T02:51:11.624Z","0.1.3":"2014-04-08T02:53:13.693Z","0.1.4":"2014-04-08T02:55:48.629Z","0.1.5":"2014-04-08T03:09:21.731Z","0.1.6":"2014-10-03T02:38:33.812Z","0.1.7":"2015-01-13T03:41:29.877Z","0.1.8":"2015-01-24T16:18:33.139Z","0.1.9":"2015-09-23T15:59:38.840Z","0.2.0":"2015-09-23T16:42:52.964Z","0.2.1":"2016-02-09T02:19:10.271Z","0.2.2":"2016-06-02T12:01:14.235Z","0.2.3":"2016-09-06T13:55:52.971Z","0.2.4":"2016-09-06T14:00:36.069Z","0.2.5":"2016-09-06T14:05:59.412Z","0.2.6":"2016-09-06T14:24:46.110Z","0.2.7":"2016-09-06T14:27:42.271Z","0.2.8":"2016-09-15T13:44:14.002Z","0.3.0":"2017-02-12T17:05:36.588Z","0.3.1":"2017-02-12T17:19:26.979Z","0.3.2":"2017-02-13T16:22:55.004Z"}}}