{"name":"falkor","version":"1.5.4","keywords":["javascript","nodeunit","http","test","functional"],"description":"HTTP Level Functional Testing Library","homepage":"https://github.com/Medium/falkor","repository":"https://github.com/Medium/falkor","licenses":[{"type":"Apache-2.0","url":"http://www.apache.org/licenses/LICENSE-2.0.html"}],"engine":{"node":"*"},"bin":{"falkor":"./bin/runner.js"},"scripts":{"test":"nodeunit ./tests/falkor_test.js"},"dependencies":{"colors":"0.6.2","flags":"0.1.2","nock":"0.47.0","nodeunit":"0.9.0","q":"2.0.3"},"main":"lib/falkor.js","gitHead":"84879916a065ead3885915f2aa5c5fef66c04daa","versions":[{"number":"0.0.1","date":"2012-09-27T00:06:54.692Z"},{"number":"0.0.2","date":"2012-09-28T22:10:55.809Z"},{"number":"1.0.0","date":"2012-10-01T22:15:48.448Z"},{"number":"1.0.1","date":"2012-10-02T00:38:06.171Z"},{"number":"1.1.0","date":"2012-10-08T01:06:29.990Z"},{"number":"1.1.1","date":"2012-10-18T00:54:28.440Z"},{"number":"1.1.2","date":"2012-10-23T22:16:17.943Z"},{"number":"1.1.3","date":"2012-10-24T02:03:11.047Z"},{"number":"1.1.4","date":"2012-10-26T21:14:08.012Z"},{"number":"1.2.0","date":"2013-03-30T23:11:17.457Z"},{"number":"1.2.1","date":"2013-03-30T23:31:52.986Z"},{"number":"1.2.2","date":"2013-04-01T17:23:58.343Z"},{"number":"1.2.3","date":"2013-04-01T18:08:37.353Z"},{"number":"1.2.4","date":"2013-04-01T18:42:18.466Z"},{"number":"1.2.5","date":"2013-04-04T22:52:05.138Z"},{"number":"1.2.6","date":"2013-04-04T23:46:58.188Z"},{"number":"1.2.7","date":"2013-04-17T17:26:08.027Z"},{"number":"1.2.8","date":"2013-04-22T20:50:14.771Z"},{"number":"1.2.9","date":"2013-05-08T02:39:26.909Z"},{"number":"1.2.10","date":"2013-06-01T01:59:01.007Z"},{"number":"1.2.11","date":"2013-06-27T20:50:08.881Z"},{"number":"1.3.0","date":"2014-01-06T22:08:29.269Z"},{"number":"1.3.1","date":"2014-01-08T20:22:15.257Z"},{"number":"1.3.2","date":"2014-01-28T23:44:47.037Z"},{"number":"1.4.0","date":"2014-05-09T15:10:04.230Z"},{"number":"1.4.1","date":"2014-05-13T19:29:24.444Z"},{"number":"1.4.2","date":"2014-05-17T19:31:28.103Z"},{"number":"1.4.3","date":"2014-05-23T18:24:08.772Z"},{"number":"1.5.0","date":"2014-09-17T19:08:15.516Z"},{"number":"1.5.1","date":"2015-02-10T15:18:11.149Z"},{"number":"1.5.2","date":"2016-03-25T20:58:13.067Z"},{"number":"1.5.3","date":"2016-03-28T23:23:05.162Z"},{"number":"1.5.4","date":"2017-02-06T20:37:16.737Z"}],"readme":"Falkor\n======\n\n[![Build Status](https://secure.travis-ci.org/Medium/falkor.png)](http://travis-ci.org/Medium/falkor)\n\nA HTTP level functional testing library using [nodejs](http://nodejs.org) and\n[nodeunit](https://github.com/caolan/nodeunit).\n\n1. Declaratively set request properties including headers and cookies.\n2. Easily send form-encoded data, JSON, or plain text.\n3. Use predefined evaluators to set expectations on the response.\n4. Use JSON-Schema to validate JSON.\n5. Write custom evaluators to do more advanced processing and validation.\n\nSuggested uses:\n\n1. Testing REST API end-points.\n2. Functional testing of the application layer.\n3. Automated smoke tests.\n4. Probers.\n\nInstall\n-------\n\n```\n$ npm install falkor\n$ npm test falkor\n```\n\nUsage\n-----\n\nThe main interface in Falkor is `falkor.fetch`.  It returns a nodeunit compatible function with\nextra methods hanging off it that can be used to define behavior and set expectations.\n\nTo create test cases simply write a nodeunit test file and use falkor to define test methods, e.g.:\n\n```\nvar falkor = require('falkor')\n\nexports.testGoogle = falkor.fetch('http://google.com')\n    .expectStatusCode(301)\n    .expectHeader('Location', 'http://www.google.com/')\n    .dump() // Not necessary, but useful for debugging.\n```\n\nThen to run the tests you can either use nodeunit or the test runner included with falkor.  The\nfalkor test runner is new as of `v1.2.0`, the main difference being that tests will be run in\nparallel.\n\n```\nnodeunit mytest.js\nnode_modules/.bin/falkor mytest.js\n```\n\nSee the `examples` folder for a few other examples.\n\nChanges\n-------\n\nHead on over to the wiki to see [what changed](https://github.com/Medium/falkor/wiki/Change-Log)\nbetween NPM package versions.\n\nReference\n---------\n\nAs mentioned about the primary way to use Falkor is via the `falkor.fetch` method.  If you do\nnothing else the URL will be fetched via a GET request when the test is run.  The test will pass --\nregardless of HTTP response -- unless there is a network level failure.\n\nYou build up the test by specifying extra information about how the request should be made and then\nby defining expectations for the response.  If the actual response deviates from expectations the\ntests will fail.\n\n### Configuring the request\n\n#### .withBaseUrl(number)\n\nSets the base URL from which other URLs are resolved.  This still allows you to specify absolute\nURLs in specific test methods but relative URLs will be resolved accordingly.\n\n#### .withRootSchemaPath(number)\n\nSets the base path for where schemas should be resolved from.  e.g. to avoid having to specify\n`path.join(__dirname, 'some-schema.json')` repeatedly.\n\n#### .withMethod(httpMethod)\n\nSpecifies the HTTP method to use when making the request.\n\n#### .withHeader(name, value)\n\nSets a HTTP request header.  Can be called multiple times to set multiple headers.\n\n#### .setContentType(contentType)\n\nShort-cut for setting the Content-Type header of the request.  Note, that on its own this doesn't\nchange how the request payload will be sent.  See `withPayload`, `withFormEncodedPayload` and\n`withJsonPayload`.\n\n#### .withCookie(name, value)\n\nHelper for setting the cookie header.  Can be called multiple times to set multiple cookies.\n\n#### .withPayload(bufferOrUtf8String)\n\nSpecifies the request payload.  It can be either a `Buffer` or a string.  Strings are assumed to be\nUTF-8.  The payload will be sent regardless of HTTP method.  The Content-Length header will also be\nset accordingly.\n\n#### .withFormEncodedPayload(object)\n\nSets the request payload to be a form-encoded string based on the keys/values in the passed in\nobject.  This method will also set the Content-Type header to `application/x-www-form-urlencoded`.\n\n#### .withJsonPayload(object)\n\nSets the request payload to be a JSON string.  This method will also set the Content-Type header to\n`application/json`.\n\n#### .withTimeoutMs(number)\n\nSets the timeout for the request, in milliseconds.\n\n\n### Setting expectations\n\n#### .expectStatusCode(statusCode)\n\nFails the test if the response doesn't have a specific status code.\n\n#### .expectHeader(name, value)\n\nFails the test if the response doesn't have a header with a specific value.  Can be specified\nmultiple times.\n\n#### .expectContentType(contentType, opt_charset)\n\nShortcut for asserting the content type matches.\n\n#### .expectPlainText()\n\nShortcut for `expectHeader('Content-Type', 'text/plain')`.\n\n#### .expectHtml()\n\nShortcut for `expectHeader('Content-Type', 'text/html')`.\n\n#### .expectJson()\n\nShortcut for `expectHeader('Content-Type', 'application/json')`.\n\n#### .expectHtmlWithCharset(opt_charset)\n\nSame as `expectHtml` but expects the charset to be set as well, defaults to wanting UTF-8.\n\n#### .expectJsonWithCharset(opt_charset)\n\nSame as `expectJson` but expects the charset to be set as well, defaults to wanting UTF-8.\n\n#### .expectBodyMatches(regExp)\n\nFails the test if the response body *doesn't* match the provided regular expression.\n\n#### .expectBodyDoesNotMatch(regExp)\n\nFails the test if the response body *does* match the provided regular expression.\n\n#### .expectXssiPrefix(prefix)\n\nFails the test if the response body doesn't begin with the provided XSSI prefix. The prefix will\nalso be stripped before the response body is parsed as JSON.\n\n#### .addJsonSchema(schemaPath)\n\nAdds a JSON schema (or an array of JSON schema) to be used later by $ref links in validateJson().\nEvery schema added using this method needs to have an id property.\n\n#### .validateJson(schemaPath)\n\nValidates the response body against a JSON schema.  The validator is taken from the Chromium project\nand implements a subset of the official spec.  See the file header in lib/json-schema/json-schema.js\nfor exact details on what is supported.\n\n#### .evaluate(fn)\n\nAdds an evaluator function that will be executed against the response.  The evaluator is passed the\nnodeunit test object, which can be used for executing assertions, and the response object.\n\nUse this method if none of the built in evaluators do quite what you want.\n\nFor example:\n\n```\nexports.testBBC = falkor.fetch('http://www.bbc.co.uk')\n    .evaluate(function (test, res) {\n      test.notEqual(res.headers['date'].substr(0, 3), 'Fri', 'This evaluator fails on Friday.')\n    })\n```\n\n#### .evaluateWithJsonBody(fn)\n\nAdds an evaluator function that will be executed against the response body if it is valid JSON.\nThe evaluator is passed the nodeunit test object, which can be used for executing assertions,\nand the JSON object parsed from the body of the response.\n\nThis evaluator firsts removes the XSSI prefix, if configured, and parses the response body as\nJSON. If parsing fails the test case will be flagged as a failure.\n\nThis evaluator is intended for inspecting the JSON content of a response. If you are interested\nin only checking the structure of the JSON, to ensure it is in the right format, it is\nrecommended that you use the schema-based validation, see `.addJsonSchema(schemaPath)` and\n`.validateJson(schemaPath)`.\n\nFor example:\n\n```\nexports.testJsonContent = falkor.fetch('https://api.github.com/repos/Medium/falkor')\n    .evaluateWithJsonBody(function (test, json) {\n      test.equals(json.open_issues_count, 0, 'This evaluator fails if we have work to do.')\n    })\n```\n\n### Other things\n\n\n#### .then(fn)\n\n`then` allows you to chain together multiple requests. For example, the first\nrequest might PUT a resource, and then the second request might GET that resource\nto make sure it was written.\n\n`then` is inspired by, and compatible with, the API for [Q](https://github.com/kriskowal/q)\n\nExample:\n\n```\nexports.testVote = falkor.fetch('http://mysite.com/some-article/vote')\n    .withMethod('PUT')\n    .then(function (voteResponse) {\n      return Q.delay(100) // wait 100 milliseconds\n    })\n    .then(function () {\n      return falkor.fetch('http://mysite.com/some-article/')\n          .expectBodyMatches(/\\+1/)\n    })\n    .then(function (getResponse) {\n      // Assert something about the http://mysite.com/some-article/ response.\n    })\n```\n\nThe callback passed to `then` can return one of three possible types:\n\n* If the callback returns a falkor TestCase, the chain will run the TestCase, wait for\n  it to complete, then pass the response object to the next `then` callback.\n\n* If the callback returns a Q promise, then chain will wait for the promise to complete,\n  then pass the resolved value to the next `then` callback.\n\n* If the callback returns anything else, it will just be passed to the next callback\n  in the chain.\n\nNotably, `then` does not have any sort of error-handling mechanism (like Q's\n`then`), because all errors are handled by Falkor.\n\n#### .dump(opt_dumpBody)\n\nLogs out information about the request and response to the console.  Depending on what you are\nrequesting this can be quite noisy.  It is recommended you use it for debugging only.  By default\ndoesn't log response body.\n\n#### .setAsserter() and .done()\n\nBy default, Falkor test cases are nodeunit-compatible functions.\n\nIn some cases, you might want to provide your own assertion object. It should\nimplement all the methods of the [NodeJS assert\nAPI](http://nodejs.org/api/assert.html) and a `done` method.\n\nThe best way is to construct and run a TestCase directly. `setAsserter`\npopulates the assertion object.  `done` kicks off the request, waits until the\nassertions finish, then calls `customAsserter.done()`.\n\n```\nnew falkor.TestCase(url)\n    .withMethod('POST')\n    .expectBodyMatches(/fish and chips/)\n    .setAsserter(customAsserter)\n    .done()\n```\n\n#### falkor.setBaseUrl(url)\n\n_deprecated in favor of options#withBaseUrl_\n\nSets the base URL from which other URLs are resolved.  This still allows you to specify absolute\nURLs in specific test methods but relative URLs will be resolved accordingly.\n\n#### falkor.setRootSchemaPath(path)\n\n_deprecated in favor of options#withRootSchemaPath_\n\nSets the base path for where schemas should be resolved from.  e.g. to avoid having to specify\n`path.join(__dirname, 'some-schema.json')` repeatedly.\n\n#### falkor.newTestTemplate()\n\nA Test Template allows you to set up a set of configuration options and expectations that can then\nbe shared by multiple test cases.  Instead of calling `falkor.fetch(url)` to generate a test case\nyou call `template.fetch(url)` and the test case will inherit options from the template.\n\nExample:\n\n```\nvar formTest = falkor.newTestTemplate()\n    .withBaseUrl('http://falkor/')\n    .withMethod('POST')\n    .withFormEncodedPayload(frmData)\n\nexports.testFormRequiresLogin_noCookies = formTest.fetch('/form')\n    .expectStatusCode(401)\n\nexports.testFormRequiresLogin_withCookies = formTest.fetch('/form')\n    .withCookie('auth_token', 'abce114f')\n    .expectStatusCode(200)\n```\n\nYou can `clone()` test templates to create other templates.\n\n```\nvar formTestWithHeaderAuth = formTest.clone()\n    .withHeader('Auth-Header', '1234')\n\nexports.testFormRequiresLogin_authHeader = formTestWithHeaderAuth.fetch('/form')\n    .expectStatusCode(200)\n```\n\nAnd you can `mixin()` multiple test templates to build composite test cases:\n\n```\nexports.testOtherForm = falkor.fetch('/other/form')\n    .mixin(formTest)\n    .mixin(checkFormResultsTest)\n    .withHeader('X-Form', '1234')\n```\n\n\n### Node unit quick reference\n\nEspecially helpful if you are writing your own evaluator functions or asserter:\n\n```\nok(value, [message]) - Tests if value is a true value.\nequal(actual, expected, [message]) - Tests shallow ( == ).\nnotEqual(actual, expected, [message]) - Tests shallow ( != ).\ndeepEqual(actual, expected, [message]) - Tests for deep equality.\nnotDeepEqual(actual, expected, [message]) - Tests for any deep inequality.\nstrictEqual(actual, expected, [message]) - Tests strict equality ( === ).\nnotStrictEqual(actual, expected, [message]) - Tests strict non-equality ( !== ).\nthrows(block, [error], [message]) - Expects block to throw an error.\ndoesNotThrow(block, [error], [message]) - Expects block not to throw an error.\nifError(value) - Tests if value is not a false value, throws if it is a true value.\ndone() - Marks the test complete.\n```\n\nTesting\n-------\n\nFalkor unit tests of course use nodeunit and can be found in `tests/falkor_test.js`.\n[Nock](http://github.com/flatiron/nock) is used to mock out the HTTP requests.\n\n```\n$ npm test # or\n$ nodeunit tests/falkor_test.js\n```\n\nContributing\n------------\n\nQuestions, comments, bug reports, and pull requests are all welcome.  Submit them at\n[the project on GitHub](https://github.com/Medium/falkor/).  If you haven't contributed to an\n[Obvious](http://github.com/Medium/) project before please head over to the\n[Open Source Project](https://github.com/Medium/open-source#note-to-external-contributors) and fill\nout an OCLA (it should be pretty painless).\n\nBug reports that include steps-to-reproduce (including code) are the\nbest. Even better, make them in the form of pull requests.\n\nAuthor\n------\n\n[Dan Pupius](https://github.com/dpup)\n([personal website](http://pupius.co.uk/)), supported by\n[The Obvious Corporation](http://obvious.com/).\n\nLicense\n-------\n\nCopyright 2012 [The Obvious Corporation](http://obvious.com/).\n\nLicensed under the Apache License, Version 2.0.\nSee the top-level file `LICENSE.txt` and\n(http://www.apache.org/licenses/LICENSE-2.0).\n","created":"2012-09-27T00:06:53.647Z","modified":"2017-02-06T20:37:16.737Z","lastPublisher":{"name":"nicks","email":"nicholas.j.santos@gmail.com"},"owners":[{"name":"dpup","email":"dan@pupi.us"},{"name":"medium","email":"npm@medium.com"},{"name":"mikkot","email":"mikko.tervahauta@gmail.com"},{"name":"nicks","email":"nicholas.j.santos+npm@gmail.com"},{"name":"xiao","email":"x@medium.com"}],"other":{"_attachments":{},"_from":".","_id":"falkor","_nodeVersion":"4.6.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/falkor-1.5.4.tgz_1486413434617_0.15569958463311195"},"_npmUser":{"name":"nicks","email":"nicholas.j.santos@gmail.com"},"_npmVersion":"2.15.9","_rev":"2-c1d52b9f2685ba089ee0cd11632d66a0","_shasum":"a8e3aad57c705c584674e8154215c656e848ba85","author":{"name":"Dan Pupius","email":"dan@obvious.com","url":"http://pupius.co.uk/"},"bugs":{"url":"https://github.com/Medium/falkor/issues"},"directories":{},"dist-tags":{"latest":"1.5.4"},"dist":{"shasum":"a8e3aad57c705c584674e8154215c656e848ba85","tarball":"https://registry.npmjs.org/falkor/-/falkor-1.5.4.tgz"},"maintainers":[{"name":"dpup","email":"dan@pupi.us"},{"name":"medium","email":"npm@medium.com"},{"name":"mikkot","email":"mikko.tervahauta@gmail.com"},{"name":"nicks","email":"nicholas.j.santos+npm@gmail.com"},{"name":"xiao","email":"x@medium.com"}],"readmeFilename":"README.md","time":{"modified":"2017-02-06T20:37:16.737Z","created":"2012-09-27T00:06:53.647Z","0.0.1":"2012-09-27T00:06:54.692Z","0.0.2":"2012-09-28T22:10:55.809Z","1.0.0":"2012-10-01T22:15:48.448Z","1.0.1":"2012-10-02T00:38:06.171Z","1.1.0":"2012-10-08T01:06:29.990Z","1.1.1":"2012-10-18T00:54:28.440Z","1.1.2":"2012-10-23T22:16:17.943Z","1.1.3":"2012-10-24T02:03:11.047Z","1.1.4":"2012-10-26T21:14:08.012Z","1.2.0":"2013-03-30T23:11:17.457Z","1.2.1":"2013-03-30T23:31:52.986Z","1.2.2":"2013-04-01T17:23:58.343Z","1.2.3":"2013-04-01T18:08:37.353Z","1.2.4":"2013-04-01T18:42:18.466Z","1.2.5":"2013-04-04T22:52:05.138Z","1.2.6":"2013-04-04T23:46:58.188Z","1.2.7":"2013-04-17T17:26:08.027Z","1.2.8":"2013-04-22T20:50:14.771Z","1.2.9":"2013-05-08T02:39:26.909Z","1.2.10":"2013-06-01T01:59:01.007Z","1.2.11":"2013-06-27T20:50:08.881Z","1.3.0":"2014-01-06T22:08:29.269Z","1.3.1":"2014-01-08T20:22:15.257Z","1.3.2":"2014-01-28T23:44:47.037Z","1.4.0":"2014-05-09T15:10:04.230Z","1.4.1":"2014-05-13T19:29:24.444Z","1.4.2":"2014-05-17T19:31:28.103Z","1.4.3":"2014-05-23T18:24:08.772Z","1.5.0":"2014-09-17T19:08:15.516Z","1.5.1":"2015-02-10T15:18:11.149Z","1.5.2":"2016-03-25T20:58:13.067Z","1.5.3":"2016-03-28T23:23:05.162Z","1.5.4":"2017-02-06T20:37:16.737Z"}}}