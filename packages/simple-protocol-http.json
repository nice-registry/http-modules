{"name":"simple-protocol-http","version":"0.15.0","description":"This module normalizes http responses using Simple Protocol.  HTTP response bodies are parsed as JSON by default but gracefully fall back to text if the response body is not valid JSON.","main":"index.js","scripts":{"test":"mocha ./src/**/*.spec.js","build":"babel ./src --out-dir ./lib --presets=es2015","precommit":"npm run lint; npm run build; npm run test; git add ./lib","lint":"standard './src/**/*.js'"},"license":"ISC","dependencies":{"fetch-everywhere":"^1.0.5","lodash":"^4.17.4","simple-protocol-helpers":"^0.3.0"},"devDependencies":{"babel-core":"^6.21.0","babel-preset-es2015":"^6.14.0","body-parser":"^1.15.2","co":"^4.6.0","express":"^4.14.0","husky":"^0.12.0","standard":"^8.0.0"},"standard":{"globals":["it","describe","beforeEach","afterEach","before","after"]},"gitHead":"2538a9c00b03afce2cfe293305f5a1897cca0ba7","versions":[{"number":"0.0.1","date":"2016-09-15T19:44:09.707Z"},{"number":"0.0.2","date":"2016-09-15T19:54:20.591Z"},{"number":"0.1.0","date":"2016-10-11T20:47:24.359Z"},{"number":"0.2.0","date":"2016-10-11T21:25:42.871Z"},{"number":"0.2.1","date":"2016-10-11T21:26:34.658Z"},{"number":"0.3.0","date":"2016-10-11T21:33:07.337Z"},{"number":"0.4.0","date":"2016-10-11T21:47:03.267Z"},{"number":"0.5.0","date":"2016-10-11T22:13:12.382Z"},{"number":"0.6.0","date":"2016-11-30T21:53:47.444Z"},{"number":"0.8.0","date":"2016-12-01T14:37:18.638Z"},{"number":"0.9.0","date":"2016-12-01T14:43:04.846Z"},{"number":"0.10.0","date":"2016-12-12T22:14:49.596Z"},{"number":"0.11.0","date":"2016-12-15T20:55:24.505Z"},{"number":"0.11.1","date":"2016-12-15T21:09:06.025Z"},{"number":"0.11.2","date":"2016-12-30T03:25:49.277Z"},{"number":"0.12.0","date":"2017-01-09T16:08:02.218Z"},{"number":"0.13.0","date":"2017-02-04T00:30:25.199Z"},{"number":"0.14.0","date":"2017-02-16T04:53:38.937Z"},{"number":"0.15.0","date":"2017-03-25T04:36:26.905Z"}],"readme":"# Simple Protocol Http\n\nThis module normalizes http responses using Simple Protocol.  HTTP response bodies are parsed as JSON by default but gracefully fall back to text if the response body is not valid JSON.\n\n## What is simple protocol?\n\nSimple protocol is *simple*:  \n1) Never intentionally throw exceptions / always return with a 200 status code.  \n2) Return a valid JSON object like this for a success:\n```\n{\n  success: true,\n  payload: {\n    // the result of the operation, i.e. an http response body\n  }\n}\n```\n3) Return a valid JSON object like this for an error:\n```\n{\n  success: false,\n  error: {\n    // error details or object\n  }\n}\n```\nThat's it!  Both success and error cases are handled the same way and can follow the same code path.\n\n## Installation\n```\nnpm i --save simple-protocol-http\n```\n\n## API\n\n```\nconst { get, post, put, remove} = require('simple-protocol-http')\n\nlet result = await get(url)\nlet result = await post(url, payload)\nlet result = await put(url, payload)\nlet result = await remove(url)\n\n```\n\nIf you want to send custom fetch options (i.e. send custom headers, etc):\n\n```\nconst { get, post, put, remove} = require('simple-protocol-http').options\n\nlet result = await get(fetchOptions, url)\nlet result = await post(fetchOptions, url, payload)\nlet result = await put(fetchOptions, url, payload)\nlet result = await remove(fetchOptions, url)\n\n```\n\nIf you don't want `credentials: include` to be on by default:\n\n```\nconst { get, post, put, remove} = require('simple-protocol-http').noCredentials\n\nlet result = await get(url)\nlet result = await post(url, payload)\nlet result = await put(url, payload)\nlet result = await remove(url)\n\n```\n\nThe whole enchilada, i.e. full referential transparency:\n```\nconst { get, post, put, remove} = require('simple-protocol-http').full\n\nlet result = await get(fetch, fetchOptions, url)\nlet result = await post(fetch, fetchOptions, url, payload)\nlet result = await put(fetch, fetchOptions, url, payload)\nlet result = await remove(fetch, fetchOptions, url)\n\n```\n\n## Examples Making Requests to Restful Endpoints\n\n### For successful / 200-range responses\n```\nconst { get } = require('simple-protocol-http')\nlet result = await get('http://www.example.com/api')\n```\nIf the server returns this with a 200 status code:\n```\n{\n  value: 'foo'\n}\n```\nThe value of result is:\n```\n{\n  success: true,\n  payload: {\n    value: 'foo'\n  },\n  meta: {\n    status: 200,\n    statusText: 'OK',\n    headers: {...}\n  }\n}\n```\n\n### For error / non-200-range responses:\n```\nconst { post } = require('simple-protocol-http')\nlet result = await post('http://www.example.com/api', {...})\n```\nIf the server returns this with a 400 status code:\n```\n{\n  type: 'ValidationError',\n  message: 'Some field is invalid'\n}\n```\nThe value of result is:\n```\n{\n  success: false,\n  error: {\n    type: 'ValidationError',\n    message: 'Some field is invalid'\n  },\n  meta: {\n    status: 400,\n    statusText: 'Bad Request',\n    headers: {...}\n  }\n}\n```\n\n## Example Using Simple Protocol Endpoints\n\n### For Success Responses:\n```\nconst { post } = require('simple-protocol-http')\nlet result = await post('http://www.example.com/api', {...})\n```\nIf the server returns this:\n```\n{\n  success: true,\n  payload: {\n    foo: 'bar'\n  }\n}\n```\nThis module will return this:\n```\n{\n  success: true,\n  payload: {\n    foo: 'bar'\n  },\n  meta: {\n    status: 200,\n    statusText: 'OK',\n    headers: {...}\n  }\n}\n```\n\n### For Unsuccessful Responses:\n```\nconst { post } = require('simple-protocol-http')\nlet result = await post('http://www.example.com/api', {...})\n```\nIf the server returns this:\n```\n{\n  success: false,\n  error: {\n    message: 'You posted something invalid'\n  }\n}\n```\nThis module will return this:\n```\n{\n  success: false,\n  error: {\n    message: 'You posted something invalid'\n  },\n  meta: {\n    status: 200,\n    statusText: 'OK',\n    headers: {...}\n  }\n}\n```\n","created":"2016-09-15T19:44:09.707Z","modified":"2017-03-25T04:36:26.905Z","lastPublisher":{"name":"orourkedd","email":"frankie@orourkedd.com"},"owners":[{"name":"orourkedd","email":"frankie@orourkedd.com"}],"other":{"_attachments":{},"_from":".","_id":"simple-protocol-http","_nodeVersion":"6.2.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/simple-protocol-http-0.15.0.tgz_1490416586674_0.8455085153691471"},"_npmUser":{"name":"orourkedd","email":"frankie@orourkedd.com"},"_npmVersion":"3.10.10","_rev":"12-7107b89628a41eedce9b92e3b2c55e4f","_shasum":"954a613d301d5b639d65286b4adab51268841e3c","author":"","directories":{},"dist-tags":{"latest":"0.15.0"},"dist":{"shasum":"954a613d301d5b639d65286b4adab51268841e3c","tarball":"https://registry.npmjs.org/simple-protocol-http/-/simple-protocol-http-0.15.0.tgz"},"maintainers":[{"name":"orourkedd","email":"frankie@orourkedd.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-25T04:36:26.905Z","created":"2016-09-15T19:44:09.707Z","0.0.1":"2016-09-15T19:44:09.707Z","0.0.2":"2016-09-15T19:54:20.591Z","0.1.0":"2016-10-11T20:47:24.359Z","0.2.0":"2016-10-11T21:25:42.871Z","0.2.1":"2016-10-11T21:26:34.658Z","0.3.0":"2016-10-11T21:33:07.337Z","0.4.0":"2016-10-11T21:47:03.267Z","0.5.0":"2016-10-11T22:13:12.382Z","0.6.0":"2016-11-30T21:53:47.444Z","0.8.0":"2016-12-01T14:37:18.638Z","0.9.0":"2016-12-01T14:43:04.846Z","0.10.0":"2016-12-12T22:14:49.596Z","0.11.0":"2016-12-15T20:55:24.505Z","0.11.1":"2016-12-15T21:09:06.025Z","0.11.2":"2016-12-30T03:25:49.277Z","0.12.0":"2017-01-09T16:08:02.218Z","0.13.0":"2017-02-04T00:30:25.199Z","0.14.0":"2017-02-16T04:53:38.937Z","0.15.0":"2017-03-25T04:36:26.905Z"}}}