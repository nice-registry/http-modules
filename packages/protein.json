{"name":"protein","version":"0.5.0","repository":"https://github.com/mafintosh/protein","description":"Protein is http prototype mixins for Node.js","keywords":["web","middleware","mixin","connect","prototype","prototypical","getters","setters"],"readme":"# Protein\n\nProtein is connect compatable middleware with support for prototype methods, getters and setters.\n\nIt's available through npm:\n\n\tnpm install protein\n\n# What problem does it solve?\n\nLike connect you protein combines your middleware to a single function:\n\n``` js\nvar protein = require('protein');\nvar url = require('url');\n\nvar fn = protein()\n\t.use(function(request, response, next) {\n\t\trequest.query = url.parse(request.url, true).query;\n\t\tnext();\n\t})\n\t.use(function(request, response, next) {\n\t\tresponse.sendQuery = function() {\n\t\t\tresponse.end(JSON.stringify(request.query));\n\t\t};\n\t\tnext();\n\t})\n\t.use(function() {\n\t\tresponse.end('hello world');\n\t});\n\nrequire('http').createServer(fn).listen(8080);\n```\n\nBut if we look closer at the above example we are actually parsing the query on every request even though we never use it.  \nWouldn't it be nicer to just parse when we access it?\n\nUsing Protein we can just define a getter on the middleware prototype:\n\n``` js\nvar fn = protein()\n\t.getter('request.query', function() {\n\t\treturn this._query || (this._query = url.parse(request.url, true).query);\n\t})\n\t.use( ... )\n```\n\nNow when we access request.query the first time the query will be parsed and in all other cases no parsing happens.  \nNotice Protein is actually defining the getter on the middleware prototype for us so the is actually only defined once - *NOT* every request.\n\nSimilary we could just define `sendQuery` on the middleware prototype instead of defining it on every request:\n\n``` js\nvar fn = protein()\n\t.getter('request.query', function() {\n\t\treturn this._query || (this._query = url.parse(request.url, true).query);\n\t})\n\t.fn('response.sendQuery', functoin() {\n\t\tthis.end(JSON.stringify(request.query));\n\t})\n\t.use( ... )\n```\n\nNote that we are only expanding the middleware prototype and not the prototype from the `http` module so their should be zero side effects.\nThe final program just looks like this:\n\n``` js\nvar protein = require('protein');\nvar url = require('url');\n\nvar fn = protein()\n\t.getter('request.query', function() {\n\t\treturn this._query || (this._query = url.parse(request.url, true).query);\n\t})\n\t.fn('response.sendQuery', functoin() {\n\t\tthis.end(JSON.stringify(request.query));\n\t})\n\t.use(function() {\n\t\t// this method is the only one which is run on every request\n\t\tresponse.end('hello world');\n\t});\n\nrequire('http').createServer(fn).listen(8080);\n```\n\n# Reusing middleware\n\nIf you want to create middleware that can be reused in other places and which expands the middleware prototype you can use the following format:\n\n``` js\nvar random = function(request, response, next) {\n\trequest.random = Math.random();\n};\n\nrandom.response = {}; // the collection of middleware response prototype methods\nrandom.response.random = function() {\n\tthis.end(''+this.request.random); // we can access the request from the response using this.request\t\n};\n\nprotein().use(random).use(function(request, response) {\n\tresponse.random(); // should return a random number\n});\n```\n\nIf we dont want to run a function on every request but instead want to just expand the prototypes we can just declare a map:\n\n``` js\nvar random = {request: {}, response: {}};\n\nrandom.request.__defineGetter__('random', function() {\n\treturn Math.random();\n});\nrandom.response.random = function() {\n\tthis.end(''+this.request.random);\n};\n\nprotein().use(random).use(function(request, response) {\n\tresponse.random(); // should return a random number\n});\n```\n\nFor more examples on how to create your own reusable middleware see the [included middleware](https://github.com/mafintosh/Protein/tree/master/middleware).\nTo use the included middleware simply do:\n\n``` js\nprotein().use(protein.query).use(function(request, response) {\n\tresponse.end(JSON.stringify(request.query));\n});\n```\n\nThe others include `protein.json`, `protein.log` and `protein.form`\n\n# Connect compatability\n\nAll Connect modules should be compatable with Protein. To make a Protein module compatable with Connect you first need wrap it:\n\n``` js\nvar connectable = protein().use(myProteinMiddleware);\n\nconnect.use(connectable);\n```\n\n# License\n\n(The MIT License)\n\nCopyright (c) 2012 Mathias Buus Madsen <mathiasbuus@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","versions":[{"number":"0.1.0","date":"2012-04-03T21:13:41.964Z"},{"number":"0.2.0","date":"2012-04-12T21:02:00.367Z"},{"number":"0.2.1","date":"2012-04-21T18:23:45.009Z"},{"number":"0.3.0","date":"2012-04-24T19:01:59.825Z"},{"number":"0.3.1","date":"2012-04-24T19:24:34.884Z"},{"number":"0.3.2","date":"2012-04-24T19:48:40.846Z"},{"number":"0.3.3","date":"2012-04-24T22:37:40.225Z"},{"number":"0.3.4","date":"2012-05-12T11:41:05.803Z"},{"number":"0.3.5","date":"2012-05-24T20:18:18.708Z"},{"number":"0.3.6","date":"2012-05-25T06:19:19.886Z"},{"number":"0.4.0","date":"2012-09-10T07:04:00.082Z"},{"number":"0.4.1","date":"2012-09-11T14:13:55.178Z"},{"number":"0.5.0","date":"2012-10-10T19:15:45.581Z"}],"created":"2012-04-03T21:13:39.666Z","modified":"2012-10-10T19:15:45.581Z","lastPublisher":{"name":"mafintosh","email":"mathiasbuus@gmail.com"},"owners":[{"name":"mafintosh","email":"mathiasbuus@gmail.com"}],"other":{"_attachments":{},"_id":"protein","_npmUser":{"name":"mafintosh","email":"mathiasbuus@gmail.com"},"_npmVersion":"1.1.62","_rev":"1-92be68603b09af6b90f2bfcf3a012cd1","author":{"name":"Mathias Buus Madsen","email":"mathiasbuus@gmail.com"},"directories":{},"dist-tags":{"latest":"0.5.0"},"dist":{"shasum":"80ab4e919749351263ef14500d684e57c4202840","tarball":"http://registry.npmjs.org/protein/-/protein-0.5.0.tgz"},"maintainers":[{"name":"mafintosh","email":"mathiasbuus@gmail.com"}],"time":{"modified":"2012-10-10T19:15:45.581Z","created":"2012-04-03T21:13:39.666Z","0.1.0":"2012-04-03T21:13:41.964Z","0.2.0":"2012-04-12T21:02:00.367Z","0.2.1":"2012-04-21T18:23:45.009Z","0.3.0":"2012-04-24T19:01:59.825Z","0.3.1":"2012-04-24T19:24:34.884Z","0.3.2":"2012-04-24T19:48:40.846Z","0.3.3":"2012-04-24T22:37:40.225Z","0.3.4":"2012-05-12T11:41:05.803Z","0.3.5":"2012-05-24T20:18:18.708Z","0.3.6":"2012-05-25T06:19:19.886Z","0.4.0":"2012-09-10T07:04:00.082Z","0.4.1":"2012-09-11T14:13:55.178Z","0.5.0":"2012-10-10T19:15:45.581Z"}}}