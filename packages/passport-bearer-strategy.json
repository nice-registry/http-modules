{"name":"passport-bearer-strategy","version":"1.0.1","description":"HTTP Bearer authentication strategy for Passport.","keywords":["passport","strategy","http","bearer","token","oauth"],"repository":"https://github.com/xeuroman/passport-bearer-strategy","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/MIT"}],"main":"./lib","dependencies":{"passport-strategy":"1.x.x"},"devDependencies":{"mocha":"1.x.x","chai":"1.x.x"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"mocha --reporter spec --require test/bootstrap/node test/*.test.js"},"gitHead":"d068a9e41effc12c6d0c48ca1a22202abceb456b","homepage":"https://github.com/xeuroman/passport-bearer-strategy#readme","versions":[{"number":"1.0.0","date":"2016-06-30T14:06:45.081Z"},{"number":"1.0.1","date":"2016-06-30T14:17:23.017Z"}],"readme":"# passport-bearer-strategy\n\n\nHTTP Bearer authentication strategy for [Passport](http://passportjs.org/).\n\nThis module lets you authenticate HTTP requests using bearer tokens, as\nspecified by [RFC 6750](http://tools.ietf.org/html/rfc6750), in your Node.js applications.\nBearer tokens are typically used to protect API endpoints, and are often issued using OAuth 2.0.\n\nBy plugging into Passport, bearer token support can be easily and unobtrusively integrated into any application\nor framework that supports [Connect](http://www.senchalabs.org/connect/)-style middleware,\nincluding [Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-bearer-strategy\n\n## Usage\n\n#### Configure Strategy\n\nThe HTTP Bearer authentication strategy authenticates users using a bearer token.\nThe strategy requires a `verify` callback, which accepts that credential and calls `done` providing a user.\nOptional `info` can be passed, typically including associated scope,\nwhich will be set by Passport at `req.authInfo` to be used by later middleware for authorization and access control.\n\n    var options = { // not required\n        passReqToCallback: true // default false\n    };\n\n    passport.use(new BearerStrategy(options, function(req, token, done) {\n        User.findOne({ token: token }, function (err, user) {\n            if (err) {\n                return done(err);\n            }\n\n            if (!user) {\n                return done(null, false);\n            }\n\n            return done(null, user, { scope: 'all' });\n        });\n    }));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'bearer'` strategy, to authenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/) application:\n\n    // default settings\n    app.get('/profile', passport.authenticate('bearer'), function(req, res) {\n        res.json(req.user);\n    });\n\n\n    // custom callback\n    var options = { // not required\n        session: true, // default false - typically no need to change.\n        badHeaderMessage: 'custom message', // Message displayed when Authorization header format is incorrect.\n        missingTokenMessage: 'custom message' // Message displayed when token is not present.\n    };\n\n    function customCallback(req, res, next) {\n        passport.authenticate('bearer', options, function (error, user, info) {\n            if (error) {\n                return next(error);\n            }\n\n            if (!user) {\n                // info containing default error messages or your defined ones.\n\n                next(info);\n            } else {\n                // do something with `info`\n\n                next();\n            }\n        })(req, res, next);\n    }\n\n    app.get('/profile', customCallback, function(req, res) {\n        res.json(req.user);\n    });\n\n#### Issuing Tokens\n\nBearer tokens are typically issued using OAuth 2.0.\n[OAuth2orize](https://github.com/jaredhanson/oauth2orize) is a toolkit for implementing OAuth 2.0 servers and issuing bearer tokens.\nOnce issued, this module can be used to authenticate tokens as described above.\n\n## Related Modules\n\n- [OAuth2orize](https://github.com/jaredhanson/oauth2orize) — OAuth 2.0 authorization server toolkit\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n","created":"2016-06-30T14:06:45.081Z","modified":"2016-06-30T14:17:23.017Z","lastPublisher":{"name":"euroman","email":"justas.sepronas@gmail.com"},"owners":[{"name":"euroman","email":"justas.sepronas@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"passport-bearer-strategy","_nodeVersion":"4.4.3","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/passport-bearer-strategy-1.0.1.tgz_1467296240478_0.5147235654294491"},"_npmUser":{"name":"euroman","email":"justas.sepronas@gmail.com"},"_npmVersion":"2.15.1","_rev":"1-04cded72a75d143b7b2b770cfe06889a","_shasum":"5778457de7c1079a27729cf7e590172e0a93548d","author":{"name":"Justas Šepronas","email":"justas.sepronas@gmail.com"},"bugs":{"url":"http://github.com/xeuroman/passport-bearer-strategy/issues"},"directories":{},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"5778457de7c1079a27729cf7e590172e0a93548d","tarball":"http://registry.npmjs.org/passport-bearer-strategy/-/passport-bearer-strategy-1.0.1.tgz"},"maintainers":[{"name":"euroman","email":"justas.sepronas@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-06-30T14:17:23.017Z","created":"2016-06-30T14:06:45.081Z","1.0.0":"2016-06-30T14:06:45.081Z","1.0.1":"2016-06-30T14:17:23.017Z"}}}