{"name":"thalassa-http-client","version":"0.1.0","description":"A simple http client for Thalassa that doesn't require ZeroMQ","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/PearsonEducation/thalassa-http-client","keywords":["thalassa","haproxy","registry"],"license":"Apache2","dependencies":{"ip":"~0.1.0","request":"~2.27.0","optimist":"~0.6.0","thalassa-registrations":"~0.1.0","cli-color":"~0.2.2"},"versions":[{"number":"0.0.0","date":"2013-08-29T07:24:53.615Z"},{"number":"0.1.0","date":"2014-03-18T17:39:36.329Z"}],"readme":"Thalassa Client\n====================\n\nA lightweight client for [Thalassa](https://github.com/PearsonEducation/thalassa)\n\n# Running the Client\n\nThe client can be run any of three ways.\n\n1. From the command-line\n2. As a module\n3. Over HTTP\n\n## Running Client from Command Line\n\nWhy would you do this? Let's say you have an existing legacy Java application that you'd rather not change. You can create a sister service that invokes the command line client to register the service on it's behalf.\n\nFor example, if Thalassa is installed globally (other wise `./node_modules/.bin/thalassa-client):\n\n    thalassa-client --register myapp@1.0.0:8080 --debug\n\nThis registers the application named `my app` at version `1.0.0` that's on the current host on port `8080`. The client will continue to ping the Thalassa server with updates.\n\n### Client Command Line Options\n\n    thalassa-client --help\n      Options:\n        --host           thalassa host                                                    [default: \"127.0.0.1\"]\n        --apiport        thalassa http api port                                           [default: 9000]\n        --register       name@x.x.x:port,name@x.x.x:port                                  [required]\n        --secsToExpire   default time in seconds for a thalassa registration to be valid  [default: 60]\n        --updateFreq     time frequency in ms to ping the thalassa server                 [default: 20000]\n        --updateTimeout  time in ms to wait for a registration request to respond         [default: 2500]\n        --debug          enabled debug logging\n\n## Client as an Embedded Module\n\nUsing the client from within a node.js application to register your service is simple. Pass options via the `opts` object like `new Thalassa.Client(opts)`:\n\n    var Thalassa = require('thalassa');\n\n    var client = new Thalassa.Client({\n      apiport: 4445,\n      host: 'localhost'\n    });\n\n    client.register('myapp', '1.0.0', 8080);\n\n    // start reporting registrations to the server\n    client.start();\n\n    // stop reporting registrations to the server\n    client.stop();\n\n`opts.log` may be passed just like the server.\n\n### `updateSuccessful` and `updateFailed` Events\n\nThe client will periodically check in with the Thalassa server according to `opts.updateFreq` (default 5000ms). Each registration will product a `updateSuccessful` or `updateFailed` event to be emitted.\n\n  client.on('updateSuccessful', function () {});\n  client.on('updateFailed', function (error) {});\n\n### Querying Registrations\n\nAlso as a module, you can use the client API to query for registrations.\n\n    client.getRegistrations('myapp', '1.0.0', function (err, registrations) {\n        // registrations is an Array of Registrations\n    }\nSee the HTTP API section for the `Registration` structure.\n\n### Metadata\n\nYou can also pass metadata with any registration as a fourth parameter. This can be any javascript object with properties. For example:\n\n    var meta = {\n        az: 'use1a',\n        size: 'm1.large',\n        foo: {\n            bar: 'baz'\n        }\n    };\n    client.register('myapp', '1.0.0', 8080, meta)\n\n# License\n\nLicensed under Apache 2.0. See [LICENSE](https://github.com/PearsonEducation/thalassa-http-clien/blob/master/LICENSE) file.\n","created":"2013-08-29T07:24:52.865Z","modified":"2014-03-18T17:39:36.329Z","lastPublisher":{"name":"mbrevoort","email":"mike@brevoort.com"},"owners":[{"name":"mbrevoort","email":"mike@brevoort.com"}],"other":{"_attachments":{},"_from":".","_id":"thalassa-http-client","_npmUser":{"name":"mbrevoort","email":"mike@brevoort.com"},"_npmVersion":"1.2.25","_rev":"1-464a52df9d35ad91277179f410012a24","author":{"name":"Mike Brevoort","email":"mike.brevoort@pearson.com"},"bugs":{"url":"https://github.com/PearsonEducation/thalassa-http-client/issues"},"contributors":[{"name":"Rich Beaudoin","email":"rich.beaudoin@pearson.com"}],"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"97432cfe08fd9b03b988b4a7af6f78a90f5ba826","tarball":"http://registry.npmjs.org/thalassa-http-client/-/thalassa-http-client-0.1.0.tgz"},"maintainers":[{"name":"mbrevoort","email":"mike@brevoort.com"}],"readmeFilename":"README.md","time":{"modified":"2014-03-18T17:39:36.329Z","created":"2013-08-29T07:24:52.865Z","0.0.0":"2013-08-29T07:24:53.615Z","0.1.0":"2014-03-18T17:39:36.329Z"}}}