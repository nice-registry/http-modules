{"name":"iaas","version":"0.1.9","description":"ImageMagick as a HTTP service, using AWS S3 to store caches","main":"src/index.js","dependencies":{"aws-sdk":"^2.2.26","babel-polyfill":"^6.9.1","body-parser":"^1.14.2","config":"^1.17.1","express":"^4.13.3","formidable":"^1.0.17","gm":"^1.22.0","pg":"^4.4.3","pg-migration":"^1.0.1","uuid":"^2.0.2","promisify-node":"^0.4.0"},"scripts":{"test":"echo \"Error: no test specified\" && exit 1","eslint":"node ./node_modules/eslint/bin/eslint.js src"},"repository":"https://github.com/inventid/iaas","keywords":["image","resize","image","magic","live","resize"],"license":"MIT","homepage":"https://github.com/inventid/iaas","devDependencies":{"babel-cli":"^6.4","babel-eslint":"^6.1.0","babel-preset-es2015":"^6.3","babel-preset-stage-3":"^6.11.0","eslint":"^2.13.1","eslint-plugin-async-await":"0.0.0"},"gitHead":"f6e3e39896fe3c8ffb22a613c9bef2b482c0bf8b","versions":[{"number":"0.1.9","date":"2016-07-07T16:03:38.228Z"}],"readme":"# Live Image Resize\n\n[![Code Climate](https://codeclimate.com/github/inventid/iaas/badges/gpa.svg)](https://codeclimate.com/github/inventid/iaas)\n[![Dependency Status](https://gemnasium.com/inventid/iaas.svg)](https://gemnasium.com/inventid/iaas)\n\n[![Docker downloads](https://img.shields.io/docker/pulls/inventid/iaas.svg)](https://registry.hub.docker.com/u/inventid/iaas/)\n[![GitHub license](https://img.shields.io/github/license/inventid/iaas.svg)](https://github.com/inventid/iaas/blob/master/LICENSE)\n\n## What is it?\n\nThe need to show user generated content is growing on the web.\nHowever, different clients (mobile apps, or a web client) might need these images in other resolutions.\nConverting these every single time is time-consuming and inefficient.\n\nTherefore we present iaas, Imaging-As-A-Service, a joint project between [inventid](https://www.inventid.nl) and [Magnet.me](https://magnet.me).\n\n## How does it work?\n\n### Requesting\n\nA client can simply request an image, and specify the maximum height, width, and a format (e.g. `/sfsdf_1040_1040.png`).\nTo support Apple's retina solution, this can be suffixed with an upscale parameter, e.g. `/sfsdf_1040_1040_2x.png` (but also `_13x` for future use).\nA quick check is made whether this image was previously scaled to that resolution.\n\nIf yes, a redirect is given to the cache location of that image (currently AWS S3).\nOtherwise the image is resized live, and served directly to the client, while a new cached version is uploaded to AWS S3.\n\nThe resize honours the aspect ratio, hence the image is scaled to the maximum size given in the boundary box (which is in the request).\n\n### Uploading\n\nAdding images is equally simple.\nA client can simply post an image, accompanied by a token.\nThese tokens can be requested from a `POST` on `/token` (which you should firewall to certain IP's).\nThat token is then valid once, so your client can upload the file directly, without having it to go through your own application (except for the identifier probably).\n\nLogging takes place in a JSON Logstash enabled format, so it's easy to get into Logstash and Kibana. Great for logging!\n\n### Options\n\nAdditional options can be given when requesting or uploading images.\nAll options for requesting are chainable.\n\n| Option | Usage | Effect |\n|---|---|---|\n| Originals | GET `/example.jpg` | The original image is served. No blurring or cropping will be applied |\n| Cropping | GET `/example_100_100.jpg?fit=crop` | The image is cropped to the resolution, the result is an exact match for the resolution. Images are cropped to the center. |\n| Canvas | GET `/example_100_100.jpg?fit=canvas` | The image is resized as normally, but the edges to the bounding box are filled with white. The image is centered in the bounding box. |\n| Blurring | GET `/example_100_100.jpg?blur=true` | The image is blurred slightly |\n| Crop on upload | POST `/example.jpg?x=30&y=40&width=100&height=200` | The image original is saved after cropping by the suggested parameters |\n\n\n## How to use\n\n### Requesting an image\n\nYou can simply request an image using a plain GET request to `http://localhost:1337/example_100_100.png`.\nThis will trigger the server to search for the image with id `example`, and serve it in a PNG format in a `100x100` resolution.\nDepending on earlier requests, the image might be on the CDN (causing a redirect) or be transcoded on the fly and uploaded later.\nFor Retina (or HiDpi) displays, the postfix `_2x` will appropriately resize the image to that size (or perform a redirect).\nAdditional options can be send through the query parameter, such as `?fit=crop` to crop the image to the bounding box you request.\n\n### Uploading images\n\nIn order to upload an image, you need to do a POST request to `/token`.\nThis post has an payload of an id in json.\nThis endpoint should generally be filtered out by your firewall or loadbalancer.\nThe received token is valid for 15 minutes.\nThe client can then directly use this token to upload a file.\n\nAn example command in curl is `curl -vvv -XPOST http://localhost:1337/token -d '{\"id\": \"test\"}' -H \"Content-Type: application/json\"`\n\nThe client uses another `POST` request to `http://localhost:1337/someimage.jpg`, this will cause the `someimage` key to be used.\nA token also should be send along, this is done in the HTTP-Headers in the `X-Token` parameter.\nThe token will automatically expire once used.\nThe token is only valid for one upload attempt and one id.\n\nAn example command in curl is `curl -vvv -XPOST http://localhost:1337/test.jpg -H \"X-Token: earlier-return-value\" -F \"image=@/home/user1/Desktop/test.jpg\"`\n\n## Configuration\n\n### Settings\n\nYou need to copy the `default.json.example` to `default.json` in the `config` directory.\nThen, specify your own values.\n\nIn case you like to use it in production, call the script like this:\n\n```bash\nNODE_ENV=production node index.js\n```\n\nIt will then additionally load the `production.json` file.\n\n### Database\n\nTo keep the cache links, an additional Postgresql database is used.\nThe program will auto create the tables and maintain the schema, using [pg-migration](https://github.com/rogierslag/pg-migration).\nYou can use a Docker container to run postgresql in development, or use the [excellent postgres app for OSX](http://postgresapp.com/).\nYou need to create the database and its credentials yourself.\nAfter creating these, edit the `default.json` config file.\nAn example for command line `psql` is:\n\n```bash\n sudo -u postgres psql -c \"CREATE USER imageresizer WITH PASSWORD 'rogierisgaaf';\"\n sudo -u postgres createdb -E UTF8 -T template0 --locale=en_US.utf8 imageresizer\n sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE imageresizer to imageresizer;\"\n ```\n\n### Originals\n\nFor quick saving, the original files are kept in `images` subdirectory (retrieving from AWS S3 to determine whether an image exists is too slow).\nBe sure to keep this data and backup it.\nYou can also use the config to let it point to another directory.\nIn that case, ensure the user can write there!\n\n## Developing\n\nDeveloping is relatively easy, once you know how it works.\nSince some programs are required for running the application, we recommend to develop using Docker (the rebuild is quite fast).\nOn Linux and Windows, you will need to install Docker.\nOn OSX the Docker Toolbox suffices.\n\n1. After installing the Docker toolbox (which we will use here), you need to create a Docker machine `docker-machine create inventid --driver=virtualbox`\n2. Then define the docker machine `eval $(docker-machine env inventid)`\n3. Ensure you have a PostgreSQL instance available, see the section on _Database_ on how to achieve this\n3. Next (this also applies for Linux) we'll create the container `mkdir -p /tmp/images && docker build --tag=test . && docker run -p 1337:1337 -v /tmp:/opt/images -v <YOUR_GIT_REPO_LOCATION>/config:/opt/live-image-resize/config test`\n4. Now you can start developing. After each change, stop the container (Ctrl-C) and re-execute the command again. Rebuilds of the container are relatively fast.\n\nQuick way to send images (ensure you have `jq` installed)\n```bash\nIMAGE=test1234567\nPORT=1337\nRES=`curl -vvv -XPOST http://localhost:$PORT/token -d \"{\\\"id\\\": \\\"${IMAGE}\\\"}\" -H \"Content-Type: application/json\"`\nTOKEN=`echo $RES | jq -r .token`\ncurl -vvv -XPOST http://localhost:$PORT/${IMAGE} -H \"X-Token: ${TOKEN}\" -F \"image=@/Users/Rogier/Downloads/IMG_7419.PNG\"\n```\n\n## Contributing\n\nYou can use the `Dockerfile` to quickly stage stuff locally (on OSX use `docker-machine`).\n\nIf you have additions for the code, please [fork the repo](https://github.com/inventid/iaas/fork) and open a Pull Request.\n\n![Main developing companies](https://github.com/inventid/iaas/blob/develop/images/example?raw=true)\n","created":"2016-07-07T16:03:38.228Z","modified":"2016-07-07T16:03:38.228Z","lastPublisher":{"name":"rogierslag","email":"rogier.slag@gmail.com"},"owners":[{"name":"rogierslag","email":"rogier.slag@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"iaas","_nodeVersion":"4.2.6","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/iaas-0.1.9.tgz_1467907415659_0.4865259062498808"},"_npmUser":{"name":"rogierslag","email":"rogier.slag@gmail.com"},"_npmVersion":"2.14.12","_rev":"1-278fe5a626dc41ff374d19e1377f45f5","_shasum":"1db32d41acf5199bf6d206423f51d3ff20ee6231","author":{"name":"Rogier Slag"},"bugs":{"url":"https://github.com/inventid/iaas/issues"},"directories":{},"dist-tags":{"latest":"0.1.9"},"dist":{"shasum":"1db32d41acf5199bf6d206423f51d3ff20ee6231","tarball":"http://registry.npmjs.org/iaas/-/iaas-0.1.9.tgz"},"maintainers":[{"name":"rogierslag","email":"rogier.slag@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-07-07T16:03:38.228Z","created":"2016-07-07T16:03:38.228Z","0.1.9":"2016-07-07T16:03:38.228Z"}}}