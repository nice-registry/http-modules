{"name":"cacher","version":"3.0.0","description":"A memcached backed http cache in the form of express middleware","main":"index.js","scripts":{"test":"mocha -R spec"},"repository":"https://github.com/addisonj/node-cacher","keywords":["memcached","cache","middleware","express","http-caching"],"license":"BSD","dependencies":{"memory-cache":"0.0.5"},"devDependencies":{"mocha":"~1.10.0","express":"~4.4.5","supertest":"~0.6.0","async":"~0.2.9"},"gitHead":"c90df961a916b7c4e9cb1e8963ed2688037c9498","homepage":"https://github.com/addisonj/node-cacher#readme","versions":[{"number":"0.0.1","date":"2012-09-15T05:42:53.850Z"},{"number":"0.0.2","date":"2013-03-04T22:08:28.965Z"},{"number":"0.0.3","date":"2013-03-11T17:56:57.612Z"},{"number":"1.0.0","date":"2013-06-02T16:52:50.423Z"},{"number":"1.0.1","date":"2013-06-02T18:39:15.109Z"},{"number":"1.1.2","date":"2014-06-27T05:51:48.057Z"},{"number":"2.0.0","date":"2014-12-03T18:37:40.365Z"},{"number":"2.0.1","date":"2014-12-14T04:40:04.705Z"},{"number":"2.1.0","date":"2014-12-18T04:48:46.973Z"},{"number":"2.1.1","date":"2015-02-20T06:47:47.130Z"},{"number":"3.0.0","date":"2015-07-24T17:41:49.759Z"}],"readme":"## Cacher\nIt does the hard work so you don't have to!\n\n![Travis](https://travis-ci.org/addisonj/node-cacher.svg)\n\n## What is it?\nHTTP Caching implemented as express middleware, with pluggable backends for support for a variety of caching servers (memcached, redis, etc)\n\n## Features\n- Set expiry times per-app or per-route. It sets proper headers for client caching\n- Avoids the thundering heard by smartly refreshing the cache\n- Emits hit or miss events so you can track your hitrate\n- Simple invalidations\n- Overrides for custom cache keys and dev mode support\n- Obeys (some) client Cache-Control headers\n\n## What does it look like?\n``` JavaScript\nvar Cacher = require(\"cacher\")\n// use the default in memory cache\nvar cacher = new Cacher()\n// or pass in a different cache client (in this cached memcached) for different backend support\nCacherMemcached = require('cacher-memcached')\nvar cacher = new Cacher(new CacherMemcached('host1:12345'))\n\n// as a global middleware\napp.use(cacher.cache('seconds', 30))\n// or per route\napp.get(\"/long-cache\", cacher.cache('days'), ...)\napp.get(\"/short-cache\", cacher.cache('minute'), ...)\n// will set no-cache headers for routes that we explicitly want to ignore caching on\napp.get(\"/no-cache\", cacher.cache(false), ...)\n\n// Backwards compatible with old cache definitions\napp.use(cacher.cacheHourly())\napp.get(\"/long-cache\", cacher.cacheDays(2), ...)\n\n// invalidation support\ncacher.invalidate('/home')\n\n// listen for events to track cache rate and errors\ncacher.on(\"hit\", function(key) {\n  console.log(\"woohoo!\")\n})\ncacher.on(\"miss\", function(key) {\n  console.log(\"doh!\")\n})\ncacher.on(\"error\", function(err) {\n  console.log(err)\n})\n\n// Dev mode, quickly turn off caching when it gets in the way\nvar env = process.env.NODE_ENV || 'development'\nif (env === 'development') {\n  cacher.noCaching = true\n}\n\n// override cache key generation for finer grain control\ncacher.genCacheKey = function(req) {\n  return req.path + req.header('user-agent')\n}\n\n// override cache TTL based on response\ncacher.genCacheTtl = function(res, origTtl) {\n  if (res.statusCode >= 400) {\n    return 0\n  }\n  return origTtl\n}\n```\n\n## Backends\nCurrently, Cacher comes bundled with an in-memory cache\n\nBackends are distributed as separate modules:\n- cacher-memcached (https://github.com/addisonj/cacher-memcached)\n- cacher-redis (https://github.com/addisonj/cacher-redis)\n\n\n## Backend Client Api\nIf you want to implement your own backend, the API is really simple:\n\n```JavaScript\n// pass whatever options are needed for connection/options\n// provide defaults so a client can be fully instantiated with no parameters\nfunction MyBackend(...) {\n}\n\n// cb is required, cb(err, cacheObject)\nMyBackend.prototype.get = function(key, cb) {}\n\nMyBackend.prototype.set = function(key, cacheObject, ttlInSeconds, [cb]) {}\n\nMyBackend.prototype.invalidate = function(key, [cb]) {}\n```\n\n## Testing your backend\nRun unit tests using your backend by doing the following:\n```Shell\ncd Cacher\nnpm link ../myBackend\nCACHER_CLIENT=myBackend npm test\n```\n","starsCount":2,"created":"2012-09-15T05:42:52.253Z","modified":"2015-07-24T17:41:49.759Z","lastPublisher":{"name":"addisonj","email":"addisonj@gmail.com"},"owners":[{"name":"addisonj","email":"addisonj@gmail.com"},{"name":"matthewwithanm","email":"m@tthewwithanm.com"}],"other":{"_attachments":{},"_from":".","_id":"cacher","_nodeVersion":"2.3.1","_npmUser":{"name":"addisonj","email":"addisonj@gmail.com"},"_npmVersion":"2.11.3","_rev":"1-968ffece44dcc3af6aed26950264f0c6","_shasum":"68f20eafb11badf47245ea307a2980ebc61ee585","author":{"name":"Addison Higham","email":"addisonj@gmail.com","url":"github.com/addisonj"},"bugs":{"url":"https://github.com/addisonj/node-cacher/issues"},"contributors":[{"name":"Addison Higham","email":"addisonj@gmail.com","url":"github.com/addisonj"},{"name":"Giovanni Cappellotto","url":"github.com/potomak"}],"directories":{},"dist-tags":{"latest":"3.0.0"},"dist":{"shasum":"68f20eafb11badf47245ea307a2980ebc61ee585","tarball":"http://registry.npmjs.org/cacher/-/cacher-3.0.0.tgz"},"maintainers":[{"name":"addisonj","email":"addisonj@gmail.com"},{"name":"matthewwithanm","email":"m@tthewwithanm.com"}],"readmeFilename":"README.md","time":{"modified":"2015-07-24T17:41:49.759Z","created":"2012-09-15T05:42:52.253Z","0.0.1":"2012-09-15T05:42:53.850Z","0.0.2":"2013-03-04T22:08:28.965Z","0.0.3":"2013-03-11T17:56:57.612Z","1.0.0":"2013-06-02T16:52:50.423Z","1.0.1":"2013-06-02T18:39:15.109Z","1.1.2":"2014-06-27T05:51:48.057Z","2.0.0":"2014-12-03T18:37:40.365Z","2.0.1":"2014-12-14T04:40:04.705Z","2.1.0":"2014-12-18T04:48:46.973Z","2.1.1":"2015-02-20T06:47:47.130Z","3.0.0":"2015-07-24T17:41:49.759Z"},"users":{"barwin":true,"elussich":true}}}