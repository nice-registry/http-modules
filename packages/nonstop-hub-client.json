{"name":"nonstop-hub-client","version":"0.1.0-3","description":"Library for communicating with the nonstop hub HTTP API.","main":"src/index.js","scripts":{"test":"gulp test"},"repository":"https://github.com/LeanKit-Labs/nonstop-hub-client","keywords":["nonstop","ci","build"],"license":"MIT License","homepage":"https://github.com/LeanKit-Labs/nonstop-hub-client","devDependencies":{"gulp":"^3.8.7","gulp-mocha":"^1.0.0","should":"^4.0.4","sinon":"^1.10.3"},"dependencies":{"configya":"~0.1.0","debug":"^2.0.0","lodash":"^2.4.1","mkdirp":"^0.5.0","request":"^2.42.0","when":"^3.4.5"},"gitHead":"f5d17ab490d0199f7bebb801f6d0e6c41dfdd10d","versions":[{"number":"0.1.0-1","date":"2014-09-22T23:34:41.014Z"},{"number":"0.1.0-2","date":"2014-09-23T02:56:15.378Z"},{"number":"0.1.0-3","date":"2014-11-06T16:58:27.121Z"}],"readme":"## nonstop-hub-client\nLibrary for communicating with the nonstop hub HTTP API.\n\n## Use\nTo get a configured instance of the server API, you can use one of the following approaches:\n\n### Configuration hash\nSee the Configuration section for a detailed explanation of the possible configuration values\n```javascript\n// for uploading\nvar server = require( 'nonstop-hub-client' )( {\n  host: 'my-hub',\n  port: 443\n} );\n// uploads will be POSTed to https://my-hub:443/api/package/{package name}\n\n\n// for getting package lists/downloading\nvar server = require( 'nonstop-hub-client' )( {\n  host: 'my-hub',\n  port: 443,\n  project: 'test',\n  owner: 'arobson',\n  branch: 'master'\n} );\n\n// package lists will use the following URL (note - architecture and platform are set automatically)\n// https://my-hub:443/api/package/list?project=test&owner=arobson&branch=master&platform=darwin&architecture=x64\n```\n\n### Daedalus - Service and Configuration\nThis example is a bit over-simplified. See [daedalus](https://github.com/LeanKit-Labs/daedalus) for more advanced use patterns. The point is to show how you can easily use this library in conjunction with daedalus and fount to auto-discover the nonstop-hub end point from Consul.\n\n__index.js__\n```javascript\nvar daedalus = require( 'daedalus' )();\nvar server;\n\ndaedalus.initialize( {\n  hub: {\n    service: 'conitnua-hub',\n    module: './hub-client.js',\n    config: 'hub-client'\n  }\n} )\n.then( function( fount ) {\n  fount.resolve( 'hub', function( hub ) { server = hub; } );\n} );\n```\n\n__hub-client.js__\n```javascript\n// the format of the function returned from the module matches\n// what daedalus expects\nmodule.exports = require( 'continua-hub-client' );\n```\n\n## Configuration\nThe configuration hash can contain a lot of information. Depending on your use case, the required minimum information changes to ensure proper function. Defaults are shown for most values except where noted.\n\n```javascript\n{\n  // required server config\n  host: 'localhost',\n  port: 80, // a port of 443 will turn https on\n\n  // optional server config\n  https: false,\n  apiUrl: 'api', // base URL for all API routes\n  packageList: 'package/list', // the URL to get a list of packages\n  files: 'package', // URL segment where packages can be downloaded from\n  uploads: 'package', // URL segment to upload packages to\n\n  // optional paths\n  downloads: './downloads',\n  installed: './installed'\n\n  // required package filters - no defaults provided\n  project: 'test',\n  owner: 'arobson',\n  branch: 'master',\n  \n  // optional package filters - no defaults provided for these\n  version: '0.1.0',\n  build: #|'release',\n  architecture: 'x64|x86',\n  platform: 'darwin|linux|win32',\n  osName: 'Windows',\n  osVersion: '2012 R2'\n}\n```\n\n  Note: if you will be requesting package lists, you must provide project, owner and branch in the config. There are no defaults for these values.\n\n### Uploading Packages (cli/build agent)\nThe only required information can be provided via the service argument from [daedalus](https://github.com/LeanKit-Labs/daedalus) or via the config argument.\n\n```javascript\nvar server = require( 'continua-hub-client' )( { host: 'my-hub', port: 80 } );\n```\n\n### Listing and Downloading Packages (bootstrapper)\nListing and downloading require the project, owner and branch to be specified (at least). The platform and architecture are automatically populated based on the machine the code is running on.\n\n```javascript\nvar server = require( 'continua-hub-client' )( { \n  host: 'my-hub',\n  port: 80,\n  project: 'test',\n  owner: 'arobson',\n  branch: 'master'\n} );\n```\n\n## Server API\nOnce you have access to the server instance, you can find the latest package version available, download a package or upload a package.\n\n### download( target, [token|username], [password] )\nDownloads the target package. You can provide either a token OR a username and password in order to authenticate with the hub service. The file will be downloaded to the path specified by the `downloads` property of the config hash (default is './downloads'). Returns a promise that resolves to an object with the format:\n\n```javascript\n  { \n    path: /* path where the file was downloaded */, \n    installPath: /* path where packages should be unpacked */, \n    file: /* the file that was downloaded */\n  }\n```\n\n```javascript\n// target - the full package name to download\n// token|username - either a auth token or user name\n// password - if a user name was provided, you should also provide a password to authenticate\nserver.download( 'test~arobson~master~0.1.0~1~darwin~any~any~x64.tar.gz', 'some-auth-token' )\n  .then( function( info ) {\n    // on success\n  } );\n```\n### getLatest( ignore, [token|username], [password] )\nGets information for the latest available package given the package properties set by config (or by the set calls). Returns a promise that resolves to a package information object with the format:\n\n```javascript\n  {\n    file: 'proj1~owner1~branch2~0.1.0~1~darwin~OSX~10.9.2~x64.tar.gz'\n    project: 'test',\n    owner: 'arobson',\n    branch: 'master',\n    version: '0.1.0-1',\n    build: '1',\n    platform: 'darwin',\n    osName: 'any',\n    osVersion: 'any',\n    architecture: 'x64'\n  }\n```\n\nMost likely, the property you need from this object will be the `file` property - supplying this to the `download` call will allow your application to download the latest.\n\n```javascript\n// ignore - an array of versions that should be ignored when determining the latest package\n// token|username - either a auth token or user name\n// password - if a user name was provided, you should also provide a password to authenticate\nserver.getLatest( [], 'some-auth-token' )\n  .then( function( latest ) {\n\n  } );\n```\n\n### setBranch( branch )\nFilter packages by branch when getting latest.\n\n```javascript\nserver.setBranch( 'dev' );\n```\n\n### setBuild( build )\nFilter packages by build when getting latest. Valid build values are an existing build number or 'release' (limits packages to only official releases).\n\n  Note: Only use with a build number if you've called setVersion or provided a version via config\n\n```javascript\n// only allow official releases when getting latest\nserver.setBuild( 'release' );\n\n// limit to a specific build number\nserver.setBuild( 4 );\n```\n\n### setOwner( owner )\nFilter packages by specific owner (fork) when getting latest.\n\n```javascript\nserver.setOwner( 'ifandelse' );\n```\n\n### setVersion( version )\nFilter packages by version when getting latest. Valid versions are 3 part specifiers not including the build. Setting this without limiting the build to a number or 'release' will cause the newest build to be pulled for the version when getting latest.\n\n```javascript\nserver.setVersion( '0.1.2' )\n```\n\n### upload( packageInfo, [token|username], [password] )\nUploads a package. PackageInfo should be the same format of the object returned from the pack library's `create` call. Returns a promise that resolves to the HTTP response body on success (statusCode === 200).\n\n```javascript\nserver.upload( info, 'someUserName', 'somePassword' )\n  .then( function( response ) {\n    // on success\n  } );\n```\n\n## Dependencies\nThis would not have been possible without several great Node modules:\n\n * request\n * when\n * lodash\n * mkdirp\n * debug\n\n## Dependents\nThe following nonstop projects rely on this library:\n\n * [build cli](https://github.com/LeanKit-Labs/nonstop)\n * [build agent](https://github.com/LeanKit-Labs/nonstop-agent)","created":"2014-09-22T23:34:41.014Z","modified":"2014-11-06T16:58:27.121Z","lastPublisher":{"name":"arobson","email":"asrobson@gmail.com"},"owners":[{"name":"arobson","email":"asrobson@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"nonstop-hub-client","_npmUser":{"name":"arobson","email":"asrobson@gmail.com"},"_npmVersion":"1.4.26","_rev":"1-ebfbdcece5000c9a695361faf2bd396d","_shasum":"c77aab92be0990a0f78066f66ef2c50d24aff5c6","author":{"name":"Alex Robson"},"bugs":{"url":"https://github.com/LeanKit-Labs/nonstop-hub-client/issues"},"directories":{},"dist-tags":{"latest":"0.1.0-3"},"dist":{"shasum":"c77aab92be0990a0f78066f66ef2c50d24aff5c6","tarball":"http://registry.npmjs.org/nonstop-hub-client/-/nonstop-hub-client-0.1.0-3.tgz"},"maintainers":[{"name":"arobson","email":"asrobson@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-11-06T16:58:27.121Z","created":"2014-09-22T23:34:41.014Z","0.1.0-1":"2014-09-22T23:34:41.014Z","0.1.0-2":"2014-09-23T02:56:15.378Z","0.1.0-3":"2014-11-06T16:58:27.121Z"}}}