{"name":"reshandler","description":"A response handler that makes HTTP response processing simpler.","tags":["http","response","handler","filter","utility","decompress","encoding"],"version":"0.1.8","repository":"https://github.com/lyroyce/reshandler","license":"MIT","engines":["node >= 0.8.0"],"main":"index.js","dependencies":{"iconv-lite":"~0.2.0"},"homepage":"https://github.com/lyroyce/reshandler","versions":[{"number":"0.1.0","date":"2014-04-26T07:53:47.387Z"},{"number":"0.1.1","date":"2014-04-26T13:11:29.275Z"},{"number":"0.1.2","date":"2014-04-27T00:27:48.599Z"},{"number":"0.1.3","date":"2014-04-27T00:29:02.988Z"},{"number":"0.1.4","date":"2014-04-27T01:42:18.268Z"},{"number":"0.1.5","date":"2014-04-27T03:24:56.781Z"},{"number":"0.1.6","date":"2014-04-27T07:03:05.956Z"},{"number":"0.1.7","date":"2014-05-03T06:24:17.614Z"},{"number":"0.1.8","date":"2014-08-16T03:31:07.358Z"}],"readme":"# reshandler\r\n\r\nA response handler that makes HTTP response processing simpler. It's desinged to facilitate the work with modules like `http` and `request` that require a callback function for the `response` event.\r\n\r\nBy using chaining filters, `reshandler` helps you to handle things like chunks concatenation, gzip decompression and charset conversion in a beautiful way.\r\n\r\n# Example with http module\r\n\r\nThe example below gets and processes the HTTP response according to its content type. It tries to decompress the response data, convert the response data to UTF-8 if necessary, and outputs the processed response data at last.\r\n\r\n\tvar http = require('http');\r\n\tvar reshandler = require('reshandler');\t\t\t\t\r\n\thttp.get(\"http://www.example.com/?q=123\", \r\n\t\treshandler.new()\t\t\t\t\t\t\t\t// create a new response handler\r\n\t    .onType('text/html', reshandler.decompress())\t// add a pre-defined filter for HTML\r\n\t    .onType('text/html', reshandler.transcode())\t// add another pre-defined filter for HTML\r\n\t\t.done(function(err, res, buffer){\t\t\t\t// add the last callback\r\n\t\t\tconsole.log(\"The processed response: \" + buffer.toString());\r\n\t\t})\r\n\t).on('error', function(e) {\r\n\t\tconsole.log(\"Got error: \" + e.message);\r\n\t});\r\n\r\n# APIs\r\n\r\n- **reshandler.new()**\r\n\r\n\tCreate a response handler. Same as `new reshandler.Handler()`\r\n\r\n- **reshandler.Handler()**\r\n\r\n\tThe main Handler class.\r\n\r\n- **Handler.onType(contentType, function (res, buffer, callback) {...})**\r\n\r\n\tRegister a pre-defined or custom filter function for the specified `contentType`. The filter function will only be called when `contentType` matches(is a substring of) 'Content-Type' header of the response. Multiple filter functions can be registered and will be called in the order they were registered.\r\n\r\n\tPlease note that `callback`(`function(err, res, buffer)`) must be called in the end of each filter function for chaining filters to work. Unless you are sure that filter function is the last one to execute.\r\n\r\n\t\t//...\r\n\t\t.onType('image/png', function (res, buffer, callback) {\t// the first filter\r\n\t\t\ttry{\r\n\t\t\t\tconsole.log(\"Let's make some change to the buffer.\");\r\n\t\t\t\tcallback(null, res, buffer);\t// the result is passed to the next filter\r\n\t\t\t}catch(err){\r\n\t\t\t\tcallback(err, res, buffer);\t\t// the result/error is passed to the last callback\r\n\t\t\t}\r\n\t    })\r\n\t    .onType('image/png', function (res, buffer, callback) {\t// the next filter\r\n\t\t\tconsole.log(\"This is the end.\");\t// the last callback won't be called\r\n\t    })\r\n\t    .done(function(err, res, buffer){\t\t// the last callback\r\n\t\t\tif(err) console.log(\"Got error: \" + err.message);\r\n\t\t\telse console.log(\"Got response: \" + buffer.toString());\r\n\t\t})\r\n\t    //...\r\n\r\n- **Handler.done([function(err, res, buffer, contentType){...}])**\r\n\r\n\tBuild the callback for the `response` event. The only argument is a optional function. If provided, it will be registered as the last callback function to receive the processed response. \r\n\r\n# Pre-defined filters\r\n\r\n- **reshandler.decompress()**\r\n\r\n\tBuild the callback function that automatically unzip or inflate response buffer.\r\n\r\n- **reshandler.transcode()**\r\n\r\n\tBuild the callback function that automatically convert the charset of response buffer to UTF-8.\r\n\r\n\r\n","starsCount":1,"created":"2014-04-26T07:53:47.387Z","modified":"2014-08-16T03:31:07.358Z","lastPublisher":{"name":"lyroyce","email":"lyroyce@sina.com"},"owners":[{"name":"lyroyce","email":"lyroyce@sina.com"}],"other":{"_attachments":{},"_from":".","_id":"reshandler","_npmUser":{"name":"lyroyce","email":"lyroyce@sina.com"},"_npmVersion":"1.4.7","_rev":"1-1610cb5cc26a20705cc2f98568fb85b8","_shasum":"bb4287fc00b62f3b62f5915dfca03dec1691ff38","author":{"name":"Yin Li","email":"lyroyce@sina.com"},"bugs":{"url":"https://github.com/lyroyce/reshandler/issues"},"directories":{},"dist-tags":{"latest":"0.1.8"},"dist":{"shasum":"bb4287fc00b62f3b62f5915dfca03dec1691ff38","tarball":"http://registry.npmjs.org/reshandler/-/reshandler-0.1.8.tgz"},"maintainers":[{"name":"lyroyce","email":"lyroyce@sina.com"}],"readmeFilename":"README.md","time":{"modified":"2014-08-16T03:31:07.358Z","created":"2014-04-26T07:53:47.387Z","0.1.0":"2014-04-26T07:53:47.387Z","0.1.1":"2014-04-26T13:11:29.275Z","0.1.2":"2014-04-27T00:27:48.599Z","0.1.3":"2014-04-27T00:29:02.988Z","0.1.4":"2014-04-27T01:42:18.268Z","0.1.5":"2014-04-27T03:24:56.781Z","0.1.6":"2014-04-27T07:03:05.956Z","0.1.7":"2014-05-03T06:24:17.614Z","0.1.8":"2014-08-16T03:31:07.358Z"},"users":{"lyroyce":true}}}