{"name":"express-nedb-rest","version":"1.2.4","description":"REST api for nedb database implemented in nodejs, based on express http server","main":"index.js","dependencies":{"body-parser":"^1.15.2","express":"^4.14.0","jison":"^0.4.17","nedb":"^1.8.0"},"devDependencies":{},"scripts":{"test":"test.js","start":"node test/test.js"},"repository":"https://github.com/bi-tm/express-nedb-api","keywords":["nedb","express","rest","api","nodejs"],"license":"MIT","homepage":"https://github.com/bi-tm/express-nedb-api#readme","gitHead":"d29238f4f1becf0dbf8dffb448a5262acb4acde7","versions":[{"number":"1.0.0","date":"2016-08-24T22:48:54.895Z"},{"number":"1.0.1","date":"2016-08-28T17:24:08.522Z"},{"number":"1.0.2","date":"2016-08-28T17:38:16.050Z"},{"number":"1.0.4","date":"2016-08-29T13:03:52.442Z"},{"number":"1.0.5","date":"2016-08-29T13:27:18.594Z"},{"number":"1.0.6","date":"2016-08-29T13:46:03.566Z"},{"number":"1.0.7","date":"2016-08-29T22:16:05.717Z"},{"number":"1.1.0","date":"2016-09-29T14:01:47.345Z"},{"number":"1.1.1","date":"2016-10-18T20:19:51.082Z"},{"number":"1.2.0","date":"2017-04-07T13:22:49.785Z"},{"number":"1.2.2","date":"2017-04-08T21:11:20.766Z"},{"number":"1.2.3","date":"2017-04-10T21:12:18.812Z"},{"number":"1.2.4","date":"2017-04-15T11:06:26.812Z"}],"readme":"# express-nedb-rest\nREST API for [NeDB](https://github.com/louischatriot/nedb) database, based on [express](http://expressjs.com/) HTTP server.\n\nRecently i found the [NeDB](https://github.com/louischatriot/nedb)-project of Louis Chatriot.\nHe developed a simple and very fast in-memory database (thank you!).\nI like it's zero administration and easy integration into nodejs application.\nThere is no need to start a daemon process and to communicate with it.\nUnfortunately i found no RESTful web API for this database, so i implement own by my own.\n\nMy module is built on [ExpressJS](http://expressjs.com/) server framework and provides an express Router object.\nThis can be integrated easily into any express application as middleware.\n\nThe API enables client sided javascript components to access database content via HTTP RESTful calls.\nThis can be used i.e. for HTML5 applications.\n\n## Installation\nYou can download the source from [Github](https://github.com/bi-tm/express-nedb-rest) or install it with npm:\n\n```\nnpm install express-nedb-rest\n```\n\n## Quick start\nFollowing code snippet starts an express server, which serves nedb api at port 8080.\n```\nvar express = require('express');\nvar nedb = require('nedb');\nvar expressNedbRest = require('express-nedb-rest');\n\n// setup express app\nvar oApp = express();\n\n// create  NEDB datastore\nvar datastore = new nedb({ filename: \"test.db\",  autoload: true });\n\n// create rest api router and connect it to datastore  \nvar restApi = expressNedbRest();\nrestApi.addDatastore('test', datastore);\n\n// setup express server to serve rest service\noApp.use('/', restApi);\n\noApp.listen(8080, function () {\n    console.log('you may use nedb rest api at port 8080');\n});\n```\n\nAfter starting the sample server, you can request a list of nedb datastores at `http://localhost:8080/`.\nYou will get a response like:\n```\n[\n    {\"name\":\"test\",\"link\":\"http://localhost:8080/test\"}\n]\n```\n\nFor further testing you should use a REST client (i.e. [postman](https://www.getpostman.com/)\nor use my primitive test tool in path test/test.js).\n\n## Test tool\nIn filepath `test` you will find a test tool `test.js`.\nYou can start it with command ```node test/test.js```.\nIt creates an express HTTP server and provides an `index.html` as web frontend.\nThis frontend contains a form, in which you may set HTTP method, url and body text.\nYou may execute the different HTTP methods (GET, POST, PUT, DELETE) and you will see the response content.\n\n![screenshot](/test/screenshot.png)\n\n## JavaScript module\nThe command ```require('express-nedb-rest')``` supplies a constructor function.\nIt creates an express [Router](http://expressjs.com/de/4x/api.html#router) object.\nThe router can be used as express middleware.\n\n### Methods\n- constructor(options?)  \n  The constructor accepts an object as optional parameter.  \n  Currently there is only one option:\n  - convertToDate:boolean  \n    true (default)= if as JSON string contains a date ([ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)), the string will be converted JavaScript Date object\n    Please see section [Date Objects](#date-object).\n- addDatastore(collection:string, store:nedb)  \n  Register a NeDB database for rest api. The NeDB database can be accessed under the collection name\n- setValidator(callback:function)  \n  Register a callback function which will be called as validator before each NeDB database call.  \n  The validator function should have the typical expressJS signature (req, res, next)\n\n## API schema\n\nThe module can be connected to multiple NeDB data storages, which are called *collections*.\nEach [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) command is a combination of a HTTP method (GET, POST, PUT, DELETE), URL and HTTP-body.\nThe following table gives a quick overview of possible commands.\n\n| URL              | Method | Notes                                                                    |\n|----------------- | ------ | ------------------------------------------------------------------------ |\n| /                | GET    | get list of collections (= datastores)                                   |\n| /:collection     | GET    | search documents in a collection (uses query parameter $filter $orderby) |\n| /:collection/:id | GET    | retrieve a single document                                               |\n| /:collection     | POST   | create a single document                                                 |\n| /:collection/:id | PUT    | update a single document                                                 |\n| /:collection     | PUT    | update multiple documents (uses query parameter $filter)                 |\n| /:collection/:id | DELETE | remove single a document                                                 |\n| /:collection     | DELETE | remove multiple documents (uses query parameter $filter)                 |\n\n## <a name=\"creating-documents\">Creating Documents</a>\nTo create a document, use a POST call and put the document into HTTP body. You can only insert one document per call.\nEach document must have a unique key value, which is named '_id'. If you don't define an _id,\nNeDB will generate a 16 character long string as _id. Please refer to [NeDB documentation](https://github.com/louischatriot/nedb#inserting-documents).\nOn success the server will respond with status code 201, and the body contains the created document as JSON string.\n\n## <a name=\"reading-documents\">Reading Documents</a>\nRead operation are done by HTTP GET calls. You can read a single document by appending the document _id to the URL.\nIn this case the server will respond with the document as JSON string.\n\n```\nHTTP GET /fruits/J1t1kMDp4PWgPfhe\n```\n\nYou can also query multiple documents and set a [$filter](#$filter) as parameter. In that case the response contains an array of document objects (JSON formatted).\nYou may also get an empty array, if no document matches the filter. The result can be sorted with parameter [$orderby](#$orderby)\n\n```\nHTTP GET /fruits?$filter=$price $lt 3.00&$orderby=price\n```\n\n## <a name=\"updating-documents\">Updating Documents</a>\nUpdating operations are done by HTTP PUT calls. You can update a single document by appending the document key (_id) to URL.\nYou must provide the document in HTTP body as JSON string. You cannot change key field (_id).\nThe document will be completely overwritten with the new content.\n\nIf you don't want to update every field of the document, but only change some of them, you have to use a special [NeDB syntax](https://github.com/louischatriot/nedb#updating-documents).\nThere are operations $set, $unset, $inc and more, to update a field.\n\n```\nHTTP PUT /fruits/J1t1kMDp4PWgPfhe\n{ $set: { discount: 0.10 } }\n```\n\nYou can also update multiple documents by calling a PUT command without _id. You should define a [$filter](#$filter), otherwise all documents are changed.\nChanging multiple documents makes only sense in combination with update operations like $set. Otherwise all documents of a collection will have the same content.\n```\nHTTP PUT /fruits?$filter=name $regex berry\n{ $set: { discount: 0.10 } }\n```\n\n## <a name=\"deleting-documents\">Deleting Documents</a>\nDocuments can be deleted by HTTP DELETE calls. You can delete a single document by appending the document key (_id) to the URL.\n```\nHTTP DELETE /fruits/J1t1kMDp4PWgPfhe\n```\n\nIf you omit the _id, you must define [$filter](#$filter) parameter, to specify a subset of documents.\nOtherwise the server will respond with error status 405. This shall protect you to delete all documents by accident.\n\n```\nHTTP DELETE /fruits?$filter=name $regex berry\n```\n\n## <a name=\"$filter\">Query parameter $filter</a>\nThe $filter parameter is used, to define a subset of documents of a collection.\nFilter may be used for [reading](#reading-documents) (GET), [updating](#updating-documents) (PUT)\nand [deleting](#deleting-documents) (DELETE) commands.\n\nA filter consists of one or more conditions, which are linked with logical and/or operations.\nFilters are set by the $filter parameter. The string will be parsed and transformed to a NeDB filter object.\nFilters has format <fieldname> <operator> <value>. Values may be a String, Boolean, Number, Date or Array.\n\nIf you compare with a date value, please define it as ISO-8601 string (i.e. 2017-04-06T08:39:44.016Z). Please refer to section \"[Date Objects](#date-object)\"\n\nFor the operators $in and $nin an array must be given as value. Currently this array cannot obtain a single value.\nArrays are delimited by `,`. Another constraint is that an array can only contain a single type of either String of Number.\nThe array `1,2,hello` will not work.\n\nHere is a list of valid operations. For more informations please consult [NeDB documentation](https://github.com/louischatriot/nedb#operators-lt-lte-gt-gte-in-nin-ne-exists-regex).\n\n| operators | description                                                   | example                                                 |\n| --------- | ------------------------------------------------------------- | ------------------------------------------------------- |\n| $eq $ne   | equal, not equal                                              | /fruits?$filter=color $eq red                           |\n| $lt $lte  | less than, less than or equal                                 | /fruits?$filter=price $lt 2.00                          |\n| $gt $gte  | greater than, greater than or equal                           | /fruits?$filter=price $gte 5.00                         |\n| $exists   | checks whether the document posses the property field.        | /fruits?$filter=$exists discount                        |\n| $regex    | checks whether a string is matched by the regular expression. | /fruits?filter=name $regex foo                          |\n| $and $or  | logical and/or oparator                                       | /fruits?$filter=name $eq apple $and color $eq red       |\n| $in $nin  | member of, not member of                                      | /fruits?$filter=name $in apple,banana                   |\n| $not      | not operator                                                  | /fruits?$filter=$not name $regex foo                    |\n\n## <a name=\"$orderby\">Query parameter $orderby</a>\nYou may sort the result of a query with \"$orderby\" parameter.\nYou can use it in [reading](#reading-documents) (GET) operations only.\nThe parameter may contain multiple fieldnames concatenated by commas (,).\nEach fieldname can be followed by keyword `asc` or `desc` to define sorting direction.\nAscending is default direction, so you may omit it.\n\nExamples:\n\n```HTTP GET /fruits?$orderby=price```\n\n```HTTP GET /fruits?$filter=color $eq red&$orderby=price```\n\n## <a name=\"$count\">Query parameter $count</a>\nIf you append $count parameter to a query, the server returns the number of of matching documents instead of a result set.\nYou can use this parameter in [reading](#reading-documents) (GET) operations only.\nThe server responds with a number (no JSON object or array).\n\nExample:  ```HTTP GET /fruits?$filter=name $eq apple&$count```\n\n## <a name=\"pagination\">Query parameter $skip and $limit</a>\nIf you want to fetch results in several packages, you may use pagination parameters $skip and $limit.\nThey should be used together with [$orderby](#$orderby) parameter.  \nParameter $skip sets the count of documents, which will be deleteted from the beginning of result set.  \nParameter $limit sets maximal count of documents in the result set.  \nYou can use this parameter in [reading](#reading-documents) (GET) operations only.\n\nExample:  ```HTTP GET /fruits?$filter=name $eq apple&$skip=1&$limit=2```\n\n## <a name=\"$single\">Query parameter $single</a>\nIf you read from collections with HTTP GET, the result will be always an array of documents, \neven if you use query parameter [$limit](#pagination)=1, or only one docment matches the [$filter](#$filter). \n\nIf you prefer to get a single object but not an array, you must use query parameter $single instead.\nThe NeDB database will be queried with function ´findOne´, and you will get only one document as JSON object. \nIf your query finds no document, you will get a 404-error code, instead of an empty array.\n\nExample:  ```HTTP GET /fruits?$filter=name $eq apple&$single```\n\n## <a name=\"date-object\">Date Objects</a>\nThere is no general specification how to define a date in JSON string. Nevertheless you want to set date-time values in documents.\nAs solution i use a modified JSON-parser. If you set an ISO-8601 string into document's JSON (i.e. { \"date\":\"2017-04-06T08:39:44.016Z\" } ), \nthe string is parsed to JS Date object. In NeDB the date field will be a Date object instead of String.\n\nI added this special feature in version 1.2.0. In older releases all strings were transfered to NeDB without changes.\nIf you want to switch back to the old behaviour, you have to set an option when instantiating express-nedb-rest object:\n```var restApi = expressNedbRest({convertToDate:false});```\n","created":"2016-08-24T22:48:54.895Z","modified":"2017-04-15T11:06:26.812Z","lastPublisher":{"name":"bi-tm","email":"torsten.manhardt@gmx.de"},"owners":[{"name":"bi-tm","email":"torsten.manhardt@gmx.de"}],"other":{"_attachments":{},"_from":".","_id":"express-nedb-rest","_nodeVersion":"4.4.5","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/express-nedb-rest-1.2.4.tgz_1492254384639_0.7844191587064415"},"_npmUser":{"name":"bi-tm","email":"torsten.manhardt@gmx.de"},"_npmVersion":"2.15.5","_rev":"5-09e6a075d684e28a2d773e199b960810","_shasum":"184253a5c21910bf4efa5a0154e63040c4ba17ec","author":{"name":"Torsten Manhardt"},"bugs":{"url":"https://github.com/bi-tm/express-nedb-api/issues"},"directories":{},"dist-tags":{"latest":"1.2.4"},"dist":{"shasum":"184253a5c21910bf4efa5a0154e63040c4ba17ec","tarball":"https://registry.npmjs.org/express-nedb-rest/-/express-nedb-rest-1.2.4.tgz"},"maintainers":[{"name":"bi-tm","email":"torsten.manhardt@gmx.de"}],"readmeFilename":"README.md","time":{"modified":"2017-04-15T11:06:26.812Z","created":"2016-08-24T22:48:54.895Z","1.0.0":"2016-08-24T22:48:54.895Z","1.0.1":"2016-08-28T17:24:08.522Z","1.0.2":"2016-08-28T17:38:16.050Z","1.0.4":"2016-08-29T13:03:52.442Z","1.0.5":"2016-08-29T13:27:18.594Z","1.0.6":"2016-08-29T13:46:03.566Z","1.0.7":"2016-08-29T22:16:05.717Z","1.1.0":"2016-09-29T14:01:47.345Z","1.1.1":"2016-10-18T20:19:51.082Z","1.2.0":"2017-04-07T13:22:49.785Z","1.2.2":"2017-04-08T21:11:20.766Z","1.2.3":"2017-04-10T21:12:18.812Z","1.2.4":"2017-04-15T11:06:26.812Z"}}}