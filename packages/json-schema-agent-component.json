{"name":"json-schema-agent-component","version":"0.0.16","description":"JSON Hyper-Schema HTTP client","main":"index.js","scripts":{"test":"mocha --ui bdd test/tests.js test/reftests.js","test-server":"node test/server.js"},"dependencies":{"json-schema-core-component":"https://github.com/ericgj/json-schema-core/tarball/master","json-schema-hyper-component":"https://github.com/ericgj/json-schema-hyper/tarball/master","json-schema-uri-component":"https://github.com/ericgj/json-schema-uri/tarball/master","emitter-component":"https://github.com/component/emitter/tarball/master","each-component":"https://github.com/component/each/tarball/master","component-type":"https://github.com/component/type/tarball/master","is-browser":"https://github.com/forbeslindesay/is-browser/tarball/master"},"devDependencies":{"superagent":"https://github.com/visionmedia/superagent/tarball/master","mocha":"*"},"repository":"https://github.com/ericgj/json-schema-agent","license":"MIT","readme":"\n# json-schema-agent\n\n  **Please note this library is not ready for production use.**\n\n  JSON Hyper-Schema HTTP REST client. Together with [json-schema-core][core] \n  and [json-schema-hyper][hyper], this library provides a basic mechanism for\n  correlating instances with schema over HTTP. It also provides validation \n  of request and response messages (`schema` and `targetSchema`), if \n  [json-schema-valid][valid] is used. \n  \n  Refer to the JSON Schema [Core v4][speccore] and [Hyper-Schema][spechyper] \n  IETF Internet Draft specs for more info.\n\n\n## Installation\n\ncomponent:\n\n    $ component install ericgj/json-schema-agent\n\nnpm:\n\n    $ npm install json-schema-agent-component\n\n\n## Examples\n\n  ```javascript\n\n  // Simple GET\n\n  var agent = new Agent();\n  agent.get('http://some.uri/path', function(err,correlation){\n    correlation.instance  // the JSON instance (parsed body of response)\n    correlation.schema    // the schema\n  })\n\n\n  // POST using link attributes\n\n  var link = { href: 'http://example.com/thing',\n               rel: 'create',\n               mediaType: 'application/vnd.thing+json'\n             }\n\n  agent.post(link, obj, fn);\n\n  // or automatically follow method defined in link\n\n  link.method = 'POST'\n  agent.follow(link, obj, fn);\n\n\n  // follow chain of links\n\n  agent.follow(link, function(err, correlation){\n    var nextItem = correlation.rel('next');  // find link rel=\"next\" in the schema\n    agent.follow(nextItem, fn)\n  })\n\n  \n  // fetch and dereference schema from link\n  // note schema is cached to the agent\n  \n  agent.getSchema(link, function(err,schema){\n    schema    // the parsed, dereferenced schema\n  })\n\n  \n  // dereference raw schema object\n  \n  agent.dereference(data, function(err,schema){\n    schema    // the parsed, dereferenced schema\n  })\n\n\n  // Configuration\n \n  // set default base uri for resolving relative URIs in links\n  // in-browser, typically you'd want to set this to window.location.origin\n\n  agent.base('http://example.com/api'); \n  \n\n  // set underlying http client (class)\n  var httpClient = require('superagent');\n  Agent.service(httpClient);\n\n\n  ```\n\n## API\n\n   \n## Running tests\n\n### In browser:\n\n1. Unit tests: \n  - browse to file:// `test/index.html`\n  - browse to file:// `test/refs.html`\n\n2. Functional tests:\n\n  ```sh\n  $ node test/server.js\n  ```\n  And browse to `http://localhost:3000/functional.html`\n\n\n### In Node-land:\n\n1. Unit tests:\n  \n  ```sh\n  $ npm test\n  ```\n\n2. Functional tests:\n\n  ```sh\n  $ node test/server.js &\n  $ mocha --ui bdd test/functional.js\n  ```\n\n## License\n\n  MIT\n\n\n## Limitations\n\n\n- Note that an underlying HTTP client library must be specified, it is not\n  built-in. The API for requests/responses is equivalent to a simple subset \n  of [superagent's][superagent]. So superagent is the easiest choice, but not\n  the only one.\n\n- The Correlation object is implemented in [json-schema-core][core], and \nextended in [json-schema-hyper][hyper], qq.v. for more examples of usage.\n\n- Both Content-Type and Link header -style correlation methods are supported\n(see [Core, sec. 8][speccore8]). However, specification of the _root relation_ \nvia the Link header (see [Hyper-Schema, sec. 4.2][spechyper4-2]), is not \ncurrently supported. This may be implemented in the future.\n\n- This library provides parsing of the `media` property within schemas, \nhowever the internal representation of media type values (i.e., the use of this\ninformation in parsing the values) is left for the upstream application.\n\n- The `readOnly` property within Link Description Object (LDO) schemas is\nnot currently validated during write operations (POST/PUT/PATCH). It is not\nclear from [the spec][spechyper4-4] whether it is the responsibility of the \nclient to do so.\n\n- The `pathStart` schema property is not currently validated when correlating\ninstances ([Hyper-Schema, sec. 4.5][spechyper4-5]). This may be implemented in \nthe future.\n\n- Likewise, the determination of _authoritative_ representation of the `self`\nlink target is not currently implemented \n([Hyper-Schema, sec. 5.2.2][spechyper5-2-2]), but may be in the future.\n\n\n[spechyper]: http://tools.ietf.org/html/draft-luff-json-hyper-schema-00\n[spechyper4-2]: http://tools.ietf.org/html/draft-luff-json-hyper-schema-00#section-4.2\n[spechyper4-4]: http://tools.ietf.org/html/draft-luff-json-hyper-schema-00#section-4.4\n[spechyper4-5]: http://tools.ietf.org/html/draft-luff-json-hyper-schema-00#section-4.5\n[spechyper5-2-2]: http://tools.ietf.org/html/draft-luff-json-hyper-schema-00#section-5.2.2\n[speccore]: http://tools.ietf.org/html/draft-zyp-json-schema-04\n[speccore8]: http://tools.ietf.org/html/draft-zyp-json-schema-04#section-8.1\n[core]: https://github.com/ericgj/json-schema-core\n[hyper]: https://github.com/ericgj/json-schema-hyper\n[valid]: https://github.com/ericgj/json-schema-valid\n[superagent]: https://github.com/visionmedia/superagent\n\n","versions":[{"number":"0.0.16","date":"2013-10-16T15:09:44.597Z"}],"created":"2013-10-16T15:09:42.756Z","modified":"2013-10-16T15:09:44.597Z","lastPublisher":{"name":"ericgj","email":"ericgj72@gmail.com"},"owners":[{"name":"ericgj","email":"ericgj72@gmail.com"}],"other":{"_attachments":{},"_id":"json-schema-agent-component","_npmUser":{"name":"ericgj","email":"ericgj72@gmail.com"},"_npmVersion":"1.1.62","_rev":"1-9b41f33fdf0d9ea39331ef49a4002081","author":{"name":"Eric Gjertsen"},"directories":{"test":"test"},"dist-tags":{"latest":"0.0.16"},"dist":{"shasum":"fff80a8588e5b331785b7b68f3151bd3a35e0af2","tarball":"http://registry.npmjs.org/json-schema-agent-component/-/json-schema-agent-component-0.0.16.tgz"},"maintainers":[{"name":"ericgj","email":"ericgj72@gmail.com"}],"time":{"modified":"2013-10-16T15:09:44.597Z","created":"2013-10-16T15:09:42.756Z","0.0.16":"2013-10-16T15:09:44.597Z"}}}