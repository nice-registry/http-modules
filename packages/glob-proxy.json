{"name":"glob-proxy","version":"0.0.7","description":"HTTP proxying","main":"./src/glob-proxy.js","bin":{"glob-proxy":"./src/shell.js"},"dependencies":{"mockjs":"^0.1.1"},"devDependencies":{},"scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/lcepy/glob-proxy","keywords":["http-proxy"],"license":"MIT","homepage":"https://github.com/lcepy/glob-proxy","versions":[{"number":"0.0.1","date":"2014-05-06T07:53:26.270Z"},{"number":"0.0.2","date":"2014-05-06T07:59:03.884Z"},{"number":"0.0.3","date":"2014-05-06T11:19:40.627Z"},{"number":"0.0.4","date":"2014-05-07T09:05:09.083Z"},{"number":"0.0.5","date":"2014-05-08T06:58:07.292Z"},{"number":"0.0.6","date":"2014-05-13T07:22:31.428Z"},{"number":"0.0.7","date":"2014-05-19T03:28:28.421Z"}],"readme":"#Glob-proxy.js\r\n\r\n在工作中，经常遇见一个问题，服务端的开发总是比前端开发要慢很多，于是我们需要在本地模拟数据，但是现实往往让我们出人意料，我的数据模拟可能在另一个环境中，而我的开发环境，需要请求数据时，就发生了跨域的问题。而且，来来回回在改地址，我会非常的纠结，于是写下了这个，基于nodejs的web代理，来对请求进行处理。下午抽了些时间，对代码进行了整理，现在仅支持对GET POST的代理。\r\n\r\n## Download\r\n源代码可以在[Github](https://github.com/lcepy/glob-proxy)上进行下载，也可以使用npm包管理器进行安装\r\n\r\n\tnpm install glob-proxy\r\n\r\n##了解Glob-proxy有什么用，能解决什么问题\r\n\r\n默认第一次启动服务器时，会读取一个cache.json配置文件，并根据具体的请求映射查找配置文件中是否存在已久缓存过的物理文件路径。如果存在，将瞬间响应这个请求。第二次，若无发生参数，URL地址的变化，将响应内存中缓存的元数据。若无此文件，将正常发起一次远程请求。\r\n\r\n默认情况下请求是开启远程代理的，这意味着一个真实的请求将根据请求映射提交到远程。内部只会维护对远程请求的缓存，包括内存缓存，物理缓存，并对URL地址与提交的参数，进行生成shakey来进行维护。当URL地址，请求参数发生变化时，工具会将请求提交到远程，并将对内存进行更新，生成一个时间戳的物理文件。\r\n\r\n内存释放机制，内部会维护一个打分列表，记录请求使用的次数。两小时启动一次内存释放定时器，当满足，缓存条数超过20时，会基于打分的分数进行排序，并把分数较低的一半，释放。\r\n\r\n对远程响应错误时的处理，这在测试环境中是经常出现的。第一次真实请求发生时，会在内部维护几个地方，已保证在测试环境响应错误时，或者接口直接爆掉的情况下，能不影响前端的开发进度。如果cache.json配置文件存在，则第一次启动服务器时，优先读取最后一次缓存的物理文件。如果第一次真实请求发送成功，在第二次发送请求时出现了错误状态，则优先从内存中读取相应的数据，如果内存中不存在，则读取最后一次存储的物理文件，如果文件也不存在，则返回错误状态。在这中间，内部都会维护相应的调度，URL地址，提交参数是否有变化，如果有变化将重新请求远程。\r\n\r\n\r\n## Use\r\n新建index.js文件    \r\n\r\n    touch index.js   \r\n\r\n(windows 用户参考如下)\t\r\n    \r\n    var glob = require('./src/glob-proxy');\r\n\r\n\tglob.use('PORT','8084');\r\n\tglob.use('TYPE','HTTP');\r\n\tglob.use('ROOT','E:\\\\localenv');\r\n\tglob.use('REQUEST',{\r\n\t\t\"GET\":{\r\n\t\t\t\"/github\":\"/mock.json\",\r\n\t\t\t\"/under\":\"http://underscorejs.org/\"\r\n\t\t},\r\n\t\t\"POST\":{\r\n\t\t\t\"/django\":\"http://xxxxxx\"\r\n\t\t}\r\n\t})\r\n\tglob.initialize();\r\n\r\n(Mac OSX 用户参考如下)\r\n\r\n\tvar glob = require('./src/glob-proxy');\r\n\r\n\r\n\tglob.use('PORT','8084');\r\n\tglob.use('TYPE','HTTP');\r\n\tglob.use('ROOT','/User/xxx');\r\n\tglob.use('REQUEST',{\r\n\t\t\"GET\":{\r\n\t\t\t\"/github\":\"/mock.json\",\r\n\t\t\t\"/under\":\"http://underscorejs.org/\"\r\n\t\t},\r\n\t\t\"POST\":{\r\n\t\t\t\"/django\":\"http://xxxxxx\"\r\n\t\t}\r\n\t})\r\n\tglob.initialize();\r\n\r\n运行node index.js, 在浏览器中访问 <http://127.0.0.1/github?local=1&mock=1&enforce=1>\r\n\r\nglob.use()  添加参数\r\n\r\nglob.initialize()  启动\r\n\r\n## Client\r\n\r\n客户端必要的条件\r\n\t\r\n1. 是一款现代的浏览器，支持H5请求跨域头。\r\n\r\n'Access-Control-Allow-Headers':'Content-Type, Accept',\r\n\r\n'Access-Control-Allow-Methods':'GET, POST, PUT, DELETE',\r\n\r\n'Access-Control-Allow-Origin':'*',\r\n\r\n在发起ajax请求时，需要配置上述三项，相应的请求跨域头。如果不是使用客户端，代理不受影响。\r\n\r\n## Start Config\r\n\r\n>\r\n>PORT start server port 启动服务器端口号\r\n>\r\n>TYPE 处理请求时，按什么类型来处理\t\r\n>\r\n>ROOT 配置读取本地文件的跟目录\r\n>\r\n>REQUEST 配置请求映射\r\n>\r\n>GET POST 请求\r\n>\r\n>URL 上local，mock，enforce参数是有意义的\r\n>\r\n>local 传入任意参数描述开启读取本地文件\r\n>\r\n>mock 传入任意参数描述开启使用mock构建元数据\r\n>\r\n>enforce 传入任意参数描述开启强制刷新请求，每一次的请求都会提交远程并内存缓存与物理缓存\r\n>\r\n\r\n\r\n未来改进：\r\n\r\n\t\r\n1. 支持restful风格的其他method，如PUT DELETE\r\n2. 支持从后台提交SOAP\r\n3. 指定静态资源\r\n\r\n\r\n\r\n\r\n\r\n\r\n","created":"2014-05-06T07:53:26.270Z","modified":"2014-05-19T03:28:28.421Z","lastPublisher":{"name":"wen","email":"xiangwenwe@foxmail.com"},"owners":[{"name":"wen","email":"xiangwenwe@foxmail.com"}],"other":{"_attachments":{},"_from":"./","_id":"glob-proxy","_npmUser":{"name":"wen","email":"xiangwenwe@foxmail.com"},"_npmVersion":"1.4.7","_rev":"1-d96293c88211b5b68a5b65e9f0bd620e","_shasum":"168b2065ab4373da1eec078f63213afd2259a609","author":{"name":"wen"},"bugs":{"url":"https://github.com/lcepy/glob-proxy/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"0.0.7"},"dist":{"shasum":"168b2065ab4373da1eec078f63213afd2259a609","tarball":"http://registry.npmjs.org/glob-proxy/-/glob-proxy-0.0.7.tgz"},"maintainers":[{"name":"wen","email":"xiangwenwe@foxmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-05-19T03:28:28.421Z","created":"2014-05-06T07:53:26.270Z","0.0.1":"2014-05-06T07:53:26.270Z","0.0.2":"2014-05-06T07:59:03.884Z","0.0.3":"2014-05-06T11:19:40.627Z","0.0.4":"2014-05-07T09:05:09.083Z","0.0.5":"2014-05-08T06:58:07.292Z","0.0.6":"2014-05-13T07:22:31.428Z","0.0.7":"2014-05-19T03:28:28.421Z"}}}