{"name":"parsind","version":"0.1.3","description":"A HTTP resource manager and controller-autoloader!","main":"index.js","scripts":{"test":"./node_modules/mocha/bin/mocha ./test"},"license":"MIT","keywords":["express","controller","resource","router","autoloader","HTTP","REST","RESTful"],"repository":"https://github.com/ramhejazi/parsind","dependencies":{"camel-case":"^3.0.0","pascal-case":"^2.0.0","pluralize":"^3.0.0","snake-case":"^2.1.0"},"devDependencies":{"express":"^4.14.0","mocha":"^3.1.0","supertest":"^2.0.0"},"gitHead":"cdf12776bfdbb6b0290e68b15b7e988bda26f3df","homepage":"https://github.com/ramhejazi/parsind#readme","versions":[{"number":"0.1.0","date":"2016-10-14T17:19:09.158Z"},{"number":"0.1.1","date":"2016-10-15T09:52:58.021Z"},{"number":"0.1.2","date":"2016-10-17T12:35:12.648Z"},{"number":"0.1.3","date":"2016-10-24T16:05:03.196Z"}],"readme":"# parsind\n> HTTP resource route generator and controller autoloader.\n\nConfigurable _parsind_ (\\ˈpärˈsīnd\\\\) allows you to use simple\nJavaScript data structures for setting RESTful HTTP route handlers.\nIt works with any sensible HTTP router (e.g. [express framework](http://expressjs.com/)'s router).\n\n## Table of Contents:\n- [Installation](#installation)\n- [Why?](#why)\n- [Example](#example)\n- [How does it work?](#how-does-it-work)\n  - [Parsing Rules](#1-parsing-rules)\n  - [Autoloading Controllers](#2-autoloading-controllers)\n  - [Binding Route Handlers](#3-binding-route-handlers)\n- [Documentation](#documentation)\n- [How-tos](#how-tos)\n- [Terminology](#terminology)\n\n## Installation\n```\n$ npm install parsind\n```\n\n## Why?\nSetting HTTP route handlers and loading controllers in complex web applications with many resources can be very tiring, error-prone and repetitive process. _parsind_ tries to facilitate this process.  \n\n\n## Example:\n```\napplication_directory\n├── app.js\n└── controllers\n    ├── indexController.js\n    ├── authors\n    │   ├── booksController.js\n    ├── authorsController.js\n    ├── books\n    │   ├── authorsController.js\n    │   └── tagsController.js\n    ├── booksController.js\n    ├── tags\n    |   ├── booksController.js\n    ├── tagsController.js\n```\n\n```javascript\n// app.js\nconst express = require('express')\nconst path = require('path')\nconst parsind = require('parsind')\n\nconst app = express()\n\nconst routeParser = parsind({\n  controllersDir: path.join(__dirname, 'controllers'),\n  router: express.Router(),\n  routes: {\n    '/': 'indexController#welcome',\n    'POST /foo': 'indexController#postFoo',\n    'authors': ['books'],\n    'books': ['authors', 'tags'],\n    'tags': ['books']\n  }\n});\n\napp.use('/api', routeParser.getRouter())\napp.listen(3000)\n\n```\n## How does it work?\n_parsind_ accepts simple JavaScript data structures (e.g. a parsed JSON string) as\na list of HTTP resources. And it then:\n\n1. Parses the data for generating a list of HTTP routes for each resource.\n2. Autoloads a controller file for each resource.\n3. Uses methods of controllers for setting HTTP route handlers on the passed router.\n\n### 1. Parsing Rules\nThe `routes` option can be any structure that consists of (nested) object literals and arrays.\nThe structure is iterated _recursively_.\n\n#### Object literals\n##### Resources\nEach object key that has either an object or an array value is considered a _resource_:\n```\n{\n  'resource_name1': [],\n  'resource_name2': {},\n}\n```\nThe key, as a resource name, is used for generating several routes.\nAs an example, for a property that has `bars` key, by default the following routes are generated:\n\n| HTTP verb  | URL            |\n| ---------- |--------------- |\n| GET        | /bars          |\n| POST       | /bars          |\n| GET        | /bars/:bar_id  |\n| PUT        | /bars/:bar_id  |\n| PATCH      | /bars/:bar_id  |\n| DELETE     | /bars/:bar_id  |\n\nThe generated routes are concatenated with the parent resource's _item route_ URL.\nAs an example, when the parent resource's item route is `/foos/:foo_id`, then the final routes will be:\n\n| HTTP verb  | URL                         |\n| ---------- |---------------------------- |\n| GET        | /foos/:foo_id/bars          |\n| POST       | /foos/:foo_id/bars          |\n| GET        | /foos/:foo_id/bars/:bar_id  |\n| PUT        | /foos/:foo_id/bars/:bar_id  |\n| PATCH      | /foos/:foo_id/bars/:bar_id  |\n| DELETE     | /foos/:foo_id/bars/:bar_id  |\n\n##### Routes\n\nEach object key that has a `string` value is considered a route.\nThis syntax allows you to define _special routes_.  \n\nThe key is the _route_'s URL and it's value is the _route handler_.\nThe key can contain a HTTP verb (in uppercase or in lowercase) .e.g. `GET /foo` or `post /bar`.\nWhen there is no HTTP verb, the route is set as a `GET` request, e.g. `/foo`.\n\nThe value of the property refers to a method name (e.g. `getHandler`) of a controller object that should be set as the route handler.\n\nThe value can also contain a name of the controller. `#` character should be used for separating controller name and it's property name, e.g. `indexController#getHandler`.\n\n#### Arrays\nArray properties can have several elements. Each array can have many `string` or `object`\nelements. A `string` element is considered a _resource_\nand an `object` element is parsed according to \"Object literals\" rules.\n\nThe key of a property that has the array as it's value is the parent resource of array's elements.\n\n### 2. Autoloading Controllers\n#### Resources\nFor each resource a controller is loaded (required) on the fly.\n\nBy default, the resource controller's name is the combination of camelCased resource name and `'Controller.js'` string.\nFor example, for a resource that has `foo_bars` name, the module expects to find a file that has `fooBarsController.js` filename. The file's path is generated relatively to the parent resource's directory.\nParent resource's directory name of a resource is simply the name of the parent resource.\nConsider this example:\n\n```javascript\n// ...\nconst routeParser = parsind({\n  controllersPath: '/controllers',\n  // other options...\n  routes: {\n    'books': ['authors', 'tags']\n  }\n});\n```\nThe filename of `books` resource's controller should be `booksController.js`.\nThe file should exist in the `/controllers` directory, so the file's path is: `/controller/booksController.js`.\nThe `books` has 2 child resources: `authors` and `tags`. The controller name of these resources should be\n`authorsController.js` and `tagsController.js`.\nThese 2 files must exist in their parent resource directory, i.e. the `books` directory,\nso for these resources, parsind expect you to have this directory structure:\n\n```\n/controllers\n├── books\n│   ├── authorsController.js\n│   └── tagsController.js\n└── booksController.js\n```\n#### Special routes\nAs it was states previously, you can set special routes for each resource and\nthe value of a route key:value pair which is used for defining a route can contain\neither a method name or a combination of a controller name and it's method as the route handler.\n\nConsider this example:\n```javascript\n{\n  'foos': {\n    '/bar': 'getFoo',\n    'POST /baz': 'controllerName#bazHandler'\n  }\n}\n```\nThe `foos` resource has 2 child routes. In this case the `getFoo` method should be method\nof the `foos` resource's controller, i.e. `foosController#getFoo`.   \nThe `controllerName` which is specified as the controller for `POST /baz` route\nshould exist in the `foos` resource directory, so parsind expect you to have this directory structure:\n\n```\n/controllers\n├── foos\n│   └── controllerName.js\n└── foosController.js\n```\n### 3. Binding Route Handlers\nAfter parsing routes and loading controller file, the generated routes are set on the router.\n\n#### Resources\nBy default, 6 routes for each resource is generated (configurable). The HTTP verbs of these routes are mapped to the resource controller's methods/properties.\n\n| HTTP verb  | URL                     | Method        |\n| ---------- | ----------------------- | --------------|\n| GET        | /resource               | index         |\n| POST       | /resource               | store         |\n| GET        | /resource/:resource_id  | show          |\n| PUT        | /resource/:resource_id  | update        |\n| PATCH      | /resource/:resource_id  | patch         |\n| DELETE     | /resource/:resource_id  | destroy       |\n\nEach route is set on the router only when the resource controllers have the corresponding method.\nFor example, if the resource controller has only 2 methods named `index` and `show` then only the following routes are set:\n\n```javascript\nrouter.get('/resource', controller.index);   \nrouter.get('/resource/:resource_id', controller.show);\n```\nAny other method/property of the controller that doesn't have `index`, `store`, `show`, `update`, `patch` or `destroy` key is ignored. The value of these properties can be any value that router supports.\nFor example, Express framework's router allows you pass a function or an array of functions\nas the route middlewares/handlers. So the controller files can have these properties:\n\n```js\n// anExampleController.js\n\n// ...\nmodule.exports = {\n  index(req, res, next) {\n      res.send('...');\n  },\n  // ...\n  update: [validationMiddleware, function(req, res, next) {\n      res.send('...');\n  }]\n}\n```\n#### Special routes\nSpecial routes are set similar to resource routes, but the specified methods _must_ exist.\n\n## Documentation\n### Syntax\n`parsind(settings)`\n\n### Prameters\n**settings** <br>\ntype: _object_ <br>\nA set of key/value pairs.\n  - **baseRoute** (default: `\"/\"`) <br/>\n    type: _string_ <br/>\n    A base route that is prepended to all generated routes.\n  - **controllersDir** <br/>\n  type: _string_ <br>\n  The _absolute_ path of controllers directory. <br>\n  Example: `__dirname + \"/controllers\"`.\n  - **controllersCase** (default: `\"camel\"`) <br>\n  type: _string_ <br>\n  The case of controllers' name.\n  Value can be `\"camel\"` for _camelCase_, `\"pascal\"` for _PascalCase_ or `\"snake\"` for _snake&#95;case_.\n  - **controllersSuffix** (default: `\"controllers\"`) <br>\n  This option is used for generating controller name for a resource. It can be any strings, including an empty string.\n  - **controllerMethods** (default: `\"{\"entrance\":{\"get\":\"index\",\"post\":\"store\"},\"item\":{\"get\":\"show\",\"put\":\"update\",\"patch\":\"patch\",\"delete\":\"destroy\"}}\"`) <br>\n  type: _object_ <br>\n  This option accepts an object with 2 object properties: `entrance` and `item`.  \n  These properties are used for setting route handlers for a resource by using properties of the resource's controller.\n  `entrance` keys are used for setting routes for _resource's entrance_ URL and `item` keys are used for setting routes for resource's _item route_ URL.\n  - **router** <br>\n  type: _object_ <br>\n  A router object which is used for setting routes. If you are using Express framework you can pass the return value of\n  `require(\"express\")` or `require(\"express').Router\"` function.\n  - **routes** <br>\n  type: _object_ or _array_ <br>\n  A list of resources. Read the \"How does it work?\" section.\n\n### Return value\n`parsind` is a factory function. The returned value is an instance of an ES2015 class. Each instance has the following APIs:\n\n- #### `.addRoutes(routes)`\n  Add new routes to the router.\n  ###### Parameters\n  - **routes** <br>\n    type: _object_ or _array_ <br>\n    Check the **routes** setting.\n\n- #### `.getRouter()`\n  Get the _router_ option.\n\n- #### `.getBoundRoutes(prettify)`\n  Get the list of [successfully] bound routes.\n  ###### Parameters\n  - **prettify** (default: `false`) <br>\n    type: _boolean_ <br>\n    Make the output more readable.\n\n  ###### Return value\n  Returns an array of bound routes. Each route is an object that has the following properties:\n  - **verb**: HTTP verb of route.  \n  - **route**: Route's path.\n  - **controller**: Controller object.\n  - **method**: Name of the controller's property which has been used for setting the router handler.\n\n- #### `.getMissingHandlers(prettify)`\n  Get the list of missing route handlers.\n  ###### Parameters\n  - **prettify** (default: `false`) <br>\n    type: _boolean_ <br>\n    Make the output more readable.\n\n  ###### Return value\n  Returns an array of missing handlers. Each route is an object that has the following properties:\n  - **verb**: HTTP verb of route.  \n  - **route**: Route's path.\n  - **controller**: Controller object.\n  - **method**: Name of the controller's missing property.\n\n## How-tos\n### How to use express middlewares\nExpress middlewares can be set normally [by using express APIs](http://expressjs.com/en/guide/using-middleware.html):\n```js\nconst express = require('express')\nconst parsind = require('parsind')\n\nconst app = express()\nconst router = express.Router()\n\n// A general router-level middleware\nrouter.use(function(req, res, next) {\n  console.log('an express middleware!')\n  next()\n});\n\nconst routeParser = parsind({\n  // ...\n  router,\n  routes: {\n    ...\n  }\n});\n\napp.use('/', routeParser.getRouter())\napp.listen(3000)\n```\nIn case that you want to add a middleware for specific resources, you can code:\n\n```js\nconst express = require('express')\nconst parsind = require('parsind')\n\nconst app = express()\nconst router = express.Router()\n\n// A general router-level middleware\n// the middleware is called for both /tags... and /books... resources\nrouter.use(function(req, res, next) {\n  console.log('an express middleware!')\n  next()\n});\n\nconst routeParser = parsind({\n  // ...\n  router,\n  routes: ['tags']\n});\n\n// this middleware is called only for /books... resource\nrouter.use(function(req, res, next) {\n  console.log('an express middleware!')\n  next()\n});\n\nrouteParser.addRoutes(['books']);\n\napp.use('/', routeParser.getRouter())\napp.listen(3000)\n```\n### How to extract routes' named parameters\n_parsind_ uses _singular form of a resource name_ + _`_id` string_ for generating resources' _item route_. For getting these named parameters without the `_id` string you can use the following snippet (a middleware):\n\n```js\n/\n/**\n * Get the route's named parameters without the `_id` segments\n * @return {array}\n */\nfunction getNamedParametersMiddlware(req, res, next) {\n    let re = /\\/:(.*?)_id/g;\n    req.resourceNames = [];\n    let _res;\n    while ((_res = re.exec(req.route.path)) !== null) {\n        req.resourceNames.push(_res[1]);\n    }\n    next();\n}    \n```\n## Terminology\n- **Resource**:\nA `string` which is used for generating several _routes_.\n- **Resource's entrance**:\nA resource entrance URL. For example `bars` resource has `/bars` resource entrance URL.\n- **Route**:\nA HTTP verb + URL.\n- **Item route**:\nA URL that has an ID placeholder for an individual items of a resource. For example,\n`bars` resource has `/bars/:bar_id` item route which is used for setting routes for reading, updating and deleting individual resource's items.\n- **Special route**:\nA route that is not set for each _resource_ by default.\n- **Controller**\nA controller is simply an object, exported in a JavaScript file that _should_ or _can_ have some methods.\nThe module expects you to have a controller file for each resource, even if it doesn't have any manually exported object.\n\n## License\nMIT © [Ramin Hejazi](https://htmlpack.com)\n","created":"2016-10-14T17:19:09.158Z","modified":"2016-10-24T16:05:03.196Z","lastPublisher":{"name":"ramhejazi","email":"ram.hejazi@mail.com"},"owners":[{"name":"ramhejazi","email":"ram.hejazi@mail.com"}],"other":{"_attachments":{},"_from":".","_id":"parsind","_nodeVersion":"6.3.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/parsind-0.1.3.tgz_1477325101579_0.8114288069773465"},"_npmUser":{"name":"ramhejazi","email":"ram.hejazi@mail.com"},"_npmVersion":"3.10.3","_rev":"2-9d38109188bdf55a23140d4dd3cc55bc","_shasum":"d0f8aafd9a1547b5d4aeaf35bbef82ed579e79b9","author":{"name":"Ramin Hejazi","email":"ram.hejazi@mail.com","url":"https://htmlpack.com"},"bugs":{"url":"https://github.com/ramhejazi/parsind/issues"},"directories":{},"dist-tags":{"latest":"0.1.3"},"dist":{"shasum":"d0f8aafd9a1547b5d4aeaf35bbef82ed579e79b9","tarball":"http://registry.npmjs.org/parsind/-/parsind-0.1.3.tgz"},"maintainers":[{"name":"ramhejazi","email":"ram.hejazi@mail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-24T16:05:03.196Z","created":"2016-10-14T17:19:09.158Z","0.1.0":"2016-10-14T17:19:09.158Z","0.1.1":"2016-10-15T09:52:58.021Z","0.1.2":"2016-10-17T12:35:12.648Z","0.1.3":"2016-10-24T16:05:03.196Z"}}}