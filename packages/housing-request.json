{"name":"housing-request","version":"0.0.2","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js"},"repository":"https://github.com/loconsolutions/housing-request","keywords":["xhr","http","ajax","promise","node"],"license":"BSD","homepage":"https://github.com/loconsolutions/housing-request","devDependencies":{"coveralls":"^2.11.3","es6-promise":"^3.0.2","grunt":"^0.4.5","grunt-banner":"^0.5.0","grunt-contrib-clean":"^0.6.0","grunt-contrib-nodeunit":"^0.4.1","grunt-contrib-watch":"^0.6.1","grunt-eslint":"^17.1.0","grunt-karma":"^0.12.0","grunt-ts":"^5.0.0-beta.5","grunt-update-json":"^0.2.1","grunt-webpack":"^1.0.11","jasmine-core":"^2.3.4","karma":"^0.13.8","karma-coverage":"^0.5.0","karma-jasmine":"^0.3.6","karma-jasmine-ajax":"^0.1.12","karma-phantomjs-launcher":"^0.2.1","karma-sourcemap-loader":"^0.3.5","karma-webpack":"^1.7.0","load-grunt-tasks":"^3.2.0","minimist":"^1.1.3","webpack":"^1.11.0","webpack-dev-server":"^1.10.1"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"typescript":{"definition":"./axios.d.ts"},"versions":[{"number":"0.0.1","date":"2015-09-23T07:12:51.804Z"},{"number":"0.0.2","date":"2015-09-23T09:44:27.955Z"}],"readme":"# axios\n\n[![npm version](https://img.shields.io/npm/v/axios.svg?style=flat-square)](https://www.npmjs.org/package/axios)\n[![build status](https://img.shields.io/travis/mzabriskie/axios.svg?style=flat-square)](https://travis-ci.org/mzabriskie/axios)\n[![code coverage](https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square)](https://coveralls.io/r/mzabriskie/axios)\n[![npm downloads](https://img.shields.io/npm/dm/axios.svg?style=flat-square)](https://www.npmjs.org/package/axios)\n[![dependency status](https://img.shields.io/david/mzabriskie/axios.svg?style=flat-square)](https://david-dm.org/mzabriskie/axios)\n\nPromise based HTTP client for the browser and node.js\n\n## Features\n\n- Make [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) from the browser\n- Make [http](http://nodejs.org/api/http.html) requests from node.js\n- Supports the [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\n- Intercept request and response\n- Transform request and response data\n- Automatic transforms for JSON data\n- Client side support for protecting against [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\n## Installing\n\nUsing bower:\n\n```bash\n$ bower install axios\n```\n\nUsing npm:\n\n```bash\n$ npm install axios\n```\n\n## Compatibility\n\nTested to work with >=IE8, Chrome, Firefox, Safari, and Opera.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](http://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise)\n\n## Example\n\nPerforming a `GET` request\n\n```js\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (response) {\n    console.log(response);\n  });\n\t\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (response) {\n    console.log(response);\n  });\n```\n\nPerforming a `POST` request\n\n```js\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (response) {\n    console.log(response);\n  });\n```\n\nPerforming multiple concurrent requests\n\n```js\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\naxios.all([getUserAccount(), getUserPermissions()])\n  .then(axios.spread(function (acct, perms) {\n    // Both requests are now complete\n  }));\n```\n\n## axios API\n\nRequests can be made by passing the relevant config to `axios`.\n\n##### axios(config)\n\n```js\naxios({\n  method: 'get',\n  url: '/user/12345'\n});\n```\n\n### Request method aliases\n\nFor convenience aliases have been provided for all supported request methods.\n\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency\n\nHelper functions for dealing with concurrent requests.\n\n##### axios.all(iterable)\n##### axios.spread(callback)\n\n## Request API\n\nThis is the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // The last function in the array must return a string or an ArrayBuffer\n  transformRequest: [function (data) {\n    // Do whatever you want to transform the data\n\t\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\t\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `param` are the URL parameters to be sent with the request\n  params: {\n    ID: 12345\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // When no `transformRequest` is set, must be a string, an ArrayBuffer or a hash\n  data: {\n    firstName: 'Fred'\n  },\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000,\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are 'arraybuffer', 'blob', 'document', 'json', 'text'\n  responseType: 'json', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN' // default\n}\n```\n\n## Response API\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n  \n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the headers that the server responded with\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {}\n}\n```\n\nWhen using `then` or `catch`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function(response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n});\n```\n\n## Interceptors\n\nYou can intercept requests or responses before they are handled by `then` or `catch`.\n\n```js\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\nIf you may need to remove an interceptor later you can.\n\n```js\nvar myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\n## Handling Errors\n\n```js\naxios.get('/user/12345')\n  .catch(function (response) {\n    if (response instanceof Error) {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', response.message);\n    } else {\n      // The request was made, but the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(response.data);\n      console.log(response.status);\n      console.log(response.headers);\n      console.log(response.config);\n    }\n  });\n```\n\n## TypeScript Definition\naxios includes a [TypeScript](http://typescriptlang.org) definition.\n```typescript\n/// <reference path=\"axios.d.ts\" />\nimport axios = require('axios');\naxios.get('/user?ID=12345');\n```\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [Angular](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of Angular.\n\n## License\n\nMIT\n","created":"2015-09-23T07:12:51.804Z","modified":"2015-09-23T09:44:27.955Z","lastPublisher":{"name":"vineet","email":"vineet.hawal@housing.com"},"owners":[{"name":"vineet","email":"vineet.hawal@housing.com"}],"other":{"_attachments":{},"_from":".","_id":"housing-request","_npmUser":{"name":"vineet","email":"vineet.hawal@housing.com"},"_npmVersion":"1.3.6","_rev":"1-fd154b1e44bbc2cf5cf2d74f528d0a2e","author":{"name":"Vineet Hawal"},"bugs":{"url":"https://github.com/loconsolutions/housing-request/issues"},"directories":{"example":"examples","test":"test"},"dist-tags":{"latest":"0.0.2"},"dist":{"shasum":"100506773c9b3f64b9e208b52769fd4377b149c6","tarball":"http://registry.npmjs.org/housing-request/-/housing-request-0.0.2.tgz"},"maintainers":[{"name":"vineet","email":"vineet.hawal@housing.com"}],"readmeFilename":"README.md","time":{"modified":"2015-09-23T09:44:27.955Z","created":"2015-09-23T07:12:51.804Z","0.0.1":"2015-09-23T07:12:51.804Z","0.0.2":"2015-09-23T09:44:27.955Z"}}}