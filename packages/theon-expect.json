{"name":"theon-expect","version":"0.1.2","description":"HTTP expectation and testing library for theon based API clients","main":"index.js","license":"MIT","repository":"https://github.com/theonjs/expect","scripts":{"test":"standard && mocha 'test/**/*.js'"},"devDependencies":{"mocha":"~2.2.5","nock":"^7.0.2","should":"~7.0.2","standard":"^5.4.1","theon":"^0.1.27"},"engines":{"node":">= 0.12.0"},"keywords":["theon","request","tdd","bdd","http","test","testing"],"standard":{"globals":["describe","it"]},"gitHead":"0360d54c7697cc6968cfc6069a79de8b5641ac11","homepage":"https://github.com/theonjs/expect#readme","versions":[{"number":"0.1.0","date":"2016-02-03T10:40:12.283Z"},{"number":"0.1.1","date":"2016-02-09T11:40:44.154Z"},{"number":"0.1.2","date":"2016-02-19T10:55:54.187Z"}],"readme":"# theon-expect [![Build Status](https://travis-ci.org/theonjs/expect.svg?branch=master)](https://travis-ci.org/theonjs/expect) [![npm version](https://badge.fury.io/js/theon-expect.svg)](https://www.npmjs.com/package/theon-expect) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com)\n\nHTTP assertions made easy for [theon](http://github.com/h2non/theon) based API clients. Inspired by [supertest](https://github.com/visionmedia/supertest).\n\n## Motivation\n\nThe motivation with this module is to provide a high-level abstraction for testing\nHTTP layers, while still allowing you to drop down to the lower-level API provided by `theon`.\n\n## Features\n\n- Easy to use from any theon based API client\n- Dead simple declarative API\n- HTTP status code expectation\n- HTTP headers expections\n- RegExp based matching for body and headers\n- Response bodies comparison supporting deep assertions\n- Custom function expectations\n\n## Installation\n\n```bash\nnpm install theon-expect --save-dev\n```\n\nOnce installed it can now be referenced by simply calling: ```require('theon-expect')(require('theon'))```\n\n## Example\n\n```js\nconst expect = require('theon-expect')\nconst theon = expect(require('theon'))\n\n// Declare your API\nconst api = theon('http://api.server.com')\n  .collection('/users')\n  .set('Version', '1.0')\n  .resource('getById')\n  .path('/:id')\n  .render()\n\n// Consume your API\napi.users\n  .getById()\n  .param('id', '1234')\n  .expect(200)\n  .expect('Content-Type', /json/i)\n  .expect({ id: 1234, username: 'foo' })\n  .expect(res => {\n    if (res.status > 300) {\n      throw new Error('invalid status code')\n    }\n  })\n  .end((err, res) => {\n    if (err) {\n      return console.error('Expect error:', err)\n    }\n  })\n```\n\n## API\n\nYou may use any [theon](http://github.com/h2non/theon) methods.\n\n### .expect(status[, fn])\n\nAssert response `status` code.\n\n### .expect(status, body[, fn])\n\nAssert response `status` code and `body`.\n\n### .expect(body[, fn])\n\nAssert response `body` text with a string, regular expression, or\nparsed body object.\n\n### .expect(field, value[, fn])\n\nAssert header `field` `value` with a string or regular expression.\n\n### .expect(function(res) {})\n\nPass a custom assertion function. It'll be given the response object to check. If the response is ok, it should return falsy, most commonly by not returning anything. If the check fails, throw an error or return a truthy value like a string that'll be turned into an error.\n\nHere the string or error throwing options are both demonstrated:\n\n```js\nmyApi.users\n  .getById('/')\n  .expect(hasPreviousAndNextKeys)\n  .end(done)\n\nfunction hasPreviousAndNextKeys (res) {\n  if (!('next' in res.body)) return \"missing next key\"\n  if (!('prev' in res.body)) throw new Error(\"missing prev key\")\n}\n```\n\n### .end(fn)\n\nPerform the request and invoke `fn(err, res)`.\n\n## License\n\nMIT\n","created":"2016-02-03T10:40:12.283Z","modified":"2016-02-19T10:55:54.187Z","lastPublisher":{"name":"h2non","email":"tomas@aparicio.me"},"owners":[{"name":"h2non","email":"tomas@aparicio.me"}],"other":{"_attachments":{},"_from":".","_id":"theon-expect","_nodeVersion":"5.6.0","_npmOperationalInternal":{"host":"packages-5-east.internal.npmjs.com","tmp":"tmp/theon-expect-0.1.2.tgz_1455879351611_0.9212832336779684"},"_npmUser":{"name":"h2non","email":"tomas@aparicio.me"},"_npmVersion":"3.6.0","_rev":"1-b9964ac1066c4d9ccf8c3ae84c823db4","_shasum":"23533ca8cc8c321650c922e7a90c3240761202c6","author":{"name":"Tomas Aparicio"},"bugs":{"url":"https://github.com/theonjs/expect/issues"},"directories":{},"dist-tags":{"latest":"0.1.2"},"dist":{"shasum":"23533ca8cc8c321650c922e7a90c3240761202c6","tarball":"http://registry.npmjs.org/theon-expect/-/theon-expect-0.1.2.tgz"},"maintainers":[{"name":"h2non","email":"tomas@aparicio.me"}],"readmeFilename":"README.md","time":{"modified":"2016-02-19T10:55:54.187Z","created":"2016-02-03T10:40:12.283Z","0.1.0":"2016-02-03T10:40:12.283Z","0.1.1":"2016-02-09T11:40:44.154Z","0.1.2":"2016-02-19T10:55:54.187Z"}}}