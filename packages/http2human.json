{"name":"http2human","version":"1.0.1","description":"http2human tries to translate http errors for human use. It wraps `fetch` promises and returns standardized errors.","main":"index.js","scripts":{"test":"mocha"},"repository":"https://github.com/superseriouscompany/http2human","keywords":["http","fetch","errors","client","wrapper"],"license":"MIT","homepage":"https://github.com/superseriouscompany/http2human#readme","devDependencies":{"expect":"^1.20.2","express":"^4.14.0","mocha":"^3.1.2","request":"^2.76.0"},"dependencies":{"node-fetch":"^1.6.3"},"gitHead":"7cfef5f5d9c3b7e3ffe21bd03af6862e97865c3a","versions":[{"number":"1.0.0","date":"2016-10-31T17:49:43.650Z"},{"number":"1.0.1","date":"2016-10-31T21:50:57.242Z"}],"readme":"# http2human\n\nhttp2human tries to translate http errors for human use. It wraps `fetch` promises and returns standardized errors.\n\nWhen a request to your server from a device actually succeeds, it's nothing short of a small miracle.\nWhen it doesn't, a generic error message is dehumanizing to the person attempting to use your service.\n\nMinimal example:\n\n```javascript\nhttp2human('https://google.com').then(function(body) {\n  // do something with your successful response.\n  // `body` will be an object if it's JSON parsable,\n  // otherwise it'll be a string\n}).catch(function(err) {\n  alert(err.suggestion);\n})\n```\n\nMaximal example:\n\n```javascript\nhttp2human('https://mycoolserver.com/login', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: { username: 'neil', password: 'nope' }\n}).then(function(bodyObjectOrString) {\n  // do something with your successful response\n}).catch(function(err) {\n  switch(err.name) {\n   case 'NetworkError':\n     console.error(err, err.stack);\n     return alert(\"You might not be connected to the internet. Please check your connection and try again.\");\n   case 'ServerError':\n     console.error(err, err.stack);\n     if( err.suggestion ) { return alert(suggestion); }\n     if( err.statusCode == 504 ) { return alert(\"Sorry, our server is backed up. Please try again later.\"); }\n     if( err.responseBody ) { console.error(err.responseBody); }\n     return alert(\"Sorry, something went wrong on our end. Please try again or email support@mycoolapp.com.\");\n   case 'UserError':\n     if( err.suggestion ) { return alert(suggestion); }\n     if( err.statusCode == 403 ) { return alert(\"Your username or password is incorrect\") }\n     if( err.responseBody && err.responseBody.retriesRemaining ) { return alert(`You have ${err.responseBody.retriesRemaining}`); }\n     return alert(\"Hmm, something's wrong with your last request but we can't tell exactly what it is. Please check your information and try resubmitting or email support@mycoolapp.com\")\n   case 'LowLevelError':\n   default:\n     return alert(\"Whoa, something went wrong that should not have gone wrong. Please let us know what happened at bugs@mycoolapp.com\")\n  }\n})\n```\n\n<span style=\"color: indianred\">http2human will not work with all APIs</span>. it assumes:\n\n1. API responses are in JSON or plaintext\n2. 5xx responses strictly indicate an unexpected server side error.\n3. 4xx responses strictly indicate a user error that should be resolvable by the human on the other side.\n\nIn order to populate `err.suggestion`, the format of an error message suggesting `foo` must be one of the following:\n\n```js\n{\n  \"error\": {\n    \"message\": \"foo\"\n  }\n}\n```\n\n```js\n{\n  \"message\": \"foo\"\n}\n```\n\n```js\n{\n  \"error\": \"foo\"\n}\n```\n\n```text\nfoo\n```\n\n`fetch` is a new standard available in modern browsers and react native. If `fetch` is not available in your environment, http2human will use https://github.com/bitinn/node-fetch\n","created":"2016-10-31T17:49:43.650Z","modified":"2016-10-31T21:50:57.242Z","lastPublisher":{"name":"neilsarkar","email":"neilsarkar66@gmail.com"},"owners":[{"name":"neilsarkar","email":"neilsarkar66@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http2human","_nodeVersion":"4.4.5","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/http2human-1.0.1.tgz_1477950655566_0.24957787268795073"},"_npmUser":{"name":"neilsarkar","email":"neilsarkar66@gmail.com"},"_npmVersion":"3.10.8","_rev":"2-bf94546fa6375cc4d3c055a7910a5047","_shasum":"1b5a9289cef4a6752ac880bd8c1a9a650e08ddcb","author":{"name":"Neil Sarkar and Super Serious Company"},"bugs":{"url":"https://github.com/superseriouscompany/http2human/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"1b5a9289cef4a6752ac880bd8c1a9a650e08ddcb","tarball":"http://registry.npmjs.org/http2human/-/http2human-1.0.1.tgz"},"maintainers":[{"name":"neilsarkar","email":"neilsarkar66@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-31T21:50:57.242Z","created":"2016-10-31T17:49:43.650Z","1.0.0":"2016-10-31T17:49:43.650Z","1.0.1":"2016-10-31T21:50:57.242Z"}}}