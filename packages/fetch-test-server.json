{"name":"fetch-test-server","version":"1.1.0","description":"Test node.js HTTP servers using the fetch API","main":"index.js","scripts":{"lint":"eslint *.js","mocha":"mocha *.test.js","test":"npm run lint && npm run mocha"},"repository":"https://github.com/amacneil/fetch-test-server","license":"MIT","homepage":"https://github.com/amacneil/fetch-test-server#readme","keywords":["express","fetch","http","integration","koa","server","test","testing"],"dependencies":{"debug":"^2.2.0","node-fetch":"^1.5.1"},"devDependencies":{"chai":"3.5.0","eslint":"2.8.0","eslint-config-airbnb-base":"1.0.4","eslint-plugin-import":"1.6.0","mocha":"2.4.5"},"gitHead":"a8390d675ad7bb0fdcb4550fbbe5732f8a53136e","versions":[{"number":"0.1.0","date":"2016-04-26T21:26:51.543Z"},{"number":"0.1.1","date":"2016-04-26T22:13:56.164Z"},{"number":"1.0.0","date":"2016-04-26T22:59:43.208Z"},{"number":"1.1.0","date":"2016-04-27T18:01:29.587Z"}],"readme":"# Node.js Fetch Test Server\n\n[![Build Status](https://img.shields.io/travis/amacneil/fetch-test-server/master.svg)](https://travis-ci.org/amacneil/fetch-test-server)\n[![Version](https://img.shields.io/npm/v/fetch-test-server.svg)](https://www.npmjs.com/package/fetch-test-server)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/amacneil/fetch-test-server/blob/master/LICENSE)\n\nThis package allows you to easily run your Node.js server for integration testing, and interact with it using the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API). It is similar to [SuperTest](https://github.com/visionmedia/supertest), but using the Fetch API means that you can take advantage of promises, and newer ES2017 features like [async/await](https://tc39.github.io/ecmascript-asyncawait/).\n\n## Installation\n\n```sh\nnpm install --save-dev fetch-test-server\n```\n\n## Usage\n\nCreate a new instance of `TestServer`, passing in your HTTP server. You can then call `fetch()` to make requests against it. This example uses [Mocha](https://mochajs.org/) (which natively supports promises), but you can use any test framework you like.\n\n```js\nimport { assert } from 'chai';\nimport app from './myapp';\n\nconst server = new TestServer(app);\n\ndescribe('API Integration Test', () => {\n  it('responds to /foo', () => {\n    return server.fetch('/foo').then((res) => {\n      assert.strictEqual(res.status, 200);\n    });\n  });\n});\n```\n\nUsing async/await (requires [Babel](http://babeljs.io/) or another transpiler):\n\n```js\nimport { assert } from 'chai';\nimport app from './myapp';\n\nconst server = new TestServer(app);\n\ndescribe('API Integration Test', () => {\n  it('responds to /foo', async () => {\n    const res = await server.fetch('/foo');\n    assert.strictEqual(res.status, 200);\n  });\n});\n```\n\nBehind the scenes, it uses [node-fetch](https://github.com/bitinn/node-fetch) to implement the Fetch API. The server listens on a random port, and does not start listening until you first call `fetch()`. Your requests will automatically wait until the server is available.\n\nYou can also use helper methods to call common HTTP verbs:\n\n```js\nserver.head('/users');\nserver.get('/users');\nserver.post('/users');\nserver.put('/users/1');\nserver.patch('/users/1');\nserver.delete('/users/1');\nserver.options('/users/1');\n```\n\nPer the Fetch API, you can customize the request with an optional second parameter:\n\n```js\nserver.post('/users', {\n  headers: { authorization: 'supersecret' },\n  body: 'name=adrian',\n});\n```\n\nFinally, if you pass an object as the `body` parameter, it will automatically be encoded as JSON and sent with a `Content-Type: application/json` header:\n\n```js\nserver.post('/users', {\n  headers: { authorization: 'supersecret' },\n  body: { name: 'adrian' },\n});\n```\n\nThis is equivalent to `body: JSON.stringify({ name: 'adrian' })`\n\nIf you need the URL of your test server, use `server.address`:\n\n```js\nserver.listen().then(() => {\n  // server is listening\n  console.log(server.address);\n});\n```\n\nIf you want to stop the HTTP server, simply call `server.close()`:\n\n```js\nserver.listen().then(() => {\n  // server is listening\n  return server.close();\n}).then(() => {\n  // server is now stopped\n});\n```\n\n## HTTP Framework Support\n\nFetch Test Server works with any Node.js HTTP framework.\n\n**Express**\n\n```js\nimport app from './expressapp';\n\nconst server = new TestServer(app);\n```\n\n**Koa**\n\n```js\nimport app from './koaapp';\n\nconst server = new TestServer(app.callback());\n```\n\n## License\n\n[MIT](/LICENSE)\n","created":"2016-04-26T21:26:51.543Z","modified":"2016-04-27T18:01:29.587Z","lastPublisher":{"name":"amacneil","email":"adrian@adrianmacneil.com"},"owners":[{"name":"amacneil","email":"adrian@adrianmacneil.com"}],"other":{"_attachments":{},"_from":".","_id":"fetch-test-server","_nodeVersion":"5.10.1","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/fetch-test-server-1.1.0.tgz_1461780087525_0.46378010930493474"},"_npmUser":{"name":"amacneil","email":"adrian@adrianmacneil.com"},"_npmVersion":"3.8.3","_rev":"1-119ed87c192e65377714693c72c63a68","_shasum":"91ebed50493995adf3b0af61c44d197570e5ce22","author":{"name":"Adrian Macneil adrian@adrianmacneil.com"},"bugs":{"url":"https://github.com/amacneil/fetch-test-server/issues"},"directories":{},"dist-tags":{"latest":"1.1.0"},"dist":{"shasum":"91ebed50493995adf3b0af61c44d197570e5ce22","tarball":"http://registry.npmjs.org/fetch-test-server/-/fetch-test-server-1.1.0.tgz"},"maintainers":[{"name":"amacneil","email":"adrian@adrianmacneil.com"}],"readmeFilename":"README.md","time":{"modified":"2016-04-27T18:01:29.587Z","created":"2016-04-26T21:26:51.543Z","0.1.0":"2016-04-26T21:26:51.543Z","0.1.1":"2016-04-26T22:13:56.164Z","1.0.0":"2016-04-26T22:59:43.208Z","1.1.0":"2016-04-27T18:01:29.587Z"}}}