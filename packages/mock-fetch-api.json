{"name":"mock-fetch-api","version":"1.0.7","description":"Mock http requests and responses using fetch API (or isomorphic-fetch). Straight forward functions makes it simple to create customizable and legible unit tests.","main":"mock-fetch-api.js","repository":"https://github.com/Larney11/mock-fetch-api","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["mock-fetch-api","fetch","fetchAPI","fetch API","mock fetch API","mock-fetch","fetch-mock","unit testing","unit testing fetch"],"license":"ISC","dependencies":{"es6-promise":"^3.2.1","isomorphic-fetch":"^2.2.1","object-extend":"^0.5.0"},"gitHead":"4dc0de7fc83bbb4e77d8e3f51ef5e1cec188865d","homepage":"https://github.com/Larney11/mock-fetch-api#readme","versions":[{"number":"1.0.0","date":"2016-07-06T13:47:40.266Z"},{"number":"1.0.1","date":"2016-07-07T09:20:16.324Z"},{"number":"1.0.2","date":"2016-07-07T13:10:07.079Z"},{"number":"1.0.3","date":"2016-07-07T13:17:20.331Z"},{"number":"1.0.4","date":"2016-07-07T13:25:30.882Z"},{"number":"1.0.5","date":"2016-07-08T10:56:02.355Z"},{"number":"1.0.6","date":"2016-07-08T11:39:28.999Z"},{"number":"1.0.7","date":"2016-07-08T11:41:26.659Z"}],"readme":"# mock-fetch-api\nMock http requests and responses using fetch API (or [isomorphic-fetch](https://www.npmjs.com/package/isomorphic-fetch)). Straight forward functions makes it simple to create customizable and legible unit tests.\n\n\n## Installation\n    npm install --save-dev mock-fetch-api\n\n## Usage\n    var MockFetch = require('mock-fetch-api');\n\n### Functions\n\n#### when()\nThe when() function sets the required method and URL.  \n```js\nwhen(method, URL)    \nwhen('GET', 'http://mydomain.com')    \n```\n\n#### withExpectedHeader()\nThe withExpectedHeader() function sets the required headers.  \n```js\nwithExpectedHeader(Header-Field-Name, Header-Field-Type)  \nwithExpectedHeader('Content-Type', 'application/json')  \n```\n\n\n#### otherwiseRespondWith()\nThe otherwiseRespondWith() function sets the response if the header specified with the  withExpectedHeader() function does not correspond with the header passed to the fetch() function.  \n```js\notherwiseRespondWith(status, statusText)  \notherwiseRespondWith(401, 'not authorised')  \n```\n\n#### respondWith()\nThe respondWith() function sets the response if all the requirements specified with the when() and withExpectedHeader() functions correspond with what is passed to the fetch() function.  \n```js\nrespondWith(status, data)  \nrespondWith(401, '{\"data\":[{\"text\":\"Hello\"},{\"text\":\"Goodbye\"}]}')  \n```\n\n#### failNextCall()\nThe failNextCall() function forces the fetch to reject.  \n```js\nfailNextCall()\n```\n\n## Examples\n<strong>Check out the '__tests__' directory to view all examples. </strong> https://github.com/Larney11/mock-fetch-api/blob/master/tests/mock-fetch-api-test.js  \n\nThe following examples are unit tests using Jest.  \n\n```js\n\npit(\"can set a condition which is returned by fetch\", () => {\n  var MockFetch  = require('../MockFetch.js');\n\n  MockFetch.when('GET', 'http://mydomain.com').respondWith(200, '\"Hello World\"');\n\n  return fetch('GET', 'http://mydomain.com').then((response) => {\n     return response.json();\n\n  }).then((data) => {\n     expect(data).toBe('Hello World');\n  });\n});\n\n\npit(\"only responds when matched correctly\", () => {\n  var MockFetch  = require('mock-fetch-api');\n\n  MockFetch.when('GET', 'http://mydomain.com').respondWith(200, '\"Hello World\"');\n\n  return fetch('http://mydomain.com', { method: 'PUT'}).then((response) => {\n\n  expect(response.status).toBe(404);\n  expect(response.statusText).toBe('Not Found');\n  });\n});    \n\n\npit(\"also checks for an expected header value\", () => {\n   var MockFetch  = require('../MockFetch.js');\n\n   MockFetch.when('GET', 'http://mydomain.com')\n      .withExpectedHeader('X-AuthToken','1234')\n      .otherwiseRespondWith(401, \"Not Authorized\")\n      .respondWith(200, '\"Hello World\"');\n\n   return fetch('http://mydomain.com', { method: 'GET', headers: new Headers({\n      'X-AuthToken':'1234'\n   })}).then((response) => {\n      expect(response.status).toBe(200);\n   });\n});\n\n\npit(\"fails when expected header is not set\", () => {\n   var MockFetch  = require('../MockFetch.js');\n\n   MockFetch.when('GET', 'http://mydomain.com')\n      .withExpectedHeader({'X-AuthToken':'1234'}).otherwiseRespondWith(401, \"Not Authorized\")\n      .respondWith(200, '\"Hello World\"');\n\n   return fetch('http://mydomain.com', { method: 'GET'}).then((response) => {\n\n      expect(response.status).toBe(401);\n      expect(response.statusText).toBe('Not Authorized');\n   });\n});\n\n\npit(\"can check for multiple expected headers\", () => {\n   var MockFetch  = require('../MockFetch.js');\n\n   MockFetch.when('GET', 'http://mydomain.com')\n      .withExpectedHeader('X-AuthToken','1234').otherwiseRespondWith(401, \"Not Authorized\")\n      .withExpectedHeader('Content-Type', 'application/json').otherwiseRespondWith(404, \"Not Found\")\n      .respondWith(200, '\"Hello World\"');\n\n   return fetch('http://mydomain.com', { method: 'GET', headers: new Headers({\n      'X-AuthToken':'1234',\n      'Content-Type': 'application/json'\n   })}).then((response) => {\n\n      expect(response.status).toBe(200);\n   });\n});\n\n\npit(\"rejects the promise when simulating a failed network connection\", () => {\n   var MockFetch  = require('../MockFetch.js');\n\n   MockFetch.when('GET', 'http://mydomain.com')\n      .respondWith(200, '\"Hello World\"');\n\n   MockFetch.failNextCall();\n   return fetch('http://mydomain.com').then((response) => {\n      expect(false).toBe(true);\n   }, (error) => {\n      expect(true).toBe(true);\n   });\n});\n```\n","created":"2016-07-06T13:47:40.266Z","modified":"2016-07-08T11:41:26.659Z","lastPublisher":{"name":"lar1193","email":"larbar1193@gmail.com"},"owners":[{"name":"lar1193","email":"larbar1193@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"mock-fetch-api","_nodeVersion":"5.7.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/mock-fetch-api-1.0.7.tgz_1467978083978_0.6025608808267862"},"_npmUser":{"name":"lar1193","email":"larbar1193@gmail.com"},"_npmVersion":"3.6.0","_rev":"1-0a7177df1625b62b8092f280c220dcef","_shasum":"460508ac5795a047a66bba179cd73431f5d48d07","author":{"name":"Lar"},"bugs":{"url":"https://github.com/Larney11/mock-fetch-api/issues"},"directories":{},"dist-tags":{"latest":"1.0.7"},"dist":{"shasum":"460508ac5795a047a66bba179cd73431f5d48d07","tarball":"http://registry.npmjs.org/mock-fetch-api/-/mock-fetch-api-1.0.7.tgz"},"maintainers":[{"name":"lar1193","email":"larbar1193@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-07-08T11:41:26.659Z","created":"2016-07-06T13:47:40.266Z","1.0.0":"2016-07-06T13:47:40.266Z","1.0.1":"2016-07-07T09:20:16.324Z","1.0.2":"2016-07-07T13:10:07.079Z","1.0.3":"2016-07-07T13:17:20.331Z","1.0.4":"2016-07-07T13:25:30.882Z","1.0.5":"2016-07-08T10:56:02.355Z","1.0.6":"2016-07-08T11:39:28.999Z","1.0.7":"2016-07-08T11:41:26.659Z"}}}