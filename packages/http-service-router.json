{"name":"http-service-router","version":"1.0.2","description":"A tiny ~25L http-router that integrates well with a microservice-like architecture.","main":"index.js","ava":{"files":["**/*_test.js"]},"scripts":{"test":"standard && ava"},"keywords":["http","router","microservices","microservice","service"],"license":"ISC","devDependencies":{"ava":"^0.16.0","standard":"^8.4.0"},"dependencies":{},"repository":"https://github.com/domachine/http-service-router","homepage":"https://github.com/domachine/http-service-router#readme","gitHead":"559e128f121e483756bdfd7e0dd026a92a7ff451","versions":[{"number":"1.0.0","date":"2016-10-17T07:20:45.126Z"},{"number":"1.0.1","date":"2016-10-17T07:26:59.655Z"},{"number":"1.0.2","date":"2016-10-17T08:53:33.921Z"}],"readme":"# http-service-router\n\n[![Standard - JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n[![npm version](https://badge.fury.io/js/http-service-router.svg)](https://badge.fury.io/js/http-service-router)\n\nThis is a super tiny router to be used in a microservice-like environment. It parses a given URL and\nreturns a matching object. It also calculates the URL with the part for the match stripped. This is\nvery powerful when being combined with express's\n[path-to-regexp](https://www.npmjs.org/package/path-to-regexp).\n\n## Setup\n\n    $ npm i http-service-router\n\n## Contribute\n\nPull-requests are always welcome. For any problems or questions just open an issue.\n\n## Usage\n\n### Simple\n\nThe following example shows the simplest use case for the router. Keep reading for more advanced and\npowerful use-cases:\n\n```js\nconst createRouter = require('http-service-router')\n\nconst router = createRouter([\n  [/^\\/api/, myhandler]\n])\n\nconst srv = http.createServer((req, res) => {\n  const r = router.match(req.url)\n  if (!r) {\n    res.writeHead(404, { 'Content-Type': 'text/plain' })\n    return res.end('Not found :(')\n  }\n  r.service(req, res)\n})\n\nfunction myhandler (req, res) {\n  // ... Do your magic\n}\n```\n\n### Advanced use-case\n\nIn the following example I'll show you how the router can be utilized to build up a powerful chain\nof microservices that communicate using a proxy mechanism. This uses the\n[http-proxy](https://www.npmjs.org/package/http-proxy) module and the expression building module\n[path-to-regexp](https://www.npmjs.org/package/path-to-regexp).\n\n```js\nconst http = require('http')\nconst createRouter = require('http-service-router')\nconst httpProxy = require('http-proxy')\nconst p = require('path-to-regexp')\n\nconst api = httpProxy.createProxyServer({ target: 'http://api' })\nconst app = httpProxy.createProxyServer({ target: 'http://app' })\nconst router = createRouter([\n  [p('/api', { end: false }), api.web.bind(api)],\n  [p('/', { end: false }), app.web.bind(app)]\n])\nconst srv = http.createServer((req, res) => {\n  const r = router.match(req.url)\n  if (r) {\n    // The router also returns a URL where the matching part is stripped. E.g. in the case of the\n    // API this would transform '/api/v1/stuff' to '/v1/stuff' and '/api' (or '/api/') to '/'. So\n    // the service only receives the URL part that it's interested in.\n    req.url = r.url\n\n    // Proxy the request to the matching microservice\n    r.service(req, res)\n  } else {\n    // Send a 404\n    res.writeHead(404, { 'Content-Type': 'text/plain' })\n    return res.end('Not found :(')    \n  }\n})\n```\n\nNow `api` and `app` can again use the router to dispatch to more nested microservice.\n\n### Modular monolith\n\nSometimes we just don't have the ability to design our application with multiple processes in mind.\nMaybe we're just starting off and want to deploy the application using a hobby dyno on heroku. But\nthis doesn't disable us to design a modular application which can be easily converted to a\nmicroservice-like architecture. I like to use [micro](https://www.npmjs.org/package/micro) to build\nsuch applications.\n\n*Frontend service (server.js)*\n\n```js\nconst createRouter = require('http-service-router')\n\nconst createAuth = require('./auth')\nconst createAPI = require('./api')\nconst createApp = /* ... */\n\nmodule.exports = createFrontend({\n  services: {\n    api: createAuth({ services: { upstream: createAPI() } }),\n    app: createApp()\n  }\n})\n\nfunction createFrontend ({ services: { api, app } }) {\n  const router = createRouter([\n    [p('/api', { end: false }), api],\n    [p('/app', { end: false }), app]\n  ])\n\n  return async function frontend (req, res) {\n    const r = router.match(req.url)\n    if (r) {\n      req.url = r.url\n      return r.service(req, res)\n    } else {\n      send(res, 404, 'Sorry, this route doesn\\'t exist :-(')\n    }\n  }\n}\n```\n\n*Auth service (auth.js)*\n\n```js\nconst { createError } = require('micro')\n\nmodule.exports = createAuth\n\nfunction createAuth ({ services: { upstream } }) {\n  return async function auth (req, res) {\n    // ... Do authentication logic (e.g. JSON-Web-Token) ...\n    const user = fetchUserSomehow()\n    if (!user) throw createError(401, 'Sorry ...')\n    req.headers['x-user'] = user,_id\n    return upstream(req, res)\n  }\n}\n```\n\n*Api service (api.js)*\n\n```js\nmodule.exports = createAPI\n\nfunction createAPI () {\n  return async function api (req, res) {\n    // Do API stuff and use `req.headers['x-user']` as user id.\n  }\n}\n```\n\nThis is a nice modular architecture which can be executed using `micro server.js`. And the best\nthing is that you can easily convert it to a microservice architecture using the `http-proxy`\napproach\ndescribed above. But it gives you the chance to start-out in a lean fashion without thinking about\nscaling too much.\n\nCheers!\n","created":"2016-10-17T07:20:45.126Z","modified":"2016-10-17T08:53:33.921Z","lastPublisher":{"name":"webdesignio","email":"webdesignio@domachine.de"},"owners":[{"name":"domachine","email":"info@domachine.de"},{"name":"webdesignio","email":"webdesignio@domachine.de"}],"other":{"_attachments":{},"_from":".","_id":"http-service-router","_nodeVersion":"6.8.1","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/http-service-router-1.0.2.tgz_1476694412263_0.8411111042369157"},"_npmUser":{"name":"webdesignio","email":"webdesignio@domachine.de"},"_npmVersion":"3.10.8","_rev":"1-281708175f174b2c1037ff5c36a7173c","_shasum":"a003af45fce44face6801ea98c5894e58789ca41","author":{"name":"Dominik Burgd√∂rfer","email":"db@domachine.de"},"bugs":{"url":"https://github.com/domachine/http-service-router/issues"},"directories":{},"dist-tags":{"latest":"1.0.2"},"dist":{"shasum":"a003af45fce44face6801ea98c5894e58789ca41","tarball":"http://registry.npmjs.org/http-service-router/-/http-service-router-1.0.2.tgz"},"maintainers":[{"name":"domachine","email":"info@domachine.de"},{"name":"webdesignio","email":"webdesignio@domachine.de"}],"readmeFilename":"README.md","time":{"modified":"2016-10-17T08:53:33.921Z","created":"2016-10-17T07:20:45.126Z","1.0.0":"2016-10-17T07:20:45.126Z","1.0.1":"2016-10-17T07:26:59.655Z","1.0.2":"2016-10-17T08:53:33.921Z"}}}