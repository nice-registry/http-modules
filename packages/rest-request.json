{"name":"rest-request","version":"1.0.12","description":"A HTTP client REST fetcher","main":"rest-request.js","license":"ISC","homepage":"https://github.com/meg768/rest-request#readme","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/meg768/rest-request","dependencies":{"client-request":"^1.1.0"},"gitHead":"a41681be737424547b9bfe68ef652619c3346e59","versions":[{"number":"1.0.0","date":"2016-05-14T13:55:09.029Z"},{"number":"1.0.1","date":"2016-05-14T16:56:40.125Z"},{"number":"1.0.2","date":"2016-05-14T17:11:03.164Z"},{"number":"1.0.3","date":"2016-05-14T21:42:23.584Z"},{"number":"1.0.4","date":"2016-05-16T16:06:47.953Z"},{"number":"1.0.5","date":"2016-05-18T06:47:16.178Z"},{"number":"1.0.6","date":"2016-05-18T06:58:36.422Z"},{"number":"1.0.7","date":"2016-05-18T07:00:02.454Z"},{"number":"1.0.8","date":"2016-11-07T16:46:06.867Z"},{"number":"1.0.10","date":"2016-11-07T16:54:24.093Z"},{"number":"1.0.11","date":"2016-11-12T18:53:04.091Z"},{"number":"1.0.12","date":"2016-11-12T19:01:54.712Z"}],"readme":"# rest-request\nA small node module for making REST requests.\n\n## Installation\n\tnpm install rest-request\n\n## Usage\n\tvar Request = require('rest-request');\n\tvar restAPI = new Request('http://server.com');\n\t...\n\tvar request = restAPI.get('customer/:id', {id:1001});\n\n\trequest.then(function(customer) {\n\t\t...\n\t});\n\n## Constructor\n\n### new Request(path, options)\n\nConstructs a new request object. It takes the following argument.\n\n- **path** - Specifies the path to the REST api.\n- **options** - Specifies an object with the following options.\n\t- **headers** - Specifies default headers that is added to each request.\n\t- **debug**   - Displays information to the console.\n\n## Methods\n\n### request.request\n\n\trequest.request(method, path, params, headers)\n\n- **method** - Specifies the method type, **get**, **put**, **post** or **delete**.\n- **path** - Specifies the path.\n- **params** - Optional object with parameters.\n- **headers** - Optional headers to use.\n\nThe full uri string is built up using the static path specified in\nthe constructor combined with the path specified in this method.\nThe path may contain values from the parameters by\nspecifying them in the path.\n\n\trequest.request('api/v2/customer/{id}', {id:1001})\n\nor\n\n\trequest.request('api/v2/customer/:id', {id:1001})\n\nThe parameters not used in the path are instead added\nto the uri efter the '?' sign. For example the request\n\n\trequest.request('api/v2/customer/:id', {id:1001, search:'foo', limit:3})\n\nwill generate the uri\n\n\tapi/v2/customer/1001?search=foo&limit=3\n\n### request.get(path, params, headers)\n\nEquivalent with **request('GET', path, params, headers)**\n\n### request.post(path, params, headers)\n\nEquivalent with **request('POST', path, params, headers)**\n\n### request.put(path, params, headers)\n\nEquivalent with **request('PUT', path, params, headers)**\n\n### request.delete(path, params, headers)\n\nEquivalent with **request('DELETE', path, params, headers)**\n\n\n## Example\n\tvar RequestAPI = require('rest-request');\n\tvar yahoo      = new RequestAPI('https://query.yahooapis.com');\n\n\tfunction getQuote(ticker) {\n\t\tvar options = {};\n\n\t\toptions.q        = 'select * from yahoo.finance.quotes where symbol =  \"' + ticker + '\"';\n\t\toptions.format   = 'json';\n\t\toptions.env      = 'store://datatables.org/alltableswithkeys';\n\t\toptions.callback = '';\n\n\t\tyahoo.get('v1/public/yql', options).then(function(data) {\n\t\t\tvar quotes = data.query.results.quote;\n\n\t\t\tif (typeof qoutes != 'Array')\n\t\t\t\tquotes = [quotes];\n\n\t\t\tconsole.log(ticker, '=', quotes[0].LastTradePriceOnly);\t\t\n\n\t\t})\n\n\t\t.catch (function(error) {\n\t\t\tconsole.log(error);\n\n\t\t});\n\n\t}\n\n\tgetQuote('AAPL');\n","created":"2016-05-14T13:55:09.029Z","modified":"2016-11-12T19:01:54.712Z","lastPublisher":{"name":"meg768","email":"magnus@egelberg.se"},"owners":[{"name":"meg768","email":"magnus@egelberg.se"}],"other":{"_attachments":{},"_from":".","_id":"rest-request","_nodeVersion":"4.5.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/rest-request-1.0.12.tgz_1478977312861_0.3358142664656043"},"_npmUser":{"name":"meg768","email":"magnus@egelberg.se"},"_npmVersion":"2.15.9","_rev":"5-2639ab07e3a659d01f2b44a7103cd25f","_shasum":"aa16d35246815d47f3d55759abcdbbf7fa75afc9","author":{"name":"meg768"},"bugs":{"url":"https://github.com/meg768/rest-request/issues"},"directories":{},"dist-tags":{"latest":"1.0.12"},"dist":{"shasum":"aa16d35246815d47f3d55759abcdbbf7fa75afc9","tarball":"http://registry.npmjs.org/rest-request/-/rest-request-1.0.12.tgz"},"maintainers":[{"name":"meg768","email":"magnus@egelberg.se"}],"readmeFilename":"README.md","time":{"modified":"2016-11-12T19:01:54.712Z","created":"2016-05-14T13:55:09.029Z","1.0.0":"2016-05-14T13:55:09.029Z","1.0.1":"2016-05-14T16:56:40.125Z","1.0.2":"2016-05-14T17:11:03.164Z","1.0.3":"2016-05-14T21:42:23.584Z","1.0.4":"2016-05-16T16:06:47.953Z","1.0.5":"2016-05-18T06:47:16.178Z","1.0.6":"2016-05-18T06:58:36.422Z","1.0.7":"2016-05-18T07:00:02.454Z","1.0.8":"2016-11-07T16:46:06.867Z","1.0.10":"2016-11-07T16:54:24.093Z","1.0.11":"2016-11-12T18:53:04.091Z","1.0.12":"2016-11-12T19:01:54.712Z"}}}