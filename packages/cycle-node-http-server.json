{"name":"cycle-node-http-server","version":"2.0.2","description":"A Node HTTP(S) driver for Cycle.js","main":"dist/index.js","scripts":{"test":"./node_modules/mocha/bin/mocha --require babel-register -w","build":"babel src -d dist","watch":"babel src -d dist -w"},"keywords":["node","cycle.js","http","https"],"dependencies":{"xstream":"^10.7.0"},"devDependencies":{"@cycle/http":"^13.3.0","@cycle/run":"^3.1.0","babel-cli":"^6.24.1","babel-plugin-transform-object-rest-spread":"^6.23.0","babel-plugin-transform-react-jsx":"^6.24.1","babel-preset-env":"^1.5.1","babel-register":"^6.24.1","body-parser":"^1.17.2","lodash":"^4.17.4","mocha":"^3.4.2","snabbdom-jsx":"^0.3.1","snabbdom-to-html":"^3.2.0","switch-path":"^1.2.0"},"license":"MIT","gitHead":"1518ca24b1ae281fd1366abe999c27a029601f2f","versions":[{"number":"1.0.0","date":"2017-06-14T13:41:22.165Z"},{"number":"1.0.1","date":"2017-06-14T15:04:23.727Z"},{"number":"1.0.2","date":"2017-06-14T15:39:50.751Z"},{"number":"1.0.3","date":"2017-06-14T15:44:20.735Z"},{"number":"1.0.4","date":"2017-06-14T15:46:50.352Z"},{"number":"2.0.0","date":"2017-06-15T13:51:45.215Z"},{"number":"2.0.1","date":"2017-06-15T14:03:58.401Z"},{"number":"2.0.2","date":"2017-06-15T15:17:14.575Z"}],"readme":"# Cycle Node Http Server\n\nDriver and router component for manage HTTP/HTTPS services with Cycle.js\n\n## Installation with NPM\n\n`npm i cycle-node-http-serve --save`\n\n## HTTP/HTTPS Driver\n\n### `makeHttpServerDriver(config)`\n\nCreate the driver\n\n**Arguments**\n\n- `config` with specifics options\n  - `middlewares : Array` : array of [express compatible middlewares](http://expressjs.com/en/guide/using-middleware.html)    like [serveStatic](https://github.com/expressjs/serve-static) or [bodyParser](https://github.com/expressjs/body-parser)\n  - `render: (template) => template` : a template engine renderer, call with `req.response.render(template)`\n\n#### Basic usage\n\n```js\n\nconst {run} = require('@cycle/run');\nconst {makeHttpServerDriver} = require('cycle-node-http-server');\n\nfunction main(sources){\n\n  const {httpServer} = sources;\n\n  const sinks = {\n    \n  }\n  return sinks;\n}\n\nconst drivers = {\n  httpServer: makeHttpServerDriver()\n}\n\nrun(main,drivers)\n\n```\n\n### Create a HTTP Server Instance\n\nTo create a server instance, we need to send a config stream to the httpServer output.\nLike this :\n\n```js\n   const httpCreate$ = xs.of({\n        id: 'http',\n        action: 'create',\n        port: 1983\n    });\n    \n    const sinks = {\n       httpServer: httpCreate$\n    }\n```\n\n**create action config:**\n\n- `id` : the instance reference name. Needed to select the server stream on input.\n- `action:'create'` : the action name\n- `port` : see [server.listen([port][, hostname][, backlog][, callback]) on NodeJS Api](https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback)\n- `hostname` : see [server.listen([port][, hostname][, backlog][, callback]) on NodeJS Api](https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback)\n- `backlog` : see [server.listen([port][, hostname][, backlog][, callback]) on NodeJS Api](https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback)\n- `handle` : see [server.listen(handle[, callback]) on NodeJS Api](https://nodejs.org/api/http.html#http_server_listen_handle_callback)\n- `path` : see [server.listen(path[, callback]) on NodeJS Api](https://nodejs.org/api/http.html#http_server_listen_path_callback)\n- `secured` : set at true to create a HTTPS server.\n- `securedOptions` : Needed if `secured`is `true` see [Node HTTPS createServer options](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener)\n- `middlewares : Array` : array of [express compatible middlewares](http://expressjs.com/en/guide/using-middleware.html)    like [serveStatic](https://github.com/expressjs/serve-static) or [bodyParser](https://github.com/expressjs/body-parser)\n\n**Basic example with HTTPS**\n\n```js\n     const securedOptions = {\n          key: fs.readFileSync(`${__dirname}/certs/key.pem`),\n          cert: fs.readFileSync(`${__dirname}/certs/cert.pem`)\n     };\n     \n     const httpsCreate$ = xs.of({\n        id: 'https',\n        action: 'create',\n        port: 1984,\n        secured: true,\n        securedOptions\n    });\n\n```\n\n### Close server instance\n\nTo close a server instance we need to send a config stream to the httpServer output.\n\n```js\n   const httpClose$ = xs.of({\n        id: 'http',\n        action: 'close'\n    });\n    \n    const sinks = {\n       httpServer: httpClose$\n    }\n```\n\n**create action config:**\n\n- `id` : the instance reference name. Needed to select the server stream on input.\n- `action:'close'` : the action name\n\n### Select a server stream with `select(id)`\n\nSelect the server width this specific `id`\n\n**Return Object**\n\n```js\n   const http = httpServer.select('http');\n```\n\n### Get events with `event(name)`\n\nGet event with `name` stream from a `http`object.\n\n```js\n   const http = httpServer.select('http');\n   const httpReady$ = http.events('ready');\n   const httpRequest$ = http.events('request');\n```\n**Return Stream**\n\n#### Event `ready`\n\nDispatched when the server is ready to listen.\n\n**Returned values :**\n- `event` : `'ready'`\n- `instanceId` : The instance id\n- `instance` : the original Node.js server object\n\n#### Event `request`\n\nDispatched when the server received a request.\nSee `Request` object above. \n\n### `Request` object\n\n#### Properties\n\n- `event` : `'request'`,\n- `instanceId` : The instance id\n- `original` : original NodeJS request object,\n- `url` : request's url,\n- `method` : request's method (POST,GET,PUT, etc...),\n- `headers` : request's headers,\n- `body` : the body request. `undefined`by default. See [BodyParser middleware](https://github.com/expressjs/body-parser)\n- `response` : the response object\n\n### `Response`object\n\n#### Methods\n\n##### `send()` \n\nFormat response for driver output.\n\n###### Arguments\n\n- `content` : the body response\n- `options` :\n - `statusCode` : default `200`\n - `headers` : default `null`\n - `statusMessage` : default `null`\n  \n**Return formatted object for driver output**\n\n##### `json()`\n\nFormat response in json.\nSee `send()`\n\n##### `text()`\n\nFormat response in plain text.\nSee `send()`\n\n##### `html()`\n\nFormat response in html.\nSee `send()`\n\n##### `render()` \n\nFormat response with the render engine defined in `makeHttpServerDriver()` options.\n\n##### `redirect()` \n\nFormat response redirection for driver output.\n\n###### Arguments\n\n- `path` : path to redirect\n- `options` :\n - `statusCode` : default `302`\n - `headers` : default `null`\n - `statusMessage` : default `null`\n  \n**Return formatted object for driver output**\n\n### Basic Usage\n\n```js\n\nconst {run} = require('@cycle/run');\nconst {makeHttpServerDriver} = require('cycle-node-http-server');\n\nfunction main(sources){\n\n  const {httpServer} = sources;\n\n  // get http source\n  const http = httpServer.select('http');\n  // get requests\n  const serverRequest$ = http.events('request');\n\n  const httpCreate$ = xs.of({\n      id: 'http',\n      action: 'create',\n      port: 1983\n  });\n  \n  // response formated with a helper response object\n  // Response in text format : 'covfefe'\n  const response$ = serverRequest$.map( req => req.response.text('covfefe') );\n\n  const sinks = {\n    httpServer: xs.merge(httpCreate$,response$)\n  }\n  return sinks;\n}\n\nconst drivers = {\n  httpServer: makeHttpServerDriver()\n}\n\nrun(main,drivers)\n\n```\n\n## Routing\n\nA Router component using [switch-path](https://github.com/staltz/switch-path)\n\n**Arguments**\n\n`Router(sources,routes)`\n\n- `sources` :  Cycle.js sources object with a specific source `request$`, a stream of http(s) requests.\n- `routes` : a collection of routes. See [switch-path](https://github.com/staltz/switch-path)\n\n**Return stream**\n\n### Example\n\n```js\n const {makeHttpServerDriver, Router} = require('cycle-node-http-server');\n\n function main(sources) {\n\n    const { httpServer } = sources;\n\n    // get http source\n    const http = httpServer.select('http');\n    // get requests\n    const serverRequest$ = http.events('request');\n\n    const router$ = Router({ request$: serverRequest$ }, {\n        '/': sources => Page({ props$: xs.of({ desc: 'home' }) }),\n        '/user/:id': id => sources => Page({ props$: xs.of({ desc: `user/${id}` }) }),\n    })\n\n    const sinks = {\n        httpServer: router$.map(c => c.httpServer).flatten(),\n    }\n    return sinks;\n}\n\n function Page(sources) {\n    // request$ is add by the Router to the `sources` object\n    const { props$, request$ } = sources;\n    const sinks = {\n        httpServer: xs.combine(props$, request$).map(([props, req]) => req.response.text(props.desc))\n    }\n    return sinks;\n}\n```\n\n## Cooking with middlewares\n\nHere are discribed two usefull express middlewares.\n\n### [serveStatic](https://github.com/expressjs/serve-static)\n\nIt is used to serve static files ( images, css, etc... )\n\n**Basic usage**\n\n```js\nconst serveStatic = require('serve-static');\nconst {makeHttpServerDriver} = require('cycle-node-http-server');\n\nconst drivers = {\n  httpServer: makeHttpServerDriver({middlewares:[serveStatic('./public')]})\n}\n\n```\n\n### [bodyParser](https://github.com/expressjs/body-parser)\n\nIt is used to parse request body and return a full formated body.\n\n**Basic usage**\n\n```js\nconst bodyParser = require('body-parser');\nconst {makeHttpServerDriver} = require('cycle-node-http-server');\n\nconst drivers = {\n  httpServer: makeHttpServerDriver({\n      middlewares: [\n          // two parsers used to format body POST request in json\n          bodyParser.urlencoded({ extended: true }),\n          bodyParser.json()\n      ]\n  })\n}\n\n```\n\n## Using [Snabbdom](https://github.com/snabbdom/snabbdom)\n\nSnabbdom is the Virtual DOM using by @cycle/dom. It's possible to use it in server side with [snabbdom-to-html](https://github.com/snabbdom/snabbdom-to-html).\n\nA small helper to use `snabbdom` with `cycle-node-http-server`\n\n```js\n  const snabbdomInit = require('snabbdom-to-html/init');\n  const snabbdomModules = require('snabbdom-to-html/modules');\n  const {makeHttpServerDriver} = require('cycle-node-http-server');\n    \n  export default function vdom(modules=[\n          snabbdomModules.class,\n          snabbdomModules.props,\n          snabbdomModules.attributes,\n          snabbdomModules.style\n      ]){\n      return snabbdomInit(modules);\n  }\n  \n  const drivers = {\n    httpServer: makeHttpServerDriver({\n        render: vdom()\n    })\n  }\n\n```\nIn `main` function, snabbdom used with JSX\n\n```js\n  const response$ = request$.map( req => req.response.render(\n    <div>\n      Pouet\n    </div>\n  ))\n\n```\n\n## License\n\n**MIT**\n\n\n","starsCount":1,"created":"2017-06-14T13:41:22.165Z","modified":"2017-06-15T15:17:14.575Z","lastPublisher":{"name":"mrpierrot","email":"pierre@casusludi.com"},"owners":[{"name":"mrpierrot","email":"pierre@casusludi.com"}],"other":{"_attachments":{},"_from":".","_id":"cycle-node-http-server","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cycle-node-http-server-2.0.2.tgz_1497539833481_0.06187558081001043"},"_npmUser":{"name":"mrpierrot","email":"pierre@casusludi.com"},"_npmVersion":"3.10.8","_rev":"11-269e02ba10d9c6d8b0c5791f7137644a","_shasum":"f5a16081c3244f322c59594db4a2178b30b2981d","author":{"name":"Pierre Chabiland"},"directories":{},"dist-tags":{"latest":"2.0.2"},"dist":{"shasum":"f5a16081c3244f322c59594db4a2178b30b2981d","tarball":"https://registry.npmjs.org/cycle-node-http-server/-/cycle-node-http-server-2.0.2.tgz"},"maintainers":[{"name":"mrpierrot","email":"pierre@casusludi.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-15T15:17:14.575Z","created":"2017-06-14T13:41:22.165Z","1.0.0":"2017-06-14T13:41:22.165Z","1.0.1":"2017-06-14T15:04:23.727Z","1.0.2":"2017-06-14T15:39:50.751Z","1.0.3":"2017-06-14T15:44:20.735Z","1.0.4":"2017-06-14T15:46:50.352Z","2.0.0":"2017-06-15T13:51:45.215Z","2.0.1":"2017-06-15T14:03:58.401Z","2.0.2":"2017-06-15T15:17:14.575Z"},"users":{"mrpierrot":true}}}