{"name":"node-header-session","description":"The middleware creates a simple session management via a HTTP header field that contains a token.","version":"0.5.1","main":"lib/index.js","scripts":{"test":"mocha lib/**/*.spec.js"},"dependencies":{"express":"4.12.4","extend":"2.0.1","q":"1.4.1"},"devDependencies":{"chai":"3.0.0","mocha":"2.2.5"},"repository":"https://github.com/blueskyfish/node-header-session","gitHead":"b317fd4f7e57ca73f29fd08ae7a4bd41cf421448","homepage":"https://github.com/blueskyfish/node-header-session#readme","versions":[{"number":"0.4.3","date":"2015-06-27T17:22:39.136Z"},{"number":"0.4.4","date":"2015-06-27T17:24:59.329Z"},{"number":"0.5.0","date":"2015-06-28T12:45:34.039Z"},{"number":"0.5.1","date":"2015-06-28T13:17:34.177Z"}],"readme":"The middleware creates a simple session management via a HTTP header field that contains a token.\n\n![Logo Node Header Session](logo.png)\n\n\n# Node Header Session\n\nThe middleware creates a simple session management via a HTTP header field that contains a token. This is for a stateless RESTful service.\n\n## Installation\n\n### Setup\n\n\t$ cd project/folder\n\t$ git clone https://github.com/blueskyfish/node-header-session.git\n\t$ cd node-header-session\n\t$ npm install\n\n### Test\n\n\t$npm test\n\nThe tests are written with `mocha` and `chai`\n\nThe project is programmed with [VS Code](https://www.visualstudio.com/en-us/products/code-vs.aspx). But you can use any other editor used.\n\n\n### DefinitelyTyped / tsd\n\nI use the [DefinitelyTyped / tsd](https://github.com/DefinitelyTyped/tsd) for autocomplete the api from external libraries.\n\n\t$ npm install -g tsd\n\t$ tsd install\n\n\n\n## Usage\n\n```js\nvar\n\texpress = require('express'),\n\theaderSession = require('node-header-session');\n\nvar\n\tapp = express();\n\n// register the middleware and the metrics request.\nheaderSession(app, {\n\tname: 'x-this-is-a-restful-header-field',\n\tdebug: true,\n\tmetricsUrl: '/metrics/rest-header',\n\troot: '/restful-services',\n\tgenToken: function () {\n\t\treturn // generate a unique id / token (may UUID())\n\t},\n\tvalidToken = function (token) {\n\t\treturn true; // or \"/test pattern/.test(token);\n\t}\n\t// storage (a session storage engine @see memory-storage.js\n});\n\napp.get('/', function (req, res) {\n\tconsole.log('token %s', req.headerSession.token);\n\treq.headerSession.getSession().then(\n\t\tfunction (session) {\n\t\t\tvar\n\t\t\t\tcount = session.count || 0;\n\n\t\t\tsession.count = ++count;\n\n\t\t\tres.send({\n\t\t\t\tcount: count\n\t\t\t});\n\t\t}\n\t);\n});\n\napp.listen(3000, function () {\n\tconsole.log('server is started...');\n});\n```\n\n## Options\n\nThe middleware will be configured with some options\n\nName             | Kind     | Description\n-----------------|----------|----------------------------------------------\nname             | string   | The header name for the session management (**Default** `x-session-token`).\ndebug            | boolean  | Show debug messages with `console.log` (**Default**: `true`).\nroot             | string   | **required** The root path for the session handling the the header field.\nmetricsUrl       | string   | The url f√ºr the metrics information. (**Default**: undefined)\ngenToken         | function | The function for generate the token uuid (**Default**: undefined)\nvalidToken       | function | The function for the validate of the token uuid (**Default**: undefined)\nstorage          | object   | The storage engine for the session values. The Instance must have the two method **load** and **store**\n\n\n\n## Demo\n\nThe demo app is in the folder `demo`. Start the demo app with the following commands\n\n\t$ cd demo\n\t$ npm install\n\t$ npm start\n\nOpen the Browser <http://localhost:3000>\n\n![Screenshot from Demo app](demo-screenshot.png)\n\n*Screenshot from Demo app*\n\n\n## Storage Engine\n\nThe session values can be saved in the memory or in a database table or in a NOSQL engine. If no storage\nis defined, then a memory storage will create.\n\n\n### Storage Interface\n\n    Storage\n    + load(token: string): promise\n    + store(token: string, session: object): promise\n\t+ info(): promise  // optional\n    + clear(): void    // optional\n\n**Include Storage**\n\n* [MemoryStorage](#memory_storage_class) session values are in the memory cach of the application.\n* [FileStorage](file_storage_class) session values are stored in the filesystem.\n\n#### load(token: string): promise\n\nThe method `load` try to load the session values from the storage. In case of success\nthe promise callback returns the session values.\n\n\tstorage.load(token).then(function (session) {\n\t\t// session values\n\t});\n\n#### store(token: string, values: object): promise\n\nThe method `store` try to store the session values into the storage. In case of sucess\nthe promise callback returns the session values agian.\n\n\tstorage.store(token, sessionValues).then(function (session) {\n\t\t// session values\n\t});\n\n#### info(): promise\n\nThe method `info` try to collect the session information. In case of sucess the promise\ncallback returns a list of session info. The session info should contains the token,\nthe creation and modified date.\n\n\tstorage.info().then(function (sessionInfoList) {\n\t\tsessionInfoList.forEach(function (sessionInfo) {\n\t\t\tconsole.log('%s (%s, %s)', sessionInfo.token,\n\t\t\t\tsessionInfo.creation, sessionInfo.modified\n\t\t\t);\n\t\t});\n\t}\n\n#### (optional) clear(): void | promise\n\nThe method `clear` remove all sessions.\n\n## <a name=\"memory_storage_class\"></a>MemoryStorage\n\n* All sessions are stored in the memory of the application.\n* This storage is using only for testing or for the internal development.\n* The storage doesn't need to configure.\n* If no storage engine is specified when you configure the middleware, the Memory Storage is used automatically.\n\n**Inteface**\n\n\tMemoryStorage\n\t+ load(token: string): promise\n\t+ store(token: string, values: object): promise\n\t+ info(): promise;\n\t+ clear(): void\n\n## <a name=\"file_storage_class\"></a>FileStorage\n\n* All sessions are stored in the file system.\n* Before the storage can be used, it must be konfigueriert with the method `init`.\n\n**Configuration**\n\nProperty          | Type         | Description\n------------------|--------------|----------------------------------------\nstoragePath       | string       | The directory name for read and write the session values. The directory must be existed!\nblacklist         | Array<String>| Optional: Al list with the filenames in the storagePath, that are ignore.\n\n\tvar\n\t\tstoreage = require('./lib/file-storage');\n\n\tstorage.init({\n\t\tstoragePath: '/tmp/path/for/write/and/read/sessionValues',\n\t\tblacklist: ['readme.md', 'config.json']\n\t});\n\n**Interface**\n\n\tFileStorage\n\t+ load(token: string): promise\n\t+ store(token, values: object): promise\n\t+ info(): promise;\n\t+ appendblackList(blacklist: Array<String>): void;\n\t+ clear(): promise\n\n\n\n## Routemap\n\n* add a timeout for the header session\n* **Done** improve the metrics output\n* **Done** write tests\n* **Done** session values to a storage engine  \n  * **Done** *MemoryStorage*\n  * **Done** FileStorage\n  * and more...\n* **Done** *create a own token generator function*\n* **Done** *calidation function*\n\nIf an important feature is missing or you find an error, please create an Issue  \n<https://github.com/blueskyfish/node-header-session/issues>\n\n\n## Dependencies\n\nSee in the file `package.json`\n\n\n## Third Party Tools\n\n* [NodeJS](https://nodejs.org) or [io.js](https://iojs.org/)\n* [ExpressJS](http://expressjs.com/)\n* [VS Code](https://www.visualstudio.com/en-us/products/code-vs.aspx)\n* [DefinitelyTyped / tsd](https://github.com/DefinitelyTyped/tsd)\n\n\n\n## License\n\n\tThe MIT License (MIT)\n\n\tCopyright (c) 2015 BlueSkyFish <blueskyfish@kirchnerei.de>\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE.\n","starsCount":1,"created":"2015-06-27T17:22:39.136Z","modified":"2015-06-28T13:17:34.177Z","lastPublisher":{"name":"blueskyfish","email":"blueskyfish@kirchnerei.de"},"owners":[{"name":"blueskyfish","email":"blueskyfish@kirchnerei.de"}],"other":{"_attachments":{},"_from":".","_id":"node-header-session","_nodeVersion":"0.12.4","_npmUser":{"name":"blueskyfish","email":"blueskyfish@kirchnerei.de"},"_npmVersion":"2.10.1","_rev":"1-d8948a68d3622346ecab6d475b45b36e","_shasum":"2e830f0591472774e5174fd1fa0f109cab323a4f","author":{"name":"BlueSkyFish","email":"blueskyfish@blueskyfish.de"},"bugs":{"url":"https://github.com/blueskyfish/node-header-session/issues"},"directories":{},"dist-tags":{"latest":"0.5.1"},"dist":{"shasum":"2e830f0591472774e5174fd1fa0f109cab323a4f","tarball":"http://registry.npmjs.org/node-header-session/-/node-header-session-0.5.1.tgz"},"maintainers":[{"name":"blueskyfish","email":"blueskyfish@kirchnerei.de"}],"readmeFilename":"readme.md","time":{"modified":"2015-06-28T13:17:34.177Z","created":"2015-06-27T17:22:39.136Z","0.4.3":"2015-06-27T17:22:39.136Z","0.4.4":"2015-06-27T17:24:59.329Z","0.5.0":"2015-06-28T12:45:34.039Z","0.5.1":"2015-06-28T13:17:34.177Z"},"users":{"icerainnuaa":true}}}