{"name":"unirest","version":"0.5.1","description":"Simplified, lightweight HTTP client library","main":"index.js","dependencies":{"form-data":"^0.2.0","mime":"~1.3.4","request":"~2.74.0"},"devDependencies":{"body-parser":"^1.15.1","mocha":"~2.4.5","should":"~8.3.1","express":"^4.13.4"},"scripts":{"test":"make test"},"repository":"https://github.com/Mashape/unirest-nodejs","keywords":["request","http","library","superagent","simple","util","utility","method"],"license":"MIT","gitHead":"028e4fd2b104b4209e54cd871f83cde1e6a49605","homepage":"https://github.com/Mashape/unirest-nodejs#readme","versions":[{"number":"0.0.1","date":"2013-10-19T00:33:20.686Z"},{"number":"0.0.2","date":"2013-10-19T01:17:53.283Z"},{"number":"0.0.3","date":"2013-10-22T18:36:20.927Z"},{"number":"0.0.4","date":"2013-10-22T18:38:58.303Z"},{"number":"0.0.5","date":"2013-10-25T01:24:39.871Z"},{"number":"0.0.6","date":"2013-11-15T00:15:47.502Z"},{"number":"0.0.7","date":"2013-11-15T00:17:22.722Z"},{"number":"0.0.8","date":"2013-11-15T01:13:06.575Z"},{"number":"0.0.9","date":"2013-11-15T20:30:11.887Z"},{"number":"0.1.0","date":"2013-12-10T01:25:57.644Z"},{"number":"0.1.1","date":"2014-01-13T19:33:19.136Z"},{"number":"0.1.2","date":"2014-02-01T23:20:46.669Z"},{"number":"0.1.3","date":"2014-02-01T23:21:30.855Z"},{"number":"0.1.4","date":"2014-02-18T02:12:38.765Z"},{"number":"0.1.6","date":"2014-02-25T03:17:13.422Z"},{"number":"0.1.7","date":"2014-03-01T02:57:44.170Z"},{"number":"0.1.8","date":"2014-03-07T23:41:54.357Z"},{"number":"0.1.9","date":"2014-03-18T18:40:56.608Z"},{"number":"0.1.10","date":"2014-04-03T02:41:04.743Z"},{"number":"0.1.11","date":"2014-04-03T02:51:57.278Z"},{"number":"0.2.0","date":"2014-04-03T23:04:48.537Z"},{"number":"0.2.1","date":"2014-04-21T21:43:37.617Z"},{"number":"0.2.2","date":"2014-04-21T22:00:24.911Z"},{"number":"0.2.3","date":"2014-04-24T18:42:34.674Z"},{"number":"0.2.4","date":"2014-04-24T18:53:24.127Z"},{"number":"0.2.5","date":"2014-04-24T19:01:04.690Z"},{"number":"0.2.6","date":"2014-04-24T19:03:35.529Z"},{"number":"0.2.7","date":"2014-05-13T17:44:21.330Z"},{"number":"0.2.8","date":"2014-10-22T18:34:51.297Z"},{"number":"0.2.9","date":"2014-10-22T19:54:20.997Z"},{"number":"0.3.0","date":"2014-11-10T19:12:03.500Z"},{"number":"0.3.1","date":"2014-12-09T00:25:43.006Z"},{"number":"0.3.2","date":"2014-12-09T04:20:11.238Z"},{"number":"0.3.3","date":"2014-12-12T04:53:59.074Z"},{"number":"0.3.4","date":"2014-12-12T04:55:57.759Z"},{"number":"0.3.5","date":"2014-12-18T18:31:42.222Z"},{"number":"0.3.6","date":"2014-12-18T18:35:09.623Z"},{"number":"0.3.7","date":"2014-12-18T19:33:46.440Z"},{"number":"0.3.8","date":"2015-01-15T02:15:16.701Z"},{"number":"0.4.0","date":"2015-01-16T02:24:52.179Z"},{"number":"0.4.2","date":"2015-05-26T21:38:44.322Z"},{"number":"0.5.0","date":"2016-05-09T22:32:03.829Z"},{"number":"0.5.1","date":"2016-08-18T22:30:15.450Z"}],"readme":"# Unirest for Node.js [![Build Status][travis-image]][travis-url] \n\n[![License][npm-license]][license-url]\n[![Downloads][npm-downloads]][npm-url]\n[![Gitter][gitter-image]][gitter-url]\n\n![][unirest-logo]\n\n\n[Unirest](http://unirest.io) is a set of lightweight HTTP libraries available in multiple languages, built and maintained by [Mashape](https://github.com/Mashape), who also maintain the open-source API Gateway [Kong](https://github.com/Mashape/kong). \n\n\n## Installing\n\nTo utilize unirest for node.js install the the `npm` module:\n\n```bash\n$ npm install unirest\n```\n\nAfter installing the `npm` package you can now start simplifying requests like so:\n\n```js\nvar unirest = require('unirest');\n```\n\n## Creating Requests\n\nYou're probably wondering how by using **Unirest** makes creating requests easier. Besides automatically supporting gzip, and parsing responses, lets start with a basic working example:\n\n```js\nunirest.post('http://mockbin.com/request')\n.headers({'Accept': 'application/json', 'Content-Type': 'application/json'})\n.send({ \"parameter\": 23, \"foo\": \"bar\" })\n.end(function (response) {\n  console.log(response.body);\n});\n```\n\n## Uploading Files\n\nTransferring file data has been simplified:\n\n```js\nunirest.post('http://mockbin.com/request')\n.headers({'Content-Type': 'multipart/form-data'})\n.field('parameter', 'value') // Form field\n.attach('file', '/tmp/file') // Attachment\n.end(function (response) {\n  console.log(response.body);\n});\n```\n\n## Custom Entity Body\n\n```js\nunirest.post('http://mockbin.com/request')\n.headers({'Accept': 'application/json'})\n.send(new Buffer([1,2,3]))\n.end(function (response) {\n  console.log(response.body);\n});\n```\n\n# Unirest\n\nA request can be initiated by invoking the appropriate method on the unirest object, then calling `.end()` to send the request. Alternatively you can send the request directly by providing a callback along with the url.\n\n## unirest(method [, uri, headers, body, callback])\n\n- `method` - Request type (GET, PUT, POST, etc...)\n- `uri` - _Optional_; When passed will return a [Request](#request) object. Otherwise returns generated function with `method` pre-defined (e.g. `unirest.get`)\n- `headers` (`Object`) - _Optional_; HTTP Request headers\n- `body` (`Mixed`) - _Optional_; HTTP Request body\n- `callback` (`Function`) - _Optional_; Invoked when Request has finalized with the argument [Response](#response)\n\n## unirest\\[method](url [, headers, body, callback])\n\n- `method` - Request type, pre-defined methods, see below.\n- `url` - Request location.\n- `headers` (`Object` | `Function`) - _Optional_; When `Object` headers are passed along to the [`Request.header`](#requestheaderobject-or-field-value) method,\n   when `Function` this argument is used as the `callback`.\n- `body` (`Mixed` | `Function`) - _Optional_; When `body` is not a `Function` it will be passed along to `Request.send()` method,\n   otherwise when a `Function` it will be used as the `callback`.\n- `callback` (`Function`) - _Optional_; Calls end with given argument, otherwise `Request` is returned.\n\nAll arguments above, with the exclusion of `url`, will accept a `Function` as the `callback`.\nWhen no `callback` is present, the [Request](#request) object will be returned.\n\n### get\n\nReturns a [Request](#request) object with the `method` option set to `GET`\n\n```js\nvar Request = unirest.get('http://mockbin.com/request');\n```\n\n### head\nReturns a [Request](#request) object with the `method` option set to `HEAD`\n\n```js\nvar Request = unirest.head('http://mockbin.com/request');\n```\n\n### put\nReturns a [Request](#request) object with the `method` option set to `PUT`\n\n```js\nvar Request = unirest.put('http://mockbin.com/request');\n```\n\n### post\nReturns a [Request](#request) object with the `method` option set to `POST`\n\n```js\nvar Request = unirest.post('http://mockbin.com/request');\n```\n\n### patch\n\nReturns a [Request](#request) object with the `method` option set to `PATCH`\n\n```js\nvar Request = unirest.patch('http://mockbin.com/request');\n```\n\n### delete\nReturns a [Request](#request) object with the `method` option set to `DELETE`\n\n```js\nvar Request = unirest.delete('http://mockbin.com/request');\n```\n\n## unirest.jar()\n\nCreates a container to store multiple cookies, i.e. a cookie jar.\n\n```js\nvar CookieJar = unirest.jar();\nCookieJar.add('key=value', '/'); // Cookie string, pathname / url\nunirest.get('http://mockbin.com/request').jar(CookieJar);\n```\n\n## unirest.cookie(String)\n\nCreates a cookie, see above for example.\n\n## unirest.request\n\n`mikeal/request` library (the underlying layer of unirest) for direct use.\n\n# Request\n\nProvides simple and easy to use methods for manipulating the request prior to being sent. This object is created when a\nUnirest Method is invoked. This object contains methods that are chainable like other libraries such as jQuery and popular\nrequest module Superagent (which this library is modeled after slightly).\n\n**Example**\n\n```js\nvar Request = unirest.post('http://mockbin.com/request');\n\nRequest.header('Accept', 'application/json').end(function (response) {\n  ...\n});\n```\n\n## Request Methods\n\nRequest Methods differ from Option Methods (See Below) in that these methods transform, or handle the data in a sugared way, where as Option Methods require a more _hands on_ approach.\n\n#### Request.auth(Object) or (user, pass, sendImmediately)\n\nAccepts either an `Object` containing `user`, `pass`, and optionally `sendImmediately`.\n\n- `user` (`String`) - Authentication Username\n- `pass` (`String`) - Authentication Password\n- `sendImmediately` (`String`) - _Optional_; Defaults to `true`; Flag to determine whether Request should send the basic authentication header along with the request. Upon being _false_, Request will retry with a _proper_ authentication header after receiving a `401` response from the server (which must contain a `WWW-Authenticate` header indicating the required authentication method)\n\n**Object**\n\n```js\nRequest.auth({\n  user: 'Nijiko',\n  pass: 'insecure',\n  sendImmediately: true\n});\n```\n\n**Arguments**\n\n```js\nRequest.auth('Nijiko', 'insecure', true);\n```\n\n#### Request.header(header[, value])\n\n**Suggested Method for setting Headers**\n\nAccepts either an `Object` containing `header-name: value` entries,\nor `field` and `value` arguments. Each entry is then stored in a two locations, one in the case-sensitive `Request.options.headers` and the other on a private `_headers` object that is case-insensitive for internal header lookup.\n\n- `field` (`String`) - Header name, such as `Accepts`\n- `value` (`String`) - Header value, such as `application/json`\n\n**Object**\n\n```js\nRequest.headers({\n  'Accept': 'application/json',\n  'User-Agent': 'Unirest Node.js'\n})\n```\n\nNote the usage of [`Request.headers`](#requestheaders) which is simply an alias to the `Request.header` method, you can also use [`Request.set`](#requestset) to set headers.\n\n**Arguments**\n\n```js\nRequest.header('Accept', 'application/json');\n```\n\n#### Request.part(Object)\n\n**Experimental**\n\nSimiliar to `Request.multipart()` except it only allows one object to be passed at a time and does the pre-processing on necessary `body` values for you.\n\nEach object is then appended to the `Request.options.multipart` array.\n\n```js\nRequest.part({\n  'content-type': 'application/json',\n  body: { foo: 'bar' }\n}).part({\n  'content-type': 'text/html',\n  body: '<strong>Hello World!</strong>'\n});\n```\n\n#### Request.query(Object) or (String)\n\nSerializes argument passed to a querystring representation.\n\nShould `url` already contain a querystring, the representation will be appended to the `url`.\n\n```js\nunirest.post('http://mockbin.com/request')\n.query('name=nijiko')\n.query({\n  pet: 'spot'\n})\n.end(function (response) {\n  console.log(response);\n});\n```\n\n#### Request.send(Object | String)\n\nData marshalling for HTTP request body data\n\nDetermines whether data mime-type is `form` or `json`.\nFor irregular mime-types the `.type()` method is used to infer the `content-type` header.\n\nWhen mime-type is `application/x-www-form-urlencoded` data is appended rather than overwritten.\n\n**JSON**\n\n```js\nunirest.post('http://mockbin.com/request')\n.type('json')\n.send({\n  foo: 'bar',\n  hello: 3\n})\n.end(function (response) {\n  console.log(response.body);\n})\n```\n\n**FORM Encoded**\n\n```js\n// Body would be:\n// name=nijiko&pet=turtle\nunirest.post('http://mockbin.com/request')\n.send('name=nijiko')\n.send('pet=spot')\n.end(function (response) {\n  console.log(response.body);\n});\n```\n\n**HTML / Other**\n\n```js\nunirest.post('http://mockbin.com/request')\n.set('Content-Type', 'text/html')\n.send('<strong>Hello World!</strong>')\n.end(function (response) {\n  console.log(response.body);\n});\n```\n\n#### Request.type(String)\n\nSets the header `Content-Type` through either lookup for extensions (`xml`, `png`, `json`, etc...) using `mime` or using the full value such as `application/json`.\n\nUses [`Request.header`](#requestheaderobject-or-field-value) to set header value.\n\n```js\nRequest.type('application/json') // Content-Type: application/json\nRequest.type('json') // Content-Type: application/json\nRequest.type('html') // Content-Type: text/html\n…\n```\n\n## Request Form Methods\n\nThe following methods are sugar methods for attaching files, and form fields. Instead of handling files and processing them yourself Unirest can do that for you.\n\n#### Request.attach(Object) or (name, path)\n\n`Object` should consist of `name: 'path'` otherwise use `name` and `path`.\n\n- `name` (`String`) - File field name\n- `path` (`String` | `Object`) - File value, A `String` will be parsed based on its value. If `path` contains `http` or `https` Request will handle it as a `remote file`.  If `path` does not contain `http` or `https` then unirest will assume that it is the path to a local file and attempt to find it using `path.resolve`. An `Object` is directly set, so you can do pre-processing if you want without worrying about the string value.\n\n**Object**\n\n```js\nunirest.post('http://mockbin.com/request')\n.header('Accept', 'application/json')\n.field({\n  'parameter': 'value'\n})\n.attach({\n  'file': 'dog.png',\n  'relative file': fs.createReadStream(path.join(__dirname, 'dog.png')),\n  'remote file': unirest.request('http://google.com/doodle.png')\n})\n.end(function (response) {\n  console.log(response.body);\n})\n```\n\n**Arguments**\n\n```js\nunirest.post('http://mockbin.com/request')\n.header('Accept', 'application/json')\n.field('parameter', 'value') // Form field\n.attach('file', 'dog.png') // Attachment\n.attach('remote file', fs.createReadStream(path.join(__dirname, 'dog.png')))  // Same as above.\n.attach('remote file', unirest.request('http://google.com/doodle.png'))\n.end(function (response) {\n  console.log(response.body);\n});\n```\n\n#### Request.field(Object) or (name, value)\n\n`Object` should consist of `name: 'value'` otherwise use `name` and `value`\n\nSee `Request.attach` for usage.\n\n#### Request.stream()\n\nSets `_stream` flag to use `request` streaming instead of direct `form-data` usage.\nThis seemingly appears to only work for node servers, use streaming only if you are a hundred percent sure it will work.\nTread carefully.\n\n## Request.options\n\nThe _options_ `object` is where almost all of the request settings live. Each option method sugars to a field on this object to allow for chaining and ease of use. If\nyou have trouble with an option method and wish to directly access the _options_ object\nyou are free to do so.\n\nThis object is modeled after the `request` libraries options that are passed along through its constructor.\n\n* `url` (`String` | `Object`) - Url, or object parsed from `url.parse()`\n* `qs` (`Object`) - Object consisting of `querystring` values to append to `url` upon request.\n* `method` (`String`) - Default `GET`; HTTP Method.\n* `headers` (`Object`) - Default `{}`; HTTP Headers.\n* `body` (`String` | `Object`) - Entity body for certain requests.\n* `form` (`Object`) - Form data.\n* `auth` (`Object`) - See `Request.auth()` below.\n* `multipart` (`Object`) - _Experimental_; See documentation below.\n* `followRedirect` (`Boolean`) - Default `true`; Follow HTTP `3xx` responses as redirects.\n* `followAllRedirects` (`Boolean`) - Default `false`; Follow **Non**-GET HTTP `3xx` responses as redirects.\n* `maxRedirects` (`Number`) - Default `10`; Maximum number of redirects before aborting.\n* `encoding` (`String`) - Encoding to be used on `setEncoding` of response data.\n* `timeout` (`Number`) - Number of milliseconds to wait before aborting.\n* `proxy` (`String`) - See `Request.proxy()` below.\n* `oauth` (`Object`) - See `Request.oauth()` below.\n* `hawk` (`Object`) - See `Request.hawk()` below\n* `strictSSL` (`Boolean`) - Default `true`; See `Request.strictSSL()` below.\n* `secureProtocol` (`String`) - See `Request.secureProtocol()` below.\n* `jar` (`Boolean` | `Jar`) - See `Request.jar()` below.\n* `aws` (`Object`) - See `Request.aws()` below.\n* `httpSignature` (`Object`) - See `Request.httpSignature()` Below.\n* `localAddress` (`String`) - See `Request.localAddress()` Below.\n* `pool` (`Object`) - See `Request.pool()` Below.\n* `forever` (`Boolean`) - Default `undefined`; See `Request.forever()` Below\n\n## Request Option Methods\n\n#### Request.url(String)\n\nSets `url` location of the current request on `Request.options` to the given `String`\n\n```js\nRequest.url('http://mockbin.com/request');\n```\n\n#### Request.method(String)\n\nSets `method` value on `Request.options` to the given value.\n\n```js\nRequest.method('HEAD');\n```\n\n#### Request.form(Object)\n\nSets `form` object on `Request.options` to the given object.\n\nWhen used `body` is set to the object passed as a `querystring` representation and the `Content-Type` header to `application/x-www-form-urlencoded; charset=utf-8`\n\n```js\nRequest.form({\n  key: 'value'\n});\n```\n\n#### Request.multipart(Array)\n\n**Experimental**\n\nSets `multipart` array containing multipart-form objects on `Request.options` to be sent along with the Request.\n\nEach objects property with the exclusion of `body` is treated as a header value. Each `body` value must be pre-processed if necessary when using this method.\n\n```js\nRequest.multipart([{\n  'content-type': 'application/json',\n  body: JSON.stringify({\n    foo: 'bar'\n  })\n}, {\n  'content-type': 'text/html',\n  body: '<strong>Hello World!</strong>'\n}]);\n```\n\n#### Request.maxRedirects(Number)\n\nSets `maxRedirects`, the number of redirects the current Request will follow, on `Request.options` based on the given value.\n\n```js\nRequest.maxRedirects(6)\n```\n\n#### Request.followRedirect(Boolean)\n\nSets `followRedirect` flag on `Request.options` for whether the current Request should follow HTTP redirects based on the given value.\n\n```js\nRequest.followRedirect(true);\n```\n\n#### Request.timeout(Number)\n\nSets `timeout`, number of milliseconds Request should wait for a response before aborting, on `Request.options` based on the given value.\n\n```js\nRequest.timeout(2000)\n```\n\n#### Request.encoding(String)\n\nSets `encoding`, encoding to be used on setEncoding of response data if set to null, the body is returned as a Buffer, on `Request.options` based on given value.\n\n```js\nRequest.encoding('utf-8')\n```\n\n#### Request.strictSSL(Boolean)\n\nSets `strictSSL` flag to require that SSL certificates be valid on `Request.options` based on given value.\n\n```js\nRequest.strictSSL(true);\n```\n\n#### Request.httpSignature(Object)\n\nSets `httpSignature`\n\n#### Request.proxy(String)\n\nSets `proxy`, HTTP Proxy to be set on `Request.options` based on value.\n\n```js\nRequest.proxy('http://localproxy.com');\n```\n\n#### Request.secureProtocol(String)\n\nSets the secure protocol to use:\n\n```js\nRequest.secureProtocol('SSLv2_method');\n// or\nRequest.secureProtocol('SSLv3_client_method');\n```\n\nSee [openssl.org](https://www.openssl.org/docs/ssl/SSL_CTX_new.html) for all possible values.\n\n#### Request.aws(Object)\n\nSets `aws`, AWS Signing Credentials, on `Request.options`\n\n```js\nRequest.aws({\n  key: 'AWS_S3_KEY',\n  secret: 'AWS_S3_SECRET',\n  bucket: 'BUCKET NAME'\n});\n```\n\n#### Request.oauth(Object)\n\nSets `oauth`, list of oauth credentials, on `Request.options` based on given object.\n\n```js\nvar Request = unirest.get('https://api.twitter.com/oauth/request_token');\n\nRequest.oauth({\n  callback: 'http://mysite.com/callback/',\n  consumer_key: 'CONSUMER_KEY',\n  consumer_secret: 'CONSUMER_SECRET'\n}).end(function (response) {\n  var access_token = response.body;\n\n  Request = unirest.post('https://api.twitter.com/oauth/access_token');\n  Request.oauth({\n    consumer_key: 'CONSUMER_KEY',\n    consumer_secret: 'CONSUMER_SECRET',\n    token: access_token.oauth_token,\n    verifier: token: access_token.oauth_verifier\n  }).end(function (response) {\n    var token = response.body;\n\n    Request = unirest.get('https://api.twitter.com/1/users/show.json');\n    Request.oauth({\n      consumer_key: 'CONSUMER_KEY',\n      consumer_secret: 'CONSUMER_SECRET',\n      token: token.oauth_token,\n      token_secret: token.oauth_token_secret\n    }).query({\n      screen_name: token.screen_name,\n      user_id: token.user_id\n    }).end(function (response) {\n      console.log(response.body);\n    });\n  })\n});\n```\n\n#### Request.hawk(Object)\n\nSets `hawk` object on `Request.options` to the given object.\n\nHawk requires a field `credentials` as seen in their [documentation](https://github.com/hueniverse/hawk#usage-example), and below.\n\n```js\nRequest.hawk({\n  credentials: {\n    key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n    algorithm: 'sha256',\n    user: 'Steve'\n  }\n});\n```\n\n#### Request.localAddress(String)\n\nSets `localAddress`, local interface to bind for network connections, on `Request.options`\n\n```js\nRequest.localAddress('127.0.0.1');\nRequest.localAddress('1.2.3.4');\n```\n\n#### Request.jar(Boolean) or Request.jar(Jar)\n\nSets `jar`, cookie container, on `Request.options`. When set to `true` it stores cookies for future usage.\n\nSee `unirest.jar` for more information on how to use `Jar` argument.\n\n#### Request.pool(Object)\n\nSets `pool` object on `Request.options` to the given object.\n\nA maxSockets property can also be provided on the pool object to set the max number of sockets for all agents created.\n\nNote that if you are sending multiple requests in a loop and creating multiple new pool objects, maxSockets will not work as intended. To work around this, create the pool object with the maxSockets property outside of the loop.\n\n```js\npoolOption = { maxSockets: 100 }\n\nRequest.pool poolOption\n```\n\n#### Request.forever(Boolean)\n\nSets `forever` flag to use `forever-agent` module. When set to `true`,  default http agent will be replaced by `forever-agent`, which keeps socket connections alive between keep-alive requests.\n\n```js\nRequest.forever(true);\n```\n\n#### Request.end(Function callback)\n\nSends HTTP Request and awaits Response finalization. Request compression and Response decompression occurs here.\nUpon HTTP Response post-processing occurs and invokes `callback` with a single argument, the `[Response](#response)` object.\n\n```js\nunirest.get('http://mockbin.com/request').end(function (response) {\n  ...\n});\n```\n\n## Request Aliases\n\n#### Request.set\n\n**Alias** for [`Request.header()`](#requestheaderobject-or-field-value)\n\n#### Request.headers\n\n**Alias** for [`Request.header()`](#requestheaderobject-or-field-value)\n\n#### Request.redirects\n\n**Alias** for [`Request.maxRedirects()`](#requestmaxredirectsnumber)\n\n#### Request.redirect\n\n**Alias** for [`Request.followRedirect()`](#requestfollowredirectboolean)\n\n#### Request.ssl\n\n**Alias** for [`Request.strictSSL()`](#requeststrictsslboolean)\n\n#### Request.ip\n\n**Alias** for [`Request.localAddress()`](#requestlocaladdressstring)\n\n#### Request.complete\n\n**Alias** for [`Request.end()`](#requestlocaladdressstring)\n\n#### Request.as.json\n\n**Alias** for [`Request.end()`](#requestendfunction-callback)\n\n#### Request.as.binary\n\n**Alias** for [`Request.end()`](#requestendfunction-callback)\n\n#### Request.as.string\n\n**Alias** for [`Request.end()`](#requestendfunction-callback)\n\n# Response\n\nUpon ending a request, and recieving a Response the object that is returned contains a number of helpful properties to ease coding pains.\n\n## General\n\n\n- `body` (`Mixed`) - Processed body data\n- `raw_body` (`Mixed`) - Unprocessed body data\n- `headers` (`Object`) - Header details\n- `cookies` (`Object`) - Cookies from `set-cookies`, and `cookie` headers.\n- `httpVersion` (`String`) - Server http version. (e.g. 1.1)\n- `httpVersionMajor` (`Number`) - Major number (e.g. 1)\n- `httpVersionMinor` (`Number`) - Minor number (e.g. 1)\n- `url` (`String`) - Dependant on input, can be empty.\n- `domain` (`String` | `null`) - Dependant on input, can be empty.\n- `method` (`String` | `null`) - Method used, dependant on input.\n- `client` (`Object`) - Client Object. Detailed information regarding the Connection and Byte throughput.\n- `connection` (`Object`) - Client Object. Specific connection object, useful for events such as errors. **Advanced**\n- `socket` (`Object`) Client Object. Socket specific object and information. Most throughput is same across all three client objects.\n- `request` (`Object`) - Initial request object.\n- `setEncoding` (`Function`) - Set encoding type.\n\n## Status Information\n\n- `code` (`Number`) - Status Code, i.e. `200`\n- `status` (`Number`) - Status Code, same as above.\n- `statusType` (`Number`) - Status Code Range Type\n  - `1` - Info\n  - `2` - Ok\n  - `3` - Miscellaneous\n  - `4` - Client Error\n  - `5` - Server Error\n- `info` (`Boolean`) - Status Range Info?\n- `ok` (`Boolean`) - Status Range Ok?\n- `clientError` (`Boolean`) - Status Range Client Error?\n- `serverError` (`Boolean`) - Status Range Server Error?\n- `accepted` (`Boolean`) - Status Code `202`?\n- `noContent` (`Boolean`) - Status Code `204` or `1223`?\n- `badRequest` (`Boolean`) - Status Code `400`?\n- `unauthorized` (`Boolean`) - Status Code `401`?\n- `notAcceptable` (`Boolean`) - Status Code `406`?\n- `notFound` (`Boolean`) - Status Code `404`?\n- `forbidden` (`Boolean`) - Status Code `403`?\n- `error` (`Boolean` | `Object`) - Dependant on status code range.\n\n## response.cookie(name)\n\nSugar method for retrieving a cookie from the `response.cookies` object.\n\n\n```js\nvar CookieJar = unirest.jar();\nCookieJar.add(unirest.cookie('another cookie=23'));\n\nunirest.get('http://google.com').jar(CookieJar).end(function (response) {\n  // Except google trims the value passed :/\n  console.log(response.cookie('another cookie'));\n});\n```\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n\n----\n\nMade with &#9829; from the [Mashape](https://www.mashape.com/) team\n\n[unirest-logo]: http://cl.ly/image/2P373Y090s2O/Image%202015-10-12%20at%209.48.06%20PM.png\n\n\n[license-url]: https://github.com/Mashape/unirest-nodejs/blob/master/LICENSE\n\n[gitter-url]: https://gitter.im/Mashape/unirest-nodejs\n[gitter-image]: https://img.shields.io/badge/Gitter-Join%20Chat-blue.svg?style=flat\n\n[travis-url]: https://travis-ci.org/Mashape/unirest-nodejs\n[travis-image]: https://img.shields.io/travis/Mashape/unirest-nodejs.svg?style=flat\n\n[npm-url]: https://www.npmjs.com/package/unirest\n[npm-license]: https://img.shields.io/npm/l/unirest.svg?style=flat\n[npm-version]: https://badge.fury.io/js/unirest.svg\n[npm-downloads]: https://img.shields.io/npm/dm/unirest.svg?style=flat\n\n[codeclimate-url]: https://codeclimate.com/github/Mashape/unirest-nodejs\n[codeclimate-quality]: https://img.shields.io/codeclimate/github/Mashape/unirest-nodejs.svg?style=flat\n[codeclimate-coverage]: https://img.shields.io/codeclimate/coverage/github/Mashape/unirest-nodejs.svg?style=flat\n\n[david-url]: https://david-dm.org/mashape/unirest-nodejs\n[david-image]: https://img.shields.io/david/mashape/unirest-nodejs.svg?style=flat\n","starsCount":22,"created":"2013-10-19T00:33:19.342Z","modified":"2017-03-06T09:09:44.099Z","lastPublisher":{"name":"nijikokun","email":"nijikokun@gmail.com"},"owners":[{"name":"nijikokun","email":"nijikokun@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"unirest","_nodeVersion":"0.12.11","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/unirest-0.5.1.tgz_1471559413066_0.23288431717082858"},"_npmUser":{"name":"nijikokun","email":"nijikokun@gmail.com"},"_npmVersion":"2.14.9","_rev":"9-62a1cff48e13b61a402037be6ac70642","_shasum":"9df5766187280f245b4e9a75ce1fad313337d6ed","author":{"name":"Mashape","email":"opensource@mashape.com","url":"https://www.mashape.com"},"bugs":{"url":"https://github.com/Mashape/unirest-nodejs/issues"},"directories":{"test":"tests"},"dist-tags":{"latest":"0.5.1"},"dist":{"shasum":"9df5766187280f245b4e9a75ce1fad313337d6ed","tarball":"http://registry.npmjs.org/unirest/-/unirest-0.5.1.tgz"},"maintainers":[{"name":"nijikokun","email":"nijikokun@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-06T09:09:44.099Z","created":"2013-10-19T00:33:19.342Z","0.0.1":"2013-10-19T00:33:20.686Z","0.0.2":"2013-10-19T01:17:53.283Z","0.0.3":"2013-10-22T18:36:20.927Z","0.0.4":"2013-10-22T18:38:58.303Z","0.0.5":"2013-10-25T01:24:39.871Z","0.0.6":"2013-11-15T00:15:47.502Z","0.0.7":"2013-11-15T00:17:22.722Z","0.0.8":"2013-11-15T01:13:06.575Z","0.0.9":"2013-11-15T20:30:11.887Z","0.1.0":"2013-12-10T01:25:57.644Z","0.1.1":"2014-01-13T19:33:19.136Z","0.1.2":"2014-02-01T23:20:46.669Z","0.1.3":"2014-02-01T23:21:30.855Z","0.1.4":"2014-02-18T02:12:38.765Z","0.1.6":"2014-02-25T03:17:13.422Z","0.1.7":"2014-03-01T02:57:44.170Z","0.1.8":"2014-03-07T23:41:54.357Z","0.1.9":"2014-03-18T18:40:56.608Z","0.1.10":"2014-04-03T02:41:04.743Z","0.1.11":"2014-04-03T02:51:57.278Z","0.2.0":"2014-04-03T23:04:48.537Z","0.2.1":"2014-04-21T21:43:37.617Z","0.2.2":"2014-04-21T22:00:24.911Z","0.2.3":"2014-04-24T18:42:34.674Z","0.2.4":"2014-04-24T18:53:24.127Z","0.2.5":"2014-04-24T19:01:04.690Z","0.2.6":"2014-04-24T19:03:35.529Z","0.2.7":"2014-05-13T17:44:21.330Z","0.2.8":"2014-10-22T18:34:51.297Z","0.2.9":"2014-10-22T19:54:20.997Z","0.3.0":"2014-11-10T19:12:03.500Z","0.3.1":"2014-12-09T00:25:43.006Z","0.3.2":"2014-12-09T04:20:11.238Z","0.3.3":"2014-12-12T04:53:59.074Z","0.3.4":"2014-12-12T04:55:57.759Z","0.3.5":"2014-12-18T18:31:42.222Z","0.3.6":"2014-12-18T18:35:09.623Z","0.3.7":"2014-12-18T19:33:46.440Z","0.3.8":"2015-01-15T02:15:16.701Z","0.4.0":"2015-01-16T02:24:52.179Z","0.4.2":"2015-05-26T21:38:44.322Z","0.5.0":"2016-05-09T22:32:03.829Z","0.5.1":"2016-08-18T22:30:15.450Z"},"users":{"knight-of-design":true,"majgis":true,"zeke":true,"sjnnr":true,"smirking-ninja":true,"gztomas":true,"shanewholloway":true,"salvatorelab":true,"abhisekp":true,"jcasey214":true,"garenyondem":true,"dmikam":true,"vishwasc":true,"thomas.miele":true,"kengz":true,"mhaidarh":true,"filipesoccol":true,"spences10":true,"lassevolkmann":true,"frankl83":true,"djk":true,"rocket0191":true}}}