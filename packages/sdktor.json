{"name":"sdktor","description":"HTTP sdk generator","version":"1.5.0","main":"dist/index.js","scripts":{"commit":"git-cz","clean":"rimraf dist coverage","coverage":"cat ./coverage/lcov.info | codecov","test":"babel-node ./node_modules/.bin/babel-istanbul cover ./node_modules/.bin/_mocha -- --compilers js:babel-register","lint":"eslint src test","build":"babel src -d dist","prepublish":"npm run build","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"keywords":["sdk","sdktor","api"],"license":"MIT","dependencies":{"bluebird":"^3.1.1","lodash":"^3.6.0","superagent":"^1.1.0","url-parse":"^1.0.5","url-pattern":"^1.0.1"},"devDependencies":{"babel-cli":"^6.4.0","babel-eslint":"^5.0.0-beta6","babel-istanbul":"^0.6.0","babel-preset-es2015":"^6.3.13","babel-register":"^6.4.3","chai":"^3.3.0","codecov.io":"^0.1.6","commitizen":"^2.5.0","cz-conventional-changelog":"^1.1.5","eslint":"^1.10.3","eslint-config-airbnb":"^3.1.0","eslint-plugin-react":"^3.15.0","istanbul":"^0.3.22","mocha":"^2.3.3","nock":"^5.2.1","rimraf":"^2.5.0","semantic-release":"^4.3.5"},"repository":"https://github.com/maroshii/sdktor","config":{"commitizen":{"path":"node_modules/cz-conventional-changelog"}},"gitHead":"3bb7f21c2147a385df374a75daa955d140c80074","homepage":"https://github.com/maroshii/sdktor#readme","versions":[{"number":"1.0.0","date":"2016-01-17T16:01:34.048Z"},{"number":"1.0.1","date":"2016-01-17T16:14:57.656Z"},{"number":"1.0.2","date":"2016-01-17T16:22:04.939Z"},{"number":"1.0.3","date":"2016-01-17T16:31:19.265Z"},{"number":"1.1.0","date":"2016-01-18T00:21:08.959Z"},{"number":"1.2.0","date":"2016-02-26T00:47:17.570Z"},{"number":"1.3.0","date":"2016-03-13T21:43:38.308Z"},{"number":"1.3.1","date":"2016-03-13T22:46:18.052Z"},{"number":"1.3.2","date":"2016-04-05T11:36:32.345Z"},{"number":"1.4.0","date":"2016-06-03T01:13:16.441Z"},{"number":"1.5.0","date":"2017-04-26T21:27:22.752Z"}],"readme":"# sdktor\n\n[![travis build](https://img.shields.io/travis/maroshii/sdktor.svg?style=flat-square)](https://travis-ci.org/maroshii/sdktor)\n[![codecov coverage](https://img.shields.io/codecov/c/github/maroshii/sdktor.svg?style=flat-square)](https://codecov.io/github/maroshii/sdktor)\n[![codecov coverage](https://img.shields.io/npm/v/sdktor.svg?style=flat-square)](https://www.npmjs.com/package/sdktor)\n\nSimple and declarative sdk generator for the browser and nodejs. Uses [superagent](https://github.com/visionmedia/superagent) internally. Written in ES6 but an ES5 built is also provided. It's compatible with browserify and webpack.\n\n## Installation\n\n```\nnpm install sdktor --save\n```\n\n## Usage\n\nSupports all major HTTP verbs: __GET__ __POST__ __PATH__ __PUT__ __DELETE__.\n\n```javascript\nconst sdktor = require('sdktor');\n\n// Create the SDK with configuration\n// that will be passed on to all requests\nconst sdk = sdktor('https://api.github.com', {\n  Accept: 'application/vnd.github.v3+json',\n  Authorization: 'token <OAUTH-TOKEN>'\n});\n\n// Define endpoints\nconst getPublicGists = sdk.get('/gists/private');\nconst getPrivateGists = sdk.get('/gists/public');\n\nconst now = new Date().toString();\nconst then = ({body}) => console.log(body);\n\ngetPublicGists().then(then);\ngetPublicGists({since: now}).then(then);\ngetPrivateGists().then(then);\ngetPrivateGists({since: now }).then(then);\n\n```\n\nRoutes can be defined recursively with the `at()` method. Regular expressions are supported as well.\n\nAll params that are not route params will be passed as query string for get requests and in the body for all other methods.\n\nPaths are parsed using the [url-pattern](https://github.com/snd/url-pattern) library. Allowing for very flexible route definitions:\n\n```javascript\nconst sdktor = require('sdktor');\nconst sdk = sdktor('https://api.com/');\nconst containersSdk = sdk.at('v:major(.:minor)/containers/');\n\nconst { get, post, path, put, del } = containersSdk.at(':id/');\n\nconst getOne = get('', {'cache-control': 'no-cache'}); \nconst getMeta = get('meta/');\nconst create = containersSdk.post();\nconst update = put();\nconst patch  = patch();\nconst remove = del();\n\n// GET https://api.com/v1/containers/2/?source=newsletter\n// with no-cache header\nget({ major: 1, id: 2, source: 'newsletter' }).then(() => {}); \n\n// GET https://api.com/v1.2/containers/3/meta/?order=ascending&all=1\ngetMeta({ major: 1, id: 3 order: 'ascending', all: 1 }).then(() => {});\n\n// POST https://api.com/v2.0-rc1/containers/4/ {name: 'nginx'}\ncreate({ major: 2, id: 4, minor: '0-rc1', name: 'nginx'}).then(() => {});\n\n// Error! major and id are required  \npath({ name: 'nginx'}).catch(err => {}); \n\n```\n\nNote: Only the pathname is parsed, the protocol is left as is.\n\n## API\n\n##### sdktor(URI,HEADERS,options) => sdk\n\nThis is the base function. All subsequent methods will extend HEADERS and append to URI\n\n##### sdk.at(path,HEADERS,options) => caller\n\nCalls sdktor() resursively. All subsequent calls wil be relative to this path.\n\n##### sdk.get(path,HEADERS) => caller\n\nSets up a get handler extending the path and headers from th current cursor location\n\n##### sdk.post(path,HEADERS) => caller\n\nSets up a post handler extending the path and headers from th current cursor location\n\n##### sdk.patch(path,HEADERS) => caller\n\nSets up a patch handler extending the path and headers from th current cursor location\n\n##### sdk.put(path,HEADERS) => caller\n\nSets up a put handler extending the path and headers from th current cursor location\n\n##### sdk.del(path,HEADERS) => caller\n\nSets up a delete handler extending the path and headers from th current cursor location\n\n##### caller([params] => Promise\n\nMakes the call to the preconfigured path with all headers. If regular expression where used omits the url params from the data that will be sent in the request. DELETE requests omit all body and/or query string data.\n\nNote:  All methods can be called any number of times with no side effects.\n\n### Options\n\n##### options.postRequest\n\n**type**: `Array of (res) => res`\n\nAn ordered array that will run for all children routes after the request succeeds.\n\nEg:\n\n```js\nconst postRequestOK = res => {\n  if(res >= 400) {\n    throw 'Request failed';\n  }\n\n  // We MUST return the response object\n  return res;\n}\n\nconst postRequestAUTH = res => {\n  if(res === 401) {\n    throw 'Aunthentication failed';\n  }\n  \n  // Just an example.\n  // Mutating the body here is highly discourage,\n  resp.body.sdktor = true;\n\n  return res;\n}\n\nconst sdk = sdktor('https://api.github.com', headerOpts, {\n  postRequest: [\n    postRequestOK,\n    postRequestAUTH,\n  ]\n\n  const getPublicGists = sdk.get('/gists/private');\n\n  getPublicGists().then(({ body }) => {\n    // body.sdktor === true\n  })\n\n});\n```\n\n\n## License\n\nThe MIT License (MIT)\nCopyright (c) 2016 Francisco Miranda\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","created":"2016-01-17T16:01:34.048Z","modified":"2017-04-26T21:27:22.752Z","lastPublisher":{"name":"maroshii","email":"franciscomirandaa@gmail.com"},"owners":[{"name":"maroshii","email":"franciscomirandaa@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"sdktor","_nodeVersion":"4.8.2","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/sdktor-1.5.0.tgz_1493242041214_0.6388873558025807"},"_npmUser":{"name":"maroshii","email":"franciscomirandaa@gmail.com"},"_npmVersion":"3.10.10","_rev":"2-efc104f926d74488e49004d4647c1418","_shasum":"3ec4f0545ff6d1cebba4b097c559c51d0b016dff","author":{"name":"Francisco Miranda"},"bugs":{"url":"https://github.com/maroshii/sdktor/issues"},"directories":{},"dist-tags":{"latest":"1.5.0"},"dist":{"shasum":"3ec4f0545ff6d1cebba4b097c559c51d0b016dff","tarball":"https://registry.npmjs.org/sdktor/-/sdktor-1.5.0.tgz"},"maintainers":[{"name":"maroshii","email":"franciscomirandaa@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-26T21:27:22.752Z","created":"2016-01-17T16:01:34.048Z","1.0.0":"2016-01-17T16:01:34.048Z","1.0.1":"2016-01-17T16:14:57.656Z","1.0.2":"2016-01-17T16:22:04.939Z","1.0.3":"2016-01-17T16:31:19.265Z","1.1.0":"2016-01-18T00:21:08.959Z","1.2.0":"2016-02-26T00:47:17.570Z","1.3.0":"2016-03-13T21:43:38.308Z","1.3.1":"2016-03-13T22:46:18.052Z","1.3.2":"2016-04-05T11:36:32.345Z","1.4.0":"2016-06-03T01:13:16.441Z","1.5.0":"2017-04-26T21:27:22.752Z"}}}