{"name":"x-request","version":"0.2.2","description":"Reactive XML Http Request.","main":"./lib/x-request.js","jsnext:main":"./src/x-request.js","files":["src","lib"],"scripts":{"prepublish":"babel --optional runtime src/ --out-dir lib/","test":"mocha --reporter spec --full-trace ./test/index.js"},"repository":"https://github.com/cowboyd/x-request","keywords":["ecmascript","xhr","xml-http-request","jsnext","javascript","reactive","observable"],"license":"MIT","homepage":"https://github.com/cowboyd/x-request#readme","dependencies":{"babel-runtime":"^5.8.25"},"devDependencies":{"babel":"^5.8.23","chai":"^3.4.1","mocha":"^2.3.3","sinon":"^1.17.2","sinon-chai":"^2.8.0"},"gitHead":"36659063343699e53d7c7d4304919c361cd2e275","versions":[{"number":"0.1.0","date":"2015-11-19T20:30:48.041Z"},{"number":"0.2.0","date":"2015-11-24T16:22:40.342Z"},{"number":"0.2.1","date":"2015-12-07T20:06:55.555Z"},{"number":"0.2.2","date":"2016-04-19T02:57:28.884Z"}],"readme":"# x-request\n\n[![npm version](https://badge.fury.io/js/x-request.svg)](https://badge.fury.io/js/x-request)\n[![Build Status](https://travis-ci.org/cowboyd/x-request.js.svg)](https://travis-ci.org/cowboyd/x-request.js)\n\nEasily achieve beautiful, transparent uploads and downloads with an\nimmutable, event-driven XmlHttpRequest\n\n## Why?\n\nThe familiar `XMLHttpRequest` object that is part of the standard browser\ntoolkit provides an imperative / callback based API, and so reacting\nto changes can be a frustrating exercise in \"what callbacks do I\nregister? onloadend? onload?\", \"In what order are they fired?\", \"what\nare the properties of the event\", etc...\n\n`XRequest` is a drop-in replacement for the native `XMLHttpRequest`\nthat side-steps those problems by emitting a fully formed state every\ntime something changes about the request. Each state is both immutable\nand complete, which means that it contains the _full representation_\nof the request at the time it was emitted, leaving you free to consume\nor ignore any property.\n\n## Reactive, Framework Agnostic.\n\n`x-request` derives its power by coupling complete, immutable states\nwith the simplest form of reactivity known to exist: _*the\ncallback*_. Furthermore, it is \"Just JavaScript\" with absolutely\n_zero_ third party dependencies.\n\nIn this way, it can be easily embedded into the framework of your\nchoice, or composed with external protocols such as the [observable-spec][1]\n\n### Bindings\n\n`x-request` currently has bindings for\n\n* Ember - [emberx-xml-http-request][2]\n\nPlease do consider using it and updating the list.\n\n## Usage\n\nTo use, instantiate the request with the desired options, as well as a\nfunction to observe the states.\n\n``` javascript\nimport XRequest from 'x-request';\n\nlet request = new XRequest({\n  //static options are passed along to the\n  withCredentials: true,\n  requestType: \"json\",\n  //invoked every time there is a state change.\n  observe: function(nextState) {\n    state = nextState;\n  }\n});\n\n//we can read the initial state before the callback is\n//invoked.\nlet state = request.state;\n\nstate.readyState //=> 0\nstate.isLoadStarted //=> false\nstate.isLoadEnded //=> start\n\n// use just like a normal xhr.\nrequest.open('PUT', 'http://fileupload.com', true);\nrequest.setRequestHeader('Authorization', `Bearer ${myAuthToken}`);\n\n// get your data just like you would normally.\nlet data = new FormData();\ndata.set('string', 'value1');\ndata.set('blob', getBlobFromSomewhere());\n\n\nrequest.send(data);\n```\n\nAt some point, the request load will start and the `XRequest` will\nemit a new state.\n\n``` javascript\nstate.isLoadStarted //=> true\n```\n\nAs the download progress, it will emit new states every time bytes are\ntransferred across the network; both uploaded bytes and downloaded\nbytes.\n\n``` javascript\nstate.download.percentage //=> 93\nstate.upload.percentage //=> 15\n```\n\nHaving this information as a POJO is like gold for your UI.\n\n## State\n\nAll of the properties of the the XHR, including `readyState`,\n`status`, `response`, `responseText`, etc... are included with each\nstate. The full schema of each state looks roughly like:\n\n``` javascript\n{\n  readyState: 0,\n  requestHeaders: {},\n  responseHeaders: {},\n  responseType: 'json'\n  response: '',\n  responseText: '',\n  responseXML: '',\n  isLoadStarted: false, // alias for download.isLoadStarted\n  isLoadEnded: false,   // alias for download.isLoadEnded\n  isAborted: false,     // alias for download.isAborted\n  isErrored: false,     // alias for download.isErrored\n  isTimedOut: false,    // alias for download.isTimedOut\n  download: {\n    isLoadStarted: false,\n    isLoadEnded: false,\n    isAborted: false,\n    isErrored: false,\n    isLengthComputable: false,\n    total: 0,\n    loaded: 0,\n    ratio: 0,\n    percentage: 0\n  },\n  upload: {\n    isLoadStarted: false,\n    isLoadEnded: false,\n    isAborted: false,\n    isErrored: false,\n    isLengthComputable: false,\n    total: 0,\n    loaded: 0,\n    ratio: 0,\n    percentage: 0\n  }\n}\n```\n\n## Options\n\nThe folowing options are supported in the constructor to `XRequest`:\n\n* *freeze*: By default, the states that are emitted by `XRequest` have been\nfrozen with `Object.freeze()` and so are immutable in the strictest sense of the\nword. Set this option to `false` if you don't want strict immutability.\n* *observe*: a function that will be invoked every time there is a  state\ntransition. It is passed the full immutable with each invocation.\n* *withCredentials:* passed directly to the underlying XHR, this says whether or\nnot to use the current browser cookies. defaults to `false`\n* *timeout*: passed diretly to the underlying `XMLHttpRequest` object, indicates\nthe timeout for the request in milliseconds.\n* *responseType*: passed directly to the underlying `XMLHttpRequest` object. It\nindicates the data type of the `response` property.\n\n[1]: https://github.com/jhusain/observable-spec\n[2]: https://github.com/thefrontside/emberx-xml-http-request\n\n## Development\n\n```\ngit clone https://github.com/cowboyd/x-request.js.git\ncd x-request.js\nnpm test\n```\n\n## LICENSE\n\n(The MIT License)\n\nCopyright (c) 2015 Charles Lowell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nStatus API Training Shop Blog About Pricing\n","created":"2015-11-19T20:30:48.041Z","modified":"2016-04-19T02:57:28.884Z","lastPublisher":{"name":"cowboyd","email":"cowboyd@frontside.io"},"owners":[{"name":"cowboyd","email":"cowboyd@frontside.io"}],"other":{"_attachments":{},"_from":".","_id":"x-request","_nodeVersion":"4.2.3","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/x-request-0.2.2.tgz_1461034647590_0.11809469992294908"},"_npmUser":{"name":"cowboyd","email":"cowboyd@frontside.io"},"_npmVersion":"2.14.7","_rev":"1-7715c9d566c44b9aca4ec42863e22def","_shasum":"ab3fcbd36c0721fef03d4f3239b9e2f720e4f7df","author":{"name":"Charles Lowell","email":"cowboyd@frontside.io"},"bugs":{"url":"https://github.com/cowboyd/x-request/issues"},"directories":{},"dist-tags":{"latest":"0.2.2"},"dist":{"shasum":"ab3fcbd36c0721fef03d4f3239b9e2f720e4f7df","tarball":"http://registry.npmjs.org/x-request/-/x-request-0.2.2.tgz"},"maintainers":[{"name":"cowboyd","email":"cowboyd@frontside.io"}],"readmeFilename":"README.md","time":{"modified":"2016-04-19T02:57:28.884Z","created":"2015-11-19T20:30:48.041Z","0.1.0":"2015-11-19T20:30:48.041Z","0.2.0":"2015-11-24T16:22:40.342Z","0.2.1":"2015-12-07T20:06:55.555Z","0.2.2":"2016-04-19T02:57:28.884Z"}}}