{"name":"json-fetcher","version":"1.0.8","description":"This is a micro-library for making http requests for JSON payloads. It wraps `fetch` with sensible defaults.","main":"index.js","scripts":{"test":"mocha test"},"keywords":[],"license":"ISC","devDependencies":{"babel-core":"^6.9.0","babel-loader":"^6.2.4","babel-preset-es2016":"^6.0.11","chai":"^3.5.0","chai-spies":"^0.7.1","mocha":"^2.5.3","qs":"^6.2.0","webpack":"^1.13.1"},"dependencies":{},"gitHead":"05b9aa9c3f6d03c242b0ec9401bf16b8556d6dfd","versions":[{"number":"1.0.0","date":"2016-06-13T14:09:57.472Z"},{"number":"1.0.1","date":"2016-06-13T14:31:23.416Z"},{"number":"1.0.2","date":"2016-06-13T15:43:31.624Z"},{"number":"1.0.3","date":"2016-06-13T15:56:00.760Z"},{"number":"1.0.4","date":"2016-06-13T19:43:23.678Z"},{"number":"1.0.5","date":"2016-06-13T19:46:12.015Z"},{"number":"1.0.6","date":"2016-06-15T01:28:23.592Z"},{"number":"1.0.7","date":"2016-06-16T20:25:14.392Z"},{"number":"1.0.8","date":"2016-06-20T21:02:42.324Z"}],"readme":"# JSON Fetch\n\nThis is a micro-library for making http requests for JSON payloads. It wraps `fetch` with sensible defaults.\n\nYou can use it in the browser or in node.\n\n```js\nconst JsonFetcher = require('json-fetcher').JsonFetcher;\n\nconst requestManager = new JsonFetcher();\n\n// simple get request\nrequestManager.get('http://yourapi.co/api/stuff')\n  .then(docs => console.log(docs));\n\n// with query string\nrequestManager.get('...', {\n  query: {foo: 'bar'}\n})\n\n// will serialize query string for you and put it in url. handles nested objects great\n\n\n// you can send body payloads too\nrequestManager.post('...', {\n  body: { foo: { bar: 'baz' } }\n});\n```\n\n## Configuration\n\nSometimes you want to make tons of requests with some of the same headers. If you want to do that, just use our config method\n\n```js\nrequestManager.config({\n  headers: {\n    Authorization: 'xxxxxx'\n  }\n});\n```\n\nThe object you pass to config gets merged with our defaults.\n\n## Why?\n\nLots of libraries ship with nice http interfaces. But when you're working outside of a library your options get worse. There's [Axios](https://github.com/mzabriskie/axios), which is awesome, but its quite a bit bigger and build on top of the XMLHttpRequest. This is built on `fetch`. **One important note is that the library is BYOF (bring your own fetch). If you use it in node, you need to have `fetch` defined globally. There are several packages that do this.**\n\n## Why use this instead of just `fetch`\n\nThis sets up reasonable headers for working with JSON, parses your HTTP bodies into JSON, parses the response into JSON, serializes your query string... stuff you don't want to do over and over again.\n\nIt also gives you space to be able to set up defaults and remember them. Let's say you're working with two APIs and need to remember two sets of auth headers. You can just make two instances of `JsonFetcher`.","created":"2016-06-13T14:09:57.472Z","modified":"2016-06-20T21:02:42.324Z","lastPublisher":{"name":"zekenie","email":"hampzan09@gmail.com"},"owners":[{"name":"zekenie","email":"hampzan09@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"json-fetcher","_nodeVersion":"6.0.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/json-fetcher-1.0.8.tgz_1466456561872_0.3961628070101142"},"_npmUser":{"name":"zekenie","email":"hampzan09@gmail.com"},"_npmVersion":"3.8.6","_rev":"1-1efcf658b578f52b709a669b29bb1a33","_shasum":"0acae7892f3b0bbb2b3d4ded0560a258a1355daa","author":"","directories":{},"dist-tags":{"latest":"1.0.8"},"dist":{"shasum":"0acae7892f3b0bbb2b3d4ded0560a258a1355daa","tarball":"http://registry.npmjs.org/json-fetcher/-/json-fetcher-1.0.8.tgz"},"maintainers":[{"name":"zekenie","email":"hampzan09@gmail.com"}],"readmeFilename":"readme.md","time":{"modified":"2016-06-20T21:02:42.324Z","created":"2016-06-13T14:09:57.472Z","1.0.0":"2016-06-13T14:09:57.472Z","1.0.1":"2016-06-13T14:31:23.416Z","1.0.2":"2016-06-13T15:43:31.624Z","1.0.3":"2016-06-13T15:56:00.760Z","1.0.4":"2016-06-13T19:43:23.678Z","1.0.5":"2016-06-13T19:46:12.015Z","1.0.6":"2016-06-15T01:28:23.592Z","1.0.7":"2016-06-16T20:25:14.392Z","1.0.8":"2016-06-20T21:02:42.324Z"}}}