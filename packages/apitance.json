{"name":"apitance","version":"0.1.0-beta.1","description":"Elegant, expressive and versatile acceptance HTTP API tests","preferGlobal":true,"engineStrict":true,"repository":"https://github.com/h2non/apitance","license":"MIT","main":"src/index","bin":{"apitance":"./bin/apitance"},"engines":{"node":">= 0.10.0"},"scripts":{"start":"node bin/apitance","test":"make test"},"keywords":["api","acceptance","http","rest","restful","bdd","cucumber","gherking","http-api","raml","blueprint","spec","bdd"],"dependencies":{"chai":"^2.0.0","chai-http":"^1.0.0","cucumber":"^0.4.4","fw":"^0.1.0","lodash":"^3.2.0","request":"^2.53.0","toml":"^2.1.1","tv4":"^1.1.5","yargs":"^3.2.0"},"devDependencies":{"concat-files":"^0.1.0","mocha":"^2.0.1","mocha-traceur":"^2.0.0","nar":"^0.3.18","nock":"^0.57.0","semver":"^4.2.0","stubby":"^0.2.10","traceur":"*"},"gitHead":"454f24220fb413f1193b4612e800140c3a8fabcb","homepage":"https://github.com/h2non/apitance","versions":[{"number":"0.1.0-beta.0","date":"2014-12-17T09:28:38.405Z"},{"number":"0.1.0-beta.1","date":"2015-02-23T00:04:56.280Z"}],"readme":"# apitance [![Build Status](https://api.travis-ci.org/h2non/apitance.svg?branch=master)][travis] [![Dependency Status](https://gemnasium.com/h2non/apitance.svg)][gemnasium] [![Code Climate](https://codeclimate.com/github/h2non/apitance/badges/gpa.svg)](https://codeclimate.com/github/h2non/apitance)  [![NPM](https://img.shields.io/npm/v/apitance.svg)][npm]\n\n<img src=\"https://developer.atlassian.com/stash/docs/latest/images/home/section-rest.png\" width=\"180\" align=\"right\" />\n\n**Elegant**, **versatile** and **expressive** **behavior-driven** **acceptance tests** for **HTTP APIs** based on Gherkin language and built-on-top of [Cucumber](http://cukes.info)\n\n> **Still work in progress**\n\n## Features\n\n- Generic and reusable steps with expressiveness and multiple alias\n- Full HTTP protocol features support, including authentication, headers, cookies\n- High number of assert/expectation expressions for responses validation\n- Request/responses caching, reuse and chaining\n- Validate body responses against [JSON schema](http://json-schema.org/)\n- API discovering based on RAML\n- Support all the Cucumber.js features, such as hooks, configuration, stages...\n- Built-in support for templating and variables such as environment variables\n- Extended syntax with conditionals, control flow and more...\n- Send body payload data from external files or remote servers\n- Extending support. You can create or overwrite custom steps\n\n## Installation\n\nApitance requires you have installed [node.js](http://nodejs.org) or [io.js](https://iojs.org)\n\n```bash\n[sudo] npm install -g apitance\n```\n\nOr install it as standalone self-contained package:\n```bash\nsudo curl -s -L https://raw.github.com/h2non/apitance/master/bin/install | bash\n```\n\n## Usage\n\n```bash\n$ apitance -r features/user.feature\n```\n\n<!--\n## Steps\n\n#### Defining the request\n\n##### Method definition\n\n```gherkin\nGiven a request with method ([a-z]{3,7})\n```\n\n##### Headers\n```gherkin\nthe request header \"(.*)\" with value \"(.*)\"\n```\n\n```gherkin\nthe context type is \"(.*)\"\n```\n\n```gherkin\nthe accept MIME type is \"(.*)\"\n```\n\n##### Path\n```gherkin\nthe request path is (/path/test)\n```\n\n##### Query params\n```gherkin\ndefine a query string key (search) with value \"Chuck Norris\"\n```\n\n```gherkin\nit have the query string \"(.*)\"\n```\n\n##### Timers control\n\nMaximum timeout\n```gherkin\nrequest timeout is (\\d+) seconds\n```\n\nWait before send the request\n```gherkin\nAnd I wait (\\d+) seconds\n```\n\n##### Requests pool\n\n```gherkin\nAnd create a pool of 100 clients using a stack of 20 concurrent\n```\n```gherkin\nAnd wait 100 miliseconds on each pool\n```\n\n#### Response verification\n\n```\nThen status code should be (\\d+)\n```\n\n```\nThen status code is (\\d+)\n```\n-->\n\n## Command-line interface\n\nGetting help\n```bash\n$ apitance --help\n```\n\n```bash\n$ apitance -r path/to/steps path/to/feature\n```\n\n## Contributing\n\nWanna help?\n\n`apitance` is completely written in JavaScript Harmony (ECMAScript 6)\n\nYou must add new test cases for any new feature or refactor you do,\nalways following the same design/code patterns that already exist\n\n### Development\n\nOnly [node.js](http://nodejs.org) is required for development\n\nClone/fork this repository\n```\n$ git clone https://github.com/h2non/apitance.git && cd apitance\n```\n\nInstall dependencies\n```\n$ npm install\n```\n\nCompile code\n```\n$ make compile\n```\n\nRun tests\n```\n$ make test\n```\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT) Â© Tomas Aparicio\n\n[travis]: http://travis-ci.org/h2non/apitance\n[gemnasium]: https://gemnasium.com/h2non/apitance\n[npm]: http://npmjs.org/package/apitance\n[glob]: https://github.com/isaacs/node-glob\n","created":"2014-12-17T09:28:38.405Z","modified":"2015-02-23T00:04:56.280Z","lastPublisher":{"name":"h2non","email":"tomas@aparicio.me"},"owners":[{"name":"h2non","email":"tomas@aparicio.me"}],"other":{"_attachments":{},"_from":".","_id":"apitance","_nodeVersion":"0.12.0","_npmUser":{"name":"h2non","email":"tomas@aparicio.me"},"_npmVersion":"2.5.1","_rev":"1-ce28a8a9fea2d5c42f2e5eeaf2c80826","_shasum":"2512c90acfbe1ccf29b20f0623e33f4663d1a134","author":{"name":"Tomas Aparicio"},"bugs":{"url":"https://github.com/h2non/apitance/issues"},"directories":{"lib":"./src"},"dist-tags":{"latest":"0.1.0-beta.1"},"dist":{"shasum":"2512c90acfbe1ccf29b20f0623e33f4663d1a134","tarball":"http://registry.npmjs.org/apitance/-/apitance-0.1.0-beta.1.tgz"},"maintainers":[{"name":"h2non","email":"tomas@aparicio.me"}],"readmeFilename":"README.md","time":{"modified":"2015-02-23T00:04:56.280Z","created":"2014-12-17T09:28:38.405Z","0.1.0-beta.0":"2014-12-17T09:28:38.405Z","0.1.0-beta.1":"2015-02-23T00:04:56.280Z"}}}