{"name":"httpism","version":"3.4.1","description":"HTTP client with middleware and good defaults","main":"index.js","dependencies":{"debug":"2.6.3","end-of-stream":"1.4.0","fs-promise":"2.0.1","global":"4.3.1","https-proxy-agent":"1.0.0","mime-types":"2.1.14","proxy-from-env":"1.0.0","random-string":"0.1.2","tough-cookie":"2.3.2","underscore":"1.8.3"},"devDependencies":{"basic-auth-connect":"1.0.0","body-parser":"1.17.1","browserify":"14.1.0","chai":"3.5.0","chai-as-promised":"6.0.0","cookie-parser":"1.4.3","cors":"2.8.1","electron":"^1.6.8","es6-promise":"4.1.0","eslint":"3.19.0","eslint-config-standard":"10.2.0","eslint-plugin-es5":"1.0.1","eslint-plugin-import":"2.2.0","eslint-plugin-node":"4.2.2","eslint-plugin-promise":"3.5.0","eslint-plugin-standard":"3.0.1","express":"4.15.2","fake-xml-http-request":"1.4.0","form-data":"2.1.2","http-proxy":"1.16.2","karma":"1.5.0","karma-browserify":"5.1.1","karma-browserstack-launcher":"1.2.0","karma-chrome-launcher":"2.0.0","karma-electron-launcher":"^0.2.0","karma-mocha":"1.3.0","karma-mocha-reporter":"2.2.3","karma-server-side":"1.7.0","mocha":"3.2.0","multiparty":"4.1.3","qs":"6.4.0","server-destroy":"1.0.1","standard":"10.0.1","uglify-js":"2.8.21","url-template":"2.0.8","watchify":"3.9.0","webpack":"2.3.3"},"scripts":{"test":"npm run test-mocha && npm run test-browser -- --single-run --browsers Electron && eslint .","test-browser":"karma start","test-mocha":"mocha","size":"webpack browser.js _httpism.js && uglifyjs --compress warnings=false --mangle -- _httpism.js > _httpism.min.js && gzip < _httpism.min.js > _httpism.min.js.gz && ls -lh _httpism.*"},"repository":"https://github.com/featurist/httpism","keywords":["http","rest"],"license":"BSD","browser":"browser.js","gitHead":"9cd71c149b52601ce81bb4be96635e221a0a5912","homepage":"https://github.com/featurist/httpism#readme","versions":[{"number":"0.0.1","date":"2012-10-18T12:02:56.367Z"},{"number":"0.0.2","date":"2012-10-18T21:18:07.635Z"},{"number":"0.0.3","date":"2013-02-10T21:10:31.957Z"},{"number":"0.0.4","date":"2013-04-02T09:56:34.214Z"},{"number":"0.1.0","date":"2014-07-01T22:43:04.437Z"},{"number":"0.1.1","date":"2014-07-02T08:50:07.601Z"},{"number":"0.1.2","date":"2014-07-02T10:18:00.354Z"},{"number":"0.1.3","date":"2014-07-14T20:15:46.768Z"},{"number":"0.2.0","date":"2014-07-17T07:59:17.012Z"},{"number":"0.2.1","date":"2014-07-17T08:11:17.526Z"},{"number":"0.2.2","date":"2014-07-17T08:14:57.897Z"},{"number":"0.2.4","date":"2014-08-04T19:22:51.448Z"},{"number":"1.0.0","date":"2015-05-26T16:31:33.895Z"},{"number":"1.1.0","date":"2015-08-11T07:35:16.401Z"},{"number":"1.2.0","date":"2015-08-12T20:42:50.618Z"},{"number":"1.3.0","date":"2015-08-13T14:23:50.638Z"},{"number":"1.4.0","date":"2015-08-16T14:31:08.029Z"},{"number":"1.4.1","date":"2015-08-16T14:33:54.316Z"},{"number":"1.5.0","date":"2015-08-31T08:20:58.604Z"},{"number":"1.6.0","date":"2015-09-04T15:05:37.707Z"},{"number":"1.7.0","date":"2015-09-09T11:54:27.022Z"},{"number":"1.7.1","date":"2015-09-09T14:13:53.322Z"},{"number":"1.8.0","date":"2015-10-15T08:52:53.995Z"},{"number":"1.8.1","date":"2015-10-15T09:01:16.694Z"},{"number":"1.9.0","date":"2016-02-10T16:28:25.252Z"},{"number":"1.10.0","date":"2016-03-03T10:00:21.829Z"},{"number":"1.11.0","date":"2016-03-03T17:00:11.964Z"},{"number":"1.12.0","date":"2016-03-22T16:35:42.467Z"},{"number":"1.13.0","date":"2016-03-23T15:54:33.306Z"},{"number":"1.14.0","date":"2016-04-06T15:33:06.082Z"},{"number":"2.0.0","date":"2016-05-16T13:49:25.620Z"},{"number":"2.1.0","date":"2016-08-01T13:17:44.019Z"},{"number":"2.2.0","date":"2016-08-10T14:45:50.206Z"},{"number":"2.2.1","date":"2016-08-10T16:09:07.786Z"},{"number":"2.3.0","date":"2016-08-17T13:14:27.760Z"},{"number":"2.4.0","date":"2016-08-31T12:41:40.112Z"},{"number":"2.4.1","date":"2016-08-31T13:00:16.898Z"},{"number":"2.4.2","date":"2016-09-28T15:22:24.820Z"},{"number":"2.5.0","date":"2016-11-22T12:59:13.781Z"},{"number":"2.6.0","date":"2016-11-24T12:41:18.492Z"},{"number":"2.6.1","date":"2016-11-24T12:58:08.076Z"},{"number":"2.6.2","date":"2016-12-05T11:14:18.239Z"},{"number":"2.7.0","date":"2017-01-03T14:52:11.025Z"},{"number":"3.0.0","date":"2017-05-05T08:28:26.742Z"},{"number":"3.1.0","date":"2017-05-09T08:22:23.409Z"},{"number":"3.2.0","date":"2017-05-17T12:32:49.503Z"},{"number":"3.3.0","date":"2017-05-31T10:34:37.344Z"},{"number":"3.4.0","date":"2017-06-23T09:57:49.694Z"},{"number":"3.4.1","date":"2017-06-23T12:12:15.478Z"}],"readme":"# httpism [![npm version](https://img.shields.io/npm/v/httpism.svg)](https://www.npmjs.com/package/httpism) [![npm](https://img.shields.io/npm/dm/httpism.svg)](https://www.npmjs.com/package/httpism) [![Build Status](https://travis-ci.org/featurist/httpism.svg?branch=master)](https://travis-ci.org/featurist/httpism)\n\nhttpism is a node and browser HTTP client that does a few things differently:\n\n* **middleware**: customise a HTTP client for your API by sticking together middleware, for example, for content handlers or authentication schemes.\n* **useful by default**: sends and receives JSON, throws exceptions on 400-500s, follows redirects. Of course, you can disable this stuff when it gets in your way, or hit raw HTTP and streams when you need to get clever.\n* **promises**: no messing about with callbacks.\n* for **browser** and **server** alike.\n\nIn addition, httpism supports:\n\n* URL templates\n* Cookies\n* HTTP proxies for HTTP and HTTPS traffic, with proxy authentication\n* Basic authentication\n* JSON\n* URL encoded forms\n* streams\n* CORS\n* JSONP\n\n## Upgrading from 2.x\n\nHttpism 3.x returns the body of the response by default, not the response. This is what you want 95% of the time, however, if you're upgrading from 2.x, or you want the response with headers, status code, etc, then you can do this:\n\n```js\nvar httpism = require('httpism').client({response: true})\n```\n\n## NPM: [httpism](https://www.npmjs.org/package/httpism)\n\n```sh\nnpm install httpism\n```\n\nThen\n\n```js\nvar httpism = require('httpism');\n```\n\nCompatible with browserify and webpack too!\n\n## Browser Size\n\n* httpism.js: 23K\n* httpism.min.js: 10K\n* httpism.min.js.gz: 3.7K\n\n## GET JSON\n\n```js\nhttpism.get('http://example.com/').then(function (responseBody) {\n  console.log('json', responseBody);\n}, function (error) {\n  console.log('uh oh', error);\n});\n```\n\n## POST JSON\n\n```js\nhttpism.post('http://example.com/', {name: 'Betty Boop'}).then(function (responseBody) {\n  console.log('json', responseBody);\n}, function (error) {\n  console.log('uh oh', error);\n});\n```\n\n## POST www-form-urlencoded\n\n```js\nhttpism.post('http://example.com/', { name: \"Betty Boop\" }, { form: true }).then(function (responseBody) {\n  console.log('json', responseBody);\n}, function (error) {\n  console.log('uh oh', error);\n});\n```\n\n## POST streams and files\n\nPass a stream as the second argument, it will try to guess the `Content-Type` from the filename if possible, but you can override it if you know better.\n\n```js\nvar stream = fs.createReadStream('afile.txt');\n\nhttpism.post('http://example.com/', stream).then(function (responseBody) {\n  console.log('json', responseBody);\n}, function (error) {\n  console.log('uh oh', error);\n});\n```\n\n## POST multipart forms\n\nHttpism works with [form-data](https://github.com/form-data/form-data), all you need to do is pass a `FormData` instance as the body:\n\n```js\nvar form = new FormData();\n\nform.append('name', 'Betty Boop');\nform.append('address', 'New York');\nform.append('photo', fs.createReadStream('betty.jpg'));\n\nhttpism.post('http://example.com/', form).then(function (responseBody) {\n  console.log('json', responseBody);\n}, function (error) {\n  console.log('uh oh', error);\n});\n```\n\n## Create an API client\n\nSpecify a base URL:\n\n```js\nvar example = httpism.client('http://example.com/');\n\n// GET http://example.com/a\nexample.get('a').then(function (responseBody) {\n  console.log(responseBody);\n});\n```\n\nSpecify some options:\n\n```js\nvar loggingHttpism = httpism.client({exceptions: false});\n\nloggingHttpism.get('http://example.com/').then(function (responseBody) {\n  console.log(responseBody);\n});\n```\n\nAdd some middleware:\n\n```js\nvar authHttpism = httpism.client(function (request, next) {\n  request.url += '?apikey=myapikey';\n  return next();\n});\n\n// GET https://secretapi.com/?apikey=myapikey\nauthHttpism.get('https://secretapi.com/').then(function (responseBody) {\n  console.log(responseBody);\n});\n```\n\nSee more about [clients](#clients).\n\n## In the Browser\n\nThe browser version has a few differences from the node version:\n\n* Relative URLs are relative to the current browser location.\n* No support for streams.\n* Redirects aren't optional, browsers _always_ follow redirects.\n* Logging is removed, since most (if not all?) browsers now have a network debug tab.\n\nHowever, everything else works as described here.\n\n## Debug\n\nhttpism uses [debug](https://github.com/visionmedia/debug) so you can enable logging just by setting the `DEBUG` environment variable to `httpism:*`:\n\n```bash\nDEBUG=httpism* node app.js\n```\n\n* `httpism` simple request => response, i.e. `GET http://www.example.com/api => 200 (40ms)`\n* `httpism:request` the request\n* `httpism:response` the response\n\nMore information in debug's README.\n\n## Proxy Environment Variables\n\nHttpism obeys the following environments variables:\n\n  * `http_proxy` `HTTP_PROXY` - for HTTP requests\n  * `https_proxy` `HTTPS_PROXY` - for HTTPS requests\n  * `all_proxy` `ALL_PROXY` - for HTTP or HTTPS requests\n  * `no_proxy` `NO_PROXY` - an comma separated list of hostnames (and optional ports) to not proxy\n\nFor more details please see [proxy-from-env](https://github.com/Rob--W/proxy-from-env).\n\n## Requests\n\n### GET, HEAD, DELETE\n\n```js\nhttpism.method(url, [options])\n```\n\n* `url` a string URL, this is a URL template if the `params` option is used, see [params](#params).\n* `options` request options, see [options](#options).\n\nreturns a promise\n\n### POST, PUT, PATCH, OPTIONS\n\n```js\nhttpism.method(url, body, [options])\n```\n\n* `url` a string URL, this is a URL template if the `params` option is used, see [params](#params).\n* `body` the request body to send\n    * by default a JS object is encoded as JSON and sent as `application/json`\n    * a JS object with options `{form: true}` is url-encoded and sent as `application/x-www-form-urlencoded`\n    * a stream. It will try to guess the `Content-Type` from a file stream, but if not, pass `{headers: {'content-type': ...}}` as options.\n* `options` request options, see [options](#options).\n\n### Params\n\nHttpism will render a URL template if the `params` option is used, the params are interpolated into the URL template, any params left over will form the query string.\n\n```js\nhttpism.get('http://example.com/users/:user/posts', {\n  params: {\n    user: 'bob',\n    page: 3,\n    search: 'lakes'\n  }\n})\n```\n\nWill become\n\n```\nGET http://example.com/users/bob/posts?page=3&search=lakes\n```\n\nA template contains two forms of parameter, varying on the way special characters are encoded for URLs.\n\n* `:param` - uses `encodeURIComponent`, and is useful for most applications\n* `:param*` - uses `encodeURI` and can be used to interpolate paths, such as `a/path/to/something` without encoding the slash characters.\n\nAny remaining parameters will be encoded in the query string, you can override how the query string is encoded using the `qs` option.\n\nThe template interpolation itself can be overridden with the `expandUrl` option, and is used as follows:\n\n```js\nvar url = expandUrl(template, params, querystring)\n```\n\n* `template` - the URL template, passed in as the `url` argument to `httpism.get`, etc.\n* `params` - the object containing the parameters to be interpolated.\n* `querystring` - the `qs` option, can be used to encode the query string parameters, e.g. `querystring.stringify(params)`.\n\nFor example, you could use RFC 6570 templates like this\n\n```js\nvar urlTemplate = require('url-template')\n\nfunction expandUrl(url, params) {\n  var template = urlTemplate.parse(url)\n  return template.expand(params)\n}\n\nhttpism.get('http://example.com/users/{user}/posts{?page,search}', {\n  params: {\n    user: 'bob',\n    page: 3,\n    search: 'lakes'\n  },\n  expandUrl: expandUrl\n})\n```\n\nOr indeed create a new client to use this by default:\n\n```js\nvar httpism = require('httpsim').client({\n  expandUrl: expandUrl\n})\n\nhttpism.get('http://example.com/users/{user}/posts{?page,search}')\n```\n\n### Request\n\n```js\nhttpism.request(method, url, [body], [options])\n```\n\n* `url` a string url, full or relative to the response, or '' to request the response again\n* `body` the request body to send\n    * by default a JS object is encoded as JSON and sent as `application/json`\n    * a JS object with options `{form: true}` is url-encoded and sent as `application/x-www-form-urlencoded`\n    * a stream. It will try to guess the `Content-Type` from a file stream, but if not, pass `{headers: {'content-type': ...}}` as options.\n* `options` request options, see [options](#options).\n\n\n## Responses\n\nResponses bodies are returned by all methods by default. To access other details about responses, pass `{ response: true }` in the request options to receive a response object that contains:\n\n* `statusCode` the status code as an integer, such as `200`, or `404`.\n* `statusText` the status text, such as `OK` or `Not Found`.\n* `url` the full URL of the response. In the browser, this will be root-relative if the request is for the same domain as the current page. This can be different to the `request.url` if there was a redirect.\n* `headers` the headers of the response\n* `body` the body of the response. Depending on the `Content-Type` header:\n    * `application/json` a object\n    * `application/x-www-form-urlencoded` a object\n    * `text/*` or `application/javascript` a string\n    * on the server, anything else is returned as a Node stream, **be careful to close it!**. In the browser, anything else is returned as a string.\n\n## Cookies\n\nCookies on the server are not handled by default, but you can enable them by using `httpism.client` passing the `{cookies: true}` option:\n\n```js\nvar client = httpism.client({cookies: true});\n\nvar creds = {\n  username: 'jerome',\n  password: 'password123'\n}\n\nclient.post('http://example.com/login', creds, {form: true}).then(function () {\n  return client.get('/profile').then(function (profile) {\n    console.log(profile)\n  })\n})\n```\n\nDifferent httpism clients will use different cookie jars. Cookies are always on in the browser, using native browser cookies.\n\n## Cancel a request\n\nRequests can be cancelled by calling `.abort()` on the promise returned from any request method:\n\n```js\nvar promise = httpism.get('/something');\npromise.abort();\n```\n\n## Options\n\n* `response`: default `false`, if true, returns the whole response, including URL, headers, status code and the body, otherwise return just the body.\n* `exceptions`: default `true`, throw exceptions on reception of 400-500 status codes. Set to `false` to simply return the response. If set to a function, the function is passed the response, and returns true to throw the response as an exception, or false to treat it as a normal response.\n* `redirect`: default `true`, follow redirects for 300, 301, 302, 303 and 307 status codes with `Location` response headers. Set to `false` to simply return the redirect response.\n* `headers`: default `undefined`, can be set to an object that is merged with middleware headers.\n* `basicAuth`: use Basic Authentication, pass an object `{ username: 'bob', password: \"bob's secret\" }`.\n* `cookies`: default `false`, use cookies.\n* `querystring`: default `undefined`, can be set to an object containing fields that are URL-encoded and merged with the querystring already on the URL, if any. This is parsed and stringified using `options.qs.parse` and `options.qs.stringify` if provided, or using a very lite internal query string parser.\n* `qs`: optional override for parsing and stringifying querystrings, you can pass node's `querystring` or `qs`. Any object that contains the methods `parse` and `stringify` can be used. If not provided, httpism will use an internal (and very small) query string parser/stringifier.\n* `form`: when `true`, treats the incoming JSON data as a form and encodes it as `application/x-www-form-urlencoded`.\n* `responseBody`: can be used to force the parsing of the response, ignoring the `Content-Type`, it can be a string of one of the following:\n    * `'stream'`: always downloads the response as a stream\n    * `'json'`: always parses the response as a JSON object\n    * `'text'`: always parses the response as text\n    * `'form'`: always parses the response as a URL-encoded form\n    * `undefined`: parse response based on `Content-Type`, the default.\n* `proxy`: a proxy URL, if present all requests will be run through the proxy. This works if either of the environment variables `http_proxy` or `HTTP_PROXY` are set too.\n* `http`: default `undefined`, object containing options that are passed to [Node.js http.request()](http://nodejs.org/api/http.html#http_http_request_options_callback).\n    Many of these options are ignored by default, so you should set `agent: undefined` to force a new agent to honour the options.\n* `https`: default `undefined`, object containing options that are passed to [Node.js https.request()](http://nodejs.org/api/https.html#https_https_request_options_callback).\n    Many of these options are ignored by default, so you should set `agent: undefined` to force a new agent to honour the options.\n* `jsonp`: to perform a JSONP request, set this to the name of the parameter to contain the callback function, often this is simply `callback`.\n* `xhr`: can be used to override `window.XMLHttpRequest` used to make the request, useful for mocking out requests during testing. It is expected to be used as a constructor, as in `new options.xhr()`.\n* `jsonReviver`: a [reviver function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) that is passed to `JSON.parse(string, [reviver])` to override how JSON response bodies are decoded.\n* `timeout`: the request timeout in milliseconds.\n* `output`: should be a stream, the response body will be written to the stream and httpism will wait until it's fully written.\n\n## Clients\n\nClients give you a way to build or customise a HTTP client for the purpose of accessing a particular web API. Web APIs will often have special authorization, headers, or URL conventions that are common across all calls, and you only want to have to specify those things once.\n\nYou can create API clients, either from `httpism`, giving you a fairly complete HTTP client, or from `httpism.raw` giving you no frills streaming HTTP client to do what you will with.\n\n```js\nvar client = httpism.client([url], [options], [middleware]);\nvar client = httpism.raw.client([url], [options], [middleware]);\nvar anotherClient = client.client([url], [options], [middleware]);\n```\n\n* `url` a URL string, which could be relative to the response, or absolute.\n* `options` options object to be used for all calls with this client. If `client` is called on a response, the options are merged with that responses client.\n* `middleware` a middleware function or array of middleware functions. Requests in middleware are processed from the beginning of the array to the end, and responses from the end of the array to the beginning. See [middleware](#middleware). Middleware specified on the new client is _prepended_ to the middleware currently in the client.\n\n* `httpism` is the basic client, with all the goodies described above.\n* `httpism.raw` is a raw client that has only the base transport, `http` or `https` on node, and `xhr` in the browser.\n\n## Middleware\n\nMiddleware commonly works like this:\n\n```js\nfunction middleware(request, next, client) {\n  // change request\n  request.url = ...;\n  return next().then(function (response) {\n    // change response\n    response.body = ...;\n    return response;\n  });\n}\n```\n\nMiddleware are ordered, and each one can have a name, and a preference to be placed before or after other named middleware. You can place the middleware `before` any of the middleware in an array, or `after` any of the middleware in an array.\n\n```js\nmiddleware.httpismMiddleware = {\n  name: 'name',\n  before: ['http', 'debugLog'],\n  after: 'redirect'\n}\n```\n\nYou can insert the middleware by passing it to `httpism.client()`, or by calling `client.use()`:\n\n```js\n// create a new client with middleware\nvar client = httpism.client(middleware);\n\n// add middleware to an existing client\nclient.use(middleware);\n\n// add middleware globally and to all new clients\nhttpism.use(middleware);\n```\n\n* `request` is an object with the following properties:\n    * `url` the full URL of the request, e.g. `http://example.com/path?query=value`\n    * `method` the method of the request, e.g. `GET` or `POST`\n    * `headers` the headers of the request as an object. All headers are lower-cased as per Node.js conventions. E.g. `{ 'content-type': 'application/json' }`\n    * `options` the [options](#options) as passed through from the request, either from the **client** or the individual request. E.g. `{exceptions: true}`.\n    * `body` the body of the request. Will be `undefined` for `get()` etc, otherwise will be the object specified as the second argument to methods like `post()`.\n* `next([request])` is a function that passes control onto the next middleware, optionally taking a request parameter. If the request parameter is not given it uses the request passed in to the middleware. It returns a promise of the [response](#responses).\n* `client` is a **httpism client** object, for which you can make further requests inside the middleware with `client.request(request)`. For example, the redirect middleware uses this.\n* `middleware.middleware` is the name of the middleware, which can be referred to by other middlewares when adding themselves with `before` or `after`.\n* `middleware.before` ensure that the middleware is inserted just before the named middleware.\n* `middleware.after` ensure that the middleware is inserted just after the named middleware.\n\nMiddleware is stored in an array `client.middleware`, you're free to manipulate this directly.\n\nSee the [middleware](middleware) directory for a full list of existing middleware.\n\n# License\n\nBSD\n","starsCount":1,"created":"2012-10-18T12:02:54.788Z","modified":"2017-06-23T12:12:15.478Z","lastPublisher":{"name":"refractalize","email":"timmacfarlane@gmail.com"},"owners":[{"name":"dereke","email":"derek@spathi.com"},{"name":"joshski","email":"josh@featurist.co.uk"},{"name":"refractalize","email":"timmacfarlane@gmail.com"}],"other":{"_attachments":{},"_id":"httpism","_nodeVersion":"8.1.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/httpism-3.4.1.tgz_1498219934242_0.5962772094644606"},"_npmUser":{"name":"refractalize","email":"timmacfarlane@gmail.com"},"_npmVersion":"5.0.3","_rev":"13-75cae5c3644deeac181a732b3ce392f7","author":{"name":"Tim Macfarlane","email":"timmacfarlane@gmail.com","url":"http://blog.refractalize.org/"},"bugs":{"url":"https://github.com/featurist/httpism/issues"},"contributors":[{"name":"Josh Chisholm","email":"joshchisholm@gmail.com","url":"http://featurist.co.uk/"}],"directories":{"test":"test"},"dist-tags":{"latest":"3.4.1"},"dist":{"integrity":"sha512-zfUve3qhJh8os9GweuFCoXULQy2kQeHdrnldt0dGZWXBJreLwHgSNsXNoHyrbj51mzGucAmZWFlXgxPunFM3ZQ==","shasum":"fcd790d67e9dc0ab2e98c868d07ea99adaba0e88","tarball":"https://registry.npmjs.org/httpism/-/httpism-3.4.1.tgz"},"maintainers":[{"name":"dereke","email":"derek@spathi.com"},{"name":"joshski","email":"josh@featurist.co.uk"},{"name":"refractalize","email":"timmacfarlane@gmail.com"}],"readmeFilename":"readme.md","time":{"modified":"2017-06-23T12:12:15.478Z","created":"2012-10-18T12:02:54.788Z","0.0.1":"2012-10-18T12:02:56.367Z","0.0.2":"2012-10-18T21:18:07.635Z","0.0.3":"2013-02-10T21:10:31.957Z","0.0.4":"2013-04-02T09:56:34.214Z","0.1.0":"2014-07-01T22:43:04.437Z","0.1.1":"2014-07-02T08:50:07.601Z","0.1.2":"2014-07-02T10:18:00.354Z","0.1.3":"2014-07-14T20:15:46.768Z","0.2.0":"2014-07-17T07:59:17.012Z","0.2.1":"2014-07-17T08:11:17.526Z","0.2.2":"2014-07-17T08:14:57.897Z","0.2.4":"2014-08-04T19:22:51.448Z","1.0.0":"2015-05-26T16:31:33.895Z","1.1.0":"2015-08-11T07:35:16.401Z","1.2.0":"2015-08-12T20:42:50.618Z","1.3.0":"2015-08-13T14:23:50.638Z","1.4.0":"2015-08-16T14:31:08.029Z","1.4.1":"2015-08-16T14:33:54.316Z","1.5.0":"2015-08-31T08:20:58.604Z","1.6.0":"2015-09-04T15:05:37.707Z","1.7.0":"2015-09-09T11:54:27.022Z","1.7.1":"2015-09-09T14:13:53.322Z","1.8.0":"2015-10-15T08:52:53.995Z","1.8.1":"2015-10-15T09:01:16.694Z","1.9.0":"2016-02-10T16:28:25.252Z","1.10.0":"2016-03-03T10:00:21.829Z","1.11.0":"2016-03-03T17:00:11.964Z","1.12.0":"2016-03-22T16:35:42.467Z","1.13.0":"2016-03-23T15:54:33.306Z","1.14.0":"2016-04-06T15:33:06.082Z","2.0.0":"2016-05-16T13:49:25.620Z","2.1.0":"2016-08-01T13:17:44.019Z","2.2.0":"2016-08-10T14:45:50.206Z","2.2.1":"2016-08-10T16:09:07.786Z","2.3.0":"2016-08-17T13:14:27.760Z","2.4.0":"2016-08-31T12:41:40.112Z","2.4.1":"2016-08-31T13:00:16.898Z","2.4.2":"2016-09-28T15:22:24.820Z","2.5.0":"2016-11-22T12:59:13.781Z","2.6.0":"2016-11-24T12:41:18.492Z","2.6.1":"2016-11-24T12:58:08.076Z","2.6.2":"2016-12-05T11:14:18.239Z","2.7.0":"2017-01-03T14:52:11.025Z","3.0.0":"2017-05-05T08:28:26.742Z","3.1.0":"2017-05-09T08:22:23.409Z","3.2.0":"2017-05-17T12:32:49.503Z","3.3.0":"2017-05-31T10:34:37.344Z","3.4.0":"2017-06-23T09:57:49.694Z","3.4.1":"2017-06-23T12:12:15.478Z"},"users":{"knksmith57":true}}}