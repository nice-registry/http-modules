{"dependencies":{"art-build-configurator":"*","art-class-system":"*","art-config":"*","art-standard-lib":"*","art-testbench":"*","bluebird":"^3.5.0","caffeine-script":"*","caffeine-script-runtime":"*","case-sensitive-paths-webpack-plugin":"^2.1.1","chai":"^4.0.1","coffee-loader":"^0.7.3","coffee-script":"^1.12.6","colors":"^1.1.2","commander":"^2.9.0","css-loader":"^0.28.4","dateformat":"^2.0.0","detect-node":"^2.0.3","fs-extra":"^3.0.1","glob":"^7.1.2","glob-promise":"^3.1.0","json-loader":"^0.5.4","mocha":"^3.4.2","neptune-namespaces":"*","script-loader":"^0.7.0","style-loader":"^0.18.1","webpack":"^2.6.1","webpack-dev-server":"^2.4.5","webpack-merge":"^4.1.0","webpack-node-externals":"^1.6.0"},"description":"Simplified system of statuses for HTTP and any other network protocol","license":"ISC","name":"art-communication-status","scripts":{"build":"webpack --progress","start":"webpack-dev-server --hot --inline --progress","test":"nn -s;mocha -u tdd --compilers coffee:coffee-script/register","testInBrowser":"webpack-dev-server --progress"},"version":"1.2.1","gitHead":"50a631cdd8c0ee2f320b7944ffd96a462baa975c","versions":[{"number":"1.0.0","date":"2017-03-20T17:29:59.554Z"},{"number":"1.2.1","date":"2017-06-19T19:13:53.897Z"}],"readme":"# art-communication-status\nSimplified system of statuses for HTTP and any other network protocol\n\nA core set of status-codes that code can reason about easily.\n\n### Goal\n\n> Minimal set of codes so Clients can reason about network requests in a consistant way.\n\n### Strategy\n\nHave a small, simple set of status codes for our programs to reason about,\nand, if necessary, allow the communication channel to return additional\ninformation in the form of a 'message' that humans can look at to get more\ninformation about any failures.\n\n### Summary\n\nThe statuses:\n\n* **success**:                    yay!\n* **missing**:                    the resouce does not exist (404)\n* **clientFailure**:              fix client code or user inputs\n* **clientFailureNotAuthorized**: resource exists but not allowed to access; fix client code or user inputs\n* **serverFailure**:              fix server code\n* **networkFailure**:             retry when network is working\n* **pending**:                    request is in progress\n\n### Conditions Code can Reason About\n\nThe guiding principle for ArtCommunicationStatus is grouping network request statuses into simple categories that *code* can automatically reason about. Here are some examples of how these communication status's can be handled:\n\n* **success**\n  * the return data is valid, proceed!\n* **missing**\n  * alert \"The resoure is not available.\"\n* **networkFailure**\n    * automatic retries\n    * test a known-good URL to validate if there is any network connection at all\n    * alert \"Please check your network connection.\"\n* **clientFailure**\n  * assuming the client is bug-free, ask the user to fix their submission (Ex: wrong password)\n  * alert \"Yikes! That's not quite right. Please try again.\"\n* **clientFailureNotAuthorized**\n  * ask the user to log in or re-log in as a different user\n  * ask the user to present additional credentials\n* **serverFailure**\n  * alert \"Ooops! We're sorry, but something went wrong on our servers. We'll fix it ASAP! In the mean time, how about some tea?\"\n\n### Why not HTTP Status codes?\n\n1. They cover so much, most of which automatic code cannot do anything about other than report an error, possibly to be viewed by a human later.\n2. there is no HTTP status code for networkFailure.\n3. 404 isn't really a client-error or a server-error, it's its own thing: status: missing\n  * By definition:\n      * a client-error means there is something the client can do to fix it.\n      * a server-error means there is something the server can do to fix it.\n  * Unless the 404-response itself was a bug, 404 fits in neither of those categories.\n  * Example: If the client requests a resource once and it works, then fires the exact same request again and the resource is now 404, it's not the client's fault.\n","created":"2017-03-20T17:29:59.554Z","modified":"2017-06-19T19:13:53.897Z","lastPublisher":{"name":"shanebdavis","email":"shanebdavis@gmail.com"},"owners":[{"name":"shanebdavis","email":"shanebdavis@gmail.com"}],"other":{"_attachments":{},"_id":"art-communication-status","_nodeVersion":"6.10.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/art-communication-status-1.2.1.tgz_1497899633811_0.6401418952737004"},"_npmUser":{"name":"shanebdavis","email":"shanebdavis@gmail.com"},"_npmVersion":"5.0.3","_rev":"2-0182dade4def9ef0ec9516af497e0c37","author":{"name":"Shane Brinkman-Davis Delamore, Imikimi LLC"},"directories":{},"dist-tags":{"latest":"1.2.1"},"dist":{"integrity":"sha512-3pwl1fsi68sLNwdsxrq+mNcDY1mKO4FhCOdmtzH+YwukyWdCIp+2UOgebPFQDN8AeKAIeWMkTY/6N3Ttk3DX+g==","shasum":"5305b014e4341c509a38360cee91e051500f361b","tarball":"https://registry.npmjs.org/art-communication-status/-/art-communication-status-1.2.1.tgz"},"maintainers":[{"name":"shanebdavis","email":"shanebdavis@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-19T19:13:53.897Z","created":"2017-03-20T17:29:59.554Z","1.0.0":"2017-03-20T17:29:59.554Z","1.2.1":"2017-06-19T19:13:53.897Z"}}}