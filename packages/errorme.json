{"name":"errorme","version":"1.3.3","description":"Error manager for handling errors within the classes by creating self defined error codes and parsing them into http error codes","main":"index.js","scripts":{"test":"set DEV=true && istanbul cover _mocha -t 10000 -R ./tests/test.js"},"repository":"https://github.com/kmanaseryan/error-manager","keywords":["error","codes","error-manager","error-codes","http-error","http-codes","json-error","parse-error"],"license":"ISC","homepage":"https://github.com/kmanaseryan/error-manager#readme","devDependencies":{"istanbul":"^0.4.5","mocha":"^3.2.0","should":"^11.1.1"},"gitHead":"41ce7fec1de1abac3e6f113c9da9459251db2806","versions":[{"number":"1.0.0","date":"2016-10-24T10:04:28.699Z"},{"number":"1.0.1","date":"2016-10-24T10:42:32.371Z"},{"number":"1.0.2","date":"2016-10-29T12:54:28.487Z"},{"number":"1.0.3","date":"2016-10-29T13:04:05.594Z"},{"number":"1.1.0","date":"2016-12-03T21:08:59.780Z"},{"number":"1.2.0","date":"2016-12-04T07:19:38.066Z"},{"number":"1.2.1","date":"2016-12-04T07:27:53.595Z"},{"number":"1.3.0","date":"2016-12-04T09:57:15.089Z"},{"number":"1.3.1","date":"2016-12-24T15:33:58.794Z"},{"number":"1.3.2","date":"2017-02-14T18:07:59.861Z"},{"number":"1.3.3","date":"2017-02-15T15:30:07.476Z"}],"readme":"[![NSP Status](https://nodesecurity.io/orgs/app/projects/34075a50-2c38-4a96-9b08-c70210b2abec/badge)](https://nodesecurity.io/orgs/app/projects/34075a50-2c38-4a96-9b08-c70210b2abec)\r\n[![Build Status](https://travis-ci.org/kmanaseryan/error-manager.svg?branch=master)](https://travis-ci.org/kmanaseryan/error-manager)\r\n# Overview\r\nThis [node module](https://www.npmjs.com/package/errorme) helps you to  create your own errors with your defined error codes and handle them within classes in a proper way.\r\n# Features\r\n* Creating errors objects instance of `Error` class from the self-defined error codes\r\n* Throw the created error any time with informative error message/code and error stack\r\n* Parse any error to HTTP error codes and messages\r\n* Usage with express middleware \r\n* See custom and informative error messages in the client-side of the REST in development environment\r\n\r\n# ECMAScript support\r\nES6 only\r\n\r\n# Installation\r\n`$ npm install errorme`\r\n\r\n# API\r\nCheck the JSDoc [here](https://kmanaseryan.github.io/).\r\n\r\n#Installation\r\n`npm install errorme --save`\r\n\r\n#Usage\r\nYou can add your custom errors or use the [default errors](https://github.com/kmanaseryan/error-manager/blob/master/lib/constants/default.json).\r\n```javascript\r\n//defining our custom errors\r\nconst errors = {\r\n\t\"ValidationError\": {\r\n\t\t\"CODE\": 100,\r\n\t\t\"DEFAULT_MESSAGE\": \"The provided data is not valid\",\r\n\t\t\"HTTP_CODE\": 400\r\n\t},\r\n\t\"ServiceError\": {\r\n\t\t\"CODE\": 101,\r\n\t\t\"DEFAULT_MESSAGE\": \"Error happend related to the third party service\",\r\n\t\t\"HTTP_CODE\": 500\r\n\t},\r\n}\r\n//overwriting defaults errors and requiring to show logs once an error created\r\nlet options = { overwrite: true, showLogs: true }\r\n//requiring module\r\nlet errorme = require('errorme')(errors, options)\r\n\r\n//getting error\r\nlet code = 100, customMessage = \"The provided data is invalid\"; \r\nlet err = errorme.getError(code, customMessage) //custom message will be visible if process.env.DEV=true\r\nconsole.log(err instanceof Error) //true\r\n//parsing error to http\r\nlet httpErr = err.parseTo('http')\r\nconsole.log(httpErr.code) //400\r\nconsole.log(httpErr.definedCode) //100\r\nconsole.log(httpErr.message) //\"Bad request\"\r\n\r\n//create http error\r\nlet newHttpErr = errorme.getHttpError(100);\r\nconsole.log(newHttpErr.code == httpErr.code) //true\r\nconsole.log(newHttpErr.message == httpErr.message) //true\r\n\r\n```\r\n\r\n# Examples\r\nTo understand the real use case it will be better to see it with [async](https://www.npmjs.com/package/async) module, especially with [async/waterfall](http://caolan.github.io/async/docs.html#waterfall)\r\n\r\n```javascript\r\nlet waterfall = require('async/waterfall');\r\nlet errorme = require('errorme')();\r\n\r\nlet someFunction = (params, callback)=>{\r\n\twaterfall([\r\n\t\t(_calllback)=>{\r\n\t\t\t//suppose here we are doing some database query\r\n\t\t\t//and it might fail\r\n\t\t\tlet err;\r\n\t\t\tlet data;\r\n\t\t\tif(Math.floor((Math.random() * 5)) == 0){\r\n\t\t\t\t//suppose here we've got  error\r\n\t\t\t\terr = errorme.getError(102, \"Our database query unfortunately failed\")\r\n\t\t\t}else{\r\n\t\t\t\tdata = \"Some data retrieved from database\"\r\n\t\t\t} \r\n\t\t\t_calllback(err, data) //err will be undefined if the if block is not executed\r\n\t\t},\r\n\t\t(data, _calllback)=>{\r\n\t\t\t//if this callback is being executed then it means the previous is not failed\r\n\t\t\t//and now we want to check our data which might not to meet to our criteria \r\n\t\t\tlet err;\r\n\t\t\tif(Math.floor((Math.random() * 5)) == 1){\r\n\t\t\t\t//data doesn't meet to our criteria\r\n\t\t\t\t//and we want to provide the corresponding error\r\n\t\t\t\terr = errorme.getError(100, \"Data doesn't meet to our criteria\")\r\n\t\t\t\tdata = null;\r\n\t\t\t} \r\n\t\t\t_calllback(err, data) //err will be undefined if the if block is not executed\r\n\t\t},\r\n\t\t(data, _calllback)=>{\r\n\t\t\t//soppose here we want to make a call to some external service which also can be failed\r\n\t\t\tlet err;\r\n\t\t\tlet dataOfExternalService;\r\n\t\t\tif(Math.floor((Math.random() * 5)) == 2){\r\n\t\t\t\terr = errorme.getError(101); //if don't pass message then the error message will be the default error message\r\n\t\t\t}else{\r\n\t\t\t\tdataOfExternalService = \"Data from external service\";\r\n\t\t\t} \r\n\t\t\t_calllback(err, dataOfExternalService) //err will be undefined if the if block is not executed\r\n\t\t},\r\n\t], (error, data)=>{\r\n\t\t//here we can do our final operations \r\n\t\t//and finally parse the error to http and send to the client\r\n\t\t// if(error)\r\n\t\t// \terror = error.parseTo('http');\r\n\t\t\r\n\t\t//we don't have anything to do in this final block then we could parse the error into http\r\n\t\t//in the above callbacks and as a callback we could just give the top most callback\r\n\t\t//lets say we don't want to parse to http. We just pass the pure error to the callback\r\n\t\tcallback(error, data);\t\t\r\n\t})\r\n\t\r\n}\r\n\r\nsomeFunction(\"some paramas\", (error, data)=>{\r\n\tif(error){\r\n\t\tconsole.log('Error occured. Code: ' + error.code + ', message: ' + error.message);\r\n\t}\r\n\tif(data){\r\n\t\tconsole.log('Data: ' + data);\r\n\t}\r\n});\r\n```  \r\nUsing with [express](https://www.npmjs.com/package/express)\r\n\r\n```javascript\r\nlet express = require('express');\r\nlet app = express();\r\nlet errorme = require('errorme')();\r\n\r\n//creates middleware\r\nerrorme.middleware(app);\r\n \r\napp.get('/', function (req, res) {\r\n\tlet data = {\r\n\t\tfoo: \"Foo data\"\r\n\t}\r\n\tlet err;\r\n\t\r\n\t// uncoment below if you want to send http error message (data argument will be ignored)\r\n\t// err = errorme.getError(100);\r\n\tres.errormeSend(err, data);\r\n});\r\n \r\napp.listen(3000);\r\n```\r\n\r\n# Next features\r\n* Will be ability to add other \"error languages\"\r\n* Optimization for working with error codes defined by external service providers\r\n    \r\n# License\r\nMIT        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","starsCount":1,"created":"2016-10-24T10:04:28.699Z","modified":"2017-02-15T15:30:07.476Z","lastPublisher":{"name":"kmanaseryan","email":"kmanaseryan@gmail.com"},"owners":[{"name":"kmanaseryan","email":"kmanaseryan@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"errorme","_nodeVersion":"6.9.5","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/errorme-1.3.3.tgz_1487172606824_0.23163010203279555"},"_npmUser":{"name":"kmanaseryan","email":"kmanaseryan@gmail.com"},"_npmVersion":"3.10.10","_rev":"14-07d3176dea7b94b814549d545aeab1e1","_shasum":"b495a68bc5f12f2aa2117687369bb9643e0f2b2d","author":{"name":"Karlen Manaseryan"},"bugs":{"url":"https://github.com/kmanaseryan/error-manager/issues"},"directories":{},"dist-tags":{"latest":"1.3.3"},"dist":{"shasum":"b495a68bc5f12f2aa2117687369bb9643e0f2b2d","tarball":"https://registry.npmjs.org/errorme/-/errorme-1.3.3.tgz"},"maintainers":[{"name":"kmanaseryan","email":"kmanaseryan@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-02-15T15:30:07.476Z","created":"2016-10-24T10:04:28.699Z","1.0.0":"2016-10-24T10:04:28.699Z","1.0.1":"2016-10-24T10:42:32.371Z","1.0.2":"2016-10-29T12:54:28.487Z","1.0.3":"2016-10-29T13:04:05.594Z","1.1.0":"2016-12-03T21:08:59.780Z","1.2.0":"2016-12-04T07:19:38.066Z","1.2.1":"2016-12-04T07:27:53.595Z","1.3.0":"2016-12-04T09:57:15.089Z","1.3.1":"2016-12-24T15:33:58.794Z","1.3.2":"2017-02-14T18:07:59.861Z","1.3.3":"2017-02-15T15:30:07.476Z"},"users":{"kmanaseryan":true}}}