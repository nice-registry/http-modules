{"name":"hyperserv","version":"4.0.1","description":"hypermodular http server","main":"index.js","scripts":{"test":"dependency-check . && standard | snazzy && tape test.js | tap-format-spec"},"repository":"https://github.com/bcomnes/hyperserv","keywords":["youtube-dl"],"license":"ISC","homepage":"https://github.com/bcomnes/hyperserv#readme","devDependencies":{"@tap-format/spec":"^0.2.0","changelog-maker":"^2.2.4","dependency-check":"^2.6.0","nodemon":"^1.9.2","request":"^2.73.0","snazzy":"^5.0.0","standard":"^8.0.0","standard-format":"^2.2.2","tape":"^4.6.0"},"dependencies":{"@bret/http-hash-router":"^2.0.0","finalhandler":"^0.5.0","minimist":"^1.2.0","morgan":"^1.7.0","stack":"^0.1.0"},"gitHead":"552a7abeb3e04361270da6c475e7bd2ae660a1b5","versions":[{"number":"1.0.0","date":"2016-07-13T08:13:18.942Z"},{"number":"2.0.0","date":"2016-07-20T04:21:07.421Z"},{"number":"3.0.0","date":"2016-10-16T01:04:51.974Z"},{"number":"3.0.1","date":"2016-10-23T19:51:05.016Z"},{"number":"4.0.0","date":"2016-11-17T04:06:35.264Z"},{"number":"4.0.1","date":"2016-11-17T04:12:13.673Z"}],"readme":"# hyperserv\n\nA hypermodular http server that glues together [http](https://nodejs.org/api/http.html), [stack](http://github.com/creationix/stack) and [@bret/http-hash-router](https://github.com/bcomnes/http-hash-router).\n\n```\nnpm i hyperserv\n```\n\n[![Build Status](https://travis-ci.org/bcomnes/hyperserv.svg?branch=master)](https://travis-ci.org/bcomnes/hyperserv)\n[![Dependency Status](https://david-dm.org/bcomnes/hyperserv.svg)](https://david-dm.org/bcomnes/hyperserv)\n\n## Why?\n\nExpress is a reliable and widely understood web-framework, but the dream of node.js was framework free network applicaitons.  [http-framework](https://github.com/Raynos/http-framework) and [substack-flavored-webapp](https://github.com/substack/substack-flavored-webapp) are excellent counterpoints to frameworks like express and hapi but come along with a pile of boilerplate.  hyperserv aims to glue together the basics of any webserver by providing a routing layer and a middlware layer to offer up a quick way to write small webservers the hypermodular way (or, more specifically, one hypermodular way)!\n\nHow you launch and configure your webservers seems to be a deeply personal ceremony.  hyperserv leaves this up to you and just puts together the webserver for you.\n\n\n## Usage\n\n```js\nvar minimist = require('minimist')\nvar morgan = require('morgan')\nvar Hyperserv = require('hyperserv')\nvar app = new Hyperserv()\nvar argv = minimist(process.argv.slice(2), {\n  alias: { p: 'port' },\n  default: { port: 8000 }\n})\nvar ecstatic = require('ecstatic')\nvar path = require('path')\n\nprocess.title = 'hyperserv'\n\n// Reconfigure the middlewre stack sitting in front of the routes.\napp.composeStack([\n  morgan('dev')\n])\n\nvar staticPath = path.join(__dirname, 'static')\nconsole.log(staticPath)\napp.router.set('/static', ecstatic({\n  root: staticPath,\n  baseDir: 'static',\n  handleError: false\n}))\n\n// Set up routes\napp.router.set('/', function (req, res, opts, cb) {\n  res.end('hi')\n})\n\n// Set up routes\napp.router.set('/:name', function (req, res, opts, cb) {\n  res.end('hello ' + opts.params.name)\n})\n\n// Routes can fly fast and loose.  It don't matter\napp.router.set('/crash', function (req, res, opts, cb) {\n  throw new Error('This route crashed intentionally')\n})\n\nfunction expressMiddleware (req, res, next) {\n  res.write(JSON.stringify(req.opts) + '\\n')\n  res.end('this is an express/connect style middleware layer')\n}\n\napp.router.set('/:name/express', expressMiddleware)\n\napp.httpServer.listen(argv.port)\n```\n\n## API\n\n#### Routes vs Layers No More!\n\nHyperserv now supports connect style routes out of the box.  The `opts` object that holds params and app level vars are now extended into the `req.opts` object by default, when the route doesn't accept an `opts` argument.\n\n#### `var app = new Hyperserv([options])`\n\nReturns a new hyperserv `app` object. It sets up an httpServer that has a middleware handler and router.\n\nDefault options:\n\n```js\n{\n  layers: [ require('morgan')('dev') ],\n  sendTraces: true,\n  logTraces: true,\n  logDetails: true\n}\n```\n\n- `layers`: Provide an array of middleware functions (`function layer (req, res, cb) {}`) that get stuck in front of the final routing layer.  You can reconfigure this layer at any point with `server.composeStack`.\n- `sendTraces`: Specify if stack traces are sent in the `res` if the `req` runs into any kind of error.  Defaults to `false`\n- `logTraces`: Attach the default error handler to the `error` event emitted from the server whenever it encounters an error.\n\n```js\nfunction errorHandler (err) {\n  if (err.statusCode !== 404) console.log(err)\n}\n```\n\n- `logDetails`: Attach the default server start log message to the server to fire when it starts listening.\n\n#### `app.httpServer`\n\nThis is an instance of `http.createServer`.  It isn't started yet, so set up your event handlers, and turn it on with `app.httpServer.listen(port)`\n\n#### `app.router`\n\nThis is the `@bret/http-hash-router` router object that has simply been attached to the `http` server instance.  Read all about it here:\n\n- [bcomnes/http-hash-router](https://github.com/bcomnes/http-hash-router)\n- [Matt-Esch/http-hash](https://github.com/Matt-Esch/http-hash)\n\n#### `app.router.set(pattern, routeHandler)`\n\nThis sets a route and a route handler.  Remember, routeHandlers expect the following signature `function route (req, res, opts, cb) {}`.  You can compose middleware stack's to plop inside of route handlers using [`stack.compose`](https://github.com/creationix/stack/blob/master/stack.js#L36).\n\nSee [bcomnes/http-hash-router#example](https://github.com/bcomnes/http-hash-router#example)\n\n#### `app.composeStack([ layers ])`\n\nThis lets you pass an array of middleware layers (`function layer (req, res, cb) {}`) to stick in front of the `http-hash-router` layer.  You can do body parsing, cookie parsing, sessions, and auth stuff here.  Calling `composeStack` tosses the existing middleware stack out in favor of the one you pass in here.\n\n#### `app.errorHandler`\n\nThis is the default error handler that gets passed to the server's `error` event when `logTraces` is set to true when creating a `server`.  It is an instance method that you can reassign if you want.\n\n```js\nfunction errorHandler (err) {\n  if (err.statusCode !== 404) console.log(err)\n}\n```\n\nIf you want to use it as is with the server, use the `logTraces` option.  It is exported only for convince and access and should not be normally used directly.\n\n#### `app.logDetails`\n\nThis is the default logging function that runs when the server starts listening.  Use the `logDetails` options to turn it on or off.  It is an instance method that you can reassign if you want.\n\n#### `Hyperserv.makeRoute(layer)` (Depreciated)\n\nPass in a connect style middleware layer and get back a `http-hash-router` route handler.  The returned route handler mixes in any options it receives on its `opts` argument to `req.opts`.\n\n```js\nfunction makeRoute (layer) {\n  return (req, res, opts, cb) => {\n    req.opts = extend(req.opts, opts)\n    layer(req, res, cb)\n  }\n}\n```\n\n\n","starsCount":1,"created":"2016-07-13T08:13:18.942Z","modified":"2016-11-17T04:12:13.673Z","lastPublisher":{"name":"bret","email":"bcomnes@gmail.com"},"owners":[{"name":"bret","email":"bcomnes@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"hyperserv","_nodeVersion":"7.1.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/hyperserv-4.0.1.tgz_1479355931778_0.4655066935811192"},"_npmUser":{"name":"bret","email":"bcomnes@gmail.com"},"_npmVersion":"3.10.9","_rev":"4-ef496d716e5bcccf0a84b8d69b261ab3","_shasum":"702af553bc42bdd867a4d8dc2533a3286bcf67a5","author":{"name":"Bret Comnes"},"bugs":{"url":"https://github.com/bcomnes/hyperserv/issues"},"directories":{},"dist-tags":{"latest":"4.0.1"},"dist":{"shasum":"702af553bc42bdd867a4d8dc2533a3286bcf67a5","tarball":"http://registry.npmjs.org/hyperserv/-/hyperserv-4.0.1.tgz"},"maintainers":[{"name":"bret","email":"bcomnes@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-17T04:12:13.673Z","created":"2016-07-13T08:13:18.942Z","1.0.0":"2016-07-13T08:13:18.942Z","2.0.0":"2016-07-20T04:21:07.421Z","3.0.0":"2016-10-16T01:04:51.974Z","3.0.1":"2016-10-23T19:51:05.016Z","4.0.0":"2016-11-17T04:06:35.264Z","4.0.1":"2016-11-17T04:12:13.673Z"},"users":{"bret":true}}}