{"name":"mitm-algolia","version":"1.3.0-algolia-patch.0","description":"Intercept and mock outgoing network TCP connections and HTTP requests for testing. Intercepts and gives you a Net.Socket, Http.IncomingMessage and Http.ServerResponse to test and respond with. Useful when testing code that hits remote servers.","keywords":["http","https","intercept","interception","mock","network","socket","tcp","test","webmock"],"homepage":"https://github.com/moll/node-mitm","repository":"https://github.com/moll/node-mitm","licenses":[{"type":"LAGPL","url":"https://github.com/moll/node-mitm/blob/master/LICENSE"}],"main":"index.js","scripts":{"test":"make test"},"dependencies":{"underscore":">= 1.1.6 < 1.6"},"devDependencies":{"mocha":">= 1.12.0 < 1.19","must":">= 0.13 < 0.14","sinon":">= 1.9 < 2","semver":">= 5 < 6"},"engines":{"node":">= 0.10.24"},"gitHead":"ead86637e40b44261cc59262399d21579d1aa5e9","versions":[{"number":"1.2.0-algolia-patch.1","date":"2016-03-16T13:43:53.315Z"},{"number":"1.3.0-algolia-patch.0","date":"2016-08-30T13:20:16.639Z"}],"readme":"Mitm.js\n=======\n[![NPM version][npm-badge]](https://www.npmjs.com/package/mitm)\n[![Build status][travis-badge]](https://travis-ci.org/moll/node-mitm)\n\nMitm.js is a library for Node.js (and Io.js) to **intercept and mock** outgoing\nnetwork **TCP** and **HTTP** connections.  Mitm.js intercepts and gives you\na `Net.Socket` to communicate as if you were the remote server. For **HTTP\nrequests** it even gives you `Http.IncomingMessage` and `Http.ServerResponse`\n— just like you're used to when writing Node.js servers.  Except there's no\nactual server running, it's all just _In-Process Interception™_.\n\nIntercepting connections and requests is **extremely useful to test and ensure\nyour code does what you expect**. Assert on request parameters and send back\nvarious responses to your code without ever having to hit the real network.\n**Fast as hell** and **a lot easier to develop with than external test\nservers**.\n\nMitm.js should work both on the stable Node **v0.10.24** and up and **v0.11.11**\nand up and has **automated tests** to ensure it will stay that way.\n\nI've developed Mitm.js on a need-to basis for testing [Monday\nCalendar][monday]'s syncing, so if you find a use-case I haven't come across,\nplease fling me an [email][email], a [tweet][twitter] or [create an\nissue][issues] on GitHub.\n\n[npm-badge]: https://img.shields.io/npm/v/mitm.svg\n[travis-badge]: https://travis-ci.org/moll/node-mitm.png?branch=master\n\n### Tour\n- Intercept both **TCP socket connections** (`Net.connect`) and **HTTP\n  requests** (`Http.request` and `Https.request`).  \n\n- Hooks to Node.js's network functions at a **very low level** with the goal of\n  not having to patch existing classes and have everything behave as if bytes\n  were arriving from the network.\n\n- Does *not* have any kitchen sink features or yet another API to assert on\n  intercepted connections.  \n  That's a different responsibility handled better by assertion libraries\n  (you'll do no better than to pick [Must.js][must] for that ;-).\n\n- Use an **API you already know** to assert or respond to requests — Mitm.js\n  gives you access to a vanilla `Net.Socket` to respond with:\n\n  ```javascript\n  mitm.on(\"connection\", function(socket) { socket.write(\"Hello back!\") })\n\n  var socket = Net.connect(22, \"example.org\")\n  socket.write(\"Hello!\")\n  socket.setEncoding(\"utf8\")\n  socket.read() // => \"Hello back!\"\n  ```\n\n- When you do **HTTP or HTTPS** requests, Mitm.js gives you both\n  a `Http.IncomingMessage` and `Http.ServerResponse` to play the server with.\n  That means you'll be using an **API you're already familiar with**\n  rather than yet another idiosyncratic domain specific language.\n\n  Mitm.js comes very handy to ensure your code makes requests with the\n  appropriate parameters:\n  ```javascript\n  mitm.on(\"request\", function(req, res) {\n    req.headers.authorization.must.equal(\"OAuth DEADBEEF\")\n  })\n\n  Http.get(\"http://example.org\")\n  ```\n\n  It's also useful to see if your code behaves as you'd expect if everything is\n  not `200 OK`:\n  ```javascript\n  mitm.on(\"request\", function(req, res) {\n    res.statusCode = 402\n    res.end(\"Pay up, sugar!\")\n  })\n\n  Http.get(\"http://example.org\", function(res) {\n    res.setEncoding(\"utf8\")\n    res.statusCode // => 402\n    res.on(\"data\", console.log) // => \"Pay up, sugar!\"\n  })\n  ```\n\n  `Http.IncomingMessage` and `Http.ServerResponse` are the same objects\n  you get when you write Node.js HTTP servers with `Net.Server` or use a library\n  like [Express.js][express].\n\n- **Bypass** interception selectively for some connections (such as your SQL\n  server) and let them connect as usual.\n  ```javascript\n  mitm.on(\"connect\", function(socket, opts) {\n    if (opts.host == \"sql.example.org\" && opts.port == 5432) socket.bypass()\n  })\n  ```\n\n- **Developed with automated tests**. Yeah, I know, why should one list this\n  a feature when writing tests is just a sign of professionalism and respect\n  towards other developers? But in a world where so many libraries and\n  \"production\" software are released without *any* tests, I like to point out\n  that I even write tests for testing libraries. ;-)\n\n[must]: https://github.com/moll/js-must\n[express]: http://expressjs.com\n\n\nInstalling\n----------\n```\nnpm install mitm\n```\n\nFrom v1.0.0 Mitm.js will follow [semantic versioning][semver], but until then,\nbreaking changes may appear between minor versions (the middle number).\n\n[semver]: http://semver.org/\n\n\nUsing\n-----\nRequire Mitm.js and invoke it as a function to both create an instance of `Mitm`\nand enable intercepting:\n```javascript\nvar Mitm = require(\"mitm\")\nvar mitm = Mitm()\n```\n\nMitm.js will then intercept all requests until you disable it:\n```javascript\nmitm.disable()\n```\n\n### Intercepting in tests\nIn tests, it's best to use the _before_ and _after_ hooks to enable and disable\nintercepting for each test case:\n```javascript\nbeforeEach(function() { this.mitm = Mitm() })\nafterEach(function() { this.mitm.disable() })\n```\n\n### Intercepting TCP connections\nAfter you've called `Mitm()`, Mitm.js will intercept and emit `connection` on\nitself for each new connection.  \nThe `connection` event will be given a server side `Net.Socket` for you to reply\nwith:\n\n```javascript\nmitm.on(\"connection\", function(socket) { socket.write(\"Hello back!\") })\n\nvar socket = Net.connect(22, \"example.org\")\nsocket.write(\"Hello!\")\nsocket.setEncoding(\"utf8\")\nsocket.read() // => \"Hello back!\"\n```\n\n### Intercepting HTTP/HTTPS requests\nAfter you've called `Mitm()`, Mitm.js will intercept and emit `request` on itself for each new HTTP or HTTPS request.  \nThe `request` event will be given a server side `Http.IncomingMessage` and\n`Http.ServerResponse`.\n\nFor example, asserting on HTTP requests would look something like this:\n```javascript\nmitm.on(\"request\", function(req, res) {\n  req.headers.authorization.must.equal(\"OAuth DEADBEEF\")\n})\n\nHttp.get(\"http://example.org\")\n```\n\nResponding to requests is just as easy and exactly like you're used to from\nusing Node.js HTTP servers (or from libraries like [Express.js][express]):\n```javascript\nmitm.on(\"request\", function(req, res) {\n  res.statusCode = 402\n  res.end(\"Pay up, sugar!\")\n})\n\nHttp.get(\"http://example.org\", function(res) {\n  res.statusCode // => 402\n  res.setEncoding(\"utf8\")\n  res.on(\"data\", console.log) // => \"Pay up, sugar!\"\n})\n```\n\nPlease note that HTTPS requests are currently \"morphed\" into HTTP requests.\nThat's to save us from having to set up certificates and disable their\nverification. But if you do need to test this, please ping me and we'll see if\nwe can get Mitm.js to support that.\n\n### Bypassing interception\nYou can bypass connections listening to the `connect` event on the Mitm instance\nand then calling `bypass` on the given socket. To help you do\nso selectively, `connect` is given the `options` object that was given to\n`Net.connect`:\n\n```javascript\nmitm.on(\"connect\", function(socket, opts) {\n  if (opts.host == \"sql.example.org\" && opts.port == 5432) socket.bypass()\n})\n```\n\nBypassed connections do **not** emit `connection` or `request` events. They're\nignored by Mitm.js.\n\nIn most cases you don't need to bypass because by the time you call `Mitm` in\nyour tests to start intercepting, all of the long-running connections, such as\ndatabase or cache connections, are already made.\n\nYou might need to bypass connections you make to *localhost* when you're running\nintegration tests against the HTTP server you started in the test process, but\nstill want to intercept some other connections that this request might invoke.  \nThe following should suffice:\n\n```javascript\nmitm.on(\"connect\", function(socket, opts) {\n  if (opts.host == \"localhost\") socket.bypass()\n})\n```\n\n\nEvents\n------\nAll events that Mitm will emit on an instance of itself (see [Using\nMitm.js](#using) for examples):\n\nEvent      | Description\n-----------|------------\nconnect    | Emitted when a TCP connection is made.<br> Given the client side `Net.Socket` and `options` from `Net.connect`.\nconnection | Emitted when a TCP connection is made.<br> Given the server side `Net.Socket` and `options` from `Net.connect`.\nrequest    | Emitted when a HTTP/HTTPS request is made.<br> Given the server side `Http.IncomingMessage` and `Http.ServerResponse`.\n\n\nLicense\n-------\nMitm.js is released under a *Lesser GNU Affero General Public License*, which\nin summary means:\n\n- You **can** use this program for **no cost**.\n- You **can** use this program for **both personal and commercial reasons**.\n- You **do not have to share your own program's code** which uses this program.\n- You **have to share modifications** (e.g. bug-fixes) you've made to this\n  program.\n\nFor more convoluted language, see the `LICENSE` file.\n\n\nAbout\n-----\n**[Andri Möll][moll]** typed this and the code.  \n[Monday Calendar][monday] supported the engineering work.\n\nIf you find Mitm.js needs improving, please don't hesitate to type to me now\nat [andri@dot.ee][email] or [create an issue online][issues].\n\n[email]: mailto:andri@dot.ee\n[issues]: https://github.com/moll/node-mitm/issues\n[moll]: http://themoll.com\n[monday]: https://mondayapp.com\n[twitter]: https://twitter.com/theml\n","created":"2016-03-16T13:43:53.315Z","modified":"2016-08-30T13:20:16.639Z","lastPublisher":{"name":"vvo","email":"vincent.voyer@gmail.com"},"owners":[{"name":"vvo","email":"vincent.voyer@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"mitm-algolia","_nodeVersion":"6.5.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/mitm-algolia-1.3.0-algolia-patch.0.tgz_1472563215053_0.29755865619517863"},"_npmUser":{"name":"vvo","email":"vincent.voyer@gmail.com"},"_npmVersion":"3.10.3","_rev":"1-753051b5ee0637c323e316c3f8c67dbe","_shasum":"6b66a480979bb9319cc4bbee82b259fa6869a937","author":{"name":"Andri Möll","email":"andri@dot.ee","url":"http://themoll.com"},"bugs":{"url":"https://github.com/moll/node-mitm/issues"},"directories":{},"dist-tags":{"latest":"1.3.0-algolia-patch.0"},"dist":{"shasum":"6b66a480979bb9319cc4bbee82b259fa6869a937","tarball":"http://registry.npmjs.org/mitm-algolia/-/mitm-algolia-1.3.0-algolia-patch.0.tgz"},"maintainers":[{"name":"vvo","email":"vincent.voyer@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-08-30T13:20:16.639Z","created":"2016-03-16T13:43:53.315Z","1.2.0-algolia-patch.1":"2016-03-16T13:43:53.315Z","1.3.0-algolia-patch.0":"2016-08-30T13:20:16.639Z"}}}