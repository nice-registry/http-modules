{"name":"diglet","version":"1.0.6","description":"secure http tunnelling server and client","main":"index.js","bin":{"diglet":"bin/diglet.js"},"scripts":{"test":"mocha","linter":"jshint --config .jshintrc","coverage":"istanbul cover _mocha","build-docs":"mkdir -p ./jsdoc && rm -r ./jsdoc && jsdoc lib -r -R README.md -c .jsdoc.json --verbose -d ./jsdoc","deploy-docs":"gh-pages -d jsdoc --repo git@github.com:bookchin/diglet.git"},"repository":"https://github.com/bookchin/diglet","keywords":["tunnel","https"],"license":"AGPL-3.0","homepage":"https://github.com/bookchin/diglet#readme","devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.15","gh-pages":"^0.11.0","ink-docstrap":"github:boshevski/docstrap","istanbul":"^0.4.5","jsdoc":"^3.4.3","jshint":"^2.9.4","mocha":"^2.5.3","proxyquire":"^1.7.10","sinon":"^1.17.6","ws":"^1.1.1"},"dependencies":{"bunyan":"^1.8.5","colors":"^1.1.2","commander":"^2.9.0","portastic":"^1.0.1","rc":"^1.1.6","serve-static":"^1.11.1","through":"^2.3.8","tldjs":"^1.7.0"},"gitHead":"80f8998cf87f2875636efe05f4bad635c6ad20f9","versions":[{"number":"0.0.0","date":"2016-04-01T21:07:33.456Z"},{"number":"1.0.0","date":"2016-11-18T20:47:58.051Z"},{"number":"1.0.1","date":"2016-11-20T04:01:20.351Z"},{"number":"1.0.2","date":"2016-11-21T18:10:09.297Z"},{"number":"1.0.3","date":"2016-11-26T17:11:27.282Z"},{"number":"1.0.4","date":"2016-11-28T02:03:53.136Z"},{"number":"1.0.5","date":"2016-11-30T20:51:46.497Z"},{"number":"1.0.6","date":"2016-11-30T20:58:54.614Z"}],"readme":"![Diglet](https://raw.githubusercontent.com/bookchin/diglet/master/static/diglet.png)\n========\n\n[![Build Status](https://img.shields.io/travis/bookchin/diglet.svg?style=flat-square)](https://travis-ci.org/bookchin/diglet)\n[![Coverage Status](https://img.shields.io/coveralls/bookchin/diglet.svg?style=flat-square)](https://coveralls.io/r/bookchin/diglet)\n[![NPM](https://img.shields.io/npm/v/diglet.svg?style=flat-square)](https://www.npmjs.com/package/diglet)\n[![License](https://img.shields.io/badge/license-AGPL3.0-blue.svg?style=flat-square)](https://raw.githubusercontent.com/bookchin/diglet/master/LICENSE)\n\nSimple HTTP tunneling. Expose a local server behind NAT or firewall to the \ninternet. [Read the documentation here](http://bookch.in/diglet).\n\n> Diglet is basically just a [localtunnel](https://localtunnel.github.io/www/) \n> bikeshed that aims to provide a more flexible programmatic interface.\n\n```bash\nnpm install -g diglet\n```\n\nBasic Usage\n-----------\n\nDiglet can be used out of the box with zero configuration to tunnel a local \nserver through to the internet with the `diglet` command line program. This \nworks by establishing a connection with a diglet server that is already on \nthe internet. A diglet client running on your computer is used to open this \nconnection along with a connection to your local server. Requests received\nby the remote diglet server are proxied through you your connected diglet \nclient which then proxies the connection to your local server and back.\n\nStart a diglet server on the remote host simply with:\n\n```bash\ndiglet server\n```\n\nExpose a service on port 8080 from your local computer with:\n\n```\ndiglet client 8080\n```\n\nConfig\n------\n\nDiglet loads configuration from a `.digletrc` file. This file can be in either \nINI or JSON format. The file may be placed in any of the following locations, \nin order of load preference:\n\n* `$HOME/.digletrc`\n* `$HOME/.diglet/config`\n* `$HOME/.config/diglet`\n* `$HOME/.config/diglet/config`\n* `/etc/digletrc`\n* `/etc/diglet/config`\n\nA `.digletrc` file may contain any of the following:\n\n```ini\n; Configuration for running a remote diglet server\n\n[server]\n  ; Server hostname for parsing subdomains as proxy IDs\n  serverHost = diglet.me\n  ; Server port to listen on\n  serverPort = 80\n  ; Maximum number of tunnel connections from client per-proxy\n  proxyMaxConnections = 12\n  ; Maximum number of proxies the server will establish\n  maxProxiesAllowed = 24\n  ; Time to wait for client to connect before destroying proxy\n  proxyIdleTimeout = 5000\n  ; Time to wait before giving up on a proxied socket agent\n  proxySocketTimeout = 5000\n\n[server.proxyPortRange]\n  ; Starting port for opening client proxies\n  min = 12000\n  ; Ending port for opening client proxies\n  max = 12023\n\n; Configuration for running a local diglet client\n\n[client]\n  ; Hostname for the local server (or any server on network)\n  localAddress = localhost\n  ; Default port for the local server (or any server on network)\n  localPort = 8080\n  ; Diglet server hostname to use\n  remoteAddress = diglet.me\n  ; Diglet server port to use\n  remotePort = 80\n  ; Number of tunnel connections to maintain to proxy\n  maxConnections = 12\n```\n\nProgrammatic Usage\n------------------\n\nWhile diglet may be used as a standalone tunnel server/client, it's primary \nobjective is to be used as a library for implementing your own tunneling \nsystem - which is useful for distributed applications/networks.\n\nDiglet exposes a simple interface for accomplishing this; there are only a \nfew components:\n\n1. `diglet.Server`\n2. `diglet.Proxy`\n3. `diglet.Tunnel`\n\n### `diglet.Server`\n\nThe server component is used to manage a collection of `diglet.Proxy` \ninstances. It is not a traditional server in that it does not need to be bound \nto a port itself, so it can be used simply as a management interface within \nyour own server.\n\nYou create a `diglet.Server` with some options dictating how it should open \nclient tunnels and expose them to the world, then your application may choose \nhow to route requests to those tunnels.\n\n```js\nconst diglet = require('diglet');\nconst server = new diglet.Server({\n  proxyPortRange: { min: 9000, max: 9009 },\n  maxProxiesAllowed: 10,\n  proxyMaxConnections: 6,\n  proxyIdleTimeout: 2000,\n  logger: console\n});\n```\n\nOnce you have created a `diglet.Server`, you can use it to create proxies and \nroute requests to them. For example, you might implement an API endpoint that \nyour users hit to create a proxy for them:\n\n```js\nconst app = require('express')();\n\napp.get('/proxy', (req, res, next) => {\n  server.addProxy(req.query.proxyId, (err, proxy) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.json({\n      publicUrl: 'https://mydomain.tld/proxy/' + proxy.getProxyId(),\n      tunnelHost: 'mydomain.tld',\n      tunnelPort: proxy.getProxyPort()\n    });\n  });\n});\n```\n\nThe result of this API request provides a client with enough information to \nestablish a tunnel connection using a `diglet.Tunnel`. You also need a way to \nroute incoming requests to your own server down through your client's tunnel.\n\n```js\napp.use('/proxy/:proxyId', (req, res, next) => {\n  server.routeHttpRequest(req.params.proxyId, req, res, (didRoute) => {\n    console.info('The request was routed to tunnel? ', didRoute);\n  });\n});\n```\n\n### `diglet.Tunnel`\n\nThe last piece to this puzzle is establishing a tunnel to the \"back-side\" of \nthe proxy. A tunnel consists of a pool of TCP sockets to the proxy with each \nbearing a corresponding TCP socket to a local address and port (the service \nthe client wishes to expose).\n\n> In the example above, the proxy server is routing to tunnels based on the URL \n> path, so we will need to account for that in our tunnel by transforming the \n> request path before passing the request back to our local server.\n\n```js\nconst pathTransformer = getTransformStreamToRewriteHttpPath();\nconst tunnel = new diglet.Tunnel({\n  maxConnections: 6,\n  logger: console,\n  localAddress: 'localhost',\n  localPort: 8080,\n  remoteAddress: 'mydomain.tld',\n  remotePort: 12000, // result from proxy.getProxyPort()\n  transform: pathTransformer\n});\n\ntunnel.once('established', function() {\n  console.info('tunnel is established!');\n});\n\ntunnel.open();\n```\n\nLicense\n-------\n\nDiglet - Simple HTTP Tunneling  \nCopyright (C) 2016 Gordon Hall\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see http://www.gnu.org/licenses/.\n\n\n","created":"2016-04-01T21:07:33.456Z","modified":"2016-11-30T20:58:54.614Z","lastPublisher":{"name":"bookchin","email":"gordonhall@openmailbox.org"},"owners":[{"name":"bookchin","email":"gordonhall@openmailbox.org"}],"other":{"_attachments":{},"_from":".","_id":"diglet","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/diglet-1.0.6.tgz_1480539532398_0.4798979554325342"},"_npmUser":{"name":"bookchin","email":"gordonhall@openmailbox.org"},"_npmVersion":"3.10.8","_rev":"8-1505d4d31a5d05668e882b78f9f1da8f","_shasum":"9ac66c391cd7dc02c40f4a54fed56a9437ef51dd","author":{"name":"Gordon Hall","email":"gordon@gordonwritescode.com"},"bugs":{"url":"https://github.com/bookchin/diglet/issues"},"directories":{},"dist-tags":{"latest":"1.0.6"},"dist":{"shasum":"9ac66c391cd7dc02c40f4a54fed56a9437ef51dd","tarball":"http://registry.npmjs.org/diglet/-/diglet-1.0.6.tgz"},"maintainers":[{"name":"bookchin","email":"gordonhall@openmailbox.org"}],"readmeFilename":"README.md","time":{"modified":"2016-11-30T20:58:54.614Z","created":"2016-04-01T21:07:33.456Z","0.0.0":"2016-04-01T21:07:33.456Z","1.0.0":"2016-11-18T20:47:58.051Z","1.0.1":"2016-11-20T04:01:20.351Z","1.0.2":"2016-11-21T18:10:09.297Z","1.0.3":"2016-11-26T17:11:27.282Z","1.0.4":"2016-11-28T02:03:53.136Z","1.0.5":"2016-11-30T20:51:46.497Z","1.0.6":"2016-11-30T20:58:54.614Z"}}}