{"name":"node-red-contrib-lifx-api","description":"A collection of Node-RED nodes to control LIFX globes using the HTTP Remote Control API.","version":"1.0.4","repository":"https://github.com/alisdairjsmyth/node-red-contrib-lifx-api","license":"Apache-2.0","keywords":["node-red","lifx","home+automation"],"node-red":{"nodes":{"lifx-api":"lifx-api/lifx.js"}},"dependencies":{"lifx-http-api":"^1.0.3"},"gitHead":"14609bca186d25375019edd041a1d7aa5c77252c","homepage":"https://github.com/alisdairjsmyth/node-red-contrib-lifx-api#readme","scripts":{},"versions":[{"number":"0.0.1","date":"2016-09-26T11:37:23.016Z"},{"number":"0.0.2","date":"2016-09-27T23:28:21.387Z"},{"number":"0.0.3","date":"2016-09-28T01:13:24.859Z"},{"number":"0.0.4","date":"2016-09-28T07:22:26.708Z"},{"number":"0.0.5","date":"2016-09-28T10:16:01.641Z"},{"number":"0.0.6","date":"2016-09-28T10:58:00.613Z"},{"number":"0.0.7","date":"2016-09-28T11:11:26.826Z"},{"number":"0.0.8","date":"2016-09-28T11:20:10.773Z"},{"number":"0.0.9","date":"2016-09-29T12:36:42.233Z"},{"number":"0.0.10","date":"2016-09-30T04:59:01.903Z"},{"number":"1.0.0","date":"2016-09-30T09:15:57.817Z"},{"number":"1.0.1","date":"2017-01-30T07:26:15.355Z"},{"number":"1.0.2","date":"2017-03-28T09:20:51.514Z"},{"number":"1.0.3","date":"2017-05-04T12:23:20.178Z"},{"number":"1.0.4","date":"2017-05-05T03:33:42.488Z"}],"readme":"# node-red-contrib-lifx-api\r\n[![npm version](https://badge.fury.io/js/node-red-contrib-lifx-api.svg)](https://badge.fury.io/js/node-red-contrib-lifx-api)\r\n\r\nA collection of [Node-RED](http://nodered.org/) nodes to control [LIFX](http://www.lifx.com/) globes using the HTTP Remote Control API.\r\n\r\n## Installation\r\nRun the following command in the root directory of your Node-RED install\r\n\r\n    npm install node-red-contrib-lifx-api\r\n\r\n## HTTP versus LAN\r\nLIFX has two methods of interacting with their globes:\r\n* HTTP Remote Control API\r\n* LAN Protocol\r\n\r\nThe Node-RED node [node-red-contrib-lifx2](https://www.npmjs.com/package/node-red-contrib-lifx2) is based on the LAN Protocol, while\r\nthese nodes utilize the HTTP Remote Control API.  The HTTP API allows the\r\nimplementation to be on a different network e.g. on Bluemix, and provides\r\nhigher level operations, such as:\r\n* Breathe effect - slowly fading between two colours\r\n* Pulse effect - quickly flashing between two colours\r\n* Activate scene - activates a scene from the users account\r\n\r\n## Pre-requisites\r\nYou will need a LIFX access token - see [LIFX Developer Documentation](https://api.developer.lifx.com/docs/authentication).  \r\n\r\nRate limiting is performed by LIFX on a per user, per application basis, effectively making it per access token.\r\n\r\nCurrently, each access token is limited to 60 requests for a 60 second window, however this may change in the future.\r\n\r\nIf you breach the rate limit, you will receive a status code of `429 Too Many Requests`.\r\n\r\n## Usage\r\nSeparate nodes are provided for each of the capabilities of the LIFX HTTP Remote Control API.\r\nEach node can be configured, or can receive settings in the triggering `msg`.\r\n\r\nRefer to the LIFX documentation for [Selectors](https://api.developer.lifx.com/docs/selectors) and [Colors](https://api.developer.lifx.com/docs/colors).\r\n\r\n### List Lights\r\nGets lights belonging to the authenticated account. Filter the lights using selectors.\r\nProperties such as id, label, group and location can be used in selectors.\r\n\r\nSample input `msg.payload`:\r\n\r\n    {\r\n        \"selector\": \"all\"\r\n    }\r\n\r\nSample output `msg.payload`:\r\n\r\n    [\r\n      {\r\n        \"id\": \"d3b2f2d97452\",\r\n        \"uuid\": \"8fa5f072-af97-44ed-ae54-e70fd7bd9d20\",\r\n        \"label\": \"Left Lamp\",\r\n        \"connected\": true,\r\n        \"power\": \"on\",\r\n        \"color\": {\r\n          \"hue\": 250.0,\r\n          \"saturation\": 0.5,\r\n          \"kelvin\": 3500\r\n        },\r\n        \"brightness\": 0.5,\r\n        \"group\": {\r\n          \"id\": \"1c8de82b81f445e7cfaafae49b259c71\",\r\n          \"name\": \"Lounge\"\r\n        },\r\n        \"location\": {\r\n          \"id\": \"1d6fe8ef0fde4c6d77b0012dc736662c\",\r\n          \"name\": \"Home\"\r\n        },\r\n        \"last_seen\": \"2015-03-02T08:53:02.867+00:00\",\r\n        \"seconds_since_seen\": 0.002869418,\r\n        \"product\": {\r\n          \"name\": \"Original 1000\",\r\n          \"company\": \"LIFX\",\r\n          \"identifier\": \"lifx_original_1000\",\r\n          \"capabilities\": {\r\n            \"has_color\": true,\r\n            \"has_variable_color_temp\": true\r\n          }\r\n        }\r\n      }\r\n    ]\r\n\r\n### Set State\r\nSets the state of the lights within the selector. All parameters (except for the selector) are optional. If you don't supply a parameter, the node will leave that value untouched.\r\n\r\nSample input `msg.payload`:\r\n\r\n    {\r\n        \"selector\": \"label:Lamp\",\r\n        \"power\": \"on\",\r\n        \"color\": \"blue saturation:0.5\",\r\n        \"brightness\": 0.5,\r\n        \"duration\": 5\r\n    }\r\n\r\n\r\n### Set States\r\nThis node allows you to set different states on multiple selectors in a single request.\r\n\r\nEach hash in `states` is comprised of a state hash as per Set State.\r\n\r\nYou can optionally use the defaults hash to specify the base hash that each state hash is built from.\r\n\r\nSample input `msg.payload`:\r\n\r\n    {\r\n        \"states\": [\r\n            {\r\n              \"selector\": \"label:Lamp\",\r\n              \"power\": \"on\"\r\n            },\r\n            {\r\n              \"selector\": \"label:Casual Table\",\r\n              \"brightness\": 0.5\r\n            }\r\n        ],\r\n            \"defaults\": {\r\n            \"duration\": 5.0 // all states will be applied over 5 seconds\r\n        }\r\n    }\r\n\r\n### Toggle Power\r\nTurn off lights if any of them are on, or turn them on if they are all off. All lights matched by the selector will share the same power state after this action. Physically powered off lights are ignored.\r\n\r\nSample input `msg.payload`:\r\n\r\n    {\r\n        \"selector\": \"label:Lamp\"\r\n    }\r\n\r\n### Breathe Effect\r\nPerforms a breathe effect by slowly fading between the given colors.\r\n\r\nSample input `msg.payload`:\r\n\r\n    {\r\n        \"selector\": \"label:Lamp\",\r\n        \"color\": \"white\",\r\n        \"from_color\": \"red\",\r\n        \"period\": 1,\r\n        \"cycles\": 5,\r\n        \"persist\": false,\r\n        \"power_on\": true,\r\n        \"peak\": 0.5\r\n    }\r\n\r\n### Pulse Effect\r\nPerforms a pulse effect by quickly flashing between the given colors.\r\n\r\nSample input `msg.payload`:\r\n\r\n    {\r\n        \"selector\": \"label:Lamp\",\r\n        \"color\": \"white\",\r\n        \"from_color\": \"red\",\r\n        \"period\": 1,\r\n        \"cycles\": 5,\r\n        \"persist\": false,\r\n        \"power_on\": true\r\n    }\r\n\r\n### Cycle\r\nThis node lets you easily have a set of lights transition to the next state in a list of states you supply without having to implement client side logic to calculate the next state in the sequence.\r\n\r\nThe API scores each state hash against the current states of all the lights in the selector, and if the score is high enough to be considered a match, it will apply the next state in the list, looping back to the first one if necessary. If there's no close match, it will apply the closest state to the selector.\r\n\r\nThe optional direction parameter determines the direction the API uses to determine the next state.\r\n\r\nSample input `msg.payload`:\r\n\r\n    {\r\n      \"selector\": \"label:Lamp\",\r\n      \"states\": [\r\n        {\r\n          \"brightness\": 1.0\r\n        },\r\n        {\r\n          \"brightness\": 0.5\r\n        },\r\n        {\r\n          \"brightness\": 0.1\r\n        },\r\n        {\r\n          \"power\": \"off\"\r\n        }\r\n      ],\r\n      \"defaults\": {\r\n        \"power\": \"on\",\r\n        \"saturation\": 0,\r\n        \"duration\": 2.0\r\n      }\r\n    }\r\n","created":"2016-09-26T11:37:23.016Z","modified":"2017-05-05T03:33:42.488Z","lastPublisher":{"name":"alisdairjsmyth","email":"alisdair.smyth@gmail.com"},"owners":[{"name":"alisdairjsmyth","email":"alisdair.smyth@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"node-red-contrib-lifx-api","_nodeVersion":"6.9.5","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-red-contrib-lifx-api-1.0.4.tgz_1493955222229_0.5021733730100095"},"_npmUser":{"name":"alisdairjsmyth","email":"alisdair.smyth@gmail.com"},"_npmVersion":"3.10.10","_rev":"5-f0c6702524cfe98415a7300301306fa3","_shasum":"5a5c1f5394ee17b5118241f0fb4fe764d9f09bcc","author":{"name":"Alisdair Smyth","email":"alisdair.smyth@gmail.com"},"bugs":{"url":"https://github.com/alisdairjsmyth/node-red-contrib-lifx-api/issues"},"directories":{},"dist-tags":{"latest":"1.0.4"},"dist":{"shasum":"5a5c1f5394ee17b5118241f0fb4fe764d9f09bcc","tarball":"https://registry.npmjs.org/node-red-contrib-lifx-api/-/node-red-contrib-lifx-api-1.0.4.tgz"},"maintainers":[{"name":"alisdairjsmyth","email":"alisdair.smyth@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-05T03:33:42.488Z","created":"2016-09-26T11:37:23.016Z","0.0.1":"2016-09-26T11:37:23.016Z","0.0.2":"2016-09-27T23:28:21.387Z","0.0.3":"2016-09-28T01:13:24.859Z","0.0.4":"2016-09-28T07:22:26.708Z","0.0.5":"2016-09-28T10:16:01.641Z","0.0.6":"2016-09-28T10:58:00.613Z","0.0.7":"2016-09-28T11:11:26.826Z","0.0.8":"2016-09-28T11:20:10.773Z","0.0.9":"2016-09-29T12:36:42.233Z","0.0.10":"2016-09-30T04:59:01.903Z","1.0.0":"2016-09-30T09:15:57.817Z","1.0.1":"2017-01-30T07:26:15.355Z","1.0.2":"2017-03-28T09:20:51.514Z","1.0.3":"2017-05-04T12:23:20.178Z","1.0.4":"2017-05-05T03:33:42.488Z"}}}