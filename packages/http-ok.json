{"name":"http-ok","version":"1.0.4","description":"A simple promise based http client which rejects the promise when the status ode is not 200 - OK","main":"dist/http_ok.js","scripts":{"watch":"parallelshell 'npm run flow' 'npm run build-watch' 'npm run test-watch'","flow":"chokidar src/*.js -c flow","build":"babel src --out-dir=dist","build-watch":"babel --watch=./src --out-dir=./dist","test":"mocha","test-watch":"mocha -w 'test/*.spec.js' 'dist/*.js'","report":"istanbul cover _mocha -- -R spec test/*.js","coverage":"istanbul cover _mocha --report lcovonly -- -R spec test/*.js && cat ./coverage/lcov.info | coveralls"},"repository":"https://github.com/codedearta/http-ok","keywords":["http","fetch","promise","reject","status","ok","200","error"],"license":"MIT","homepage":"https://github.com/codedearta/http-ok#readme","devDependencies":{"babel-plugin-transform-flow-strip-types":"^6.14.0","chokidar-cli":"^1.2.0","coveralls":"^2.11.14","flow-bin":"^0.32.0","istanbul":"^0.4.5","mocha":"^3.0.2","parallelshell":"^2.0.0"},"gitHead":"4781b44372d1c75f6beb1be627b2d7772dacf598","versions":[{"number":"1.0.0","date":"2016-09-20T20:58:28.125Z"},{"number":"1.0.1","date":"2016-09-23T12:37:13.675Z"},{"number":"1.0.2","date":"2016-09-23T12:48:21.658Z"},{"number":"1.0.4","date":"2016-09-23T12:51:39.106Z"}],"readme":"http-ok\n==========\n\n[![npm version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[coverage status][coveralls-url]\n\nA simple promise based http client which rejects the promise when the status is not 200 - OK\n\n## Motivation\n\nInstead of having if-statements to check the http status code when a request returns, http-ok rejects the promise when the status code is not as expected (by default 200). This should make the promise chain look much simpler and more focused on the succes flow.\n\n#### Example using 'http-ok':\n```javascript\nconst HttpOk = require(\"http-ok\")\nconst client = new HttpOk(); \n\nclient.get('www.google.com')\n  .then(response => {\n    /// process here the response\n  })\n  .catch(error => {\n    /// error handling here\n  }\n});\n```\n\n#### Example using a http-client like 'node-fetch':\n```javascript\nconst fetch = require(\"node-fetch\");\n\nfetch('www.google.com')\n  .then(response => {\n      if(response.statusCode === 200) {\n        /// process here the response\n      } else {\n        // error handling here\n      }\n    }\n  ).catch(err => {\n  \t// error handling here\n  });\n\n```\n\n# Features\n\n- More natural promise chain by rejecting the promise when the response code is not OK\n- Stay consistent with `node http` API. Uses the same request options object.\n- Use native promise.\n\n\n# Difference from node-fetch\n\n- See [Link to Header](#motivation) for details.\n\n# Install\n\n`npm install http-ok --save`\n\n# Usage\n\n#### plain text or html\n```javascript\nconst HttpOk = require('http-ok');\nconst client = new HttpOk();\n\nclient.get('https://github.com/')\n\t.then(res => res.text())\n\t.then(bodyText => console.log(bodyText))\n\t.catch(err => console.log(err));\n```\n\n#### json response\n```javascript\nclient.get('https://api.github.com/users/github')\n\t.then(res => res.json())\n\t.then(json => console.log(json))\n\t.catch(err => console.log(err));\n```\n\n#### post with form data and custom headers\n```javascript\nconst querystring = require('querystring');\nconst formData = { \n    name: 'Bob Mc Bobson', \n    place: 'Cheddar' \n};\nconst postData = querystring.stringify(formData);\n\nconst requestOptions = {\n    hostname: 'http://httpbin.org',\n    headers: {\n         'Content-Type': 'application/x-www-form-urlencoded',\n         'Content-Length': Buffer.byteLength(postData)\n    }\n};\n\nclient.post(requestOptions, postData, 200)\n\t.then(res => {\n\t\t// process here the response\n\t}).catch(json => {\n\t\t// error handling here\n\t});\n```\n\n#### specific success case eg. 302\n```javascript\nclient.get('http://redirected.com', 302)\n     .then(response => {\n         // process here the response\n     }).catch(error => {\n         // error handling here\n     });\n```\n\nSee [test cases](https://github.com/codedearta/http-ok/tree/master/test) for more examples.\n\n# API\n\n- get(url) // default 200\n- get(url, expectedStatusCode)\n- get(options, expectedStatusCode)\n\n- post(url, postData) // default 200\n- post(url, postData, expectedStatusCode)\n- post(options, postData, expectedStatusCode)\n\nReturns a `Promise`\n\n### url\n\nShould be an absolute url, eg `http://example.com`\n\n### options\n\nsame as node.js http.request options.\n\n### expectedStatusCode\n\nand integer eg `200` or `301`\n\n### postData\n\nurl encoded string\n\n# License\n\nMIT\n\n[npm-image]: https://badge.fury.io/js/http-ok.svg\n[npm-url]: https://www.npmjs.com/package/http-ok\n[travis-image]: https://travis-ci.org/codedearta/http-ok.svg?branch=master\n[travis-url]: https://travis-ci.org/codedearta/http-ok\n[coveralls-image]: https://coveralls.io/repos/github/codedearta/http-ok/badge.svg?branch=master\n[coveralls-url]: https://coveralls.io/github/codedearta/http-ok\n","created":"2016-09-20T20:58:28.125Z","modified":"2016-09-23T12:51:39.106Z","lastPublisher":{"name":"sepprenfer","email":"sepp.renfer@gmail.com"},"owners":[{"name":"sepprenfer","email":"sepp.renfer@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-ok","_nodeVersion":"6.6.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/http-ok-1.0.4.tgz_1474635098029_0.48848274489864707"},"_npmUser":{"name":"sepprenfer","email":"sepp.renfer@gmail.com"},"_npmVersion":"3.10.3","_rev":"1-432d06f24833af7e8183b6be4110f2c2","_shasum":"b24ffb053439aafdbbdd1a54770947be7975be26","author":{"name":"Sepp Renfer"},"bugs":{"url":"https://github.com/codedearta/http-ok/issues"},"directories":{},"dist-tags":{"latest":"1.0.4"},"dist":{"shasum":"b24ffb053439aafdbbdd1a54770947be7975be26","tarball":"http://registry.npmjs.org/http-ok/-/http-ok-1.0.4.tgz"},"maintainers":[{"name":"sepprenfer","email":"sepp.renfer@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-09-23T12:51:39.106Z","created":"2016-09-20T20:58:28.125Z","1.0.0":"2016-09-20T20:58:28.125Z","1.0.1":"2016-09-23T12:37:13.675Z","1.0.2":"2016-09-23T12:48:21.658Z","1.0.4":"2016-09-23T12:51:39.106Z"}}}