{"name":"bench-warmer","version":"0.1.0","description":"A nearly-complete test bench for the NodeJS HTTP interface","main":"lib","scripts":{"test":"mocha","lint":"eslint bin/* lib/*"},"repository":"https://github.com/volcano-lair/bench-warmer","license":"MIT","devDependencies":{"eslint":"^3.11.1","eslint-config-rapid7":"^2.6.0","eslint-plugin-import":"^2.2.0","eslint-plugin-react":"^6.7.1"},"homepage":"https://github.com/volcano-lair/bench-warmer#readme","gitHead":"e628133ce6028cb2d6753d13549571976073c124","versions":[{"number":"0.1.0","date":"2017-01-04T17:28:15.452Z"}],"readme":"Bench Warmer\n============\n\n_A nearly-complete test bench for the NodeJS HTTP interface._\n\n[![Build Status](https://travis-ci.org/volcano-lair/bench-warmer.svg?branch=master)](https://travis-ci.org/volcano-lair/bench-warmer)\n\n[NPM Package](https://www.npmjs.com/package/bench-warmer)\n\n**Rule The First of Unit Testing:** _Thou shalt not create any network sockets_\n\n**Rule The Second of Unit Testing:** _GOTO Rule The First of Unit Testing_\n\n## Bench.Server\n\nCreate an interface for testing server request handlers, like an Express app.\n\n```javascript\nconst app = Express();\nconst server = Bench.createServer(app)\n\n// Attach some body-parser middleware (https://github.com/expressjs/body-parser)\napp.use(BodyParser.raw());\n\napp.get('/', (req, res) => res.send('hello!'));\napp.post('/', (req, res) => {\n\n  res.send('hello!');\n});\n\nserver.request({ path: '/' })\n  .spread((req, res) => {\n    /* do unit tests here! */\n  })\n  .then(() => server.request({\n    path: '/', method: 'POST'\n  }, (req) => {\n    req.write('this is a test!');\n    req.end();\n  }))\n  .spread((req, res) => {\n    expect(res.statusCode).to.equal(200);\n  });\n```\n\n`Bench.createServer(onRequest)` returns an instance of `Bench.Server`. Calling `#request(params, before)` on the `Server` instance returns an extension of `Promise` with a `#spread()` helper. The Promise resolves with the IncomingMessage (request) and ServerResponse instances that were passed through the code under test for assertion testing.\n\nMocha handles promises in test cases, allowing the result of a request to be returned for asynchronous control:\n\n```javascript\ndescribe('An HTTP test', function() {\n  const app = Express();\n  const server = Bench.createServer(app)\n\n  it('does something', function() {\n    return server.request({/* params */})\n      .spread((req, res) => {\n        expect(res.statusCode).to.equal(200);\n      });\n  });\n});\n```\n\n## Bench.Wire\n\nThe `Wire` class provides a simulated, observable channel between client and server interfaces. It can be used to test client code in isolation, or to simulate interactions between client and server modules without any network resources.\n\n```javascript\nconst client = new Client(/* ... */);\nconst app = Express();\nconst wire = Bench.createWire(app);\n\n/*\n * Client libraries must provide an interface to inject a `Wire`\n * instance as their `#request()` provider. This assumes that\n * `client._provider` was a reference to something like `HTTP`.\n */\nclient._provider = wire;\n\n/*\n * The Wire instance emits events to tap client request and server\n * response events for testing\n */\nwire.once('request', (req) => {\n  expect(req.path).to.equal('something')\n});\n\nwire.once('response', (res) => {\n  expect(res.statusCode).to.equal(200)\n});\n\n/*\n * Call the client interface's methods to make and capture\n * request/response interactions.\n */\nclient.makeSomeRequest(/* parameters */)\n```\n\n## Bench.Reader\n\nThe `Reader` class is a helper for aggregating data from `Readable` streams for testing.\n\n```javascript\n/*\n * A Wire instance can be used to unit-test client interactions without any\n * reciprocal server code.\n */\nconst wire = Bench.createWire((req, res) => {\n  Bench.createReader(req, (reader) => {\n    expect(reader.body).to.equal('content');\n\n    res.write('stuff');\n    res.end();\n  })\n});\nconst client = new Client(/* ... */);\n\nclient._provider = wire;\n\n// ...\n```\n","created":"2017-01-04T17:28:15.452Z","modified":"2017-01-04T17:28:15.452Z","lastPublisher":{"name":"jmanero","email":"john.manero@gmail.com"},"owners":[{"name":"jmanero","email":"john.manero@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"bench-warmer","_nodeVersion":"6.9.3","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/bench-warmer-0.1.0.tgz_1483550893147_0.7741430380847305"},"_npmUser":{"name":"jmanero","email":"john.manero@gmail.com"},"_npmVersion":"3.10.10","_rev":"1-ba8fdf70b3271dcd2c64b1d5577f0741","_shasum":"94cf0be95bb7cb3e6e0b728bde1b38639f3d6bb8","author":{"name":"John Manero","email":"john.manero@gmail.com"},"bugs":{"url":"https://github.com/volcano-lair/bench-warmer/issues"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"94cf0be95bb7cb3e6e0b728bde1b38639f3d6bb8","tarball":"http://registry.npmjs.org/bench-warmer/-/bench-warmer-0.1.0.tgz"},"maintainers":[{"name":"jmanero","email":"john.manero@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-01-04T17:28:15.452Z","created":"2017-01-04T17:28:15.452Z","0.1.0":"2017-01-04T17:28:15.452Z"}}}