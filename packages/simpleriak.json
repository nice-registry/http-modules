{"name":"simpleriak","version":"0.1.10","description":"a very simple riak http client","main":"index.js","dependencies":{"request":"~2.11.1","async":"~0.1.22"},"devDependencies":{"should":"~1.1.0","mocha":"~1.4.2","precommit-hook":"~0.1.0"},"scripts":{"test":"node test"},"repository":"https://github.com/nlf/node-simpleriak","homepage":"https://github.com/nlf/node-simpleriak","keywords":["riak"],"license":"MIT","readme":"SimpleRiak is a very simple riak HTTP client. It wraps request and simplifies the calls made to riak as much as possible.\n\nUsage\n=====\n\nInstallation\n------------\n\n```\nnpm install simpleriak\n```\n\nObject creation\n---------------\n\nHost, port, and bucket are all optional. Host defaults to localhost and port to 8098.\nIf bucket is present, it sets the default bucket to be used in future calls. If you don't set the\nbucket here, you must specify it in each call you make. Specifying a bucket in a call always takes\nprecedence over the default.\n\n```javascript\nvar riak = require('simpleriak').createClient({ host: 'localhost', port: 8098, bucket: 'test' });\n```\n\nCallbacks\n---------\n\nEvery function returns the same callback pattern (err, reply).\n\nerr will be an Error object if any error is present\nreply is an object containing the following keys\n* \"statusCode\" will be the HTTP status code returned from riak\n* \"data\" will be the body of the HTTP response from riak\n* \"headers\" is the complete HTTP headers returned from riak\n* \"key\" when a location header is present, this property will contain the key in the header\n\nList buckets\n------------\n\n```javascript\nriak.getBuckets(function (err, reply) {\n    console.log(reply.data);\n});\n```\n\nList keys\n---------\n\n```javascript\nriak.getKeys({ bucket: 'test2' }, function (err, reply) {\n    console.log(reply.data);\n});\n```\n\nList keys (matching an index)\n-----------------------------\n\n```javascript\nriak.getKeys({ index: 'count', start: 5, end: 10 }, function (err, reply) {\n    console.log(reply.data);\n});\n```\n\nWhen using an index, you may either specify a start and end to be used with riak's range finding, or\na key which will search for an exact match.\n\nGet bucket properties\n---------------------\n\n```javascript\nriak.getBucket(function (err, reply) {\n    console.log(reply.data); // gets default bucket properties\n});\n```\n\nSet bucket properties\n---------------------\n\n```javascript\nriak.setBucket({ allow_mult: false }, function (err, reply) {\n    console.log(err); // reply.data should be empty for this call\n});\n```\n\nYou can specify any editable property for a bucket.\n\nGet data (by key)\n-----------------\n\n```javascript\nriak.get({ key: 'test' }, function (err, reply) {\n    console.log(reply.data); // returns { example: 'object' }\n});\n```\n\nGet data (by index)\n-------------------\n\n```javascript\nriak.get({ index: 'creator', key: 'me' }, function (err, reply) {\n    console.log(reply.data); // returns ['i put this here']\n});\n```\n\nWhen fetching data by index, the reply data will always be an array. This usage is actually an interface to the MapReduce\nfunction (described later) that fetches the keys and uses the Riak.mapValuesJson map phase to return data\n\nStore data (Riak created key)\n-----------------------------\n\n```javascript\nriak.put({ data: 'wee, a string!' }, function (err, reply) {\n    console.log(reply.key); // the key riak created\n});\n```\n\n\nStore data (User specified key)\n-------------------------------\n\n```javascript\nriak.put({ key: 'test', data: { example: 'object' } }, function (err, reply) {\n    console.log(err);\n});\n```\n\nStore data (with an index)\n--------------------------\n\n```javascript\nriak.put({ index: { creator: 'me' }, data: 'i put this here' }, function (err, reply) {\n    console.log(reply.key);\n});\n```\n\nYou can specify as many indexes as you like, the property name will be the index and its value the key.\n\nDelete a key\n------------\n\n```javascript\nriak.del({ key: 'creator' }, function (err, reply) {\n    console.log(err);\n});\n```\n\nNote that this function does not work with an index, this is by design. If you need to delete all keys\nthat match an index, use getKeys and iterate the results.\n\nMapReduce\n---------\n\n```javascript\nfunction map(v, keyData, arg) {\n    var ret = [],\n        index = v.values[0].metadata.index;\n\n    if (index.creator_bin === arg) ret.push(JSON.parse(v.values[0].data));\n    return ret;\n};\n\nriak.mapred({ map: { source: map, arg: 'me' } }, function (err, reply) {\n    console.log(reply.data); // ['i put this here']\n});\n```\n\nThe MapReduce function can take map and reduce phases as either an object (shown above), a string\n\n```javascript\nriak.mapred({ map: 'Riak.mapValuesJson' }, callback);\n```\n\nor a function directly\n\n```javascript\nriak.mapred({ map: map }, callback);\n```\n\nYou may specify a bucket, a bucket and key, or a bucket and an index using an exact match or range.\n\n```javascript\nriak.mapred({ bucket: 'test2', map: 'Riak.mapValuesJson' }, callback);\nriak.mapred({ key: 'test', map: 'Riak.mapValuesJson' }, callback); // default bucket is used\nriak.mapred({ index: 'creator', key: 'me', map: 'Riak.mapValuesJson' }, callback);\n```\n\nPing\n----\n\n```javascript\nriak.ping(function (err, reply) {\n    console.log(reply.data); // 'OK'\n});\n```\n\nStats\n-----\n\n```javascript\nriak.stats(function (err, reply) {\n    console.log(reply.data); // full stats object returned from riak\n});\n```\n\nResources\n---------\n\n```javascript\nriak.resources(function (err, reply) {\n    console.log(reply.data); // full resources information from riak\n});\n```\n","versions":[{"number":"0.0.1","date":"2012-09-08T21:17:51.695Z"},{"number":"0.0.2","date":"2012-09-10T23:02:37.815Z"},{"number":"0.0.3","date":"2012-09-11T19:29:34.278Z"},{"number":"0.0.4","date":"2012-09-12T20:19:58.270Z"},{"number":"0.0.5","date":"2012-09-12T21:13:07.962Z"},{"number":"0.0.6","date":"2012-09-12T21:54:00.323Z"},{"number":"0.0.7","date":"2012-09-12T23:44:26.206Z"},{"number":"0.0.8","date":"2012-09-13T16:32:57.037Z"},{"number":"0.0.9","date":"2012-09-14T17:11:47.344Z"},{"number":"0.0.10","date":"2012-09-14T18:23:00.603Z"},{"number":"0.0.11","date":"2012-09-26T17:55:23.229Z"},{"number":"0.0.12","date":"2012-10-17T23:40:11.540Z"},{"number":"0.0.13","date":"2012-10-30T18:35:10.995Z"},{"number":"0.0.14","date":"2012-10-31T21:11:31.775Z"},{"number":"0.0.15","date":"2012-11-07T19:13:45.293Z"},{"number":"0.0.16","date":"2012-11-07T19:23:53.326Z"},{"number":"0.0.17","date":"2012-11-07T21:28:48.244Z"},{"number":"0.0.18","date":"2012-11-12T23:55:24.090Z"},{"number":"0.0.19","date":"2012-11-13T01:10:43.143Z"},{"number":"0.0.20","date":"2012-11-14T00:41:00.278Z"},{"number":"0.0.21","date":"2012-11-14T19:44:33.928Z"},{"number":"0.0.22","date":"2012-11-16T15:19:43.962Z"},{"number":"0.0.23","date":"2012-11-19T19:26:17.474Z"},{"number":"0.1.0","date":"2012-11-20T23:39:57.434Z"},{"number":"0.1.1","date":"2012-11-21T01:06:54.725Z"},{"number":"0.1.2","date":"2012-11-21T16:14:16.679Z"},{"number":"0.1.3","date":"2012-11-21T18:04:22.235Z"},{"number":"0.1.4","date":"2012-11-26T20:25:20.139Z"},{"number":"0.1.5","date":"2012-11-27T01:39:35.834Z"},{"number":"0.1.6","date":"2012-12-05T07:47:51.647Z"},{"number":"0.1.7","date":"2012-12-06T00:37:48.935Z"},{"number":"0.1.8","date":"2013-01-30T18:50:48.163Z"},{"number":"0.1.9","date":"2013-03-12T16:33:28.592Z"},{"number":"0.1.10","date":"2013-03-13T17:30:34.517Z"}],"created":"2012-09-08T21:17:50.051Z","modified":"2013-09-25T19:25:59.798Z","lastPublisher":{"name":"nathan-lafreniere","email":"quitlahok@gmail.com"},"owners":[{"name":"nlf","email":"quitlahok@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"simpleriak","_npmUser":{"name":"nathan-lafreniere","email":"quitlahok@gmail.com"},"_npmVersion":"1.2.10","_rev":"1-2491c961a90f58f85eeead182265ab3b","author":{"name":"Nathan LaFreniere","email":"quitlahok@gmail.com"},"bugs":{"url":"https://github.com/nlf/node-simpleriak/issues","email":"quitlahok@gmail.com"},"directories":{},"dist-tags":{"latest":"0.1.10"},"dist":{"shasum":"b4db3fe24dc5d247c2932ca8d865b82a2b777a5f","tarball":"http://registry.npmjs.org/simpleriak/-/simpleriak-0.1.10.tgz"},"maintainers":[{"name":"nlf","email":"quitlahok@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2013-09-25T19:25:59.798Z","created":"2012-09-08T21:17:50.051Z","0.0.1":"2012-09-08T21:17:51.695Z","0.0.2":"2012-09-10T23:02:37.815Z","0.0.3":"2012-09-11T19:29:34.278Z","0.0.4":"2012-09-12T20:19:58.270Z","0.0.5":"2012-09-12T21:13:07.962Z","0.0.6":"2012-09-12T21:54:00.323Z","0.0.7":"2012-09-12T23:44:26.206Z","0.0.8":"2012-09-13T16:32:57.037Z","0.0.9":"2012-09-14T17:11:47.344Z","0.0.10":"2012-09-14T18:23:00.603Z","0.0.11":"2012-09-26T17:55:23.229Z","0.0.12":"2012-10-17T23:40:11.540Z","0.0.13":"2012-10-30T18:35:10.995Z","0.0.14":"2012-10-31T21:11:31.775Z","0.0.15":"2012-11-07T19:13:45.293Z","0.0.16":"2012-11-07T19:23:53.326Z","0.0.17":"2012-11-07T21:28:48.244Z","0.0.18":"2012-11-12T23:55:24.090Z","0.0.19":"2012-11-13T01:10:43.143Z","0.0.20":"2012-11-14T00:41:00.278Z","0.0.21":"2012-11-14T19:44:33.928Z","0.0.22":"2012-11-16T15:19:43.962Z","0.0.23":"2012-11-19T19:26:17.474Z","0.1.0":"2012-11-20T23:39:57.434Z","0.1.1":"2012-11-21T01:06:54.725Z","0.1.2":"2012-11-21T16:14:16.679Z","0.1.3":"2012-11-21T18:04:22.235Z","0.1.4":"2012-11-26T20:25:20.139Z","0.1.5":"2012-11-27T01:39:35.834Z","0.1.6":"2012-12-05T07:47:51.647Z","0.1.7":"2012-12-06T00:37:48.935Z","0.1.8":"2013-01-30T18:50:48.163Z","0.1.9":"2013-03-12T16:33:28.592Z","0.1.10":"2013-03-13T17:30:34.517Z"}}}