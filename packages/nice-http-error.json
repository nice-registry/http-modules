{"name":"nice-http-error","version":"1.1.0","description":"Provides Simple interface for creating errors and associating them with an accepted http status code.","main":"nice-error.js","scripts":{"coverage":"JUNIT_REPORT_PATH=report.xml JUNIT_REPORT_STACK=1 istanbul cover -x 'nice-error.test.js' _mocha -- --reporter mocha-jenkins-reporter 'nice-error.test.js'","lint":"gulp lint","lint:live":"gulp lint-watch --cont=true","test:live":"mocha -R spec --recursive -w 'nice-error.test.js'","test":"mocha 'nice-error.test.js'"},"repository":"https://github.com/BobbieBarker/nice-error","devDependencies":{"bluebird":"^3.4.0","chai":"^3.5.0","chai-as-promised":"^5.3.0","eslint":"^2.9.0","eslint-config-bobbiebarker":"git+ssh://git@github.com/BobbieBarker/custom-eslint-rules.git","eslint-plugin-import":"^1.8.0","gulp":"^3.9.1","gulp-cached":"^1.1.0","gulp-chmod":"^1.3.0","gulp-cli":"^1.2.1","gulp-eslint":"^2.0.0","gulp-if":"^2.0.0","gulp-rename":"^1.2.2","istanbul":"^0.4.3","mocha":"^2.4.5","mocha-bamboo-reporter":"*","proxyquire":"^1.7.9","sinon":"^1.17.4","sinon-as-promised":"^4.0.0","sinon-bluebird":"^3.0.1","sinon-chai":"^2.8.0","supertest":"^1.2.0","yargs":"^4.6.0"},"license":"MIT","homepage":"https://github.com/BobbieBarker/nice-error.git#readme","engines":{"node":">=4.0.0"},"gitHead":"5f3a0c33dcf9b78dff7c4070b392f4864f9ffc1d","versions":[{"number":"1.0.0","date":"2016-11-04T03:08:54.044Z"},{"number":"1.0.1","date":"2016-11-07T04:03:52.011Z"},{"number":"1.1.0","date":"2017-03-28T04:16:45.228Z"}],"readme":"# Nice Custom Rest Errors\n\nCreate custom errors to supply meaningful error messages in response bodies, and clear readable logs. Nice Error extends the javascript Error class allowing for the creation of high quality custom errors.\n\n## Installation:\n\n```\nnpm install nice-http-error --save\n```\n\n## API:\n\n### create\ncreate is a static class method to be used as a convenience for instantiating new instances of Nice Error.\n\n```javascript\nconst niceError = require('nice-http-error');\nniceError.create('A problem', {\n  code: 'Special Error',\n  detail: 'You made a big Mistake',\n  status: 'BAD_REQUEST',\n  error: anErrorObject\n})\n```\n\nNice Error can be passed two arguments. The first argument, the \"message\", is required. The message should be a very short terse description of the error. The second argument is an options object. All of it's properties are optional. The options object should conform to the following\ncontract:\n\n```\n {\n code: \"optional - string\", // slugified-error-code, use this to lookup against localization service for display\n detail: 'optional - string', //short helpful description of the problem to aid in debugging\n error: 'optional - error object', //error object to be encapsulated into NiceError.metadata\n status: 'optional - string', //String representing an accepted nice http status i.e 'BAD_REQUEST', 'SERVICE_UNAVAILABLE'\n }\n```\n\nCreate will return a new error object of the type NiceError. It is important to note the behavior around status. Nice Error will only enumerate http status codes from this list:\n\n```\nBAD_REQUEST: 400,\nUNAUTHORIZED: 401,\nREQUEST_FAILED: 402,\nFORBIDDEN: 403,\nNOT_FOUND: 404,\nGONE: 410,\nRESOURCE_NOT_FOUND: 420,\nINTERNAL_ERROR: 500,\nSERVICE_UNAVAILABLE: 503,\nGATEWAY_TIMEOUT: 504\n```\n\nIf Anything else is passed in, or if nothing is passed in at all, it will default to a Internal Server Error/500.\n\n### from:\nFrom is a static class method to verify that your error is a nice error. If you pass it an instance of NiceError it will simply return that same instance back to you. If you pass it a regular error object, it will encapsulate it, assign it a status code of 500, and return you an instance of Nice Error.\n\n```javascript\nconst niceError = require('nice-http-error');\nniceError.from(error)\n```\n\nThis is important, because obviously if you where to try and check the status code property of a vanilla error object the javascript engine is going to throw an undefined error for the status property.\n\n## Recommended Usage:\nYou should use this any where you're trying to handle explicit errors in a micro service and would like to return a meaningful response body and clean readable logs.\n\nUsing Nice Error in actual code might look something like this:\n\n```javascript\nconst niceError = require('nice-http-error');\nmodule.exports = (pool, products, routeConfig) =>\n  pool.query(releaseInventorySQL, [getInventoryIds(products)])\n  .catch(error => {\n    throw niceError.create('MySQL Error', {\n      detail: 'Error releasing inventory',\n      status: 'BAD_REQUEST',\n      error\n    })\n  });\n```\n\nUsing it to send a response back should look something like this:\n\n```javascript\n.catch(error => {\n  let handledError = niceError.from(error);\n  routeConfig.logger.error(handledError);\n  return res.status(handledError.status).send(handledError);\n});\n```\n\n## Development\n\n```\nrun npmm install //to get started\nnpm run lint:live //--continuous linting\nnpm run test:live //--continuous unit testing.\n```\n","created":"2016-11-04T03:08:54.044Z","modified":"2017-03-28T04:16:45.228Z","lastPublisher":{"name":"bobbiebarker","email":"sirkemera@gmail.com"},"owners":[{"name":"bobbiebarker","email":"sirkemera@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"nice-http-error","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/nice-http-error-1.1.0.tgz_1490674603244_0.13458949979394674"},"_npmUser":{"name":"bobbiebarker","email":"sirkemera@gmail.com"},"_npmVersion":"3.10.8","_rev":"3-3ae1833fe6417ddbc75f7aaf2a6aaacd","_shasum":"c958397722d129c8d829a3e41006db700b3b432a","bugs":{"url":"https://github.com/BobbieBarker/nice-error/issues"},"directories":{},"dist-tags":{"latest":"1.1.0"},"dist":{"shasum":"c958397722d129c8d829a3e41006db700b3b432a","tarball":"https://registry.npmjs.org/nice-http-error/-/nice-http-error-1.1.0.tgz"},"maintainers":[{"name":"bobbiebarker","email":"sirkemera@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-28T04:16:45.228Z","created":"2016-11-04T03:08:54.044Z","1.0.0":"2016-11-04T03:08:54.044Z","1.0.1":"2016-11-07T04:03:52.011Z","1.1.0":"2017-03-28T04:16:45.228Z"}}}