{"name":"fixed-server","description":"Server for HTTP fixtures","version":"0.4.0","homepage":"https://github.com/uber/fixed-server","repository":"https://github.com/uber/fixed-server","licenses":[{"type":"MIT","url":"https://github.com/uber/fixed-server/blob/master/LICENSE-MIT"}],"main":"lib/fixed-server","engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt jshint && mocha"},"dependencies":{"express":"~3.4.7"},"devDependencies":{"mocha":"~1.11.0","grunt":"~0.4.1","grunt-contrib-jshint":"~0.6.0","grunt-contrib-watch":"~0.4.0","request":"~2.30.0","obj-extend":"~0.1.0","chai":"~1.8.1","grunt-cli":"~0.1.11"},"keywords":["fixed","server","http","fixture"],"versions":[{"number":"0.1.0","date":"2014-01-03T01:32:24.020Z"},{"number":"0.2.0","date":"2014-01-05T21:11:15.037Z"},{"number":"0.3.0","date":"2014-02-04T23:38:06.467Z"},{"number":"0.4.0","date":"2014-03-26T21:57:12.583Z"}],"readme":"# fixed-server [![Build status](https://travis-ci.org/uber/fixed-server.png?branch=master)](https://travis-ci.org/uber/fixed-server)\n\nServer for HTTP fixtures\n\nThis was built to make common responses from an API consistent across tests.\n\nFor convenience, there are methods which setup/teardown a server for `mocha` (see [`factory.run`][]).\n\n[`factory.run`]: #factoryrunfixturenames\n\n## Getting Started\nInstall the module with: `npm install fixed-server`\n\n```javascript\n// Create a server that we can setup/teardown during tests\nvar assert = require('assert');\nvar request = require('request');\nvar FixedServer = require('fixed-server');\nvar fixedServer = new FixedServer({port: 1337});\n\n// Create a fixture that we can refer to during the test\n// DEV: `method` and `route` are done via `express` which allows for complex methods/routing\nfixedServer.addFixture('GET 200 /hello', {\n  method: 'get',\n  route: '/hello',\n  response: function (req, res) {\n    res.send('world');\n  }\n});\n\n// Start our test\ndescribe('A server', function () {\n  // Automatically setup/teardown server with our fixture\n  fixedServer.run('GET 200 /hello');\n\n  it('responding to a request', function (done) {\n    request('http://localhost:1337/hello', function (err, res, body) {\n      assert.strictEqual(body, 'world');\n      done();\n    });\n  });\n});\n```\n\n## Documentation\n`fixed-server` exposes `FixedServerFactory` via its `module.exports`. Under the hood, `FixedServer` runs via [`express`][].\n\n[`express`]: http://expressjs.com/\n\n### `new FixedServerFactory(options)`\nConstructor for creating new `FixedServer's`\n\n- options `Object` - Container for options\n    - port `Number` - Port to run created `FixedServer's` from\n\n### `FixedServerFactory.fromFile(filepath, options)`\nHelper to quickly generate a server with fixtures from a file\n\n- filepath `String` - Path to fixtures to load in\n    - This will be loaded via `require` and passed in to `factory.addFixtures`\n- option `Object` - Options to pass to `FixedServerFactory` constructor\n\n#### `factory.addFixture(name, params)`\nAdd a new fixture to the list of potential fixture to load into child servers.\n\n- name `String` - Key to store fixture under\n- params `Object` - Container for fixture info\n    - method `String` - Lowercase HTTP method to run `params.response` under (e.g. `get`, `post`, `put`)\n        - Any valid [`express` method][] is accepted\n    - route `String|RegExp` - Route to run `params.response` under (e.g. `/hello`)\n    - response `Function` - `express` middleware that will handle request and generate response\n        - Function signature must be `(req, res)` as is expected in `express`\n\n[`express` method]: http://expressjs.com/api.html#app.VERB\n\n#### `factory.addFixtures(obj)`\nAdd multiple fixtures to our list of fixtures\n\n- obj `Object` - Container for multiple fixtures\n    - Each key-value pair will be used as `name` and `params` respectively for `FixedServer.addFixtures`\n\n#### `factory.createServer(fixtureNames)`\nCreate a `FixedServer` with `fixtureNames` running on it\n\n- fixtureNames `String|String[]` - Single fixture name or array of fixture names to load into server\n    - Each of these will be loaded via `server.installFixture`\n\n#### `factory.run(fixtureNames)`\nHelper method for running server inside of `mocha` tests\n\n- fixtureNames `String|String[]` - Information to pass onto `factory.createServer`\n\n### `FixedServer(options)`\nCreate a server to host fixtures on\n\n- options `Object` - Container for options\n    - port `Number` - Port to run server from via `.listen()`\n\n#### `server.listen(port)`\nStart listening for requests\n\n- port `Number` - Port to start listening against. If not provided, it will attempt to use `options.port`.\n\n#### `server.destroy(cb)`\nTear down the server\n\n- cb `Function` - Optional error-first callback to run when the server teardown is completed\n\n#### `server.installFixture(fixture)`\nAdd a new route to the server\n\n- fixture `Object` - Container for route parameters\n    - method `String` - Lowercase HTTP method to run `params.response` under (e.g. `get`, `post`, `put`)\n        - Any valid [`express` method][] is accepted\n    - route `String|RegExp` - Route to run `fixture.response` under (e.g. `/hello`)\n    - response `Function` - `express` middleware that will handle request and generate response\n        - Function signature must be `(req, res)` as is expected in `express`\n\n```js\nserver.installFixture({\n  method: 'get',\n  route: '/hello',\n  response: function (req, res) {\n    res.send('world');\n  }\n});\n// converts to\nexpress().get('/hello', function (req, res) {\n  res.send('world');\n});\n```\n\n#### `server.run()`\nHelper method for running the server inside of `mocha` tests\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via [grunt](https://github.com/gruntjs/grunt) and test via `npm test`.\n\n## License\nCopyright (c) 2014 Uber\n\nLicensed under the MIT license.\n","created":"2014-01-03T01:32:18.972Z","modified":"2014-03-26T21:57:12.584Z","lastPublisher":{"name":"twolfson","email":"todd@twolfson.com"},"owners":[{"name":"twolfson","email":"todd@twolfson.com"}],"other":{"_attachments":{},"_from":".","_id":"fixed-server","_npmUser":{"name":"twolfson","email":"todd@twolfson.com"},"_npmVersion":"1.3.21","_rev":"1-dce388fbdf8a88c53934a9891c255f6f","author":{"name":"Todd Wolfson","email":"todd@twolfson.com","url":"http://twolfson.com/"},"bugs":{"url":"https://github.com/uber/fixed-server/issues"},"directories":{},"dist-tags":{"latest":"0.4.0"},"dist":{"shasum":"01102bac135c13187e8a45bbed7265cdf514a16b","tarball":"http://registry.npmjs.org/fixed-server/-/fixed-server-0.4.0.tgz"},"maintainers":[{"name":"twolfson","email":"todd@twolfson.com"}],"readmeFilename":"README.md","time":{"modified":"2014-03-26T21:57:12.584Z","created":"2014-01-03T01:32:18.972Z","0.1.0":"2014-01-03T01:32:24.020Z","0.2.0":"2014-01-05T21:11:15.037Z","0.3.0":"2014-02-04T23:38:06.467Z","0.4.0":"2014-03-26T21:57:12.583Z"}}}