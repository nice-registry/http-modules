{"name":"http-probe","version":"1.0.0","description":"tility for HTTP validation. Implementation is based on the Chrome debugging protocol.","main":"./src/index.js","scripts":{"coveralls":"istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"mocha -r ./test/setup --recursive"},"repository":"https://github.com/NicolasSiver/http-probe","keywords":["chrome","debbuging","selenium","http","mock","validate","webdriver"],"license":"MIT","homepage":"https://github.com/NicolasSiver/http-probe#readme","devDependencies":{"chai":"^3.5.0","chrome-remote-interface":"^0.17.1","coveralls":"^2.11.15","istanbul":"^0.4.5","mocha":"^3.2.0","mocha-lcov-reporter":"^1.2.0","sinon":"^1.17.7"},"gitHead":"0cb59ff756e74a15f218fc3da42ad25ef068aa7c","versions":[{"number":"1.0.0","date":"2017-02-01T01:23:23.961Z"}],"readme":"# HTTP Probe\n\nUtility for HTTP validation. Implementation is based on the Chrome debugging protocol.\n\n![Version](https://img.shields.io/npm/v/http-probe.svg)\n![Dependencies](https://david-dm.org/NicolasSiver/http-probe.svg)\n![bitHound Score](https://www.bithound.io/github/NicolasSiver/http-probe/badges/score.svg)\n![Code Climate](https://codeclimate.com/github/NicolasSiver/http-probe/badges/gpa.svg)\n[![Coverage Status](https://coveralls.io/repos/github/NicolasSiver/http-probe/badge.svg?branch=master)](https://coveralls.io/github/NicolasSiver/http-probe?branch=master)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n \n\n- [Motivation](#motivation)\n- [API](#api)\n  - [`constructor(provider)`](#constructorprovider)\n  - [`getRequest(search)`](#getrequestsearch)\n    - [`RequestResult`](#requestresult)\n  - [`getResponse(search)`](#getresponsesearch)\n    - [`ResponseResult`](#responseresult)\n- [Snapshots](#snapshots)\n- [Links](#links)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Motivation\n\nWhile Selenium provides good set of tools to check UI feedback and states, it lacks tools for HTTP validation. \nHTTP Probe tries to solve an issue with HTTP testing.\n\n## API\n\nCreate an instance of the HTTP Probe. Don't forget to teardown an instance, otherwise `http-probe` will accumulate HTTP requests from every consecutive `getRequest` or `getResponse` invocation.\n\n### `constructor(provider)`\n\n- `provider <Function>` should return an array of performance logs\n\nExample: \n\n```\nconst HttpProbe = require('http-probe');\nlet httpProbe = new HttpProbe(() => myMethodToExtractPerformanceLogs());\n```\n\n### `getRequest(search)`\n\n- `search <String|RegExp>` a pattern which will be executed against an URL\n\nReturns a `Request` entity with several properties:\n\n- `length <Number>`, - total number of matched requests\n- `executed <Boolean>`, - if request was executed at least once\n- `executedOnce <Boolean>`, - if request was executed exactly _once_\n- `executedTwice <Boolean>`, - if request was executed exactly _twice_\n- `executeThrice <Boolean>`, - if request was executed exactly _thrice_\n- `first <RequestResult>`, - a result object for the _first_ request\n- `second <RequestResult>`, - a result object for the _second_ request\n- `third <RequestResult>`, - a result object for the _third_ request\n- `last <RequestResult>`, - a result object for the _last_ request\n\n#### `RequestResult`\n\n- `headers <Object>`, - request's headers\n- `method <String>`, - HTTP method, 'GET', 'POST', etc.\n- `url <String>`, - request's fully qualified URL \n\nExample:\n\n```\nexpect(httpProbe.getRequest('accounts/8`).executed).to.be.true;\n```\n\n### `getResponse(search)`\n\n- `search <String|RegExp>` a pattern which will be executed against an URL\n\nReturns a `Response` entity with several properties:\n\n- `length <Number>`, - total number of matched responses\n- `received <Boolean>`, - if response was delivered at least once\n- `receivedOnce <Boolean>`, - if response was delivered exactly _once_\n- `receivedTwice <Boolean>`, - if response was delivered exactly _twice_\n- `receivedThrice <Boolean>`, - if response was delivered exactly _thrice_\n- `first <ResponseResult>`, - a result object for the _first_ response\n- `second <ResponseResult>`, - a result object for the _second_ response\n- `third <ResponseResult>`, - a result object for the _third_ response\n- `last <ResponseResult>`, - a result object for the _last_ response\n\n#### `ResponseResult`\n\n- `encodedDataLength <Number>`, - Total number of bytes received for this request so far.\n- `fromDiskCache <Boolean>`, - Specifies that the request was served from the disk cache.\n- `fromServiceWorker <Boolean>`, - Specifies that the request was served from the ServiceWorker.\n- `headers <Object>`, - HTTP response headers.\n- `requestHeaders <Object>`, - (Optional) Refined HTTP request headers that were actually transmitted over the network.\n- `status <Number>`, - HTTP response status code.\n- `statusText <String>`, - HTTP response status text.\n- `url <String>`, - Response URL. This URL can be different from CachedResource.url in case of redirect.\n\nExample:\n\n```\nexpect(httpProbe.getResponse('total/cart`).last.status).to.be.equal(200);\n```\n\n## Snapshots\n\nTests are working with snapshots. Snapshots are picked randomly and recorded for 30 seconds.\nTo create a snapshot, instance of the Chrome should be active, if yor are using Mac, it could be done via:\n\n```\n/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222\n```\n\nor run Chrome Browser in the container:\n\n```\n$ docker pull justinribeiro/chrome-headless\n$ docker run -it --rm -p 9222:9222 justinribeiro/chrome-headless \n```\n\nNow it's possible to make a snapshot:\n\n```\nURL=http://some-domain.com node create-snapshot.js\n```\n\n## Links\n\n- [Protocol Viewer](https://github.com/ChromeDevTools/debugger-protocol-viewer)\n- [Performance Log](https://sites.google.com/a/chromium.org/chromedriver/logging/performance-log)\n","created":"2017-02-01T01:23:23.961Z","modified":"2017-02-01T01:23:23.961Z","lastPublisher":{"name":"nicolassiver","email":"nicolas@siver.im"},"owners":[{"name":"nicolassiver","email":"nicolas@siver.im"}],"other":{"_attachments":{},"_from":".","_id":"http-probe","_nodeVersion":"7.4.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/http-probe-1.0.0.tgz_1485912203401_0.9887438248842955"},"_npmUser":{"name":"nicolassiver","email":"nicolas@siver.im"},"_npmVersion":"4.0.5","_rev":"1-69229baff6e3e1adba83dbe8ed8b10f4","_shasum":"e714192f8d61040a481e7d88cff2d50b234bd23b","author":{"name":"Nicolas Siver"},"bugs":{"url":"https://github.com/NicolasSiver/http-probe/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"e714192f8d61040a481e7d88cff2d50b234bd23b","tarball":"https://registry.npmjs.org/http-probe/-/http-probe-1.0.0.tgz"},"maintainers":[{"name":"nicolassiver","email":"nicolas@siver.im"}],"readmeFilename":"README.md","time":{"modified":"2017-02-01T01:23:23.961Z","created":"2017-02-01T01:23:23.961Z","1.0.0":"2017-02-01T01:23:23.961Z"}}}