{"name":"get-it","version":"2.0.0","description":"Generic HTTP request library for node and browsers","main":"lib/index.js","engines":{"node":">=4.0.0"},"browser":{"./src/request/node-request.js":"./src/request/browser-request.js","./lib/request/node-request.js":"./lib/request/browser-request.js","./src/middleware/progress/node-progress.js":"./src/middleware/progress/browser-progress.js","./lib/middleware/progress/node-progress.js":"./lib/middleware/progress/browser-progress.js","./src/util/node-shouldRetry.js":"./src/util/browser-shouldRetry.js","./lib/util/node-shouldRetry.js":"./lib/util/browser-shouldRetry.js","fs":"./test/helpers/noop.js","into-stream":"./test/helpers/noop.js"},"scripts":{"bundle":"npm run bundle:build && npm run bundle:build:all && npm run bundle:minify && npm run bundle:minify:all && npm run bundle:size","bundle:analyze":"npm run compile && NODE_ENV=production DEBUG='' browserify --full-paths -t envify -g uglifyify lib/index.js | discify --open","bundle:analyze:all":"npm run compile && NODE_ENV=production DEBUG='' browserify --full-paths -t envify -g uglifyify lib/bundle-all.js | discify --open","bundle:build":"npm run compile && NODE_ENV=production DEBUG='' browserify -t envify -g uglifyify lib/index.js -o umd/get-it.js --standalone=getIt","bundle:build:all":"npm run compile && NODE_ENV=production DEBUG='' browserify -t envify -g uglifyify lib/bundle-all.js -o umd/get-it-all.js --standalone=getIt","bundle:minify":"uglifyjs -c -m -- umd/get-it.js > umd/get-it.min.js","bundle:minify:all":"uglifyjs -c -m -- umd/get-it-all.js > umd/get-it-all.min.js","bundle:size":"node -r babel-register src/scripts/print-bundle-size","build":"npm run compile && npm run bundle","ci":"npm run coverage && npm run karma && npm run lint","clean":"rimraf lib .nyc_output coverage npm-debug.log yarn-debug.log umd/*.js","compile":"babel --source-maps --copy-files -d lib/ src/","coverage":"nyc --reporter=html --reporter=lcov --reporter=text _mocha","karma":"karma start","lint":"eslint .","posttest":"npm run lint","prepublish":"in-publish && npm run build && npm test || not-in-publish","test":"mocha"},"keywords":["request","http","fetch"],"license":"MIT","dependencies":{"create-error-class":"^3.0.2","debug":"^2.6.1","follow-redirects":"^1.2.1","in-publish":"^2.0.0","into-stream":"^3.1.0","is-plain-object":"^2.0.1","is-retry-allowed":"^1.1.0","is-stream":"^1.1.0","nano-pubsub":"^1.0.1","object-assign":"^4.1.1","parse-headers":"^2.0.1","progress-stream":"^1.2.0","same-origin":"^0.1.1","simple-concat":"^1.0.0","timed-out":"^3.1.0","unzip-response":"^2.0.1","url-parse":"^1.1.8"},"devDependencies":{"babel-cli":"^6.23.0","babel-loader":"^6.3.2","babel-preset-es2015":"^6.22.0","babel-register":"^6.23.0","boxen":"^1.0.0","browserify":"^13.1.1","chai":"^3.5.0","chai-as-promised":"^6.0.0","chai-subset":"^1.4.0","chalk":"^1.1.3","disc":"^1.3.2","envify":"^4.0.0","es6-promise":"^4.0.5","eslint":"^3.16.0","eslint-config-sanity":"^2.0.2","get-uri":"^2.0.0","gzip-size":"^3.0.0","karma":"^1.5.0","karma-chrome-launcher":"^2.0.0","karma-firefox-launcher":"^1.0.0","karma-mocha":"^1.3.0","karma-phantomjs-launcher":"^1.0.2","karma-sourcemap-loader":"^0.3.7","karma-virtualboxany-launcher":"^0.1.3","karma-webpack":"^1.8.0","lodash.once":"^4.1.1","mocha":"^3.2.0","nyc":"^10.1.2","pretty-bytes":"^4.0.2","rimraf":"^2.6.0","uglify-js":"^2.7.5","uglifyify":"^3.0.4","webpack":"^1.14.0","zen-observable":"^0.4.0"},"gitHead":"05e3087b0641ab0abaf961c619605bab1f95c020","versions":[{"number":"0.0.1","date":"2016-11-29T10:24:26.927Z"},{"number":"0.0.2","date":"2016-12-09T12:50:55.141Z"},{"number":"0.0.3","date":"2016-12-09T16:00:15.393Z"},{"number":"0.0.4","date":"2016-12-12T09:08:43.904Z"},{"number":"0.0.5","date":"2016-12-12T09:51:36.002Z"},{"number":"0.0.6","date":"2016-12-12T10:16:18.617Z"},{"number":"0.0.7","date":"2016-12-12T11:41:24.446Z"},{"number":"0.0.8","date":"2016-12-12T15:41:03.786Z"},{"number":"0.0.9","date":"2016-12-13T10:02:34.906Z"},{"number":"0.0.10","date":"2016-12-13T18:34:03.707Z"},{"number":"0.0.11","date":"2016-12-14T13:08:22.572Z"},{"number":"0.0.12","date":"2016-12-15T19:32:25.018Z"},{"number":"1.0.0","date":"2016-12-19T14:32:09.603Z"},{"number":"1.0.1","date":"2016-12-22T12:02:09.505Z"},{"number":"1.0.2","date":"2017-01-25T13:33:37.293Z"},{"number":"1.0.3","date":"2017-02-22T13:10:00.051Z"},{"number":"1.0.4","date":"2017-03-01T12:45:25.728Z"},{"number":"2.0.0","date":"2017-06-21T18:05:12.926Z"}],"readme":"# get-it\n\nGeneric HTTP request library for node (>= 4) and browsers (IE9 and newer)\n\n## Motivation\n\nWe wanted an HTTP request library that worked transparently in Node.js and browsers with a small browser bundle footprint.\n\nTo be able to use the same library in a range of different applications with varying requirements, but still keep the bundle size down, we took inspiration from [http-client](https://github.com/mjackson/http-client) which cleverly composes functionality into the client.\n\n## Features\n\nUsing a middleware approach, `get-it` has the following feature set:\n\n* Promise, observable and low-level event-emitter patterns\n* Automatic retrying with customizable number of attempts and filtering functionality\n* Cancellation of requests\n* Configurable connect/socket timeouts\n* Automatic parsing of JSON responses\n* Automatic stringifying of JSON request bodies\n* Automatic gzip unwrapping in Node\n* Automatically prepend base URL\n* Automatically follow redirects (configurable number of retries)\n* Upload/download progress events\n* Treat HTTP status codes >=400 as errors\n* Debug requests with environment variables/localStorage setting\n\n## Usage\n\nHow `get-it` behaves depends on which middleware you've loaded, but common to all approaches is the setup process.\n\n```js\n// Require the core get-it package, which is used to generate a requester\nconst getIt = require('get-it')\n\n// And require whatever middleware you want to use\nconst base = require('get-it/lib/middleware/base')\nconst jsonResponse = require('get-it/lib/middleware/jsonResponse')\nconst promise = require('get-it/lib/middleware/promise')\n\n// Now compose the middleware you want to use\nconst request = getIt([\n  base('https://api.your.service/v1'),\n  jsonResponse()\n])\n\n// You can also register middleware using `.use(middleware)`\nrequest.use(promise())\n\n// Now you're ready to use the requester:\nrequest({url: '/projects'})\n  .then(projects => console.log(projects))\n  .catch(err => console.error(err))\n```\n\nIn most larger projects, you'd probably make a `httpClient.js` or similar, where you would instantiate the requester and export it for other modules to reuse.\n\n## Options\n\n* `url` - URL to the resource you want to reach.\n* `method` - HTTP method to use for request. Default: `GET`, unless a body is provided, in which case the default is `POST`.\n* `headers` - Object of HTTP headers to send. Note that cross-origin requests in IE9 will not be able to set these headers.\n* `body` - The request body. If the `jsonRequest` middleware is used, it will serialize to a JSON string before sending. Otherwise, it tries to send whatever is passed to it using the underlying adapter. Supported types:\n  * *Browser*: `string`, `ArrayBufferView`, `Blob`, `Document`, `FormData` (deprecated: `ArrayBuffer`)\n  * *Node*: `string`, `buffer`, `ReadStream`\n* `bodySize` - Size of body, in bytes. Only used in Node when passing a `ReadStream` as body, in order for progress events to emit status on upload progress.\n* `timeout` - Timeout in millisecond for the request. Takes an object with `connect` and `socket` properties.\n* `maxRedirects` - Maximum number of redirects to follow before giving up. Note that this is only used in Node, as browsers have built-in redirect handling which cannot be adjusted. Default: `5`\n* `rawBody` - Set to `true` to return the raw value of the response body, instead of a string. The type returned differs based on the underlying adapter:\n  * *Browser*: `ArrayBuffer`\n  * *Node*: `Buffer`\n\n## Return values\n\nBy default, `get-it` will return an object of single-channel event emitters. This is done in order to provide a low-level API surface that others can build upon, which is what the `promise` and `observable` middlewares do. Unless you really know what you're doing, you'll probably want to use those middlewares.\n\n## Response objects\n\n`get-it` does not expose the low-level primitives such as the `XMLHttpRequest` or `http.IncomingMessage` instances. Instead, it provides a response object with the following properties:\n\n```js\n{\n  // string (ArrayBuffer or Buffer if `rawBody` is set to `true`)\n  body: 'Response body'\n  url: 'http://foo.bar/baz',\n  method: 'GET',\n  statusCode: 200,\n  statusMessage: 'OK',\n  headers: {\n    'Date': 'Fri, 09 Dec 2016 14:55:32 GMT',\n    'Cache-Control': 'public, max-age=120'\n  }\n}\n```\n\n## Promise API\n\n```js\nconst getIt = require('get-it')\nconst request = getIt([require('get-it/lib/middleware/promise')])\n\nrequest({url: 'http://foo.bar'})\n  .then(res => console.log(res.body))\n  .catch(err => console.error(err))\n```\n\nIf you are targetting older browsers that do not have a global Promise implementation, you must register one globally using a polyfill such as [es6-promise](https://github.com/stefanpenner/es6-promise):\n\n```js\nrequire('es6-promise/auto')\n\nconst promise = require('get-it/lib/middleware/promise')\nconst request = getIt([promise])\n```\n\n### Cancelling promise-based requests\n\nWith the Promise API, you can cancel requests using a _cancel token_. This API is based on the [Cancelable Promises proposal](https://github.com/tc39/proposal-cancelable-promises), which was at Stage 1 before it was withdrawn.\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nconst promise = require('get-it/lib/middleware/promise')\nconst request = getIt([promise])\n\nconst source = promise.CancelToken.source()\n\nrequest.get({\n  url: 'http://foo.bar/baz',\n  cancelToken: source.token\n}).catch(err => {\n  if (promise.isCancel(err)) {\n    console.log('Request canceled', err.message)\n  } else {\n    // handle error\n  }\n})\n\n// Cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user')\n```\n\n## Observable API\n\nThe observable API requires you to pass an Observable-implementation that you want to use. Optionally, you can register it under the global `Observable`, but this is not recommended.\n\n```js\nconst getIt = require('get-it')\nconst observable = require('get-it/lib/middleware/observable')\nconst request = getIt()\n\nrequest.use(observable({\n  implementation: require('zen-observable')}\n))\n\nconst observer = request({url: 'http://foo.bar/baz'})\n  .filter(ev => ev.type === 'response')\n  .subscribe({\n    next: res => console.log(res.body),\n    error: err => console.error(err)\n  })\n\n// If you want to cancel the request, simply unsubscribe:\nobserver.unsubscribe()\n```\n\nIt's important to note that the observable middleware does not only emit `response` objects, but also `progress` events. You should always filter to specify what you're interested in receiving. Every emitted value has a `type` property.\n\n## Upcoming features\n\n* Developer-friendly assertions that are stripped in production to reduce bundle size and performance\n* Authentication (basic)\n* Stream response middleware?\n\n## Prior art\n\nThis module was inspired by the great work of others:\n\n* [got](https://github.com/sindresorhus/got)\n* [simple-get](https://github.com/feross/simple-get)\n* [xhr](https://github.com/naugtur/xhr)\n* [Axios](https://github.com/mzabriskie/axios/)\n* [http-client](https://github.com/mjackson/http-client)\n* [request](https://github.com/request/request)\n\n## License\n\nMIT-licensed. See LICENSE.\n","created":"2016-11-29T10:24:26.927Z","modified":"2017-06-21T18:05:12.926Z","lastPublisher":{"name":"rexxars","email":"rexxars@gmail.com"},"owners":[{"name":"rexxars","email":"rexxars@gmail.com"}],"other":{"_attachments":{},"_id":"get-it","_nodeVersion":"8.1.1","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/get-it-2.0.0.tgz_1498068311534_0.684468588558957"},"_npmUser":{"name":"rexxars","email":"rexxars@gmail.com"},"_npmVersion":"5.0.3","_rev":"18-0b597e5ed7f5bf085961c0e058081046","author":{"name":"Sanity.io","email":"hello@sanity.io"},"directories":{},"dist-tags":{"latest":"2.0.0"},"dist":{"integrity":"sha512-pXDtpBn/+mobAcD9K143CJ0a5n6GtyKpRHlat2YG38W03RUmOKirAb0P0DNGLygZDNqvU3QznGKJfHJ3nB7xsw==","shasum":"1ce4e337a3d11ba7e0c2e0d288e151b2925e6fae","tarball":"https://registry.npmjs.org/get-it/-/get-it-2.0.0.tgz"},"maintainers":[{"name":"rexxars","email":"rexxars@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-21T18:05:12.926Z","created":"2016-11-29T10:24:26.927Z","0.0.1":"2016-11-29T10:24:26.927Z","0.0.2":"2016-12-09T12:50:55.141Z","0.0.3":"2016-12-09T16:00:15.393Z","0.0.4":"2016-12-12T09:08:43.904Z","0.0.5":"2016-12-12T09:51:36.002Z","0.0.6":"2016-12-12T10:16:18.617Z","0.0.7":"2016-12-12T11:41:24.446Z","0.0.8":"2016-12-12T15:41:03.786Z","0.0.9":"2016-12-13T10:02:34.906Z","0.0.10":"2016-12-13T18:34:03.707Z","0.0.11":"2016-12-14T13:08:22.572Z","0.0.12":"2016-12-15T19:32:25.018Z","1.0.0":"2016-12-19T14:32:09.603Z","1.0.1":"2016-12-22T12:02:09.505Z","1.0.2":"2017-01-25T13:33:37.293Z","1.0.3":"2017-02-22T13:10:00.051Z","1.0.4":"2017-03-01T12:45:25.728Z","2.0.0":"2017-06-21T18:05:12.926Z"}}}