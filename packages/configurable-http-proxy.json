{"version":"2.0.4","name":"configurable-http-proxy","description":"A configurable-on-the-fly HTTP Proxy","license":"BSD-3-Clause","repository":"https://github.com/jupyterhub/configurable-http-proxy","dependencies":{"commander":"~2.9","http-proxy":"~1.16.2","lynx":"^0.2.0","strftime":"~0.10.0","winston":"~2.3.1"},"devDependencies":{"jasmine":"^2.5.1","jshint":"^2.9.2","nyc":"^11.0.2","request":"~2","ws":"^3.0.0"},"engines":{"node":">= 4.0"},"engineStrict":true,"main":"index.js","files":["index.js","lib/configproxy.js","lib/store.js","lib/trie.js","lib/error/*.html","bin/configurable-http-proxy"],"bin":{"configurable-http-proxy":"bin/configurable-http-proxy"},"scripts":{"jshint":"jshint bin/ lib/ test/","test":"nyc jasmine JASMINE_CONFIG_PATH=test/jasmine.json","coverage-html":"nyc report --reporter=html","codecov":"nyc report --reporter=lcov && codecov"},"gitHead":"dcd424322ab08be7eb02219659bee9d7d1e2450d","homepage":"https://github.com/jupyterhub/configurable-http-proxy#readme","versions":[{"number":"0.0.2","date":"2014-08-25T23:14:51.964Z"},{"number":"0.0.3","date":"2014-09-21T00:40:10.811Z"},{"number":"0.1.0","date":"2014-10-01T18:01:17.652Z"},{"number":"0.1.1","date":"2014-10-01T18:15:28.207Z"},{"number":"0.2.0","date":"2014-11-15T00:08:58.959Z"},{"number":"0.2.1","date":"2014-11-22T04:36:23.760Z"},{"number":"0.2.2","date":"2015-04-23T21:13:39.622Z"},{"number":"0.3.0","date":"2015-04-29T17:36:52.126Z"},{"number":"0.4.0","date":"2015-06-04T23:15:03.952Z"},{"number":"0.5.0","date":"2015-10-05T07:56:10.879Z"},{"number":"1.0.0","date":"2016-01-04T10:38:21.256Z"},{"number":"1.1.0","date":"2016-01-04T12:03:04.507Z"},{"number":"1.2.0","date":"2016-04-19T12:31:24.995Z"},{"number":"1.3.0","date":"2016-08-01T09:21:24.476Z"},{"number":"1.3.1","date":"2016-10-12T09:23:01.563Z"},{"number":"2.0.0","date":"2017-04-05T12:48:27.697Z"},{"number":"2.0.1","date":"2017-04-06T09:15:07.525Z"},{"number":"2.0.2","date":"2017-06-07T14:19:11.234Z"},{"number":"2.0.3","date":"2017-06-12T14:06:13.903Z"},{"number":"2.0.4","date":"2017-06-21T07:34:54.638Z"}],"readme":"**[Install](#install)** |\n**[Usage](#usage)** |\n**[Using the REST API](#using-the-rest-api)** |\n**[Custom error pages](#custom-error-pages)** |\n**[Host-based routing](#host-based-routing)** |\n**[Troubleshooting](#troubleshooting)**\n\n# configurable-http-proxy\n\n[![Build Status](https://travis-ci.org/jupyterhub/configurable-http-proxy.svg?branch=master)](https://travis-ci.org/jupyterhub/configurable-http-proxy)\n[![npm](https://img.shields.io/npm/v/configurable-http-proxy.svg)](https://www.npmjs.com/package/configurable-http-proxy)\n\n**configurable-http-proxy** (CHP) provides you with a way to update and manage\na proxy table using a command line interface or REST API.\nIt is a simple wrapper around [node-http-proxy][]. node-http-proxy is an HTTP\nprogrammable proxying library that supports websockets and is suitable for\nimplementing components such as reverse proxies and load balancers. By\nwrapping node-http-proxy, **configurable-http-proxy** extends this\nfunctionality to [JupyterHub] deployments.\n\n## Install\n\nPrerequisite:\n\n[Node.js](https://nodejs.org/en/download/) â‰¥ 4\n\nNote: Ubuntu < 16.04 and Debian Jessie ship with too-old versions of Node\nand must be upgraded.\nWe recommend using the latest stable or LTS version of Node.\n\nTo install the `configurable-http-proxy` package globally\nusing npm:\n\n```\n    npm install -g configurable-http-proxy\n```\n\nTo install from the source code found in this GitHub repo:\n\n```\n    git clone https://github.com/jupyterhub/configurable-http-proxy\n    cd configurable-http-proxy \n    npm install # Use 'npm install -g' for global install\n```\n\n## Usage\n\nThe configurable proxy runs two HTTP(S) servers:\n\n1. The **public-facing interface to your application** (controlled by `--ip`,\n   `--port`) listens on **all interfaces** by default.\n2. The **inward-facing REST API** (`--api-ip`, `--api-port`) listens on\n   localhost by default. The REST API uses token authorization, where the\n   token is set by the `CONFIGPROXY_AUTH_TOKEN` environment variable.\n\n![](./doc/_static/chp.png)\n\n### Setting a default target\n\nWhen you start the proxy from the command line, you can set a\n**default target** (`--default-target` option) which will be used when no\nmatching route is found in the proxy table:\n\n    configurable-http-proxy --default-target=http://localhost:8888\n\n### Command-line options\n\n```\n  Usage: configurable-http-proxy [options]\n\n  Options:\n\n    -h, --help                       output usage information\n    -V, --version                    output the version number\n    --ip <ip-address>                Public-facing IP of the proxy\n    --port <n> (defaults to 8000)    Public-facing port of the proxy\n\n    --ssl-key <keyfile>              SSL key to use, if any\n    --ssl-cert <certfile>            SSL certificate to use, if any\n    --ssl-ca <ca-file>               SSL certificate authority, if any\n    --ssl-request-cert               Request SSL certs to authenticate clients\n    --ssl-reject-unauthorized        Reject unauthorized SSL connections (only meaningful if --ssl-request-cert is given)\n    --ssl-protocol <ssl-protocol>    Set specific HTTPS protocol, e.g. TLSv1_2, TLSv1, etc.\n    --ssl-ciphers <ciphers>          `:`-separated ssl cipher list. Default excludes RC4\n    --ssl-allow-rc4                  Allow RC4 cipher for SSL (disabled by default)\n    --ssl-dhparam <dhparam-file>     SSL Diffie-Helman Parameters pem file, if any\n\n    --api-ip <ip>                    Inward-facing IP for API requests\n    --api-port <n>                   Inward-facing port for API requests (defaults to --port=value+1)\n    --api-ssl-key <keyfile>          SSL key to use, if any, for API requests\n    --api-ssl-cert <certfile>        SSL certificate to use, if any, for API requests\n    --api-ssl-ca <ca-file>           SSL certificate authority, if any, for API requests\n    --api-ssl-request-cert           Request SSL certs to authenticate clients for API requests\n    --api-ssl-reject-unauthorized    Reject unauthorized SSL connections (only meaningful if --api-ssl-request-cert is given)\n\n    --default-target <host>          Default proxy target (proto://host[:port])\n    --error-target <host>            Alternate server for handling proxy errors (proto://host[:port])\n    --error-path <path>              Alternate server for handling proxy errors (proto://host[:port])\n    --redirect-port <redirect-port>  Redirect HTTP requests on this port to the server on HTTPS\n    --pid-file <pid-file>            Write our PID to a file\n    --no-x-forward                   Don't add 'X-forward-' headers to proxied requests\n    --no-prepend-path                Avoid prepending target paths to proxied requests\n    --no-include-prefix              Don't include the routing prefix in proxied requests\n    --insecure                       Disable SSL cert verification\n    --host-routing                   Use host routing (host as first level of path)\n    --statsd-host <host>             Host to send statsd statistics to\n    --statsd-port <port>             Port to send statsd statistics to\n    --statsd-prefix <prefix>         Prefix to use for statsd statistics\n    --log-level <loglevel>           Log level (debug, info, warn, error)\n    --proxy-timeout <n>              Timeout (in millis) when proxy receives no response from target\n```\n\n\n## Using the REST API\n\nThe configurable-http-proxy REST API is documented and available as:\n- a nicely rendered, interactive version at the\n[petstore swagger site][]\n- a [swagger specification file][] in this repo\n\n### Basics\n\n**API Root**\n\n| HTTP method | Endpoint | Function |\n|-------------|----------|----------|\n| GET         | /api/    | API Root |\n\n\n**Routes**\n\n| HTTP method | Endpoint                 | Function                            |\n|-------------|--------------------------|-------------------------------------|\n| GET         | /api/routes              | [Get all routes in routing table][] |\n| POST        | /api/routes/{route_spec} | [Add a new route][]                 |\n| DELETE      | /api/routes/{route_spec} | [Remove the given route][]          |\n\n### Authenticating via passing a token\n\nThe REST API is authenticated via passing a token in the `Authorization`\nheader. The API is served under the `/api/routes` base URL.\n\nFor example, this `curl` command entered in the terminal\npasses this header `\"Authorization: token $CONFIGPROXY_AUTH_TOKEN\"` for\nauthentication and this endpoint `http://localhost:8001/api/routes` to\nretrieve the current routing table:\n\n    curl -H \"Authorization: token $CONFIGPROXY_AUTH_TOKEN\" http://localhost:8001/api/routes\n\n### Getting the routing table\n\n**Request:**\n\n```\n    GET /api/routes[?inactive_since=ISO8601-timestamp]\n```\n\n**Parameters:**\n\n`inactive_since`: If the `inactive_since` URL\nparameter is given as an [ISO8601](http://en.wikipedia.org/wiki/ISO_8601)\ntimestamp, only routes whose `last_activity` is earlier than the timestamp\nwill be returned. The `last_activity` timestamp is updated whenever the proxy\npasses data to or from the proxy target.\n\n**Response:**\n\n*Status code*\n\n    status: 200 OK\n\n*Response body*\n\nA JSON dictionary of the current routing table. This JSON\ndictionary *excludes* the default route.\n\n**Behavior:**\n\nThe current routing table is returned to the user if the request is\nsuccessful.\n\n### Adding new routes\n\nPOST requests create new routes. The body of the request should be a JSON\ndictionary with at least one key: `target`, the target host to be proxied.\n\n**Request:**\n\n    POST /api/routes/[:path]\n\n**Required input:**\n\n`target`: The host URL\n\nExample request body:\n```json\n{\n  \"/user/fred\": {\n    \"target\": \"http://localhost:8002\"\n  },\n  \"/user/barbara\": {\n    \"target\": \"http://localhost:8003\"\n  }\n}\n```\n\n**Response:**\n\n    status: 201 Created\n\n**Behavior:**\n\nAfter adding the new route, any request to `/path/prefix` on the proxy's\npublic interface will be proxied to `target`.\n\n### Deleting routes\n\n**Request:**\n\n    DELETE /api/routes/[:path]\n\n**Response:**\n\n    status: 204 No Content\n\n**Behavior:**\n\nRemoves a route from the proxy's routing table.\n\n\n## Custom error pages\n\nBeginning with version 0.5, custom error pages can be provided when the proxy\nencounters an error and has no proxy target to handle a request. There are two\ntypical errors that CHP may hit, along with their status code:\n\n- 404: a client has requested a URL for which there is no routing target.\n  This **can be prevented** by setting a [`default target`][] before starting\n  the configurable-http-proxy.\n\n- 503: a route exists, but the upstream server isn't responding.\n  This is more common, and can be due to any number of reasons,\n  including the target service having died or not finished starting.\n\n### Setting the path for custom error pages\n\nSpecify an error path `--error-path /usr/share/chp-errors` when\nstarting the CHP:\n\n    configurable-http-proxy --error-path /usr/share/chp-errors\n\nWhen a proxy error occurs, CHP will look in the following location for a\ncustom html error page to serve:\n\n    /usr/share/chp-errors/{CODE}.html\n\nwhere `{CODE}` is a status code number for an html page to serve. If there is\na 503 error, CHP will look for a custom error page in this location\n`/usr/share/chp-errors/503.html`.\n\nIf no custom error html file exists for the error code, CHP will use the\n`error.html`. If you specify an error path, **make sure** you also create\nan `error.html` file.\n\n### Setting a target for custom error handling\n\nYou can specify a target to use when errors occur by using `--error-target {URL}`\nwhen starting the CHP.\nIf, for example, CHP starts with `--error-target http://localhost:1234`,\nthen when the proxy encounters an error, it will make a GET request to\nthe `error-target` server, with URL `http://localhost:1234` and status code\n`/{CODE}`, and failing request's URL escaped in a URL parameter, e.g.:\n\n    GET /404?url=%2Fescaped%2Fpath\n\n\n## Host-based routing\n\nIf the CHP is started with the `--host-routing` option, the proxy will\nuse the hostname of the incoming request to select a target.\n\nWhen using host-based routes, the API uses the target in the same way as if\nthe hostname were the first part of the URL path, e.g.:\n\n```python\n{\n  \"/example.com\": \"https://localhost:1234\",\n  \"/otherdomain.biz\": \"http://10.0.1.4:5555\",\n}\n```\n\n## Troubleshooting\n\nQ: My proxy is not starting. What could be happening?\n\n- If this occurs on Ubuntu/Debian, check that the you are using a recent\n  version of node. Some versions of Ubuntu/Debian come with a version of node\n  that is very old, and it is necessary to update node.\n\n\n[**Return to top**][]\n\n\n\n[node-http-proxy]: https://github.com/nodejitsu/node-http-proxy\n[JupyterHub]: https://github.com/jupyterhub/jupyterhub\n[petstore swagger site]: http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyterhub/configurable-http-proxy/master/doc/rest-api.yml#/default\n[swagger specification file]: https://github.com/jupyterhub/configurable-http-proxy/blob/master/doc/rest-api.yml\n[Get all routes in routing table]: #getting-the-routing-table\n[Add a new route]: #adding-new-routes\n[Remove the given route]: #deleting-routes\n[`default target`]: #setting-a-default-target\n[**Return to top**]: #configurable-http-proxy\n","starsCount":1,"created":"2014-08-25T23:14:51.964Z","modified":"2017-06-21T07:34:54.638Z","lastPublisher":{"name":"minrk","email":"benjaminrk@gmail.com"},"owners":[{"name":"minrk","email":"benjaminrk@gmail.com"},{"name":"rgbkrk","email":"rgbkrk@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"configurable-http-proxy","_nodeVersion":"6.7.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/configurable-http-proxy-2.0.4.tgz_1498030493180_0.5477117889095098"},"_npmUser":{"name":"minrk","email":"benjaminrk@gmail.com"},"_npmVersion":"3.10.3","_rev":"9-7a572d5a17ea3ee1a3f893b82f65509b","_shasum":"d2142379ab8f7446eb08030487f4ef15713009e2","author":{"name":"Jupyter Developers"},"bugs":{"url":"https://github.com/jupyterhub/configurable-http-proxy/issues"},"directories":{},"dist-tags":{"latest":"2.0.4"},"dist":{"shasum":"d2142379ab8f7446eb08030487f4ef15713009e2","tarball":"https://registry.npmjs.org/configurable-http-proxy/-/configurable-http-proxy-2.0.4.tgz"},"maintainers":[{"name":"minrk","email":"benjaminrk@gmail.com"},{"name":"rgbkrk","email":"rgbkrk@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-21T07:34:54.638Z","created":"2014-08-25T23:14:51.964Z","0.0.2":"2014-08-25T23:14:51.964Z","0.0.3":"2014-09-21T00:40:10.811Z","0.1.0":"2014-10-01T18:01:17.652Z","0.1.1":"2014-10-01T18:15:28.207Z","0.2.0":"2014-11-15T00:08:58.959Z","0.2.1":"2014-11-22T04:36:23.760Z","0.2.2":"2015-04-23T21:13:39.622Z","0.3.0":"2015-04-29T17:36:52.126Z","0.4.0":"2015-06-04T23:15:03.952Z","0.5.0":"2015-10-05T07:56:10.879Z","1.0.0":"2016-01-04T10:38:21.256Z","1.1.0":"2016-01-04T12:03:04.507Z","1.2.0":"2016-04-19T12:31:24.995Z","1.3.0":"2016-08-01T09:21:24.476Z","1.3.1":"2016-10-12T09:23:01.563Z","2.0.0":"2017-04-05T12:48:27.697Z","2.0.1":"2017-04-06T09:15:07.525Z","2.0.2":"2017-06-07T14:19:11.234Z","2.0.3":"2017-06-12T14:06:13.903Z","2.0.4":"2017-06-21T07:34:54.638Z"},"users":{"roadlabs":true}}}