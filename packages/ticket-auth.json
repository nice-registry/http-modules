{"name":"ticket-auth","description":"simple http authentication/authorization that uses cookies intsead of passwords.","version":"0.0.1","homepage":"https://github.com/dominictarr/ticket-auth","repository":"https://github.com/dominictarr/ticket-auth","dependencies":{"cookie":"^0.2.3","monotonic-timestamp":"0.0.9","pull-level":"^1.4.2"},"devDependencies":{"level-sublevel":"^6.5.4","level-test":"^2.0.1","tape":"^4.5.1"},"scripts":{"test":"set -e; for t in test/*.js; do node $t; done"},"license":"MIT","gitHead":"1385b31db72a8373b05bc69bddf717da6f23fdee","versions":[{"number":"0.0.0","date":"2016-04-07T22:33:47.232Z"},{"number":"0.0.1","date":"2016-04-08T03:45:52.608Z"}],"readme":"# cookie-auth\n\nsimple http authentication/authorization that uses cookies intsead of passwords.\n\nWorks exactly like tickets do when you go to a movie theater or catch a bus.\nFirst you get a ticket, in the form of a url, which can be emailed to you.\nThen that ticket is _redeemed_, you request that url and a cookie is\nwritten with the response, like the ticket being torn when you enter\nthe theater. Now that cookie shows you are authorized to use the website,\nlike the ticket stub shows you are authorized to watch the movie.\n\n## Example\n\n`ticket-auth` just encapsulates the logic around tickets,\nbut doesn't handle sending the tickets to users (i.e. via email)\n\n``` js\n  var Tickets = require('ticket-auth')\n\n  //initialize database\n  var Level = require('level')\n  var SubLevel = require('level-sublevel')\n  var db = SubLevel(level(path, {valueEncoding: 'json'}))\n\n  //create Tickets instance\n  var auth = Tickets(db)\n\n  //a resource can be any string.\n  var resource = 'test resoruce'\n\n  //create a ticket to a resoruce\n  auth.create(resource, function (err, ticket) {\n    //redeem that ticket into a ticket_stub (which is a cookie)\n    auth.redeem(ticket, function (err, ticket_stub) {\n      //check which resource a ticket_stub accesses\n      auth.check(ticket_stub, function (err, _resource) {\n        assert.equal(_resource, resource)\n      })\n    })\n  })\n```\n\nhere is an example of redeeming a ticket.\n\n``` js\n  var Tickets = require('ticket-auth')\n\n  //initialize database\n  var Level = require('level')\n  var SubLevel = require('level-sublevel')\n  var db = SubLevel(level(path, {valueEncoding: 'json'}))\n\n  //create Tickets instance\n  var auth = Tickets(db)\n\n  var Tiny = require('tiny-route') //router\n  var Stack = require('stack') //middleware\n\n  //here is the actual http server!\n\n  require('http').createServer(Stack(\n    //url for redeeming a ticket. /redeem/<ticket_code>\n    Tiny.get(/^\\/redeem\\/([0-9a-f]+)/, function (req, res, next) {\n      api.auth.redeem(req.params[0], function (err, cookie) {\n        if(err) return next(err)\n        //ticket is redeemed! set it as a cookie, \n        res.setHeader('Set-Cookie', cookie)\n        res.setHeader('Location', '/') //redirect to the login page.\n        res.statusCode = 303\n        res.end()\n      })\n    }),\n    function (req, res) {\n    })\n  ).listen(8000)\n```\n\n# testing with curl\n\nnote, to make curl work with cookies must set a \"cookie jar\"\nit seems: `-c file` sets the file to write to,\nand `-b file` sets the file to write to. You'd think you'd want\nthose both to be the same file!\nThe man page is not clear about this at all.\n\n`curl localhost:8000 -c ./jar -b ./jar`\n\nthe man page says that -c should work, but it only seems to write the\njar but not read it! once the cookie is written, you can use -b or --cookie\n\nbut that doesn't make sense because there isn't even a b in cookie.\n\n## what are \"cookies\": crash course\n\nA cookie is always `key=value` and has \"attributes\"\nthat tell the browser what to do. you need `Expires={date}` and `Path=/`.\n\nWithout `Expires` set in the future, the cookie will be a \"session cookie\"\nand will expire after the browser exits.\n\nWithout `Path=/` the browser will only send the cookie on the path\nthat it got it from.\n\n## \n\nAuthorization uses \"cookies\". Cookies are something delicious you eat,\nso it really doesn't make any sense to call things used for authentication\n\"cookies\", especially when those things behave a lot like a familiar ticket\nand ticket stub, as is familiar to people who have ridden a bus or gone to\nthe movies.\n\nfirst a \"ticket\" is created. this is a high entropy (unguessable) token.\n```\nnode index.js auth.create <resource>\n1d67c0e114b10dc9cc96ea9cd2966f76c42539db\n```\nin this case, `<resource>` should probably be an email address.\nthis token would be emailed to the user, embedded in a link back to the server.\n\n`http://localhost:8000/redeem/1d67c0e114b10dc9cc96ea9cd2966f76c42539db`\nthe server creates a cookie and sends it to you in the response,\nwhich is also a redirect to the rest of the app (though it could easily\nbe a redirect to edit your newly created profile)\n\nThis is exactly like tearing off the ticket and giving you back the ticket\nstub when you enter the theater. Possession of the ticket stub shows you are\nauthorized to see the movie.\n\nTo can test this using `curl`\n\n```\n\ncurl localhost:8000/redeem/1d67c0e114b10dc9cc96ea9cd2966f76c42539db -c jar -b jar -v\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 8000 (#0)\n> GET /redeem/1d67c0e114b10dc9cc96ea9cd2966f76c42539db HTTP/1.1\n> Host: localhost:8000\n> User-Agent: curl/7.43.0\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n* Replaced cookie cookie=\"437734b0886caf51a8961b1033abb392b07333c1\" for domain localhost, path /, expire 1491397335\n< Set-Cookie: cookie=437734b0886caf51a8961b1033abb392b07333c1;Path=/;Expires=Wed Apr 05 2017 13:02:15 GMT+1200 (NZST)FirstPartyOnly;HttpOnly;\n< Location: /\n< Date: Tue, 05 Apr 2016 01:02:15 GMT\n< Connection: keep-alive\n< Content-Length: 0\n< \n* Connection #0 to host localhost left intact\n```\n\nnote that `curl` can be quite finnecky about using cookies\nand to both write and read cookies you need to use `-c jar -b jar`\narguments where `jar` is the \"cookie jar\"\n\n\n## License\n\nMIT\n\n","starsCount":1,"created":"2016-04-07T22:33:47.232Z","modified":"2016-10-14T18:14:28.240Z","lastPublisher":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"owners":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"ticket-auth","_nodeVersion":"5.6.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/ticket-auth-0.0.1.tgz_1460087152012_0.22301504155620933"},"_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"_npmVersion":"3.6.0","_rev":"1-e0f61058455c03edaf7fb3174cb8833a","_shasum":"3a8e4eaae6dcb8dfe632bb123a49335c10f5bf38","author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"bugs":{"url":"https://github.com/dominictarr/ticket-auth/issues"},"directories":{},"dist-tags":{"latest":"0.0.1"},"dist":{"shasum":"3a8e4eaae6dcb8dfe632bb123a49335c10f5bf38","tarball":"http://registry.npmjs.org/ticket-auth/-/ticket-auth-0.0.1.tgz"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-14T18:14:28.240Z","created":"2016-04-07T22:33:47.232Z","0.0.0":"2016-04-07T22:33:47.232Z","0.0.1":"2016-04-08T03:45:52.608Z"},"users":{"madmamma81":true}}}