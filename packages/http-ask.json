{"name":"http-ask","version":"0.0.0-rc6","description":"A flexible promise based HTTP client for Node.js and browser.","repository":"https://github.com/cap32/http-ask","scripts":{"prebuild":"rimraf ./dist && mkdirp ./dist && rimraf ./lib && mkdirp ./lib","build:node":"babel src -o lib/index.js","build:cjs":"cross-env BABEL_ENV=cjs babel src -o dist/http-ask.cjs.js","build:umd":"webpack src dist/http-ask.js","build:min":"webpack -p src dist/http-ask.min.js","build":"npm run build:cjs && npm run build:umd && npm run build:min && npm run build:node","start":"npm run test:node -- -w","test:browser":"babel-node test/utils/karma.js","test:node":"mocha --require=babel-register --delay test/node.js","test":"npm run test:node && npm run test:browser","prepublish":"npm run test && npm run build"},"main":"lib/index.js","browser":"dist/http-ask.cjs.js","files":["lib","dist","*.md"],"keywords":["fetch","xhr","http","ajax","promise","request","node"],"license":"MIT","dependencies":{"isomorphic-fetch":"^2.2.1","object-assign":"^4.1.0","url-join":"^1.1.0"},"devDependencies":{"babel-cli":"^6.16.0","babel-core":"^6.17.0","babel-eslint":"^7.0.0","babel-loader":"^6.2.5","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-system-import-transformer":"^2.4.0","babel-preset-es2015":"^6.16.0","babel-preset-stage-0":"^6.16.0","babel-register":"^6.16.3","co-body":"^4.2.0","cors":"^2.8.1","cross-env":"^3.1.3","eslint":"^3.8.1","eslint-import-resolver-webpack":"^0.6.0","eslint-loader":"^1.6.0","eslint-plugin-babel":"^3.3.0","eslint-plugin-import":"^2.0.1","karma":"^1.3.0","karma-chrome-launcher":"^2.0.0","karma-mocha":"^1.2.0","karma-mocha-reporter":"^2.2.0","karma-webpack":"^1.8.0","mkdirp":"^0.5.1","mocha":"^3.1.2","output-host":"^1.1.0","qs":"^6.3.0","rimraf":"^2.5.4","webpack":"v2.1.0-beta.25","webpack-dev-server":"^2.1.0-beta.9"},"gitHead":"97c137bdc76259480f538a3eea6df69fda5d4691","homepage":"https://github.com/cap32/http-ask#readme","versions":[{"number":"0.0.0-alpha.1","date":"2016-10-24T07:55:29.428Z"},{"number":"0.0.0-alpha.2","date":"2016-11-10T03:26:13.569Z"},{"number":"0.0.0-alpha.3","date":"2016-11-23T07:04:48.480Z"},{"number":"0.0.0-rc1","date":"2017-01-02T14:46:57.251Z"},{"number":"0.0.0-rc2","date":"2017-03-08T11:37:27.012Z"},{"number":"0.0.0-rc3","date":"2017-04-21T04:40:32.498Z"},{"number":"0.0.0-rc4","date":"2017-04-21T10:57:31.075Z"},{"number":"0.0.0-rc5","date":"2017-05-25T07:19:43.476Z"},{"number":"0.0.0-rc6","date":"2017-05-25T08:11:46.051Z"}],"readme":"A flexible promise based HTTP client for Node.js and browser.\n\n[![Build Status](https://travis-ci.org/Cap32/http-ask.svg?branch=master)](https://travis-ci.org/Cap32/http-ask) [![http-ask code style](https://img.shields.io/badge/code_style-http--ask-brightgreen.svg)](https://github.com/Cap32/http-ask) [![npm version](https://badge.fury.io/js/http-ask.svg)](https://badge.fury.io/js/http-ask)\n\n## Features\n\n- Cloneable and combinable request config\n- Support Node.js and browser\n- Promise/A+ based\n- Chainable API\n- Cancelable\n- Support timeout\n\n## Installing\n\nUsing npm:\n\n```bash\n$ npm install http-ask\n```\n\nUsing yarn:\n\n```bash\n$ yarn add http-ask\n```\n\n## Usage\n\nBasic `GET` request\n\n```js\n// Fetch a user with query (eg: http://localhost/api/users?page=32)\nAsk\n\t.create('http://localhost/api/users')\n\t.query({ page: 32 })\n\t.exec()\n\t.then((data) => console.log(data))\n\t.catch((error) => console.log(error))\n;\n\n// Optionally, you can use an `ask` instance\nconst ask = new Ask('http://localhost/api/users');\nask\n\t.query({ page: 32 })\n\t.exec()\n\t.then((data) => console.log(data))\n\t.catch((error) => console.log(error))\n;\n```\n\nCombinable `url`\n\n```js\n// Fetch a user by id. (eg: http://localhost/api/users/2333)\nconst id = 2333;\n\nAsk\n\t.create(`http://localhost/api/users/${id}`)\n\t.exec()\n\t.then((data) => console.log(data))\n\t.catch((error) => console.log(error))\n;\n\n// Above could also be done as\nAsk\n\t.create('http://localhost')\n\t.url('api/users')\n\t.url(id)\n\t.exec()\n\t.then((data) => console.log(data))\n\t.catch((error) => console.log(error))\n;\n```\n\nCombinable `query`\n\n```js\n// Fetch users with token and other query. (eg: http://localhost/api/users?token=asdf&page=23&count=10)\nconst token = 'asdf';\n\nAsk\n\t.create('http://localhost/api/users')\n\t.query({ token, page: 23, count: 10 })\n\t.exec()\n\t.then((data) => console.log(data))\n\t.catch((error) => console.log(error))\n;\n\n// Above could also be done as\nAsk\n\t.create('/users')\n\t.query({ token })\n\t.query({ page: 23, count: 10 })\n\t.exec()\n\t.then((data) => console.log(data))\n\t.catch((error) => console.log(error))\n;\n\n```\n\nClone `ask` instance\n\n```js\nconst apiHost = 'http://localhost/api';\nconst token = 'asdf';\n\n// create a common api `ask` instance\nconst askApiWithToken = new Ask(apiHost).query({ token });\n\naskApiWithToken\n\t.clone()\n\t.url('users')\n\t.query({ page: 23, count: 10 })\n\t.exec()\n\t.then((data) => console.log(data))\n\t.catch((error) => console.log(error))\n;\n\naskApiWithToken\n\t.clone()\n\t.url('users')\n\t.query({ page: 1 })\n\t.exec()\n\t.then((data) => console.log(data))\n\t.catch((error) => console.log(error))\n;\n```\n\nPerforming `POST`, `PUT`, `DELETE` request\n\n```js\n\n// create a common posts `ask` instance\nconst askPosts = askApiWithToken.clone().url('posts');\n\n// post\naskPosts\n\t.clone()\n\t.post()\n\t.body({ name: 'Chirs' })\n\t.exec()\n\t.then((data) => console.log(data))\n\t.catch((error) => console.log(error))\n;\n\n// put\naskPosts\n\t.clone()\n\t.put(id)\n\t.body({ name: 'Chirs' })\n\t.exec()\n\t.then((data) => console.log(data))\n\t.catch((error) => console.log(error))\n;\n\n// delete\naskPosts\n\t.clone()\n\n\t.method('delete')\n\t.url(id)\n\t// Above two lines are equal with `.delete(id)`\n\n\t.exec()\n\t.then((data) => console.log(data))\n\t.catch((error) => console.log(error))\n;\n\n```\n\n## API\n\n### Class: new Ask([url[, config]])\n\nCreate an ask instance.\n\n##### Arguments\n\n1. `url` (String): Request URL. In fact, it could be a part (or prefix) of URL.\n2. `config` (Object): Support `query`, `method`, `url`, `headers`, `cancellation`, `timeout`, and any other options from [fetch api options](https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch)\n\n##### Return\n\n(Object): `ask` instance.\n\n##### Example\n```js\n// es6\nimport Ask from 'http-ask';\n\n// es5\n// var Ask = require('http-ask').default;\n\nconst ask = new Ask('url', {\n\tmethod: 'post',\n\tbody: { ur: 'awesome' }\n});\n```\n\n---\n\n#### Static Method: Ask.create([url[, config]])\n\nThe same with `new Ask()`.\n\n##### Return\n\n(Object): `ask` instance.\n\n---\n\n#### Static Method: Ask.request(url[, config])\n\nShort hand for `Ask.create(url, config).exec()`;\n\n##### Return\n\n(Promise): A promise to get response data.\n\n---\n\n#### Static Method: Ask.clone(ask)\n\nThe same with `ask.clone()`.\n\n##### Return\n\n(Object): `ask` instance.\n\n---\n\n#### Static Property: Ask.Cancellation()\n\nSee the follow `Cancellation` section for detail.\n\n##### Return\n\n(Object): `cancellation` instance, which has a `cancel` method.\n\n---\n\n#### Method: ask#method(method)\n\nSet HTTP request method\n\n##### Arguments\n\n1. `method` (String): All HTTP methods are supported. Default to `get`.\n\n##### Return\n\n(Object): `ask` instance.\n\n---\n\n#### Method: ask#get([url])\n\nSet `GET` method and url.\n\n##### Arguments\n\n1. [`url`] (String): Request URL.\n\n##### Return\n\n(Object): `ask` instance.\n\n---\n\n#### Method: ask#post([url])\n\nSet `POST` method and url.\n\n##### Arguments\n\n1. [`url`] (String): Request URL.\n\n##### Return\n\n(Object): `ask` instance.\n\n---\n\n#### Method: ask#put([url])\n\nSet `PUT` method and url.\n\n##### Arguments\n\n1. [`url`] (String): Request URL.\n\n##### Return\n\n(Object): `ask` instance.\n\n---\n\n#### Method: ask#patch([url])\n\nSet `PATCH` method and url.\n\n##### Arguments\n\n1. [`url`] (String): Request URL.\n\n##### Return\n\n(Object): `ask` instance.\n\n---\n\n#### Method: ask#delete([url])\n\nSet `DELETE` method and url.\n\n##### Arguments\n\n1. [`url`] (String): Request URL.\n\n##### Return\n\n(Object): `ask` instance.\n\n---\n\n#### Method: ask#url(url)\n\nSet or join URL.\n\n##### Arguments\n\n1. `url` (String): Request URL.\n\n##### Return\n\n(Object): `ask` instance.\n\n##### Example\n```js\n// `url` doesn't start with `/`\nAsk\n\t.create('http://you.are')\n\t.url('very/very')\n\t.url('awesome')\n\t.exec()\n\t// the final url is: 'http://you.are/very/very/awesome'\n;\n\n// `url` starts with '/'\nAsk\n\t.create('http://you.are')\n\t.url('very/very')\n\t.url('/awesome') // start with `/`\n\t.exec()\n\t// the final url is: 'http://you.are/awesome'\n;\n```\n\n---\n\n#### Method: ask#query(query)\n\nSet URL query.\n\n##### Arguments\n\n1. `query` (Object): URL query `JSON`.\n\n##### Return\n\n(Object): `ask` instance.\n\n##### Example\n```js\nAsk\n\t.create('http://localhost', {\n\t\tquery: { a: 1, b: 2 },\n\t})\n\t.query({ b: 3, c: 4 })\n\t.query({ c: 5 })\n\t.exec()\n\t// the final url is: 'http://localhost/?a=1&b=3&c=5'\n;\n```\n\n---\n\n#### Method: ask#body(body)\n\nSet HTTP request body.\n\n##### Arguments\n\n1. `body` (Object): A `JSON` or instance of `FormData` as usual.\n\n##### Return\n\n(Object): `ask` instance.\n\n---\n\n#### Method: ask#set(headerKey, headerValue)\n\nSet HTTP request header.\n\n##### Arguments\n\n1. `headerKey` (String): Header key.\n2. `headerValue` (String): Header value.\n\n##### Return\n\n(Object): `ask` instance.\n\n---\n\n#### Method: ask#parser(parser)\n\nAdd a response parser.\n\nA parser is a function that receives two arguments:\n\n1. `data` (Any): The response data\n2. `response` (Response): The Response instance\n\nParser should return a promise. The promise value will be passed to the next parser.\n\n##### Arguments\n\n1. `parser` (Function): Response parser.\n\n##### Return\n\n(Object): `ask` instance.\n\n##### Example\n```js\nAsk\n\t.create('http://localhost/test')\n\t.parser((data, response) => {\n\t\tconsole.log('Status:', response.status);\n\t\tPromise.resolve('awesome!!!');\n\t})\n\t.parser((data, response) => {\n\t\tconsole.log('Data:', data);\n\t\treturn data;\n\t})\n\t.exec()\n;\n// will log:\n\n// Status: 200\n// Data: awesome!!!\n```\n\n---\n\n#### Method: ask#timeout(ms)\n\nSet HTTP request timeout.\n\n##### Arguments\n\n1. `ms` (Number): Timeout(ms). Defaults to 30000.\n\n##### Return\n\n(Object): `ask` instance.\n\n---\n\n#### Method: ask#cancellation(cancellation)\n\nSet a cancellation token. See the follow example for detail.\n\n##### Arguments\n\n1. `cancellation` (Cancellation).\n\n##### Return\n\n(Object): `ask` instance.\n\n##### Example\n\n```js\nimport Ask, { Cancellation } from 'http-ask';\n\nconst cancellation = new Cancellation();\n\nsetTimeout(() => {\n\tcancellation.cancel(); // trigger cancel\n}, 0);\n\nreturn Ask\n\t.create('http://localhost/')\n\t.cancellation(cancellation) // register a cancellation\n\t.exec()\n\t.then(() => assert(false, 'should not go here'))\n\t.catch((err) => assert(err instanceof Cancellation))\n;\n```\n\n---\n\n#### Method: ask#clone()\n\nClone `ask` with current config.\n\n##### Return\n\n(Object): `ask` instance.\n\n---\n\n#### Method: ask#exec()\n\nExecute request.\n\n##### Return\n\n(Promise): A promise to get response data.\n\n---\n\n\n#### Property: ask#response\n\nHttp Response instance. It is `null` before `.exec()`.\n\n##### Example\n\n```js\nconst ask = new Ask('http://localhost/');\nask.exec().then((data) => {\n\tconsole.log('response data', data);\n\tconsole.log('response status', ask.response.status);\n});\n```\n\n---\n\n## License\n\nMIT\n","starsCount":1,"created":"2016-10-24T07:55:29.428Z","modified":"2017-05-25T08:11:46.051Z","lastPublisher":{"name":"cap32","email":"webb.png@gmail.com"},"owners":[{"name":"cap32","email":"webb.png@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-ask","_nodeVersion":"7.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/http-ask-0.0.0-rc6.tgz_1495699905750_0.9598094939719886"},"_npmUser":{"name":"cap32","email":"webb.png@gmail.com"},"_npmVersion":"4.2.0","_rev":"10-b598446b45b8a0b1fb1077c19867d58d","_shasum":"7fbd9f8fef96dd464fe6d24c9f274c25b4a053ab","author":{"name":"cap32"},"bugs":{"url":"https://github.com/cap32/http-ask/issues"},"directories":{},"dist-tags":{"latest":"0.0.0-rc6"},"dist":{"shasum":"7fbd9f8fef96dd464fe6d24c9f274c25b4a053ab","tarball":"https://registry.npmjs.org/http-ask/-/http-ask-0.0.0-rc6.tgz"},"maintainers":[{"name":"cap32","email":"webb.png@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-25T08:11:46.051Z","created":"2016-10-24T07:55:29.428Z","0.0.0-alpha.1":"2016-10-24T07:55:29.428Z","0.0.0-alpha.2":"2016-11-10T03:26:13.569Z","0.0.0-alpha.3":"2016-11-23T07:04:48.480Z","0.0.0-rc1":"2017-01-02T14:46:57.251Z","0.0.0-rc2":"2017-03-08T11:37:27.012Z","0.0.0-rc3":"2017-04-21T04:40:32.498Z","0.0.0-rc4":"2017-04-21T10:57:31.075Z","0.0.0-rc5":"2017-05-25T07:19:43.476Z","0.0.0-rc6":"2017-05-25T08:11:46.051Z"},"users":{"cap32":true}}}