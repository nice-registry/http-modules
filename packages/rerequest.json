{"name":"rerequest","version":"0.2.1","description":"Creates fake HTTP request/response objects to send to Express.","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/daguej/rerequest","keywords":["http","express"],"license":"MIT","versions":[{"number":"0.1.0","date":"2013-06-27T02:49:56.755Z"},{"number":"0.1.1","date":"2013-06-27T02:58:02.112Z"},{"number":"0.1.2","date":"2013-07-01T15:58:31.364Z"},{"number":"0.2.0","date":"2013-08-20T20:13:49.391Z"},{"number":"0.2.1","date":"2013-10-25T17:57:01.377Z"}],"readme":"rerequest\r\n=========\r\n\r\nThis module creates fake (mock) HTTP request/response objects that you can feed in to an Express app.  The entire request is handled in-process, meaning you don't waste time and resources making TCP connections to localhost.\r\n\r\nExample\r\n-------\r\n\r\n    var express = require('express')\r\n        , app = express()\r\n        , Rerequest = require('rerequest')\r\n        , rrq = new Rerequest(app);\r\n\r\n    app.get('/test-real', function(req, res) {\r\n        res.send('I just return some text.');\r\n    });\r\n\r\n    app.get('/test-rerequest', function(req, res) {\r\n        rrq.get('/test-real', function(result) {\r\n            res.send('The other route returns ' + result.statusCode + ' and says ' + result.body);\r\n        });\r\n    });\r\n\r\nEverything that your rerequested route \"writes\" is buffered in memory, and when it calls `res.end`, your callback is called with the response object with a few things added:\r\n\r\n- `res.body` - a `Buffer` containing the body of the HTTP response (if there was one), **or** if the `Content-Type` header was set to `application/json`, the response body is automatically parsed and and you get an object.\r\n- `res._content` - always the raw body `Buffer`.\r\n\r\nMost of the other normal response properties (like `headers` and `statusCode`) are of course available.\r\n\r\nOptions\r\n-------\r\n\r\n    rrq.post('/url', {\r\n        session: req.session, // pass along the client's session object\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n            'Host': req.host // if you're doing any vhosty type stuff\r\n        },\r\n        body: 'key=value&awesome=true', // Content-Length is automatically set\r\n        socket: req.socket // copies socket.remoteAddress and friends to the rerequest\r\n    }, function (result) {\r\n        // ...\r\n    });\r\n\r\nIf your app uses the session middleware, you must pass the client's session object (or an empty one), otherwise things break.","created":"2013-06-27T02:49:54.630Z","modified":"2017-05-22T11:08:34.452Z","lastPublisher":{"name":"daguej","email":"npm@josh3736.net"},"owners":[{"email":"daguej@email.uc.edu","name":"daguej"}],"other":{"_attachments":{},"_from":".","_id":"rerequest","_npmUser":{"name":"daguej","email":"npm@josh3736.net"},"_npmVersion":"1.3.11","_rev":"2-9c3d8701ef046b8c0ae51b69c87b1b52","author":{"name":"Josh Dague"},"bugs":{"url":"https://github.com/daguej/rerequest/issues"},"directories":{},"dist-tags":{"latest":"0.2.1"},"dist":{"shasum":"9ffb07ab5ed581091e60fd2d05b53a3a94d6c46e","tarball":"http://registry.npmjs.org/rerequest/-/rerequest-0.2.1.tgz"},"maintainers":[{"email":"daguej@email.uc.edu","name":"daguej"}],"readmeFilename":"readme.md","time":{"modified":"2017-05-22T11:08:34.452Z","created":"2013-06-27T02:49:54.630Z","0.1.0":"2013-06-27T02:49:56.755Z","0.1.1":"2013-06-27T02:58:02.112Z","0.1.2":"2013-07-01T15:58:31.364Z","0.2.0":"2013-08-20T20:13:49.391Z","0.2.1":"2013-10-25T17:57:01.377Z"}}}