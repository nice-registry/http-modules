{"name":"srvr","version":"1.0.4","description":"a little http server","main":"src/index.js","scripts":{"lint":"standard src/**/*.js","test":"node test/index.js"},"repository":"https://github.com/devTristan/srvr","pre-commit":["lint","test"],"devDependencies":{"git-validate":"^2.1.4","standard":"^6.0.8","supertest":"^1.2.0","tape":"^4.5.1","ws":"^1.1.1"},"gitHead":"8688f2527c1e87792238fa52abd2f2de73e6d364","homepage":"https://github.com/devTristan/srvr#readme","versions":[{"number":"0.1.0","date":"2016-05-09T14:50:31.593Z"},{"number":"0.2.0","date":"2016-06-01T15:58:50.805Z"},{"number":"0.2.1","date":"2016-07-06T16:45:42.282Z"},{"number":"1.0.0","date":"2016-09-15T21:01:36.883Z"},{"number":"1.0.1","date":"2016-09-23T18:26:55.186Z"},{"number":"1.0.2","date":"2016-09-29T15:04:58.165Z"},{"number":"1.0.3","date":"2016-10-18T15:13:30.710Z"},{"number":"1.0.4","date":"2016-10-18T17:45:51.430Z"}],"readme":"# srvr\n\na little http server\n\n * everything express does\n * better\n * less code\n * no dependencies\n * websockets\n\n```console\nnpm install --save srvr\n```\n\n#### srvr(*Array* **routes**[, *Array* **middleware**])\n\n```js\nimport srvr from 'srvr'\nimport bodyParser from 'body-parser'\n\nlet app = srvr([\n\n  ['GET /', 'Hello, World!'],\n\n  [/^GET \\/posts\\/([0-9]+)$/, (req) => lookupPost(req.params[0])],\n\n  ['POST /comments', bodyParser.json(), async function (req, res) {\n    try {\n      await saveComment(req.body.content)\n      return 'thank you for commenting'\n    } catch (err) {\n      throw srvr.error(400, 'your comment is bad and you should feel bad')\n    }\n  }]\n\n])\n\napp.listen(8080)\n```\n\n## JSON APIs\n\nreturn an object or array to send a JSON response\n\n```js\nlet app = srvr([\n  ['GET /api/hello-world', function (req, res) {\n    return {hello: 'world!'}\n  }]\n])\n```\n\n## regex routes\n\nany capture groups will be put into req.params\n\n```js\nlet app = srvr([\n  [/^(POST|PATCH) \\/posts\\/([0-9]+)$/, function (req, res) {\n    req.params // ['PATCH', '42']\n  }]\n])\n```\n\n## status codes\n\nreturn a number to send a status code and message\n\n```js\nlet app = srvr([\n  ['GET /admin', function (req, res) {\n    if (!req.isAdmin) return 401\n    return 'Super secret admin page'\n  }]\n])\n```\n\n## error pages\n\ndo custom error pages like this\n\n```js\nlet app = srvr([\n  [404, function (req, res) {\n    return 'page not found :('\n  }],\n  [500, function (req, res) {\n    if (process.env.NODE_ENV === 'production') {\n      ErrorReporter.track(res.error) // imaginary error reporter\n      return 'An unknown error occurred'\n    } else {\n      console.error(res.error)\n      return res.error.stack\n    }\n  }]\n])\n```\n\n## errors\n\nThrowing an error will send a 500 unless it has the statusCode property set.\n\nsrvr.error(*number* **code**[, *string* **message**]) is a useful shortcut\n\n```js\nlet app = srvr([\n  ['GET /broken', function (req, res) {\n    throw srvr.error(400, 'oops :(')\n  }]\n])\n```\n\n## express middleware\n\nMost middleware that works with express should work with srvr.\n\nTo use middleware globally, put it in the middleware parameter after the routes.\n\n```js\nimport bodyParser from 'body-parser'\nimport csurf from 'csurf'\nimport basicauth from 'basicauth-middleware'\n\nlet app = srvr([\n\n  // csrf protection and body parsing only on this route\n  ['POST /posts', csurf(), bodyParser.json(), async function (req, res) {\n    await addNewPost(req.body.title, req.body.content)\n    return 201\n  }]\n\n], [\n\n  // remove to disable logging\n  srvr.log,\n\n  // basic auth on all routes\n  basicauth('root', 'hunter2')\n\n])\n```\n\n## files and downloads\n\nsrvr.file(*string* **path** [, *object* **options**])\nsrvr.file.download(*string* **path** [, *object* **options**])\n\nDepends on [send](https://www.npmjs.com/package/send) and uses the same options\n\n```js\nlet app = srvr([\n\n  // simple static file response\n  ['GET /cuteKitty.jpg', srvr.file('cats/1.jpg')],\n\n  // dynamically send an arbitrary file\n  ['GET /randomKitty.jpg', function (req, res) {\n    let kittyId = Math.ceil(Math.random * 10)\n    return srvr.file(`cats/${kittyId}.jpg`)\n  }],\n\n  // simple file download\n  ['GET /kittyArchive.zip', srvr.file.download('cats/all.zip')],\n\n  // dynamically send a file download\n  ['GET /fancyKittyArchive.zip', function (req, res) {\n    if (req.isAdmin) {\n      return srvr.file.download('cats/fancy.zip')\n    } else {\n      return 401\n    }\n  }]\n\n])\n```\n\n## redirects\n\nsrvr.file(*string* **location** [, *number* **code** = 302])\n\n```js\nlet app = srvr([\n\n  // static redirect\n  ['GET /google', srvr.redirect('https://google.com/')],\n\n  // dynamic redirect\n  ['GET /random', function (req, res) {\n    let url = Math.random() < 0.5 ? 'https://google.com/' : 'https://github.com/'\n    return srvr.redirect(url)\n  }],\n\n  // permanent redirect\n  ['GET /google/forever', srvr.redirect('https://google.com/', 301)]\n\n])\n```\n\n## cookies\n\nDepends on [cookie](https://www.npmjs.com/package/cookie) and uses the same\noptions\n\n```js\nlet app = srvr([\n\n  ['POST /logout', srvr.cookie, function (req, res) {\n    if (req.cookies.auth) {\n      res.cookie('auth', '', {\n        expires: new Date()\n      })\n      return 'goodbye'\n    } else {\n      return 401\n    }\n  }]\n\n])\n```\n\n## static directories\n\nDepends on [serve-static](https://www.npmjs.com/package/serve-static) and uses\nthe same options\n\n```js\nlet app = srvr([\n\n  srvr.static('/', './public')\n\n])\n```\n\n## websockets\n\nDepends on [ws](https://www.npmjs.com/package/ws)\n\nNote: websocket responders will NOT accept any middleware, because middleware\nis almost always written for HTTP requests only.\n\n```js\nlet app = srvr([\n\n  ['GET /ws', srvr.websocket((req, client) => {\n\n    client.send('Hello!')\n    client.on('message', (data) => {\n      console.log(`got message ${data}`)\n    })\n\n  })]\n\n])\n```\n","created":"2016-05-09T14:50:31.593Z","modified":"2016-10-18T17:45:51.430Z","lastPublisher":{"name":"tristandavies","email":"npm@tristan.io"},"owners":[{"name":"tristandavies","email":"npm@tristan.io"}],"other":{"_attachments":{},"_from":".","_id":"srvr","_nodeVersion":"5.9.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/srvr-1.0.4.tgz_1476812749417_0.16211028839461505"},"_npmUser":{"name":"tristandavies","email":"npm@tristan.io"},"_npmVersion":"3.7.3","_rev":"1-0641db9f76c640c378607a55ad9ed55d","_shasum":"4588890396cc9bd81c67a08ea1f964a8cdbe313f","author":{"name":"Tristan Davies","email":"npm@tristan.io"},"bugs":{"url":"https://github.com/devTristan/srvr/issues"},"directories":{},"dist-tags":{"latest":"1.0.4"},"dist":{"shasum":"4588890396cc9bd81c67a08ea1f964a8cdbe313f","tarball":"http://registry.npmjs.org/srvr/-/srvr-1.0.4.tgz"},"maintainers":[{"name":"tristandavies","email":"npm@tristan.io"}],"readmeFilename":"README.md","time":{"modified":"2016-10-18T17:45:51.430Z","created":"2016-05-09T14:50:31.593Z","0.1.0":"2016-05-09T14:50:31.593Z","0.2.0":"2016-06-01T15:58:50.805Z","0.2.1":"2016-07-06T16:45:42.282Z","1.0.0":"2016-09-15T21:01:36.883Z","1.0.1":"2016-09-23T18:26:55.186Z","1.0.2":"2016-09-29T15:04:58.165Z","1.0.3":"2016-10-18T15:13:30.710Z","1.0.4":"2016-10-18T17:45:51.430Z"}}}