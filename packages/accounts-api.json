{"name":"accounts-api","version":"1.0.0","description":"An accounts api that follows a few contraints to try and make it easy to plug into a node http server","main":"index.js","scripts":{"test":"standard && tape tests/*.js | tap-spec"},"browser":{"request":"xhr"},"repository":"https://github.com/LukeSwart/accounts-api","keywords":["accounts","api","accountdown","level"],"license":"MIT","homepage":"https://github.com/LukeSwart/accounts-api","devDependencies":{"clone":"^1.0.2","each-async":"^1.1.1","hammock":"^1.1.0","memdb":"^1.3.1","standard":"^5.4.1","tap-spec":"^4.1.1","tape":"^4.4.0"},"dependencies":{"JSONStream":"^1.0.7","accountdown":"https://github.com/LukeSwart/accountdown/tarball/baa26ddbcd8396019ff45558e103b0b85e04bfea","accountdown-basic":"https://github.com/LukeSwart/accountdown-basic/tarball/e1da72179854f7140a35d66fbdbf8f4b63856fd5","accountdown-model":"^1.1.1","body":"^5.1.0","cookie-cutter":"^0.1.1","cuid":"^1.3.8","extend":"^3.0.0","filter-object":"^2.1.0","jsonwebtoken":"^5.5.0","match-routes":"^2.0.0","request":"^2.67.0","response":"^0.18.0","subleveldown":"^2.1.0","through2":"^2.0.0","xhr":"^2.2.0"},"gitHead":"817888cc3e16a7cdfd4eef8166c54dd397bad00d","versions":[{"number":"0.0.1","date":"2015-07-14T11:00:39.485Z"},{"number":"0.0.2","date":"2015-07-14T17:51:05.902Z"},{"number":"0.0.3","date":"2015-07-14T18:04:44.582Z"},{"number":"0.0.4","date":"2015-07-14T18:07:57.075Z"},{"number":"0.0.5","date":"2015-07-21T23:21:33.120Z"},{"number":"0.0.6","date":"2015-07-24T18:25:37.743Z"},{"number":"0.0.7","date":"2015-07-31T06:11:39.383Z"},{"number":"0.1.0","date":"2015-11-08T01:36:07.581Z"},{"number":"1.0.0","date":"2016-01-03T22:19:37.094Z"}],"readme":"# accounts-api [![Build Status](https://travis-ci.org/LukeSwart/accounts-api.svg?branch=master)](https://travis-ci.org/LukeSwart/accounts-api)\n\n\nThis app follows a few constraints to try and make it easy to plug into a node http server.\n\nThe goal is a simple API resource that can be used on its own or in other servers.\n\nThe file organization and approach is inspired in part by django's idea of apps.\n\n## Usage\n\nTo use it, you'd include it in the server like this:\n\n```\nvar http = require('http')\nvar response = require('response')\nvar level = require('level')\nvar db = level('db')\nvar accounts = require('accounts-api')(db)\n\nvar server = http.createServer(function (req, res) {\n  /* \n  * if req.url matches a route, it will return, \n  * otherwise, another part of the application can respond \n  */\n  if (accounts.serve(req, res)) return\n  response().json({ message: 'hi' }).pipe(res)\n})\n\nserver.listen(4444)\n```\n\n## Account roles\n\nBy default, there are three roles an account can have: admin, owner, collaborator\n\n- `admin` \n  - is a boolean, and gives site-wide access\n  - implies create, read, update, and delete scopes for all models\n- `owner` \n  - is an array of keys for models that the account has created or for which the account has been granted owner status\n  - implies create, read, update, and delete scopes on all models the account is an owner\n- `collaborator` \n  - is an array of keys for models for which the account has been granted collaborator status\n  - implies create, read, and update scopes on all models the account is a collaborator\n\nHere's how you might check to see if a user is the owner of a model:\n\n```\nvar access = auth.checkRoles(obj.key, account)\nif (access && access.role === 'owner') {\n  // do the things that owners can do\n}\n```\n\n## Account scopes\n\nScopes are granular permissions for models or other arbitrary actions in your application.\n\nBy default there is an `accounts` scope, and all users are allowed to `read` accounts.\n\nHere's an example of adding a custom `posts` scope to accounts so you can check if an account has the proper scope in other parts of your application:\n\n```\nvar createAccounts = require('accounts-api')({\n  secret: 'test',\n  scopes: {\n    posts: {\n      type: 'object',\n      properties: {\n        actions: {\n          type: 'array',\n          items: { type: 'string', enum: ['create', 'read', 'update', 'delete'] }\n        }\n      },\n      default: { actions: ['create', 'read'] }\n    }\n  }\n})\n\nvar accounts = createAccounts({ db: memdb() })\n```\n\nTo check if an account has the proper scope:\n\n```\nauth.checkScopes(['read:posts', 'create:posts'], account)\n```\n\n## Todo\n\n- decide how to handle static assets, and how they might be handled across the application\n\n## Structure\n\n- **index.js**\n  - this module provides the model, handler, and routes modules of the app\n  - it also provides a `serve` method that is used to match req.url to the app's routes\n- **routes.js**\n  - a simple router that takes the handler as an argument, and matches routes to handler methods\n- **handler.js**\n  - takes the model as an argument, and parses requests to perform operations with the model\n- **model.js**\n  - provides CRUD and other necessary actions like validation, indexing, etc. This is based on accountdown and leveldb.\n  \n","created":"2015-07-14T11:00:39.485Z","modified":"2016-01-03T22:19:37.094Z","lastPublisher":{"name":"lukeswart","email":"lukeswart@gmail.com"},"owners":[{"name":"lukeswart","email":"lukeswart@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"accounts-api","_nodeVersion":"4.2.2","_npmUser":{"name":"lukeswart","email":"lukeswart@gmail.com"},"_npmVersion":"2.14.7","_rev":"1-8deab9ba044b74236476e3aefe88873a","_shasum":"83377126084428dd8dbcaa84887803020a76a675","author":{"name":"Luke Swart"},"bugs":{"url":"https://github.com/LukeSwart/accounts-api/issues"},"directories":{"test":"tests"},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"83377126084428dd8dbcaa84887803020a76a675","tarball":"http://registry.npmjs.org/accounts-api/-/accounts-api-1.0.0.tgz"},"maintainers":[{"name":"lukeswart","email":"lukeswart@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-01-03T22:19:37.094Z","created":"2015-07-14T11:00:39.485Z","0.0.1":"2015-07-14T11:00:39.485Z","0.0.2":"2015-07-14T17:51:05.902Z","0.0.3":"2015-07-14T18:04:44.582Z","0.0.4":"2015-07-14T18:07:57.075Z","0.0.5":"2015-07-21T23:21:33.120Z","0.0.6":"2015-07-24T18:25:37.743Z","0.0.7":"2015-07-31T06:11:39.383Z","0.1.0":"2015-11-08T01:36:07.581Z","1.0.0":"2016-01-03T22:19:37.094Z"}}}