{"name":"woodlot","version":"3.0.3","description":"An all-in-one JSON logging utility that supports ExpressJS HTTP logging, custom logging, provides multi-format output and an easy to use events API.","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/adpushup/woodlot","license":"MIT","keywords":["http-logging","logger-middleware","json-logger","express-logger","logger"],"homepage":"https://github.com/adpushup/woodlot#readme","dependencies":{"basic-auth":"^1.1.0","bluebird":"^3.5.0","mkdirp":"^0.5.1"},"gitHead":"1879bc7c00a25e534e089e4c729fec24e707f37a","versions":[{"number":"0.5.8","date":"2017-03-30T19:26:36.786Z"},{"number":"0.7.12","date":"2017-04-14T08:28:35.659Z"},{"number":"0.7.14","date":"2017-04-14T13:48:21.445Z"},{"number":"1.0.2","date":"2017-04-28T09:30:42.822Z"},{"number":"1.1.4","date":"2017-04-30T12:36:56.736Z"},{"number":"1.2.2","date":"2017-04-30T16:47:51.414Z"},{"number":"1.3.1","date":"2017-04-30T19:48:20.236Z"},{"number":"1.3.2","date":"2017-04-30T20:10:50.850Z"},{"number":"2.1.6","date":"2017-05-05T22:51:58.653Z"},{"number":"3.0.1","date":"2017-05-06T20:11:02.320Z"},{"number":"3.0.2","date":"2017-05-07T14:29:50.662Z"},{"number":"3.0.3","date":"2017-05-07T16:08:12.193Z"}],"readme":"<img src=\"https://raw.githubusercontent.com/adpushup/woodlot/master/icon.png\" width=\"250\" height=\"auto\" alt=\"woodlot icon\"/>\n\n# woodlot [![npm version](https://badge.fury.io/js/woodlot.svg)](https://badge.fury.io/js/woodlot) [![NPM Downloads](https://img.shields.io/npm/dm/woodlot.svg?style=flat-square)](https://www.npmjs.com/package/woodlot)\n\nAn all-in-one JSON logging utility that supports ExpressJS HTTP logging, custom logging, provides multi-format output and an easy to use events API.\n\n> * Works as an HTTP logging middleware with ``ExpressJS``\n> * Support for custom logging with different logging levels\n> * Provides log output in ``json`` format with request body/query params, headers and cookies\n> * Support for Apache ``common`` and ``combined`` log formats as output\n> * Multiple file stream support for log aggregation\n> * Simple to use events API\n> * Requires node >= ``0.10``\n\n<br/>\n\n## Installation\n\n#### Using ``npm``\n\n```javascript\nnpm install woodlot --save\n```\n\n#### Using ``yarn``\n\n```javascript\nyarn add woodlot\n```\n\n<br/>\n\n## Usage \n\n### As an ExpressJS middleware\n\nThe woodlot ``middlewareLogger`` can be hooked into the existing ``ExpressJS`` middleware chain and can be used to log all ``HTTP`` requests.\n\nExample - \n\n```javascript\nvar express = require('express');\nvar app = express();\nvar woodlot = require('woodlot').middlewareLogger;\n\napp.use(woodlot({\n    streams: ['./logs/app.log'],\n    stdout: false,\n    routes: {\n        whitelist: ['/api', '/dashboard'],\n        strictChecking: false\n    },\n    format: {\n        type: 'json',\n        options: {\n            cookies: true,\n            headers: true,\n            spacing: 4,\n            separator: '\\n'\n        }\n    }\n}));\n```\n\n#### Options\n\n#### ``streams {array} | required``\nThis is a required option that specifies the file stream endpoints where the generated logs will be saved. You can specify multiple streams using this option.\n\n#### ``stdout {boolean} | Default: true``\nIt specifies whether the generated log entry should be logged to the standard output stream i.e. ``process.stdout`` or not.\n\n#### ``routes {object}``\nThis option is used with the woodlot ``middlewareLogger``. It specifies all the routes (with checking mode) for which logging is to be enabled. By default, log entry is generated for all the routes.\n\n##### ``whitelist {array}``\nThis option is used with the ``routes`` option to specify the route whitelist.\n\n##### ``strictChecking {boolean} | Default: false``\nThis option is used with the ``routes`` option to specify the checking mode for the route whitelist.\n\n```javascript\nroutes: {\n    whitelist: ['/api'],\n    strictChecking: false\n}\n```\n\nFor the above example, setting it to ``false`` will enable logging for all routes that have ``api`` in them. Example - ``/api``, ``/api/getUser``, ``/api/getUser/all``, ``/userapi`` etc.\n\nWhereas, setting it to ``true`` will only enable logging for the ``/api`` route.\n\n#### ``format {object}``\nThis option sets the log output format and other settings related to that particular format.\n\n##### ``type {string} | Default: 'json'``\nThe default output format is ``json``. The ``middlewareLogger`` supports two more formats - [common](http://httpd.apache.org/docs/current/logs.html#common) and [combined](http://httpd.apache.org/docs/current/logs.html#combined), which are Apache's access log formats. \n\nThe generated output log for each format is as follows - \n\n##### json\n\n```javascript\n{\n    \"responseTime\": \"4ms\",\n    \"method\": \"GET\",\n    \"url\": \"/api\",\n    \"ip\": \"127.0.01\",\n    \"body\": {},\n    \"params\": {},\n    \"query\": {},\n    \"httpVersion\": \"1.1\",\n    \"statusCode\": 200,\n    \"timeStamp\": \"23/Apr/2017:20:46:01 +0000\",\n    \"contentType\": \"text/html; charset=utf-8\",\n    \"contentLength\": \"4\",\n    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\",\n    \"referrer\": null,\n    \"headers\": {\n        \"host\": \"localhost:8000\",\n        \"connection\": \"keep-alive\",\n        \"accept-encoding\": \"gzip, deflate, sdch, br\",\n        \"accept-language\": \"en-US,en;q=0.8,la;q=0.6\"\n    },\n    \"cookies\": {\n        \"userId\": \"zasd-167279192-asknbke-0684\"\n    }\n}\n```\n\n> ``json`` format supports logging of ``body`` params and ``cookies``. If you wish to log them, please make sure to enable the ``bodyParser`` and ``cookieParser`` middlewares before woodlot.\n\n##### common\n\n```javascript\n127.0.01 - - [23/Apr/2017:20:47:28 +0000] \"GET /api HTTP/1.1\" 200 4\n```\n\n##### combined\n\n```javascript\n127.0.01 - - [23/Apr/2017:20:48:10 +0000] \"GET /api HTTP/1.1\" 200 4 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\"\n```\n\n> The timestamp generated in all logs is in ``ISO`` format.\n\n#### ``options {object}``\n\n##### ``cookies {boolean} | Default: false``\nThis option is to be used with the ``json`` format. It specifies whether you want to log request ``cookies`` or not.\n\n> Please make sure that the ``cookieParser`` middleware is enabled before woodlot, if this option is to be used.\n\n##### ``headers {boolean} | Default: true``\nThis option is to be used with the ``json`` format. It specifies whether you want to log request ``headers`` or not.\n\n##### ``spacing {string|number} | Default: \\t``\nThis option is to be used with the ``json`` format. It specifies the indentation for the generated log entry. You can specify a tab ``\\t`` or numeric values ``4``, ``8`` for spaces.\n \n##### ``separator {string} | Default: \\n``\nThis option can be used with any of the supported formats. It specfies the separator between two log entires. You can add a newline character ``\\n``, a ``whitespace`` or any other valid character.\n\n<br/>\n\n### Custom logging\n\nThe woodlot ``customLogger`` can be used to perform custom logging with different logging levels.\n\nExample - \n\n```javascript\nvar express = require('express');\nvar app = express();\nvar woodlotCustomLogger = require('woodlot').customLogger;\n\nvar woodlot = new woodlotCustomLogger({\n    streams: ['./logs/custom.log'],\n    stdout: false,\n    format: {\n        type: 'json',\n        options: {\n            spacing: 4,\n            separator: '\\n'\n        }\n    }\n});\n\napp.get('/', function(req, res) {\n    var id = 4533;\n    woodlot.info('User id ' + id + ' accessed');\n    return res.status(200).send({ userId: id });\n});\n```\n\n#### Log levels\n\n##### info\n```javascript\nwoodlot.info('Data sent successfully');\n```\n\n##### debug\n```javascript\nwoodlot.debug('Debugging main function');\n```\n\n##### warn\n```javascript\nwoodlot.warn('User Id is required');\n```\n\n##### err\n```javascript\nwoodlot.err('Server error occurred');\n```\n\n#### Options\n\n#### ``streams {array} | required``\nSee [here](https://github.com/adpushup/woodlot#streams-array--required).\n\n#### ``stdout {boolean} | Default: true``\nSee [here](https://github.com/adpushup/woodlot#stdout-boolean--default-true).\n\n#### ``format {object}``\nSee [here](https://github.com/adpushup/woodlot#format-object).\n\n##### ``type {string} | Default: 'json'``\nThe default output format is ``json``. The ``customLogger`` supports one more format - ``text``.\n\nThe generated output log for each format is as follows - \n\n##### json\n\n```javascript\n{\n    \"timeStamp\": \"23/Apr/2017:17:02:33 +0000\",\n    \"message\": \"Data sent successfully\",\n    \"level\": \"INFO\"\n}\n```\n\n##### text\n\n```javascript\nINFO [23/Apr/2017:17:02:33 +0000]: \"Data sent successfully\"\n```\n\n#### ``options {object}``\n\n##### ``spacing {string|number} | Default: \\t``\nThis option is to be used with the ``json`` format. It specifies the indentation for the generated log entry. You can specify a tab ``\\t`` or numeric values ``4``, ``8`` for spaces.\n \n##### ``separator {string} | Default: \\n``\nThis option can be used with any of the supported formats. It specfies the separator between two log entires. You can add a newline character ``\\n``, a ``whitespace`` or any other valid character.\n\n<br/>\n\n## Events\n\nWoodlot emits events at various operations that can be used to track critical data.\n\nExample - \n\n```javascript\nvar woodlotEvents = require('woodlot').events;\n\nwoodlotEvents.on('reqLog', function(log) {\n     console.log('New log generated');\n});\n```\n\nThe returned log entry from each event will be of the same format as the one defined in the woodlot configuration.\n\n### middlewareLogger events\n\n#### ``reqLog``\n\nThis event is fired whenever a log entry is generated.\n\n```javascript\nwoodlotEvents.on('reqLog', function(log) {\n    console.log('The following log entry was added - \\n' + log);\n});\n```\n\n#### ``:statusCode``\n\nThis event is fired whenever a specific status code is returned from the request.\n\n```javascript\nwoodlotEvents.on('200', function(log) {\n    console.log('Success!')\n});\n```\n\n```javascript\nwoodlotEvents.on('403', function(log) {\n    console.log('Request forbidden!')\n});\n```\n\n### ``reqErr``\n\nThis event is fired whenever an error is returned from the request. \n\nAll requests returning a status code of ``>=400`` are considered to be errored. Please refer to the HTTP status codes [guide](http://www.restapitutorial.com/httpstatuscodes.html) for more info.\n\n```javascript\nwoodlotEvents.on('reqErr', function(log) {\n    console.log('Errored!')\n});\n```\n\n### customLogger events\n\n#### ``info``\n\nThis event is fired whenever an ``info`` level log entry is generated.\n\n```javascript\nwoodlotEvents.on('info', function(log) {\n    console.log('Info log - ' + log);\n});\n```\n\n#### ``debug``\n\nThis event is fired whenever a ``debug`` level log entry is generated.\n\n```javascript\nwoodlotEvents.on('debug', function(log) {\n    console.log('Debug log - ' + log);\n});\n```\n\n#### ``warn``\n\nThis event is fired whenever a ``warn`` level log entry is generated.\n\n```javascript\nwoodlotEvents.on('warn', function(log) {\n    console.log('Warn log - ' + log);\n});\n```\n\n#### ``err``\n\nThis event is fired whenever an ``err`` level log entry is generated.\n\n```javascript\nwoodlotEvents.on('err', function(log) {\n    console.log('Error log - ' + log);\n});\n```\n\n<br/>\n\n## License \n\nMIT License\n\nCopyright (c) 2017 AdPushup Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","starsCount":3,"created":"2017-03-30T19:26:36.786Z","modified":"2017-05-26T02:29:00.090Z","lastPublisher":{"name":"amdsouza92","email":"amdsouza92@gmail.com"},"owners":[{"name":"amdsouza92","email":"amdsouza92@gmail.com"},{"name":"dhirajtech86","email":"dhirajtech86@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"woodlot","_nodeVersion":"6.10.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/woodlot-3.0.3.tgz_1494173290085_0.6991007621400058"},"_npmUser":{"name":"amdsouza92","email":"amdsouza92@gmail.com"},"_npmVersion":"3.10.10","_rev":"16-d9b66a9855ce74cd58e0c21d7585e452","_shasum":"0224364dc04c8bed70c199e6940da514b2079508","author":{"name":"Arun Michael Dsouza","email":"amdsouza92@gmail.com"},"bugs":{"url":"https://github.com/adpushup/woodlot/issues"},"directories":{},"dist-tags":{"latest":"3.0.3"},"dist":{"shasum":"0224364dc04c8bed70c199e6940da514b2079508","tarball":"https://registry.npmjs.org/woodlot/-/woodlot-3.0.3.tgz"},"maintainers":[{"name":"amdsouza92","email":"amdsouza92@gmail.com"},{"name":"dhirajtech86","email":"dhirajtech86@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-26T02:29:00.090Z","created":"2017-03-30T19:26:36.786Z","0.5.8":"2017-03-30T19:26:36.786Z","0.7.12":"2017-04-14T08:28:35.659Z","0.7.14":"2017-04-14T13:48:21.445Z","1.0.2":"2017-04-28T09:30:42.822Z","1.1.4":"2017-04-30T12:36:56.736Z","1.2.2":"2017-04-30T16:47:51.414Z","1.3.1":"2017-04-30T19:48:20.236Z","1.3.2":"2017-04-30T20:10:50.850Z","2.1.6":"2017-05-05T22:51:58.653Z","3.0.1":"2017-05-06T20:11:02.320Z","3.0.2":"2017-05-07T14:29:50.662Z","3.0.3":"2017-05-07T16:08:12.193Z"},"users":{"amdsouza92":true,"heartnett":true,"simon129":true}}}