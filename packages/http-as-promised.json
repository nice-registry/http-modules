{"name":"http-as-promised","description":"Promisified HTTP client","main":"http.promise.js","keywords":["errors","exceptions","throw","custom","util","utility","bluebird","promise","request","http","https","statusCode"],"version":"1.1.0","homepage":"https://github.com/jcready/http-as-promised","repository":"https://github.com/jcready/http-as-promised","license":"MIT","engines":["node >= 0.10.0"],"scripts":{"test":"mocha test && eslint ./","test-cov":"istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage","coverage":"istanbul cover ./node_modules/mocha/bin/_mocha -- -u exports -R spec && open coverage/lcov-report/http-as-promised/index.html"},"dependencies":{"bluebird":"^2.9.34","create-error":"^0.3.1","request":"^2.60.0"},"devDependencies":{"chai":"^3.2.0","chai-as-promised":"^5.1.0","coveralls":"^2.11.4","eslint":"^1.1.0","istanbul":"^0.3.17","mocha":"^2.2.5","mocha-lcov-reporter":"0.0.2","nock":"^2.10.0","sinon":"^1.15.4","sinon-chai":"^2.8.0"},"gitHead":"c771e53174736c931b25d0da1bcc0bafaad29d85","versions":[{"number":"0.0.1","date":"2014-09-19T17:46:27.018Z"},{"number":"0.0.2","date":"2014-09-19T18:33:39.790Z"},{"number":"0.0.3","date":"2014-09-19T19:01:13.344Z"},{"number":"0.0.4","date":"2014-09-20T06:27:04.075Z"},{"number":"0.0.5","date":"2014-09-20T23:44:33.031Z"},{"number":"0.0.6","date":"2014-09-20T23:45:52.468Z"},{"number":"0.0.7","date":"2014-09-20T23:47:16.879Z"},{"number":"0.0.8","date":"2014-09-21T03:38:15.537Z"},{"number":"0.0.9","date":"2014-09-21T06:31:30.559Z"},{"number":"0.0.10","date":"2014-09-21T06:52:03.945Z"},{"number":"0.0.11","date":"2014-09-21T20:47:23.823Z"},{"number":"0.0.12","date":"2014-09-21T20:50:30.639Z"},{"number":"0.1.0","date":"2014-09-22T04:03:29.231Z"},{"number":"1.0.0","date":"2015-03-06T04:18:25.539Z"},{"number":"1.1.0","date":"2015-08-13T17:51:45.264Z"}],"readme":"# HTTP as Promised â€” Promisified HTTP client.\n\n[![NPM Version][npm-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Code Climate][codeclimate-image]][codeclimate-url]\n[![Dependencies][dependencies-image]][dependencies-url]\n\nUsing [bluebird][bluebird] and [create-error][create-error] to make [request][request] easier to use. The most notible difference between this library and simply \"promisifying\" the request module is that this library will automatically reject the promise with an `HTTPError` if the response idicates an HTTP error (e.g. `response.statusCode >= 400`). HTTP as Promised supports all the same [options you'd pass to request](https://github.com/mikeal/request/blob/master/README.md#requestoptions-callback) as well as all of [request's convenience methods](https://github.com/mikeal/request/blob/master/README.md#convenience-methods).\n\n## Super simple to use. Promise.\n\nHTTP as Promised is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.\n\n```javascript\nvar $http = require('http-as-promised');\n\n$http('https://www.github.com')\n  .spread(function (response, body){\n    console.log(body) // HTTP request was successful\n  })\n  .catch(function (error){\n    console.error(error) // HTTP request was unsuccessful\n  });\n```\n\n## Options\n\nIn addition to [all of the options](https://www.npmjs.org/package/request#request-options-callback-) that the [request module][request] accepts, there are two options specific to HTTP as Promised:\n\n* **`error`** - If set to `false` HTTP as Promised will no longer reject the response with an [`HTTPError`](#http-errors) based on the its HTTP status code. Defaults to `true`. [See below](#http-errors).\n\n* **`resolve`** - Indicates the fulfillment value with which you want the HTTP promise to be resolved. Accepts a string or array of strings. Possible values: \n\n  * **`['response', 'body']`** *(default)* - By default HTTP as Promised will resolve promises with an array containing the `response` ([`http.IncomingMessage`](http://nodejs.org/api/http.html#http_http_incomingmessage) object) followed by the response `body` (`String`, `Buffer`, or JSON object if the `json` option is supplied). This means that for simple access to the `body` you would probably want to use [`.spread()`](https://github.com/petkaantonov/bluebird/blob/master/API.md#spreadfunction-fulfilledhandler--function-rejectedhandler----promise) instead of [`.then()`](https://github.com/petkaantonov/bluebird/blob/master/API.md#thenfunction-fulfilledhandler--function-rejectedhandler----promise) as seen in the example above.\n  * **`['body', 'response']`** - This swaps the ordering of the resolved array so that the \"body\" comes before the \"response\" object in the resolved array.\n  * **`'response'`** - This will resolve the promise with just the `response` object\n  * **`'body'`** - This is probably the one that is going to be the most useful setting for developers looking for a simple interface. Using this means you can easily pass the promises around and know that the fulfillment value is just going to be the `body` object.\n \n    ```javascript\n    var url = 'https://www.npm.org',\n        nock = require('nock')(url);\n        \n    nock.post('/').reply(200, 'Hello World!');\n    $http.post(url, { resolve: 'body' }).then(console.log);\n    ```\n     \n    ```\n    \"Hello World\"\n    ```\n\n## HTTP Errors\n\nHTTP as Promised exposes a custom `HTTPError` constructor which is extended from the global `Error` constructor. The `HTTPError` constructor also exposes more specific types of `HTTPError` constructors both for ranges/types of HTTP Errors (4xx/client and 5xx/server) as well as status-code-specific HTTP errors (404, 418, 509, etc.). When instanciated, each of these constructors will be a fully-fledged `instanceof Error` with stack traces and everything. In addition to the `message` and `name` properties, instances of `HTTPError` will also include additional HTTP specific information:\n\n```javascript\nvar $http = require('http-as-promised'),\n    err =  new $http.error[505];\n\nconsole.log('Error:            ', err instanceof Error);\nconsole.log('HTTP Error:       ', err instanceof $http.error);\nconsole.log('HTTP 5xx Error:   ', err instanceof $http.error['5xx']);\nconsole.log('HTTP Server Error:', err instanceof $http.error['server']);\nthrow err;\n```\n\n```\nError:             true\nHTTP Error:        true\nHTTP 5xx Error:    true\nHTTP Server Error: true\nHTTPError: 505 HTTP Version Not Supported\n    at Object.<anonymous> (/test.js:2:7)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:906:3\n{ [HTTPError: 505 HTTP Version Not Supported]\n  statusCode: 505,\n  title: 'HTTP Version Not Supported',\n  summary: 'server does not support the HTTP protocol version',\n  range: '5xx',\n  type: 'ServerError',\n  message: '505 HTTP Version Not Supported' }\n```\n\nWhen an `HTTPError` is the reason why a response was rejected by HTTP as Promised, it will include some additional properties:\n\n```javascript\nvar $http = require('http-as-promised'),\n    url = 'https://www.npm.org',\n    nock = require('nock')(url);\n\nnock.get('/bogus/url').reply(404, 'Cannot find /bogus/url');\n$http(url+'/bogus/url').catch(console.log);\n```\n\n```\n{ [HTTPError: 404 Not Found]\n  statusCode: 404,\n  title: 'Not Found',\n  summary: 'requested resource could not be found',\n  range: '4xx',\n  type: 'ClientError',\n  message: '404 Not Found',\n  body: 'Cannot find /bogus/url',\n  response: [Object: IncomingMessage]\n  options:\n   { error: true,\n     method: 'GET',\n     uri: 'https://www.npm.org/bogus/url' } }\n```\n\n## Catching HTTP Errors\n\nSince we're using Bluebird to construct our promises, handling specific HTTP Errors is a breeze using [`.catch()`](https://github.com/petkaantonov/bluebird/blob/master/API.md#catchfunction-errorclassfunction-predicate-function-handler---promise):\n\n```javascript\nvar $http = require('http-as-promised'),\n    url = 'https://stackoverflow.com',\n    nock = require('nock')(url);\n\nnock.get('/teapot').reply(418);\n$http(url+'/teapot')\n  .catch($http.error[418], function (e){\n    // Catch 418 I'm A Teapot HTTP Errors\n  })\n  .catch($http.error.client, function (e){\n    // Catch any remaining Client HTTP Errors\n  })\n  .catch($http.error['4xx'], function (e){\n    // An alias for $http.error.client\n  })\n  .catch($http.error, function (e){\n    // Catch any other HTTP Errors that weren't already caught\n  })\n  .catch(function (e){\n    // Catch any other type of Error\n  })\n```\n\nFor better stack traces you can enable bluebird's [`longStackTraces`](https://github.com/petkaantonov/bluebird/blob/master/API.md#promiselongstacktraces---void), as well as bluebird's other [error management configuration](https://github.com/petkaantonov/bluebird/blob/master/API.md#error-management-configuration) methods by calling them on HTTP as Promised:\n\n```javascript\n$http.longStackTraces();\nnock.get('/').reply(420);\ndenialOfService(url).catch(err);\n\nfunction denialOfService(url){\n  return $http(url);\n}\n```\n\n```\nHTTPError: 420 Enhance Your Calm\n    at Request.HTTP_RESPONSE [as _callback] (http.promise.js:73:25)\n    at Request.self.callback (node_modules/request/request.js:237:22)\n    at Request.EventEmitter.emit (events.js:98:17)\n    at Request.<anonymous> (node_modules/request/request.js:1146:14)\n    at Request.EventEmitter.emit (events.js:117:20)\n    at OutgoingMessage.<anonymous> (node_modules/request/request.js:1097:12)\n    at OutgoingMessage.EventEmitter.emit (events.js:117:20)\n    at node_modules/nock/lib/request_overrider.js:419:18\n    at Object._onImmediate (node_modules/nock/lib/request_overrider.js:438:9)\nFrom previous event:\n    at new Promise (node_modules/bluebird/js/main/promise.js:82:37)\n    at HTTP (http.promise.js:56:12)\n    at denialOfService (test.js:12:10)\n    at Object.<anonymous> (test.js:9:1)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n { [HTTPError: 420 Enhance Your Calm]\n   statusCode: 420,\n   title: 'Enhance Your Calm',\n   summary: 'Twitter rate limiting',\n   range: '4xx',\n   type: 'ClientError',\n   message: '420 Enhance Your Calm',\n   body: '',\n   options: { error: true, method: 'GET', uri: 'https://twitter.com' } }\n```\n\n## For those times you really just need request\n\nYou can directly access the request module used by the HTTP as Promised module:\n\n```javascript\nvar $http = require('http-as-promised');\n$http.request('http://google.com/doodle.png').pipe(fs.createWriteStream('doodle.png'))\n```\n\n[npm-image]: https://img.shields.io/npm/v/http-as-promised.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/http-as-promised\n[travis-image]: http://img.shields.io/travis/jcready/http-as-promised.svg?style=flat-square\n[travis-url]: https://travis-ci.org/jcready/http-as-promised\n[coveralls-image]: http://img.shields.io/coveralls/jcready/http-as-promised.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/jcready/http-as-promised?branch=master\n[dependencies-image]: https://img.shields.io/david/jcready/http-as-promised.svg?style=flat-square\n[dependencies-url]: https://david-dm.org/jcready/http-as-promised\n[codeclimate-image]: https://img.shields.io/codeclimate/github/jcready/http-as-promised.svg?style=flat-square\n[codeclimate-url]: https://codeclimate.com/github/jcready/http-as-promised\n\n[bluebird]: https://www.npmjs.org/package/bluebird\n[request]: https://www.npmjs.org/package/request\n[create-error]: https://www.npmjs.org/package/create-error;\n","starsCount":1,"created":"2014-09-19T17:46:27.018Z","modified":"2015-09-20T17:25:54.331Z","lastPublisher":{"name":"jcready","email":"jcready@gmail.com"},"owners":[{"name":"apechimp","email":"apeherder@gmail.com"},{"name":"jcready","email":"jcready@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-as-promised","_nodeVersion":"0.12.5","_npmUser":{"name":"jcready","email":"jcready@gmail.com"},"_npmVersion":"2.11.2","_rev":"1-9bbfc959939e296df90e8123d5bc5b3c","_shasum":"6d8beb6850deca24d21cc832cedf1f53e6efb4e4","author":{"name":"James Cready","email":"jcready@gmail.com","url":"http://stackoverflow.com/users/1397319/idbehold"},"bugs":{"url":"http://github.com/jcready/http-as-promised/issues"},"directories":{},"dist-tags":{"0.0.1":"0.0.1","latest":"1.1.0","0.0.2":"0.0.2"},"dist":{"shasum":"6d8beb6850deca24d21cc832cedf1f53e6efb4e4","tarball":"http://registry.npmjs.org/http-as-promised/-/http-as-promised-1.1.0.tgz"},"maintainers":[{"name":"apechimp","email":"apeherder@gmail.com"},{"name":"jcready","email":"jcready@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-09-20T17:25:54.331Z","created":"2014-09-19T17:46:27.018Z","0.0.1":"2014-09-19T17:46:27.018Z","0.0.2":"2014-09-19T18:33:39.790Z","0.0.3":"2014-09-19T19:01:13.344Z","0.0.4":"2014-09-20T06:27:04.075Z","0.0.5":"2014-09-20T23:44:33.031Z","0.0.6":"2014-09-20T23:45:52.468Z","0.0.7":"2014-09-20T23:47:16.879Z","0.0.8":"2014-09-21T03:38:15.537Z","0.0.9":"2014-09-21T06:31:30.559Z","0.0.10":"2014-09-21T06:52:03.945Z","0.0.11":"2014-09-21T20:47:23.823Z","0.0.12":"2014-09-21T20:50:30.639Z","0.1.0":"2014-09-22T04:03:29.231Z","1.0.0":"2015-03-06T04:18:25.539Z","1.1.0":"2015-08-13T17:51:45.264Z"},"users":{"miguelprovencio":true}}}