{"name":"multiblob-http","description":"serve content-addressed blobs over http. see use with [multiblob](https://github.com/ssbc/multiblob)","version":"0.2.0","homepage":"https://github.com/dominictarr/multiblob-http","repository":"https://github.com/dominictarr/multiblob-http","dependencies":{"pull-stream":"^3.4.3","stream-to-pull-stream":"^1.7.0"},"devDependencies":{},"scripts":{"test":"set -e; for t in test/*.js; do node $t; done"},"license":"MIT","gitHead":"0a6447afff38e10247bca2dbe8228934ffb505af","versions":[{"number":"0.0.0","date":"2016-07-02T06:21:26.134Z"},{"number":"0.0.1","date":"2016-07-21T04:06:43.230Z"},{"number":"0.2.0","date":"2016-07-28T06:12:35.780Z"}],"readme":"# multiblob-http\n\nserve content-addressed blobs over http.\nsee use with [multiblob](https://github.com/ssbc/multiblob)\n\n# example\n\n``` js\nvar MultiBlob = require('multiblob')\nvar MultiBlobHttp = require('multiblob-http')\nvar http = require('http')\n\nvar dir = where_files_go //set this.\n\nvar blobs = MultiBlob(dir)\n\nhttp.createServer(MultiBlobHttp(blobs, '/blobs')).listen(8000)\n```\nthis will return an http handler (compatible with express middleware)\nthat will handle requests\n * `GET /blobs/get/{id}`\n * `POST /blobs/add` (which will respond with the hash)\n\nyou can also set a different prefix, but I use `/blobs`\n\n## http api\n\n### GET /get/{id}\n\nretrive blob with hash {id}\n\n### POST /add\n\nposts to add do not require to have a hash, but will respond with the hash.\n(TODO: take a POST to /add/{id} and error if received content did not have that hash)\n\n## caching && headers\n\n`multiblobs-http` provides the correct headers to make serving content-addressed\nfiles as efficient as possible.\n\nFirst the the `etag` header is set to the hash and the expires header is set to a year in the future.\nIdeally, the browser shouldn't request this resource again for a whole year.\nProbably it might revalidate it when someone uses `ctrl-R` to reload the page.\nWhen it does, it will request with `if-none-modified` set to the hash.\nSince content-addressed files are _never_ modified, the server immediately responds\nwith 304 (not modified)\n\nthe `content-length` header is always used. This way, if a connection fails somehow,\nor there is an error later, the browser should detect it.\n\nOf course, it would be way better if browsers just understood content-hashes.\nBut, we have to play the hand we where delt, and\n`multiblob-http` makes the most of the broken web we live in.\n\n\n## License\n\nMIT\n\n\n\n","created":"2016-07-02T06:21:26.134Z","modified":"2016-07-28T06:12:35.780Z","lastPublisher":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"owners":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"multiblob-http","_nodeVersion":"6.2.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/multiblob-http-0.2.0.tgz_1469686355552_0.01400146703235805"},"_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"_npmVersion":"3.8.9","_rev":"1-7ec328e04b479ffdb3dd56aaca342a4f","_shasum":"09c820eda9b83f6b98bce884b75846926e6be151","author":{"name":"'Dominic Tarr'","email":"dominic.tarr@gmail.com","url":"dominictarr.com"},"bugs":{"url":"https://github.com/dominictarr/multiblob-http/issues"},"directories":{},"dist-tags":{"latest":"0.2.0"},"dist":{"shasum":"09c820eda9b83f6b98bce884b75846926e6be151","tarball":"http://registry.npmjs.org/multiblob-http/-/multiblob-http-0.2.0.tgz"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-07-28T06:12:35.780Z","created":"2016-07-02T06:21:26.134Z","0.0.0":"2016-07-02T06:21:26.134Z","0.0.1":"2016-07-21T04:06:43.230Z","0.2.0":"2016-07-28T06:12:35.780Z"}}}