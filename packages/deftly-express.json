{"name":"deftly-express","version":"1.0.2","description":"An express based HTTP transport for deftly","main":"src/index.js","scripts":{"test":"mocha spec/integration"},"repository":"https://github.com/deftly/deftly-express","keywords":["microservice","http","express","deftly"],"license":"MIT","homepage":"https://github.com/deftly/deftly-express#readme","dependencies":{"express":"^4.13.4","lodash":"^4.12.0","request":"^2.72.0","when":"^3.7.7"},"devDependencies":{"biggulp":"^1.2.0","chai":"^3.5.0","chai-as-promised":"^5.3.0","deftly":"~1.0.0","gulp":"^3.9.1","moment":"^2.13.0"},"gitHead":"89607c740ef576ff5ad7bb4332df2eba4ab75ce0","versions":[{"number":"1.0.0-1","date":"2016-05-13T09:36:28.717Z"},{"number":"1.0.0-2","date":"2016-05-13T10:17:07.941Z"},{"number":"1.0.0-4","date":"2016-05-25T13:15:32.109Z"},{"number":"1.0.0-5","date":"2016-05-27T19:41:03.027Z"},{"number":"1.0.0-6","date":"2016-06-08T18:37:41.144Z"},{"number":"1.0.0","date":"2016-07-07T17:35:27.423Z"},{"number":"1.0.1","date":"2016-08-30T11:39:52.948Z"},{"number":"1.0.2","date":"2016-08-30T12:14:35.303Z"}],"readme":"## deftly-express\nA minimal HTTP transport based on express. \n\n## Configuration\nThe configuration block should show up in the service's configuration block under the `http` property. \n\nDefaults shown:\n```js\n{\n\thttp: {\n\t\tport: 8800,\n\t\tapiPrefix: \"/api\", // prefixes all API calls\n\t\turlPrefix: \"\", // prefixes all URLs\n\t\tconfigure: undefined, // a callback to configure express\n\t\tpostRouting: undefined // a callback to perform any final express configuration \n\t}\n}\n```\n\n### Configuring Express - `configure`\nThe `configure` property takes a function that returns a promise. The argument passed to it will have the following properties:\n * `express` - a reference to the express app instance\n * `request` - a reference to the request instance used when forwarding requests\n * `config` - the `http` configuration block specified\n * `fount` - the fount instance in use by the service\n\nThis function is called *before* the routes for the resources and actions get created. It allows you to have complete control over how express is configured and any additional middleware. *This library does not include any middleware.*\n\nexample\n```js\n// simple example showing adding cookie parser middleware\nfunction expressConfig( state ) {\n\tvar app = state.express;\n\tapp.use( \"/\", require( \"cookie-parser\" )() );\n\treturn when(); // if the function is asynchronous, it must return a promise\n}\n```\n\n### Final Configuration - `postRouting`\nIn some cases, there may be express configuration that needs to wait until after deftly-express has supplied the resource action's routes to express. This callback works exactly like the `configure` callback but is invoked after those routes have been supplied. \n\n## Routing\nThis module builds routes using a number of configuration values as well as properties on the resource and action.\n\n### Method\nEach action is expected to specify the HTTP method via a `method` property. When this property is missing on the action, *all* methods will be used.\n\n### URLs\nURLs can be specified in one of two ways; with an explicit URL or a relative one. Explicit URLs are very simple, if the `url` property begins with a `/`, then that exact path will be used for the action's URL.\n\nRelative URLs are comprised of a number of possible values in the following order:\n\n * http.urlPrefix - config property, defaults to \"\"\n * http.apiPrefix - config property, defaults to \"/api\"\n * resource.urlPrefix - resource property, defaults to the resource's name\n * action.url - action property, defaults to action's name\n\n## Responses\n\n```javascript\n// defaults shown\n{\n\tstatus: 200,\n\tdata: undefined,\n\tcookies: {}, // set cookies sent back to the client\n\theaders: {}, // set headers sent back in the response\n\tfile: { // only used when replying with file\n\t\t[name]: , // the file name for the response\n\t\t[type]: , // the content-type\n\t\t[path]: , // path to the file to return\n\t\t[maxAge]: 0, // cache control header (milliseconds)\n\t\t[root]: '', // root directory for relative path\n\t\t[lastModified]: true, // sets Last-Modified header based on file system\n\t\t[inline]: false, // when true, no user dialog will appear\n\t\t[stream]: ,// a stream to pipe to the response\n\t},\n\tstream: { // used when sending back a stream\n\t\t[type]: , // content-type, defaults to octet-stream\n\t\tstream:\n\t},\n\tforward: { // only used if forwarding the request\n\t\turl: , // the url to forward to\n\t\t[method]: , // if unspecified, copies the method of the original request\n\t\t[headers]: , // if unspecified, copies headers in the original request\n\t\t[body]: // use if changing the body contents\n\t},\n\tredirect: { // only used when redirecting\n\t\t[status]: 302, // use to set a status other than 302\n\t\turl: // the URL to redirect to\n\t},\n\tview: \"viewName\"\n}\n```\n\n### headers\nA simple way to include HTTP headers in the response. There's nothing more to this than key/value pairs.\n\n### cookies\nThe cookies hash uses key value pairs where each value is a hash with a `value` and an `options` property. Options are ... optional and use the same options as Express does. They are repeated here for convenience:\n\n```js\n//  all properties are optional, defaults shown:\n{\n\tdomain: [app domain name], // the domain the cookie is valid for\n\tencode: encodeURIComponent, // used to encode cookie value\n\texpires: Date, // date when cookie expires (GMT)\n\tmaxAge: '', // relative expiration in milliseconds\n\tpath: '/', // where cookie applies\n\thttpOnly: false, // only web sever has access\n\tsecure: false, // https only\n\tsigned: false // indicates cookie should be signed\n}\n```\n\n### file\nThere are several ways to return a file as the response. \n\n#### with path to a file\nIf providing a path to the file, the `stream` property is not used and the `name` and `type` are optional as they can often be determined from the file itself.\n\n#### with stream as a file\nIf providing a `stream`, the `type` and `name` cannot be inferred; type will default to octet-stream and the file name will be blank. The `lastModified` property should be a date instead of a boolean if you wish to have the `Last-Modified` header set for you.\n\n### forward\nThis is effectively the same as proxying a request for the user. The `method`, `headers` and `body` are all copied from the original request but can be over-ridden thus giving the action the opportunity to do just about anything required.\n\n### redirect\nVery simply way to respond with a redirect. The status defaults to a 302 if one is not specified.\n\n### stream\nA simpler version of the file response but will simply send a stream back. The `type` cannot be inferred and so `octet-stream` is the only default value that will ever be supplied if one is not specified.","created":"2016-05-13T09:36:28.717Z","modified":"2016-08-30T12:14:35.303Z","lastPublisher":{"name":"arobson","email":"asrobson@gmail.com"},"owners":[{"name":"arobson","email":"asrobson@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"deftly-express","_nodeVersion":"6.2.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/deftly-express-1.0.2.tgz_1472559273377_0.9235276426188648"},"_npmUser":{"name":"arobson","email":"asrobson@gmail.com"},"_npmVersion":"3.9.5","_rev":"1-d24d785e3ce1a1f4d1a19ee2dea8caaf","_shasum":"27700988424107e238c96cf9bedd830bd1cf6983","author":{"name":"Alex Robson"},"bugs":{"url":"https://github.com/deftly/deftly-express/issues"},"directories":{},"dist-tags":{"latest":"1.0.2"},"dist":{"shasum":"27700988424107e238c96cf9bedd830bd1cf6983","tarball":"http://registry.npmjs.org/deftly-express/-/deftly-express-1.0.2.tgz"},"maintainers":[{"name":"arobson","email":"asrobson@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-08-30T12:14:35.303Z","created":"2016-05-13T09:36:28.717Z","1.0.0-1":"2016-05-13T09:36:28.717Z","1.0.0-2":"2016-05-13T10:17:07.941Z","1.0.0-4":"2016-05-25T13:15:32.109Z","1.0.0-5":"2016-05-27T19:41:03.027Z","1.0.0-6":"2016-06-08T18:37:41.144Z","1.0.0":"2016-07-07T17:35:27.423Z","1.0.1":"2016-08-30T11:39:52.948Z","1.0.2":"2016-08-30T12:14:35.303Z"}}}