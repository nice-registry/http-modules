{"name":"passport-service","version":"2.3.1","description":"A HTTP auth service using passport and connecting to Mongo","main":"index.js","scripts":{"test":"node test.js"},"repository":"https://github.com/binocarlos/passport-service","license":"MIT","dependencies":{"body-parser":"~1.14.1","concat-stream":"^1.5.2","connect-mongo":"~0.8.2","cookie-parser":"~1.4.0","cookie-session":"~1.2.0","express":"~4.13.3","express-session":"~1.12.1","hyperrequest":"^0.1.1","is-valid-email":"0.0.2","jsonwebtoken":"^5.7.0","mongoose":"^4.4.12","morgan":"^1.7.0","passport":"~0.3.2","passport-facebook":"~2.0.0","passport-github":"~1.0.0","passport-google-oauth":"~0.2.0","passport-local":"~1.0.0","passport-twitter":"~1.0.3"},"devDependencies":{"async":"^1.5.2","hat":"0.0.3","http-hash-router":"^1.1.0","mockgoose":"^6.0.2","request":"^2.69.0","tape":"^4.5.1"},"gitHead":"b5dfa85b622e5b18072b5f295d7ff300c5bd5025","homepage":"https://github.com/binocarlos/passport-service#readme","versions":[{"number":"1.0.0","date":"2016-06-22T21:02:08.290Z"},{"number":"2.0.0","date":"2016-11-06T12:28:37.675Z"},{"number":"2.0.1","date":"2016-11-06T16:01:23.244Z"},{"number":"2.1.0","date":"2016-11-09T20:43:35.647Z"},{"number":"2.2.0","date":"2016-11-09T21:04:02.800Z"},{"number":"2.3.0","date":"2016-11-09T21:29:44.179Z"},{"number":"2.3.1","date":"2016-11-09T22:03:59.445Z"}],"readme":"# passport-service\n\nToolkit for authenticating users and micro-services.\n\nUses [passport](https://github.com/jaredhanson/passport) and Mongo for backend storage for user sessions.\n\nProvides a library of functions to enable JWT access for micro-services.\n\n## install\n\nthe node library for your app:\n\n```bash\n$ npm install passport-service\n```\n\nthe auth service as a docker container:\n\n```bash\n$ docker pull binocarlos/passport-service\n```\n\n## auth service\nA HTTP authentication service for user registrations/logins.\n\nYou can run the auth service in a few different ways:\n\n * Docker container\n * stand alone node.js application\n * use in another node.js application (tbc)\n\n## options\nThe following table shows the command-line flag, environment variable and config property for each setting of the auth service.\n\nName | CLI | ENV | Field | Required | Default\n--- | --- | --- | --- | --- | ---\nScheme | --scheme | SCHEME | bind_scheme | | http\nHostname | --hostname | HOSTNAME | bind_hostname | yes |\nPort | --port | PORT | bind_port | | 80\nMount Path | --mount-path | MOUNT_PATH | bind_path_v1 | | /auth/v1\nSuccess Redirect | --success-redirect | SUCCESS_REDIRECT | success_redirect | | /\nFailure Redirect | --failure-redirect | FAILURE_REDIRECT | failure_redirect | | /login\nCookie Secret | --cookie-secret | COOKIE_SECRET | cookiesecret | | apples\nToken Secret | --token-secret | TOKEN_SECRET | tokensecret | | oranges\nMongo Host | --mongo-host | MONGO_SERVICE_HOST | mongohost | yes | \nMongo Port | --mongo-port | MONGO_SERVICE_PORT | mongoport | | 27017\nMongo DB | --mongo-db | MONGO_SERVICE_DB | mongodb | | auth\n\n####Â docker container\n\nFirst run a basic Mongo container:\n\n```bash\n$ docker run -d \\\n  --name mongo \\\n  mongo\n```\n\nThen link the auth container to it:\n\n```bash\n$ docker run -d \\\n  -p 80:80 \\\n  --link mongo:mongo \\\n  -e HOSTNAME=172.17.1.168 \\\n  -e MONGO_SERVICE_HOST=mongo \\\n  binocarlos/passport-service\n```\n\n#### stand alone node.js application\n\n```bash\n$ node index.js \\\n  --hostname=myapp.local \\\n  --mongo-host=mongo.local\n```\n\n#### use in another node.js application\n\n```javascript\nvar http = require('http')\nvar passportService = require('passport-service')\n\nvar authHandler = passportService({\n  hostname:'myapp.local',\n  mongo_host:'mongo.local'\n})\n\n// you can use any server framework here (e.g. express or hapi)\nvar server = http.createServer(function(req, res){\n  if(req.url.indexOf('/auth/v1')==0){\n    authHandler(req, res)\n  }\n  else{\n    res.end('my app')\n  }\n})\n```\n\nNOTE - this needs to be completed still\n\n## routes\n\nOnce the HTTP server is up and listening - the following routes can be used:\n\n * GET /version\n * GET /status\n * GET /logout\n * POST /register\n * POST /login\n * POST /details\n\n#### `GET /version`\n\nReturns `text/plain` with the semver of the current package.\n\n#### `GET /status`\n\nReturns `application/json` with the user details for the cookie/token passed in the request.\n\n```javascript\n{\n  \"loggedIn\": true,\n  \"user\": {\n    \"_id\": \"576bce9a1218f30100379b96\",\n    \"__v\": 0,\n    \"provider\": \"local\",\n    \"username\": \"\",\n    \"email\": \"g@g.com\",\n    \"type\": \"user\",\n    \"name\": \"\"\n  }\n}\n```\n\n#### `GET /logout`\n\nRemoves the session token and redirects the user to `/`\n\n#### `POST /register`\n\nPOST `application/json`:\n\n```javascript\n{\n  email:'bob@bob.com',\n  password:'apples'\n}\n```\n\nReturns `application/json`:\n\n```javascript\n{\n  \"registered\": true,\n  \"user\": {\n    \"_id\": \"576bce9a1218f30100379b96\",\n    \"__v\": 0,\n    \"provider\": \"local\",\n    \"username\": \"\",\n    \"email\": \"g@g.com\",\n    \"type\": \"user\",\n    \"name\": \"\"\n  }\n}\n```\n\n#### `POST /login`\n\nPOST `application/json`:\n\n```javascript\n{\n  email:'bob@bob.com',\n  password:'apples'\n}\n```\n\nReturns `application/json`:\n\n```javascript\n{\n  \"loggedIn\": true,\n  \"user\": {\n    \"_id\": \"576bce9a1218f30100379b96\",\n    \"__v\": 0,\n    \"provider\": \"local\",\n    \"username\": \"\",\n    \"email\": \"g@g.com\",\n    \"type\": \"user\",\n    \"name\": \"\"\n  }\n}\n```\n\n#### `POST /details`\n\nThe user schema has a `data` property that is a POJO with whatever fields you want.\n\nWhatever JSON packet you POST to `/details` will be written to the `data` property of the user:\n\nPOST `application/json`:\n\n```javascript\n{\n  \"fruit\":\"apples\",\n  \"color\":\"red\"\n}\n```\n\nReturns `application/json`:\n\n```javascript\n{\n  \"updated\": true,\n  \"user\": {\n    \"_id\": \"576bce9a1218f30100379b96\",\n    \"__v\": 0,\n    \"provider\": \"local\",\n    \"username\": \"\",\n    \"email\": \"g@g.com\",\n    \"type\": \"user\",\n    \"name\": \"\",\n    \"data\":{\n      \"fruit\":\"apples\",\n      \"color\":\"red\"\n    }\n  }\n}\n```\n\n## token access\n\nYou can use this library to protect micro-services with JWT token access.\n\nYou will need a shared secret between the micro-service and clients that want to speak to it.\n\n#### server-side\n\nHere is an example of protecting a route using the token access:\n\n```javascript\nconst Access = require('passport-service/tokenaccess')\n\n// the shared secret\nconst secret = process.env.TOKEN_SECRET\n\n// we want to protect this handler with JWT tokens\nvar handler = function(req, res){\n  res.end('sensitive data')\n}\n\n// this is the protected handler we can serve over the wire\nvar wrappedHandler = Access({\n  secret:secret,\n\n  /*\n\n    this gives us a chance to implement our own authorization logic\n    authData is the context of the request\n    it has a 'context' property either 'token' or 'session'\n    if the context is neither of these then the request is not authenticated\n\n   */\n\n  authorizor:function(req, authData, done){\n\n    /*\n\n      'authData.context' has to be either:\n        * session access with user\n        * token access with user_id in tokenData\n\n     */\n\n    if(authData.context=='token'){\n\n      /*\n\n        authData.data contains the data encoded into the token\n        we can use it to decide on access\n        the point is you can do what you want in this function\n        also it is async so you can lookup files/network to determine access\n\n       */\n\n      var tokenData = authData.data\n\n      if(tokenData.serviceType=='apples'){\n\n        // return no error means the request can proceed\n        done()\n      }\n      else{\n\n        // return an error blocks the request\n        done('access denied to service: ' + tokenData.serviceType)\n      }\n      \n    }\n    else{\n\n      // return an error blocks the request\n      return done('token access needed for frameworks service', 'authn')\n    }\n  }\n}, router)\n```\n\n#### client-side\n\nHere is an example of making a request to the service above:\n\n```javascript\nconst request = require('request')\nconst authTools = require('passport-service/tools')\n\n// the shared secret\nconst secret = process.env.TOKEN_SECRET\n\n// the data we want to inject into the token\nvar tokenData = {\n  serviceType:'apples'\n}\n\n// other headers we want to send\nvar headers = {\n  'X-MY-HEADER':'apples'\n}\n\nrequest({\n  method:'GET',\n  url:'http://myservice.local/v1/path',\n  headers:authTools.injectToken(secret, tokenData, headers)\n}, function(err res){\n  // handle the response\n})\n```\n\nThe above will inject a JWT into the request headers using the secret you pass.\n\n## session access\n\nYou can also use this library to protect a micro-service using session based user logins.\n\n#### server-side\n\nHere is an example of protecting a route using the session access:\n\n```javascript\nconst Access = require('passport-service/tokenaccess')\n\n// the shared secret\nconst secret = process.env.TOKEN_SECRET\n\n// the connection details for our auth endpoint\nconst auth_host = 'myauthservice.local'\nconst auth_port = 80\nconst auth_path = '/auth/v1'\n\n// we want to protect this handler with JWT tokens\nvar handler = function(req, res){\n  res.end('sensitive data')\n}\n\n// this is the protected handler we can serve over the wire\nvar wrappedHandler = Access({\n  secret:secret,\n\n  /*\n\n    the same as token access but this time the context may be set to 'session'\n    in this handler we set the `_userid` property of the request to match the user in the request\n    this can be got from either the session cookie or the token\n\n   */\n\n  authorizor:function(req, authData, done){\n\n    if(authData.context=='token'){\n        if(!authData.data || !authData.data.userid){\n          return done('user needed for projects service', 'authn')\n        }\n        req._userid = authData.data.userid\n        done()\n      }\n      else if(authData.context=='session'){\n        if(!authData.data || !authData.data.loggedIn || !authData.data.user || !authData.data.user._id){\n          return done('user needed for projects service', 'authn')\n        }\n        req._userid = authData.data.user._id\n        done()\n      }\n      else{\n        return done('user needed for projects service', 'authn')\n      }\n  }\n}, router)\n```\n\n#### client-side\n\nFor session access any client that can use cookies can make requests (e.g. a browser or the `request` module using `cookie-jar=true`)\n\nObviously that client must have made a request to `/auth/v1/login` to get the cookie before making requests to protected routes.\n\n## tests\n\n```bash\n$ npm test\n```\n\n## license\n\nMIT","created":"2016-06-22T21:02:08.290Z","modified":"2016-11-09T22:03:59.445Z","lastPublisher":{"name":"binocarlos","email":"kaiyadavenport@gmail.com"},"owners":[{"name":"binocarlos","email":"kaiyadavenport@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"passport-service","_nodeVersion":"5.4.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/passport-service-2.3.1.tgz_1478729038805_0.172160905553028"},"_npmUser":{"name":"binocarlos","email":"kaiyadavenport@gmail.com"},"_npmVersion":"3.3.12","_rev":"7-67de2647e1cf6511b5d36aaee2b88efe","_shasum":"d9a157807fad93f42285d688146065ab775b867e","author":{"name":"Kai Davenport"},"bugs":{"url":"https://github.com/binocarlos/passport-service/issues"},"directories":{},"dist-tags":{"latest":"2.3.1"},"dist":{"shasum":"d9a157807fad93f42285d688146065ab775b867e","tarball":"http://registry.npmjs.org/passport-service/-/passport-service-2.3.1.tgz"},"maintainers":[{"name":"binocarlos","email":"kaiyadavenport@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-09T22:03:59.445Z","created":"2016-06-22T21:02:08.290Z","1.0.0":"2016-06-22T21:02:08.290Z","2.0.0":"2016-11-06T12:28:37.675Z","2.0.1":"2016-11-06T16:01:23.244Z","2.1.0":"2016-11-09T20:43:35.647Z","2.2.0":"2016-11-09T21:04:02.800Z","2.3.0":"2016-11-09T21:29:44.179Z","2.3.1":"2016-11-09T22:03:59.445Z"}}}