{"name":"citation","description":"Legal citation extractor. Standalone library, and optional HTTP API.","version":"0.9.0","license":"CC0-1.0","keywords":["congress","laws","legal","citations","us code","regulations"],"repository":"https://github.com/unitedstates/citation","bin":{"cite":"./bin/cite","cite-server":"./bin/cite-server"},"scripts":{"test":"nodeunit test","start":"node bin/cite-server"},"dependencies":{"body-parser":"^1.15.0","errorhandler":"^1.4.3","express":"^4.13.4","method-override":"^2.3.5","minimist":"^1.2.0","nomar":"^1.1.0","parse5":"^2.1.5","walverine":"^0.0.7","xmldom":"^0.1.22"},"devDependencies":{"deep-equal":"^1.0.1","gulp":"^3.9.1","gulp-browserify":"^0.5.0","gulp-gzip":"^1.2.0","gulp-rename":"^1.2.0","gulp-uglify":"^1.5.2","nodeunit":"^0.9.1"},"engines":{"node":">=0.10"},"main":"./citation.js","gitHead":"f101525b434018321e3503039959d1e60db4b97a","homepage":"https://github.com/unitedstates/citation#readme","versions":[{"number":"0.0.1","date":"2012-05-07T18:05:02.131Z"},{"number":"0.0.2","date":"2012-05-08T15:35:41.477Z"},{"number":"0.1.0","date":"2012-07-15T06:20:08.241Z"},{"number":"0.1.1","date":"2012-07-15T16:40:09.101Z"},{"number":"0.1.2","date":"2012-09-12T21:29:27.841Z"},{"number":"0.4.0","date":"2012-10-11T20:14:06.129Z"},{"number":"0.4.1","date":"2012-10-12T18:35:01.565Z"},{"number":"0.4.2","date":"2012-10-12T18:37:52.400Z"},{"number":"0.4.3","date":"2012-10-12T18:52:22.651Z"},{"number":"0.4.4","date":"2012-10-12T19:32:13.724Z"},{"number":"0.4.5","date":"2012-10-12T19:52:15.267Z"},{"number":"0.5.0","date":"2012-10-15T01:43:08.486Z"},{"number":"0.5.1","date":"2012-10-15T19:46:12.861Z"},{"number":"0.5.2","date":"2012-10-15T19:47:53.910Z"},{"number":"0.6.0","date":"2013-04-14T18:34:23.084Z"},{"number":"0.6.1","date":"2013-04-14T19:07:24.803Z"},{"number":"0.6.2","date":"2013-05-10T14:56:08.412Z"},{"number":"0.6.3","date":"2013-06-01T15:39:25.866Z"},{"number":"0.6.4","date":"2013-11-18T22:57:45.445Z"},{"number":"0.8.0","date":"2014-09-29T14:14:09.533Z"},{"number":"0.8.1","date":"2015-01-31T20:22:24.106Z"},{"number":"0.9.0","date":"2017-03-05T20:02:07.396Z"}],"readme":"# Citation\n\n[![Build Status](https://travis-ci.org/unitedstates/citation.svg?branch=master)](https://travis-ci.org/unitedstates/citation)\n\nA fast, stand-alone legal citation extractor.\n\nCurrently supports:\n\n* `usc`: US Code\n* `law`: US Slip Laws (public and private laws)\n* `stat`: US Statutes at Large\n* `cfr`: US Code of Federal Regulations\n* `dc_code`: DC Code\n* `dc_register`: DC Register\n* `dc_law`: DC Slip Law\n\nWith limited, opt-in support for:\n\n* `judicial`: US court opinions, using [walverine](https://github.com/adelevie/walverine) ([more below](#court-opinions))\n\nAs you can see, Citation is currently US-only, but we'd love for that to change. There are lots more citation types out there, and it's [easy to contribute](HOWTO.md), so please help us grow!\n\nCompatible in-browser with modern browsers, including IE **9+**.\n\n## Use\n\nCitation can be used:\n\n1. **[In JavaScript](#javascript-api)**, in browser or in Node. This method supports the most options, including passing in JavaScript functions as callbacks.\n2. **[Over HTTP](#http-api)**, via GET or POST. Supports JSON and JSONP. Options require function callbacks are *not* supported (it won't eval JavaScript).\n3. **[On the command line](#command-line-api)** or Unix pipes, over STDOUT. Options require function callbacks are *not* supported (it won't eval JavaScript).\n\nBut one way or another, you pass in text:\n\n```javascript\nCitation.find(\"pursuant to 5 U.S.C. 552(a)(1)(E) and\");\n```\n\nAnd you get back data about matched citations:\n\n```javascript\n[{\n  \"match\": \"5 U.S.C. 552(a)(1)(E)\",\n  \"citation\": \"5 U.S.C. 552(a)(1)(E)\",\n  \"type\": \"usc\",\n  \"index\": \"0\",\n  \"usc\": {\n    \"title\": \"5\",\n    \"section\": \"552\",\n    \"subsections\": [\"a\", \"1\", \"E\"],\n    \"id\": \"usc/5/552/a/1/E\",\n    \"section_id\": \"usc/5/552\"\n  }\n}]\n```\n\n### In the browser\n\n[Check out /browser](/browser) for browser-ready compressed and uncompressed versions of the library.\n\nLoading any of them with a `<script>` tag will result in a global `Citation` object being available for immediate use.\n\n### In Node\n\n[Install Node.js and NPM](http://nodejs.org/#download), then install Citation globally (may require `sudo`):\n\n```bash\nnpm install -g citation\n```\n\nOr install it locally to a `node_modules` directory with `npm install citation`.\n\n## JavaScript API\n\n### `Citation.find(text, options)`\n\nCheck a block of `text` for citations of a given type, returning an array of\nmatches with citations broken out into fields.\n\n`options` can include:\n\n* `types`: (string | string array) Limit citation types to those given. e.g. `[\"usc\", \"law\"]`\n* `excerpt`: (integer) Return an `excerpt` of the surrounding text for each detected cite, with the given number of characters on either side.\n* `parents`: (boolean) For any cite, return any \"parent\" cites alongside it. For example, matching \"5 USC 552(b)(3)\" would return 3 results - one for the parent section, one for `(b)`, and one for `(b)(3)`.\n* `filter`: (string) Enable [Filtering](#filtering).\n* `replace`: (function | object) Enable [Replacement](#replacement).\n* `links`: (boolean) [Include Links](#include-links).\n* Also: see [Cite-specific options](#cite-specific-options) to pass in options for a particular citation type.\n\nSome examples:\n\n```javascript\nCitation.find(\"pursuant to 5 U.S.C. 552(a)(1)(E) and\");\n\n// Yields:\n\n[{\n  \"match\": \"5 U.S.C. 552(a)(1)(E)\",\n  \"citation\": \"5 U.S.C. 552(a)(1)(E)\",\n  \"type\": \"usc\",\n  \"index\": \"0\",\n  \"usc\": {\n    \"title\": \"5\",\n    \"section\": \"552\",\n    \"subsections\": [\"a\", \"1\", \"E\"],\n    \"id\": \"usc/5/552/a/1/E\",\n    \"section_id\": \"usc/5/552\"\n  }\n}]\n\nCitation.find(\"that term in section 5362(5) of title 31, United States Code.\", {\n  excerpt: 10\n})\n\n// Yields:\n\n[{\n  \"match\": \"section 5362(5) of title 31\",\n  \"citation\": \"31 U.S.C. 5362(5)\",\n  \"excerpt\": \"t term in section 5362(5) of title 31, United S\",\n  // ... more details ...\n}]\n```\n\n## HTTP API\n\nStart the API on a given port (defaults to 3000):\n\n```bash\ncite-server [port]\n```\n\nGET or POST to `/citation/find` with a `text` parameter:\n\n```bash\ncurl http://localhost:3000/citation/find?text=5+U.S.C.+552%28a%29%281%29%28E%29\n\ncurl -XPOST \"http://localhost:3000/citation/find\" -d \"text=5 U.S.C. 552(a)(1)(E)\"\n```\n\nWill return the results of running Citation.find() on the block of text, under a `results` key:\n\n```json\n{\n  \"results\": [\n    {\n      \"match\": \"5 U.S.C. 552(a)(1)(E)\",\n      \"citation\": \"5 U.S.C. 552(a)(1)(E)\",\n      \"type\": \"usc\",\n      \"index\": \"0\",\n      \"usc\": {\n        \"title\": \"5\",\n        \"section\": \"552\",\n        \"subsections\": [\"a\", \"1\", \"E\"],\n        \"id\": \"usc/5/552/a/1/E\",\n        \"section_id\": \"usc/5/552\"\n      }\n    }\n  ]\n}\n```\n\n### Supported options\n\nSome HTTP-specific parameters:\n\n* `callback`: a function name to use as a JSONP callback.\n* `pretty`: prettify (indent) output.\n\nAnd some of the options that the [JavaScript API](#javascript-api) supports:\n\n* `text`: **required**, text to extract citations from.\n* `options[excerpt]`: include excerpts with up to this many characters around it.\n* `options[types]`: limit citation types to a comma-separated list (e.g. \"usc,law\")\n\n### Server deployment\n\nSee [etc/](etc) for an example upstart script to keep `cite-server` running in production.\n\n## Command line API\n\nThe shell command can accept a string to parse as an argument or through STDIN, and outputs results to STDOUT as indented JSON.\n\n```bash\ncite \"section 5362(5) of title 31\"\n\necho \"section 5362(5) of title 31\" | cite\n\ncite \"pursuant to 5 U.S.C. 552(a)(1)(E) and > results.json\"\n```\n\n### Options\n\nPass any options the library takes, using dot operators to pass nested options.\n\nFor example, searching among types:\n\n```bash\ncite --types=usc,law \"section 5362(5) of title 31\"\n```\n\nPassing nested options:\n\n```bash\ncite --dc_code.source=dc_code \"and then ยง 3-101.01 happened\"\n```\n\nOpt-in to using `walverine` to search judicial cites with `--judicial`:\n\n```bash\ncite --judicial \"Smith v. Hardibble, 111 Cal.2d 222, 555, 558, 333 Cal.3d 444 (1988)\"\n```\n\nAdd `--links` to [include links](#include-links) in the output.\n\n## Filters\n\nInstead of treating the input text as just a blob of text that matches citations at a string index, you can apply a \"filter\" that will parse the input text and provide more precise context.\n\n##### Lines\n\nFor each citation, return the line number and the relative character index of the match inside that line.\n\nExample:\n\n```\ncite --pretty --filter=lines \"I once met a cite named nancy\nwhose 5 usc 552 was awfully fancy\nand then the poem ended\"\n```\n\n```json\n{\n  \"citations\": [\n    {\n      \"type\": \"usc\",\n      \"match\": \"5 usc 552\",\n      \"index\": 6,\n      \"citation\": \"5 U.S.C. 552\",\n      \"usc\": {\n        \"title\": \"5\",\n        \"section\": \"552\",\n        \"subsections\": [],\n        \"id\": \"usc/5/552\"\n      },\n      \"line\": 2\n    }\n  ]\n}\n```\n\n##### XPath\n\nFor each citation, return an XPath statement identifying the match's specific node in the input document, and the relative character index of the match inside that node.\n\nExample:\n\n```\ncite --pretty --filter=xpath_xml \"\n<?xml>\n<document>\n  <title>Best Bill of 2012</title>\n  <bill>\n    <introduction>Bill to enforce happiness amongst all the children</introduction>\n    <closing>All information releasable through 5 U.S.C. 552 is now banned</closing>\n    <footer>(c) Congress</footer>\n  </bill>\n</document>\n\"\n```\n\n```json\n{\n  \"citations\": [\n    {\n      \"type\": \"usc\",\n      \"match\": \"5 U.S.C. 552\",\n      \"index\": 35,\n      \"citation\": \"5 U.S.C. 552\",\n      \"usc\": {\n        \"title\": \"5\",\n        \"section\": \"552\",\n        \"subsections\": [],\n        \"id\": \"usc/5/552\"\n      },\n      \"xpath\": \"/document[1]/bill[1]/closing[1]/text()[1]\"\n    }\n  ]\n}\n```\n\n\n## Replacement\n\nYou can perform a \"find-and-replace\" with detected citations, by providing a `replace` callback to be executed on each citation, that returns the string to replace that citation.\n\nBy passing a `replace` callback, a `text` field will be included at the top of the returned object, with the processed text.\n\n```javascript\nCitation.find(\"click on 5 USC 552 to read more\", {\n  replace: function(cite) {\n    var url = \"http://www.law.cornell.edu/uscode/text/\" + cite.usc.title + \"/\" + cite.usc.section;\n    return \"<a href=\\\"\" + url + \"\\\">\" + cite.match + \"</a>\";\n  };\n});\n```\n\nThe response will have a `text` field containing:\n\n```text\nclick on <a href=\"http://www.law.cornell.edu/uscode/text/5/552\">5 USC 552</a> to read more\n```\n\nThis feature is only available in the JavaScript API.\n\n## Include Links\n\nWith the `links` option, each matched citation will include URLs to access the content of the citation on the web. For:\n\n```javascript\nCitation.find(\"pursuant to 5 U.S.C. 552(a)(1)(E) and\", { links: true });\n```\n\nyou will get back an extended object with permalinks:\n\n```javascript\n[{\n  \"match\": \"5 U.S.C. 552(a)(1)(E)\",\n  \"type\": \"usc\",\n  ...\n  \"usc\": {\n    \"id\": \"usc/5/552/a/1/E\",\n    ...\n    \"links\": {\n      \"usgpo\": {\n        \"source\": {\n          \"name\": \"U.S. Government Publishing Office\",\n          \"abbreviation\": \"US GPO\",\n          \"link\": \"http://www.gpo.gov\",\n          \"authoritative\": true,\n          \"note\": \"2014 edition. Sub-section citation is not reflected in the link.\"\n        },\n        \"pdf\": \"http://api.fdsys.gov/link?collection=uscode&year=2014&title=5&section=552&type=usc\",\n        \"html\": \"http://api.fdsys.gov/link?collection=uscode&year=2014&title=5&section=552&type=usc&link-type=html\",\n        \"landing\": \"http://api.fdsys.gov/link?collection=uscode&year=2014&title=5&section=552&type=usc&link-type=contentdetail\"\n      },\n      \"cornell_lii\": {\n        \"source\": {\n          \"name\": \"Cornell Legal Information Institute\",\n          \"abbreviation\": \"Cornell LII\",\n          \"link\": \"https://www.law.cornell.edu/uscode/text\",\n          \"authoritative\": false,\n          \"note\": \"Link is to most current version of the US Code, as available at law.cornell.edu.\"\n        },\n        \"landing\": \"https://www.law.cornell.edu/uscode/text/5/552#a_1_E\"\n      }\n    }\n  }\n}]\n```\n\nThe `links` object maps sources to one or more renditions. The rendition types are `pdf`, `html` (for raw HTML content), `landing` for a landing page (i.e. a website) about the document refered to by the citation, and `mods` (US GPO MODS XML files).\n\n## Cite-specific options\n\nYou can pass arbitrary options to individual citators, if that citator supports them.\n\nBy using a key is the key of a citator, e.g. `usc` or `dc_code`, that citator's processors will get the value of that key passed in as an argument.\n\n### Example: DC Code relative cites\n\nFor example, the `dc_code` citator accepts a `source` option, to indicate\nwhat the text source is. If the value of `source` is itself \"dc_code\",\nthen the citator will apply a looser pattern to detect internal cites.\n\nThat looks like this:\n\n```javascript\nCitation.find(\"required under ยง 3-101.01(13)(e), the Commission shall perform the\", {\n  dc_code: {source: \"dc_code\"}\n})\n```\n\nThat will match `ยง 3-101.01(13)(e)`, because the `dc_code` citator assumes it's processing the text of the DC Code itself, and internal references are unambiguous.\n\n## Court opinions\n\nCitation can integrate with [walverine](https://github.com/adelevie/walverine) to detect and return results for US court opinions.\n\nTo use walverine, you may need to \"opt-in\" to including `judicial`-type citations.\n\nIn JavaScript:\n\n```javascript\nCitation.types.judicial = require(\"./citations/judicial\");\n```\n\nIn CLI:\n\n```javascript\ncite --judicial \"Text to scan\"\n```\n\nThe HTTP server, `cite-server` actually loads `judicial` cites by default, since the performance penalty is absorbed on start-up.\n\n#### Unsupported features\n\nwalverine's support for extra features is limited. When detecting `judicial`-type cites, there is no support for:\n\n* Returning parent citations\n* Replacing detected text\n* A character index of detected citations\n\n## Tests\n\nThis project is tested with [nodeunit](https://github.com/caolan/nodeunit).\n\nTo run tests, you'll need to install this project from source and install its\nnode dependencies:\n\n```\ngit clone git@github.com:unitedstates/citation.git\ncd citation\nnpm install\nnpm test\n```\n\nTest cases are stored in the `test` directory. Each test case covers a subsection\nof the code and ensures that citations are correctly detected: for instance, see\n[test/stat.js](test/stat.js).\n\nTo run all tests:\n\n```bash\nnodeunit test\n```\n\nTo run a specific test:\n\n```bash\nnodeunit test/usc.js\n```\n\n## Public domain\n\nThis project is [dedicated to the public domain](LICENSE). As spelled out in [CONTRIBUTING](CONTRIBUTING.md):\n\n> The project is in the public domain within the United States, and copyright and related rights in the work worldwide are waived through the [CC0 1.0 Universal public domain dedication](http://creativecommons.org/publicdomain/zero/1.0/).\n\n> All contributions to this project will be released under the CC0 dedication. By submitting a pull request, you are agreeing to comply with this waiver of copyright interest.\n","starsCount":1,"created":"2012-05-07T18:05:01.718Z","modified":"2017-03-05T20:02:07.396Z","lastPublisher":{"name":"konklone","email":"eric@konklone.com"},"owners":[{"name":"konklone","email":"konklone@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"citation","_nodeVersion":"6.2.2","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/citation-0.9.0.tgz_1488744126618_0.6636396960821003"},"_npmUser":{"name":"konklone","email":"eric@konklone.com"},"_npmVersion":"3.9.5","_rev":"2-4d89a238dd91c6b4d887a554254b2a0d","_shasum":"e2870a711468815e0ff06d1cf0bdb3734dc32ace","author":{"name":"Eric Mill"},"bugs":{"url":"https://github.com/unitedstates/citation/issues"},"directories":{},"dist-tags":{"latest":"0.9.0"},"dist":{"shasum":"e2870a711468815e0ff06d1cf0bdb3734dc32ace","tarball":"https://registry.npmjs.org/citation/-/citation-0.9.0.tgz"},"maintainers":[{"name":"konklone","email":"konklone@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-05T20:02:07.396Z","created":"2012-05-07T18:05:01.718Z","0.0.1":"2012-05-07T18:05:02.131Z","0.0.2":"2012-05-08T15:35:41.477Z","0.1.0":"2012-07-15T06:20:08.241Z","0.1.1":"2012-07-15T16:40:09.101Z","0.1.2":"2012-09-12T21:29:27.841Z","0.4.0":"2012-10-11T20:14:06.129Z","0.4.1":"2012-10-12T18:35:01.565Z","0.4.2":"2012-10-12T18:37:52.400Z","0.4.3":"2012-10-12T18:52:22.651Z","0.4.4":"2012-10-12T19:32:13.724Z","0.4.5":"2012-10-12T19:52:15.267Z","0.5.0":"2012-10-15T01:43:08.486Z","0.5.1":"2012-10-15T19:46:12.861Z","0.5.2":"2012-10-15T19:47:53.910Z","0.6.0":"2013-04-14T18:34:23.084Z","0.6.1":"2013-04-14T19:07:24.803Z","0.6.2":"2013-05-10T14:56:08.412Z","0.6.3":"2013-06-01T15:39:25.866Z","0.6.4":"2013-11-18T22:57:45.445Z","0.8.0":"2014-09-29T14:14:09.533Z","0.8.1":"2015-01-31T20:22:24.106Z","0.9.0":"2017-03-05T20:02:07.396Z"},"users":{"phette23":true}}}