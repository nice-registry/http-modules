{"name":"helo","version":"1.1.1","description":"Promise-based HTTP request handling stack.","main":"lib/main.js","scripts":{"test":"mocha && npm run lint","lint":"jshint --reporter node_modules/jshint-stylish/stylish.js .","doc":"grock","doc-publish":"grock --github"},"repository":"https://github.com/novemberborn/helo","keywords":["promise","promises","Promises/A+","promises-aplus","deferred","deferreds","when","future","async","asynchronous","http","request","server","legendary","helo"],"license":"ISC","homepage":"https://github.com/novemberborn/helo","peerDependencies":{"legendary":"^1.0.0"},"devDependencies":{"chai":"^1.9.1","jshint-stylish":"^0.2.0","jshint":"^2.5.0","mocha":"^1.18.2","sinon":"^1.9.1","chai-sentinels":"^1.0.0","legendary":"^1.0.0","grock":"^0.3.3","chai-as-promised":"^4.1.1","stream-array":"^0.1.3"},"deprecated":"No longer maintained.","versions":[{"number":"1.0.0","date":"2014-04-30T14:12:39.682Z"},{"number":"1.0.1","date":"2014-06-06T15:31:21.531Z"},{"number":"1.1.0","date":"2014-06-09T15:00:53.653Z"},{"number":"1.1.1","date":"2014-06-11T17:57:42.785Z"}],"readme":"helo\n====\n\nPromise-based HTTP request handling stack.\n\n## Installation\n\n```\nnpm install legendary\nnpm install helo\n```\n\nThis module has a peer dependency on\n[Legendary](https://github.com/novemberborn/legendary).\n\n## Usage\n\nSee [API Docs](http://novemberborn.github.io/helo/lib/main.js.html).\n\n### Request handling\n\nHelo handles requests a little differently than a standard Node HTTP server. To\nsee how, let's start with a standard example:\n\n```js\nfunction app(req, res) {\n  setTimeout(function() {\n    res.writeHead(200, { 'content-type': 'text/html' });\n    res.end('<p>Hello world</p>');\n  }, 2000);\n}\n\nvar server = require('http').createServer(app);\nserver.listen(8080);\n```\n\nThe application receives a `req` argument, the *incoming message*, and a\n`res` argument, the *outgoing message*. It writes directly to the outgoing\nmessage.\n\nHere's Helo's equivalent:\n\n```js\nvar delay = require('legendary').timed.delay;\n\nfunction app(request) {\n  return delay(2000).yield({\n    statusCode: 200,\n    html: '<p>Hello world</p>'\n  });\n}\n\nvar server = require('http').createServer();\n\nrequire('helo').Stack()\n  .finalize(app)\n  .observe(server);\n\nserver.listen(8080);\n```\n\n#### Responses\n\nThe application does not receive the outgoing message, instead it's expected to\nreturn a (promise for a) response object. This is then written to the outgoing\nmessage by Helo. [Read more about the response\nobjects](http://novemberborn.github.io/helo/doc/Responses.md.html).\n\nThe promise is cancelled if the outgoing message is closed before the promise\nhas fulfilled. This allows the application to decide whether to continue\nhandling the request even though its response will never reach the end-user.\n\n#### Requests\n\nThe request received by the application is a wrapper for the incoming message.\n[Read more about the default request\nproperties](http://novemberborn.github.io/helo/doc/Requests.md.html).\n\nEach stack has its own `Request` class. You can extend its prototype:\n\n```js\nvar stack = require('helo').Stack();\nstack.Request.prototype.metasyntactic = function() {\n  return 'foo';\n};\n```\n\nTo add specific properties to the request, as it's instantiated, you can use\n[`Stack#addRequestInitializer()`](http://novemberborn.github.io/helo/lib/Stack.js.html#stack-addrequestinitializer-initializer-):\n\n```js\nrequire('helo').Stack()\n  .addRequestInitializer(function() {\n    this.start = this.headers['x-request-start'];\n  })\n  .finalize(function(request) {\n    return {\n      statusCode: 200,\n      html: ['<p>Received request at ', request.start, '</p>']\n    };\n  });\n```\n\n#### Middleware\n\n[`Stack#addMiddleware()`](http://novemberborn.github.io/helo/lib/Stack.js.html#stack-addmiddleware-factory-)\ncan be used to set up a chain of functions that'll be invoked before the\nrequest is passed to the application:\n\n```js\nfunction app(request) {\n  return {\n    statusCode: 200,\n    html: '<p>Hello world</p>'\n  };\n}\n\nrequire('helo').Stack()\n  .addMiddleware(function(next) {\n    return function(request) {\n      if (Math.random() < 1/3) {\n        return {\n          statusCode: 200,\n          html: '<p>Intercepted request before application was reached.</p>'\n        };\n      }\n\n      return next(request);\n    };\n  })\n  .addMiddleware(function(next) {\n    return function(request) {\n      return next(request).then(function(response) {\n        if (Math.random() < 1/3) {\n          return {\n            statusCode: 200,\n            html: '<p>Replaced application response.</p>'\n          };\n        }\n\n        return response;\n      });\n    };\n  })\n  .finalize(app);\n```\n\n`next` will invoke the next middleware function or indeed the application. It\nalways returns a promise, albeit rejected if the function throws.\n\nMiddleware should *not* be used to set properties on the `request`. Use\nrequest initializers instead.\n\n#### Plugins\n\nPlugins combine request initializers and middleware in a single object:\n\n```js\nrequire('helo').Stack()\n  .install({\n    requestInitializer: function() {},\n    middleware: function(next) {\n      return next;\n    }\n  });\n```\n\n#### Low-level error responses\n\nA `503` response is generated when the response promise is rejected with an\nerror that has a `cancel` as its `name`. Similarly if the error has `timeout` as\nits `name`, a `504` response is generated. For all other errors a `500` response\nis used.\n\nNormally these responses do not have headers or indeed a response body, but they\ncan be customized:\n\n```js\nrequire('helo').Stack()\n  .setErrorResponse({\n    statusCode: 500,\n    headers: { 'content-type': 'text/html' },\n    chunk: new Buffer('<p>An internal error occurred.</p>')\n  })\n  .setErrorResponse({\n    statusCode: 503,\n    headers: { 'content-type': 'text/html' },\n    chunk: new Buffer('<p>Service unavailable.</p>')\n  })\n  .setErrorResponse({\n    statusCode: 504,\n    headers: { 'content-type': 'text/html' },\n    chunk: new Buffer('<p>Service timed out.</p>')\n  });\n```\n\n#### Lifecycle events\n\nEvents are emitted from the stack when new requests are made, errors occur, or\nresponses are written. [Read more about\nevents](http://novemberborn.github.io/helo/doc/Events.md.html).\n\n#### And more!\n\nSee [API Docs](http://novemberborn.github.io/helo/lib/main.js.html).\n","starsCount":0,"created":"2014-04-30T14:12:39.682Z","modified":"2016-01-05T17:52:05.608Z","lastPublisher":{"name":"novemberborn","email":"mark@novemberborn.net"},"owners":[{"name":"novemberborn","email":"mark@novemberborn.net"}],"other":{"_attachments":{},"_from":".","_id":"helo","_npmUser":{"name":"novemberborn","email":"mark@novemberborn.net"},"_npmVersion":"1.4.9","_rev":"1-a7e5707380828473f13b268fd7654673","_shasum":"649af2157e9be2e18069d6e6825474789a917088","author":{"name":"Mark Wubben","url":"http://novemberborn.net"},"bugs":{"url":"https://github.com/novemberborn/helo/issues"},"directories":{},"dist-tags":{"latest":"1.1.1"},"dist":{"shasum":"649af2157e9be2e18069d6e6825474789a917088","tarball":"http://registry.npmjs.org/helo/-/helo-1.1.1.tgz"},"maintainers":[{"name":"novemberborn","email":"mark@novemberborn.net"}],"readmeFilename":"README.md","time":{"modified":"2016-01-05T17:52:05.608Z","created":"2014-04-30T14:12:39.682Z","1.0.0":"2014-04-30T14:12:39.682Z","1.0.1":"2014-06-06T15:31:21.531Z","1.1.0":"2014-06-09T15:00:53.653Z","1.1.1":"2014-06-11T17:57:42.785Z"},"users":{}}}