{"name":"concordia-http","version":"0.8.0","description":"An http module for Concordia","main":"lib/concordia-http.js","scripts":{"test":"gulp test"},"repository":"https://github.com/concordiajs/concordia-http","licenses":[{"type":"Apache-2.0","url":"http://github.com/concordiajs/concordia-http/raw/master/LICENSE"}],"homepage":"https://github.com/concordiajs/concordia-http","dependencies":{"restify":"^2.8.2","underscore":"^1.7.0"},"devDependencies":{"concordia":"0.8.1","gulp":"^3.8.7","gulp-docco":"0.0.4","gulp-example-to-test":"^0.1.0","gulp-help":"^0.1.7","gulp-insert":"^0.4.0","gulp-istanbul":"^0.2.0","gulp-jshint":"^1.6.3","gulp-mocha":"^0.4.1","gulp-replace":"^0.4.0","gulp-rimraf":"^0.1.0","gulp-util":"^3.0.1","jshint-stylish":"^0.2.0","mocha":"^1.18.2","must":"^0.11.0","request":"^2.42.0","run-sequence":"^0.3.6","supertest":"^0.12.0"},"gitHead":"c11937d1957eb80140b8c2b78e9c0f8672b452c9","versions":[{"number":"0.7.0","date":"2014-09-11T20:45:46.958Z"},{"number":"0.8.0","date":"2014-10-21T09:35:05.824Z"}],"readme":"# Concordia-http\n[![wercker status](https://app.wercker.com/status/95adf712cc6bc48d5a579875ff4c6529/s/master \"wercker status\")](https://app.wercker.com/project/bykey/95adf712cc6bc48d5a579875ff4c6529)\n[![NPM version](https://badge.fury.io/js/concordia-http.svg)](http://badge.fury.io/js/concordia-http)\n[![Gitter chat](https://badges.gitter.im/ConcordiaJS/concordia-http.png)](https://gitter.im/ConcordiaJS/concordia-http)\n\nA restify-based concordia-extension, for making actions available as HTTP-endpoints.\nEasily add http-endpoints to your concordia-actions. Based on the excellent\n[restify](http://mcavage.me/node-restify/).\n\n## Usage\n\nLets suppose we created a concordia action `allcaps`:\n\n```javascript\nconcordia.defineAction$('allcaps', function(word) {\n    return word.toUpperCase() + '!';\n})\n```\n\nLet's make this action available over HTTP:\n\n```javascript\nconcordia.allcaps.get('/allcaps/concordia');\n```\n\nAnd that's it!\n\nBy default, an action gets called with the parameters in the url followed by the\nrequest body as arguments. The response of the action will be returned with a\n200 status code. If you want different behaviour, you can define your own\ntransform:\n\n```javascript\n//This example requires the `bodyParser` middleware.\nconcordia.add.post('/allcaps')\n    .transform(function(req, res) {\n        var words = req.body;\n        return this.execute$(words.join(' '))\n            .then(function(result) {\n                res.send(200, { scream: result });\n            });\n    });\n```\n\nIn other words, it's just like an ordinary middleware, with the exception that\nyou can use `this.execute$` to call the underlying action and the absence of a\n`next` callback. Instead, the returned promise, once resolved, triggers the next\nmiddleware.\n\nNow suppose you want to add some validation to this route. Easy:\n\n```javascript\nconcordia.add.get('/allcaps/:words')\n    .addHandler(myValidationMiddleware(schema))\n    .addHandler(myAuthenticationMiddleware())\n    .transform();\n```\n\nEach function passed to `addHandler` gets called with a `req` and `res` object\nand should return a promise that will trigger the next handler in the stack. A\n`transform` with no arguments will insert the default handler described above at\nthat position.\n\nOf course, it's also possible to add generic middleware to be used with every\nroute:\n\n```javascript\nconcordia.http.use(concordia.http.bodyParser());\n```\n\nRestify's bundled middlewares are made available from `concordia.http`. It is\nadvised extensions that add additional middlewares also store them there.\n\n## More Tags\n[![Code Climate](https://codeclimate.com/github/ConcordiaJS/concordia-http/badges/gpa.svg)](https://codeclimate.com/github/ConcordiaJS/concordia-http)\n[![Test Coverage](https://codeclimate.com/github/ConcordiaJS/concordia-http/badges/coverage.svg)](https://codeclimate.com/github/ConcordiaJS/concordia-http)\n[![Dependency Status](https://gemnasium.com/ConcordiaJS/concordia-http.svg)](https://gemnasium.com/ConcordiaJS/concordia-http)\n","created":"2014-09-11T20:45:46.958Z","modified":"2014-10-21T09:35:05.824Z","lastPublisher":{"name":"concordia","email":"concordia@jasperwoudenberg.com"},"owners":[{"name":"concordia","email":"concordia@jasperwoudenberg.com"}],"other":{"_attachments":{},"_from":".","_id":"concordia-http","_npmUser":{"name":"concordia","email":"concordia@jasperwoudenberg.com"},"_npmVersion":"1.4.28","_rev":"1-914923518d750f717688ebfce24b6f05","_shasum":"51e511798d4a68cbe216ef71a66fb011b68c85aa","author":{"name":"Concordia"},"bugs":{"url":"https://github.com/concordiajs/concordia-http/issues"},"directories":{},"dist-tags":{"latest":"0.8.0"},"dist":{"shasum":"51e511798d4a68cbe216ef71a66fb011b68c85aa","tarball":"http://registry.npmjs.org/concordia-http/-/concordia-http-0.8.0.tgz"},"maintainers":[{"name":"concordia","email":"concordia@jasperwoudenberg.com"}],"readmeFilename":"README.md","time":{"modified":"2014-10-21T09:35:05.824Z","created":"2014-09-11T20:45:46.958Z","0.7.0":"2014-09-11T20:45:46.958Z","0.8.0":"2014-10-21T09:35:05.824Z"}}}