{"name":"wan","version":"0.0.6","description":"The goal of Wan is to reduce http overhead by cutting requests to static resources, without requiring you to make any significant changes to your current sites. Wan will radically affect your site's request footprint. Click to see a [video side-by-side comparisson](http://www.youtube.com/watch?v=yZwwAi0MHzE&feature=youtu.be) of a website with and without `wan`.","main":"index.js","scripts":{"test":"NODE_ENV=test mocha --harmony-generators"},"license":"BSD-2-Clause","dependencies":{"mime":"~1.2.11","lru-cache":"~2.5.0"},"devDependencies":{"mocha":"~1.16.2","should":"~2.1.1","supertest":"~0.8.2","debug":"~0.7.4","on-socket-error":"~1.1.0","koa-static":"~1.4.0","koa":"~0.1.2"},"versions":[{"number":"0.0.0","date":"2013-12-27T20:49:12.214Z"},{"number":"0.0.1","date":"2014-01-08T19:03:23.313Z"},{"number":"0.0.2","date":"2014-01-08T19:06:20.663Z"},{"number":"0.0.3","date":"2014-01-08T20:52:51.484Z"},{"number":"0.0.4","date":"2014-01-08T21:24:11.850Z"},{"number":"0.0.5","date":"2014-01-08T23:41:48.230Z"},{"number":"0.0.6","date":"2014-02-26T21:23:16.926Z"}],"readme":"#Wan for Node.js\nThe goal of Wan is to reduce http overhead by cutting requests to static resources,\nwithout requiring you to make any significant changes to your current sites. Wan will radically affect\nyour site's request footprint. Click to see a [video side-by-side comparisson](http://www.youtube.com/watch?v=yZwwAi0MHzE&feature=youtu.be) of a website with and without `wan`.\n\n[![99 Requests, 1.5MB, load: 17.45s](https://s3.amazonaws.com/wan.js/youtube.png \"without Wan\")](http://www.youtube.com/watch?v=yZwwAi0MHzE&feature=youtu.be)\n\n####Before & After:\n![99 Requests, 1.5MB, load: 17.45s](https://s3.amazonaws.com/wan.js/before.png \"without Wan\")\n\n![62 Requests, 1.4MB, load: 14.47s](https://s3.amazonaws.com/wan.js/after.png \"with Wan\")\n\nCurrently, the only feature implemented is *data URI spriting*, which lets you stream all of your \nsite's static images to a client in a single HTTP request, without having to maintain\na sprite-sheet.\n\nWan is a two part library, containing a single file for the client, and a node module for the\nserver, available currently as a piece of Koa or Express middleware.\n\n##Installing\nWan is available for node.js via npm\n```\nnpm install wan\n```\n\n##Using Wan on the client\nThe client library exposes a single function, `Wan`, which you use to set options. You call `Wan.getImages()`\nto request the image stream from your server.\n```javascript\nWan(options);\t\t//returns Wan again\nWan.getImages();\n```\n**or**\n```javascript\nWan(options).getImages();\n```\n\nWhere options may contain any of the following:\n - `memCache` (default `true`): Enables caching requests in memory on the client side\n - `diskCache` (default `true`): Enables persistent caching in Local Storage\n - `cachePrefix` (default `\"wan-cache-\"`): Prefixes all keys stored in Local Storage\n - `expirationKey` (default `\"wan-expires\"`): Local Storage key which contains cache expiration info\n - `route` (default `\"/wan\"`): The route which is `GET` requested from your server for Wan\n\n###Data URI Spriting (client)\nAllows you to get all images on a page with a single xmlHttpRequest, by calling `wan.getImages()`.\nEvery `img` tag in the DOM when `getImages` is called that has a `data-src` attribute will be\nadded to the request, and have its `src` set to a data URI as soon as it has been send to the client.\nThe response is chunked and evaluated on every progress update in order to display images as soon as\npossible, without needing to wait for the response to finish.\n```html\n<img data-src=\"o.png\" width=\"20\" height=\"100\">\n<img data-src=\"m.png\" width=\"20\" height=\"100\">\n<img src=\"f.png\" width=\"20\" height=\"100\">\n<img data-src=\"g.png\" width=\"20\" height=\"100\">\n\n<script src=\"wan-client.js\"></script>\n<script>\n\tvar wan = new Wan({\n\t\tmemCache: true,\n\t\tdiskCache: false\n\t});\n\twan.getImages();\n</script>\n```\nThe example above will make a single request to your server, pulling `o.png`, `m.png`, and `g.png`.\nNotice that `f.png` is unaffected because it does not have a `data-src` attribute. Once an image has\nbeen loaded with Wan, it loses its `data-src` attribute for a `src` attribute.\n\nIf `diskCache` is enabled, then the client will check Local Storage for the file before requestng it\nfrom the server. A response with a `Cache-Control: max-age` or `Expires` header will store a special value\nin local storage that will serve to invalidate the Local Storage cache appropriately.\n\n####Controlling the loading order\nYou can control the order that your images load by adding the `priority` attribute to your `img` tags.\nPriorities should be integers.  Images with lower priorities load before images with higher priorities.\nImages without priorities are loaded after images with priorities. If image priorities are equal, then\ntheir order in the DOM is compared, loading images that appear higher in the DOM first.\n\n```html\n<!-- Loads second-->\n<img data-src=\"o.png\" width=\"20\" height=\"100\" priority=\"3\">\n\n<!-- Loads last (no priority given) -->\n<img data-src=\"m.png\" width=\"20\" height=\"100\">\n\n<!-- Loads third -->\n<img data-src=\"f.png\" width=\"20\" height=\"100\" priority=\"3\">\n\n<!-- Loads first -->\n<img data-src=\"g.png\" width=\"20\" height=\"100\" priority=\"1\">\n```\n\n##Creating Wan on the server\nRequiring `'wan/koa'` will give you middleware that you can use with Koa.  Requiring `'wan/express` will give you express middleware. \n```javascript\nvar wan = require('wan/koa');\napp.use(wan(options));\n```\nWhere options contains the following:\n - cacheSize (default `\"100MB\"`): Limits the size of the image cache in RAM\n - location (required): The path on disk where images served by wan are stored\n\n##How it works\nWan employs data URIs, local cache, and the idea behind CSS spriting to reduce the number of requests a page needs to make to get images. When `getImages` is called, a request is made to your server that contains the paths of all the images on the page with a `data-src` attribute. This is sent as a query string (if the URL is under 2000 characters), or the body of a POST request.\n\nOn the server, the file paths are parsed out. Files are openned (or retrieved from the server's cache) and streamed one by one, base64 encoded, into the server response. \n\nOn the client, the response is parsed as it streams in, setting the `src` attribute of each image requested as soon as the data has come through.  The result is a single, streamed process, which prevents any unecessary waiting for entire processess to finish before the next begins.\n","created":"2013-12-27T20:49:08.332Z","modified":"2014-02-26T21:23:16.926Z","lastPublisher":{"name":"mako-taco","email":"jake.y.scott@gmail.com"},"owners":[{"name":"mako-taco","email":"jake.y.scott@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"wan","_npmUser":{"name":"mako-taco","email":"jake.y.scott@gmail.com"},"_npmVersion":"1.3.15","_rev":"1-b0dd046e669420e4864b6422706fc0e5","author":"","directories":{},"dist-tags":{"latest":"0.0.6"},"dist":{"shasum":"cbb8a2c65afc387fda075411633005c8897056e2","tarball":"http://registry.npmjs.org/wan/-/wan-0.0.6.tgz"},"maintainers":[{"name":"mako-taco","email":"jake.y.scott@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-02-26T21:23:16.926Z","created":"2013-12-27T20:49:08.332Z","0.0.0":"2013-12-27T20:49:12.214Z","0.0.1":"2014-01-08T19:03:23.313Z","0.0.2":"2014-01-08T19:06:20.663Z","0.0.3":"2014-01-08T20:52:51.484Z","0.0.4":"2014-01-08T21:24:11.850Z","0.0.5":"2014-01-08T23:41:48.230Z","0.0.6":"2014-02-26T21:23:16.926Z"}}}