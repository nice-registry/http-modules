{"name":"perstore","version":"0.3.3","email":"kriszyp@gmail.com","keywords":["persistence","object","store","persevere"],"engines":{"node":">=0.1.30","rhino":true},"mappings":{"tunguska":"http://github.com/kriszyp/tunguska/zipball/v0.2.2","rql":"jar:http://github.com/kriszyp/rql/zipball/v0.2.2!/","patr":"jar:http://github.com/kriszyp/patr/zipball/v0.2.2!/","promised-io":"jar:http://github.com/kriszyp/promised-io/zipball/v0.2.2!/","json-schema":"http://github.com/kriszyp/json-schema/zipball/v0.2.1","mysql-native":"jar:http://github.com/sidorares/nodejs-mysql-native/zipball/master!/lib/mysql-native/","mongodb":"jar:http://github.com/christkv/node-mongodb-native/zipball/V0.9.4.4!/lib/mongodb/"},"overlay":{"narwhal":{"mappings":{"fs-promise":"./engines/rhino/lib/fs-promise","store-engine":"./engines/rhino/lib/store-engine/"}},"node":{"mappings":{"store-engine":"./engines/node/lib/store-engine/"}}},"usesSystemModules":["path"],"licenses":[{"type":"AFLv2.1","url":"http://trac.dojotoolkit.org/browser/dojo/trunk/LICENSE#L43"},{"type":"BSD","url":"http://trac.dojotoolkit.org/browser/dojo/trunk/LICENSE#L13"}],"repository":"https://github.com/kriszyp/tunguska","dependencies":{"tunguska":">=0.3.0","rql":">=0.3.1","promised-io":">=0.3.0","json-schema":">=0.2.1"},"devDependencies":{"patr":">0.2.6"},"jars":["jars/perstore.jar"],"readme":"Perstore is a cross-platform JavaScript object store interface for mapping persistent \r\nobjects to various different storage mediums using W3C's [IndexedDB object store API](http://www.w3.org/TR/IndexedDB/#object-store-sync). Perstore\r\nincludes JavaScript object-relational mapping for SQL databases, JSON file storage,\r\nand hopefully support for many other object/document style storage systems that\r\nprovide more direct object storage. Perstore provides model classes that wrap data\r\nstores, and supports JSON Schema integrity enforcement, link management, and \r\nprototype construction. Perstore also provides faceted access to models for an\r\nobject-capability based security model.\r\n\r\nSetup\r\n=====\r\n\r\nIt is recommended that you install Perstore such that it is available in require statements\r\nunder the \"perstore\" path. This can easily be done with a package mapping compliant module\r\nloader like [Nodules](http://github.com/kriszyp/nodules) by using a mapping in your \r\npackage.json:\r\n\r\n    \"mappings\": {\r\n\t  \"perstore\": \"http://github.com/kriszyp/perstore/zipball/master\"\r\n    }\r\n\r\nAnd you need a local.json file in your current working directory for your application that\r\ndefines any database settings such as connection information. There is a [template\r\nfor local.json](http://github.com/kriszyp/perstore/blob/master/template.local.json).\r\n \r\nModel\r\n=====\r\n\r\nTypical usage of Perstore looks like:\r\n\r\n    // first setup the object store, here we use SQL/ORM store\r\n    var store = require(\"perstore/store/sql\").SQLStore({\r\n        type: \"mysql\",\r\n        table: \"my_table\",\r\n        idColumn: \"id\"\r\n    });\r\n    \r\n    // now we can setup a model that wraps the data store\r\n    var MyModel = require(\"perstore/model\").Model(\"Example\", store, {\r\n    \tproperties: {\r\n    \t\t// we can define optionally define type constraints on properties\r\n    \t\tfoo: String\r\n    \t},\r\n    \tprototype: {\r\n    \t\t// we can define functions on the prototype of the model objects as well\r\n    \t\tgetFoo: function(){\r\n    \t\t\treturn this.foo;\r\n    \t\t}\r\n    \t}\r\n    });\r\n    // now we can interact with the store and it's objects\r\n    var someObject = MyModel.get(someId); // retrieve a persisted object\r\n    someObject.getFoo(); // returns the current value of foo\r\n    someObject.foo = \"bar\"; // make a change\r\n    someObject.save(); // and save it\r\n    \r\n    MyModel.delete(someOtherId); // delete an object\r\n    \r\n    var MyFacet = require(\"facet\").Restrictive(MyModel, {\r\n    });\r\n\r\n\tMyFacet.delete(someId) -> will fail, as the facet has not allowed access to delete().\r\n\t\r\nA model is defined with the Model constructor in the \"MyModel\" module. A Model definition\r\nmay follow the JSON schema definition for contractual constraints (usually defining property\r\ntype constraints in the \"properties\" property and relations with the \"links\" property). \r\nproperty. It may also contain a prototype property which defines the prototype object\r\nfor all instances of the model. Methods can be defined on the prototype object, as well\r\nas directly on the model. REST methods such as get, put, and delete are implemented\r\ndirectly on the model, and can be overriden for specific functionality. Perstore roughly \r\nfollows the [class definition structure used by Persevere 1.0](http://docs.persvr.org/documentation/storage-model/json-schema)\r\n    \r\nPerstore provides easy to use object persistence mechanism. Persisted model object\r\ninstances have two default methods and a property:\r\n\r\n- save() - Saves any changes that have been made to an object to the data store.\r\n- load() - If the object has not been fully loaded (sometime queries may return partial\r\nobject), the object will be fully loaded from the data store.\r\n- schema - This is a reference to the schema for this object. Schema objects are augmented\r\n(if it does not previously exist) with a getId method that can be used to retrieve the identity \r\nof an object:\r\n\r\n    object.schema.getId(object) -> identity of object\r\n\r\n\r\nIn the initial example, object persistence is demonstrated with the \"someObject\"\r\nvariable. The object is loaded (via the get call to the model), modified, and saved\r\n(with the save() call).\r\n\r\nFacets provide secure, controlled access to models. The facet module comes provides\r\ntwo facet constructors: Permissive and Restrictive. A Permissive facet allows all actions\r\non the model by default. Methods can be defined/overriden in the Permissive definition\r\nto control or disable access to certain functionality. A Restrictive facet only allows read\r\naccess methods by default (get and query). One can define/override methods to allow\r\nexplicit access to other methods such as put or create. An example facet that only\r\nallows read access and creation of new objects:\r\n\r\n    var facet = require(\"facet\").Restrictive(model, {\r\n        create: function(object){ // allow create\r\n            return model.create(object);\r\n        }\r\n    });\r\n\r\nModels wrap data stores, which provide the low level interaction with the database or \r\nstorage system. Perstore comes with several data stores including (in the store directory):\r\n\r\n- mongodb - This is object store that uses a MongoDB database for storage.\r\n- redis - This is object store that uses a Redis database for storage.\r\n- sql - An SQL-based object store. This stores and retrieves objects as rows in \r\ndatabases. Currently this only fully implemented in Rhino, but the sql data store can easily\r\nwrap an SQL database provider that simple provides an W3C SQL database style\r\nexecuteSql(sql) function.\r\n- memory - An in-memory data store. None of the data in this store will be persisted\r\n- js-file - Reads and stores all data in the store from a JSON (with JS extensions for \r\ndates and other non-standard JSON types) file.\r\n- remote - This can connect to a remote HTTP/REST based JSON server to store and \r\nretrieve data.\r\n\r\nPerstore also includes several store wrappers that can be used to compose more \r\nsophisticate stores by adding functionality (also in the store directory):\r\n\r\n- cache - Adds in-memory caching support to a provided store\r\n- aggregate - Combines record data from multiple stores into a single object store\r\n- replicated - Provides data replication across multiple stores\r\n- full-text - Adds full text indexing (currently only available in Rhino through Lucene)\r\n- inherited - Provides a super-sub type relationship between data stores\r\n\r\nThe following is store API for Perstore. The same API is used for data stores, store \r\nmodels, and facets. All of the functions are optional. If they do not exist, it indicates \r\nthat the store or model does not support or allow the said functionality. All of the \r\nfunctions may return a promise instead of \r\nthe actual return value if they require asynchronous processing to complete the \r\noperation. They are roughly listed in order of importance \r\n(get(id) is the most important function):\r\n\r\nget(id, directives) - Finds the persisted record with the given identifier from the store and returns \r\nan object representation (should always be a new object).\r\n\r\nput(object, directives) - Stores the given object in storage. The record may or may not \r\nalready exist. The optional second parameter \r\ndefines the primary identifier for storing the object. If the second parameter is omitted, the\r\nkey may be specified the primary identifier property. If that is not specified, the key may be\r\nauto-generated. The primary identifer for the object should be returned\r\n\r\ndelete(id, directives) - Deletes the record with the given identifier from the store.\r\n\r\nquery(queryString, directives) - This executes a query against the data store. The \r\nqueryString parameter defines the actual query, and the options parameter should be\r\nan object that provides extra information. The following properties on the options\r\nobject may be included:\r\n\r\n- start - The offset index to start at in the result set\r\n- end - The offset index to end at in the result set\r\n- parameters - An array of values for parameterized queries\r\n\r\nThe function should generally return an array representing the result set of the query \r\n(unless the query creates a single aggregate object or value). Perstore is designed to leverage [http://github.com/kriszyp/rql](resource query language)\r\nfor querying, and included stores use RQL, although stores can utilize alternate query languages. \r\n\r\nadd(object, directives) - Stores a new record. This acts similar to put, but should only be called\r\nwhen the record does not already exist. Stores do not need to implement this \r\nmethod, but may implement for ease of differentiating between creation of new \r\nrecords and updates. This should return the identifier of the newly create record. \r\n\r\nconstruct(object, directives) - This constructs a new persistable object. This does not\r\nactually store the object, but returns an object with a save() method that\r\ncan be called to store the object when it is ready. This method does not apply to stores,\r\nonly models and facets.\r\n\r\nsubscribe(resource, callback) - Subscribes to changes in the given resource or set of \r\nresources. The callback is called whenever data is changed in the monitored resource(s).\r\n\r\ntransaction() - Starts a new transaction for the store. This should return\r\na transaction object with the following functions. Each of these functions are optional\r\nand only called if they exist:\r\n\r\n- commit() - This is called when a transaction is committed.\r\n- requestCommit() - This is called on all the databases/stores prior to committing the\r\ntransaction. If this succeeds (doesn't throw an error), the store should guarantee the\r\nsuccess of a subsequent commit() operation. This provides two phase commit \r\nsemantics. \r\n- abort() - This is called when a transaction is aborted.\r\n- suspend() - This is called when a transaction is suspended. This happens when an \r\nevent is finished, but a promise for the continuance of the action is still in progress. \r\nAfter being suspended, this transaction is no longer the active transaction.\r\n- resume() - This is called when a transaction is resumed. This happens when a promise\r\nresumes the execution of an action.\r\n\r\n(See Transactions section below for more information)\r\n\r\nPerstore is designed to allow easy construction of new data stores. A data store \r\nin Perstore is a JavaScript object with any or all of the functions defined above.\r\n\r\nQuerying\r\n========\r\n\r\nPerstore provides a query parsing and execution through [http://github.com/kriszyp/rql](resource query language) \r\n(RQL). RQL can be thought as basically a set of\r\nnestable named operators which each have a set of arguments. RQL is designed to\r\nhave an extremely simple, but extensible grammar that can be written in a URL friendly query string. A simple RQL\r\nquery with a single operator that indicates a search for any resources with a property of\r\n\"foo\" that has value of 3 could be written:\r\n\r\n    eq(foo,3)\r\n\r\nRQL is a compatible superset of standard HTML form URL encoding. The following query\r\nis identical to the query (it is sugar for the query above):\r\n\r\n    foo=3\r\n\r\nWe can use this query format to query stores and models. For example:\r\n\r\n    MyModel.query(\"foo=3\").forEach(function(object){\r\n       // for each object with a property of foo equal to 3\r\n    });\r\n\r\nWe can also construct queries using chained operator calls in JavaScript. We could\r\nwrite this query:\r\n\r\n    MyModel.query().eq(\"foo\",3).forEach(...);\r\n\r\nThe RQL grammar is based around standard URI delimiters. The standard rules for \r\nencoding strings with URL encoding (%xx) are observed. RQL also supersets FIQL. \r\nTherefore we can write a query that finds resources with a \"price\" property below\r\n10 with a \"lt\" operator using FIQL syntax:\r\n\r\n    price=lt=10\r\n\r\nWhich is identical (and sugar for call operator syntax known as the normalized form):\r\n\r\n    lt(price,10)\r\n\r\nOne can combine conditions with multiple operators with \"&\":\r\n\r\n    foo=3&price=lt=10\r\n\r\nIs the same as:\r\n\r\n    eq(foo,3)&lt(price,10)\r\n\r\nWhich is also the same as:\r\n\r\n    and(eq(foo,3),lt(price,10))\r\n\r\nAnd thus can be used to query a store:\r\n\r\n\tMyModel.query(\"foo=3&price=lt=10\")...\r\n\r\nOr using chained JS calls to perform the same query:\r\n\r\n    MyModel.query().eq(\"foo\",3).lt(\"price\",10)...\r\n\r\nThe | operator can be used to indicate an \"or\" operation. We can also use paranthesis\r\nto group expressions. For example:\r\n\r\n    (foo=3|foo=bar)&price=lt=10\r\n    \r\nWhich is the same as:\r\n\r\n    and(or(eq(foo,3),eq(foo,bar)),lt(price,10))\r\n\r\nAnd to query a model/store:\r\n\r\n    MyModel.query(\"(foo=3|foo=bar)&price=lt=10\")...\r\n    \r\nAnd using chained JS calls: \r\n\r\n\tvar query = MyModel.query();\r\n\tquery.or(query.eq(\"foo\",3),query.eq(\"foo\",\"bar\")).lt(\"price\",10)...\r\n\r\nSometimes it makes sense to use the with statement (despite the fact that some \r\nthink it should never be used). This actually makes the syntax look very similar\r\nto the query string format. For example:\r\n\r\n\twith(MyModel.query()){\r\n\t\tor(eq(\"foo\",3),eq(\"foo\",\"bar\")).lt(\"price\",10)...\r\n\t}\r\n\r\nFor a more a complete reference guide to the RQL and the available query operators,\r\nsee [[http://github.com/kriszyp/rql]]. This also provides information on\r\nthe parsed query data structure which is important if you want to implement your\r\nown custom stores.\r\n\r\nTransactions\r\n==========\r\n\r\nTransactions provide a means for committing multiple changes to a database \r\natomically. The store API includes transaction semantics for communicating transactions\r\nto the underlying databases. Perstore provides transactional management for delegating\r\ntransaction operations to the appropriate stores and databases. To start a transaction,\r\ncall the transaction function on the stores module with a callback that will perform any\r\nof the actions of the transaction:\r\n\r\n    require(\"perstore/transaction\").transaction(function(){\r\n    \tModel.put(...);\r\n    \tModel.delete(...);\r\n    });\r\n \r\nThe callback function may return a promise if the transaction will involve actions that\r\nextend beyond the duration of the function call. When the promise is resolved the \r\ntransaction will be committed (or if the promise errors out, the transaction will be \r\naborted).\r\n\r\nPerstore includes a JSGI middleware component for wrapping requests in transactions.\r\nThis will make the life of the request be one transaction, committed when the response\r\nis ready to send (or aborted for an error).\r\n\r\n    transactionApp = require(\"perstore/jsgi/transactional\").Transactional(nextApp);\r\n\r\nImplementing Transactions\r\n------------------------\r\n\r\nIf you are writing your store that needs to be transaction aware, there are two \r\ndifferent options for implementing transaction handling. The simplest approach is to\r\nimplement the implement the transaction method on your store and then use the\r\nAutoTransaction store wrapper provided by the \"stores\" module:\r\n\r\n    var AutoTransaction = require(\"perstore/transaction\").AutoTransaction;\r\n    myTransactionalStore = AutoTransaction({\r\n        transaction: function(){\r\n            // prepare the transaction\r\n            return {\r\n                commit: function{\r\n                   // commit the transaction\r\n                },\r\n                // implement the rest of the handlers\r\n                abort:...\r\n            }\r\n        }\r\n    });\r\n\r\nThe AutoTransaction wrappers provides two important functions. First, if any of your\r\nstore methods are called outside of a global transaction, a transaction will automatically\r\nbe started before calling the method and committed afterwards. Second, if a global\r\ntransaction is in process, the transaction method will be called on the first access of\r\nthis store and be committed when the global transaction is committed.\r\n\r\nThe other approach to transaction handling is to provide a \"database\" object. This can\r\nbe useful for situations where transaction management needs to exist outside of \r\nindividual stores (and may cross stores). One can implement a \"database\" object that\r\nprovides the transaction method with the same API as the store's transaction method.\r\nThe database object can be registered with:\r\n\r\n    require(\"perstore/transaction\").registerDatabase(transaction: function(){\r\n        // prepare the transaction\r\n        return {...}\r\n    });\r\n    \r\nThis transaction method will be called whenever a global transaction is started.\r\n \r\nLicensing\r\n--------\r\n\r\nPerstore is part of the Persevere project, and therefore is licensed under the\r\nAFL or BSD license. The Persevere project is administered under the Dojo foundation,\r\nand all contributions require a Dojo CLA.\r\n\r\nProject Links\r\n------------\r\n\r\nSee the main Persevere project for more information:\r\n\r\n### Homepage:\r\n\r\n* [http://persvr.org/](http://persvr.org/)\r\n\r\n### Source & Download:\r\n\r\n* [http://github.com/kriszyp/perstore/](http://github.com/kriszyp/perstore)\r\n\r\n### Mailing list:\r\n\r\n* [http://groups.google.com/group/persevere-framework](http://groups.google.com/group/persevere-framework)\r\n\r\n### IRC:\r\n\r\n* [\\#persevere on irc.freenode.net](http://webchat.freenode.net/?channels=persevere)\r\n","description":"Perstore is a cross-platform JavaScript object store interface for mapping persistent \r objects to various different storage mediums using an interface based on\r W3C's [IndexedDB object store API](http://www.w3.org/TR/IndexedDB/#object-store-sync)\r and analogous to the HTTP REST interface. Perstore\r includes JavaScript object-relational mapping for SQL databases, JSON file storage,\r and hopefully support for many other object/document style storage systems that\r provide more direct object storage. Perstore provides model classes that wrap data\r stores, and supports JSON Schema integrity enforcement, link management, and \r prototype construction. Perstore also provides faceted access to models for an\r object-capability based security model.","versions":[{"number":"0.3.0","date":"2011-11-16T17:18:20.548Z"},{"number":"0.3.1","date":"2012-04-19T14:28:55.398Z"},{"number":"0.3.2","date":"2012-09-19T21:49:54.399Z"},{"number":"0.3.3","date":"2013-09-25T20:04:45.257Z"}],"created":"2011-11-16T17:18:19.219Z","modified":"2013-09-25T20:04:45.257Z","lastPublisher":{"name":"dojofoundation","email":"kriszyp@gmail.com"},"owners":[{"name":"dojofoundation","email":"kzyp@dojofoundation.org"}],"other":{"_attachments":{},"_from":".","_id":"perstore","_npmUser":{"name":"dojofoundation","email":"kriszyp@gmail.com"},"_npmVersion":"1.3.11","_rev":"1-d5b3683a1884b0bccdbe64a3ff4d67d6","author":{"name":"Kris Zyp"},"bugs":{"url":"https://github.com/kriszyp/tunguska/issues"},"contributors":[{"name":"Vladimir Dronnikov","email":"dronnikov@gmail.com"}],"directories":{"lib":"."},"dist-tags":{"latest":"0.3.3"},"dist":{"shasum":"bd5b60396225ba866d64e134455206b3ddd341ba","tarball":"http://registry.npmjs.org/perstore/-/perstore-0.3.3.tgz"},"maintainers":[{"name":"dojofoundation","email":"kzyp@dojofoundation.org"}],"readmeFilename":"README.md","time":{"modified":"2013-09-25T20:04:45.257Z","created":"2011-11-16T17:18:19.219Z","0.3.0":"2011-11-16T17:18:20.548Z","0.3.1":"2012-04-19T14:28:55.398Z","0.3.2":"2012-09-19T21:49:54.399Z","0.3.3":"2013-09-25T20:04:45.257Z"}}}