{"name":"qhttp","version":"0.6.0","description":"quicker, simpler http request client","license":"Apache-2.0","repository":"https://github.com/andrasq/node-qhttp","main":"index.js","engines":{"node":">=0.0.0"},"scripts":{"test":"qnit"},"keywords":["Andras","http","http_build_query","http_parse_query","qhttp","parseUrl","restify","request","client"],"dependencies":{},"devDependencies":{"qnit":"0.13"},"gitHead":"bd823e2116497761b1a4d148343e23e18ac49ff5","homepage":"https://github.com/andrasq/node-qhttp#readme","versions":[{"number":"0.0.0","date":"2015-02-19T22:11:37.408Z"},{"number":"0.0.1","date":"2015-02-20T05:08:02.099Z"},{"number":"0.0.2","date":"2015-02-20T05:43:03.918Z"},{"number":"0.0.3","date":"2015-02-20T15:14:12.193Z"},{"number":"0.0.4","date":"2015-02-21T22:21:36.281Z"},{"number":"0.0.5","date":"2015-03-04T17:32:12.606Z"},{"number":"0.0.6","date":"2015-03-28T17:02:10.881Z"},{"number":"0.1.0","date":"2015-05-01T14:27:27.229Z"},{"number":"0.1.1","date":"2015-05-19T16:44:50.665Z"},{"number":"0.1.2","date":"2015-07-07T13:44:31.414Z"},{"number":"0.2.1","date":"2015-10-17T19:00:08.302Z"},{"number":"0.4.0","date":"2015-10-31T22:21:10.738Z"},{"number":"0.5.1","date":"2016-07-16T06:26:39.625Z"},{"number":"0.6.0","date":"2016-10-27T17:22:58.855Z"}],"readme":"qhttp\n=====\n\nSimple, fast, low overhead utility for making http requests.\n\nA convenience wrapper to simplify using `http` but keep the common use cases fast.\nSimilar to `request`, but without the added complexity and 2x faster making\nback-to-back calls.\n\nQHttp auto-detects the request body and encodes it accordingly:  strings as-is as\n`text/plain`, Buffers as-is as `application/octet-stream`, all else encoded with\nJSON.stringify as `application/json`.  The response is not decoded, it is returned\nin a Buffer (or left to the caller; see below).\n\nIncluded\n\n- `HttpClient` - quick little web request caller\n- `parseUrl` - fast http url parser, 18x faster than `url.parse`\n- `http_build_query` - convert parameter hashes to query strings\n- `http_parse_query` - convert query strings to parameter hashes\n\n        npm install qhttp\n        npm test qhttp\n\n\n## Package\n\nThe package exports a pre-constructed qhttp client object with methods get, post,\nput and delete, as well as several helper functions.\n\nExported functions:\n- `call`, `get`, `post`, `put`, `delete`: make web requests using the qhttp singleton, see `HttpClient` below\n- `create`: HttpClient factory for creating new pre-configured HttpClient objects.  Also available as `defaults`.\n- `http_build_query`: construct a query string from parts\n- `http_parse_query`: parse a query string into its parts\n- `parseUrl`: fast url.parse work-alike for http urls\n- `emulateRestifyClient(client)`: decorate client with some `restify` jsonClient methods and semantics\n\n        var qhttp = require('qhttp');\n        qhttp.get(\"http://example.com\", function(err, res, body) {\n            console.log(body);\n        });\n\n## Functions\n\n### http_build_query( objectOrArray, [options] )\n\nformat a query string like PHP's [http_build_query](http://php.net/manual/en/function.http-build-query.php).\nIn particular, it handles nested objects and nested arrays.\n\n        var http_build_query = require('qhttp/http_build_query');\n        var params = {a: 1, b: 2, c: [3, 4, [5, 6]]};\n        var queryString = http_build_query(params, {leave_brackets: true});\n        // => \"a=1&b=2&c[0]=3&c[1]=4&c[2][0]=5&c[2][1]=6\"\n\n        var params = {d: {a: 1, b: 2, c: {a: 1, b: 2}}};\n        var queryString = http_build_query(params, {leave_brackets: true});\n        // => \"d[a]=1&d[b]=2&d[c][a]=1&d[c][b]=2\"\n\n        var params = [1, 2, 3];\n        var queryString = http_build_query(params, {numeric_prefix: 'idx'});\n        // => \"idx0=1&idx1=2&idx2=3\"\n\nOptions:\n\n- `arg_separator`   - default '&'\n- `eq_sign`         - default '='\n- `numeric_prefix`  - string to prepend to numeric keys\n- `encoding`        - 'PHP_QUERY_RFC1738' (default) encodes spaces as '+',\n                    'PHP_QUERY_RFC3986' encodes spaces as '%20'\n- `leave_brackets`  - encode `{a:[3]}` as \"a[0]=3\" and not \"a%5B0%5D=3\"\n\n\n### http_parse_query( string )\n\nparse an http query, the counterpart to http_build_query.  Similar to\nthe php `parse_str()`\n\nbuild up the parameters hash from the PHP-style query string.  Parses\nname-value pairs as expected, `a=1&b=2` is `{a:1, b:2}`.  names value-less\nnames as if set to one, i.e. `a&b` becomes {a:1, b:1}.  Unlike PHP, gathers\nrepeated parameters into arrays (e.g., `a=1&a=2` is `{a: [1, 2]}` and not a=2.\nLike PHP, parses hierarchical values like `a[i][j]=1` into `{a: {i: {j:1}}}`.\n\n        var http_parse_query = require('qhttp/http_parse_query');\n        var params = http_parse_query(\"a=1&b=2&c[0]=3&c[1]=4&c[2][0]=5\");\n        // => {a:1, b:2, c:{'0':3, '1':4, '2':{'0':5}}}\n\nTodo: flat numerical hierarchies should be converted to arrays, not objects..\nCurrently `a[0]=1&a[1]=2` parses a into the object `{'0':1, '1':2}` and not\n`[1, 2]`.  This is not symmetric with http_build_query() behavior.\n\n\n### parseUrl( url )\n\nparse simple URL strings the way `url.parse` does, but 4x faster.\nThe parsed results are returned in a hash (without the url.parse functions),\nand all fields set by url.parse are set to the same values as by url.parse.\nThe urls should be of the form `(protocol) // (auth) (host) (path) (search) (hash)`\nor `(path)(search)(hash)`, eg. `\"http://user:pass@example.com:80/path/name?a=1&b=2#tag1\"`\n- `protocol`: `http:` or `https:` (http:)\n- `auth`: `user@` or `user:password@` (user:pass)\n- `host`: the non-auth string after the `//` and before the first `/` (example.com:80)\n- `path`: the trailing end of the url string, not including the hash (/path/name?a=1&b=2)\n- `search`: the portion of the string from the first '?' to the hash (?a=1&b=2)\n- `hash`: the portion of the string from the first '#' to the end (#tag1)\n\nIn addition to the above fields, url.parse and parseUrl also separate\n- `hostname`: host without the port (example.com)\n- `port`: host port (80)\n- `username`: user part of auth (user) (parseUrl only, not url.parse)\n- `password`: password part of auth (pass) (parseUrl only, not url.parse)\n- `query`: search without the leading '?' (a=1&b=2)\n- `pathname`: path without the search component (/path/name)\n- `href`: the normalized url string, from protocol to hash.  This is often\n  the same as the input url, but can differ if eg no path was specified\n  `\"http://host.com?a=1\"` => `\"http://host.com/?a=1\"`.\n\n        var parseUrl = require('qhttp/parse-url');\n        var url = \"http://usr:pwd@example.com80/path/name?query=yes#tag\";\n        var parts = parseUrl(url);\n        // => { host: 'example.com:80', hostname: 'example.com', port: '80',\n        //      auth: 'usr:pwd', hash: '#tag', query: 'query=yes' }\n\n### create( options )\n\nReturn a newly constructed HttpClient object preconfigured with the given options.\nSee `HttpClient` below.  Also available as `defaults(options)` for `request` compatibility.\n\n### get( url, body, callback(err, res, body) )\n### post( url, body, callback(err, res, body) )\n### put( url, body, callback(err, res, body) )\n### delete( url, body, callback(err, res, body) )\n\nConvenience web request calls using the built-in singleton.\n\n### new HttpClient( options )\n\nweb request runner, built on top of `http.request`\n\nOptions\n\n- `url` - base url to call, eg \"http://host.com\".  A call to a bare path `/rest/path`\n  will be combined with the base url to form \"http://host.com/rest/path\" for the request.\n- `headers` - headers to pass to each request.  Additional headers may be passed at call time\n- `request` - http request function.  Default is `http.request`\n- `srequest` - https request function.  Default is `https.request`\n- `returnBody` - gather up the response body and return it in the callback (default `true`).\n  If set to `false`, the web request callbacks will get just the `res` response object, which\n  can then be gathered or piped by the caller.\n- `auth` - http Basic authorization object containing `username` and `password`\n  or authorization string in the form \"username:password\".  `user` and `pass` are also ok.\n- `parseUrl` - function to use for url string parsing.  Default is `require('qhttp/parse-url')`,\n  which parses only well-formatted urls in the form `http://user:pass@host:80/path?query#tag`\n  but is 4x faster than Url.parse and reduces overall round-trip call latency by 10%.\n\nThe options are passed to `request()`, so in addition to the above HttpClient\noptions, `request` options are also allowed.  Null and undefined values are ignored.\n\nNotable request options:\n\n- `agent` - the http agent to use with `request`.  Default is `http.globalAgent`\n  See also\n  [agentkeepalive](https://www.npmjs.com/package/agentkeepalive) and\n  [qhttp-agent](https://www.npmjs.com/package/qhttp-agent) for faster,\n  more predictable connection agents.\n\n### httpClient.call( method, uri, [body], callback(err, res, body) )\n\nmake a web request\n\n- `method` - the http method to use, eg GET or POST\n- `uri` - the service address to load, either a query string or an `http.request` compatible object\n- `body` (optional) - the message to send in the body of the request\n- `callback` - function that will be called with the `http.IncomingMessage` response\n\nReturns via the callback the http response, with `res.body` set to a Buffer\ncontaining the raw unparsed reply message.\n\nThe `body` may be a string, an object, or a Buffer.  String is sent as\ncontent-type 'text/plain'.  Object is json-encoded and sent as\n'application/json'.  Buffer is sent as binary data as type\n'application/octet-stream'.\n\nThe call always sets `Content-Type` to match the body (unless already set),\nand `Content-Length`.\n\n        HttpClient = require('qhttp/http-client');\n        httpClient = new HttpClient();\n        httpClient.call('GET', \"http://www.google.com\", function(err, res, body) {\n            // res.statusCode is the HTTP response status code\n            // body == res.body is the HTTP response body, in a Buffer\n        });\n\n### httpClient.get\n### httpClient.post\n### httpClient.put\n### httpClient.delete\n\nShortcuts to `httpClient.call('GET', ...)` etc., similar to `request`.\n\n        client = require('qhttp/http-client');\n        client.get(\"http://www.google.com\", function(err, res, body) {\n            console.log(body.toString())\n        })\n\n### HttpClient.emulateRestifyClient( client )\n### client.emulateRestifyClient( )\n\nModify the `client` HttpClient object for improved `restify` compatbility.  New\nmethods are added, error reporting changes, the response message is\ndecoded into an object, and the get/post etc convenience methods callbacks\nare called with different arguments.\n\nThe methods added to httpClient are:\n\n#### httpClient.basicAuth( username, password )\n\nSign requests with an \"Authorization: Basic\" header out of username:password\n\n#### httpClient.get( uri, body, callback(err, req, res, obj) )\n\nmake a GET request\n\n#### httpClient.post( uri, body, callback(err, req, res, obj) )\n\nmake a POST request\n\n#### httpClient.put( uri, body, callback(err, req, res, obj) )\n\nmake a PUT request\n\n#### httpClient.delete( uri, body, callback(err, req, res, obj) )\n\nmake a DELETE request.  For compatbility, can also be called as `del`.\n\n\n## Related Work\n\n- [qhttp/parseUrl](https://www.npmjs.com/package/qhttp) - like url.parse, but 4x faster\n- [querystringparser](https://www.npmjs.com/package/querystringparser) - like qs, but much faster\n- [fast-url-parser](https://www.npmjs.com/package/fast-url-parser) - like url.parse, but 2x faster\n- [cookieparser](https://www.npmjs.com/package/cookieparser)\n- [agentkeepalive](https://www.npmjs.com/package/agentkeepalive) - like httpAgent, but much faster\n- [qhttp-agent](https://www.npmjs.com/package/qhttp-agent) - much faster httpAgent work-alike\n\n\n## ChangeLog\n\n0.6.0\n- encode dates as toISOString\n- encode only array contents, not array properties\n\n0.5.1\n\n- fix parseUrl export\n\n0.5.0\n\n- fix dev dependency name\n- accept the body parameter from the uri object as well\n\n0.4.0\n\n- have the package export a `qhttp` singleton with methods `get`, `post`, etc\n- fix Content-Length for multi-byte utf8 characters\n- fix header handling to not clobber pre-configured headers at call time\n- `create()` factory method (aka `defaults`)\n- expose singleton `call` method\n\n0.3.0\n\n- HttpClient:\n  - returnBody:false option to not wait for response to arrive\n  - auth: options for http basic auth\n  - `defaults()` factory method\n  - get, post, put, delete shortcuts\n  - fix: do not overwrite user-supplied Content-Type\n  - fix: do not call callback twice if req error\n  - make unit tests standalone (do not hit localhost:80)\n  - expose module-level get, post, etc functions eg `require('qhttp/http-client').get(...)`\n- new `qhttp/parse-url` function\n- switch unit tests from nodeunit to qunit\n\n0.2.2\n  - return body as third arg of callback\n\n## Todo\n\n- maybe have httpClient support streaming responses\n- `a[]=1&a[]=2` should be parsed into an array `[1, 2]` like in php\n- configure HttpClient decodeResponse function\n","starsCount":1,"created":"2015-02-19T22:11:37.408Z","modified":"2016-10-27T17:22:58.855Z","lastPublisher":{"name":"andrasq","email":"andras@andrasq.com"},"owners":[{"name":"andrasq","email":"andras@andrasq.com"}],"other":{"_attachments":{},"_from":".","_id":"qhttp","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/qhttp-0.6.0.tgz_1477588976390_0.3297776582185179"},"_npmUser":{"name":"andrasq","email":"andras@andrasq.com"},"_npmVersion":"2.15.0","_rev":"2-c114c26a8c7e768ed8adbc50e0f2eea8","_shasum":"5727936758217b69a31189771e211df4db2dab88","author":{"name":"Andras","url":"http://github.com/andrasq"},"bugs":{"url":"https://github.com/andrasq/node-qhttp/issues"},"directories":{},"dist-tags":{"latest":"0.6.0"},"dist":{"shasum":"5727936758217b69a31189771e211df4db2dab88","tarball":"http://registry.npmjs.org/qhttp/-/qhttp-0.6.0.tgz"},"maintainers":[{"name":"andrasq","email":"andras@andrasq.com"}],"readmeFilename":"Readme.md","time":{"modified":"2016-10-27T17:22:58.855Z","created":"2015-02-19T22:11:37.408Z","0.0.0":"2015-02-19T22:11:37.408Z","0.0.1":"2015-02-20T05:08:02.099Z","0.0.2":"2015-02-20T05:43:03.918Z","0.0.3":"2015-02-20T15:14:12.193Z","0.0.4":"2015-02-21T22:21:36.281Z","0.0.5":"2015-03-04T17:32:12.606Z","0.0.6":"2015-03-28T17:02:10.881Z","0.1.0":"2015-05-01T14:27:27.229Z","0.1.1":"2015-05-19T16:44:50.665Z","0.1.2":"2015-07-07T13:44:31.414Z","0.2.1":"2015-10-17T19:00:08.302Z","0.4.0":"2015-10-31T22:21:10.738Z","0.5.1":"2016-07-16T06:26:39.625Z","0.6.0":"2016-10-27T17:22:58.855Z"},"users":{"nelix":true}}}