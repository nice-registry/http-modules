{"name":"express-preconditions","description":"Middleware for HTTP Conditional Requests (RFC 7232)","license":"MIT","version":"1.0.4","keywords":["express","condition","conditional","If-Match","If-None-Match","If-Modified-Since","If-Unmodified-Since","If-Range","request","7232","rfc7232","precondition"],"homepage":"https://richardschneider.github/express-conditional-request","repository":"https://github.com/richardschneider/express-conditional-request","main":"./lib/index.js","scripts":{"init":"validate-commit-msg","test":"mocha","ci":"gulp release","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"dependencies":{},"devDependencies":{"express":"^4.14.0","gulp":"^3.9.1","gulp-coveralls":"^0.1.4","gulp-jshint":"^2.0.1","gulp-spawn-mocha":"^2.2.2","jshint":"^2.9.2","jshint-stylish":"^2.2.0","mocha":"*","semantic-release":"^4.3.5","should":"^4.0.4","supertest":"^2.0.0","validate-commit-msg":"^2.6.1"},"config":{"ghooks":{"commit-msg":"validate-commit-msg"}},"gitHead":"638630f2e91105fd1ab8252db5dad818e5da00a2","versions":[{"number":"1.0.0","date":"2016-08-03T09:14:58.914Z"},{"number":"1.0.1","date":"2016-08-04T00:46:08.860Z"},{"number":"1.0.2","date":"2016-08-04T02:31:29.373Z"},{"number":"1.0.3","date":"2016-08-04T04:02:14.981Z"},{"number":"1.0.4","date":"2016-08-04T04:30:24.711Z"}],"readme":"# Conditional Requests\n\n[![Travis build status](https://travis-ci.org/richardschneider/express-conditional-request.svg)](https://travis-ci.org/richardschneider/express-conditional-request)\n[![Coverage Status](https://coveralls.io/repos/github/richardschneider/express-conditional-request/badge.svg?branch=master)](https://coveralls.io/github/richardschneider/express-conditional-request?branch=master) \n[![npm version](https://badge.fury.io/js/express-preconditions.svg)](https://badge.fury.io/js/express-preconditions) \n \nMiddleware for HTTP Conditional Requests ([RFC 7232](https://tools.ietf.org/html/rfc7232)).\nIt conditionally processes a HTTP request based on a precondition (such as an etag or modification date). \nA precondition is specified using the `If-Match`, `If-None-Match`, `If-Modified-Since` or `If-Unmodified-Since` HTTP header. \n\nThe [change log](https://github.com/richardschneider/express-conditional-request/releases) is automatically produced with\nthe help of [semantic-release](https://github.com/semantic-release/semantic-release).\n\n## Getting started\n\nInstall with [npm](http://blog.npmjs.org/post/85484771375/how-to-install-npm)\n\n    > npm install express-preconditions --save\n\n## Usage\n\nInclude the following in your server startup\n\n````javascript\n    const preconditions = require('express-preconditions')\n    app.use(preconditions())\n````\nor\n````javascript\n    const preconditions = require('express-preconditions')\n    const options = { ... }\n    app.use(preconditions(options))\n````\n\nSee our [test server](https://github.com/richardschneider/express-conditional-request/blob/master/test/server.js) for more details.\n## Options\n\nName | Description\n:---- | :-----------\nerror | A function that takes (`status code, message, req, res`) and sends an error response.\nrequiredWith | An array of HTTP methods that must include one of the precondition headers.  This prevents the [lost update issue](https://en.wikipedia.org/wiki/Concurrency_control).  Defaults to `['PUT', 'PATCH', 'DELETE']`.\nstateAsync | A function that takes `(req)` and returns a `Promise` to the get the assoiciated resource state.\n\n### Resource state\n\nThe resource state contains the `etag` and `lastModified` properties, which conform to the respective HTTP headers\nand can be `undefined`.\n\nThe default `stateAsync()` obtains the resource state by sending a `HEAD` request to the server.\n\n## Status codes\n\nThe following HTTP status codes can be returned by the middleware\n\nCode | Reason\n:---- | :------\n[304 (Not Modified)](https://tools.ietf.org/html/rfc7232#section-4.1) | The resource has not been modified since the version specified by the precondition(s).\n[412 (Precondition Failed)](https://tools.ietf.org/html/rfc7232#section-4.2) | A precondition failed.\n[428 (Precondition Required)](https://tools.ietf.org/html/rfc6585#section-3) | A precondition header is required to avoid the [lost update issue](https://en.wikipedia.org/wiki/Concurrency_control).\n[501 (Not implemented)](https://tools.ietf.org/html/rfc7231#section-6.6.2s) | A precondition is not yet implemented.\n\n# TODO\n\n* The `If-Range` header is not currently supported.\n\n\n# License\nThe [MIT license](LICENSE).\n\nCopyright Â© 2016 Richard Schneider [(makaretu@gmail.com)](mailto:makaretu@gmail.com?subject=express-conditional-request)\n","created":"2016-08-03T09:14:58.914Z","modified":"2016-08-04T04:30:24.711Z","lastPublisher":{"name":"makaretu","email":"makaretu@gmail.com"},"owners":[{"name":"makaretu","email":"makaretu@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"express-preconditions","_nodeVersion":"6.3.1","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/express-preconditions-1.0.4.tgz_1470285023256_0.8094074015971273"},"_npmUser":{"name":"makaretu","email":"makaretu@gmail.com"},"_npmVersion":"2.15.9","_rev":"1-80f4e6fb2b9cd5763672050782b3850e","_shasum":"7589b9d9728d0c974174e8e8f17a5438b81cd3c5","author":{"name":"Richard Schneider","email":"makaretu@gmail.com"},"bugs":{"url":"https://github.com/richardschneider/express-conditional-request/issues"},"directories":{},"dist-tags":{"latest":"1.0.4"},"dist":{"shasum":"7589b9d9728d0c974174e8e8f17a5438b81cd3c5","tarball":"http://registry.npmjs.org/express-preconditions/-/express-preconditions-1.0.4.tgz"},"maintainers":[{"name":"makaretu","email":"makaretu@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-08-04T04:30:24.711Z","created":"2016-08-03T09:14:58.914Z","1.0.0":"2016-08-03T09:14:58.914Z","1.0.1":"2016-08-04T00:46:08.860Z","1.0.2":"2016-08-04T02:31:29.373Z","1.0.3":"2016-08-04T04:02:14.981Z","1.0.4":"2016-08-04T04:30:24.711Z"}}}