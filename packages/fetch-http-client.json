{"name":"fetch-http-client","version":"1.0.1","description":"A http client wrapper for fetch api with middleware support.","main":"lib","files":["lib","umd"],"scripts":{"lint":"eslint modules test","test":"mocha --compilers js:babel-core/register --reporter spec --bail test/","test-cov":"babel-node ./node_modules/.bin/babel-istanbul cover _mocha -- --reporter dot test/","test-travis":"babel-node ./node_modules/.bin/babel-istanbul cover _mocha --report lcovonly -- --reporter dot test/","build":"babel ./modules -d lib && webpack modules/index.js umd/fetch-http-client.js && webpack -p modules/index.js umd/fetch-http-client.min.js","clean":"rm -rf lib umd"},"pre-commit":["lint"],"repository":"https://github.com/starlight36/fetch-http-client","keywords":["fetch","http","request"],"homepage":"https://github.com/starlight36/fetch-http-client#readme","license":"MIT","dependencies":{"query-string":"^4.1.0"},"devDependencies":{"babel-cli":"~6.8.0","babel-core":"^6.8.0","babel-eslint":"~6.0.4","babel-istanbul":"^0.11.0","babel-loader":"^6.2.4","babel-preset-es2015":"~6.6.0","babel-preset-stage-0":"^6.5.0","eslint":"~2.9.0","eslint-config-airbnb":"~8.0.0","eslint-plugin-import":"~1.7.0","eslint-plugin-jsx-a11y":"~1.0.4","eslint-plugin-react":"~5.0.1","flow-bin":"^0.24.2","istanbul":"^0.4.4","mocha":"^3.0.2","pre-commit":"1.x","webpack":"~1.13.0"},"gitHead":"d22807d0fc675e147b70bb3b6a0a3fb777313061","versions":[{"number":"0.0.1","date":"2016-05-07T05:28:25.540Z"},{"number":"0.0.2","date":"2016-05-08T03:32:36.959Z"},{"number":"0.0.3","date":"2016-05-09T04:51:56.815Z"},{"number":"0.0.4","date":"2016-08-20T10:38:48.975Z"},{"number":"0.0.5","date":"2016-08-21T04:48:08.941Z"},{"number":"0.0.6","date":"2016-08-23T00:52:20.077Z"},{"number":"0.0.7","date":"2016-08-23T03:28:07.997Z"},{"number":"1.0.0","date":"2016-09-11T14:37:57.743Z"},{"number":"1.0.1","date":"2016-09-19T15:08:41.873Z"}],"readme":"# Fetch Http Client\n\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/starlight36/fetch-http-client/master/LICENSE) [![npm version](https://badge.fury.io/js/fetch-http-client.svg)](https://badge.fury.io/js/fetch-http-client) [![Build Status](https://travis-ci.org/starlight36/fetch-http-client.svg?branch=master)](https://travis-ci.org/starlight36/fetch-http-client) [![Coverage Status](https://coveralls.io/repos/github/starlight36/fetch-http-client/badge.svg)](https://coveralls.io/github/starlight36/fetch-http-client)\n\nA http client wrapper for [Fetch API](https://github.com/whatwg/fetch) with middleware support.\n\n# Introduction\n\nFetch API is a elegant way to access HTTP resources. I used it in my React/ReactNative project as the default network layer. But it still has some inconvenience to use. For example, every request should carry the access token in HTTP request headers, ervery request error should be logged to console etc. \n\nIf Fetch API support middleware, everything can be elegantly fixed. Both [fetch-plus](https://github.com/RickWong/fetch-plus) and [http-client](https://github.com/mjackson/http-client) provided the middleware support, but if you need some asynchronous pre-request opreation, they could not suppport elegantly.\n\nSo this project is another choice to use Fetch API with middleware support, it's quite simple and powerful.\n\n# Installation\n\n```shell\nnpm install fetch-http-client --save\n```\n\n# Usage\n\n## Import\n\n```js\nimport FetchHttpClient, { json } from 'fetch-http-client';\n```\n\n## Quick start\n\n```js\n// Create a new client object.\nconst client = new FetchHttpClient('http://api.example.com/endpoint');\n\n// Add access token\nclient.addMiddleware(request => {\n  request.options.headers['X-Access-Token'] = 'secret';\n});\n\n// Add json support\nclient.addMiddleware(json());\n\n// Add Logging\nclient.addMiddleware(request => response => {\n  console.log(request, response);\n});\n\n// Fire request.\nclient.get('test').then(response => console.log(response.jsonData));\n\n// Path variables support.\nclient.get('users/{id}', { uriParams: { id: 1 } }).then(response => console.log(response.jsonData));\n```\n\n## Asynchronous pre-request middleware\n\nif your access token is stored in a asynchronous storage, it should be fetch before every request, you can use such kind of middleware:\n\n```js\n// Add access token asynchronously\nclient.addMiddleware(request => {\n  return AsynchronousStorage.fetch('accessToken').then(token => {\n    request.options.headers['X-Access-Token'] = token;\n    return request;\n  });\n});\n```\n\nThat means your middleware could return a `Promise` object and the real request opreate will be issued after the asynchronous method finished.\n\n**NEVER forget returning the request object after you handled the result!**\n\n# API\n\n## FetchHttpClient\n\n```js\nnew FetchHttpClient(baseUrl:string);\n```\n\n### fetch\n\n`fetch` method can been used the same as Fetch API.\n\n```\ninstance.fetch(uri:string[, options: object])\n```\n\n### request\n\nConvenience way to issue a request with specific verb.\n\n```\ninstance.request(uri:string, method:string[, options: object])\n```\n\n### get\n\nConvenience way to issue a GET request.\n\n```\ninstance.get(uri:string[, options: object])\n```\n\n### post\n\nConvenience way to issue a POST request.\n\n```\ninstance.post(uri:string[, options: object])\n```\n\n### put\n\nConvenience way to issue a PUT request.\n\n```\ninstance.put(uri:string[, options: object])\n```\n\n### delete\n\nConvenience way to issue a DELETE request.\n\n```\ninstance.delete(uri:string[, options: object])\n```\n\n### patch\n\nConvenience way to issue a PATCH request.\n\n```\ninstance.patch(uri:string[, options: object])\n```\n\n## Build-in middlewares\n\n### query\n\nThis middleware could add the ability to append object value to query string:\n\n```js\n// Add query middleware\nclient.addMiddleware(query());\n\n// Request\nclient.get('test', {\n  query: {\n    foo: 'FOO',\n    bar: 'BAR',\n  },\n});\n```\n\nIt will request to `http://api.example.com/endpoint/test?foo=FOO&bar=BAR`.\n\n### form\n\nLike `query`, this could be used to handle post form values.\n\n```js\n// Add form middleware\nclient.addMiddleware(form());\n\n// Request\nclient.post('test', {\n  form: {\n    foo: 'FOO',\n    bar: 'BAR',\n  },\n});\n```\n\n### header\n\nA convenience middleware to add headers to request.\n\n```js\n// Add header middleware\nclient.addMiddleware(header({\n  'X-Request-By': 'FetchHttpClient',\n}));\n\n```\n\n### userAgent\n\nA convenience middleware to set User-Agent to headers.\n\n```js\n// Add header middleware\nclient.addMiddleware(userAgent({\n  'Client': '1.1',\n}));\n\n```\n\n### json\n\nConvert object to request and parse from response.\n\n```js\n// Add json middleware\nclient.addMiddleware(json());\n\n// Request\nclient.post('add', {\n  json: {\n    foo: 'FOO',\n  },\n}).then(response => {\n  console.log(response.jsonData);\n});\n```\n\n### credentials\n\nSet credentials options to fetch. If you want to automatically send cookies for the current domain, use this middleware and config it as `same-origin`.\n\n```js\n// Add credentials middleware\nclient.addMiddleware(credentials('same-origin'));\n```\n\n# Feedback\n\nIf you have any questions, use [Issues](https://github.com/starlight36/fetch-http-client/issues).\n\nSina Weibo: [@starlight36](http://weibo.com/starlight36)\n\n# License\n\nMIT Licence.\n\n\n\n\n","starsCount":0,"created":"2016-05-07T05:28:25.540Z","modified":"2016-10-27T01:13:24.119Z","lastPublisher":{"name":"starlight36","email":"starlight36@163.com"},"owners":[{"name":"starlight36","email":"starlight36@163.com"},{"name":"yedaodao","email":"404069912@qq.com"}],"other":{"_attachments":{},"_from":".","_id":"fetch-http-client","_nodeVersion":"6.5.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/fetch-http-client-1.0.1.tgz_1474297719852_0.07221358921378851"},"_npmUser":{"name":"starlight36","email":"starlight36@163.com"},"_npmVersion":"3.10.3","_rev":"2-2f28b8bd72f3a82c38e28a5a577a1601","_shasum":"8cacadde489569b510ad5d4129e8fe8bf86f96d6","bugs":{"url":"https://github.com/starlight36/fetch-http-client/issues"},"directories":{},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"8cacadde489569b510ad5d4129e8fe8bf86f96d6","tarball":"http://registry.npmjs.org/fetch-http-client/-/fetch-http-client-1.0.1.tgz"},"maintainers":[{"name":"starlight36","email":"starlight36@163.com"},{"name":"yedaodao","email":"404069912@qq.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-27T01:13:24.119Z","created":"2016-05-07T05:28:25.540Z","0.0.1":"2016-05-07T05:28:25.540Z","0.0.2":"2016-05-08T03:32:36.959Z","0.0.3":"2016-05-09T04:51:56.815Z","0.0.4":"2016-08-20T10:38:48.975Z","0.0.5":"2016-08-21T04:48:08.941Z","0.0.6":"2016-08-23T00:52:20.077Z","0.0.7":"2016-08-23T03:28:07.997Z","1.0.0":"2016-09-11T14:37:57.743Z","1.0.1":"2016-09-19T15:08:41.873Z"},"users":{}}}