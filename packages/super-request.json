{"name":"super-request","version":"1.2.0","description":"Wrapper on top of request for testing HTTP servers","main":"index.js","scripts":{"test":"./node_modules/it/bin/it -r dotmatrix"},"repository":"https://github.com/doug-martin/super-request","keywords":["request","rest","test","testing","http","tdd","bdd"],"license":"MIT","dependencies":{"comb":"~1.0.0","request":"~2.34.0","methods":"0.1.0"},"devDependencies":{"it":"^1.0.1","express":"~3.0.5"},"engines":{"node":">=4.0.0"},"gitHead":"ea5c0f026cb74c673db6794fcc0a80ab24702da7","homepage":"https://github.com/doug-martin/super-request#readme","versions":[{"number":"0.0.1","date":"2013-01-02T06:34:02.154Z"},{"number":"0.0.2","date":"2013-03-14T15:33:09.389Z"},{"number":"0.0.3","date":"2013-03-14T15:40:13.676Z"},{"number":"0.0.4","date":"2013-03-15T17:09:00.040Z"},{"number":"0.0.5","date":"2014-04-04T00:46:23.402Z"},{"number":"0.0.6","date":"2014-04-07T14:10:51.353Z"},{"number":"0.0.7","date":"2014-04-25T17:26:54.181Z"},{"number":"0.0.8","date":"2014-05-19T02:11:24.434Z"},{"number":"0.1.0","date":"2015-07-02T18:17:22.778Z"},{"number":"1.0.0","date":"2016-01-05T23:15:30.235Z"},{"number":"1.1.0","date":"2016-02-19T15:58:15.950Z"},{"number":"1.2.0","date":"2017-04-17T19:18:04.107Z"}],"readme":"[![build status](https://secure.travis-ci.org/doug-martin/super-request.png)](http://travis-ci.org/doug-martin/super-request)\n\n# Super Request\n\n`super-request` is a [`supertest`](https://github.com/visionmedia/supertest) inspired HTTP assertion tester.\n\n## About\n\n`super-request` is very similar to `supertest` except that it leverages the [`request`](https://github.com/mikeal/request) module and supports sessions and chaining of HTTP requests.\n\n## Installation\n\n`npm install super-request`\n\n## Example\n\n```javascript\n\nvar request = require('super-request'),\n\texpress = require('express');\n\nvar app = express();\n\napp.use(express.cookieParser());\napp.use(express.cookieSession({secret: \"super-request123\"}));\n\napp.get('/login', function (req, res) {\n\treq.session.loggedIn = true;\n\tres.send(\"logged in\");\n});\n\napp.get('/', function (req, res) {\n\tif (req.session.loggedIn) {\n\t\treq.session.loggedIn = true;\n\t\tres.send(\"loggedIn\");\n\t} else {\n\t\tres.send(\"notLoggedIn\");\n\t}\n});\n\nrequest(app)\n\t.get('/login')\n\t.expect(200, \"logged in\")\n\t.end()\n\t//after we logged in perform this request in the same session!\n\t.get(\"/\")\n\t.expect(200, \"loggedIn\")\n\t.end(function(err){\n\t\tif(err){\n\t\t\tthrow err;\n\t\t}\n\t});\n```\n\n## Using with testing frameworks\n\n### Mocha\n\nHere is an example using with `mocha`.\n\n```javascript\ndescribe('GET /users', function(){\n  it('respond with json', function(done){\n    request(app)\n      .get('/user')\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200, done);\n  })\n})\n```\n\n`super-request` also returns a promise so you can use it with promise based test frameworks here is an an example using `it` and returning a promise.\n\n```javascript\n\nit.describe('GET /users', function(it){\n  it.should('respond with json', function(){\n    return request(app)\n      \t.get('/user')\n      \t.set('Accept', 'application/json')\n      \t.expect('Content-Type', /json/)\n      \t.expect(200)\n      \t.end();\n  });\n});\n\n```\n\n\n## API\n\n**`.expect(status[, fn])`**\n\nAssert response status code.\n\n**`.expect(status, body[, fn])`**\n\nAssert response status code and body.\n\n**`.expect(body[, fn])`**\n\nAssert response body text with a string, regular expression, or parsed body object.\n\n**`.expect(field, value[, fn])`**\n\nAssert header field value with a string or regular expression.\n\n**`.end(fn)`**\n\nPerform the request and invoke fn(err, res).\n\n`super-request` is a wrapper on top of `request` so any options you can specify with request you can also set using the chainable api, by invoking a function with the same name as the option you wish to set.\n\n**Methods** (see [`request`](https://github.com/mikeal/request))\n\nAll option methods listed below allow functions to be passed as the argument in place of the default value.  The function must return a valid object, int, string etc. that the option would normally accept.  See the \"[Simple token-auth example](#simple-token-auth-example)\" below.\n\n* `uri` || `url` - fully qualified uri or a parsed url object from url.parse()\n* `qs` - object containing querystring values to be appended to the uri\n* `method` - http method, defaults to GET\n* `headers` - http headers, defaults to {}\n* `body` - entity body for POST and PUT requests. Must be buffer or string.\n* `form` - when passed an object this will set `body` but to a querystring representation of value and adds `Content-type: application/x-www-form-urlencoded; charset=utf-8` header. When passed no option a FormData instance is returned that will be piped to request.\n* `json` - sets `body` but to JSON representation of value and adds `Content-type: application/json` header.  Additionally, parses the response body as json.\n* `multipart` - (experimental) array of objects which contains their own headers and `body` attribute. Sends `multipart/related` request. See example below.\n* `followRedirect` - follow HTTP 3xx responses as redirects. defaults to true.\n* `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects. defaults to false.\n* `maxRedirects` - the maximum number of redirects to follow, defaults to 10.\n* `encoding` - Encoding to be used on `setEncoding` of response data. If set to `null`, the body is returned as a Buffer.\n* `pool` - A hash object containing the agents for these requests. If omitted this request will use the global pool which is set to node's default maxSockets.\n* `pool.maxSockets` - Integer containing the maximum amount of sockets in the pool.\n* `timeout` - Integer containing the number of milliseconds to wait for a request to respond before aborting the request\n* `proxy` - An HTTP proxy to be used. Support proxy Auth with Basic Auth the same way it's supported with the `url` parameter by embedding the auth info in the uri.\n* `oauth` - Options for OAuth HMAC-SHA1 signing, see documentation above.\n* `strictSSL` - Set to `true` to require that SSL certificates be valid. Note: to use your own certificate authority, you need to specify an agent that was created with that ca as an option.\n* `jar` - Set to `false` if you don't want cookies to be remembered for future use or define your custom cookie jar (see examples section)\n* `aws` - object containing aws signing information, should have the properties `key` and `secret` as well as `bucket` unless you're specifying your bucket as part of the path, or you are making a request that doesn't use a bucket (i.e. GET Services)\n* `httpSignature` - Options for the HTTP Signature Scheme using Joyent's library. The keyId and key properties must be specified. See the docs for other options.\n\n```javascript\nrequest(app)\n\t.post(\"/login\")\n\t.form({username : \"username\", password : \"password\"})\n\t.expect(200)\n\t.expect({loggedIn : true})\n\t.end(function(err){\n\t\tif(err){\n\t\t\tthrow err;\n\t\t}\n\t});\n\n```\n\nTo upload data to a server\n\n```javascript\nrequest(app)\n\t.post(\"/upload/csv\")\n\t.headers({'content-type': 'multipart/form-data'})\n\t.multipart([\n\t\t{\n\t\t\t'Content-Disposition': 'form-data; name=\"file\"; filename=\"my.csv\"',\n\t\t\t'Content-Type': 'text/csv',\n\t\t\tbody: fs.readFileSync(path.resolve(__dirname, \"./assets/my.csv\"))\n\t\t}\n\t])\n\t.expect(200)\n\t.expect(\"content-type\", \"text/plain\")\n\t.end(function(err){\n\t\tif(err){\n\t\t\tthrow err;\n\t\t}\n\t});\n\n```\n\n### Chaining requests\n\n`super-request` supports chaining of requests, this is particularly useful if you need to login to your server and then perform a request.\n\n```javascript\nrequest(app)\n\t.post(\"/login\")\n\t.form({username : \"username\", password : \"password\"})\n\t.expect(200)\n\t.expect({loggedIn : true})\n\t.end() //this request is done\n\t//now start a new one in the same session\n\t.get(\"/some/protected/route\")\n\t.expect(200, {hello : \"world\"})\n\t.end(function(err){\n\t\tif(err){\n\t\t\tthrow err;\n\t\t}\n\t});\n\n```\n\n**Note** You must call end on the current request before you can start a new one.\n\n### Simple token-auth example\n\nUsing everything learned above, let's try a more complex example.  This example illustrates using functions as the argument for your options.  This is useful for request chains that need to lazily evaluate a value returned from your http api.  Consider the extremely simplified example of a token authentication flow:\n\n```javascript\n/**\n *  Webserver setup\n**/\nvar request = require('super-request'),\n\texpress = require('express'),\n\tapp = express();\n\napp.use(express.bodyParser());\napp.use(express.cookieParser());\napp.use(express.cookieSession({secret: 'super-request123'}));\n\n// a public available route, must post email/password to the body\napp.post('/login', function (req, res) {\n    var body = req.body;\n    if (!!body.email && !!body.password) {\n        req.session.token = Math.random();\n        res.send(''+req.session.token);\n    } else {\n        res.send(400)\n    }\n});\n\n// a \"private\" route that requires a valid token in the query string.\napp.get('/', function (req, res) {\n    var query = req.query || {};\n    if (query.token && parseFloat(query.token) === req.session.token) {\n        res.send('tokenValid');\n    } else {\n        res.send(401);\n    }\n});\n\n// create a request super-request\nvar token;\nrequest(app)\n    .post('/login')\n    .form({\n        email: 'john@isp.com',\n        password: 'pass1234'\n    })\n    .expect(200)\n    .end(function (err, res, body) {\n\t\t// store the token, we will use it later in the request chain.\n        token = body;\n    })\n    // after we have our token, adding the token to the query string gives access to protected routes\n    // note: querystrings are an unsafe option for token auth in production, but works for a simple example.\n    .get('/')\n    .qs(function () {\n        return {token: token};\n    })\n    .expect(200, 'tokenValid')\n    .end()\n    // a request without a token or a bogus token protected routes cannot be reached.\n    .get('/')\n    .expect(401)\n    .end(function(err){\n\t\tif(err){\n\t\t\tthrow err;\n\t\t}\n\t});\n```\n","starsCount":1,"created":"2013-01-02T06:34:00.900Z","modified":"2017-04-17T19:18:04.107Z","lastPublisher":{"name":"damartin","email":"doug@dougamartin.com"},"owners":[{"name":"damartin","email":"doug@dougamartin.com"},{"name":"dustinsmith1024","email":"dds1024@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"super-request","_nodeVersion":"5.12.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/super-request-1.2.0.tgz_1492456682138_0.4617471245583147"},"_npmUser":{"name":"damartin","email":"doug@dougamartin.com"},"_npmVersion":"4.0.5","_rev":"3-18e40e7b6a0befeca12282a800aca17c","_shasum":"e966a259fdcfd944fad6ad3b3817cd08ef77aa88","author":{"name":"Doug Martin"},"bugs":{"url":"https://github.com/doug-martin/super-request/issues"},"directories":{},"dist-tags":{"latest":"1.2.0"},"dist":{"shasum":"e966a259fdcfd944fad6ad3b3817cd08ef77aa88","tarball":"https://registry.npmjs.org/super-request/-/super-request-1.2.0.tgz"},"maintainers":[{"name":"damartin","email":"doug@dougamartin.com"},{"name":"dustinsmith1024","email":"dds1024@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-17T19:18:04.107Z","created":"2013-01-02T06:34:00.900Z","0.0.1":"2013-01-02T06:34:02.154Z","0.0.2":"2013-03-14T15:33:09.389Z","0.0.3":"2013-03-14T15:40:13.676Z","0.0.4":"2013-03-15T17:09:00.040Z","0.0.5":"2014-04-04T00:46:23.402Z","0.0.6":"2014-04-07T14:10:51.353Z","0.0.7":"2014-04-25T17:26:54.181Z","0.0.8":"2014-05-19T02:11:24.434Z","0.1.0":"2015-07-02T18:17:22.778Z","1.0.0":"2016-01-05T23:15:30.235Z","1.1.0":"2016-02-19T15:58:15.950Z","1.2.0":"2017-04-17T19:18:04.107Z"},"users":{"largepuma":true}}}