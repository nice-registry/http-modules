{"name":"moruga","version":"0.1.6","description":"Debugging HTTP proxy","preferGlobal":"true","bin":{"moruga":"./index.js"},"keywords":["debugging","http","proxy"],"repository":"https://github.com/racker/node-moruga","dependencies":{"request":"*","nomnom":"*","connect":"*","use":"*","xregexp":"*"},"main":"index.js","devDependencies":{},"scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"license":"Apache 2.0","readme":"Moruga\n======\n\nMoruga is a spider genus, a district in Trinidad, the hottest pepper in the world, and a transparent HTTP proxy for API unit-testing and debugging.\n\nA few things remain to be done, but Moruga is far enough along to be useful.\n\n<img src=\"http://caribbeancelebs.com/wp-content/uploads/2012/02/Trinidad-Moruga-Scorpion.jpg\" width=\"300px\"/>\n\n### Installation ###\n\nMoruga requires Node.js and NPM. \n\nTo install Moruga as a binary in your PATH, run this in your console:\n\n```bash\nsudo npm install moruga -g\n```\n\nRun moruga without any parameters to view available options.\n\n```bash\nmoruga\n```\n\n### HTTP Example ###\n\n```bash\nmoruga -u http://duckduckgo.com -f filters.example.js -v\n```\n\n* Listen for HTTP requests on all IP addresses, using port 80\n* Import the filters.example.js module and load its *filters* array\n* Proxy requests to http://duckduckgo.com[PATH_AND_QUERY_STRING]\n  * E.g.: http://moruga.example.com/chunky?meat=bacon ---> http://duckduckgo.com/chunky?meat=bacon\n* Print requests/responses to/from the user agent\n\n### HTTPS Example ###\n\n```bash\nmoruga -u http://duckduckgo.com -f filters.example.js --ssl-key=server-key.pem --ssl-cert=server-cert.pem\n```\n\n* Listen for HTTPS requests on all IP addresses, using port 443\n* Use default list of CAs, including well-known ones like Verisign\n* mport the filters.example.js module and load its *filters* array\n* Proxy requests to http://duckduckgo.com[PATH_AND_QUERY_STRING]\n\n### Built-in Filters ###\n\nMoruga comes with two built-in filters. The first is a request/response logger, which is enabled with the -v option on the command line. Currently, the build-in logger only outputs headers, but adding an option to write out message bodies.\n\nThe second built-in filter is a handler for the custom X-Moruga-Control header. Using this header, you can trigger specific actions for each request. This is useful for writing unit tests.\n\nThe built-in X-Moruga-Control handler recognizes the following directives:\n\n```\n/^short-circuit, status=(\\d+)$/\n/^empty-reply, wait-sec=(\\d+)$/\n/^truncate-body, location=(one-off|beginning|middle)$/\n```\n\nFor example, to test response handling in your code for a particular HTTP status code, include this header line in the client's request:\n\n```\nX-Moruga-Control: short-circuit, status=403\n```\n\n### Filter Pipeline ###\n\nMoruga uses the popular [Connect](http://www.senchalabs.org/connect/) library to create a filter pipeline for proxied HTTP requests. Each filter contains a human-readable name, URL path to match on, and an action. A custom actions may terminate the filter pipeline and return its own response, or allow processing to continue down the pipe.\n\nFor example, if I want to short-circuit every request to '/chunky-bacon' in order to express my approval of a certain type of breakfast meat, the following filter will do the trick:\n\n```javascript\n{\n  name: 'Chunky Bacon',\n  path: '/chunky-bacon',\n\n  // Connect-compatible middleware function\n  action: function(req, res, next) {\n    res.writeHead(200, {'X-Short-Circuit': true});\n    res.end('Soooooo chunky.');\n\n    // Uncomment if you want to allow remaining filters\n    // to run, but usually you won't do this after\n    // calling res.end()\n\n    // next();\n  }\n}\n```\n\nThe path may be a string or a RegEx-compatible object. In the latter case, the only requirment is that the object expose a *test* function that returns a truthy value for a successful match.\n\nHere is another filter that matches all URLs except the root path, logs a message, and passes control to the next filter in the pipeline, if any.\n\n```js\n{\n  name: 'Noop',\n  path: /^\\/.+/,\n\n  action: function(req, res, next) {\n    console.log('noop');\n\n    // Pass control to the next filter in the pipeline, if any\n    next();\n  }\n}\n```\n\nAnd, finally, a more complex example showing how you can trigger different behaviors from a unit-test using a custom header:\n\n```js\n{\n  name: 'Handler for X-Moruga-Control',\n  path: /^\\/.*/,\n  action: function(req, res, next) {\n    var control = req.headers['x-moruga-control'];\n\n    if (!control) {\n      next();\n      return;\n    }\n\n    var match = /^short-circuit, status=(\\d+)/.exec(control);\n\n    if (match) {\n      var code = parseInt(match[1]);\n      res.writeHead(code, {'X-Short-Circuit': true});\n      res.end();\n      return;\n    }\n\n    next();\n  }\n}\n```  \n\n### Custom Filters module ###\n\nMoruga can load custom filters from a filter module file. The module simply needs to export an array named *filters*, containing a list of filter objects. \n\n*Note: Filters are installed in the pipeline in the same order as they appear in the array.*\n\nAn example filters module:\n\n```js\n// This is a regular Node module, so you can do anything you like\nvar util = require('util');\n\nexports.filters = [\n  {\n    name: 'Chunky Bacon',\n    path: '/chunky-bacon',\n\n    // Connect middleware\n    action: function(req, res, next) {\n      res.writeHead(200, {'X-Short-Circuit': true});\n      res.end('Soooooo chunky.');\n    }\n  },\n  {\n    name: 'Breakfast',\n    path: new RegExp('/(bacon|eggs|ham|sausage|pancakes|toast|juice|milk|coffee|spam|/)+$', 'i'),\n\n    // Connect middleware\n    action: function(req, res, next) {\n      res.writeHead(200, {'X-Short-Circuit': true});\n      res.end(\"Let's eat!\");\n    }\n  },\n  {\n    name: '503 on initial auth and randomly thereafter',\n    path: /^\\/v\\d+.\\d+\\/agent\\/auth$/i,\n    action: function(req, res, next) {\n      var userAgent = req.headers['user-agent'];\n\n      // Return 503 10% of the time\n      var trigger = Math.random() > 0.90;\n\n      if (trigger || !this._authedByAgent[userAgent]) {\n        this._authedByAgent[userAgent] = true;\n        res.writeHead(503, {'X-Short-Circuit': true});\n        res.end();\n      }\n      else {\n        next();\n      }\n    },\n\n    _authedByAgent: {}\n  }\n]\n```\n\n","versions":[{"number":"0.1.2","date":"2012-08-23T21:27:10.366Z"},{"number":"0.1.3","date":"2012-08-29T20:03:30.484Z"},{"number":"0.1.4","date":"2012-08-29T20:46:57.531Z"},{"number":"0.1.5","date":"2012-08-29T20:50:50.678Z"},{"number":"0.1.6","date":"2012-09-24T19:54:08.801Z"}],"starsCount":1,"created":"2012-08-23T21:27:09.391Z","modified":"2012-09-24T19:54:08.801Z","lastPublisher":{"name":"kgriffs","email":"sffirgk@gmail.com"},"owners":[{"name":"kgriffs","email":"sffirgk@gmail.com"}],"other":{"_attachments":{},"_id":"moruga","_npmUser":{"name":"kgriffs","email":"sffirgk@gmail.com"},"_npmVersion":"1.1.59","_rev":"1-0dcd96ee382ad03d6d52403705113d1b","author":{"name":"Kurt Griffiths","url":"http://about.me/kgriffs"},"bugs":{"url":"https://github.com/racker/node-moruga/issues"},"contributors":[],"directories":{"lib":"./lib"},"dist-tags":{"latest":"0.1.6"},"dist":{"shasum":"2fff3c051997ac890916b7a6549c7f57316d7311","tarball":"http://registry.npmjs.org/moruga/-/moruga-0.1.6.tgz"},"maintainers":[{"name":"kgriffs","email":"sffirgk@gmail.com"}],"time":{"modified":"2012-09-24T19:54:08.801Z","created":"2012-08-23T21:27:09.391Z","0.1.2":"2012-08-23T21:27:10.366Z","0.1.3":"2012-08-29T20:03:30.484Z","0.1.4":"2012-08-29T20:46:57.531Z","0.1.5":"2012-08-29T20:50:50.678Z","0.1.6":"2012-09-24T19:54:08.801Z"},"users":{"pshomov":true}}}