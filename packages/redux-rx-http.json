{"name":"redux-rx-http","version":"0.8.3","description":"Uses react-observable to provide a nice way of talking to an API.","main":"index.js","repository":"https://github.com/radiosilence/react-observable-http","license":"MIT","devDependencies":{"@types/redux":"^3.6.0","body-parser":"^1.17.2","cors":"^2.8.3","express":"^4.15.3","lite-server":"^2.3.0","morgan":"^1.8.2","source-map-loader":"^0.2.1","tslint":"^5.3.2","tslint-config-airbnb":"^5.0.1","tslint-react":"^3.0.0","tsutils":"^2.1.0","typescript":"^2.4","webpack":"^2.6.1"},"dependencies":{"@types/jest":"^19.2.4","@types/node":"^7.0.31","@types/qs":"^6.2.31","qs":"^6.4.0","redux":"^3.6.0","redux-observable":"^0.14.1","rxjs":"^5.4.0"},"scripts":{"start":"npm run tsfmt:replace && npm run dev:build","dev:build":"webpack -w","dev:serve":"lite-server -c server.config.json","tsc:compile":"tsc","tsc:watch":"tsc --watch --pretty","lint":"tslint ./src/**/*.{ts,tsx}","lint:fix":"tslint --fix ./src/**/*.{ts,tsx}"},"gitHead":"05dc6c293f79a970b0ae7d2874acd0138249e08b","homepage":"https://github.com/radiosilence/react-observable-http#readme","versions":[{"number":"0.2.0","date":"2017-06-09T13:37:23.015Z"},{"number":"0.2.1","date":"2017-06-09T14:20:30.065Z"},{"number":"0.3.0","date":"2017-06-12T10:25:33.849Z"},{"number":"0.3.1","date":"2017-06-12T10:28:24.917Z"},{"number":"0.3.2","date":"2017-06-12T10:59:44.451Z"},{"number":"0.4.0","date":"2017-06-12T11:07:05.674Z"},{"number":"0.5.0","date":"2017-06-12T11:24:53.917Z"},{"number":"0.5.1","date":"2017-06-12T11:29:36.176Z"},{"number":"0.5.2","date":"2017-06-12T11:31:25.425Z"},{"number":"0.6.0","date":"2017-06-12T11:48:40.073Z"},{"number":"0.6.1","date":"2017-06-12T12:36:58.918Z"},{"number":"0.6.2","date":"2017-06-13T10:27:23.051Z"},{"number":"0.7.0","date":"2017-06-13T11:33:28.567Z"},{"number":"0.7.1","date":"2017-06-13T11:54:04.054Z"},{"number":"0.7.2","date":"2017-06-13T12:02:27.908Z"},{"number":"0.7.3","date":"2017-06-13T12:15:00.742Z"},{"number":"0.7.5","date":"2017-06-13T12:18:24.052Z"},{"number":"0.7.6","date":"2017-06-13T12:30:22.596Z"},{"number":"0.7.7","date":"2017-06-13T12:41:37.001Z"},{"number":"0.8.0","date":"2017-06-15T10:49:44.548Z"},{"number":"0.8.1","date":"2017-06-15T11:29:07.846Z"},{"number":"0.8.2","date":"2017-06-15T13:32:02.153Z"},{"number":"0.8.3","date":"2017-06-15T13:34:54.815Z"}],"readme":"redux-rx-http\n=============\n\nSo, you like redux, you like RxJS, you're using redux-observable. You want to talk to APIs, and\nconsume the side effects through epics, and you want a nice, simple way to do it. This library\nworks by having a single API action where the side-effect actions (request, success, error, cancel)\nare passed in with the initial action in a clean, consistent way. Oh, and we have type definitions!\n\n**Important note:** As of version 0.7, fetch is used internally. This means you will have to either\nrely on native fetch, or polyfill your own. Also, cancellation won't actually cancel the original\nrequest, it will just terminated the inner stream (so no further actions will be emitted).\n\n\nConfiguration\n-------------\n\nConfiguration allows you to set the base URL and initial headers for all requests.\n\nBecause your base request configuration could be dynamic based on your application state,\nconfig is done as a function, with store.getState() as the primary argument.\n\nFor instance, say your authorisation token was acquired asyncronously and put in your store...\n\n`configure-store.ts`\n```typescript\n// ...imports...\nimport { createRxHttpEpic } from 'redux-rx-http'\n\nconst rxHttpEpic = createRxHttpEpic((state) => ({\n  baseUrl: 'https://my-excellent-api.com/v1.0',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': state.auth.token, // Here we're dynamically configuring the auth token\n  },\n}))\n\nconst epicMiddleware = createEpicMiddleware(combineEpics(\n  rootEpic,\n  rxHttpEpic,\n))\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(\n    epicMiddleware,\n  ),\n)\n```\n\nUsage\n-----\n\nTo make a simple HTTP GET request, and then listen to the results...\n\n`actions.ts`\n```typescript\nimport { rxHttpGet, createRxHttpActionTypes } from 'redux-rx-http'\n\nconst FETCH_POTATO = createRxHttpActionTypes('FETCH_POTATO')\n\n// Action to fetch a potat from our API\nexport const fetchPotato = (id: string): RxHttpRequestAction =>\n  rxHttpGet(`/potato/${id}`)\n```\n\n`epics.ts`\n```typescript\nimport { FETCH_POTATO } from './actions'\n\n// Simply take the request, and map it to some sort of UI action.\nconst showSpinner = (action$: ActionsObservable<any>): Observable<any> =>\n  action$.ofType(FETCH_POTATO.REQUEST)\n    .mapTo({ type: UIActions.SHOW_SPINNER })\n\n// Hide the spinner on done.\nconst showSpinner = (action$: ActionsObservable<any>): Observable<any> =>\n  action$.ofType(FETCH_POTATO.FINALLY, FETCH_POTATO.CANCEL)\n    .mapTo({ type: UIActions.HIDE_SPINNER })\n\n// Consume the results of loading our potato!\nconst setPotato = (action$: ActionsObservable<any>): Observable<any> =>\n  action$.ofType(FETCH_POTATO.SUCCESS)\n    .map(action => ({ type: PotatoActions.SET_POTATO, potato: action.result }))\n\n// Handle erroneous potato fetch\n  action$.ofType(FETCH_POTATO.ERROR)\n    .map(action => ({ type: PotatoActions.POTATO_ERROR, error: action.error }))\n\n```\n\nMore complex usage\n------------------\n\nOf course, simply getting a potato is simple, but each function takes a third argument of a\nrelevant thing:\n\n  * Query params: `rxHttpGet`\n  * Request body: `rxHttpPost`, `rxHttpPut`, `rxHttpPatch`\n  * None: `rxHttpDelete`, `rxHttpHead`\n\nAnd a final argument which is of type `RxHttpRequestConfig`.\n\n```typescript\nexport interface RxHttpRequestConfig {\n  // Represents data about the request to be sent\n  request?: RxHttpRequestBase\n\n  // An arbitrary object that you can pass additional metadata in order to provide context to\n  // whatever epic is consuming the side-effects, e.g. an ID, a parent ID, etc.\n  args?: {}\n\n  // Shortcut to allow easy destructuring API responses that are of the form:\n  // { potato: { ... potato data ...} }\n  key?: string\n}\n```\n\nSo a more complex usage could look something like this:\n\n`actions.ts`\n```typescript\nexport const fetchPotatosForField = (fieldId: string,\n                                     status: Status = 'ALL'): RxHttpRequestAction =>\n  rxHttpGet(`/fields/${fieldId}/potatoes`, FETCH_POTATOES_FOR_FIELD, { status }, {\n    key: 'potatoes',\n    args: { fieldId },\n  })\n\n\nexport const savePotato (potato: Potato): RxHttpRequestAction =>\n  rxHttpPut(`/potato/${potato.id}`, SAVE_POTATO, potato, { args: { id } })\n```\n\n\n`epics.ts`\n```typescript\nconst potatoSavedNotification = (action$: ActionsObservable<any>): Observable<any> =>\n  action$.ofType(SAVE_POTATO.SUCCESS)\n    .map(action => ({\n      type: PotatoActions.NOTIFY,\n      message: `Saved potato ${action.args.id} successfully!`,\n    }))\n```\n\nI would advise against putting callbacks in args, as that entirely misses the point.\n\n\nCancellation\n------------\n\nBecause we're using observables, requests can be cancelled!\n\n`actions.ts`\n```typescript\n// Action to cancel said fetching\nexport const cancelFetchPotato = () => ({ type: FETCH_POTATO.CANCEL })\n```\n","created":"2017-06-09T13:37:23.015Z","modified":"2017-06-15T13:34:54.815Z","lastPublisher":{"name":"ratsupremacy","email":"jc@blit.cc"},"owners":[{"name":"ratsupremacy","email":"jc@blit.cc"}],"other":{"_attachments":{},"_id":"redux-rx-http","_nodeVersion":"8.1.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/redux-rx-http-0.8.3.tgz_1497533693756_0.9713543655816466"},"_npmUser":{"name":"ratsupremacy","email":"jc@blit.cc"},"_npmVersion":"5.0.3","_rev":"23-25af8a3980c49131fdb554a7a8613dff","author":{"name":"James Cleveland"},"bugs":{"url":"https://github.com/radiosilence/react-observable-http/issues"},"directories":{},"dist-tags":{"latest":"0.8.3"},"dist":{"integrity":"sha512-IH56OmKLQo2/joWm6IKOY8Mui1C5L61NGc+wM/jT0zyf7DU+eVWfmkIhBXRFDeEFB8OkgiedRZ7AZEqSjigjDA==","shasum":"a28471db3589d5b90be5aa4f49fd177aa3e9d71c","tarball":"https://registry.npmjs.org/redux-rx-http/-/redux-rx-http-0.8.3.tgz"},"maintainers":[{"name":"ratsupremacy","email":"jc@blit.cc"}],"readmeFilename":"README.md","time":{"modified":"2017-06-15T13:34:54.815Z","created":"2017-06-09T13:37:23.015Z","0.2.0":"2017-06-09T13:37:23.015Z","0.2.1":"2017-06-09T14:20:30.065Z","0.3.0":"2017-06-12T10:25:33.849Z","0.3.1":"2017-06-12T10:28:24.917Z","0.3.2":"2017-06-12T10:59:44.451Z","0.4.0":"2017-06-12T11:07:05.674Z","0.5.0":"2017-06-12T11:24:53.917Z","0.5.1":"2017-06-12T11:29:36.176Z","0.5.2":"2017-06-12T11:31:25.425Z","0.6.0":"2017-06-12T11:48:40.073Z","0.6.1":"2017-06-12T12:36:58.918Z","0.6.2":"2017-06-13T10:27:23.051Z","0.7.0":"2017-06-13T11:33:28.567Z","0.7.1":"2017-06-13T11:54:04.054Z","0.7.2":"2017-06-13T12:02:27.908Z","0.7.3":"2017-06-13T12:15:00.742Z","0.7.5":"2017-06-13T12:18:24.052Z","0.7.6":"2017-06-13T12:30:22.596Z","0.7.7":"2017-06-13T12:41:37.001Z","0.8.0":"2017-06-15T10:49:44.548Z","0.8.1":"2017-06-15T11:29:07.846Z","0.8.2":"2017-06-15T13:32:02.153Z","0.8.3":"2017-06-15T13:34:54.815Z"}}}