{"name":"flashroutingtests","description":"Common tool for run http request to test","version":"0.1.0","main":"./index.js","private":false,"engines":">=0.10","dependencies":{"underscore":"1.5.2","commander":"2.0.0","fs-sync":"0.2.5","mocha":"1.21.3","chai":"1.9.1","superagent":"0.18.0"},"bin":{"frtest":"./bin/frtest.js"},"repository":"https://github.com/pelicanorojo/flashroutingtests","gitHead":"de062a99ff942854e7ad3885f7483309ed3b4413","homepage":"https://github.com/pelicanorojo/flashroutingtests","scripts":{},"versions":[{"number":"0.0.1","date":"2014-12-19T18:11:53.778Z"},{"number":"0.1.0","date":"2015-01-17T17:11:52.224Z"}],"readme":"# NOTE #\r\n\r\nThis is a tool I am developing from a couple of years ago as an independent project for testing a restfull api I was developing.\r\n\r\nWell, I used and extended this tool in a couple of project, and I was so good, I decide to share and continue its develop in public and free way.\r\n\r\nThis is the last state, soon I will change the name and enhance the tool and its api, and add the tool to npm.\r\n\r\n# README #\r\n\r\nflashRoutingTests is a node module loadable via npm, for http routing testing.\r\n\r\n### What is this repository for? ###\r\n\r\n* This repository have the flashRoutingTests's sources, plus a sample of use in the sample subfolder, that you can use for begin your own tests.\r\n\r\n### How do I get set up? ###\r\n\r\n* You can use this module how is shown in the main.js inside the sample folder ( your work folder ).\r\n* In your package json, you can declare the flashRoutingTest dependency as \"flashroutingtests\": \"0.1.0\" \r\n* You must provide a (tests/demoGoogleTests in this sample ) folder inside your work folder, and inside it, a batteries folder for the batteries of http calls configuration, and a config.js as a global configuration, where you specify the http root calls, some optional mocha params, etc. \r\n* the test are triggered with this command line in your workfolder: node main.js -b \"tests/demoGoogleTests\"               ( -b means battery )\r\n\r\nThe engine will load your config file and the batteries configurations inside the batteries folder.\r\n### In the latest version, you may install the module globally ###\r\n\r\nNote: If you have an EACCES during the installation on Linux, try this:\r\nsudo chown -R $USER /usr/local  ( Extracted from : http://stackoverflow.com/questions/15633029/npm-no-longer-working )\r\n\r\n### What can I do in config.js? ###\r\nIn the sample there are all general configs used by the engine.\r\nAs a recommendation, add your custom configs in the custom property.\r\nIn the sample we put a apicall execution times as example.\r\n( See below config.js file example and its description )\r\n\r\n### What can I do in batteries ? ###\r\nThe batteries allow you define apicalls sufixes, documentation properties like name or description,\r\nhooks, like bodyCheck or httpTimesChecks, etc. ( See below battery file example and its description )\r\n\r\n### How to install flashRoutingTests manually ###\r\nIf npm install don't work because yo can't set the git credentials, you can put the flashRoutingTest folder module manually inside the node_modules folder or elsewhere.\r\nAnd in main.js import the module with flashRoutingTests = require( [rootToflashRoutingTestsindex.js] )\r\n\r\nWith the global installer, you may do this:\r\ngo to the folder where you wants the test project\r\ntype: frtest -h  and see the help\r\nIf you haven't got a project, type: frtest install -d myTestProject -m             -d means destination and -m means multi ( try the different alternatives )\r\nThis create a project sample inside myTestProject from which you may start.\r\nThen inside your project you can type: frtest run  or frtest run -b battery1 \r\n\r\n### config.js file example and its description ###\r\n\r\n```\r\n#!javascript\r\n'use strict';\r\nvar\r\n\tskip = 'skip',//value you may use in runTweaks for skip a battery file.\r\n\tonly = 'only',//value you may use in runTweaks for run only a espefied battery file.\r\n\tnone = '',\r\n\tconfigs = {\r\n\t\terrorStackDepth: 2, //gives you control over the errors stack depth. Is optional, and its default is 1.\r\n\t\t//before: function ( done ) {}, hook that is called at the begin, you can trigger a login for example\r\n\t\t//after: function ( done ) {}, hook that is called at the end, you can send the report to a server for example.\r\n\t\tafter: function ( done ) {// A hook that is called after end the tests\r\n\t\t\tconsole.log( 'ApiCallTimes:', JSON.stringify( this.custom.apiCallTimes, null, ' ' ) );\r\n\t\t\tdone();\r\n\t\t},\r\n\t\tmochaConfigs: {// Configs forwarded to mocha.js\r\n\t\t\treporter: 'spec',\r\n\t\t\tslow: 100,\r\n\t\t\ttimeout: 30000\r\n\t\t},\r\n\t\ttestsFolder : __dirname, // An automatic way to say where is this battery\r\n\t\troutesConf: {\r\n\t\t\troot: 'https://translate.google.com' // The engine expect these for make the http request. \r\n\t\t},\r\n\t\tdumpTextTo: dumps,//optional folder where a response dump will be done.\r\n\t\tredirects: 0,// Is set, is used to define how many redirects to do, If you need to analyze 30x status, needs a 0. ( Overrideable in the batteries )\r\n\t\thttpTimeout: 60000, // Is the http response is to slow, this functions as a timeout. ( Overrideable in the batteries )\r\n\t\thttpTimeCheckThresholds: 0.4, // You can use this in httpTimesCheck hook to check response timing\r\n\t\theaders: { //You may put here headers to send in the request ( Overrideable in the batteries )\r\n\t\t\t'Accept': 'text/html',\r\n\t\t\t'Accept-Language': 'en-US,en;q=0.8'\r\n\t\t},\r\n\t\trunTweaks: {// You can define here if you wants to skip some battery or run one as only battery\r\n\t\t\t'home.config.js': none\r\n\t\t},\r\n\t\tcustom: {//This is an example, where we put values in order to log they at the end. Try to put your custom configs inside custom property\r\n\t\t\tapiCallTimes: []\r\n\t\t}\r\n\t}\r\n\r\nconfigs.titlePrefix = configs.routesConf.root + ' routing test: '; //The engine use this for the global name\r\n\r\nmodule.exports = configs; //The engine expect you export the configs\r\n```\r\n\r\n### Battery example file description ###\r\n\r\n```\r\n#!javascript\r\n'use strict';\r\nvar\r\n\t_ = require( 'underscore' ), // you may add libraries like underscore if needed. In this example is installed in the package.json\r\n\texpect = require( 'chai' ).expect,// you may use chai for expects. In this example is installed.....\r\n\tconfigs = global.flashRoutingTests.currentConfigs, //When the engine find your config.js, load it and pass this object to you in global.flashRoutingTests.currentConfigs\r\n\troot = configs.routesConf.root; // The engine use routesConf.root for make the http requests. ( The engine concatenates this with the sufix in the batteries cases )\r\n\r\nvar\r\n\tcases;\r\n\r\ncases = [\r\n\t{\r\n\t\tname: 'Basic body Check.', //the name for this case\r\n\t\tdescription: 'Checks, status code, server http headers, and html title.', //the description for these case\r\n\t\tsufixes: [ '/?sufijo1', { sufix: '/?sufijo2', n: 3 ], //sufixes to try ( are concatenated with routesConf.root,\r\n                // each sufix may be a string, or an object in order to specify repetitions ( n ( its default is 0 ) )\r\n\t\texpects: {//For each sufix, run these expexts\r\n\t\t\tstatusCode: 200, //check the http status if you want\r\n\t\t\theaders: { 'server': 'HTTP server (unknown)' }, //check headers if you want\r\n\t\t\thttpTimesCheck: {// Hook for http request timing\r\n\t\t\t\trun: function ( url, time, caseConf ) {// The engine expect the run function and pass to you the url, the time,\r\n                                        //and a caseConf Copy. You may use the automatic requestId in order to identify each requestID and cross data.\r\n\t\t\t\t\t//console.log( '\\nDEBUG TIMECHECK: ', configs.httpTimeCheckThresholds, time, url );\r\n\t\t\t\t\tconfigs.custom.apiCallTimes.push( { requestId: caseConf.requestId, url: url, time: time } );//In this example we save this data in config.custom.apiCallTimes\r\n\t\t\t\t\texpect( time ).to.be.below( configs.httpTimeCheckThresholds );//Also we check the timing is ok\r\n\t\t\t\t},\r\n\t\t\t\tdescription: 'Check the body is de translate.google.com one.'//Description for this timing check.\r\n\t\t\t},\r\n\t\t\tbodyChecks: {// Hook for check the response body\r\n\t\t\t\trun: function ( body, caseConf ) { // The engine expect the run function and pass to you the raw body, and a caseConf Copy\r\n                                        //you may use the automatic requestId in order to identify each requestID and cross data.\r\n                                        //In the current case, I know that the correct response must contain a html fragment title\r\n\t\t\t\t\texpect( body.indexOf( '<title>Google Translate</title>' ) ).to.not.equal( -1 );\r\n                                        // If you expect a json you can declare: var obj = JSON.parse( body ) .\r\n\t\t\t\t},\r\n\t\t\t\tdescription: 'Check the body is de translate.google.com one.' //\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n];\r\n\r\nexports.cases = cases; // The engine expect you export an array cases\r\n\r\n```\r\n","created":"2014-12-19T18:11:53.778Z","modified":"2015-01-17T17:11:52.224Z","lastPublisher":{"name":"pelicanorojo","email":"bioingbenito@gmail.com"},"owners":[{"name":"pelicanorojo","email":"bioingbenito@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"flashroutingtests","_npmUser":{"name":"pelicanorojo","email":"bioingbenito@gmail.com"},"_npmVersion":"1.4.28","_rev":"1-f7714e9ac3158fd9d97e8a3b33f25722","_shasum":"334319c78d8ac8d48ef706fceee57c7b5cf66ac1","author":{"name":"Pablo Benito","email":"bioingbenito@gmail.com","url":"https://github.com/pelicanorojo/pelicanorojo.github.io"},"bugs":{"url":"https://github.com/pelicanorojo/flashroutingtests/issues"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"334319c78d8ac8d48ef706fceee57c7b5cf66ac1","tarball":"http://registry.npmjs.org/flashroutingtests/-/flashroutingtests-0.1.0.tgz"},"maintainers":[{"name":"pelicanorojo","email":"bioingbenito@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-01-17T17:11:52.224Z","created":"2014-12-19T18:11:53.778Z","0.0.1":"2014-12-19T18:11:53.778Z","0.1.0":"2015-01-17T17:11:52.224Z"}}}