{"name":"morgan-moment","description":"HTTP request logger middleware for node.js","version":"1.7.4","license":"MIT","repository":"https://github.com/eduardbadillo-igrid/morgan-moment","dependencies":{"basic-auth":"~1.0.3","debug":"~2.2.0","depd":"~1.0.1","moment":"~2.10.6","on-finished":"~2.3.0","on-headers":"~1.0.0"},"devDependencies":{"istanbul":"0.3.17","mocha":"2.2.5","split":"1.0.0","supertest":"1.0.1"},"files":["LICENSE","HISTORY.md","README.md","index.js"],"engines":{"node":">= 0.8.0"},"scripts":{"test":"mocha --check-leaks --reporter spec --bail","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --check-leaks --reporter dot","test-travis":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --check-leaks --reporter spec"},"gitHead":"0bc84cce8b16e3d0e277e48bbd1093a81ceb59f7","homepage":"https://github.com/eduardbadillo-igrid/morgan-moment#readme","versions":[{"number":"1.7.0","date":"2015-11-09T11:43:45.445Z"},{"number":"1.7.2","date":"2015-11-11T11:02:08.494Z"},{"number":"1.7.3","date":"2015-11-12T12:22:16.611Z"},{"number":"1.7.4","date":"2015-11-13T07:46:12.620Z"}],"readme":"# morgan\r\n\r\n[![NPM Version][npm-image]][npm-url]\r\n[![NPM Downloads][downloads-image]][downloads-url]\r\n[![Build Status][travis-image]][travis-url]\r\n[![Test Coverage][coveralls-image]][coveralls-url]\r\n[![Gratipay][gratipay-image]][gratipay-url]\r\n\r\nHTTP request logger middleware for node.js. This is just morgan allowing dates with custom format using moment ( moment.format() ).\r\n\r\n> Named after [Dexter](http://en.wikipedia.org/wiki/Dexter_Morgan), a show you should not watch until completion.\r\n\r\n## API\r\n\r\n```js\r\nvar morgan = require('morgan')\r\n```\r\n\r\n### morgan(format, options)\r\n\r\nCreate a new morgan logger middleware function using the given `format` and `options`.\r\nThe `format` argument may be a string of a predefined name (see below for the names),\r\na string of a format string, or a function that will produce a log entry.\r\n\r\n#### Options\r\n\r\nMorgan accepts these properties in the options object.\r\n\r\n#### immediate\r\n\r\nWrite log line on request instead of response. This means that a requests will\r\nbe logged even if the server crashes, _but data from the response (like the\r\nresponse code, content length, etc.) cannot be logged_.\r\n\r\n##### skip\r\n\r\nFunction to determine if logging is skipped, defaults to `false`. This function\r\nwill be called as `skip(req, res)`.\r\n\r\n```js\r\n// EXAMPLE: only log error responses\r\nmorgan('combined', {\r\n  skip: function (req, res) { return res.statusCode < 400 }\r\n})\r\n```\r\n\r\n##### stream\r\n\r\nOutput stream for writing log lines, defaults to `process.stdout`.\r\n\r\n#### Predefined Formats\r\n\r\nThere are various pre-defined formats provided:\r\n\r\n##### combined\r\n\r\nStandard Apache combined log output.\r\n\r\n```\r\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length] \":referrer\" \":user-agent\"\r\n```\r\n\r\n##### common\r\n\r\nStandard Apache common log output.\r\n\r\n```\r\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length]\r\n```\r\n\r\n##### dev\r\n\r\nConcise output colored by response status for development use. The `:status`\r\ntoken will be colored red for server error codes, yellow for client error\r\ncodes, cyan for redirection codes, and uncolored for all other codes.\r\n\r\n```\r\n:method :url :status :response-time ms - :res[content-length]\r\n```\r\n\r\n##### short\r\n\r\nShorter than default, also including response time.\r\n\r\n```\r\n:remote-addr :remote-user :method :url HTTP/:http-version :status :res[content-length] - :response-time ms\r\n```\r\n\r\n##### tiny\r\n\r\nThe minimal output.\r\n\r\n```\r\n:method :url :status :res[content-length] - :response-time ms\r\n```\r\n\r\n#### Tokens\r\n\r\n##### Creating new tokens\r\n\r\nTo define a token, simply invoke `morgan.token()` with the name and a callback function. This callback function is expected to return a string value. The value returned is then available as \":type\" in this case:\r\n```js\r\nmorgan.token('type', function(req, res){ return req.headers['content-type']; })\r\n```\r\n\r\nCalling `morgan.token()` using the same name as an existing token will overwrite that token definition.\r\n\r\n##### :date[format]\r\n\r\nThe current date and time in UTC. The available formats are:\r\n\r\n  - `clf` for the common log format (`\"10/Oct/2000:13:55:36 +0000\"`)\r\n  - `iso` for the common ISO 8601 date time format (`2000-10-10T13:55:36.000Z`)\r\n  - `web` for the common RFC 1123 date time format (`Tue, 10 Oct 2000 13:55:36 GMT`)\r\n\r\nIf no format is given, then the default is `web`.\r\n\r\n##### :http-version\r\n\r\nThe HTTP version of the request.\r\n\r\n##### :method\r\n\r\nThe HTTP method of the request.\r\n\r\n##### :referrer\r\n\r\nThe Referrer header of the request. This will use the standard mis-spelled Referer header if exists, otherwise Referrer.\r\n\r\n##### :remote-addr\r\n\r\nThe remote address of the request. This will use `req.ip`, otherwise the standard `req.connection.remoteAddress` value (socket address).\r\n\r\n##### :remote-user\r\n\r\nThe user authenticated as part of Basic auth for the request.\r\n\r\n##### :req[header]\r\n\r\nThe given `header` of the request.\r\n\r\n##### :res[header]\r\n\r\nThe given `header` of the response.\r\n\r\n##### :response-time\r\n\r\nThe time between the request coming into `morgan` and when the response headers are written, in milliseconds.\r\n\r\n##### :status\r\n\r\nThe status code of the response.\r\n\r\nIf the request/response cycle completes before a response was sent to the\r\nclient (for example, the TCP socket closed prematurely by a client aborting\r\nthe request), then the status will be empty (displayed as `\"-\"` in the log).\r\n\r\n##### :url\r\n\r\nThe URL of the request. This will use `req.originalUrl` if exists, otherwise `req.url`.\r\n\r\n##### :user-agent\r\n\r\nThe contents of the User-Agent header of the request.\r\n\r\n### morgan.compile(format)\r\n\r\nCompile a format string into a function for use by `morgan`. A format string\r\nis a string that represents a single log line and can utilize token syntax.\r\nTokens are references by `:token-name`. If tokens accept arguments, they can\r\nbe passed using `[]`, for example: `:token-name[pretty]` would pass the string\r\n`'pretty'` as an argument to the token `token-name`.\r\n\r\nNormally formats are defined using `morgan.format(name, format)`, but for certain\r\nadvanced uses, this compile function is directly available.\r\n\r\n## Examples\r\n\r\n### express/connect\r\n\r\nSimple app that will log all request in the Apache combined format to STDOUT\r\n\r\n```js\r\nvar express = require('express')\r\nvar morgan = require('morgan')\r\n\r\nvar app = express()\r\n\r\napp.use(morgan('combined'))\r\n\r\napp.get('/', function (req, res) {\r\n  res.send('hello, world!')\r\n})\r\n```\r\n\r\n### vanilla http server\r\n\r\nSimple app that will log all request in the Apache combined format to STDOUT\r\n\r\n```js\r\nvar finalhandler = require('finalhandler')\r\nvar http = require('http')\r\nvar morgan = require('morgan')\r\n\r\n// create \"middleware\"\r\nvar logger = morgan('combined')\r\n\r\nhttp.createServer(function (req, res) {\r\n  var done = finalhandler(req, res)\r\n  logger(req, res, function (err) {\r\n    if (err) return done(err)\r\n\r\n    // respond to request\r\n    res.setHeader('content-type', 'text/plain')\r\n    res.end('hello, world!')\r\n  })\r\n})\r\n```\r\n\r\n### write logs to a file\r\n\r\n#### single file\r\n\r\nSimple app that will log all requests in the Apache combined format to the file\r\n`access.log`.\r\n\r\n```js\r\nvar express = require('express')\r\nvar fs = require('fs')\r\nvar morgan = require('morgan')\r\n\r\nvar app = express()\r\n\r\n// create a write stream (in append mode)\r\nvar accessLogStream = fs.createWriteStream(__dirname + '/access.log', {flags: 'a'})\r\n\r\n// setup the logger\r\napp.use(morgan('combined', {stream: accessLogStream}))\r\n\r\napp.get('/', function (req, res) {\r\n  res.send('hello, world!')\r\n})\r\n```\r\n\r\n#### log file rotation\r\n\r\nSimple app that will log all requests in the Apache combined format to one log\r\nfile per date in the `log/` directory using the\r\n[file-stream-rotator module](https://www.npmjs.com/package/file-stream-rotator).\r\n\r\n```js\r\nvar FileStreamRotator = require('file-stream-rotator')\r\nvar express = require('express')\r\nvar fs = require('fs')\r\nvar morgan = require('morgan')\r\n\r\nvar app = express()\r\nvar logDirectory = __dirname + '/log'\r\n\r\n// ensure log directory exists\r\nfs.existsSync(logDirectory) || fs.mkdirSync(logDirectory)\r\n\r\n// create a rotating write stream\r\nvar accessLogStream = FileStreamRotator.getStream({\r\n  filename: logDirectory + '/access-%DATE%.log',\r\n  frequency: 'daily',\r\n  verbose: false\r\n})\r\n\r\n// setup the logger\r\napp.use(morgan('combined', {stream: accessLogStream}))\r\n\r\napp.get('/', function (req, res) {\r\n  res.send('hello, world!')\r\n})\r\n```\r\n\r\n### use custom token formats\r\n\r\nSample app that will use custom token formats. This adds an ID to all requests and displays it using the `:id` token.\r\n\r\n```js\r\nvar express = require('express')\r\nvar morgan = require('morgan')\r\nvar uuid = require('node-uuid')\r\n\r\nmorgan.token('id', function getId(req) {\r\n  return req.id\r\n})\r\n\r\nvar app = express()\r\n\r\napp.use(assignId)\r\napp.use(morgan(':id :method :url :response-time'))\r\n\r\napp.get('/', function (req, res) {\r\n  res.send('hello, world!')\r\n})\r\n\r\nfunction assignId(req, res, next) {\r\n  req.id = uuid.v4()\r\n  next()\r\n}\r\n```\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n[npm-image]: https://img.shields.io/npm/v/morgan.svg\r\n[npm-url]: https://npmjs.org/package/morgan\r\n[travis-image]: https://img.shields.io/travis/expressjs/morgan/master.svg\r\n[travis-url]: https://travis-ci.org/expressjs/morgan\r\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/morgan/master.svg\r\n[coveralls-url]: https://coveralls.io/r/expressjs/morgan?branch=master\r\n[downloads-image]: https://img.shields.io/npm/dm/morgan.svg\r\n[downloads-url]: https://npmjs.org/package/morgan\r\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\r\n[gratipay-url]: https://www.gratipay.com/dougwilson/\r\n","created":"2015-11-09T11:43:45.445Z","modified":"2015-11-13T07:46:12.620Z","lastPublisher":{"name":"eduardbadillo-igrid","email":"eduard.badillo@igrid-td.com"},"owners":[{"name":"eduardbadillo-igrid","email":"eduard.badillo@igrid-td.com"}],"other":{"_attachments":{},"_from":".","_id":"morgan-moment","_nodeVersion":"0.12.4","_npmUser":{"name":"eduardbadillo-igrid","email":"eduard.badillo@igrid-td.com"},"_npmVersion":"2.10.1","_rev":"1-773fdb26935cc46db5cab79078263194","_shasum":"cb294863bfc367e77aeee4bfc9bd3075fbfe36da","bugs":{"url":"https://github.com/eduardbadillo-igrid/morgan-moment/issues"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"},{"name":"Jonathan Ong","email":"me@jongleberry.com","url":"http://jongleberry.com"}],"directories":{},"dist-tags":{"latest":"1.7.4"},"dist":{"shasum":"cb294863bfc367e77aeee4bfc9bd3075fbfe36da","tarball":"http://registry.npmjs.org/morgan-moment/-/morgan-moment-1.7.4.tgz"},"maintainers":[{"name":"eduardbadillo-igrid","email":"eduard.badillo@igrid-td.com"}],"readmeFilename":"README.md","time":{"modified":"2015-11-13T07:46:12.620Z","created":"2015-11-09T11:43:45.445Z","1.7.0":"2015-11-09T11:43:45.445Z","1.7.2":"2015-11-11T11:02:08.494Z","1.7.3":"2015-11-12T12:22:16.611Z","1.7.4":"2015-11-13T07:46:12.620Z"}}}