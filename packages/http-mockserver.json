{"name":"http-mockserver","description":"Testing made easy with mocked http servers","version":"2.2.0","license":"MIT","jest":{"verbose":false,"testEnvironment":"node"},"scripts":{"start":"./bin/http-mockserver.js","debug":"node --inspect --debug-brk src/server/index.js","lint":"eslint ./src","test":"jest"},"bin":{"http-mockserver":"./bin/http-mockserver.js"},"main":"./src/index.js","engines":{"node":">=6.9.1"},"repository":"https://github.com/Tradeshift/node-mock-server","dependencies":{"body-parser":"1.15.2","express":"4.14.0","http-proxy":"1.16.2","lodash":"4.17.4","path-to-regexp":"1.7.0","q":"1.4.1","recursive-readdir":"2.1.0","request":"2.79.0","server-destroy":"1.0.1","uuid":"3.0.1","yargs":"6.6.0"},"devDependencies":{"eslint":"3.13.0","eslint-config-standard":"6.2.1","eslint-plugin-promise":"3.4.0","eslint-plugin-standard":"2.0.1","jest":"18.1.0"},"gitHead":"4406ab8f6f95de15e1d2ac4b85596b0303317c5b","homepage":"https://github.com/Tradeshift/node-mock-server#readme","versions":[{"number":"1.0.0","date":"2016-12-21T13:58:15.939Z"},{"number":"1.0.1","date":"2016-12-22T10:11:02.048Z"},{"number":"1.0.2","date":"2016-12-22T12:22:04.113Z"},{"number":"1.0.3","date":"2017-01-06T10:26:43.496Z"},{"number":"1.1.0","date":"2017-01-06T23:01:54.030Z"},{"number":"1.1.1","date":"2017-01-07T02:43:55.663Z"},{"number":"1.1.2","date":"2017-01-09T15:27:49.100Z"},{"number":"1.1.3","date":"2017-01-10T09:57:05.310Z"},{"number":"1.1.4","date":"2017-01-10T10:49:17.264Z"},{"number":"1.1.5","date":"2017-01-10T14:32:19.625Z"},{"number":"1.1.6","date":"2017-01-18T11:01:37.873Z"},{"number":"1.1.8","date":"2017-01-23T14:05:05.036Z"},{"number":"1.1.10","date":"2017-01-24T12:43:34.451Z"},{"number":"1.2.0","date":"2017-01-29T12:36:07.392Z"},{"number":"2.0.0","date":"2017-01-31T14:50:16.592Z"},{"number":"2.1.0","date":"2017-02-06T14:22:06.258Z"},{"number":"2.2.0","date":"2017-02-08T22:54:21.790Z"}],"readme":"## Install\n```\n$ npm install --save http-mockserver\n```\n\n## Usage\n\n```js\nconst { mockServer } = require('http-mockserver');\n\n// Static mock\nmockServer.addMock({\n\tport: 8080,\n\tmethod: 'GET',\n\turi: '/my/url',\n\tresponse: {\n\t\tbody: 'Hello world'\n\t}\n});\n\n// Dynamic mock\nlet counter = 0;\nmockServer.addMock({\n\tport: 8080,\n\tmethod: 'GET',\n\turi: '/my/other/url',\n\thandler: function (req, res) {\n\t\tcounter++;\n\t\tres.send(`Counter: ${counter}`);\n\t}\n});\n```\n\n## Mock object\nTo mock an endpoint, the mock object should follow one of these structures:\n\n#### Static mock\n* **port**: port of request, eg. `4000`\n* **uri**: uri of request, eg. `/users/peter`\n* **method**: method of request, eg. `GET`\n* **response**: Response object\n\t* **body**, eg. `{data: \"hello\"}`\n\t* **statusCode**, eg. `404` (default: 200)\n\t* **headers**, eg. `{\"Content-Type\": \"application/json\"}`\n\n#### Dynamic mock\n* **port**: port of request, eg. `4000`\n* **uri**: uri of request, eg. `/users/peter`\n* **method**: method of request, eg. `GET`\n* **handler**: `function(req, res) {...}`\n\n# API\nThe following methods are available on both `mockServer` and `mockClient`\n\n#### addMock(mock)\nMock and endpoint of a port and route, with a specific response (static mock) or a handler function (dynamic mock).\n\nArguments:\n* **mock**: Mock object. See [mock object](https://github.com/Tradeshift/http-mockserver/blob/master/README.md#mock-object) for details\n\n#### clearAll()\nRemove all mocks and clear the request log\n\n#### create(port)\nReturns a mockserver instance with the same API interface, but the methods do not require a port to be specified.\n\nArguments:\n* **port**: Port number.\n\nExample:\n```js\nconst { mockServer } = require('http-mockserver');\nconst backendService = mockServer.create(8888);\n\nbackendService.addMock({\n\turi: '/some/url/to/mock',\n\tmethod: 'GET',\n\tresponse: {\n\t\tbody: 'Hello world!'\n\t}\n});\n\n$ curl localhost:8888/some/url/to/mock \n\"Hello world!\"\n```\n\n#### getRequests([port])\nReturns request log. If port is specified, request will be filtered by this\n\nArguments:\n* **port**: Port number.\n\n#### waitForRequest(port, predicate, [count = 1, delay = 500])\nReturns a list of request logs that the predicate returns truthy for. The predicate is invoked with three arguments: (requestLog, index, requestLogs).\n\nArguments:\n* **port**: Port number.\n* **predicate**: The function invoked per iteration.\n* **count**: Exact number of request logs to match before returning\n* **delay**: Time between requests\n\n## MockServer API\nThe following methods are available only available on `mockServer`\n\n#### mockServer.start(port)\nStart mockserver on the specified port.\n\nArguments:\n* **port**: Port of MockServer (default: 3000)\n\n#### mockServer.stop()\nStop mockserver\n\n## MockClient API\nThe following methods are available only available on `mockClient`.\nYou only need to use the client if you are communicating with a mockServer that was started [from commandline](https://github.com/Tradeshift/http-mockserver#mockserver-cli-options) or by a separate Node process with [mockServer.start()](https://github.com/Tradeshift/http-mockserver#mockserverstartport). \n\n#### mockClient.setServerHost(serverHost)\nSet hostname and port of mockserver. This is necessary if you start MockServer on another port than the default (port 3000).\n\nArguments:\n* **serverHost**: Host of mockserver (Default: `localhost:3000`)\n\n## MockServer CLI Options\nIf you need to interact with the mockserver from other languages that Node.js, you can start it as a stand-alone process, and add mocks by interacting with the REST api.\nTo start mockServer from the command-line run `http-mockserver`.\nYou can also use the CLI tool to start a mockserver with some preconfigured mocks, and load them on startup with `http-mockserver --mocks ./mock-folder`\n\n```\n$ http-mockserver --help\n\n  Usage: http-mockserver [options]\n\n  Options\n    --port     MockServer port, default: 3000\n    --mocks    Path to mock config files\n```\n","created":"2016-12-21T13:58:15.939Z","modified":"2017-05-02T10:58:33.559Z","lastPublisher":{"name":"sqren","email":"sorenlouv@gmail.com"},"owners":[{"name":"gogozby","email":"gogoboyu@gmail.com"},{"name":"sqren","email":"sorenlouv@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-mockserver","_nodeVersion":"7.5.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/http-mockserver-2.2.0.tgz_1486594459780_0.684171226574108"},"_npmUser":{"name":"sqren","email":"sorenlouv@gmail.com"},"_npmVersion":"4.1.2","_rev":"18-04a757b7360c0dcd719c04eb53e4ab7f","_shasum":"dd80a0bb248581576330b740dc617388b82dd354","author":{"name":"Tradeshift"},"bugs":{"url":"https://github.com/Tradeshift/node-mock-server/issues"},"directories":{},"dist-tags":{"latest":"2.2.0"},"dist":{"shasum":"dd80a0bb248581576330b740dc617388b82dd354","tarball":"https://registry.npmjs.org/http-mockserver/-/http-mockserver-2.2.0.tgz"},"maintainers":[{"name":"gogozby","email":"gogoboyu@gmail.com"},{"name":"sqren","email":"sorenlouv@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-02T10:58:33.559Z","created":"2016-12-21T13:58:15.939Z","1.0.0":"2016-12-21T13:58:15.939Z","1.0.1":"2016-12-22T10:11:02.048Z","1.0.2":"2016-12-22T12:22:04.113Z","1.0.3":"2017-01-06T10:26:43.496Z","1.1.0":"2017-01-06T23:01:54.030Z","1.1.1":"2017-01-07T02:43:55.663Z","1.1.2":"2017-01-09T15:27:49.100Z","1.1.3":"2017-01-10T09:57:05.310Z","1.1.4":"2017-01-10T10:49:17.264Z","1.1.5":"2017-01-10T14:32:19.625Z","1.1.6":"2017-01-18T11:01:37.873Z","1.1.8":"2017-01-23T14:05:05.036Z","1.1.10":"2017-01-24T12:43:34.451Z","1.2.0":"2017-01-29T12:36:07.392Z","2.0.0":"2017-01-31T14:50:16.592Z","2.1.0":"2017-02-06T14:22:06.258Z","2.2.0":"2017-02-08T22:54:21.790Z"}}}