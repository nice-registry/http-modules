{"name":"got","version":"7.0.0","description":"Simplified HTTP requests","license":"MIT","repository":"https://github.com/sindresorhus/got","engines":{"node":">=4"},"scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"files":["index.js"],"keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"dependencies":{"decompress-response":"^3.2.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","is-plain-obj":"^1.1.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","isurl":"^1.0.0-alpha5","lowercase-keys":"^1.0.0","p-cancelable":"^0.2.0","p-timeout":"^1.1.1","safe-buffer":"^5.0.1","timed-out":"^4.0.0","url-parse-lax":"^1.0.0"},"devDependencies":{"ava":"^0.19.1","coveralls":"^2.11.4","form-data":"^2.1.1","get-port":"^3.0.0","into-stream":"^3.0.0","nyc":"^10.0.0","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","tempy":"^0.1.0","universal-url":"^1.0.0-alpha","xo":"^0.18.0"},"ava":{"concurrency":4},"browser":{"decompress-response":false},"gitHead":"c20bc5e8c826045e11a3497baef413232871d6fa","homepage":"https://github.com/sindresorhus/got#readme","versions":[{"number":"0.1.0","date":"2014-03-27T22:43:12.196Z"},{"number":"0.1.1","date":"2014-04-12T13:47:38.755Z"},{"number":"0.2.0","date":"2014-04-13T18:14:49.110Z"},{"number":"0.3.0","date":"2014-05-10T23:39:27.862Z"},{"number":"1.0.0","date":"2014-08-05T09:43:06.091Z"},{"number":"1.0.1","date":"2014-08-12T08:21:25.243Z"},{"number":"1.1.0","date":"2014-08-17T12:43:15.105Z"},{"number":"1.2.0","date":"2014-08-20T22:37:57.307Z"},{"number":"1.2.1","date":"2014-09-23T14:14:34.374Z"},{"number":"1.2.2","date":"2014-10-03T14:11:25.869Z"},{"number":"2.0.0","date":"2014-11-23T09:01:36.404Z"},{"number":"2.1.0","date":"2014-12-02T10:31:12.398Z"},{"number":"2.2.0","date":"2014-12-07T17:49:45.912Z"},{"number":"2.3.0","date":"2015-01-05T09:15:38.995Z"},{"number":"2.3.1","date":"2015-01-19T13:02:19.029Z"},{"number":"2.3.2","date":"2015-01-24T08:03:00.841Z"},{"number":"2.4.0","date":"2015-02-06T09:25:12.987Z"},{"number":"2.5.0","date":"2015-03-24T18:47:14.096Z"},{"number":"2.6.0","date":"2015-04-03T14:49:18.932Z"},{"number":"2.7.0","date":"2015-04-06T11:30:17.357Z"},{"number":"2.7.1","date":"2015-04-08T11:03:27.381Z"},{"number":"2.7.2","date":"2015-04-08T18:59:36.007Z"},{"number":"2.8.0","date":"2015-04-21T05:48:05.902Z"},{"number":"2.8.1","date":"2015-04-21T14:08:22.947Z"},{"number":"2.9.0","date":"2015-04-26T15:55:52.739Z"},{"number":"2.9.1","date":"2015-04-26T18:29:10.206Z"},{"number":"2.9.2","date":"2015-04-27T06:30:24.516Z"},{"number":"3.0.0","date":"2015-05-06T06:30:58.538Z"},{"number":"3.1.0","date":"2015-05-08T11:12:05.123Z"},{"number":"3.2.0","date":"2015-05-08T16:48:58.710Z"},{"number":"3.3.0","date":"2015-06-30T13:05:28.712Z"},{"number":"3.3.1","date":"2015-07-15T10:16:53.806Z"},{"number":"4.0.0","date":"2015-07-25T06:31:20.863Z"},{"number":"4.1.0","date":"2015-07-27T11:12:35.402Z"},{"number":"4.1.1","date":"2015-07-28T15:01:59.215Z"},{"number":"4.2.0","date":"2015-09-09T08:58:13.223Z"},{"number":"5.0.0","date":"2015-10-18T09:28:57.901Z"},{"number":"5.1.0","date":"2015-11-04T06:14:56.435Z"},{"number":"5.2.0","date":"2015-12-02T07:54:48.847Z"},{"number":"6.0.0-rc1","date":"2015-12-07T05:37:56.742Z"},{"number":"5.2.1","date":"2015-12-15T15:05:48.697Z"},{"number":"5.3.0","date":"2015-12-20T17:26:48.800Z"},{"number":"6.0.0","date":"2016-01-07T16:32:11.588Z"},{"number":"6.0.1","date":"2016-01-11T12:48:36.344Z"},{"number":"5.3.1","date":"2016-01-12T10:42:52.883Z"},{"number":"5.3.2","date":"2016-01-13T08:59:14.318Z"},{"number":"6.0.2","date":"2016-01-13T08:59:36.251Z"},{"number":"5.4.0","date":"2016-01-16T11:25:19.190Z"},{"number":"6.1.0","date":"2016-01-16T11:25:45.613Z"},{"number":"5.4.1","date":"2016-01-25T10:06:31.058Z"},{"number":"6.1.1","date":"2016-01-25T10:11:30.894Z"},{"number":"6.1.2","date":"2016-02-28T18:11:22.062Z"},{"number":"5.4.2","date":"2016-02-28T18:11:46.401Z"},{"number":"6.2.0","date":"2016-03-03T07:54:01.845Z"},{"number":"5.5.0","date":"2016-03-03T08:00:46.060Z"},{"number":"5.5.1","date":"2016-04-05T07:29:12.088Z"},{"number":"5.6.0","date":"2016-04-06T18:32:20.306Z"},{"number":"6.3.0","date":"2016-04-06T18:33:09.807Z"},{"number":"6.5.0","date":"2016-09-14T09:02:20.690Z"},{"number":"5.7.0","date":"2016-11-01T08:43:39.778Z"},{"number":"6.6.0","date":"2016-11-01T08:51:18.521Z"},{"number":"6.6.1","date":"2016-11-02T06:11:37.653Z"},{"number":"5.7.1","date":"2016-11-02T19:03:21.382Z"},{"number":"6.6.2","date":"2016-11-06T10:15:33.357Z"},{"number":"6.6.3","date":"2016-11-06T10:25:25.129Z"},{"number":"6.7.0","date":"2016-12-29T10:18:05.884Z"},{"number":"6.7.1","date":"2016-12-29T14:42:52.311Z"},{"number":"7.0.0","date":"2017-05-29T08:02:02.304Z"}],"readme":"<h1 align=\"center\">\n\t<br>\n\t<img width=\"360\" src=\"https://rawgit.com/sindresorhus/got/master/media/logo.svg\" alt=\"got\">\n\t<br>\n\t<br>\n\t<br>\n</h1>\n\n> Simplified HTTP requests\n\n[![Build Status](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got) [![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master) [![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n\nA nicer interface to the built-in [`http`](http://nodejs.org/api/http.html) module.\n\nIt supports following redirects, promises, streams, retries, automagically handling gzip/deflate, canceling of requests, and some convenience options.\n\nCreated because [`request`](https://github.com/request/request) is bloated *(several megabytes!)*.\n\nWhen used with Electron, it takes advantage of [`electron.net`](https://electron.atom.io/docs/api/net/).\n\n\n## Install\n\n**WARNING: Node.js 4 or higher is required for got@6 and above.** For older Node.js versions use [got@5](https://github.com/sindresorhus/got/tree/v5.x).\n\n```\n$ npm install --save got\n```\n\n\n## Usage\n\n```js\nconst fs = require('fs');\nconst got = require('got');\n\ngot('todomvc.com')\n\t.then(response => {\n\t\tconsole.log(response.body);\n\t\t//=> '<!doctype html> ...'\n\t})\n\t.catch(error => {\n\t\tconsole.log(error.response.body);\n\t\t//=> 'Internal server error ...'\n\t});\n\n// Streams\ngot.stream('todomvc.com').pipe(fs.createWriteStream('index.html'));\n\n// For POST, PUT and PATCH methods got.stream returns a WritableStream\nfs.createReadStream('index.html').pipe(got.stream.post('todomvc.com'));\n```\n\n\n### API\n\nIt's a `GET` request by default, but can be changed in `options`.\n\n#### got(url, [options])\n\nReturns a Promise for a `response` object with a `body` property, a `url` property with the request URL or the final URL after redirects, and a `requestUrl` property with the original request URL.\n\n##### url\n\nType: `string`, `object`\n\nThe URL to request as simple string, a [`http.request` options](https://nodejs.org/api/http.html#http_http_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nProperties from `options` will override properties in the parsed `url`.\n\n##### options\n\nType: `object`\n\nAny of the [`http.request`](http://nodejs.org/api/http.html#http_http_request_options_callback) options.\n\n###### body\n\nType: `string`, `buffer`, `readableStream`\n\n*This is mutually exclusive with stream mode.*\n\nBody that will be sent with a `POST` request.\n\nIf present in `options` and `options.method` is not set, `options.method` will be set to `POST`.\n\nIf `content-length` or `transfer-encoding` is not set in `options.headers` and `body` is a string or buffer, `content-length` will be set to the body length.\n\n###### encoding\n\nType: `string`, `null`<br>\nDefault: `'utf8'`\n\nEncoding to be used on `setEncoding` of the response data. If `null`, the body is returned as a Buffer.\n\n###### form\n\nType: `boolean`<br>\nDefault: `false`\n\n*This is mutually exclusive with stream mode.*\n\nIf set to `true` and `Content-Type` header is not set, it will be set to `application/x-www-form-urlencoded`.\n\n`body` must be a plain object and will be stringified.\n\n###### json\n\nType: `boolean`<br>\nDefault: `false`\n\n*This is mutually exclusive with stream mode.*\n\nIf set to `true` and `Content-Type` header is not set, it will be set to `application/json`.\n\nParse response body with `JSON.parse` and set `accept` header to `application/json`. If used in conjunction with the `form` option, the `body` will the stringified as querystring and the response parsed as JSON.\n\n`body` must be a plain object and will be stringified.\n\n###### query\n\nType: `string`, `object`<br>\n\nQuery string object that will be added to the request URL. This will override the query string in `url`.\n\n###### timeout\n\nType: `number`, `object`\n\nMilliseconds to wait for the server to end the response before aborting request with `ETIMEDOUT` error.\n\nThis also accepts an object with separate `connect`, `socket`, and `request` fields for connection, socket, and entire request timeouts.\n\n###### retries\n\nType: `number`, `function`<br>\nDefault: `2`\n\nNumber of request retries when network errors happens. Delays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 0).\n\nOption accepts `function` with `retry` and `error` arguments. Function must return delay in milliseconds (`0` return value cancels retry).\n\n**Note:** if `retries` is `number`, `ENOTFOUND` and `ENETUNREACH` error will not be retried (see full list in [`is-retry-allowed`](https://github.com/floatdrop/is-retry-allowed/blob/master/index.js#L12) module).\n\n###### followRedirect\n\nType: `boolean`<br>\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\nNote that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), got will automatically\nrequest the resource pointed to in the location header via `GET`. This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\n###### useElectronNet\n\nType: `boolean`<br>\nDefault: `true`\n\nWhen used in Electron, Got will automatically use [`electron.net`](https://electron.atom.io/docs/api/net/) instead of the Node.js `http` module. It should be fully compatible, but you can turn it off here if you encounter a problem. Please open an issue if you do!\n\n\n#### Streams\n\n#### got.stream(url, [options])\n\n`stream` method will return Duplex stream with additional events:\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Tip**: You can use `request` event to abort request:\n\n```js\ngot.stream('github.com')\n\t.on('request', req => setTimeout(() => req.abort(), 50));\n```\n\n##### .on('response', response)\n\n`response` event to get the response object of the final request.\n\n##### .on('redirect', response, nextOptions)\n\n`redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on('error', error, body, response)\n\n`error` event emitted in case of protocol error (like `ENOTFOUND` etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is response object.\n\n#### got.get(url, [options])\n#### got.post(url, [options])\n#### got.put(url, [options])\n#### got.patch(url, [options])\n#### got.head(url, [options])\n#### got.delete(url, [options])\n\nSets `options.method` to the method name and makes a request.\n\n\n## Errors\n\nEach error contains (if available) `statusCode`, `statusMessage`, `host`, `hostname`, `method`, `path`, `protocol` and `url` properties to make debugging easier.\n\nIn Promise mode, the `response` is attached to the error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen `json` option is enabled, server response code is 2xx, and `JSON.parse` fails.\n\n#### got.HTTPError\n\nWhen server response code is not 2xx. Includes `statusCode`, `statusMessage`, and `redirectUrls` properties.\n\n#### got.MaxRedirectsError\n\nWhen server redirects you more than 10 times. Includes a `redirectUrls` property, which is an array of the URLs Got was redirected to before giving up.\n\n#### got.UnsupportedProtocolError\n\nWhen given an unsupported protocol.\n\n\n## Aborting the request\n\nThe promise returned by Got has a `.cancel()` function which, when called, aborts the request.\n\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) module with the `agent` option to work with proxies:\n\n```js\nconst got = require('got');\nconst tunnel = require('tunnel');\n\ngot('todomvc.com', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: 'localhost'\n\t\t}\n\t})\n});\n```\n\n\n## Cookies\n\nYou can use the [`cookie`](https://github.com/jshttp/cookie) module to include cookies in a request:\n\n```js\nconst got = require('got');\nconst cookie = require('cookie');\n\ngot('google.com', {\n\theaders: {\n\t\tcookie: cookie.serialize('foo', 'bar')\n\t}\n});\n```\n\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) module to create POST request with form data:\n\n```js\nconst fs = require('fs');\nconst got = require('got');\nconst FormData = require('form-data');\nconst form = new FormData();\n\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\ngot.post('google.com', {\n\tbody: form\n});\n```\n\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) module to create a signed OAuth request:\n\n```js\nconst got = require('got');\nconst crypto  = require('crypto');\nconst OAuth = require('oauth-1.0a');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: 'HMAC-SHA1',\n\thash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\n\tjson: true\n});\n```\n\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - absolute path to a unix domain socket, e.g. `/var/run/docker.sock`\n- `PATH` - request path, e.g. `/v2/keys`\n\n```js\ngot('http://unix:/var/run/docker.sock:/containers/json');\n\n// or without protocol (http by default)\ngot('unix:/var/run/docker.sock:/containers/json');\n```\n\n## AWS\n\nRequests to AWS services need to have their headers signed. This can be accomplished by using the [`aws4`](https://www.npmjs.com/package/aws4) package. This is an example for querying an [\"Elasticsearch Service\"](https://aws.amazon.com/elasticsearch-service/) host with a signed request.\n\n```js\nconst url = require('url');\nconst AWS = require('aws-sdk');\nconst aws4 = require('aws4');\nconst got = require('got');\nconst config = require('./config');\n\n// Reads keys from the environment or `~/.aws/credentials`. Could be a plain object.\nconst awsConfig = new AWS.Config({ region: config.region });\n\nfunction request(uri, options) {\n\tconst awsOpts = {\n\t\tregion: awsConfig.region,\n\t\theaders: {\n\t\t\taccept: 'application/json',\n\t\t\t'content-type': 'application/json'\n\t\t},\n\t\tmethod: 'GET',\n\t\tjson: true\n\t};\n\n\t// We need to parse the URL before passing it to `got` so `aws4` can sign the request\n\tconst opts = Object.assign(url.parse(uri), awsOpts, options);\n\taws4.sign(opts, awsConfig.credentials);\n\n\treturn got(opts);\n}\n\nrequest(`https://${config.host}/production/users/1`);\n\nrequest(`https://${config.host}/production/`, {\n\t// All usual `got` options\n});\n```\n\n\n## Tips\n\n### User Agent\n\nIt's a good idea to set the `'user-agent'` header so the provider can more easily see how their resource is used. By default, it's the URL to this repo.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\ngot('todomvc.com', {\n\theaders: {\n\t\t'user-agent': `my-module/${pkg.version} (https://github.com/username/my-module)`\n\t}\n});\n```\n\n### 304 Responses\n\nBear in mind, if you send an `if-modified-since` header and receive a `304 Not Modified` response, the body will be empty. It's your responsibility to cache and retrieve the body contents.\n\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Convenience wrapper for interacting with the GitHub API\n- [travis-got](https://github.com/samverschueren/travis-got) - Convenience wrapper for interacting with the Travis API\n\n\n## Created by\n\n[![Sindre Sorhus](https://avatars.githubusercontent.com/u/170270?v=3&s=100)](https://sindresorhus.com) | [![Vsevolod Strukchinsky](https://avatars.githubusercontent.com/u/365089?v=3&s=100)](https://github.com/floatdrop) | [![Alexander Tesfamichael](https://avatars.githubusercontent.com/u/2011351?v=3&s=100)](https://alextes.me)\n---|---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Vsevolod Strukchinsky](https://github.com/floatdrop) | [Alexander Tesfamichael](https://alextes.me)\n\n\n## License\n\nMIT\n","starsCount":86,"created":"2014-03-27T22:43:12.196Z","modified":"2017-06-10T11:10:36.373Z","lastPublisher":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"owners":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"floatdrop@gmail.com","name":"floatdrop"}],"other":{"_attachments":{},"_from":".","_id":"got","_nodeVersion":"4.8.3","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got-7.0.0.tgz_1496044922128_0.4668192621320486"},"_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"_npmVersion":"2.15.11","_rev":"46-fbb2cee91dd0a1bc30fa4879d37b0d1f","_shasum":"82d439f6763cdb1c8821b7a3aae2784c88c3b8d3","bugs":{"url":"https://github.com/sindresorhus/got/issues"},"directories":{},"dist-tags":{"latest":"7.0.0","rc":"6.0.0-rc1","5.x-branch":"5.7.1"},"dist":{"shasum":"82d439f6763cdb1c8821b7a3aae2784c88c3b8d3","tarball":"https://registry.npmjs.org/got/-/got-7.0.0.tgz"},"maintainers":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"floatdrop@gmail.com","name":"floatdrop"}],"readmeFilename":"readme.md","time":{"modified":"2017-06-10T11:10:36.373Z","created":"2014-03-27T22:43:12.196Z","0.1.0":"2014-03-27T22:43:12.196Z","0.1.1":"2014-04-12T13:47:38.755Z","0.2.0":"2014-04-13T18:14:49.110Z","0.3.0":"2014-05-10T23:39:27.862Z","1.0.0":"2014-08-05T09:43:06.091Z","1.0.1":"2014-08-12T08:21:25.243Z","1.1.0":"2014-08-17T12:43:15.105Z","1.2.0":"2014-08-20T22:37:57.307Z","1.2.1":"2014-09-23T14:14:34.374Z","1.2.2":"2014-10-03T14:11:25.869Z","2.0.0":"2014-11-23T09:01:36.404Z","2.1.0":"2014-12-02T10:31:12.398Z","2.2.0":"2014-12-07T17:49:45.912Z","2.3.0":"2015-01-05T09:15:38.995Z","2.3.1":"2015-01-19T13:02:19.029Z","2.3.2":"2015-01-24T08:03:00.841Z","2.4.0":"2015-02-06T09:25:12.987Z","2.5.0":"2015-03-24T18:47:14.096Z","2.6.0":"2015-04-03T14:49:18.932Z","2.7.0":"2015-04-06T11:30:17.357Z","2.7.1":"2015-04-08T11:03:27.381Z","2.7.2":"2015-04-08T18:59:36.007Z","2.8.0":"2015-04-21T05:48:05.902Z","2.8.1":"2015-04-21T14:08:22.947Z","2.9.0":"2015-04-26T15:55:52.739Z","2.9.1":"2015-04-26T18:29:10.206Z","2.9.2":"2015-04-27T06:30:24.516Z","3.0.0":"2015-05-06T06:30:58.538Z","3.1.0":"2015-05-08T11:12:05.123Z","3.2.0":"2015-05-08T16:48:58.710Z","3.3.0":"2015-06-30T13:05:28.712Z","3.3.1":"2015-07-15T10:16:53.806Z","4.0.0":"2015-07-25T06:31:20.863Z","4.1.0":"2015-07-27T11:12:35.402Z","4.1.1":"2015-07-28T15:01:59.215Z","4.2.0":"2015-09-09T08:58:13.223Z","5.0.0":"2015-10-18T09:28:57.901Z","5.1.0":"2015-11-04T06:14:56.435Z","5.2.0":"2015-12-02T07:54:48.847Z","6.0.0-rc1":"2015-12-07T05:37:56.742Z","5.2.1":"2015-12-15T15:05:48.697Z","5.3.0":"2015-12-20T17:26:48.800Z","6.0.0":"2016-01-07T16:32:11.588Z","6.0.1":"2016-01-11T12:48:36.344Z","5.3.1":"2016-01-12T10:42:52.883Z","5.3.2":"2016-01-13T08:59:14.318Z","6.0.2":"2016-01-13T08:59:36.251Z","5.4.0":"2016-01-16T11:25:19.190Z","6.1.0":"2016-01-16T11:25:45.613Z","5.4.1":"2016-01-25T10:06:31.058Z","6.1.1":"2016-01-25T10:11:30.894Z","6.1.2":"2016-02-28T18:11:22.062Z","5.4.2":"2016-02-28T18:11:46.401Z","6.2.0":"2016-03-03T07:54:01.845Z","5.5.0":"2016-03-03T08:00:46.060Z","5.5.1":"2016-04-05T07:29:12.088Z","5.6.0":"2016-04-06T18:32:20.306Z","6.3.0":"2016-04-06T18:33:09.807Z","6.5.0":"2016-09-14T09:02:20.690Z","5.7.0":"2016-11-01T08:43:39.778Z","6.6.0":"2016-11-01T08:51:18.521Z","6.6.1":"2016-11-02T06:11:37.653Z","5.7.1":"2016-11-02T19:03:21.382Z","6.6.2":"2016-11-06T10:15:33.357Z","6.6.3":"2016-11-06T10:25:25.129Z","6.7.0":"2016-12-29T10:18:05.884Z","6.7.1":"2016-12-29T14:42:52.311Z","7.0.0":"2017-05-29T08:02:02.304Z"},"users":{"floatdrop":true,"zhangyaochun":true,"pid":true,"nickleefly":true,"davidchubbs":true,"amio":true,"vlkosinov":true,"cilindrox":true,"rsp":true,"btd":true,"moimikey":true,"twilightfeel":true,"ciceropablo":true,"kbakba":true,"rwhogg":true,"goliatone":true,"filipecarmona":true,"xieranmaya":true,"nichoth":true,"fdaciuk":true,"markthethomas":true,"xgheaven":true,"hengkiardo":true,"gvn":true,"carsy":true,"s4g6":true,"tobiasnickel":true,"knksmith57":true,"goblindegook":true,"allenmoore":true,"parkerproject":true,"starknode":true,"nickeltobias":true,"semencov":true,"vutran":true,"antixrist":true,"kevin-smets":true,"preco21":true,"erickeno":true,"jerrywu":true,"arttse":true,"slurm":true,"antanst":true,"pahud":true,"kissyid":true,"lousando":true,"programmer.severson":true,"lorenazohar":true,"mccoyjordan":true,"roccomuso":true,"gurunate":true,"eerne":true,"swapnil_mishra":true,"nxc":true,"evocateur":true,"azevedo":true,"sealthedeal":true,"floriannagel":true,"langri-sha":true,"xumx":true,"soenkekluth":true,"quanru":true,"internoma":true,"vinbhatt":true,"seangenabe":true,"tommytroylin":true,"restmount":true,"matthiasg":true,"quocnguyen":true,"archcorsair":true,"rocket0191":true,"tvtamas":true,"bigp":true,"panlw":true,"ishman":true,"omegga":true,"bphanikumar":true,"abuelwafa":true,"nerdybeast":true,"ahme-t":true,"3dprintingsystems":true,"netoperatorwibby":true,"ganesh.bhat":true,"andygreenegrass":true,"stevenvachon":true,"zousandian":true}}}