{"name":"gearworks-http","version":"1.2.0","description":"A standardized HTTP client used by Gearworks apps, backed by Axios. Gearworks is the best way to get started with building Shopify apps!","main":"bin/index.js","typings":"bin/index.d.ts","files":["bin/index.*"],"scripts":{"prebuild":"rimraf bin","build":"tsc -p .","prepublishOnly":"npm run build","pretest":"npm run build","pretest:raw":"npm run build","test":"alsatian -T ./bin/test.js | tap-bark","test:raw":"alsatian -T ./bin/test.js"},"repository":"https://github.com/nozzlegear/gearworks-http","keywords":["gearworks","http","shopify","axios"],"license":"MIT","homepage":"https://github.com/nozzlegear/gearworks-http#readme","dependencies":{"axios":"^0.16.1","logspect":"^1.0.2","url-join":"^2.0.2"},"devDependencies":{"@types/boom":"^4.3.2","@types/joi":"^10.3.2","@types/micro":"^7.3.0","@types/url-join":"^0.8.2","alsatian":"^1.3.1","boom":"^4.3.1","gearworks-validation":"^1.0.0","micro":"^7.3.3","rimraf":"^2.6.1","tap-bark":"^1.0.0","typescript":"^2.3.2"},"licenseText":"MIT License\n\nCopyright (c) 2017 Joshua Harms\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","versions":[{"number":"1.0.0","date":"2017-05-17T21:00:09.531Z"},{"number":"1.1.0","date":"2017-06-09T20:42:14.885Z"},{"number":"1.1.1","date":"2017-06-11T16:02:31.687Z"},{"number":"1.1.2","date":"2017-06-12T18:48:02.934Z"},{"number":"1.1.3","date":"2017-06-12T19:01:46.007Z"},{"number":"1.2.0","date":"2017-06-12T21:50:27.567Z"}],"readme":"# gearworks-http\nA standardized HTTP client used by Gearworks apps, backed by Axios. [Gearworks](https://github.com/nozzlegear/gearworks) is the best way to get started with building Shopify applications!\n\n## Installing\n\nYou can install this package from NPM with the NPM CLI or with Yarn (recommended):\n\n```bash\n# With NPM\nnpm install gearworks-http --save\n\n# With Yarn\nyarn add gearworks-http\n```\n\n## Importing\n\nYou can import the BaseClient via require or TypeScript's import:\n\n```typescript\n// Import with TypeScript or ES6\nimport BaseClient from \"gearworks-http\";\n\n// Import via Node's require:\nconst BaseClient = require(\"gearworks-http\").default;\n```\n\n## Usage\n\nThis package provides a base, abstract client for you to extend with your own custom logic. When constructing your class, you need to make a call to the base client with `super(baseUrl, defaultHeaders?, proxy?)`, passing along the `baseUrl` and two other optional variables (documented below) for all requests made by your class.\n\n```typescript\nimport BaseClient from \"gearworks-http\";\n\nexport class MyClientClass extends BaseClient {\n    constructor() {\n        super(\"http://example.com/api\", { \n            \"X-Custom-Header-Name\": \"custom header value sent with each request\"\n        })\n    }\n\n    public getFooObject(id: string) => this.sendRequest<FooType>(`foos/${id}`, \"GET\");\n\n    public listFooObjects(page: number = 1) => this.sendRequest<FooType>(`foos`, \"GET\", { \n        qs: {\n            page: page\n        }\n    });\n\n    public createFooObject(foo: FooType) => this.sendRequest<FooType>(`foos`, \"POST\", { \n        body: foo \n    });\n\n    public updateFooObject(id: string, foo: FooType) => this.sendRequest<FooType>(`foos/${id}`, \"PUT\", { \n        body: foo \n    });\n\n    public deleteFooObject(id: string) => this.sendRequest<void>(`foos/${id}`, \"DELETE\");\n}\n```\n\nThe `this.sendRequest<T>` function returns a promise that can be awaited when using TypeScript or Babel, and will throw an `ApiError` when the server responds with a status code that isn't OK.\n\n### BaseClient.constructor\n\nThe abstract BaseClient class should be extended by your own custom API client classes. When extending the BaseClient, you need to call `super()` which accepts the following variables:\n\n|Variable|Type|Required|Description|Example|\n|--------|----|--------|-----------|-------|\n|`baseUrl`|string|true|A base URL string (relative or absolute) that will be used for all requests made with this particular instance.|`\"http://localhost:3000\"`|\n|`headers`|object|false|An object containing headers, e.g. auth headers, that will be sent along with all requests.|`{ 'header-name': 'custom header value' }`|\n|`proxy`|object|false|An Axios proxy config object that will be used for all requests. Useful for debugging requests with e.g. [Fiddler](http://www.telerik.com/fiddler)|`{ host: \"127.0.0.1\", port: 8888}`|\n\n### BaseClient.sendRequest<T>\n\nA protected function that your client class should use to make requests. When using TypeScript, this function accepts a type parameter that can be used to tell the compiler what return type you expect from your request. \n\n|Variable|Type|Required|Description|Example|\n|--------|----|--------|-----------|-------|\n|`path`|string|true|The endpoint path you're making a request to. Will be combined with the `baseUrl` used in the constructor.|`\"foos/123\"`|\n|`method`|string|true|Method to use for the request. Accepted values are `\"POST\"`, `\"PUT\"`, `\"GET\"`, `\"DELETE\"`.|`\"POST\"`|\n|`data`|object|false|Object containing an optional `body` property with your POST or PUT object and an optional `qs` property with a querystring parameter object.|`{ body: { propName: \"prop value\" }, qs: { paramName: \"param value\" } }`|\n\nThis function returns a `Promise<T>` that can be awaited with TypeScript or Babel. The default implementation will deserialize the response body to an object (type `T` when using TypeScript) and return it. \n\nYou can override this function with your own implementation:\n\n```typescript\nimport BaseClient, { RequestData, isOkay } from \"gearworks-http\";\n\nexport class MyClientClass extends BaseClient {\n    constructor() {\n        super(\"http://example.com/api\", { \n            \"X-Custom-Header-Name\": \"custom header value sent with each request\"\n        })\n    }\n\n    // Override the sendRequest function\n    protected async sendRequest<T>(path: string, method: \"POST\" | \"PUT\" | \"GET\" | \"DELETE\", data: RequestData = { }) {\n        // Make your own custom request with this.Axios here.\n        const request = this.Axios.request({\n            ...\n        })\n        let result: AxiosResponse;\n        let body: any;\n\n        try {\n            result = await request;\n            body = result.data;\n        } catch (e) {\n            // Axios was configured to only throw an error when a network error is encountered, not when the server returns a not-OK response.\n        }\n\n        if (!isOkay) {\n            const error = this.parseErrorResponse(body, result);\n\n            throw error;\n        }\n\n        const output: T = ...\n        \n        return output;\n    }\n}\n```\n\n### BaseClient.parseErrorResponse\n\nA protected function that the client class uses to parse error responses. You shouldn't need to call this function directly unless you're using a custom version of `BaseClient.sendRequest<T>`. When this function is called, it *must* return an `ApiError` â€“ the caller already knows there was an error, it just wants this function to parse it.\n\nThe default implementation of this function is configured to parse errors returned by the [Gearworks](https://github.com/nozzlegear/gearworks) API: \n\n```json\n{\n    \"message\": \"Something crazy happened\", \n    \"details\": [ \n        {\n            \"key\": \"foo\",\n            \"details\": [\n                \"here's an itemized list of everything wrong with this prop\",\n                \"1. ...\",\n                \"2. ...\"\n            ]\n        }\n    ]\n}\n```\n\n|Variable|Type|Required|Description|Example|\n|--------|----|--------|-----------|-------|\n|`body`|string|false|The response body object or raw string. This may be null!|`{ message: \"Something crazy happened\", ... }`|\n|`axiosResponse`|AxiosResponse|false|The Axios response itself, containing the status code and status text. This may be null!|`{status: 500, statusText: \"Internal server error\", ...}`|\n\nYou can override this function with your own implementation, which is particularly useful when you're making requests to a server that isn't using Gearworks:\n\n```typescript\nimport BaseClient, { ApiError } from \"gearworks-http\";\n\nexport class MyClientClass extends BaseClient {\n    constructor() {\n        super(\"http://example.com/api\", { \n            \"X-Custom-Header-Name\": \"custom header value sent with each request\"\n        })\n    }\n\n    protected parseErrorResponse(body?: string | Object, axiosResponse?: AxiosResponse) {\n        const statusCode = 66;\n        const statusText = \"I AM THE SENATE.\";\n        const message = \"It's treason then.\";\n        const details = {\n            \"sheev\": \"Are you threatening me, Master Jedi?\"\n        }\n\n        const error = new ApiError(66, \"I AM THE SENATE\", \"It's treason then.\");\n        error.details = details;\n\n        return error;\n    }\n}\n```\n\n### ApiError\n\nThe `ApiError` is a custom Error class that's returned by the `BaseClient.parseErrorResponse` function and thrown by the default implementation of `BaseClient.sendRequest<T>` function. It has the following properties:\n\n|Variable|Type|Description|Example|\n|--------|----|-----------|-------|\n|`status_code`|number|The response status code.|500|\n|`status_text`|string|The status text corresponding with the `status_code`.|`\"Internal Server Error\"`.|\n|`unauthorized`|boolean|Indicates whether the response is a `401 unauthorized` response. Automatically set in the `ApiError` class constructor.|false|\n|`message`|string|A message describing the error.|`\"It's treason then.\"`|\n|`details`|any|A property set by the `BaseClient.parseErrorResponse` function that describes extra error details. May be null or undefined.|`{\"sheev\": \"Are you threatening me, Master Jedi?\"}`|","created":"2017-05-17T21:00:09.531Z","modified":"2017-06-12T21:50:27.567Z","lastPublisher":{"name":"nozzlegear","email":"joshua@nozzlegear.com"},"owners":[{"name":"nozzlegear","email":"joshua@nozzlegear.com"}],"other":{"_attachments":{},"_id":"gearworks-http","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gearworks-http-1.2.0.tgz_1497304225540_0.8500655237585306"},"_npmUser":{"name":"nozzlegear","email":"joshua@nozzlegear.com"},"_rev":"6-c51c4b40425782cd0e6eb37e552353ff","author":{"name":"Joshua Harms"},"bugs":{"url":"https://github.com/nozzlegear/gearworks-http/issues"},"directories":{},"dist-tags":{"latest":"1.2.0"},"dist":{"shasum":"9bddaa21b7ce456d990b1ad81a0c080896e5e834","tarball":"https://registry.npmjs.org/gearworks-http/-/gearworks-http-1.2.0.tgz"},"maintainers":[{"name":"nozzlegear","email":"joshua@nozzlegear.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-12T21:50:27.567Z","created":"2017-05-17T21:00:09.531Z","1.0.0":"2017-05-17T21:00:09.531Z","1.1.0":"2017-06-09T20:42:14.885Z","1.1.1":"2017-06-11T16:02:31.687Z","1.1.2":"2017-06-12T18:48:02.934Z","1.1.3":"2017-06-12T19:01:46.007Z","1.2.0":"2017-06-12T21:50:27.567Z"}}}