{"name":"express-mquery","version":"0.2.1","description":"Expose mongoose query API through HTTP request","main":"index.js","scripts":{"test":"grunt test"},"repository":"https://github.com/lykmapipo/express-mquery","license":"MIT","homepage":"https://github.com/lykmapipo/express-mquery","keywords":["mongoose","mongoose-plugin","query","express","connect","http","blueprint","api","rest","search","filter","find","sort","skip","distinct","limit","query","paginate","middleware","mongodb"],"dependencies":{"async":"^1.5.0","bluebird":"^3.0.6","express-paginate":"^0.1.0","lodash":"^3.10.1"},"devDependencies":{"async":"^1.5.0","body-parser":"^1.14.1","chai":"^3.4.0","express":"^4.13.3","grunt":"^0.4.5","grunt-contrib-jshint":"^0.11.2","grunt-contrib-watch":"^0.6.1","grunt-mocha-test":"^0.12.7","jshint-stylish":"^1.0.1","mocha":"^2.1.0","mongoose":"^4.1.10","sinon":"^1.17.2","sinon-chai":"^2.8.0","supertest":"^1.1.0"},"gitHead":"30d5902693c1c143875d77622de30776763d6106","versions":[{"number":"0.1.0","date":"2015-10-27T09:08:52.808Z"},{"number":"0.2.0","date":"2015-12-09T10:53:39.437Z"},{"number":"0.2.1","date":"2015-12-09T11:13:13.591Z"}],"readme":"express-mquery\n====================\n\n[![Build Status](https://travis-ci.org/lykmapipo/express-mquery.svg?branch=master)](https://travis-ci.org/lykmapipo/express-mquery)\n\nExpose [mongoose](https://github.com/Automattic/mongoose) query API through HTTP request.\n\n## Installation\n```js\n$ npm install --save express-mquery\n```\n\n## Usage\n- plugin `express-mquery` to mongoose\n```js\nvar mquery = require('express-mquery');\nmongoose.plugin(mquery.plugin, {limit:10});\n```\n\n- add `express-mquery` middleware to expess\n```js\nvar mquery = require('express-mquery');\nvar app = require('express');\n...\n//somewhere before your routes definition add\napp.use(mquery.middleware({limit:10, maxLimit:50}));\n...\n\n```\n\n- parse http query string using `express-mquery` to mongoose `Query`\n```js\nvar User = mongoose.model('User');\napp.get('/',function(request, response, next){\n   User\n    .mquery(request);//return valid mongoose query\n    .exec(function(error, models){\n        if(error){\n            next(error);\n        }\n        else{\n            respose.json(models;\n        }\n    }); \n});\n```\nor\n\n- parse http query string and paginate documents\n```js\nUser\n    .paginate(request, function(error, users, pages, total) {\n        if (error) {\n            response.status(500).json({\n                error: error.message\n            });\n        } else {\n            response.json({\n                users: users,\n                pages: pages,\n                total: total\n            });\n        }\n    });\n```\n\n### Usage with request\n```js\nvar request = require('request')\n\nrequest({\n  url: '/customers',\n  qs: {\n    query: JSON.stringify({\n      $or: [{\n        name: '~Another'\n      }, {\n        $and: [{\n          name: '~Product'\n        }, {\n          price: '<=10'\n        }]\n      }],\n      price: 20\n    })\n  }\n});\n```\n\n## Querying\nAll the following parameters `(sort, skip, limit, query, populate, select and distinct)` support the entire mongoose feature set.\n\n>When passing values as objects or arrays in URLs, they must be valid JSON\n\n### Sort\n```js\nGET /customers?sort=name\nGET /customers?sort=-name\nGET /customers?sort={\"name\":1}\nGET /customers?sort={\"name\":0}\n```\n\n### Skip\n```js\nGET /customers?skip=10\n```\n\n### Limit\nOnly overrides `maximum limit option set by the plugin` if the queried limit is lower\n```js\nGET /customers?limit=10\n```\n\n### Query\nSupports all operators `($regex, $gt, $gte, $lt, $lte, $ne, etc.) as well as shorthands: ~, >, >=, <, <=, !=`\n\n```js\nGET /customers?query={\"name\":\"Bob\"}\nGET /customers?query={\"name\":{\"$regex\":\"^(Bob)\"}}\nGET /customers?query={\"name\":\"~^(Bob)\"}\nGET /customers?query={\"age\":{\"$gt\":12}}\nGET /customers?query={\"age\":\">12\"}\nGET /customers?query={\"age\":{\"$gte\":12}}\nGET /customers?query={\"age\":\">=12\"}\nGET /customers?query={\"age\":{\"$lt\":12}}\nGET /customers?query={\"age\":\"<12\"}\nGET /customers?query={\"age\":{\"$lte\":12}}\nGET /customers?query={\"age\":\"<=12\"}\nGET /customers?query={\"age\":{\"$ne\":12}}\nGET /customers?query={\"age\":\"!=12\"}\n```\n\n### Populate\nWorks with create, read and update operations\n\n```js\nGET/POST/PUT /invoices?populate=customer\nGET/POST/PUT /invoices?populate={\"path\":\"customer\"}\nGET/POST/PUT /invoices?populate=[{\"path\":\"customer\"},{\"path\":\"products\"}]\n```\n\n### Select\n`_id` is always returned unless explicitely excluded\n\n```js\nGET /customers?select=name\nGET /customers?select=-name\nGET /customers?select={\"name\":1}\nGET /customers?select={\"name\":0}\n```\n\n### Distinct\n```js\nGET /customers?distinct=name\n```\n\n## TODOS\n- [ ] support geo queries\n\n## Testing\n\n* Clone this repository\n\n* Install `grunt-cli` global\n\n```sh\n$ npm install -g grunt-cli\n```\n\n* Install all development dependencies\n\n```sh\n$ npm install\n```\n\n* Then run test\n\n```sh\n$ npm test\n```\n\n## Contribute\n\nFork this repo and push in your ideas. Do not forget to add a bit of test(s) of what value you adding.\n\n## Licence\n\nCopyright (c) 2015 lykmapipo & Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. \n","created":"2015-10-27T09:08:52.808Z","modified":"2015-12-09T11:13:13.591Z","lastPublisher":{"name":"lykmapipo","email":"lallyelias87@gmail.com"},"owners":[{"name":"lykmapipo","email":"lallyelias87@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"express-mquery","_nodeVersion":"0.12.7","_npmUser":{"name":"lykmapipo","email":"lallyelias87@gmail.com"},"_npmVersion":"2.11.3","_rev":"1-6d818524dbd24b8e5134bf098f8d6c9d","_shasum":"39ffe58cd5296f06379f9ac1900d06513f23fa65","author":{"name":"Lally Elias"},"bugs":{"url":"https://github.com/lykmapipo/express-mquery/issues"},"contributors":[{"name":"lykmapipo"}],"directories":{},"dist-tags":{"latest":"0.2.1"},"dist":{"shasum":"39ffe58cd5296f06379f9ac1900d06513f23fa65","tarball":"http://registry.npmjs.org/express-mquery/-/express-mquery-0.2.1.tgz"},"maintainers":[{"name":"lykmapipo","email":"lallyelias87@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-12-09T11:13:13.591Z","created":"2015-10-27T09:08:52.808Z","0.1.0":"2015-10-27T09:08:52.808Z","0.2.0":"2015-12-09T10:53:39.437Z","0.2.1":"2015-12-09T11:13:13.591Z"}}}