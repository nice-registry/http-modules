{"name":"q-http","version":"0.1.16","description":"Q promise based HTTP client and server interface","homepage":"http://github.com/kriskowal/q-http/","licenses":[{"type":"MIT","url":"http://github.com/kriskowal/q-http/raw/master/LICENSE"}],"main":"q-http.js","dependencies":{"q":"0.8.x","q-io":"0.0.x"},"devDependencies":{"test":"0.4.1"},"scripts":{"test":"node test/all.js"},"repository":"https://github.com/kriskowal/q-http","engines":{"node":">=0.4.0"},"versions":[{"number":"0.0.0","date":"2011-01-07T09:47:40.775Z"},{"number":"0.0.1","date":"2011-01-07T09:47:40.775Z"},{"number":"0.0.3","date":"2011-01-07T09:47:40.775Z"},{"number":"0.0.4","date":"2011-01-07T09:47:40.775Z"},{"number":"0.0.5","date":"2011-01-07T09:47:40.775Z"},{"number":"0.0.7","date":"2011-02-19T00:55:36.420Z"},{"number":"0.1.0","date":"2011-02-23T23:51:25.664Z"},{"number":"0.1.1","date":"2011-06-15T00:07:28.756Z"},{"number":"0.1.2","date":"2011-06-22T20:28:47.360Z"},{"number":"0.1.3","date":"2011-08-31T21:48:20.498Z"},{"number":"0.1.4","date":"2011-09-20T19:12:01.436Z"},{"number":"0.1.5","date":"2011-09-23T20:43:57.455Z"},{"number":"0.1.6","date":"2011-09-27T04:00:58.964Z"},{"number":"0.1.7","date":"2011-09-27T16:50:06.226Z"},{"number":"0.1.8","date":"2011-10-11T23:51:34.588Z"},{"number":"0.1.10","date":"2011-10-31T23:32:47.989Z"},{"number":"0.1.11","date":"2011-11-01T19:52:06.488Z"},{"number":"0.1.12","date":"2012-02-21T07:03:43.406Z"},{"number":"0.1.13","date":"2012-02-28T23:16:03.130Z"},{"number":"0.1.14","date":"2012-06-19T19:55:15.170Z"},{"number":"0.1.15","date":"2012-10-21T04:08:16.487Z"},{"number":"0.1.16","date":"2012-11-07T18:57:04.693Z"}],"readme":"\nProvides a Q promise API for HTTP requests and responses.  This should\nresemble JSGI and its hypothetical inverse, but I haven't pored\nthrough the specification to ensure this.\n\nThe API\n-------\n\n-   ``Server(app)``\n    -   accepts an application, returns a server.\n    -   calls the application function when requests are received.\n        -   if the application returns a response object, sends that\n            response.\n    -   ``listen(port)``\n        -   accepts a port number.\n        -   returns a promise for undefined when the server has begun\n            listening.\n    -   ``stop()``\n        -   returns a promise for undefined when the server has stopped.\n-   ``request(request)``\n    -   accepts a request or a URL string.\n    -   returns a promise for a response.\n-   ``read(request)``\n    -   accepts a request or a URL string.\n    -   returns a promise for the response body as a string provided\n        that the request is successful with a 200 status.\n        -   rejects the promise with the response as the reason for\n            failure if the request fails.\n-   ``normalizeRequest(request)``\n    -   coerces URLs into request objects.\n-   ``normalizeResponse(response)\n    -   coerces strings, arrays, and other objects supporting\n        ``forEach`` into proper response objects.\n    -   passes ``undefined`` through as a signal that a request\n        will not receive a response directly.\n-   request\n    -   ``url`` the full URL of the request as a string\n    -   ``path`` the full path as a string\n    -   ``scriptName`` the routed portion of the path, like ``\"\"`` for\n        ``http://example.com/`` if no routing has occurred.\n    -   ``pathInfo`` the part of the path that remains to be routed,\n        like ``/`` for ``http://example.com`` or ``http://example.com/``\n        if no routing has occurred.\n    -   ``version`` the requested HTTP version as an array of strings.\n    -   ``method`` like ``\"GET\"``\n    -   ``scheme`` like ``\"http:\"``\n    -   ``host`` like ``\"example.com\"``\n    -   ``port`` the port number, like ``80``\n    -   ``remoteHost``\n    -   ``remotePort``\n    -   ``headers``\n        corresponding values, possibly an array for multiple headers\n        of the same name.\n    -   ``body``\n    -   ``node`` the wrapped Node request object\n-   response\n    -   ``status`` the HTTP status code as a number, like ``200``.\n    -   ``headers``\n    -   ``body``\n    -   ``onclose`` is an optional function that this library will call\n        when a response concludes.\n    -   ``node`` the wrapped Node response object.\n-   headers are an object mapping lower-case header-names to\n    corresponding values, possibly an array for multiple headers of the\n    same name, for both requests and responses.\n-   body is a representation of a readable stream, either for the\n    content of a request or a response.\n    -   ``forEach(callback)``\n        -   accepts a ``callback(chunk)`` function\n            -   accepts a chunk as either a string or a ``Buffer``\n            -   returns undefined or a promise for undefined when the\n                chunk has been flushed.\n        -   returns undefined or a promise for undefined when the stream\n            is finished writing.\n        -   the ``forEach`` function for arrays of strings or buffers is\n            sufficient for user-provided bodies\n    -   the ``forEach`` function is the only necessary function for\n        bodies provided to this library.\n    -   in addition to ``forEach``, bodies provided by this library\n        support the entire readable stream interface provided by\n        ``q-io``.\n    -   ``read()``\n        -   returns a promise for the entire body as a string or a\n            buffer.\n-   application\n    -   accepts a request\n    -   accepts Node's responder object as a second argument.\n    -   returns a response, a promise for a response, or nothing if no\n        response should be sent.\n\n# Copyright\n\nCopyright 2009, 2010, 2011 Kristopher Michael Kowal\nMIT License (enclosed)\n\n","starsCount":1,"created":"2011-01-07T09:47:40.775Z","modified":"2012-11-07T18:57:04.693Z","lastPublisher":{"name":"kriskowal","email":"kris.kowal@cixar.com"},"owners":[{"name":"kriskowal","email":"kris.kowal@cixar.com"}],"other":{"_attachments":{},"_id":"q-http","_npmUser":{"name":"kriskowal","email":"kris.kowal@cixar.com"},"_npmVersion":"1.1.62","_rev":"1-40ad729289a85a898ddee62cf7deb571","author":{"name":"Kris Kowal","email":"kris@cixar.com","url":"http://github.com/kriskowal/"},"bugs":{"mail":"kris@cixar.com","url":"http://github.com/kriskowal/q-http/issues"},"directories":{},"dist-tags":{"latest":"0.1.16"},"dist":{"shasum":"f58d4d11a64cc746d266962d8e86611cb1b4655e","tarball":"http://registry.npmjs.org/q-http/-/q-http-0.1.16.tgz"},"maintainers":[{"name":"kriskowal","email":"kris.kowal@cixar.com"}],"readmeFilename":"","time":{"modified":"2012-11-07T18:57:04.693Z","created":"2011-01-07T09:47:40.775Z","0.0.0":"2011-01-07T09:47:40.775Z","0.0.1":"2011-01-07T09:47:40.775Z","0.0.3":"2011-01-07T09:47:40.775Z","0.0.4":"2011-01-07T09:47:40.775Z","0.0.5":"2011-01-07T09:47:40.775Z","0.0.7":"2011-02-19T00:55:36.420Z","0.1.0":"2011-02-23T23:51:25.664Z","0.1.1":"2011-06-15T00:07:28.756Z","0.1.2":"2011-06-22T20:28:47.360Z","0.1.3":"2011-08-31T21:48:20.498Z","0.1.4":"2011-09-20T19:12:01.436Z","0.1.5":"2011-09-23T20:43:57.455Z","0.1.6":"2011-09-27T04:00:58.964Z","0.1.7":"2011-09-27T16:50:06.226Z","0.1.8":"2011-10-11T23:51:34.588Z","0.1.10":"2011-10-31T23:32:47.989Z","0.1.11":"2011-11-01T19:52:06.488Z","0.1.12":"2012-02-21T07:03:43.406Z","0.1.13":"2012-02-28T23:16:03.130Z","0.1.14":"2012-06-19T19:55:15.170Z","0.1.15":"2012-10-21T04:08:16.487Z","0.1.16":"2012-11-07T18:57:04.693Z"},"users":{"nathan":true}}}