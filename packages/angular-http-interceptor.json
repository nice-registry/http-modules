{"name":"angular-http-interceptor","version":"1.0.2","description":"A interceptor module to http calls","main":"bundles/angular-http-interceptor.umd.js","module":"index.js","typings":"index.d.ts","keywords":["angular","angular2","angular 2","interceptor","http"],"license":"MIT","repository":"https://github.com/atende/angular-http-interceptor","homepage":"https://github.com/atende/angular-http-interceptor#readme","peerDependencies":{"@angular/core":">=2.0.0 <5.0.0","@angular/http":">=2.0.0 <5.0.0","rxjs":">=5.0.0-beta.12 <6.0.0","zone.js":">=0.6.26 < 2.0.0"},"scripts":{},"versions":[{"number":"0.1.0","date":"2016-11-13T00:06:35.577Z"},{"number":"0.1.1","date":"2016-11-13T20:38:24.566Z"},{"number":"0.1.2","date":"2016-11-14T17:48:13.226Z"},{"number":"0.1.3","date":"2016-11-15T09:53:18.865Z"},{"number":"0.1.4","date":"2016-11-15T11:35:43.089Z"},{"number":"0.1.5","date":"2016-11-15T16:24:54.683Z"},{"number":"0.2.0","date":"2016-12-10T12:29:03.293Z"},{"number":"0.2.1","date":"2016-12-10T13:45:35.728Z"},{"number":"0.2.2","date":"2016-12-11T15:41:11.462Z"},{"number":"0.2.3","date":"2016-12-12T20:05:09.469Z"},{"number":"0.2.4","date":"2016-12-13T18:23:10.597Z"},{"number":"0.2.5","date":"2016-12-14T13:17:43.324Z"},{"number":"0.2.6","date":"2017-01-09T23:24:25.491Z"},{"number":"0.3.0","date":"2017-05-29T01:09:37.994Z"},{"number":"1.0.0","date":"2017-05-29T01:37:37.339Z"},{"number":"1.0.1","date":"2017-05-29T01:42:35.735Z"},{"number":"1.0.2","date":"2017-05-29T01:54:31.205Z"}],"readme":"# angular-http-interceptor\n\n[![Build Status](https://travis-ci.org/atende/angular-http-interceptor.svg?branch=master)](https://travis-ci.org/atende/angular-http-interceptor)\n\nA Single point of extension for Http Interceptors in angular 2 projects, that keeps compatibility with Angular Http class.\n\nThe big advantage is that you can provide your Interceptors very easilly,\nand create standard interceptors for other projects.\n\nThere are some interceptors build in, that will be moved to the project [https://github.com/atende/angular-spa](https://github.com/atende/angular-spa).\nThis interceptors are disable by default.\n\n**Note**: The Http requests will only execute after __all observables__ in the before interceptors execute. \nThat is a requirement to do things like security token refresh\n\nThis library is used by [https://github.com/atende/angular-spa](https://github.com/atende/angular-spa) which provides other goodies\n\n# How to use\n\nExamples in [https://github.com/atende/angular-spa-example](https://github.com/atende/angular-spa-example)\n\nThere is two ways to provide interceptors, the first override all previous interceptors the later concat then.\n\n## Without override\n\n    @NgModule({\n        imports: [\n            HttpModule,\n            InterceptorModule\n        ],\n        providers: [\n            {\n                provide: Interceptor,\n                useClass: CustomInterceptor\n                multi: true\n            }, {\n                provide: Interceptor,\n                useClass: CustomInterceptor2\n                multi: true\n            }\n        ]\n    })\n\nOverride previous:\n\n    @NgModule({\n        imports: [\n            HttpModule,\n            InterceptorModule.withInterceptors([CustomInterceptor, CustomInterceptor2])\n        ]\n    })\nIf you use `withInterceptors` it will override any interceptor created by other module or library. \n\nThe library [https://github.com/atende/angular-spa](https://github.com/atende/angular-spa) provide a `RefreshTokenHttpInterceptor` \nthat is good to maintain, the `withInterceptors` will override that. You can still provide it again\n\nThe method `InterceptorModule.withInterceptors()` accepts all kinds of providers (ValueProviders, FactoryProviders...) and plain classes. Examples:\n\n    InterceptorModule.withInterceptors([InterceptorClass])\n    InterceptorModule.withInterceptors([{ provide: Interceptor, useClass: InterceptorClass }])\n    InterceptorModule.withInterceptors([{ provide: Interceptor, useExisting: InterceptorClass }])\n    InterceptorModule.withInterceptors([{ provide: Interceptor, useValue: interceptorObject }])\n\nThis give the flexibility you need. The `provide` part is always overrided to a `OpaqueToken`, is irrelevant what you put here, \nbut the typescript compiler will complain if you omit.\n\nMore complete examples:\n\n    import { NgModule } from \"@angular/core\"\n    import { HttpModule } from \"@angular/http\"\n    import { InterceptorModule, Interceptor } from \"angular-http-interceptor\" \n    \n    class MyInterceptor implements Interceptor {\n        before(request: any): Observable<any> {\n            console.info(\"ExampleInterceptor - RequestCreated: \" + request)\n            return Observable.empty()\n        }\n\n        after(res: any) {\n            console.info(\"ExampleInterceptor - RequestEnded: \" + res)\n        }\n\n        error(err: any) {\n            console.error(\"ExampleInterceptor - RequestError: \" + err)\n        }\n    }\n\n    /**\n     * Important: HttpModule must be declared before InterceptorModule.\n     * Because Interceptor module overrides things in HttpModule, and not doing\n     * so, result in the contrary, i.e, HttpModule overriding InterceptorModule.\n     */\n    @NgModule({\n        imports: [ \n            HttpModule,\n            InterceptorModule.withInterceptors([\n                MyInterceptor\n            ]),\n         ]\n    })\n    export class AppModule {\n\n    }\n\n    import { Component, OnInit, OnDestroy} from '@angular/core';\n    import { Http } from \"@angular/http\"\n\n\n    @Component({\n        selector: 'app-root',\n        templateUrl: './app.component.html',\n        styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnInit, OnDestroy {\n        title = 'app works!';\n\n        constructor(private http: Http) {\n\n        }\n        ngOnInit() {\n            // this will be intercepted\n            this.http.get(\"interceptor\").subscribe(r => {\n            console.log(\"Result\")\n            });\n        }\n    }\n\n\nNow every request made with the official @angular/http Http class is intercepted\n\n## Background\n\nI create a subclass of Http client and override it with a custom provider.\n\nThe CustomHttp class, do the job and call the interceptors.\n\nAll interceptors methods are called asynchronously, there is NO guarentee of order of course,\nbut __after method will execute only after the before method finishes__. This is a Important\ndifference between other interceptor libraries!\n\n# Dialog Interceptor\n\nThis interceptor create a notification for any text or html loaded in a ajax call.\n\nIs useful when you need to provide feedback of every actions, and your application is a full \nSingle Page App. For instance the user could save, update, delete and create a new record, \nthe server returns 200 Http Responses with simple texts like 'Record created', this triggers an\nautomatic dialog.\n\nIf the server return's JSON or any other format, it is ignored.\n\nThe default notification use [UIkit](http://getuikit.com) to show messages. You can override that\n\n## Usage\n\n**Default UIkit dialog implementation**\n\nImport DialogInterceptor and DialogService and create a provider for it\n\n    import { DialogInterceptor, DialogService } from \"angular-http-interceptor/interceptors/dialog\"\n\n    @NgModule({\n        declarations: [\n            AppComponent\n        ],\n        imports: [\n            BrowserModule,\n            FormsModule,\n            HttpModule,\n            InterceptorModule.withInterceptors([MyInterceptor, DialogInterceptor])\n        ],\n        bootstrap: [AppComponent]\n        })\n        export class AppModule { }\n\nAdd UIkit to your project, if you use angular-cli you need to update **angular-cli.json** file\n\n     npm install uikit jquery\n\n     \"styles\": [\n        \"styles.css\",\n        \"../node_modules/uikit/dist/css/uikit.min.css\",\n        \"../node_modules/uikit/dist/css/uikit.almost-flat.min.css\",\n        \"../node_modules/uikit/dist/css/components/notify.min.css\"\n      ],\n      \"scripts\": [\n        \"../node_modules/jquery/dist/jquery.min.js\",\n        \"../node_modules/uikit/dist/js/uikit.min.js\",\n        \"../node_modules/uikit/dist/js/components/notify.min.js\"\n      ],\n\n**Overrinding the dialog implementation**\n\nJust provide a custom implementantion for DialogService\n\n    import { DialogInterceptor, DialogService } from \"angular-http-interceptor/interceptors/dialog\"\n\n    class MyDialogService implements DialogService {\n        showMessage(message: string, status: string): void {\n            console.info(message);\n        }\n        showError(message: string, status: string): void {\n            console.error(message);\n        }\n    }\n\n    @NgModule({\n         declarations: [\n             AppComponent\n         ],\n         imports: [\n             BrowserModule,\n             FormsModule,\n             HttpModule,\n             InterceptorModule.withInterceptors([MyInterceptor, DialogInterceptor])\n         ],\n         providers: [\n             {\n                 provide: DialogService,\n                 useClass: MyDialogService\n             }\n         ],\n         bootstrap: [AppComponent]\n         })\n         export class AppModule { }\n\nI recomend that you see the [source code](./src/interceptor/dialog.ts) for DialogInterceptor to know where it is trigged\n\n# AjaxTimeout Interceptor\n\nThis interceptor call a login service if the response is 901. This is a custom response status for timeout expiration.\n\n## Usage\n\n    import { AjaxTimeoutInterceptor, LoginService } from \"angular-http-interceptor/interceptors/ajaxtimeout\";\n\n    class MyLoginService implements LoginService {\n        login() {\n            window.location = \"/sso/login\";\n        }\n        // This method will be called on AjaxTimeout\n        loginExpired() {\n            UIkit.confirm(\"Your session has expired, do you want login?\", () => {\n                this.login();\n            })\n            \n        }\n    }\n\n    @NgModule({\n         declarations: [\n             AppComponent\n         ],\n         imports: [\n             BrowserModule,\n             FormsModule,\n             HttpModule,\n             InterceptorModule.withInterceptors([MyLoginService])\n         ],\n         providers: [\n            {\n                 provide: LoginService,\n                 useClass: MyLoginService\n            }\n         ],\n         bootstrap: [AppComponent]\n         })\n         export class AppModule { }\n\n","created":"2016-11-13T00:06:35.577Z","modified":"2017-05-29T01:54:31.205Z","lastPublisher":{"name":"giovannicandido","email":"giovannicandido@me.com"},"owners":[{"name":"giovannicandido","email":"giovannicandido@me.com"}],"other":{"_attachments":{},"_from":".","_id":"angular-http-interceptor","_nodeVersion":"6.10.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/angular-http-interceptor-1.0.2.tgz_1496022871078_0.5207516385708004"},"_npmUser":{"name":"giovannicandido","email":"giovannicandido@me.com"},"_npmVersion":"4.2.0","_rev":"17-9cebe52b328a349bf68852504dca1312","_shasum":"955af6326cc073820ce9d0ce1b8d22bb44fc74e8","author":{"name":"Giovanni Silva"},"bugs":{"url":"https://github.com/atende/angular-http-interceptor/issues"},"directories":{},"dist-tags":{"latest":"1.0.2"},"dist":{"shasum":"955af6326cc073820ce9d0ce1b8d22bb44fc74e8","tarball":"https://registry.npmjs.org/angular-http-interceptor/-/angular-http-interceptor-1.0.2.tgz"},"maintainers":[{"name":"giovannicandido","email":"giovannicandido@me.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-29T01:54:31.205Z","created":"2016-11-13T00:06:35.577Z","0.1.0":"2016-11-13T00:06:35.577Z","0.1.1":"2016-11-13T20:38:24.566Z","0.1.2":"2016-11-14T17:48:13.226Z","0.1.3":"2016-11-15T09:53:18.865Z","0.1.4":"2016-11-15T11:35:43.089Z","0.1.5":"2016-11-15T16:24:54.683Z","0.2.0":"2016-12-10T12:29:03.293Z","0.2.1":"2016-12-10T13:45:35.728Z","0.2.2":"2016-12-11T15:41:11.462Z","0.2.3":"2016-12-12T20:05:09.469Z","0.2.4":"2016-12-13T18:23:10.597Z","0.2.5":"2016-12-14T13:17:43.324Z","0.2.6":"2017-01-09T23:24:25.491Z","0.3.0":"2017-05-29T01:09:37.994Z","1.0.0":"2017-05-29T01:37:37.339Z","1.0.1":"2017-05-29T01:42:35.735Z","1.0.2":"2017-05-29T01:54:31.205Z"}}}