{"name":"throttled-request","version":"0.1.1","description":"Node.js module to easily throttle HTTP requests","scripts":{"test":"mocha"},"main":"./lib/index.js","repository":"https://github.com/alltherooms/throttled-request","keywords":["request","throttle","throttled","throttling"],"dependencies":{},"devDependencies":{"async":"^0.9.0","chai":"^1.10.0","chai-spies":"^0.5.1","mocha":"^2.1.0","nock":"^0.52.4","request":"^2.51.0","sinon":"^1.12.2"},"gitHead":"631e8fd286d90c57d8c4128c7bfb718fa184e9b1","homepage":"https://github.com/alltherooms/throttled-request","readme":"#throttled-request\nNode.js module to easily throttle HTTP requests.\n\n##How it works\nThis tool was made to work with the popular [request](https://github.com/request/request) module, which simplifies the HTTP requests in Node.js. Therefore, this must be consireded a wrapper around **request**.\n\nFirst, you instantiate a **throttledRequest** instance by passing a **request** function, which is going to act as the requester - you still need to `$npm install request` independently. - After this you can configure the throttle rate *(number of requests / time)*, then you're able to use **throttled-request** to perform your HTTP requests.\n\n##Installation\nInstall it using [npm](https://www.npmjs.com/)\n```\n$ npm install throttled-request\n```\n\n##Usage\nFirst, you must set it up:\n```javascript\nvar request = require('request')\n,   throttledRequest = require('throttled-request')(request);\n\nthrottledRequest.configure({\n  requests: 5,\n  milliseconds: 1000\n});//This will throttle the requests so no more than 5 are made every second\n```\n\nOr you may use a configurable throttle by providing a function that returns the next delay, in milliseconds:\n```javascript\nvar request = require('request')\n,   throttledRequest = require('throttled-request')(request);\n\nthrottledRequest.configure({\n  requests: 1,\n  milliseconds: function() {\n    var minSeconds = 5, maxSeconds = 15;\n    return Math.floor((Math.random() * (maxSeconds - minSeconds) + minSeconds) * 1000);  // in milliseconds\n  }\n});//This will throttle the requests so no more than 1 is made every 5 to 15 seconds (random delay)\n```\n\nThen you can use `throttledRequest` just as you use [request](https://github.com/request/request): passing a callback, or as a stream.\n\n###Passing a callback\n```javascript\nthrottledRequest(options, function (error, response, body) {\n    if (error) {\n        //Handle request error\n    }\n    //Do what you need with `response` and `body`\n});\n```\n\n###As a stream\n```javascript\nthrottledRequest(options).pipe(someWriteStream);\n```\n\n##The `request` event\n`throttledRequest` emits a `request` event just after each actual request is made.\n\n##Full example\n```javascript\nvar request = require('request')\n,   throttledRequest = require('throttled-request')(request)\n,   startedAt = Date.now();\n\nthrottledRequest.configure({\n  requests: 2,\n  milliseconds: 1000\n});\n\nthrottledRequest.on('request', function () {\n  console.log('Making a request. Elapsed time: %d ms', Date.now() - startedAt);\n});\n\n//Throttle 10 requests in parallel\nfor (var i = 0; i < 10; i++) {\n  throttledRequest('https://www.google.com/')\n    .on('response', function () {\n      console.log('Got response. Elapsed time: %d ms', Date.now() - startedAt);\n    });\n}\n\n/*Output:\nMaking a request. Elapsed time: 3 ms\nMaking a request. Elapsed time: 5 ms\nGot response. Elapsed time: 488 ms\nGot response. Elapsed time: 509 ms\nMaking a request. Elapsed time: 1002 ms\nMaking a request. Elapsed time: 1003 ms\nGot response. Elapsed time: 1450 ms\nGot response. Elapsed time: 1513 ms\nMaking a request. Elapsed time: 2003 ms\nMaking a request. Elapsed time: 2003 ms\nGot response. Elapsed time: 2431 ms\nGot response. Elapsed time: 2470 ms\nMaking a request. Elapsed time: 3004 ms\nMaking a request. Elapsed time: 3005 ms\nGot response. Elapsed time: 3446 ms\nGot response. Elapsed time: 3451 ms\nMaking a request. Elapsed time: 4007 ms\nMaking a request. Elapsed time: 4007 ms\nGot response. Elapsed time: 4440 ms\nGot response. Elapsed time: 4783 ms\n*/\n```\n\n##Can I use everything that comes with **request**?\nNo, there's some things you can't use. For example, the shortcut functions `.get`, `.post`, `.put`, etc. are not available. If you'd like to have them, this is a great opportunity to contribute!\n\n##Running tests\nRun the tests with npm\n```\n$ npm test\n```\n\n##License (MIT)\n","versions":[{"number":"0.0.0","date":"2013-01-27T21:36:00.914Z"},{"number":"0.1.0","date":"2015-01-07T17:21:07.144Z"},{"number":"0.1.1","date":"2015-01-20T22:47:19.880Z"}],"created":"2013-01-27T21:35:59.244Z","modified":"2015-01-20T22:47:19.880Z","lastPublisher":{"name":"danypype","email":"danypype@gmail.com"},"owners":[{"name":"danypype","email":"danypype@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"throttled-request","_nodeVersion":"0.10.32","_npmUser":{"name":"danypype","email":"danypype@gmail.com"},"_npmVersion":"2.0.2","_rev":"1-b12cf3fd3205e35e693ff1007bdb3d7d","_shasum":"4146b70b77a5aeca33c46332cf13eb9c791e971b","author":{"name":"Daniel LÃ³pez","email":"danypype@gmail.com"},"bugs":{"url":"https://github.com/alltherooms/throttled-request/issues"},"directories":{},"dist-tags":{"latest":"0.1.1"},"dist":{"shasum":"4146b70b77a5aeca33c46332cf13eb9c791e971b","tarball":"http://registry.npmjs.org/throttled-request/-/throttled-request-0.1.1.tgz"},"maintainers":[{"name":"danypype","email":"danypype@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-01-20T22:47:19.880Z","created":"2013-01-27T21:35:59.244Z","0.0.0":"2013-01-27T21:36:00.914Z","0.1.0":"2015-01-07T17:21:07.144Z","0.1.1":"2015-01-20T22:47:19.880Z"}}}