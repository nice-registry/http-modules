{"name":"tart-transport-http","version":"0.1.0","description":"HTTP transport implementation for tart","scripts":{"inject-examples":"node scripts/injectExamples.js","readme":"node examples/readme.js","test":"node scripts/test.js"},"main":"index.js","devDependencies":{"nodeunit":"0.8.2","tart-tracing":"0.1.5","tart":"0.1.5"},"repository":"https://github.com/tristanls/tart-transport-http","keywords":["tart","actor","transport","http"],"license":"MIT","readme":"# tart-transport-http\n\n_Stability: 1 - [Experimental](https://github.com/tristanls/stability-index#stability-1---experimental)_\n\n[![NPM version](https://badge.fury.io/js/tart-transport-http.png)](http://npmjs.org/package/tart-transport-http)\n\nHTTP transport implementation for [Tiny Actor Run-Time in JavaScript](https://github.com/organix/tartjs).\n\n## Contributors\n\n[@dalnefre](https://github.com/dalnefre), [@tristanls](https://github.com/tristanls)\n\n## Overview\n\nAn implementation of a HTTP transport for [Tiny Actor Run-Time in JavaScript](https://github.com/organix/tartjs).\n\n  * [Usage](#usage)\n  * [Tests](#tests)\n  * [Documentation](#documentation)\n  * [Sources](#sources)\n\n## Usage\n\nTo run the below example run:\n\n    npm run readme\n\n```javascript\n\"use strict\";\n\nvar http = require('http');\nvar tart = require('tart');\nvar transport = require('../index.js');\n\nvar sponsor = tart.minimal();\n\nvar send = sponsor(transport.sendBeh);\n\nvar receivedMessageCount = 0;\nvar receptionist = sponsor(function (message) {\n    console.log('received message:', message);\n    receivedMessageCount++;\n    if (receivedMessageCount >= 2) {\n        close(); // close listening server\n    }\n});\n\nvar serverCapabilities = transport.server(receptionist);\nvar close = sponsor(serverCapabilities.closeBeh);\nvar listen = sponsor(serverCapabilities.listenBeh);\n\nvar fail = sponsor(function (error) {\n    console.dir(error);\n});\n\nvar listenAck = sponsor(function listenAckBeh(message) {\n    console.log('transport listening on http://' + message.host + ':' + message.port);\n    send({\n        address: 'http://localhost:7847/#t5YM5nxnJ/xkPTo3gtHEyLdwMRFIwyJOv5kvcFs+FoMGdyoDNgSLolq0',\n        content: '{\"some\":{\"json\":\"content\"},\"foo\":true}',\n        fail: fail,\n        ok: function () {\n            console.log('foo sent');\n        }\n    });\n    send({\n        address: 'http://localhost:7847/#I0InGCVn0ApX0YBnF5+JFMheKOajHkaTrNthYRI2hOj4GrM5IaWO1Cv0',\n        content: '{\"some\":{\"json\":\"content\"},\"bar\":true}',\n        fail: fail,\n        ok: function () {\n            console.log('bar sent');\n        }\n    });    \n});\n\nlisten({\n    host: 'localhost', \n    port: 7847, \n    ok: listenAck,\n    fail: fail\n});\n```\n\n## Tests\n\n    npm test\n\n## Documentation\n\n**Public API**\n\n  * [transport.sendBeh](#transportsendbeh)\n  * [transport.server(receptionist)](#transportserverreceptionist)\n  * [serverCapabilities.closeBeh](#servercapabilitiesclosebeh)\n  * [serverCapabilities.listenBeh](#servercapabilitieslistenbeh)\n\n### transport.sendBeh\n\nActor behavior that will attempt to send messages over TLS.\n\nMessage format:\n\n  * `address`: _String_ HTTP address in URI format. Scheme, host, and port are required. Framgment is optional but usually necessary. For example: `http://localhost:7847/#t5YM5nxnJ/xkPTo...`. \n  * `content`: _String_ JSON content to be sent.\n  * `fail`: _Actor_ `function (error) {}` _(Default: undefined)_ Optional actor to report `error` (if any).\n  * `ok`: _Actor_ `function () {}` _(Default: undefined)_ Optional actor to report successful send to the destination.\n\n```javascript\nvar send = sponsor(transport.sendBeh);\nsend({\n    address: 'tcp://localhost:7847/#ZkiLrAwGX7N1eeOXXMAeoVp7vsYJKeISjfT5fESfkRiZOIpkPx1bAS8y', \n    content: '{\"some\":{\"json\":\"content\"}}'\n});\n```\n\n### transport.server(receptionist)\n\n  * `receptionist`: _Actor_ `function (message) {}` Actor to forward traffic received by this server in `{address: <URI>, contents: <json>}` format.\n  * Return: _Object_ An object containing behaviors for listen and close capabilities.\n    * `closeBeh`: [serverCapabilities.closeBeh](#servercapabilitiesclosebeh)\n    * `listenBeh`: [serverCapabilities.listenBeh](#servercapabilitieslistenbeh)\n\nCreates an entangled pair of capabilities that will control a single HTTP server.\n\n### serverCapabilities.closeBeh\n\nActor behavior that will close a listening server.\n\nMessage is an `ack` _Actor_ `function () {}`, an actor that will be sent an empty message once the server closes.\n\n```javascript\nvar serverCapabilities = transport.server(receptionist);\nvar close = sponsor(serverCapabilities.closeBeh);\nclose(sponsor(function ack() {\n    console.log('acked close'); \n});\n```\n\n### serverCapabilities.listenBeh\n\nActor behavior that will create a new listening HTTP server.\n\nMessage format:\n\n  * `host`: _String_ HTTP host to listen on.\n  * `port`: _Number_ HTTP port to listen on.\n  * `ok`: _Actor_ `function (message) {}` Optional actor to receive acknowledgment once the server is listening.\n  * `fail`: _Actor_ `function (error) {}` Optional actor to receive any errors when starting the HTTP transport.\n\n```javascript\nvar serverCapabilities = transport.server(receptionist);\nvar listen = sponsor(serverCapabilities.listenBeh);\nlisten({\n    host: 'localhost',\n    port: 7847,\n    ok: sponsor(function listenAckBeh(message) {\n        console.log('transport listening on tcp://' + message.host + ':' + message.port);\n    }),\n    fail: sponsor(function failBeh(message) {\n        console.error(message);\n    })\n});\n```\n\n## Sources\n\n  * [Tiny Actor Run-Time (JavaScript)](https://github.com/organix/tartjs)","homepage":"https://github.com/tristanls/tart-transport-http","versions":[{"number":"0.1.0","date":"2013-12-29T22:09:08.339Z"}],"created":"2013-12-29T22:09:08.339Z","modified":"2013-12-29T22:09:08.339Z","lastPublisher":{"name":"tristanls","email":"tristan.slominski@gmail.com"},"owners":[{"name":"tristanls","email":"tristan.slominski@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"tart-transport-http","_npmUser":{"name":"tristanls","email":"tristan.slominski@gmail.com"},"_npmVersion":"1.3.21","_rev":"1-c351bade038f00199718a219bf250063","bugs":{"url":"https://github.com/tristanls/tart-transport-http/issues"},"contributors":[{"name":"Dale Schumacher","email":"dale.schumacher@gmail.com"},{"name":"Tristan Slominski","email":"tristan.slominski@gmail.com"}],"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"45261cdc7823bf24f745c0029114311585681e6e","tarball":"http://registry.npmjs.org/tart-transport-http/-/tart-transport-http-0.1.0.tgz"},"maintainers":[{"name":"tristanls","email":"tristan.slominski@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2013-12-29T22:09:08.339Z","created":"2013-12-29T22:09:08.339Z","0.1.0":"2013-12-29T22:09:08.339Z"}}}