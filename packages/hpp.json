{"name":"hpp","version":"0.2.2","description":"Express middleware to protect against HTTP Parameter Pollution attacks","keywords":["hpp","http","parameter","pollution","attack","security"],"homepage":"https://github.com/analog-nico/hpp","license":"ISC","main":"./lib/index.js","repository":"https://github.com/analog-nico/hpp","scripts":{"test":"gulp ci"},"dependencies":{"lodash":"^4.7.0","type-is":"^1.6.12"},"engines":{"node":">=0.10.0"},"devDependencies":{"body-parser":"^1.15.0","chai":"^3.5.0","chalk":"^1.1.3","express":"^4.13.4","gulp":"^3.9.1","gulp-coveralls":"^0.1.4","gulp-istanbul":"^0.10.3","gulp-jshint":"^2.0.0","gulp-mocha":"^2.2.0","jshint":"^2.9.1","jshint-stylish":"^2.1.0","present":"0.0.6","request-promise":"^2.0.1","rimraf":"^2.5.2","run-sequence":"^1.1.5"},"gitHead":"b8dcef86c0cd52bc2f98e762b9a9554aec788600","versions":[{"number":"0.0.1","date":"2015-03-06T01:27:49.171Z"},{"number":"0.1.0","date":"2015-04-13T02:37:22.798Z"},{"number":"0.1.1","date":"2015-04-16T16:54:09.847Z"},{"number":"0.1.2","date":"2015-05-18T19:27:42.645Z"},{"number":"0.2.0","date":"2015-05-24T19:49:25.462Z"},{"number":"0.2.1","date":"2016-04-04T06:38:57.289Z"},{"number":"0.2.2","date":"2017-04-12T00:38:11.076Z"}],"readme":"# HPP\n\n[Express](http://expressjs.com) middleware to **protect against HTTP Parameter Pollution attacks**\n\n[![Build Status](https://travis-ci.org/analog-nico/hpp.svg?branch=master)](https://travis-ci.org/analog-nico/hpp) [![Coverage Status](https://coveralls.io/repos/analog-nico/hpp/badge.png)](https://coveralls.io/r/analog-nico/hpp?branch=master) [![Dependency Status](https://david-dm.org/analog-nico/hpp.svg)](https://david-dm.org/analog-nico/hpp)\n\n## Why?\n\nLet [Chetan Karande's slides](https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=48) do the explaining:\n\n[![Slide 48](img/slide48.jpg)](https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=48)\n[![Slide 49](img/slide49.jpg)](https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=49)\n[![Slide 50](img/slide50.jpg)](https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=50)\n[![Slide 54](img/slide54.jpg)](https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=54)\n\n...and exploits may allow [bypassing the input validation](https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=57) or even result in [denial of service](https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=55).\n\n## And HPP solves this how exactly?\n\nHPP puts array parameters in `req.query` and/or `req.body` aside and just selects the last parameter value. You add the middleware and you are done.\n\n## Installation\n\n[![NPM Stats](https://nodei.co/npm/hpp.png?downloads=true)](https://npmjs.org/package/hpp)\n\nThis is a module for node.js and io.js and is installed via npm:\n\n``` bash\nnpm install hpp --save\n```\n\n## Getting Started\n\nAdd the HPP middleware like this:\n\n``` js\n// ...\nvar hpp = require('hpp');\n\n// ...\napp.use(bodyParser.urlencoded()); // Make sure the body is parsed beforehand.\n\napp.use(hpp()); // <- THIS IS THE NEW LINE\n\n// Add your own middlewares afterwards, e.g.:\napp.get('/search', function (req, res, next) { /* ... */ });\n// They are safe from HTTP Parameter Pollution now.\n```\n\n## Details about `req.query`\n\nBy default all top-level parameters in `req.query` are checked for being an array. If a parameter is an array the array is moved to `req.queryPolluted` and `req.query` is assigned the last value of the array:\n\n```\nGET /search?firstname=John&firstname=Alice&lastname=Doe\n\n=>\n\nreq: {\n    query: {\n        firstname: 'Alice',\n        lastname: 'Doe',\n    },\n    queryPolluted: {\n        firstname: [ 'John', 'Alice' ]\n    }\n}\n```\n\nChecking `req.query` may be turned off by using `app.use(hpp({ checkQuery: false }))`.\n\n## Details about `req.body`\n\n**Checking `req.body` is only done for requests with an urlencoded body. Not for json nor multipart bodies.**\n\nBy default all top-level parameters in `req.body` are checked for being an array. If a parameter is an array the array is moved to `req.bodyPolluted` and `req.body` is assigned the last value of the array:\n\n```\nPOST firstname=John&firstname=Alice&lastname=Doe\n\n=>\n\nreq: {\n    body: {\n        firstname: 'Alice',\n        lastname: 'Doe',\n    },\n    bodyPolluted: {\n        firstname: [ 'John', 'Alice' ]\n    }\n}\n```\n\nChecking `req.body` may be turned off by using `app.use(hpp({ checkBody: false }))`.\n\n## Whitelisting Specific Parameters\n\nThe `whitelist` option allows to specify parameters that shall not be touched by HPP. Usually specific parameters of a certain route are intentionally used as arrays. For that use the following approach that involves multiple HPP middlewares:\n\n``` js\n// Secure all routes at first.\n// You could add separate HPP middlewares to each route individually but the day will come when you forget to secure a new route.\napp.use(hpp());\n\n// Add a second HPP middleware to apply the whitelist only to this route.\napp.use('/search', hpp({ whitelist: [ 'filter' ] }));\n```\n\n```\nGET /search?package=Helmet&package=HPP&filter=nodejs&filter=iojs\n\n=>\n\nreq: {\n    query: {\n        package: 'HPP',\n        filter:  [ 'nodejs', 'iojs' ], // Still an array\n    },\n    queryPolluted: {\n        package: [ 'Helmet', 'HPP' ]\n    }\n}\n```\n\nThe whitelist works for both `req.query` and `req.body`.\n\n## Performance\n\nHPP was written with performance in mind since it eats CPU cycles for each request.\n\nA [performance test](test/spec/perf.js) that includes two HPP middlewares plus a whitelist simulates an already demanding use case. On my Mac Book Air it measures **0.002ms to process a single request**.\n\n## Contributing\n\nTo set up your development environment for HPP:\n\n1. Clone this repo to your desktop,\n2. in the shell `cd` to the main folder,\n3. hit `npm install`,\n4. hit `npm install gulp -g` if you haven't installed gulp globally yet, and\n5. run `gulp dev`. (Or run `node ./node_modules/.bin/gulp dev` if you don't want to install gulp globally.)\n\n`gulp dev` watches all source files and if you save some changes it will lint the code and execute all tests. The test coverage report can be viewed from `./coverage/lcov-report/index.html`.\n\nIf you want to debug a test you should use `gulp test-without-coverage` to run all tests without obscuring the code by the test coverage instrumentation.\n\n## Change History\n\n- v0.2.2 (2017-04-11)\n    - Requiring individual lodash functions for faster boot time and lower memory footprint\n      *(Thanks to @mschipperheyn for suggesting this in [issue #6](https://github.com/analog-nico/hpp/issues/6))*\n- v0.2.1 (2016-04-03)\n    - Added node v4 and v5 to CI build\n    - Removed node v0.11 from CI build\n    - Updated dependencies\n- v0.2.0 (2015-05-25)\n    - Bumped version to 0.2 to properly follow semver since the whitelist was added in v0.1.2\n    - For better intuitiveness the last instead of the first value of an array is selected \n    - Refactoring to improve readability and performance\n      *(Thanks to @le0nik for [pull request #2](https://github.com/analog-nico/hpp/pull/2))*\n    - Updated dependencies\n      *(Thanks to @maxrimue for [pull request #3](https://github.com/analog-nico/hpp/pull/3))*\n- v0.1.2 (2015-05-18)\n    - Added [whitelist feature](#whitelisting-specific-parameters)\n      *(Thanks to @avaly for suggesting this in [issue #1](https://github.com/analog-nico/hpp/issues/1))*\n\t- Updated dependencies\n- v0.1.1 (2015-04-16)\n    - Removed two closures\n    - Updated lodash\n- v0.1.0 (2015-04-12)\n    - Updated dependencies\n    - Use in production satisfactory\n- v0.0.1 (2015-03-05)\n    - Initial version\n\n## License (ISC)\n\nIn case you never heard about the [ISC license](http://en.wikipedia.org/wiki/ISC_license) it is functionally equivalent to the MIT license.\n\nSee the [LICENSE file](LICENSE) for details.\n","starsCount":12,"created":"2015-03-06T01:27:49.171Z","modified":"2017-05-28T23:00:01.161Z","lastPublisher":{"name":"analog-nico","email":"nicolai.kamenzky@testrails.org"},"owners":[{"name":"analog-nico","email":"nicolai.kamenzky@testrails.org"}],"other":{"_attachments":{},"_from":".","_id":"hpp","_nodeVersion":"4.8.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/hpp-0.2.2.tgz_1491957489151_0.8869520945008844"},"_npmUser":{"name":"analog-nico","email":"nicolai.kamenzky@testrails.org"},"_npmVersion":"2.15.11","_rev":"4-bd7d415ec6c4bfb00df0b1b0ca858b54","_shasum":"0ec5f77472049a74361d85ba2b88e2470a4356f8","author":{"name":"Nicolai Kamenzky","url":"https://github.com/analog-nico"},"bugs":{"url":"https://github.com/analog-nico/hpp/issues"},"directories":{},"dist-tags":{"latest":"0.2.2"},"dist":{"shasum":"0ec5f77472049a74361d85ba2b88e2470a4356f8","tarball":"https://registry.npmjs.org/hpp/-/hpp-0.2.2.tgz"},"maintainers":[{"name":"analog-nico","email":"nicolai.kamenzky@testrails.org"}],"readmeFilename":"README.md","time":{"modified":"2017-05-28T23:00:01.161Z","created":"2015-03-06T01:27:49.171Z","0.0.1":"2015-03-06T01:27:49.171Z","0.1.0":"2015-04-13T02:37:22.798Z","0.1.1":"2015-04-16T16:54:09.847Z","0.1.2":"2015-05-18T19:27:42.645Z","0.2.0":"2015-05-24T19:49:25.462Z","0.2.1":"2016-04-04T06:38:57.289Z","0.2.2":"2017-04-12T00:38:11.076Z"},"users":{"itonyyo":true,"tarcio":true,"cilindrox":true,"gochomugo":true,"markthethomas":true,"grantcarthew":true,"dpjayasekara":true,"danielbankhead":true,"hckhanh":true,"esperluette":true,"tiggerhyun":true,"jmsherry":true}}}