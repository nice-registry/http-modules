{"name":"kettle","description":"Declarative IoC-based framework for HTTP and WebSockets servers on node.js based on express and ws","version":"1.6.0","scripts":{"test":"node tests/all-tests.js"},"homepage":"http://wiki.fluidproject.org/display/fluid/Kettle","dependencies":{"express":"4.15.3","body-parser":"1.17.2","cookie-parser":"1.4.3","express-session":"1.15.3","serve-static":"1.12.3","ws":"3.0.0","infusion":"3.0.0-dev.20170322T234120Z.278de35","jsonlint":"1.6.2","resolve":"1.3.3","path-to-regexp":"1.7.0","json5":"0.5.1"},"devDependencies":{"fluid-grunt-eslint":"18.1.2","eslint-config-fluid":"1.1.0","gpii-express":"git://github.com/GPII/gpii-express.git#58a2f3fc1699a4e14735673d3c43edde7b705666","gpii-pouchdb":"git://github.com/GPII/gpii-pouchdb.git#a6a3322fdf059b8a1109f0763454b3f7d8839105","grunt":"1.0.1","grunt-jsonlint":"1.1.0","fluid-grunt-json5lint":"1.0.0","grunt-shell":"2.1.0","node-jqunit":"1.1.4"},"license":"BSD-3-Clause","keywords":["infusion","framework","application","fluid","IoC","express","Inversion of Control","MVC","evented"],"repository":"https://github.com/fluid-project/kettle","main":"./kettle.js","engines":{"node":">=4.5.0"},"gitHead":"743d9b2cedb0105bfc7dca9032cd7097fd65a0c5","versions":[{"number":"0.0.1","date":"2011-08-28T15:43:39.862Z"},{"number":"1.0.0-dev.20151203T203010Z.ea93d24","date":"2015-12-08T00:01:38.145Z"},{"number":"1.0.0-dev.20160525T225235Z.938ffbd","date":"2016-05-25T22:57:30.408Z"},{"number":"1.0.0","date":"2016-05-26T01:08:57.997Z"},{"number":"1.0.1","date":"2016-07-15T20:15:27.279Z"},{"number":"1.1.0","date":"2016-07-15T20:19:21.677Z"},{"number":"1.1.1","date":"2016-11-01T03:14:03.964Z"},{"number":"1.2.0","date":"2016-11-03T17:32:35.744Z"},{"number":"1.2.1","date":"2016-11-14T03:07:20.782Z"},{"number":"1.2.2","date":"2016-11-23T16:21:18.890Z"},{"number":"1.2.2-dev.20170103T231035Z.becc1e1","date":"2017-01-05T18:54:40.359Z"},{"number":"1.3.0","date":"2017-01-06T01:04:21.573Z"},{"number":"1.3.1","date":"2017-01-27T15:19:10.591Z"},{"number":"1.3.2","date":"2017-01-31T16:37:34.401Z"},{"number":"1.4.0","date":"2017-02-18T03:01:04.718Z"},{"number":"1.4.1","date":"2017-04-19T13:18:40.452Z"},{"number":"1.5.0","date":"2017-05-01T22:22:11.408Z"},{"number":"1.6.0","date":"2017-06-16T14:48:28.315Z"}],"readme":"# Kettle\n\nKettle is an integration technology which promotes the expression of servers handling HTTP and WebSockets endpoints. \nWith a few exceptions, Kettle implements no primary functionality of its own, but aggregates the facilities of\n[express](http://expressjs.com/) and [ws](https://github.com/websockets/ws), as well as middleware held in the wider [pillarjs](https://github.com/pillarjs)\n\"Bring your own HTTP Framework Framework\" ecosystem. Kettle applications can easily incorporate any express-standard middleware, as well as coexisting with standard express apps targeted at the same\nnode.js <a href=\"https://nodejs.org/api/http.html#http_class_http_server\"><code>http.Server</code></a>. Since Kettle applications are expressed declaratively, in the JSON format encoding [Infusion](https://github.com/fluid-project/infusion)'s component trees, it is possible to adapt existing\napplications easily, as well as inserting middleware and new handlers anywhere in the pipeline without modifying the original application's code. This makes\nKettle suitable for uses where application functionality needs to be deployed flexibly in a variety of different configurations.\n\nIn fact, Kettle's dependency on express itself is minimal, since the entirety of the Kettle request handling pipeline is packaged\nas a single piece of express-compatible middleware – Kettle could be deployed against any other consumer of middleware or even a raw node.js HTTP server.\n\n# Contents of this repository\n\n## Core Kettle implementation\n\nThis is packaged as Infusion [grades](http://docs.fluidproject.org/infusion/development/ComponentGrades.html) derived from [`kettle.server`](./docs/Servers.md#kettle.server), \n[`kettle.request`](./docs/RequestHandlersAndApps.md#kettle.request) and [`kettle.app`](./docs/RequestHandlersAndApps.md#kettle.app). The first two of these exist in variants specialized both for plain\nHTTP (with the `.http` suffix) and for WebSockets (with the `.ws` suffix) – `kettle.app` does not specialize.\n\n## Contents - Testing\n\nAs well as the integration technology implementing Kettle itself, this repository also contains functionality helpful for testing HTTP and WebSockets\nservers written in arbitrary technologies. This is accessed by running `kettle.loadTestingSupport()` after having called `require(\"kettle\")`. Kettle testing \nsupport allows HTTP and WebSockets client requests to be packaged as [Infusion](https://github.com/fluid-project/infusion) components, suitable for use with Infusion's\n[IoC Testing Framework](http://docs.fluidproject.org/infusion/development/IoCTestingFramework.html). Any user of Kettle's testing support needs to have [node-jqunit](https://github.com/fluid-project/node-jqunit)\nregistered as a member of their own project's `devDependencies` in their own package.json.\n\nKettle runs on [node.js](https://nodejs.org) version 4.x (see [package.json](package.json) for current dependency profile).\n\n## Contents - DataSources\n\nThe Kettle repository also contains a few implementations of the simple `DataSource` contract for read/write access to data with a simple semantic (broadly the same as that\nencoded in [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) although the current DataSource semantic does not provide explicitly for deletion). See the documentation section\non [DataSources](./docs/DataSources.md) for details of this contract, the available implementations and how to use them.\n\nThis repository contains DataSource implementations suitable for HTTP endpoints (with a particular variety specialised for accessing CouchDB databases with CRUDlike semantics) as well as the filesystem, with\nan emphasis on JSON payloads.\n\n# Getting Started and Community\n\n## Installation instructions\n\nFirstly, install node and npm by running a standard installer from [node.js](https://nodejs.org). Clone this repository and then run `npm install`.\n\n## Issue Tracking\n\nIssue tracking is at http://issues.fluidproject.org/browse/KETTLE .\n\n## IRC\n\nVisit `#fluid-work` on Freenode – community resources are linked at [Fluid's IRC Channels](https://wiki.fluidproject.org/display/fluid/IRC+Channel).\n\n## Mailing list\n\nContact us on the [fluid-work](https://wiki.fluidproject.org/display/fluid/Mailing+Lists) mailing list with any problems or comments.\n\n## Uses of Kettle and related projects\n\nThe primary user of Kettle is the [GPII](http://gpii.net/)'s autopersonalisation infrastructure, held at [GPII/universal](https://github.com/GPII/universal). Kettle is used\nto provide a flexible means of deploying the GPII's \"Flow Manager\" and related components distributed across multiple local and remote installations.\n\nA closely related project to Kettle is [gpii-express](https://github.com/GPII/gpii-express) which is used in other GPII projects such as the [terms registry](https://github.com/GPII/common-terms-registry) and\n[unified listing](https://github.com/GPII/ul-api). This is similar in architecture to Kettle (wrapping express primitives such as servers and requests into dynamically constructed Infusion components) \nbut slightly different in emphasis – \n\n* gpii-express allows independently mounted application units with nested routing, in the Express 4.x style – whereas Kettle is currently limited to flat Express 3.x-style routing\n* Kettle incorporates support for WebSockets endpoints, whereas gpii-express does not\n* Kettle incorporates support for DataSources (see [DataSources](./docs/DataSources.md) )\n\nThe request handling architecture for gpii-express and Kettle is quite similar and the projects will probably converge over time. gpii-express currently already depends on Kettle to get access to its\nHTTP [testing](./docs/KettleTestingFramework.md) support.\n\n# Documentation\n\nDocumentation and sample code for working with Kettle is contained in the [docs](./docs) directory. Kettle is based on Fluid [Infusion](http://fluidproject.org/infusion.html)'s\n[component model](http://docs.fluidproject.org/infusion/development/HowToUseInfusionIoC.html). If you aren't familiar\nwith the syntax and meaning of Infusion component trees, it is a good idea to browse the documentation, tutorials and examples at the \nInfusion [documentation site](http://docs.fluidproject.org/infusion/development/).\n\nIt contains the following topics:\n\n1. Defining top-level [Kettle applications using \"config\" files](docs/ConfigsAndApplications.md).\n2. Defining HTTP and Websockets servers using the grades [`kettle.server`](./docs/Servers.md#kettle.server) and [`kettle.server.ws`](./docs/Servers.md#kettle.server.ws).\n3. Defining Kettle request handlers derived from grades [`kettle.request`](./docs/RequestHandlersAndApps.md#kettle.request) grouped into app units derived from [`kettle.app`](./docs/RequestHandlersAndApps.md#kettle.app)\n4. Working with standard express [middleware](./docs/Middleware.md) –  incorporating any standard middleware from the express community and registering it into a Kettle application\n5. Working with [DataSources](./docs/DataSources.md) to abstract over asynchronous access to (primarily JSON-formatted) data stored locally or remotely\n6. Defining conversational, asynchronous test fixtures against HTTP and WebSockets servers using the [Kettle testing framework](./docs/KettleTestingFramework.md)\n\nOf these elements of this module, those described in topics 1, 5 and 6 (configs, DataSources and the testing framework) are portable and do not depend specifically on the\nKettle server and request handling infrastructure –   they can be used together with any technologies defining node.js HTTP and WebSockets servers (or in the case of configs,\nany node.js enabled [Infusion](http://fluidproject.org/infusion.html) application).\n\n","created":"2011-08-28T15:43:39.259Z","modified":"2017-06-16T14:48:28.315Z","lastPublisher":{"name":"amb26","email":"amb26npm@ponder.org.uk"},"owners":[{"name":"amb26","email":"amb26npm@ponder.org.uk"},{"name":"cindyli","email":"cli@ocadu.ca"},{"name":"colinbdclark","email":"colinbdclark@gmail.com"},{"name":"jobara","email":"obara.justin@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"kettle","_nodeVersion":"6.10.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/kettle-1.6.0.tgz_1497624507103_0.4241904818918556"},"_npmUser":{"name":"amb26","email":"amb26npm@ponder.org.uk"},"_npmVersion":"3.10.10","_rev":"14-319eb31b3cdb5b9233145fc6b645cfcb","_shasum":"194c10b7d4ef7771fddac18bb6815d9858a890ee","author":{"name":"The Fluid Project"},"bugs":{"url":"http://issues.fluidproject.org/browse/KETTLE"},"directories":{},"dist-tags":{"latest":"1.6.0","dev":"1.2.2-dev.20170103T231035Z.becc1e1"},"dist":{"shasum":"194c10b7d4ef7771fddac18bb6815d9858a890ee","tarball":"https://registry.npmjs.org/kettle/-/kettle-1.6.0.tgz"},"maintainers":[{"name":"amb26","email":"amb26npm@ponder.org.uk"},{"name":"cindyli","email":"cli@ocadu.ca"},{"name":"colinbdclark","email":"colinbdclark@gmail.com"},{"name":"jobara","email":"obara.justin@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-16T14:48:28.315Z","created":"2011-08-28T15:43:39.259Z","0.0.1":"2011-08-28T15:43:39.862Z","1.0.0-dev.20151203T203010Z.ea93d24":"2015-12-08T00:01:38.145Z","1.0.0-dev.20160525T225235Z.938ffbd":"2016-05-25T22:57:30.408Z","1.0.0":"2016-05-26T01:08:57.997Z","1.0.1":"2016-07-15T20:15:27.279Z","1.1.0":"2016-07-15T20:19:21.677Z","1.1.1":"2016-11-01T03:14:03.964Z","1.2.0":"2016-11-03T17:32:35.744Z","1.2.1":"2016-11-14T03:07:20.782Z","1.2.2":"2016-11-23T16:21:18.890Z","1.2.2-dev.20170103T231035Z.becc1e1":"2017-01-05T18:54:40.359Z","1.3.0":"2017-01-06T01:04:21.573Z","1.3.1":"2017-01-27T15:19:10.591Z","1.3.2":"2017-01-31T16:37:34.401Z","1.4.0":"2017-02-18T03:01:04.718Z","1.4.1":"2017-04-19T13:18:40.452Z","1.5.0":"2017-05-01T22:22:11.408Z","1.6.0":"2017-06-16T14:48:28.315Z"}}}