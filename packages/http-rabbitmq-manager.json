{"name":"http-rabbitmq-manager","version":"0.0.2","description":"RabbitMQ HTTP API client","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"dependencies":{},"repository":"","license":"BSD","gitHead":"f2797de16ed853ec63511368cac7cc55fcae8d07","versions":[{"number":"0.0.1","date":"2016-09-09T15:12:49.880Z"},{"number":"0.0.2","date":"2016-09-09T15:13:47.382Z"}],"readme":"# RabbitMQ HTTP API Client for Node\n\nThis library is a [RabbitMQ HTTP API](https://raw.githack.com/rabbitmq/rabbitmq-management/rabbitmq_v3_6_0/priv/www/api/index.html) client for Node.js\n\n\n\n\n## Supported RabbitMQ Versions\n\n * RabbitMQ 3.x\n\nAll versions require [RabbitMQ Management UI plugin](http://www.rabbitmq.com/management.html) to be installed and enabled.\n\n## Installation\n\n```\nnpm install http-rabbitmq-manager\n```\n\n\n## Documentation\n\n### Usage\n\nCreate a client instance\n\n``` js\n\tvar client = require('http-rabbitmq-manager').client({\n\t\thost : 'localhost',\n    \tport : 15672,\n  \t\ttimeout : 25000,\n        user : 'guest',\n        password : 'guest'\n\t});\n```\nIf any field is missing is used the default value from above\n\n### Overview\n\n``` js\n\tclient.overview(function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\tclient.getClusterName(function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\tclient.setClusterName({name : 'my_name@my_node'}, function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t// A list of extensions to the management plugin\n\tclient.listExtensions(function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t//The server definitions - exchanges, queues, bindings, users, virtual hosts, permissions and parameters\n\tclient.listDefinitions(function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\tclient.setDefinitions( {definition : 'my_definition'}, function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n```\n\n### Nodes\n\n``` js\n\t// List all the nodes from cluster\n\tclient.listNodes(function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t// Get statistics about an individual node\n\t// Optional memory : true to get memory statistics\n\tclient.getNode({\n\t\tname : 'node_name',\n\t\tmemory : true\n\t}, function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n```\n\n### Connections\n\n``` js\n\t// A list of all open connections\n\tclient.listConnections(function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t// Get statistics about an individual connection\n\tclient.getConnection({\n\t\tconnection : 'connection_name'\n\t}, function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t// Close a connection\n\tclient.closeConnection({\n\t\tconnection : 'connection_name'\n\t}, function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n```\n\n### Channels & Consumers\n\n``` js\n\t/* Use empty object for all open channels,\n       vhost for all open channels in a specific vhost and connection for all channels for a given connection.\n       Vhost property and connection property cannot be used in the same time.\n    */\n\tclient.listChannels({\n\t\tvhost : 'vhost_name',\n\t\tconnection : 'connection_name'\n    }, function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\tclient.getChannel({\n\t\tchannel : channel\n    }, function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t/* \n\t   Use empty object for all consumers,\n       vhost for all consumers in a given virtual host.\n    */\n\tclient.listConsumers({\n\t\tvhost : 'vhost_name',\n    }, function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n```\n\n### Exchanges\n\n``` js\n\t/* \n\t   Use empty object for all exchanges,\n       vhost for all exchanges in a given virtual host.\n    */\n\tclient.listExchanges({\n\t\tvhost : 'vhost_name'\n\t}, function  (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t// Get statistics about an individual exchange. Vhost is mandatory\n\tclient.getExchange({\n\t\tvhost : 'vhost_name',\n\t\texchange : 'exchange_name'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t// Create an exchange. The vhost, exchange and type key are mandatory; other keys are optional.\n\tclient.createExchange({\n\t\tvhost : 'vhost_name',\n\t\texchange : 'exchange_name',\n\t\ttype : 'direct',\n\t\tauto_delete : false,\n\t\tdurable : true,\n\t\tinternal : false,\n\t\targuments : {}\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t// Delete an exchange\n\tclient.deleteExchange({\n\t\tvhost : 'vhost_name',\n\t\texchange : 'exchange_name'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t//Publish message to exchange\n\t//TO DO\n\n```\n\n### Bindings\n\n``` js\n\t/* \n\t   Use empty object for all bindings,\n       vhost for all bindings in a given virtual host.\n    */\n\tclient.listBindings({\n\t\tvhost : 'vhost_name'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t// A list of all bindings on a given queue.\n\tclient.getQueueBindings({\n\t\tvhost : 'vhost_name',\n\t\tqueue : 'queue_name'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t//A list of all bindings in which a given exchange is the source.\n\tclient.getBindingsForSource({\n\t\tvhost : 'vhost_name',\n\t\texchange : 'exchange_name'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t//A list of all bindings in which a given exchange is the destination.\n\tclient.getBindingsForDestination({\n\t\tvhost : 'vhost_name',\n\t\texchange : 'exchange_name'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n```\n\n### Queues\n\n``` js\n\t/* \n\t   Use empty object for all queues,\n       vhost for all queues in a given virtual host.\n    */\n\tclient.listQueues({\n\t\tvhost : 'vhost_name'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t//An individual queue\n\tclient.getQueue({\n\t\tvhost : 'vhost_name',\n\t\tqueue : 'queue_name'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t//Create a queue. Vhost and queue name are mandatory, the rest of keys are optional\n\tclient.createQueue({\n\t\tvhost : 'vhost_name',\n\t\tqueue : 'queue_name',\n\t\tauto_delete : false,\n\t\tdurable : true,\n\t\targuments : {},\n\t\tnode : rabbit@smacmullen\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t//Delete a queue\n\tclient.deleteQueue({\n\t\tvhost : 'vhost_name',\n\t\tqueue : 'queue_name'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t//Purge a queue\n\tclient.purgeQueue({\n\t\tvhost : 'vhost_name',\n\t\tqueue : 'queue_name'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t//Take action to queue. Currently the actions which are supported are sync and cancel_sync.\n\tclient.setQueueActions({\n\t\tvhost : 'vhost_name',\n\t\tqueue : 'queue_name',\n\t\taction : 'sync'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t//Get messages from a queue. Truncate is optional; all other keys are mandatory.\n\tclient.getMessages({\n\t\tvhost : 'vhost_name',\n\t\tqueue : 'queue_name',\n\t\tcount : 5,\n\t\trequeue : true,\n\t\tencoding : \"auto\",\n\t\ttruncate : 50000\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n```\n\n### Vhosts\n\n``` js\n\t/* \n\t   Use empty object for all vhosts,\n       vhost for certain vhost\n    */\n\tclient.listVhosts({\n\t\tvhost : 'vhost_name'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t// Delete a vhost\n\tclient.deleteVhost({\n\t\tvhost : 'vhost_name'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t// Create a vhost\n\tclient.createVhost({\n\t\tvhost : 'vhost_name'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n\t//Get permissions for a vhost\n\tclient.getVhostPermissions({\n\t\tvhost : 'vhost_name'\n\t}, function (err, res) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n\n```","created":"2016-09-09T15:12:49.880Z","modified":"2016-09-09T15:13:47.382Z","lastPublisher":{"name":"cosmincrecana","email":"cosmincrecana@gmail.com"},"owners":[{"name":"cosmincrecana","email":"cosmincrecana@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-rabbitmq-manager","_nodeVersion":"5.4.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/http-rabbitmq-manager-0.0.2.tgz_1473434025659_0.1000809264369309"},"_npmUser":{"name":"cosmincrecana","email":"cosmincrecana@gmail.com"},"_npmVersion":"3.3.12","_rev":"1-c03a5f840e30bd2ce10dd0fadd9e0013","_shasum":"5dd86ba4c328d22629ada3b29685d72e8eabbb59","author":{"name":"Cosmin Crecana","email":"cosmincrecana@gmail.com"},"directories":{},"dist-tags":{"latest":"0.0.2"},"dist":{"shasum":"5dd86ba4c328d22629ada3b29685d72e8eabbb59","tarball":"http://registry.npmjs.org/http-rabbitmq-manager/-/http-rabbitmq-manager-0.0.2.tgz"},"maintainers":[{"name":"cosmincrecana","email":"cosmincrecana@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-09-09T15:13:47.382Z","created":"2016-09-09T15:12:49.880Z","0.0.1":"2016-09-09T15:12:49.880Z","0.0.2":"2016-09-09T15:13:47.382Z"}}}