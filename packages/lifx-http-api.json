{"name":"lifx-http-api","version":"1.0.3","description":"Thin wrapper around the Lifx HTTP API","main":"dist/lifx.js","scripts":{"prepublish":"npm run build","build":"babel source --presets babel-preset-es2015 --out-dir dist","test":"npm run build && node_modules/.bin/istanbul cover -root dist/ node_modules/mocha/bin/_mocha --recursive test","report-coverage":"codecov"},"keywords":["lifx","http","api","promises","light","bulb"],"repository":"https://github.com/klarstil/lifx-http-api","license":"MIT","dependencies":{"lodash":"^4.2.1","q":"^1.4.1","request":"^2.69.0"},"devDependencies":{"babel-cli":"^6.4.5","babel-preset-es2015":"^6.3.13","chai":"^3.5.0","chai-http":"^2.0.1","codecov":"^1.0.1","istanbul":"^0.4.2","mocha":"^2.4.5"},"gitHead":"90afb556c30ea5d1ac14958a159490f6f579241a","homepage":"https://github.com/klarstil/lifx-http-api#readme","versions":[{"number":"1.0.0","date":"2016-02-08T08:40:49.423Z"},{"number":"1.0.1","date":"2016-02-08T09:38:49.577Z"},{"number":"1.0.2","date":"2016-12-19T08:17:36.350Z"},{"number":"1.0.3","date":"2017-03-28T06:39:47.726Z"}],"readme":"# Lifx HTTP Api Node.js Wrapper\n\n[![NPM Version](https://img.shields.io/npm/v/lifx-http-api.svg)](https://www.npmjs.com/package/lifx-http-api) ![Dependency Status](https://david-dm.org/klarstil/lifx-http-api.svg) [![Build Status](https://travis-ci.org/klarstil/lifx-http-api.svg?branch=master)](https://travis-ci.org/klarstil/lifx-http-api) [![License MIT](https://img.shields.io/badge/license-mit-brightgreen.svg)](https://github.com/klarstil/lifx-http-api/blob/master/LICENSE) [![codecov.io](https://codecov.io/github/klarstil/lifx-http-api/coverage.svg?branch=master)](https://codecov.io/github/klarstil/lifx-http-api?branch=master)\n\nA thin Node.js API wrapper of the [Lifx HTTP protocol](http://api.developer.lifx.com/).\n\nThis library is not, in any way, affiliated or related to Lifi Labs, Inc.. Use at your own risk.\n\n## Installation\n\n```sh\n$ npm install lifx-http-api --save\n```\n\n## Compatibility\n\nNode.js 4.2.6+ is tested and supported on Mac, Linux and Windows.\n\n## Bearer Token\n\nA bearer token is mandatory to use the API. A new token can be obtain in the [Lifx Cloud Settings](https://cloud.lifx.com/).\n\n## Usage\n\nThe thin API wrapper uses a client for network communication. This client handles all requests against the Lifx API.\n\n```js\nvar lifx = require('lifx-http-api'),\n    client;\n    \nclient = new lifx({\n    bearerToken: '<your api token>'\n});\n```\n\nThe `Client` object provides promises by the great [Q library](https://github.com/kriskowal/q). You can either use callbacks or promises.\n\n```js\n// Using callbacks\nclient.listLights('all', function(err, data) {\n    if(err) {\n    \tconsole.error(err);\n    \treturn;\n    }\n    \n    console.log(data)\n});\n\n// Using promises\nclient.listLights('all').then(console.log, console.error);\n```\n\n### Getting lights and scenes\n\n#### `client.listLights(selector, [cb])`\nGets lights belonging to the authenticated account. Filter the lights using selectors.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`selector` | string | | Selector for the light bulb you want to get. See the [Selector section](http://api.developer.lifx.com/docs/selectors) to get more information.\n`cb` | function | null | `function(err, data) {}` Callback function which will be called when the HTTP request to the API was processed.\n\n**Usage example:**\n```js\n// Using callbacks\nclient.listLights('all', function(err, data) {\n    if(err) {\n    \tconsole.error(err);\n    \treturn;\n    }\n    \n    console.log(data)\n});\n\n// Using promises\nclient.listLights('all').then(console.log, console.error);\n```\n\n### Modifying light state\n\n#### `client.setState(selector, settings, [cb])`\nSets the state of the lights within the selector.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`selector` | string | | Selector for the light bulb you want to get. See the [Selector section](http://api.developer.lifx.com/docs/selectors) to get more information.\n`settings` | object | `{}` | State configuration object. See the [official documentation ](http://api.developer.lifx.com/docs/set-state) for further information.\n`cb` | function | null | `function(err, data) {}` Callback function which will be called when the HTTP request to the API was processed.\n\n**Usage example:**\n```js\n// Using callbacks\nclient.setState('all', {\n\tpower: 'on',\n\tcolor: 'blue saturation:0.5',\n\tbrightness: 0.5,\n\tduration: 5\t\t\n}, function(err, data) {\n    if(err) {\n    \tconsole.error(err);\n    \treturn;\n    }\n    \n    console.log(data)\n});\n\n// Using promises\nclient.setState('all', {\n\tpower: 'on',\n\tcolor: 'blue saturation:0.5',\n\tbrightness: 0.5,\n\tduration: 5\t\t\n}).then(console.log, console.error);\n```\n\n#### `client.setStates(settings, [cb])`\nThis endpoint allows you to set different states on multiple selectors in a single request.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`settings` | Mixed | `{}` | Multiple State configuration object. See the [official documentation ](http://api.developer.lifx.com/docs/set-state) for further information.\n`cb` | function | null | `function(err, data) {}` Callback function which will be called when the HTTP request to the API was processed.\n\n**Usage example:**\n```js\n// Using callbacks\nclient.setState('all', {\n    \"states\": [ {\n        \"selector\": \"all\",\n        \"power\": \"on\"\n    }, {\n        \"selector\": \"group:test\",\n        \"brightness\": 0.5\n    } ],\n    \"defaults\": {\n        \"duration\": 5.0\n    }\n}, function (err, data) {\n    if (err) {\n        console.error(err);\n        return;\n    }\n\n    console.log(data)\n});\n```\n\n#### `client.togglePower(selector, [duration], [cb])`\nTurn off lights if they are on, or turn them on if they are off. Physically powered off lights are ignored.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`selector` | string | `all`| Selector for the light bulb you want to get. See the [Selector section](http://api.developer.lifx.com/docs/selectors) to get more information.\n`duration` | int | 0 | Turning on or off will be faded over the time (in seconds).\n`cb` | function | null | `function(err, data) {}` Callback function which will be called when the HTTP request to the API was processed.\n\n**Usage example:**\n```js\n// Using callbacks\nclient.togglePower('all', 1.5, function (err, data) {\n    if (err) {\n        console.error(err);\n        return;\n    }\n\n    console.log(data)\n});\n```\n\n#### `client.breathe(selector, [settings], [cb])`\nPerforms a breathe effect by slowly fading between the given colors. Use the parameters to tweak the effect.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`selector` | string | `all`| Selector for the light bulb you want to get. See the [Selector section](http://api.developer.lifx.com/docs/selectors) to get more information.\n`settings` | Object | `{}` | Breathe effect object, see the [official documentation](http://api.developer.lifx.com/docs/breathe-effect) for all available parameter.\n`cb` | function | null | `function(err, data) {}` Callback function which will be called when the HTTP request to the API was processed.\n\n**Usage example:**\n```js\n// Using callbacks\nclient.breathe('all', {\n    color: '#006633',\n    from_color: '#00AF33',\n    period: 1,\n    cycles: 10,\n    persist: true,\n    power_on: true,\n    peak: 0.8\n}, function (err, data) {\n    if (err) {\n        console.error(err);\n        return;\n    }\n\n    console.log(data)\n});\n```\n\n#### `client.pulse(selector, [settings], [cb])`\nPerforms a pulse effect by quickly flashing between the given colors. Use the parameters to tweak the effect.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`selector` | string | `all`| Selector for the light bulb you want to get. See the [Selector section](http://api.developer.lifx.com/docs/selectors) to get more information.\n`settings` | Object | `{}` | Pulse effect object, see the [official documentation](http://api.developer.lifx.com/docs/pulse-effect) for all available parameter.\n`cb` | function | null | `function(err, data) {}` Callback function which will be called when the HTTP request to the API was processed.\n\n**Usage example:**\n```js\n// Using callbacks\nclient.pulse('all', {\n    color: '#006633',\n    from_color: '#00AF33',\n    period: 1,\n    cycles: 10,\n    persist: true,\n    power_on: true,\n    peak: 0.8\n}, function (err, data) {\n    if (err) {\n        console.error(err);\n        return;\n    }\n\n    console.log(data)\n});\n```\n\n#### `client.cycle(selector, [settings], [cb])`\nMake the light(s) cycle to the next or previous state in a list of states.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`selector` | string | `all`| Selector for the light bulb you want to get. See the [Selector section](http://api.developer.lifx.com/docs/selectors) to get more information.\n`settings` | Object | `{}` | Cycle states object, see the [official documentation](http://api.developer.lifx.com/docs/cycle) for all available parameter.\n`cb` | function | null | `function(err, data) {}` Callback function which will be called when the HTTP request to the API was processed.\n\n**Usage example:**\n```js\n// Using callbacks\nclient.cycle('all', {\n    \"states\": [{\n        \"brightness\": 1.0\n    }, {\n        \"brightness\": 0.5\n    }, {\n        \"brightness\": 0.1\n    }, {\n        \"power\": \"off\"\n    }],\n    \"defaults\": {\n        \"power\": \"on\", // all states default to on\n        \"saturation\": 0, // every state is white\n        \"duration\": 2.0 // all transitions will be applied over 2 seconds\n    }\n}, function (err, data) {\n    if (err) {\n        console.error(err);\n        return;\n    }\n\n    console.log(data)\n});\n```\n\n### Working with scenes\n\n#### `client.listScenes([cb])`\nLists all the scenes available in the users account.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`cb` | function | null | `function(err, data) {}` Callback function which will be called when the HTTP request to the API was processed.\n\n**Usage example:**\n```js\n// Using callbacks\nclient.listScene(function(err, data) {\n    if(err) {\n    \tconsole.error(err);\n    \treturn;\n    }\n    \n    console.log(data)\n});\n\n// Using promises\nclient.listScenes().then(console.log, console.error);\n```\n\n#### `client.activateScene(selector, [duration], [cb])`\nActivates a scene from the users account.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`selector` | string | `all`| Scene selector. See the [Selector section](http://api.developer.lifx.com/docs/selectors) to get more information.\n`duration` | int | 0 | Fades to the scene (in seconds).\n`cb` | function | null | `function(err, data) {}` Callback function which will be called when the HTTP request to the API was processed.\n\n**Usage example:**\n```js\n// Using callbacks\nclient.activateScene('scene_id:d073d501cf2c', 1.2, function (err, data) {\n    if (err) {\n        console.error(err);\n        return;\n    }\n\n    console.log(data)\n});\n```\n\n### Utility methods\n\n#### `client.validateColor(color, [cb])`\nThis method lets you validate a user's color string and return the hue, saturation, brightness and kelvin values that the API will interpret as.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`color` | string | | Color string you'd like to validate. See the [Color section](http://api.developer.lifx.com/docs/colors) to get more information.\n`cb` | function | null | `function(err, data) {}` Callback function which will be called when the HTTP request to the API was processed.\n\n**Usage example:**\n```js\n// Using callbacks\nclient.validateColor('#0198E1', function (err, data) {\n    if (err) {\n        console.error(err);\n        return;\n    }\n\n    console.log(data)\n});\n```\n\n### Client API\n\n#### `client.getVersion()`\nReturns the api version.\n\n**Usage example:**\n```js\nclient.getVersion();  // outputs \"v1\"\n```\n\n#### `client.setVersion(version)`\nSets the api version. Returns `true` if the version was set sucessfully, otherwise `false`.\n \nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`version` | string | | API version which will be used by the `Client` object.\n\n**Usage example:**\n```js\nclient.setVersion('v2beta');\n```\n\n#### `client.getUrl()`\nReturns the api url.\n\n**Usage example:**\n```js\nclient.getUrl();  // outputs \"https://lifx.com/api/\"\n```\n\n#### `client.setUrl(url)`\nSets the api url. Returns `true` if the url was set sucessfully, otherwise `false`.\n \nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`url` | string | | API url which will be used by the `Client` object.\n\n**Usage example:**\n```js\nclient.setUrl('https://my-lifx-api-url.com');\n```\n\n#### `client.getApiUrl()`\nReturns the full Lifx api endpoint\n\n\n**Usage example:**\n```js\nclient.getApiUrl(); // outputs \"https://lifx.com/api/v1\"\n```\n\n#### `client.getBearerToken()`\nReturns the bearer authentication token.\n\n**Usage example:**\n```js\nclient.getBearerToken();  // outputs \"<your-token>\"\n```\n\n#### `client.setBearerToken(token)`\nSets the bearer authentication token. Returns `true` if the token was set sucessfully, otherwise `false`.\n \nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`token` | string | | Bearer authentication token which will be used by the `Client` object.\n\n**Usage example:**\n```js\nclient.setBearerToken('<your-token>');\n```\n\n#### `client.send(settings, cb)`\nSends a request to the Lifx API.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`settings` | Object | `{}` | `request` configuration settings. See the [offical documentation](https://github.com/request/request) for further information.\n`cb` | function | null | `function(err, data) {}` Callback function which will be called when the HTTP request to the API was processed.\n\n**Usage example:**\n```js\nclient.send({\n    url: 'lights/all/state',\n    body: {\n        power: 'on',\n        color: 'blue saturation:0.5',\n        brightness: 0.5,\n        duration: 5        \n    },\n    method: 'PUT'\n}, function(err, data) {\n    if (err) console.error(err);\n    else console.log(data);\n})\n```\n\n### Client settings\n\nThe `Client` object can be configured at initialization:\n\n```js\nvar lifx = require('lifx-http-api'),\n    client;\n    \nclient = new lifx({\n    bearerToken: '<your api token>',\t// Authentication token\n    version: 'v2beta',\t\t\t\t\t// API version\n    url: 'https://api.lifx.com'\t\t\t// API endpoint\n});\n```","created":"2016-02-08T08:40:49.423Z","modified":"2017-03-28T06:39:47.726Z","lastPublisher":{"name":"klarstil","email":"klarstil@googlemail.com"},"owners":[{"name":"klarstil","email":"klarstil@googlemail.com"}],"other":{"_attachments":{},"_from":".","_id":"lifx-http-api","_nodeVersion":"7.5.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/lifx-http-api-1.0.3.tgz_1490683187007_0.3434614746365696"},"_npmUser":{"name":"klarstil","email":"klarstil@googlemail.com"},"_npmVersion":"4.1.2","_rev":"3-675ce7c2a266e33196d62420bdcaff93","_shasum":"9583adefa99c5d46397ff77f44413abca6619b45","author":{"name":"klarstil","email":"klarstil@googlemail.com"},"bugs":{"url":"https://github.com/klarstil/lifx-http-api/issues"},"directories":{},"dist-tags":{"latest":"1.0.3"},"dist":{"shasum":"9583adefa99c5d46397ff77f44413abca6619b45","tarball":"https://registry.npmjs.org/lifx-http-api/-/lifx-http-api-1.0.3.tgz"},"maintainers":[{"name":"klarstil","email":"klarstil@googlemail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-28T06:39:47.726Z","created":"2016-02-08T08:40:49.423Z","1.0.0":"2016-02-08T08:40:49.423Z","1.0.1":"2016-02-08T09:38:49.577Z","1.0.2":"2016-12-19T08:17:36.350Z","1.0.3":"2017-03-28T06:39:47.726Z"}}}