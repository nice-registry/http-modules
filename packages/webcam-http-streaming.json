{"name":"webcam-http-streaming","version":"1.1.2","description":"Simple wrapper around ffmpeg for http webcam streaming","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/iglosiggio/nodejs-webcam-streaming","keywords":["webcam","ffmpeg","avlib","streaming","http","rest","wrapper","simple"],"license":"Unlicense","homepage":"https://github.com/iglosiggio/nodejs-webcam-streaming#readme","gitHead":"92fb58f708ce3da63d54357a9abb9950556d6c70","versions":[{"number":"1.0.0","date":"2016-12-21T17:59:44.942Z"},{"number":"1.1.0","date":"2016-12-21T18:24:11.379Z"},{"number":"1.1.1","date":"2016-12-21T19:10:36.163Z"},{"number":"1.1.2","date":"2016-12-27T18:07:10.705Z"}],"readme":"# webcam-http-streaming\nStream a webcam over http with node.js\n\n# API\n\n* **createHTTPStreamingServer(_[options]_)**: creates a [HTTP](https://nodejs.org/api/http.html#http_class_http_server)\n  server ready for streaming yout webcams, the options are explained below\n  (and are all optional)\n\n* **streamWebcam(_[encoder]_)**: return the promise of a [Readable](https://nodejs.org/api/stream.html#stream_class_stream_readable)\n  stream, defaults to avconv encodinf webm with realtime deadline\n\nGiven the flexibility of the API it _should_ be easy to use webcams on the\nnetwork or other types of realtime inputs, but keep in mind that the current\nimplementation spawns **one encoder per viewer** (it was made for a tool where\nthis limitation wasn't a problem).\n\nFeel free to recommend me ways to overcome this difficulty :) i think that\nMPEG-2 with [hsl.js](https://github.com/dailymotion/hls.js) or a similar lib may\nbe a good way to start.\n\n### Complete API example\n```js\nconst webcam = require('webcam-http-streaming');\n\nconst encoder = {\n  /*\n   * encoder command or location\n   *   Default: avconv\n   */\n  command: 'ffmpeg',\n  /*\n   * Function that returns the required flags, the video is expected to be\n   * written to stdout\n   *   Default: shown below\n   */\n  flags(webcam) {\n    return `-f video4linux2 -i ${webcam} -f webm -deadline realtime pipe:1`;\n  },\n  /*\n   * MIME type of the output stream\n   *   Default: 'video/webm'\n   */\n  mimeType: 'video/webm',\n  /*\n   * Function that detects the success of the encoder process,\n   * does cb(true) in case of succes, any other value for failure\n   *\n   * Calling cb more than one time has no effect\n   *\n   * encoderProcess is of type ChildProcess\n   *\n   *  Default: shown below, it isn't perfect but covers most of the cases\n   */\n  isSuccessful(encoderProcess, cb) {\n    let started = false;\n    encoderProcess.stderr.setEncoding('utf8');\n    encoderProcess.stderr.on('data', (data) => {\n      /* I trust that the output is line-buffered */\n      const startedText = /Press ctrl-c to stop encoding/;\n      if(startedText.test(data)) {\n        cb(true);\n        started = true;\n      }\n    });\n    /* If the process start was not detected and it exited it's surely a failure */\n    encoderProcess.on('exit', () => {\n      if(!started) cb(false);\n    });\n  }\n};\n\n/* Suppose i want to use the default REST API */\nconst server = webcam.createHTTPStreamingServer({\n  /*\n   * Optional: A list of the permitted webcams, if it's specified overrides\n   * isValidWebcam\n   */\n  permittedWebcams: ['/dev/video0', '/dev/video1'],\n  /*\n   * Validates if a given path is a valid webcam for use, the default is shown\n   * below\n   */\n  isValidWebcam(webcam) {\n    const webcamRegex = /\\/dev\\/video[0-9]+/;\n\n    return new Promise((accept, reject) => {\n      /* If doesn't seem like a video device block we will fail */\n      if(!webcamRegex.test(webcam)) {\n        reject(false);\n      } else {\n        /* ... and if the file doesn't exists */\n        fileExists(webcam).then(accept, reject);\n      }\n    });\n  }\n  /*\n   * The endpoint for requesting streams of the REST api\n   *   Defaults to '/webcam'\n   */\n  webcamEndpoint: '/webcam',\n  /*\n   * Custom endpoints to extend the REST API\n   *   req: [IncomingMessage](https://nodejs.org/api/http.html#http_class_http_incomingmessage)\n   *   res: [ServerResponse](https://nodejs.org/api/http.html#http_class_http_serverresponse)\n   *   reqUrl: [URL Object](https://nodejs.org/api/url.html#url_url_strings_and_url_objects)\n   *            with [QueryString](https://nodejs.org/api/querystring.html#querystring_querystring_parse_str_sep_eq_options)\n   *\n   * Note: the endpoint 'default' is used for any non-matching request\n   */\n  additionalEndpoints: {\n    '/list_webcams': (req, res, reqUrl) => { res.end('<html>...</html>'); }\n  },\n  encoder: encoder\n}).listen(8080);\n\n/* Returns a promise that resolves to the video stream (stream.Readable) */\nconst videoStream = webcam.streamWebcam('/dev/video0', encoder);\n```\n\n# Default REST API\n\n* `/webcam?webcam=<webcam_device_block>`: Returns a _video/webm_ (by default, it\n   can be changed) stream or an error (invalid_webcam, webcam_in_use by another\n   process)\n\n### Errors\n\n* `invalid_webcam`: The webcam you requested hasn't been found or isn't in the\n  list of permitted webcams\n```json\n  {\n    \"code\": \"invalid_webcam\",\n    \"error\": \"That webcam doesn't exist\",\n    \"webcam\": \"/dev/video0\"\n  }\n```\n\n* `webcam_in_use`: The webcam you requested was in use by another process\n```json\n  {\n    \"code\": \"webcam_in_use\",\n    \"error\": \"The webcam is already in use by another process\",\n    \"webcam\": \"/dev/video0\"\n  }\n```\n","created":"2016-12-21T17:59:44.942Z","modified":"2016-12-27T18:07:10.705Z","lastPublisher":{"name":"iglosiggio","email":"iglosiggio@gmail.com"},"owners":[{"name":"iglosiggio","email":"iglosiggio@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"webcam-http-streaming","_nodeVersion":"6.9.2","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/webcam-http-streaming-1.1.2.tgz_1482862028758_0.3565766348037869"},"_npmUser":{"name":"iglosiggio","email":"iglosiggio@gmail.com"},"_npmVersion":"3.10.9","_rev":"4-0c97a99eb3491260f406badf33cf24fe","_shasum":"ab8ba02c6a6daa9f54e296b686e02e9286448c79","author":{"name":"Ignacio E. Losiggio","email":"iglosiggio@gmail.com"},"bugs":{"url":"https://github.com/iglosiggio/nodejs-webcam-streaming/issues"},"directories":{},"dist-tags":{"latest":"1.1.2"},"dist":{"shasum":"ab8ba02c6a6daa9f54e296b686e02e9286448c79","tarball":"http://registry.npmjs.org/webcam-http-streaming/-/webcam-http-streaming-1.1.2.tgz"},"maintainers":[{"name":"iglosiggio","email":"iglosiggio@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-12-27T18:07:10.705Z","created":"2016-12-21T17:59:44.942Z","1.0.0":"2016-12-21T17:59:44.942Z","1.1.0":"2016-12-21T18:24:11.379Z","1.1.1":"2016-12-21T19:10:36.163Z","1.1.2":"2016-12-27T18:07:10.705Z"}}}