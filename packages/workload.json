{"name":"workload","version":"2.4.0","description":"Sends HTTP requests to a server to mimic a natual load","main":"index.js","bin":{"workload":"cli.js"},"dependencies":{"brace-expansion":"^1.1.6","csv-line":"^1.2.0","is-it-weekend":"^1.0.0","minimist":"^1.2.0","mostly-working-hours":"^1.0.0","request":"^2.79.0","weighted":"^0.3.0","xtend":"^4.0.1"},"devDependencies":{"standard":"^8.6.0","tape":"^4.6.3"},"scripts":{"test":"standard && node test.js"},"repository":"https://github.com/watson/workload","keywords":["test","load","http","request","simulate","simulator","mimic","stress","bot"],"license":"MIT","homepage":"https://github.com/watson/workload#readme","coordinates":[55.68104049999999,12.5643884],"gitHead":"416227ce80485aae9fe4c079b4a3111507bb2105","versions":[{"number":"1.0.0","date":"2017-01-05T19:23:46.823Z"},{"number":"1.0.1","date":"2017-01-05T19:37:19.854Z"},{"number":"1.1.0","date":"2017-01-05T19:49:55.250Z"},{"number":"2.0.0","date":"2017-01-05T22:20:58.988Z"},{"number":"2.0.1","date":"2017-01-05T22:35:36.816Z"},{"number":"2.0.2","date":"2017-01-05T22:46:52.895Z"},{"number":"2.1.0","date":"2017-01-06T08:40:22.476Z"},{"number":"2.2.0","date":"2017-01-06T09:09:36.028Z"},{"number":"2.3.0","date":"2017-01-06T10:10:25.808Z"},{"number":"2.3.1","date":"2017-01-09T12:45:31.376Z"},{"number":"2.4.0","date":"2017-01-09T13:32:32.247Z"}],"readme":"# workload\n\nSends HTTP requests to a server to mimic a natual load.\n\nThe requests are randomized using weights, so certain requests appear\nmore often than others.\n\nIt's also possible to mimic regular working hours so that the average\nnumber of requests are lower at night and in the weekends.\n\nThis module is not intended to benchmark an HTTP server. If that's your\nuse-case I suggest you take a look at\n[autocannon](https://github.com/mcollina/autocannon) instead. This\nmodule is meant to help you simulate a real-world workload over a longer\nperiod of time.\n\n[![Build status](https://travis-ci.org/watson/workload.svg?branch=master)](https://travis-ci.org/watson/workload)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n[![sponsor](https://img.shields.io/badge/sponsored%20by-Opbeat-3360A3.svg)](https://opbeat.com)\n\n## Installation\n\nFor use from the command line, install globally:\n\n```\nnpm install workload --global\n```\n\nFor use programmatically:\n\n```\nnpm install workload --save\n```\n\n## CLI Usage\n\nExample making max 60 requests per minute to 5 different URL's with\ndifferent weights:\n\n```\nworkload --max 60 \\\n  POST,http://example.com/signup,\"Hello World\" \\\n  10,http://example.com/ \\\n  2,http://example.com/foo \\\n  4,http://example.com/bar \\\n  8,http://example.com/baz\n```\n\nRun `workload --help` for all options.\n\n## Programmatic Usage\n\n```js\nvar Workload = require('workload')\n\nvar workload = new Workload({\n  max: 30, // make a request once every 2 seconds maximum\n  filter: Workload.stdFilters.workingHours,\n  requests: [\n    {weight: 1, url: 'http://example.com/signup', method: 'POST', body: '...'},\n    {weight: 10, url: 'http://example.com/'},\n    {weight: 2, url: 'http://example.com/foo'},\n    {weight: 4, url: 'http://example.com/bar'},\n    {weight: 8, url: 'http://example.com/baz'}\n  ]\n})\n\n// stop after 1 minute\nsetTimeout(function () {\n  workload.stop()\n}, 60000)\n```\n\n## API\n\n### `var workload = new Workload(options)`\n\nCreate a new workloader. The `workload` object is an EventEmitter.\n\nThe constructor takes the following options:\n\n- `requests` - An array of `request` objects (see below)\n- `max` - The maximum number of requests to make per minute (defaults to\n  `12`)\n- `headers` - An object containing the default HTTP headers to use for\n  each request\n- `filter` - An optional filter single function (shorthand for `filters:\n  [filter]`) - see [Filters](#filters) for details\n- `filters` - An optional array of filter functions which will be called\n  sequentially - see [Filters](#filters) for details\n\nEach `request` object can contain the following properties:\n\n- `url` - The URL to request\n- `method` - The HTTP method to use (defaults to `GET`)\n- `weight` - The chance that this request will be performed compared to\n  the other requests (defaults to `1`)\n- `headers` - A object containing HTTP headers to use for the request\n  (overrules `options.headers`)\n- `body` - Entity body for `PATCH`, `POST` and `PUT` requests. Must be a\n  `Buffer`, `String` or `ReadStream`. If `json` is true, then body must\n  be a JSON-serializable object\n- `json` - Sets body to JSON representation of value and adds\n  `Content-type: application/json` header. Additionally, parses the\n  response body as JSON\n- For additional options, [see the options accepted by the request\n  module](https://github.com/request/request#requestoptions-callback).\n\n### Event: `error`\n\nEmitted if an error occurs during one of the requests.\n\n### Event: `visit`\n\nEmitted every time a request have been successfully performed. An object\nwith the following properties is emitted:\n\n- `request` - The request options used when making the request\n- `response` - The response object (an `http.IncomingMessage` instance)\n- `body` - The body of the response\n\n### `workload.stop()`\n\nStop making requests.\n\n### `Workload.stdFilters.workdays`\n\nThis filter lowers the chances of a request being made during weekends.\n\n### `Workload.stdFilters.workingHours`\n\nThis filter lowers the chances of a request being made during weekends\nand at night.\n\n### `Workload.stdFilters.expand`\n\nThis filter expands braces in URL's and picks a random matching URL.\n\nFor instance, given a request with a URL of\n`http://example.com/foo/{1..10}` this filter will replace the `{1..10}`\npart of the URL with a random number between 1 and 10. So the actual\nrequested URL might be `/foo/4`.\n\n## Filters\n\nA filter is a function that will either lower the chance of a request\nbeing made or modify the request in some way.\n\nThe function is called every time a request is ready to be made. It's\npassed the request object and a callback. Whether or not it calls the\ncallback determins if the request is performed or not.\n\nIt's also possible to modify the request inside a filter function by\nmanipulating the request object and passing it as an argument to the\ncallback.\n\nExample filter function that only makes requests between 6am and 7am:\n\n```js\nfunction (request, next) {\n  var hour = (new Date()).getHours()\n  if (hour === 6) next()\n}\n```\n\nExample filter function that modifies the request URL:\n\n```js\nfunction (request, next) {\n  request.url += '/' + Math.random()\n  next(request)\n}\n```\n\n## Acknowledgements\n\nThis project was kindly sponsored by [Opbeat](https://opbeat.com).\n\n## License\n\nMIT\n","created":"2017-01-05T19:23:46.823Z","modified":"2017-01-09T13:32:32.247Z","lastPublisher":{"name":"watson","email":"w@tson.dk"},"owners":[{"name":"watson","email":"w@tson.dk"}],"other":{"_attachments":{},"_from":".","_id":"workload","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/workload-2.4.0.tgz_1483968751625_0.4831679321359843"},"_npmUser":{"name":"watson","email":"w@tson.dk"},"_npmVersion":"3.10.8","_rev":"11-ab8ef04ea6eb67324acc51b313906dd7","_shasum":"25bdc2c6d1c65b118bf536334a5dcc93cc2b4f69","author":{"name":"Thomas Watson Steen","email":"w@tson.dk","url":"https://twitter.com/wa7son"},"bugs":{"url":"https://github.com/watson/workload/issues"},"directories":{},"dist-tags":{"latest":"2.4.0"},"dist":{"shasum":"25bdc2c6d1c65b118bf536334a5dcc93cc2b4f69","tarball":"http://registry.npmjs.org/workload/-/workload-2.4.0.tgz"},"maintainers":[{"name":"watson","email":"w@tson.dk"}],"readmeFilename":"README.md","time":{"modified":"2017-01-09T13:32:32.247Z","created":"2017-01-05T19:23:46.823Z","1.0.0":"2017-01-05T19:23:46.823Z","1.0.1":"2017-01-05T19:37:19.854Z","1.1.0":"2017-01-05T19:49:55.250Z","2.0.0":"2017-01-05T22:20:58.988Z","2.0.1":"2017-01-05T22:35:36.816Z","2.0.2":"2017-01-05T22:46:52.895Z","2.1.0":"2017-01-06T08:40:22.476Z","2.2.0":"2017-01-06T09:09:36.028Z","2.3.0":"2017-01-06T10:10:25.808Z","2.3.1":"2017-01-09T12:45:31.376Z","2.4.0":"2017-01-09T13:32:32.247Z"}}}