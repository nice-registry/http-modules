{"name":"aera-tools","version":"1.0.7","description":"Handy HTTP tools to use with Aera HTTP library.","main":"index.js","scripts":{"test":"istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage","cover":"istanbul cover mocha","coveralls":"npm test","html":"nyc --reporter=html --reporter=text mocha"},"repository":"https://github.com/danielkov/aera-tools","keywords":["tools","http","library","aera"],"license":"MIT","homepage":"https://github.com/danielkov/aera-tools#readme","dependencies":{"co-body":"^5.1.1"},"devDependencies":{"aera":"^1.1.3","coveralls":"^2.13.0","mocha":"^3.2.0","mocha-lcov-reporter":"^1.3.0","istanbul":"^0.4.5","nyc":"^10.2.0","supertest":"^3.0.0"},"gitHead":"720848b7b97612563d41b37085f0778e23be7deb","versions":[{"number":"1.0.0","date":"2017-04-02T19:24:11.292Z"},{"number":"1.0.1","date":"2017-04-02T19:33:11.093Z"},{"number":"1.0.2","date":"2017-04-02T19:38:56.929Z"},{"number":"1.0.4","date":"2017-04-03T13:04:28.749Z"},{"number":"1.0.5","date":"2017-04-04T13:51:50.469Z"},{"number":"1.0.6","date":"2017-04-04T13:57:38.918Z"},{"number":"1.0.7","date":"2017-04-05T11:45:42.742Z"}],"readme":"# Aera Tools\nHandy HTTP tools to use with Aera HTTP library.\n___\n\n[![Build Status](https://travis-ci.org/danielkov/aera-tools.svg?branch=master)](https://travis-ci.org/danielkov/aera-tools) [![Coverage Status](https://coveralls.io/repos/github/danielkov/aera-tools/badge.svg?branch=master)](https://coveralls.io/github/danielkov/aera-tools?branch=master) [![Dependencies](https://david-dm.org/danielkov/aera-tools.svg)](https://david-dm.org/danielkov/aera-tools) [![devDependencies Status](https://david-dm.org/danielkov/aera-tools/dev-status.svg)](https://david-dm.org/danielkov/aera-tools?type=dev) [![npm](https://img.shields.io/npm/v/aera-tools.svg?style=flat-square)](https://npmjs.com/package/aera-tools)\n\n## List of Tools\n\n  - [Http Error](#http-error) - create an Error object with HTTP specific proerties.\n  - [Body Parser](#body-parser) - turn request bodies into promises, resolving into JavaScript Objects.\n  - [Compose](#compose) - if you prefer middleware-based approach, it can be done with this module.\n  - [Middleware](#middleware) - create real `express`-like middleware.\n  - [Static](#static) - Serve static files even easier!\n  - [Cors](#cors) - configure Cross Origin Resource Sharing!\n\n## Http Error\n\nThis constructor creates an easy-to-use Error object, that is an instance of JavaScript `Error`, but also has a status property. Throw this instead of regular errors and Aera will automatically give better error responses.\n\n### Example usage\n\n```js\nconst { HttpError } = require('aera-tools')\n\nserver.get('/auth', () => new HttpError('You are not logged in.', 401)) // Response will be `You are not logged in.` with status 401.\n```\n\n## Body Parser\n\nRequest bodies are generally kind of hard to parse, especially of no proper content type has been set on the request (which this module does not help with at the moment, by the way). This tool takes in the request object and returns a promise, that resolves into the parsed body object, or rejects into an empty object for your convenience.\n\n### Example usage\n\n```js\nconst { parseBody } = require('aera-tools')\n\nserver.post('/', (req, res) => parseBody(req)) // this will return the body parsed into an object\n```\n\nYou can also do some stuff with the body, once it's been resolved.\n\n```js\nserver.post('/', (req, res) => bodyParser(req).then(createResourceInDb))\n```\n\n## Compose\n\nAera does not encourage middleware-based approach to writing your HTTP applications, however if you do want to provide multiple functions in sequence that you want executed, you can use this tool.\n\n### Example usage\n\n```js\nconst { compose } = require('aera-tools')\n\nserver.get('/', compose(req, res, function1, function2))\n```\n\nEach of these functions will have full access to request and response. E.g.:\n\n```js\nserver.get('/', compose(\n  (req, res) => res.setHeader('X-Custom-Header', 'value'),\n  (req, res) => console.log(res.getHeader('x-custom-header') === 'value'), // logs true\n  (req, res) => 'Hello, my app!'\n))\n```\n\nAs you can see, there is no calling `next` in this tool. That will be the [middleware](#middleware) tool.\n\n## Middleware\n\nIf you want to use real `express`-style middleware with Aera, you can do so, with this tool. Do note that this will somewhat decrease the performance of Aera, so if you've made your application logic truly decoupled from the feedback logic, this tool should not be needed.\n\n### Example usage\n\n```js\nconst { middleware } = require('aera-tools')\n\nserver.get('/', middleware(\n  (req, res, next) => {\n    let t1 = Date.now()\n    next()\n    console.log(`Request took: ${Date.now() - t1} milliseconds.`)\n  }, (req, res, next) => {\n    return 'Hello, World!'\n  }\n))\n```\n\n## Static\n\n**Note:** this will only work, from version `1.1.0` of Aera, due to how arguments are handled in the newer version.\n\nServes all files from the directory specified.\n\n### Example usage\n\n```js\nconst { static } = require('aera-tools')\n\nserver.get(static('/public', './my/file/folder'))\n```\n\nThe above example will serve requests coming to `/public` with the contents of `/my/file/folder`.\n\n## Cors\n\nConfigure a route to use Cross Origin Resouce Sharing policies properly. Note that this will only work for the specific route you called it in, but there is nothing stopping you from adding it to all the routes you want to allow CORS on.\n\nMake sure you also configure the OPTIONS method too.\n\n### Example usage\n\n```js\nconst { cors } =require('aera-tools')\n\nserver.get('/', (req, res) => {\n  cors(req, res)\n  return 'Hello, World!'\n})\n\nserver.options('/', cors)\n```\n\nCors also accepts options. Here is a list of them:\n\n  - `origin` defaults to *`true`*\n  - `expose` defaults to *`''`*\n  - `maxAge` defaults to *`false`*\n  - `credentials` defaults to *`false`*\n  - `methods` defaults to *`'*'`*\n  - `headers` defaults to *`*`*, falls back to Access-Control-Request-Headers.\n","created":"2017-04-02T19:24:11.292Z","modified":"2017-04-05T11:45:42.742Z","lastPublisher":{"name":"danielkov","email":"kovacsemod@gmail.com"},"owners":[{"name":"danielkov","email":"kovacsemod@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"aera-tools","_nodeVersion":"7.7.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/aera-tools-1.0.7.tgz_1491392740577_0.5202667533885688"},"_npmUser":{"name":"danielkov","email":"kovacsemod@gmail.com"},"_npmVersion":"4.4.4","_rev":"7-6e6a7155ece2f8756130d61ad52fc33d","_shasum":"1dab1d0f7f64a92c553158a532279503880e4806","author":{"name":"Daniel Kovacs","email":"kovacsemod@gmail.com"},"bugs":{"url":"https://github.com/danielkov/aera-tools/issues"},"directories":{},"dist-tags":{"latest":"1.0.7"},"dist":{"shasum":"1dab1d0f7f64a92c553158a532279503880e4806","tarball":"https://registry.npmjs.org/aera-tools/-/aera-tools-1.0.7.tgz"},"maintainers":[{"name":"danielkov","email":"kovacsemod@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-05T11:45:42.742Z","created":"2017-04-02T19:24:11.292Z","1.0.0":"2017-04-02T19:24:11.292Z","1.0.1":"2017-04-02T19:33:11.093Z","1.0.2":"2017-04-02T19:38:56.929Z","1.0.4":"2017-04-03T13:04:28.749Z","1.0.5":"2017-04-04T13:51:50.469Z","1.0.6":"2017-04-04T13:57:38.918Z","1.0.7":"2017-04-05T11:45:42.742Z"}}}