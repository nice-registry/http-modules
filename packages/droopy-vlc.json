{"name":"droopy-vlc","version":"0.1.0","description":"Node wrapper for VLC http endpoints","main":"VlcService.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/DroopyTersen/droopy-vlc","keywords":["droopy","vlc","remote-control"],"license":"BSD-2-Clause","homepage":"https://github.com/DroopyTersen/droopy-vlc","dependencies":{"droopy-http":"0.0.1","q":"~1.0.0","xmldoc":"~0.1.2"},"gitHead":"4616ab03f83c04ab1e24a8192b383270fbc8298b","versions":[{"number":"0.0.0","date":"2014-02-13T05:51:21.454Z"},{"number":"0.0.1","date":"2014-02-13T05:58:07.152Z"},{"number":"0.0.2","date":"2014-02-13T07:26:30.418Z"},{"number":"0.0.4","date":"2014-02-13T07:37:04.986Z"},{"number":"0.0.5","date":"2014-02-22T22:20:27.142Z"},{"number":"0.0.6","date":"2014-02-23T02:04:55.850Z"},{"number":"0.1.0","date":"2016-12-19T19:34:42.582Z"}],"readme":"VLC Http Service\r\n=========\r\n\r\n**droopy-vlc** is an HTTP service that sends commands to VLC's HTTP endpoint.\r\n\r\n##Example Usage\r\n\r\nAfter installing the npm module (droopy-vlc), you can require the service and start controlling Vlc. \r\n```sh\r\n>>npm install droopy-vlc\r\n```\r\n```javascript\r\nvar VlcService = require(\"droopy-vlc\"),\r\n    vlc = new VlcService(\"http://:password@localhost:8080\");\r\n\r\nvlc.volume(80).then(function(vlcStatus) {\r\n\tconsole.log(\"Successfully set volume to \" + vlcStatus.volume);\r\n});\r\n\r\n```\r\n\r\n## VLC Status\r\nAll methods return Q promises that resolve with a **VlcStatus** object\r\n```javascript\r\n{\r\n\tfullscreen: 'false',\r\n\taspectRatio: 'default',\r\n\ttime: '1264',\r\n\ttimeDisplay: '21:04',\r\n\tvolume: '0',\r\n\tduration: '6572',\r\n\tdurationDisplay: '1:49:32',\r\n\tstate: 'playing',\r\n\trate: '1',\r\n\tposition: '0.19233977794647',\r\n\tfilename: 'myvideofile.avi'\r\n}\r\n```\r\n\r\n\r\n##Supported Methods\r\n####status()\r\nPasses back a `VlcStatus` object.\r\n```javascript\r\nvlcService.status().then(function(status) {\r\n\tconsole.log(status); //You could continuously poll this\r\n});\r\n```\r\n\r\n####seek(time)\r\nRequires a time parameter in seconds.\r\n```javascript\r\n//move the the 2 minute mark\r\nvlcService.seek(120).then(function(status) {\r\n\tconsole.log(status);\r\n});\r\n```\r\n\r\n####volume(val)\r\nRequires a volume level between 0 and 200.\r\n```javascript\r\n//max volume\r\nvlcService.volume(125).then(function(status) {\r\n\tconsole.log(status);\r\n});\r\n```\r\n\r\n####togglePause()\r\nIf currently paused the video will play, otherwise pause.\r\n```javascript\r\nvlcService.togglePause().then(function(status) {\r\n\t//statue.state will be \"paused\" or \"playing\"\r\n\tconsole.log(status);\r\n});\r\n```\r\n\r\n####fullscreen()\r\nIf currently fullscreen, it will shrink the window, else make it fullscreen\r\n```javascript\r\nvlcService.fullscreen().then(function(status) {\r\n\t//statue.fullscreen will be \"true\" or \"false\"\r\n\tconsole.log(status);\r\n});\r\n```\r\n\r\n####rate(speed)\r\nAdjusts the playback speed. Unfortunately I couldn't find a way to make it go backwords like a \"rewind\"\r\n```javascript\r\n//Play 3 times as fast (fast forward)\r\nvlcService.rate(3).then(function(status) {\r\n\tconsole.log(status);\r\n});\r\n```\r\n####next()\r\nNext song in the playlist.\r\n```javascript\r\nvlcService.next().then(function(status) {\r\n\tconsole.log(status);\r\n});\r\n```\r\n####previous()\r\nPrevious song in the playlist.\r\n```javascript\r\nvlcService.previous().then(function(status) {\r\n\tconsole.log(status);\r\n});\r\n```\r\n####play(id)\r\nPlay song  by id in the playlist.\r\n```javascript\r\nvlcService.play().then(function(status) {\r\n\tconsole.log(status);\r\n});\r\n```\r\n####deleteItem(id)\r\nRemove song  by id in the playlist.\r\n```javascript\r\nvlcService.deleteItem().then(function(status) {\r\n\tconsole.log(status);\r\n});\r\n```\r\n####empty()\r\nRemove all song in the playlist.\r\n```javascript\r\nvlcService.empty().then(function(status) {\r\n\tconsole.log(status);\r\n});\r\n```\r\n\r\n####playlist()\r\nReturn the actual playlist\r\n[{\r\n\tname : String,\r\n\tduration : Number,\r\n\tid : Number},...\r\n]\r\n```javascript\r\nvlcService.playlist().then(function(vlcPlaylist) {\r\n\tconsole.log(vlcPlaylist);\r\n});\r\n```\r\n####loop()\r\nRepeat the entire playlist\r\n```javascript\r\nvlcService.loop().then(function(status) {\r\n\tconsole.log(status);\r\n});\r\n```\r\n####repeat()\r\nRepeat the last song\r\n```javascript\r\nvlcService.repeat().then(function(status) {\r\n\tconsole.log(status);\r\n});\r\n```\r\n\r\n## Enabling VLC Http Endpoint\r\n\r\nVLC's Http endpoint is not enabled by default.  You can enable by launching VLC with a `--etraintf http` flag.  [VideoLan documentation](http://www.videolan.org/doc/vlc-user-guide/en/ch05.html)\r\n\r\nUPDATE: New versions now require you to setup a password to access the HTTP endpoint.  To do this go to Tools -> Preferences -> Main Interfaces -> Lua -> Lua HTTP Password.\r\n\r\n```bat\r\n>>C:\\Program Files (x86)\\VideoLAN\\VLC\\vlc.exe -f <filepath> --etraintf http\r\n```\r\n\r\n## Opening and closing VLC with node.js\r\nThe following are helper methods that I use to launch and close VLC on Windows PC.\r\n\r\n```javascript\r\nexec = require('child_process').exec;\r\n\r\nvar killVlc = function() {\r\n\ttry {\r\n\t\t//var cmd = 'tasklist /fi \"ImageName eq vlc.exe\" /fo csv /nh';\r\n\t\tvar cmd = 'taskkill /IM vlc.exe';\r\n\t\tvar child = exec(cmd, function(err, stdout, stderr) {\r\n\t\t\tif (err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\tconsole.log(stderr);\r\n\t\t\t}\r\n\t\t});\r\n\t} catch (ex) {\r\n\t\tconsole.log(\"kill catch\");\r\n\t}\r\n};\r\n\r\nvar launchVlc = function(filepath) {\r\n\tvar params = \" -f \" + \" \\\"\" + filepath + \"\\\" --extraintf http\";\r\n\t    \r\n\tvar child = exec(options.exePath + params, function(err, stdout, stderr) {\r\n\t\tif (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t\tconsole.log(stderr);\r\n\t\t}\r\n\t});\r\n};\r\n```\r\n","created":"2014-02-13T05:51:20.367Z","modified":"2016-12-19T19:34:42.582Z","lastPublisher":{"name":"droopytersen","email":"andrew.petersen15@gmail.com"},"owners":[{"name":"droopytersen","email":"andrew.petersen15@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"droopy-vlc","_nodeVersion":"6.1.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/droopy-vlc-0.1.0.tgz_1482176082035_0.3307304219342768"},"_npmUser":{"name":"droopytersen","email":"andrew.petersen15@gmail.com"},"_npmVersion":"3.8.6","_rev":"2-77b035325a921cfa55f5ee682bafc7ab","_shasum":"68bcd688b317af06e3771b51b4fbb8b069eb71d6","author":{"name":"Andrew Petersen"},"bugs":{"url":"https://github.com/DroopyTersen/droopy-vlc/issues"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"68bcd688b317af06e3771b51b4fbb8b069eb71d6","tarball":"http://registry.npmjs.org/droopy-vlc/-/droopy-vlc-0.1.0.tgz"},"maintainers":[{"name":"droopytersen","email":"andrew.petersen15@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-12-19T19:34:42.582Z","created":"2014-02-13T05:51:20.367Z","0.0.0":"2014-02-13T05:51:21.454Z","0.0.1":"2014-02-13T05:58:07.152Z","0.0.2":"2014-02-13T07:26:30.418Z","0.0.4":"2014-02-13T07:37:04.986Z","0.0.5":"2014-02-22T22:20:27.142Z","0.0.6":"2014-02-23T02:04:55.850Z","0.1.0":"2016-12-19T19:34:42.582Z"}}}