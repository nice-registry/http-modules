{"name":"corps","version":"0.1.0","description":"Streaming http body parser","main":"index.js","scripts":{"test":"make test"},"repository":"https://github.com/quarterto/Corps","keywords":["http","livewire","body","parse","gusto"],"license":"MIT","homepage":"https://github.com/quarterto/Corps","dependencies":{"highland":"^1.26.3","qs":"^0.6.6"},"devDependencies":{"LiveScript":"^1.2.0","expect.js":"^0.3.1","mocha":"^1.21.0"},"gitHead":"1560a2c16cd5dea1c0ef117bcbc29a459e3d22ca","versions":[{"number":"0.0.0","date":"2014-07-25T13:53:26.838Z"},{"number":"0.1.0","date":"2015-02-12T22:22:24.284Z"}],"readme":"# Corps\n\nStreaming HTTP request body parser\n\n`npm install corps`\n\n## Usage\n\n```javascript\nvar body = require('corps');\n\nhttp.createServer(function(req, res) {\n\tbody.auto(req).map(function(data) {\n\t\tres.end(data.greeting + \"world\");\n\t});\n}).listen(3000);\n```\n\n```bash\n$ curl -X POST -D '{\"greeting\": \"salutations\"}' -H 'Content-type: application/json' localhost:8000\n\nsalutations world\n\n$ curl -X POST -D 'greeting=what+ho' -H 'Content-type: application/x-www-form-urlencoded' localhost:8000\n\nwhat ho world\n```\n\n## API\n\n#### `auto :: Request → Stream Params`\nSniffs `Content-type` and parses the request body with the appropriate parser. Knows about `application/json` and `application/x-www-form-urlencoded` to begin with. Everything else is left as raw strings. To teach it about other formats, add to `mimeParsers`.\n\n#### `json`, `query`, `raw`\nIndividual parsers that comprise `auto`. Use one of these if you know what format the data will be in.\n\n#### `mimeParsers :: Map ContentType (Request → Stream Params)`\nA map of `Content-type`s to parsers. A parser is a function that takes a request and returns a stream containing a single parameters object.\n\n#### `bodyParams :: (String → Stream Params) → Request → Stream Params`\nLets a parser that works on strings work with request streams.\n\n#### `handleError :: (String → Params) → String → Stream Params\nWraps a simple parser (that could throw errors) such as `JSON.parse` in a stream that handles exceptions.\n\n## Licence\nMIT.\n","created":"2014-07-25T13:53:26.838Z","modified":"2015-02-12T22:22:24.284Z","lastPublisher":{"name":"quarterto","email":"mwr.brennan@gmail.com"},"owners":[{"name":"quarterto","email":"mwrbrennan@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"corps","_nodeVersion":"0.10.35","_npmUser":{"name":"quarterto","email":"mwr.brennan@gmail.com"},"_npmVersion":"2.1.17","_rev":"1-8afebc34dfcf8e4d32f61be51d258514","_shasum":"84622fc4c920e00d315676818147b07245e11c47","author":{"name":"Matt Brennan","email":"mwrbrennan@gmail.com","url":"http://blog.153.io/"},"bugs":{"url":"https://github.com/quarterto/Corps/issues"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"84622fc4c920e00d315676818147b07245e11c47","tarball":"http://registry.npmjs.org/corps/-/corps-0.1.0.tgz"},"maintainers":[{"name":"quarterto","email":"mwrbrennan@gmail.com"}],"readmeFilename":"readme.md","time":{"modified":"2015-02-12T22:22:24.284Z","created":"2014-07-25T13:53:26.838Z","0.0.0":"2014-07-25T13:53:26.838Z","0.1.0":"2015-02-12T22:22:24.284Z"}}}