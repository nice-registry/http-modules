{"name":"peercloud","version":"0.1.3","description":"Very simple HTTP based P2P private cloud","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/reda-ea/node-peercloud","keywords":["p2p","http","cloud","peer"],"license":"Apache-2.0","homepage":"https://github.com/reda-ea/node-peercloud#readme","dependencies":{"args-js":"^0.10.11","async":"^1.5.2","body-parser-json":"^1.9.2","connect":"^3.4.1","lodash":"^4.3.0","request":"^2.69.0","request-ip":"^1.2.2","uuid":"^2.0.1"},"gitHead":"628d89db6cdaa2c556624700ec818d348a14e4ca","readme":"# node-peercloud\n\npeerCloud is two things:\n\n* an HTTP based protocol for the exchange of message within a private \"peer to peer cloud\".\n* a node.js implementation with a very simple API.\n\n## documentation\n\nthe node module exports a function than can automatically set up a new network,\nor connect to an existing one.\n\nHere's a simple example with all of the essential features:\n\n```javascript\nvar peercloud = require('peercloud');\n\npeercloud({\n    peers: [\n        {ip: '127.0.0.1', port: '9338'},\n        {ip: 'localhost', port: 8080},\n        {ip: 'example.com', port: 4444}\n    ],\n    port: process.env.PORT || 0,\n    data: {\n        port: port,\n        joined: new Date()\n    },\n    onmessage: function(peer, body, reply) {\n        console.log('peer: ' + JSON.stringify(peer, null, 2));\n        console.log('body: ' + JSON.stringify(body, null, 2));\n        reply(null, {status: 'received'});\n    }\n}, function(err, client) {\n    if(err) {\n        console.error(err);\n        process.exit(1);\n    }\n    client.send({message: 'hi all'}); // broadcast to all peers\n    setInterval(function() {\n        var peers = client.peers();\n        console.log('got ' + peers.length + ' peers : ' + JSON.stringify(peers, null, 2));\n        if(peers.length) {\n            var randompeer = peers[Math.floor(Math.random()*peers.length)];\n            randompeer.send({message: 'hello'});\n        }\n    }, 5000);\n});\n```\nRunning this code for the first timewill start a peer on the port specified\nby the `PORT` environment variable, or a random one (default `9338`).\n\nRunning it for the second time (assuming the first one was running in one of\nthe ports from the code (9338, 8080, 4444), it will connect to the first one.\n\nRunning more instances adds more peers to the cloud.\n\nAdditinally, once connected, each peer will do the following every 5 seconds:\n\n* dump all of the known peers it is connected to (the current cloud)\n* send a message to a random peer\n\nThe system automatically handles data transport, updating network state\n(propagating new / dropped nodes), so the code only focused on actually\nhandling messages (which are all JSON objects).\n\n### basic usage\n\n#### peercloud(options, callback)\n\nthe main export of the module, this function starts a new peer (automatically\njoining an existing network if found).\n\n`options` is an object with following:\n\n* `peers`: an array of known peers, the new node will try to contact each of\n  these (in random order) with a join request.\n* `port`: the port the current peer will be listening on, or `0` for random.\n  * If port is `0` or not specified, port `9338` will be tried, then a random\n    available port (if 9338 is already used).\n  * If a specified port (non zero) is not available, the operation will fail.\n* `data`: any JSON data object identifying the individual peer (doesn't have\n  to be unique), will be available to all other peers.\n* `onmessage(peer, body, reply)`: the main message handler, called everytime\n  another peer send a message. accepts the following arguments:\n  * `peer`: data of the message sender (the `data` argument above).\n  * `body`: the message contents, a JSON object.\n  * `reply(err, body)`: a node.js style callback to send the reply (JSON) back.\n\n`callback(err, client)` is a node.js style callback for the peer startup:\n\n* `err`: the error if any, `null` otherwise.\n* `client`: a client (actually a proxy) for network, allowing all actual\n  operations, details below.\n\n#### client.send(body, callback)\n\nBroadcasts a message to all peers in the cloud, and aggregates replies.\n\n* `body`: the JSON message to send.\n* `callback(err, replies)`: called once all message operations are done.\n  The results of the operations are provided in `err` if there has been\n  at least one error, or `replies` if there are no errors.\n  The results object is an array of objects with the following properties:\n  * `peer`: the data of the peer that sent the reply.\n  * `error`: the data of the error, if any.\n  * `value`: the response body (JSON), if there was no error.\n\nNote that errors in this context mean errors communicating with peers, or with\nthe general functioning of the underlying cloud network (eg. timeout on reply).\nApplication level errors (eg. web service error reply) will usually be provided\nas valid responses, their internal formatting indicating the error.\n\n#### client.peers()\n\nReturns (synchronously) an array of all the current peers in the network.\n\nEach peer object (actually a proxy) has the following:\n\n* `data`: the data object for the peer (as described above).\n* `send(body, callback)`: sends an individual message, details below.\n\n#### peer.send(body, callback)\n\nSends an individual message to a peer in the cloud. The message will be handled\nby the peer's `onmessage` handler (described above), and the reply (er error)\nprovided to the callback.\n\n* `body`: the JSON body of the message to send (object).\n* `callback(err, reply)`: a node.js style callback with the reply JSON object\n  as `reply`, or an error in `err`.\n\n#### client.close()\n\nProperly leaves the cloud, notifying all other peers before stopping listeners.\n\nNot actually needed, as by default the network regularly checks its nodes and\nwill automatically fix itself once a peer leaves. But can avoid some unnecessary\ntraffic in very high usage / number of peers.\n\n#### Events\n\nIn addition to the above, the implementation will also provide events for all\nimportant operations (joined cloud, new peer, peer left, message sent, etc).\n\n_This feature is still under development_\n\n### advanced usage\n\nAs specified above, the `client` and `peer` objects are actually proxies to the\nactual client and peer objects, providing a subset of the functionality with\nadditional safety.\n\nThe `peercloud()` main function actually returns that full client object,\nwhich itself gives access to the actual peer objects in its `.peers` array.\n\n_Detailed documentation for these elements is coming later_\n\n### protocol\n\nThe peercloud protocol is actually very simple, at its base a peer is a simple\nHTTP server, and all network operations are HTTP transactions:\n\n* all communication is made using `POST` requests.\n* all messages are JSON encoded (`application/json` content type).\n* with the exception of the `join` and `check` methods, all requests have the\n  `x-peercloud-id` header, with a unique id for the sender, and only messages\n  from a known id are allowed (behavior undefined otherwise).\n* all valid responses must have the status code `200`, behavior for any other\n  HTTP status code is undefined (default client considers non 2xx a failure).\n* clients are not expected to follow redirects (although default one does).\n\nThe following endpoints are available for each peer:\n\n#### /join\n\nRequest to join the cloud that the peer is a member of.\n\nAccepts as input a JSON object with the following:\n\n* `id`: The unique id of the joining peer (client). Each peer has a unique id\n  that identifies them in the cloud, all future communication (once a member of\n  the cloud) must be tagged with it. If not provided, one must be generated and\n  sent back to the client.\n* `ip`: The preferred ip address for the peer, usually not provided as it can\n  be more easily inferred by the server. Must be checked before the join is\n  considered successful (see `/check` below).\n* `port`: The port where the client is listening, very recommended. If not\n  provided, the default port `9338` is assumed (and checked as well).\n* `data`: the data object identifying the client peer, defaults to `{}`.\n\nOnce all information is verified, the server must check the client by contacting\nits `/check` endpoint.\n\nOnce the check is successful, the server must inform all other peers in the\ncloud, using the `/joined` endpoint below.\n\nThe sever must then reply to the client with a list of all peers, including\nitself, the message is a JSON object with the following format:\n\n* `status`: must have the value `joined` if successful, any other value\n  indicates failure, and the client should not be considered a member.\n* `id`: the same `id` from the request if provided, or the generated one if not.\n* `ip` _(optional)_: the inferred, or provided IP address of the client peer.\n* `port` _(optional)_: the inferred, or provided port of the client peer.\n* `self`: information about the server, has the following format:\n  * `id`: ine internal peer id of the server.\n  * `data`: the identifying data object of the server.\n* `peers`: an array of JSON objects describing each of the other peers:\n  * `id`: the internal id of the peer.\n  * `ip`: the IP address of the peer.\n  * `port`: the port where the peer is listening.\n  * `data`: the identifying data of the peer.\n\nNote that information about the server itself is provided separately, as it has\na different format than the other peers.\n\nWhile it can be difficult for the server to know its own ip address for example,\nthe client already knows it (the client issued the HTTP call to the ip/port).\n\nOnce the client received the reply, it must add all peers to its internal list,\nincluding the server.\n\nIf necessary, the client must also save the provided `id`, as it will be needed\nfor all future messages (in the `x-peercloud-id` request header).\n\n#### /joined\n\nUsed to notify a peer (server), that another peer has joined the cloud.\n\nAccepts a JSON object describing the new peer:\n\n* `id`: the internal id of the peer.\n* `ip`: the IP address of the peer.\n* `port`: the port where the peer is listening.\n* `data`: the identifying data of the peer.\n\nWhenever a member of the cloud accepts a new peer, information about it must be\nsent to all other peers using this endpoint.\n\nThe server must then add this information to its internal list of peers, and\nthen reply with an acknowledgement JSON:\n\n* `status`: must be `added` for success, any other value indicates failure.\n\n#### /left\n\nUsed to notify a peer (server), that another peer has left the cloud.\n\nAccepts a JSON object with a single value:\n\n* `id`: the internal id of the peer.\n\nCan be used either by an exiting peer before leaving the cloud and shutting\ndown, or by any peer that detects that another one stopped responding.\n\nAfter receiving this message, the server must remove the peer from its internal\nlist, and then reply with an acknowledgement JSON:\n\n* `status`: must be `removed` for success, any other value indicates failure.\n\n#### /status\n\nReturns status information about the peer, mostly used as a \"ping\" to see if a\npeer is responding, but can also provide information about it.\n\nA server MUST use this to check a joining client before adding it to the cloud.\n\nThis method requires no input, and does not require the `x-peercloud-id` header.\nIt replies to the sender with a JSON status object:\n\n* `id`: the internal id of the peer. MUST be provided if available only\n  (eg. optional on the check before joining a cloud, as it may not exist yet).\n* `online` (optional): SHOULD always be set to `true` or a truthy value.\n  A falsy value means the peer can be assumed offline (eg. currently shutting\n  down), but clients are not expected to handle it.\n* `listening` (optional): SHOULD always be `true` (server currently listening).\n* `joined` (optional): `true` if part of a cloud, `false` otherwise.\n\nWhen checking a peer, if the returned `id` is different than the one on the\ninternal list, the client is expected to remove the server from its list, and\nsend a `/left` broadcast to other peers.\n\nOther properties are mandatory on the server side, and clients are not expected\nto handle them even when they are provided.\n\n#### /message\n\nUsed to send random messages between peers. This is the function exported by\nthe proxy `client.send()` and `peer.send()` methods (see basic usage above).\n\nAccepts any JSON object, the server is expected to handle it and send a JSON\nobject as a response (eg. `{}` for an empty response).\n\nThe default implementation will handle non `4xx` and `5xx` responses as errors,\nand will provide their payload to the application, but that is not a requirement\nfor clients, so application level errors should be provided as `2xx` responses,\nwith the message format indicating the error.\n\n## TODO\n\nin no particular order:\n\n* events\n* complete documentation\n  * advanced usage\n  * events\n* detailed logging\n* security\n  * malicious / erroneous code\n  * authentication (private clouds)\n* peer data update","versions":[{"number":"0.1.0","date":"2016-02-17T17:45:41.428Z"},{"number":"0.1.1","date":"2016-02-17T17:47:40.944Z"},{"number":"0.1.2","date":"2016-02-17T17:57:22.448Z"},{"number":"0.1.3","date":"2016-02-17T18:05:51.978Z"}],"created":"2016-02-17T17:45:41.428Z","modified":"2016-02-17T18:05:51.978Z","lastPublisher":{"name":"reda_ea","email":"reda.ea@gmail.com"},"owners":[{"name":"reda_ea","email":"reda.ea@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"peercloud","_nodeVersion":"4.2.4","_npmOperationalInternal":{"host":"packages-5-east.internal.npmjs.com","tmp":"tmp/peercloud-0.1.3.tgz_1455732349616_0.47096687904559076"},"_npmUser":{"name":"reda_ea","email":"reda.ea@gmail.com"},"_npmVersion":"2.14.12","_rev":"1-7ac08a0019bccabb50a7a2e417461a46","_shasum":"db48a1d6e6d9c601e443b2fc9bc878d87984848d","author":{"name":"Reda El Khattabi","email":"reda.ea@gmail.com"},"bugs":{"url":"https://github.com/reda-ea/node-peercloud/issues"},"directories":{},"dist-tags":{"latest":"0.1.3"},"dist":{"shasum":"db48a1d6e6d9c601e443b2fc9bc878d87984848d","tarball":"http://registry.npmjs.org/peercloud/-/peercloud-0.1.3.tgz"},"maintainers":[{"name":"reda_ea","email":"reda.ea@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-02-17T18:05:51.978Z","created":"2016-02-17T17:45:41.428Z","0.1.0":"2016-02-17T17:45:41.428Z","0.1.1":"2016-02-17T17:47:40.944Z","0.1.2":"2016-02-17T17:57:22.448Z","0.1.3":"2016-02-17T18:05:51.978Z"}}}