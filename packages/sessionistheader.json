{"name":"sessionistheader","version":"0.1.7","description":"Parsing and creating the Authorization header for Sessionist HTTP authorization.","main":"index.js","dependencies":{},"devDependencies":{"chai":"3.5.0","mocha":"3.0.2"},"scripts":{"test":"mocha --recursive --reporter spec"},"repository":"https://github.com/houseagency/sessionistheader","license":"GPL-3.0","gitHead":"672cd71c85828c9128c5781f52f864688ea2e960","homepage":"https://github.com/houseagency/sessionistheader#readme","versions":[{"number":"0.0.1","date":"2016-09-20T11:22:19.166Z"},{"number":"0.0.2","date":"2016-09-21T21:03:02.428Z"},{"number":"0.1.0","date":"2016-10-06T19:02:01.972Z"},{"number":"0.1.1","date":"2016-10-06T23:31:32.372Z"},{"number":"0.1.22","date":"2016-10-06T23:37:33.025Z"},{"number":"0.1.2","date":"2016-10-06T23:38:36.840Z"},{"number":"0.1.3","date":"2016-10-07T00:27:05.041Z"},{"number":"0.1.4","date":"2016-10-07T08:44:13.721Z"},{"number":"0.1.5","date":"2016-10-08T02:13:42.104Z"},{"number":"0.1.6","date":"2017-02-01T08:50:00.700Z"},{"number":"0.1.7","date":"2017-03-30T10:26:11.384Z"}],"readme":"Sessionist Authorization HTTP Header\n=====================================\n\n[![Build Status](https://semaphoreci.com/api/v1/houseagency/sessionistheader/branches/master/shields_badge.svg)](https://semaphoreci.com/houseagency/sessionistheader)\n\nThis JavaScript module creates and verifies the Sessionist Authorization HTTP\nHeader.\n\nHow to create a valid header\n-----------------------------\n\n\tconst sessionistHeader = require('sessionistheader');\n\n\tlet myKeyId = '4bc0093d';\n\tlet mySecretKey = '3485eac0182ef8123c116fc8392b34e817268e292';\n\tlet theHttpMethod = 'PUT';\n\tlet theHttpPath = '/api/v1/myservice?cool=very';\n\tlet theBodyPayload = '{ \"whatever\": \"is in the body of the http request\" }';\n\tlet theHttpDate = 'Thu, 06 Oct 2016 22:27:21 GMT';\n\n\t// myKeyId is an identifier for your secret key.\n\t// mySecretKey is the secret key.\n\t// theHttpMethod is an uppercase string with the method, like \"GET\" or \"POST\"\n\t// theHttpPath is the path (including querystring) for the request.\n\t// theBodyPayload is the raw body content of the request.\n\t// theHttpDate is the current time in RFC2616 format.\n\n\tsessionistHeader(myKeyId, mySecretKey, theHttpMethod, theHttpPath, theBodyPayload, theHttpDate, (err, auth) => {\n\t\t// The proper header string is now in the auth variable\n\t\treq.setHeader('Authorization', auth);\n\t\treq.setHeader('Date', theHttpDate); // Must also be set!\n\t});\n\n\nHow to use the Promise interface\n---------------------------------\n\n\tsessionistHeader(myKeyId, mySecretKey, theHttpMethod, theHttpPath, theBodyPayload, theHttpDate)\n\t.then(auth => req.setHeader('Authorization', auth);\n\nHow to verify an Authorization header\n--------------------------------------\n\n\tconst keyfn = (keyid, callback) => {\n\t\t// This function should find the corresponding secret key to\n\t\t// the given keyid, and then call the callback function, which\n\t\t// take two parameters: err and secretkey:\n\t\tcallback(null, 'the topsecret key');\n\t};\n\n\tverify(headerStr, theHttpMethod, theHttpPath, theBodyPayload, theHttpDate, keyfn)\n\t.then(() => {\n\t\t// Yes, verified successfully!\n\t})\n\t.catch(err => {\n\t\t// Nope. Not verified.\n\t});\n\n\nSome principles regarding the Sessionist Authorization HTTP Header\n-------------------------------------------------------------------\n\n* This is a custom `RFC2617` Authorization header.\n* The scheme identifier is `ss1`, where \"ss\" is short for \"Sessionist\"\nand \"1\" tells this is version 1 of the Sessionist format.\n* Clients should be assigned a \"secret key\" and a \"key id\" identifying the\nsecret key. The secret key should be kept secret and only be used for making\nhashes/checksums. The key id, however, can be sent in clear text in the\nheader.\n* All requests to the server must include a `Date:` HTTP header with the\ncurrent time in `RFC2616` format. The server should not accept times\nolder/newer than 24h from the current time.\n\nHeader format\n--------------\n\nThe Sessionist Authorization HTTP Header is used for both authorization and\nverifying the body payload (checksum) of API requests.\n\nFormat is:\n\n\tAuthorization: ss1 keyid=<keyid>, hash=<hash>, nonce=<nonce>\n\n### keyid\n\nSee more info about the \"key id\" in the \"Principles\" section above.\n\n### hash\n\nThe hash is a SHA-512 HMAC (`RFC2104`) in lower case hex format,\ncreated like this:\n\n\tHMAC(secret_key, nonce || method || path || payload || date)\n\nWhere:\n\n* `||` means concatination.\n* `secret_key` is the assigned to the client (and identified by the `keyid`).\n* `nonce` is the nonce in binary format (not in hex).\n* `method` is the HTTP method for the request, in uppercase letters.\n* `path` is the path of the request (including query string, if there is one).\n* `payload` is the HTTP body payload.\n* `date` is the content of the `Date:` HTTP header, i.e. the current time of\n  the client in `RFC2616` format.\n\n### nonce \n\nA random 512 bit value in lower case hex format. Should be generated on every\nrequest using some good random generator.\n\n\n","created":"2016-09-20T11:22:19.166Z","modified":"2017-03-30T10:26:11.384Z","lastPublisher":{"name":"spurge","email":"olof@montin.net"},"owners":[{"name":"alfredgodoy","email":"alfred@nurd.nu"},{"name":"spurge","email":"olof@montin.net"}],"other":{"_attachments":{},"_from":".","_id":"sessionistheader","_nodeVersion":"7.7.3","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/sessionistheader-0.1.7.tgz_1490869570621_0.23569991765543818"},"_npmUser":{"name":"spurge","email":"olof@montin.net"},"_npmVersion":"4.4.4","_rev":"5-4440aabb3ed88e19deae6d30f6ab5d1a","_shasum":"7a5f577c021545e62ccea19ee7c1c738ef5b021b","author":{"name":"Alfred Godoy","email":"alfred@nurd.nu"},"bugs":{"url":"https://github.com/houseagency/sessionistheader/issues"},"directories":{},"dist-tags":{"latest":"0.1.7"},"dist":{"shasum":"7a5f577c021545e62ccea19ee7c1c738ef5b021b","tarball":"https://registry.npmjs.org/sessionistheader/-/sessionistheader-0.1.7.tgz"},"maintainers":[{"name":"alfredgodoy","email":"alfred@nurd.nu"},{"name":"spurge","email":"olof@montin.net"}],"readmeFilename":"README.md","time":{"modified":"2017-03-30T10:26:11.384Z","created":"2016-09-20T11:22:19.166Z","0.0.1":"2016-09-20T11:22:19.166Z","0.0.2":"2016-09-21T21:03:02.428Z","0.1.0":"2016-10-06T19:02:01.972Z","0.1.1":"2016-10-06T23:31:32.372Z","0.1.22":"2016-10-06T23:37:33.025Z","0.1.2":"2016-10-06T23:38:36.840Z","0.1.3":"2016-10-07T00:27:05.041Z","0.1.4":"2016-10-07T08:44:13.721Z","0.1.5":"2016-10-08T02:13:42.104Z","0.1.6":"2017-02-01T08:50:00.700Z","0.1.7":"2017-03-30T10:26:11.384Z"}}}