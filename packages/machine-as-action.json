{"name":"machine-as-action","version":"9.0.2","description":"Run a machine from an HTTP or WebSocket request.","scripts":{"test":"npm run lint && npm run custom-tests && echo 'Done.'","lint":"node ./node_modules/eslint/bin/eslint . --max-warnings=0 && echo 'âœ”  Your code looks good.'","custom-tests":"echo \"Running tests...\" && echo && node ./node_modules/mocha/bin/mocha -t 8000 && echo"},"keywords":["machine","action","controller","sails.js","sails","blueprint","request","websocket","http"],"license":"MIT","dependencies":{"flaverr":"^1.0.0","@sailshq/lodash":"^3.10.2","machine":"^14.0.0","rttc":"^9.7.0","streamifier":"0.1.1"},"devDependencies":{"eslint":"3.19.0","mocha":"2.5.3","sails":"^1.0.0-0"},"repository":"https://github.com/treelinehq/machine-as-action","gitHead":"b9ac31ffa69ed947242b01f8134d8940823399a1","homepage":"https://github.com/treelinehq/machine-as-action#readme","versions":[{"number":"1.1.0","date":"2015-05-13T14:32:04.654Z"},{"number":"1.1.1","date":"2015-05-13T14:47:20.315Z"},{"number":"1.2.0","date":"2015-05-13T19:33:57.450Z"},{"number":"1.3.0","date":"2015-05-13T23:45:15.372Z"},{"number":"2.0.0","date":"2015-05-18T16:56:54.160Z"},{"number":"2.0.1","date":"2015-05-18T17:10:44.490Z"},{"number":"2.0.2","date":"2015-05-18T17:26:27.376Z"},{"number":"2.0.3","date":"2015-05-18T18:00:47.336Z"},{"number":"2.0.4","date":"2015-05-19T18:59:13.656Z"},{"number":"2.0.5","date":"2015-05-19T19:44:05.170Z"},{"number":"2.0.6","date":"2015-06-19T19:54:16.828Z"},{"number":"2.0.7","date":"2015-07-13T01:11:01.121Z"},{"number":"2.0.8","date":"2015-08-03T19:07:54.269Z"},{"number":"3.0.0","date":"2015-12-12T01:10:44.469Z"},{"number":"3.1.0","date":"2015-12-13T05:16:26.592Z"},{"number":"4.0.0","date":"2015-12-14T00:57:06.843Z"},{"number":"4.1.0","date":"2015-12-14T01:37:31.573Z"},{"number":"4.1.1","date":"2015-12-18T14:19:32.576Z"},{"number":"4.1.2","date":"2015-12-30T21:54:25.934Z"},{"number":"5.0.0","date":"2016-06-14T17:04:46.637Z"},{"number":"5.0.1","date":"2016-06-18T15:52:50.525Z"},{"number":"5.2.0","date":"2016-07-18T22:49:21.316Z"},{"number":"6.0.0","date":"2016-07-29T20:12:30.303Z"},{"number":"6.0.1","date":"2016-08-01T20:39:29.323Z"},{"number":"6.1.0","date":"2016-08-18T23:06:05.349Z"},{"number":"6.1.1","date":"2016-08-31T17:44:26.500Z"},{"number":"6.1.2","date":"2016-09-07T20:34:00.260Z"},{"number":"6.1.3","date":"2016-09-07T20:43:25.918Z"},{"number":"7.0.0","date":"2016-09-07T23:36:39.563Z"},{"number":"7.0.1","date":"2016-09-09T21:51:15.211Z"},{"number":"7.0.2","date":"2016-09-15T18:54:11.453Z"},{"number":"7.0.3","date":"2016-10-03T03:50:33.724Z"},{"number":"7.0.4","date":"2016-10-03T05:01:33.824Z"},{"number":"7.0.5","date":"2016-10-20T23:06:15.200Z"},{"number":"7.0.6","date":"2016-10-26T14:57:09.789Z"},{"number":"7.0.7","date":"2016-11-02T12:36:42.228Z"},{"number":"7.0.10","date":"2016-11-05T03:41:57.145Z"},{"number":"7.1.0-0","date":"2016-11-16T16:43:20.971Z"},{"number":"7.0.11","date":"2016-11-22T21:14:10.872Z"},{"number":"8.0.0","date":"2017-03-16T00:10:24.109Z"},{"number":"8.0.1","date":"2017-03-16T22:14:11.966Z"},{"number":"8.0.2","date":"2017-03-28T21:42:34.062Z"},{"number":"8.1.0","date":"2017-04-24T23:05:37.972Z"},{"number":"9.0.0","date":"2017-04-29T04:49:48.767Z"},{"number":"9.0.1-0","date":"2017-05-25T00:23:52.932Z"},{"number":"9.0.1","date":"2017-05-25T00:33:33.075Z"},{"number":"9.0.2","date":"2017-05-31T20:06:34.867Z"}],"readme":"# machine-as-action\n\nBuild a modified version of a machine that proxies its inputs from request parameters, and proxies its exits through the response.\n\n```sh\n$ npm install machine-as-action --save\n```\n\n\n## Usage\n\n```js\nvar asAction = require('machine-as-action');\nvar OpenWeather = require('machinepack-openweather');\n\n// WeatherController.js\nmodule.exports = {\n\n  traditionalReqRes: function (req, res) { /* ... */ },\n\n  getLatest: asAction(OpenWeather.getCurrentConditions),\n\n  doSomethingCustom: asAction({\n    exits: {\n      success: {\n        outputExample: 'Some dynamic message like this.'\n      }\n    },\n    fn: function (inputs, exits) {\n      return exits.success('Hello world!');\n    }\n  }),\n\n  // etc...\n\n}\n```\n\nNow you can run your machine using a HTTP or Socket.io request:\n\n```js\n// For example, using jQuery and an out-of-the-box Sails.js route/blueprint configuration:\n$.get('/weather/getLatest', {\n  city: 'San Francisco'\n}, function (weatherData){\n  console.log(weatherData);\n});\n```\n\n> Note that the machine definition you provide here doesn't have to come from an already-published machinepack-- it can be required locally from your project, or declared inline.\n\n\n\n#### Customizing the response\n\nSo sending down data is great, but sometimes you need to render view templates, redirect to dynamic URLs, use a special status code, stream down a file, etc.  No problem.  You can customize the response from each exit using a number of additional,  machine-as-action specific options.\n\n\n```js\nvar asAction = require('machine-as-action');\n\n// WeatherController.js\nmodule.exports = {\n\n  showHomepage: asAction({\n    \n\n    exits: {\n\n      success:{\n        responseType: 'view',\n        viewTemplatePath: 'homepage'\n        // The view will be provided with a \"local\" called `stuff`,\n      }\n\n    },\n\n\n    fn: function(inputs,exits){\n      return exits.success({ stuff: 'things' });\n    }\n    \n\n  })\n};\n```\n\n\nFor each of your exits, you can optionally specify a `responseType`, `status`, and/or `view`.\n\n**responseType** is one of the following:\n + \"\"         (the standard response:  Determine an appropriate response based on context: this might send plain text, download a file, transmit data as JSON, or send no response body at all.)\n + \"view\"     (render and respond with a view; exit output will be provided as view locals)\n + \"redirect\" (redirect to the URL returned as the exit output)\n \n <!-- + \"error\"    (use `res.serverError()` to send the appropriate default error response, such as an error page or a JSON message with a 500 status code.  Uses your project's configured responses from `api/responses/`, if applicable.) -->\n\n**statusCode** is the status code to respond with.  (This works just like [status codes in Sails/Node](http://sailsjs.org/documentation/reference/response-res/res-status)).\n\n**viewTemplatePath** is the relative path (from the `views/` directory) of the view to render.  It is only relevant if `responseType` is set to \"view\". (This works just like [views in Sails/Express](http://sailsjs.org/documentation/concepts/views)).\n \n> If any of the above are not set explicitly, they will fall back to reasonable defaults (based on available information).\n> \n> For example, if a non-success exit is set up to serve a view, then it will use the 200 response code.\n> But if a non-success exit has no explicit response type configured (meaning it will respond with plain text,\n> JSON-encoded data, or with no data and just a status code), then machine-as-action will default to using\n> the 500 status code.  Similarly, in the same same scenario, but with `responseType: 'redirect'`, the status\n> code will default to 302.  The success exit always has a default status code of 200, unless it is also\n> `responseType: 'redirect'` (in which case it defaults to 302.)\n\n\n\n\n#### File uploads\n\nYou can use the special `files` option to map a file parameter containing an incoming Skipper upstream to a machine input:\n\n\n```js\nvar asAction = require('machine-as-action');\n\n// WeatherController.js\nmodule.exports = {\n\n\n  uploadPhoto: asAction({\n    \n\n    files: ['photo']\n    \n\n    inputs: {\n\n      photo: {\n        example: '===',\n        required: true\n      }\n\n    },\n\n\n    fn: function (inputs, exits){\n      inputs.photo.upload(function (err, uploadedFiles){\n        if (err) return exits.error(err);\n        exits.success();\n      });\n    }\n\n\n  })\n\n\n};\n```\n\n\n## Available Options\n\nAside from the [normal properties that go into a Node Machine definition](http://node-machine.org/spec), the following additional options are supported:\n\n| Option                     | Type            | Description                                            |\n|:---------------------------|-----------------|:-------------------------------------------------------|\n| `files`                    | ((array?))      | An array of input code names identifying inputs which expect to receive file uploads instead of text parameters. These file inputs must have `example: '==='`, but they needn't necessarily be `required`.\n| `urlWildcardSuffix`        | ((string?))     | If this action is handling a route with a wildcard suffix (e.g. `/foo/bar/*`), then specify this option as the code name of the machine input which should receive the string at runtime (i.e. the actual value of the \"*\" in the request URL).\n| `disableDevelopmentHeaders`| ((boolean?))    | If set, then do not automatically set headers w/ exit info during development.\n| `disableXExitHeader`       | ((boolean?))    | If set, then do not automatically send the `X-Exit` response header for any exit, regardless of whether this is a prod or dev environment.\n| `simulateLatency`          | ((number?))     | If set, then simulate a latency of the specified number of milliseconds (e.g. 500)\n| `logDebugOutputFn`    | ((function?))   | An optional override function to call when any output other than `undefined` is received from a void exit (i.e. an exit w/ no outputExample).  By default, machine-as-action uses `sails.log.warn()` if available, or `console.warn()` otherwise.\n\n> ##### NOTE\n>\n> + For **more details** on any of these options, see https://github.com/treelinehq/machine-as-action/blob/02ae23ef1d052dfe7fa6139ac14516c83c12fe1b/index.js#L30.\n> + Any of the options above should be provided as **top-level properties** of the `options` dictionary.\n> + `machine-as-action` also supports **response directives** that can be provided as additional properties within nested exit definitions.  They are `responseType`, `statusCode`, and `viewTemplatePath`.  See examples above for more information.\n\n\n## Extended example\n\nThis is a more detailed example, based on the simple intro example at the top of this README.\n\n```js\nvar asAction = require('machine-as-action');\nvar OpenWeather = require('machinepack-openweather');\n\n// WeatherController.js\nmodule.exports = {\n\n  traditionalReqRes: function (req, res) { /* ... */ },\n\n  getLatest: asAction(OpenWeather.getCurrentConditions),\n\n  doSomethingCustom: asAction({\n    description: 'Send a plaintext response.',\n    exits: {\n      success: {\n        outputExample: 'Some dynamic message like this.'\n      }\n    },\n    fn: function (inputs, exits) {\n      return exits.success('Hello world!');\n    }\n  }),\n\n  getForecastData: asAction({\n    description: 'Fetch data for the forecast with the specified id.',\n    inputs: {\n      id: { required: true, example: 325 }\n    },\n    exits: {\n      success: {\n        outputExample: {\n          weatherPerson: 'Joaquin',\n          days: [\n            { tempCelsius: 21, windSpeedMph: 392 }\n          ]\n        }\n      },\n      notFound: {\n        description: 'Could not find forecast with that id.',\n        statusCode: 404\n      }\n    },\n    fn: function (inputs, exits) {\n      Forecast.find({ id: inputs.id }).exec(function (err, forecastRecord) {\n        if (err) { return exits.error(err); }\n        if (!forecastRecord) { return exits.notFound(); }\n        return exits.success(forecastRecord);\n      });\n    }\n  }),\n\n  show7DayForecast: asAction({\n    description: 'Show the current 7 day forecast page.',\n    exits: {\n      success: {\n        responseType: 'view',\n        viewTemplatePath: 'pages/weather/7-day-forecast'\n      }\n    },\n    fn: function (inputs, exits) {\n      return exits.success('http://sailsjs.org');\n    }\n  }),\n\n  redirectToExternalForecastMaybe: asAction({\n    description: 'Redirect the requesting user agent to http://weather.com, or to http://omfgdogs.com.',\n    exits: {\n      success: { responseType: 'redirect' }\n    },\n    fn: function (inputs, exits) {\n      if (Math.random() > 0.5) {\n        return exits.success('http://weather.com');\n      }\n      else {\n        return exits.success('http://omfgdogs.com');\n      }\n    }\n  })\n\n};\n\n```\n\n\n\n## Bugs &nbsp; [![NPM version](https://badge.fury.io/js/machine-as-action.svg)](http://npmjs.com/package/machine-as-action)\n\nTo report a bug, [click here](http://sailsjs.com/bugs).\n\n\n## Contributing &nbsp; [![Build Status](https://travis-ci.org/treelinehq/machine-as-action.svg?branch=master)](https://travis-ci.org/treelinehq/machine-as-action)\n\nPlease observe the guidelines and conventions laid out in the [Sails project contribution guide](http://sailsjs.com/documentation/contributing) when opening issues or submitting pull requests.\n\n[![NPM](https://nodei.co/npm/machine-as-action.png?downloads=true)](http://npmjs.com/package/machine-as-action)\n\n\n## License\n\nMIT &copy; 2015-2016 Mike McNeil\n\n_Incorporated as a core part of the Sails framework in 2016._\n\nThe [Sails framework](http://sailsjs.com) is free and open-source under the [MIT License](http://sailsjs.com/license).\n","created":"2015-05-13T14:32:04.654Z","modified":"2017-05-31T20:06:34.867Z","lastPublisher":{"name":"mikermcneil","email":"npm@sailsjs.com"},"owners":[{"email":"sgress454@treeline.io","name":"sgress454"},{"email":"npm@sailsjs.com","name":"mikermcneil"}],"other":{"_attachments":{},"_from":".","_id":"machine-as-action","_nodeVersion":"7.9.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/machine-as-action-9.0.2.tgz_1496261193734_0.5252281287685037"},"_npmUser":{"name":"mikermcneil","email":"npm@sailsjs.com"},"_npmVersion":"4.2.0","_rev":"15-41005734c3c9c2cfecece5824b7f15bf","_shasum":"41b5db282c5e0cc7a47bfa2bbb1b465d0e9a9e3e","author":{"name":"Mike McNeil"},"bugs":{"url":"https://github.com/treelinehq/machine-as-action/issues"},"directories":{},"dist-tags":{"latest":"9.0.2","edge":"7.1.0-0","beta":"9.0.1-0"},"dist":{"shasum":"41b5db282c5e0cc7a47bfa2bbb1b465d0e9a9e3e","tarball":"https://registry.npmjs.org/machine-as-action/-/machine-as-action-9.0.2.tgz"},"maintainers":[{"email":"sgress454@treeline.io","name":"sgress454"},{"email":"npm@sailsjs.com","name":"mikermcneil"}],"readmeFilename":"README.md","time":{"modified":"2017-05-31T20:06:34.867Z","created":"2015-05-13T14:32:04.654Z","1.1.0":"2015-05-13T14:32:04.654Z","1.1.1":"2015-05-13T14:47:20.315Z","1.2.0":"2015-05-13T19:33:57.450Z","1.3.0":"2015-05-13T23:45:15.372Z","2.0.0":"2015-05-18T16:56:54.160Z","2.0.1":"2015-05-18T17:10:44.490Z","2.0.2":"2015-05-18T17:26:27.376Z","2.0.3":"2015-05-18T18:00:47.336Z","2.0.4":"2015-05-19T18:59:13.656Z","2.0.5":"2015-05-19T19:44:05.170Z","2.0.6":"2015-06-19T19:54:16.828Z","2.0.7":"2015-07-13T01:11:01.121Z","2.0.8":"2015-08-03T19:07:54.269Z","3.0.0":"2015-12-12T01:10:44.469Z","3.1.0":"2015-12-13T05:16:26.592Z","4.0.0":"2015-12-14T00:57:06.843Z","4.1.0":"2015-12-14T01:37:31.573Z","4.1.1":"2015-12-18T14:19:32.576Z","4.1.2":"2015-12-30T21:54:25.934Z","5.0.0":"2016-06-14T17:04:46.637Z","5.0.1":"2016-06-18T15:52:50.525Z","5.2.0":"2016-07-18T22:49:21.316Z","6.0.0":"2016-07-29T20:12:30.303Z","6.0.1":"2016-08-01T20:39:29.323Z","6.1.0":"2016-08-18T23:06:05.349Z","6.1.1":"2016-08-31T17:44:26.500Z","6.1.2":"2016-09-07T20:34:00.260Z","6.1.3":"2016-09-07T20:43:25.918Z","7.0.0":"2016-09-07T23:36:39.563Z","7.0.1":"2016-09-09T21:51:15.211Z","7.0.2":"2016-09-15T18:54:11.453Z","7.0.3":"2016-10-03T03:50:33.724Z","7.0.4":"2016-10-03T05:01:33.824Z","7.0.5":"2016-10-20T23:06:15.200Z","7.0.6":"2016-10-26T14:57:09.789Z","7.0.7":"2016-11-02T12:36:42.228Z","7.0.10":"2016-11-05T03:41:57.145Z","7.1.0-0":"2016-11-16T16:43:20.971Z","7.0.11":"2016-11-22T21:14:10.872Z","8.0.0":"2017-03-16T00:10:24.109Z","8.0.1":"2017-03-16T22:14:11.966Z","8.0.2":"2017-03-28T21:42:34.062Z","8.1.0":"2017-04-24T23:05:37.972Z","9.0.0":"2017-04-29T04:49:48.767Z","9.0.1-0":"2017-05-25T00:23:52.932Z","9.0.1":"2017-05-25T00:33:33.075Z","9.0.2":"2017-05-31T20:06:34.867Z"}}}