{"name":"mach","version":"1.3.8","description":"HTTP for JavaScript","main":"lib","scripts":{"build":"scripts/build.sh","test":"jshint . && mocha --require babel/register --reporter spec 'modules/**/__tests__/*-test.js'","test-browser":"karma start","release":"scripts/release.sh"},"dependencies":{"bodec":"^1.1.0","bufferedstream":"^3.1.1","describe-property":"^1.0.0","object-assign":"^2.0.0","qs":"^2.3.3","strftime":"^0.9.0","when":"^3.6.4","redis":"~0.11.0"},"optionalDependencies":{"redis":"~0.11.0"},"devDependencies":{"babel":"^4.5.5","babel-core":"^4.5.5","babel-loader":"^4.0.0","expect":"^1.3.0","jshint":"^2.5.10","karma":"^0.12.28","karma-chrome-launcher":"^0.1.7","karma-cli":"0.0.4","karma-mocha":"^0.1.10","karma-sourcemap-loader":"^0.3.2","karma-webpack":"^1.3.1","mocha":"^2.0.1","webpack":"^1.4.15","webpack-dev-server":"^1.6.6"},"repository":"https://github.com/mjackson/mach","keywords":["web","server","http","strata","jsgi","then","promise","promises"],"engines":{"node":"0.10.x"},"license":"MIT","browser":{"./modules/extensions/default.js":"./modules/extensions/default-browser.js","./modules/utils/File.js":"./modules/utils/File-browser.js","./modules/utils/parseURL.js":"./modules/utils/parseURL-browser.js","./modules/utils/readFile.js":"./modules/utils/readFile-browser.js","./modules/utils/sendRequest.js":"./modules/utils/sendRequest-browser.js"},"gitHead":"6237effafd59e17a51df9d0468cc5718fdc27da0","homepage":"https://github.com/mjackson/mach","versions":[{"number":"0.0.0","date":"2013-03-05T06:14:29.041Z"},{"number":"0.1.0","date":"2013-03-07T00:10:11.039Z"},{"number":"0.2.0","date":"2013-03-13T16:09:53.385Z"},{"number":"0.2.1","date":"2013-03-25T19:13:22.724Z"},{"number":"0.2.2","date":"2013-03-26T00:09:37.259Z"},{"number":"0.2.3","date":"2013-03-26T19:01:10.102Z"},{"number":"0.3.0","date":"2013-03-27T20:15:26.805Z"},{"number":"0.3.1","date":"2013-03-27T21:57:38.781Z"},{"number":"0.3.2","date":"2013-03-27T22:22:03.603Z"},{"number":"0.3.3","date":"2013-04-05T03:44:27.174Z"},{"number":"0.3.4","date":"2013-04-10T23:52:33.500Z"},{"number":"0.3.5","date":"2013-05-08T04:50:53.451Z"},{"number":"0.4.0","date":"2013-05-11T21:15:25.886Z"},{"number":"0.4.1","date":"2013-05-13T16:58:13.095Z"},{"number":"0.4.2","date":"2013-05-16T19:25:55.555Z"},{"number":"0.4.3","date":"2013-05-16T19:58:33.421Z"},{"number":"0.4.4","date":"2013-07-30T18:52:41.868Z"},{"number":"0.5.0","date":"2013-08-01T19:03:44.537Z"},{"number":"0.5.1","date":"2013-08-02T18:22:06.400Z"},{"number":"0.5.2","date":"2013-09-05T01:00:28.491Z"},{"number":"0.5.3","date":"2013-09-25T18:05:18.106Z"},{"number":"0.5.4","date":"2013-10-29T00:38:01.646Z"},{"number":"0.6.0","date":"2013-10-29T21:26:49.909Z"},{"number":"0.6.1","date":"2013-12-17T17:05:41.418Z"},{"number":"0.6.2","date":"2014-01-30T18:11:38.125Z"},{"number":"0.6.3","date":"2014-03-02T07:44:14.518Z"},{"number":"0.7.0","date":"2014-03-13T02:09:58.790Z"},{"number":"0.8.0","date":"2014-03-14T16:20:59.845Z"},{"number":"0.9.0","date":"2014-03-17T17:24:45.131Z"},{"number":"0.9.1","date":"2014-03-17T18:38:55.484Z"},{"number":"0.9.2","date":"2014-03-19T15:58:40.866Z"},{"number":"0.9.3","date":"2014-06-25T21:29:38.411Z"},{"number":"0.10.0","date":"2014-07-05T19:53:39.428Z"},{"number":"0.10.1","date":"2014-07-06T15:02:05.152Z"},{"number":"0.11.0","date":"2014-07-12T05:36:14.106Z"},{"number":"0.12.0","date":"2014-07-17T18:24:04.636Z"},{"number":"1.0.0-rc1","date":"2014-11-09T06:08:55.728Z"},{"number":"1.0.0-rc2","date":"2014-11-15T17:25:59.899Z"},{"number":"1.0.0-rc3","date":"2014-12-02T07:35:50.893Z"},{"number":"1.0.0-rc4","date":"2014-12-23T18:29:58.412Z"},{"number":"1.0.0","date":"2015-01-02T18:35:44.025Z"},{"number":"1.0.1","date":"2015-01-03T07:07:30.087Z"},{"number":"1.0.2","date":"2015-01-04T00:36:22.230Z"},{"number":"1.1.0","date":"2015-01-14T17:33:33.316Z"},{"number":"1.2.0","date":"2015-01-19T04:37:19.201Z"},{"number":"1.3.0","date":"2015-02-26T23:34:50.752Z"},{"number":"1.3.1","date":"2015-02-27T00:39:25.829Z"},{"number":"1.3.2","date":"2015-02-27T01:01:19.339Z"},{"number":"1.3.3","date":"2015-03-19T18:09:57.116Z"},{"number":"1.3.4","date":"2015-03-19T18:16:06.728Z"},{"number":"1.3.5","date":"2015-03-19T18:22:35.021Z"},{"number":"1.3.6","date":"2015-05-10T06:03:42.050Z"},{"number":"1.3.7","date":"2015-05-10T06:06:04.550Z"},{"number":"1.3.8","date":"2015-05-10T06:08:45.338Z"}],"readme":"[![npm package](https://img.shields.io/npm/v/mach.svg?style=flat-square)](https://www.npmjs.org/package/mach)\n[![build status](https://img.shields.io/travis/mjackson/mach.svg?style=flat-square)](https://travis-ci.org/mjackson/mach)\n[![dependency status](https://img.shields.io/david/mjackson/mach.svg?style=flat-square)](https://david-dm.org/mjackson/mach)\n[![code climate](https://img.shields.io/codeclimate/github/mjackson/mach.svg?style=flat-square)](https://codeclimate.com/github/mjackson/mach)\n\n[Mach](https://github.com/mjackson/mach) is an HTTP server and client library that runs in both node.js and the browser. It has the following goals:\n\n  * Simplicity: straightforward mapping of HTTP requests to JavaScript function calls\n  * Asynchronous: responses can be deferred using Promises/A+ promises\n  * Streaming: request and response bodies can be streamed\n  * Composability: middleware composes easily using promises\n  * Robustness: promises propagate errors up the call stack, simplifying error handling\n\n### Servers\n\nWriting a \"Hello world\" HTTP server in Mach is simple.\n\n```js\nvar mach = require('mach');\n\nmach.serve(function (conn) {\n  return \"Hello world!\";\n});\n```\n\nAll mach applications receive a single argument: a [Connection](https://github.com/mjackson/mach/blob/master/modules/Connection.js) object. This object contains information about both the request and the response, as well as metadata including the `method` used in the request, the [location](https://github.com/mjackson/mach/blob/master/modules/Location.js) of the request, the `status` of the response, and some helper methods.\n\nApplications can send responses asynchronously using JavaScript promises. Simply return a promise from your app that resolves when the response is ready.\n\n```js\nvar app = mach.stack();\n\napp.use(mach.logger);\n\napp.get('/users/:id', function (conn) {\n  var id = conn.params.id;\n\n  return getUser(id).then(function (user) {\n    conn.json(200, user);\n  });\n});\n```\n\nThe call to `app.use` above illustrates how middleware is used to compose applications. Mach ships with the following middleware:\n\n- [`mach.basicAuth`](https://github.com/mjackson/mach/blob/master/modules/middleware/basicAuth.js): Provides authentication using [HTTP Basic auth](http://en.wikipedia.org/wiki/Basic_access_authentication)\n- [`mach.catch`](https://github.com/mjackson/mach/blob/master/modules/middleware/catch.js): Error handling at any position in the stack\n- [`mach.charset`](https://github.com/mjackson/mach/blob/master/modules/middleware/charset.js): Provides a default [charset](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17) in responses\n- [`mach.contentType`](https://github.com/mjackson/mach/blob/master/modules/middleware/contentType.js): Provides a default [`Content-Type`](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17)\n- [`mach.favicon`](https://github.com/mjackson/mach/blob/master/modules/middleware/favicon.js): Handles requests for `/favicon.ico`\n- [`mach.file`](https://github.com/mjackson/mach/blob/master/modules/middleware/file.js): Efficiently serves static files\n- [`mach.gzip`](https://github.com/mjackson/mach/blob/master/modules/middleware/gzip.js): [Gzip](http://en.wikipedia.org/wiki/Gzip)-encodes response content for clients that `Accept: gzip`\n- [`mach.logger`](https://github.com/mjackson/mach/blob/master/modules/middleware/logger.js): Logs HTTP requests to the console\n- [`mach.mapper`](https://github.com/mjackson/mach/blob/master/modules/middleware/mapper.js): Provides virtual host mapping, similar to [Apache's Virtual Hosts](http://httpd.apache.org/docs/2.2/vhosts/) or [nginx server blocks](http://nginx.org/en/docs/http/ngx_http_core_module.html#server)\n- [`mach.methodOverride`](https://github.com/mjackson/mach/blob/master/modules/middleware/methodOverride.js): Overrides the HTTP method used in the request, for clients (like HTML forms) that don't support methods other than `GET` and `POST`\n- [`mach.modified`](https://github.com/mjackson/mach/blob/master/modules/middleware/modified.js): HTTP caching using [`Last-Modified`](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.29) and [`ETag`](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19)\n- [`mach.params`](https://github.com/mjackson/mach/blob/master/modules/middleware/params.js): Multipart request parsing and handling\n- [`mach.proxy`](https://github.com/mjackson/mach/blob/master/modules/middleware/proxy.js): Proxy request through to an alternate location\n- [`mach.rewrite`](https://github.com/mjackson/mach/blob/master/modules/middleware/rewrite.js): Rewrites request URLs on the fly, similar to [Apache's mod_rewrite](http://httpd.apache.org/docs/current/mod/mod_rewrite.html)\n- [`mach.router`](https://github.com/mjackson/mach/blob/master/modules/middleware/router.js): Request routing (ala [Sinatra](http://www.sinatrarb.com/)) based on the URL pathname\n- [`mach.session`](https://github.com/mjackson/mach/blob/master/modules/middleware/session.js): HTTP sessions with pluggable storage including [memory](https://github.com/mjackson/mach/blob/master/modules/middleware/session/MemoryStore.js) (for development and testing), [cookies](https://github.com/mjackson/mach/blob/master/modules/middleware/session/CookieStore.js), and [Redis](https://github.com/mjackson/mach/blob/master/modules/middleware/session/RedisStore.js)\n- [`mach.stack`](https://github.com/mjackson/mach/blob/master/modules/middleware/stack.js): Provides a `use` mechanism for composing applications fronted by middleware\n- [`mach.token`](https://github.com/mjackson/mach/blob/master/modules/middleware/token.js): Cross-site request forgery protection\n\nPlease check out the source of a middleware file for detailed documentation on how to use it.\n\n### Clients\n\nWriting an HTTP client is similarly straightforward.\n\n```js\nvar mach = require('mach');\n\nmach.get('http://twitter.com').then(function (conn) {\n  console.log(conn.status, conn.response.headers, conn.responseText);\n});\n```\n\nBy default client responses are buffered and stored in the `responseText` connection variable for convenience. However, if you'd like to access the raw stream of binary data in the response, you can use the `binary` flag.\n\n```js\nvar fs = require('fs');\n\nmach.get({\n  url: 'http://twitter.com',\n  binary: true\n}).then(function (conn) {\n  conn.responseText; // undefined\n  conn.response.content.pipe(fs.createWriteStream('twitter.html'));\n});\n```\n\n### Proxies\n\nBecause all Mach applications share the same signature, it's easy to combine them in interesting ways. Mach's HTTP proxy implementation illustrates this beautifully: a proxy is simply an application that forwards the request somewhere else.\n\n```js\nvar proxyApp = mach.createProxy('http://twitter.com');\n\n// In a server environment we can use the mach.proxy middleware\n// to proxy all requests to the proxy's location.\napp.use(mach.proxy, proxyApp);\n\n// In a client application we can call the proxy directly to\n// send a request to the proxy's location.\nmach.post(proxyApp, {\n  params: {\n    username: 'mjackson'\n  }\n});\n```\n\n### Installation\n\nUsing [npm](https://www.npmjs.org/):\n\n    $ npm install mach\n\nOr, include [`lib/umd/mach.min.js`](https://github.com/mjackson/mach/blob/master/lib/umd/mach.min.js) in a `<script>` tag:\n\n```html\n<script src=\"mach.min.js\"></script>\n```\n\n### Issues\n\nPlease file issues on the [issue tracker on GitHub](https://github.com/mjackson/mach/issues).\n\n### Tests\n\nTo run the tests in node:\n\n    $ npm install\n    $ npm test\n\nThe Redis session store tests rely on Redis to run successfully. By default they are skipped, but if you want to run them fire up a Redis server on the default host and port and set the `$WITH_REDIS` environment variable.\n\n    $ WITH_REDIS=1 npm test\n\nTo run the tests in Chrome:\n\n    $ npm install\n    $ npm run test-browser\n\n### Influences\n\n  * [Strata](http://stratajs.org/)\n  * [Q-HTTP](https://github.com/kriskowal/q-http)\n  * [JSGI & Jack](http://jackjs.org/)\n  * [node.js](http://nodejs.org/)\n\n### License\n\n[MIT](http://opensource.org/licenses/MIT)\n","starsCount":4,"created":"2013-03-05T06:14:28.181Z","modified":"2015-05-10T06:08:45.338Z","lastPublisher":{"name":"mjackson","email":"mjijackson@gmail.com"},"owners":[{"name":"mjackson","email":"mjijackson@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"mach","_nodeVersion":"0.10.28","_npmUser":{"name":"mjackson","email":"mjijackson@gmail.com"},"_npmVersion":"2.7.5","_rev":"1-4d4425297be1f44e03f93d418764283b","_shasum":"15770498925066b28fadfb87e9282c8601f72111","author":{"name":"Michael Jackson"},"bugs":{"url":"https://github.com/mjackson/mach/issues"},"directories":{},"dist-tags":{"latest":"1.3.8"},"dist":{"shasum":"15770498925066b28fadfb87e9282c8601f72111","tarball":"http://registry.npmjs.org/mach/-/mach-1.3.8.tgz"},"maintainers":[{"name":"mjackson","email":"mjijackson@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-05-10T06:08:45.338Z","created":"2013-03-05T06:14:28.181Z","0.0.0":"2013-03-05T06:14:29.041Z","0.1.0":"2013-03-07T00:10:11.039Z","0.2.0":"2013-03-13T16:09:53.385Z","0.2.1":"2013-03-25T19:13:22.724Z","0.2.2":"2013-03-26T00:09:37.259Z","0.2.3":"2013-03-26T19:01:10.102Z","0.3.0":"2013-03-27T20:15:26.805Z","0.3.1":"2013-03-27T21:57:38.781Z","0.3.2":"2013-03-27T22:22:03.603Z","0.3.3":"2013-04-05T03:44:27.174Z","0.3.4":"2013-04-10T23:52:33.500Z","0.3.5":"2013-05-08T04:50:53.451Z","0.4.0":"2013-05-11T21:15:25.886Z","0.4.1":"2013-05-13T16:58:13.095Z","0.4.2":"2013-05-16T19:25:55.555Z","0.4.3":"2013-05-16T19:58:33.421Z","0.4.4":"2013-07-30T18:52:41.868Z","0.5.0":"2013-08-01T19:03:44.537Z","0.5.1":"2013-08-02T18:22:06.400Z","0.5.2":"2013-09-05T01:00:28.491Z","0.5.3":"2013-09-25T18:05:18.106Z","0.5.4":"2013-10-29T00:38:01.646Z","0.6.0":"2013-10-29T21:26:49.909Z","0.6.1":"2013-12-17T17:05:41.418Z","0.6.2":"2014-01-30T18:11:38.125Z","0.6.3":"2014-03-02T07:44:14.518Z","0.7.0":"2014-03-13T02:09:58.790Z","0.8.0":"2014-03-14T16:20:59.845Z","0.9.0":"2014-03-17T17:24:45.131Z","0.9.1":"2014-03-17T18:38:55.484Z","0.9.2":"2014-03-19T15:58:40.866Z","0.9.3":"2014-06-25T21:29:38.411Z","0.10.0":"2014-07-05T19:53:39.428Z","0.10.1":"2014-07-06T15:02:05.152Z","0.11.0":"2014-07-12T05:36:14.106Z","0.12.0":"2014-07-17T18:24:04.636Z","1.0.0-rc1":"2014-11-09T06:08:55.728Z","1.0.0-rc2":"2014-11-15T17:25:59.899Z","1.0.0-rc3":"2014-12-02T07:35:50.893Z","1.0.0-rc4":"2014-12-23T18:29:58.412Z","1.0.0":"2015-01-02T18:35:44.025Z","1.0.1":"2015-01-03T07:07:30.087Z","1.0.2":"2015-01-04T00:36:22.230Z","1.1.0":"2015-01-14T17:33:33.316Z","1.2.0":"2015-01-19T04:37:19.201Z","1.3.0":"2015-02-26T23:34:50.752Z","1.3.1":"2015-02-27T00:39:25.829Z","1.3.2":"2015-02-27T01:01:19.339Z","1.3.3":"2015-03-19T18:09:57.116Z","1.3.4":"2015-03-19T18:16:06.728Z","1.3.5":"2015-03-19T18:22:35.021Z","1.3.6":"2015-05-10T06:03:42.050Z","1.3.7":"2015-05-10T06:06:04.550Z","1.3.8":"2015-05-10T06:08:45.338Z"},"users":{"ivangaravito":true,"engleek":true,"dimd13":true,"zanner":true}}}