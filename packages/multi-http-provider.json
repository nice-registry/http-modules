{"name":"multi-http-provider","version":"0.1.3","description":"Enable the web3 api to connect to several Ethereum nodes to ensure that a node will be reached if others are down.  ","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/guenoledc/multi-http-provider","keywords":["ethereum","web3","httpprovider"],"license":"ISC","homepage":"https://github.com/guenoledc/multi-http-provider/my_package","gitHead":"d1fe27d26dce82dabcc3cdcc44191b3ea574d880","versions":[{"number":"0.1.0","date":"2017-03-19T18:57:34.229Z"},{"number":"0.1.1","date":"2017-03-19T19:04:40.926Z"},{"number":"0.1.2","date":"2017-03-22T10:18:24.583Z"},{"number":"0.1.3","date":"2017-03-27T12:32:10.806Z"}],"readme":"# Documentation page for multi-http-provider\n\nPackage that sits on top of web3 package by frozeman.\nThis package adds a MultiHttpProvider in the Web3 module:\nThis provider enables to connect to 1, 2 or more geth nodes simultaneously using the underlying HttpProvider of the web3 module. The provider has the following behavior\n- It is initialized with an array of hosts, and establish connection with the first available.\n- When an http request fails to reach the host (ie the geth node) the connection is considered dead and the connection is moved to the next available one. The onChange callback is raised. The failed request is sent again and result returned to the caller transparently.\n- Any filter subscriptions active are resubscribed with the new node (transparently) and any callback will continue to work.\n\n\nYou need to run one or several local Ethereum node(s) to use this library.\n\n## Installation\n\n### Node.js\n\n```bash\nnpm install multi-http-provider --save\n```\n\n### Meteor.js\n\n```bash\nmeteor npm install multi-http-provider --save \n```\n\n## Usage\n\nLoading the packages. Second require will modify Web3.providers\n```js\nvar Web3 = require('web3');\nrequire('multi-http-provider'); // adds the MultiHttpProvider to the Web3.providers\n```\n\nInitializing and use Web3 API normally. Also see web3 package documentation\n```js\nlet ethereum_url1 = \"http://localhost:8545\"; // node one\nlet ethereum_url2 = \"http://localhost:8546\"; // node two\nweb3 = new Web3(new Web3.providers.MultiHttpProvider([ethereum_url1, ethereum_url2], <optional timeout>));\nconsole.log(\"Connected to Geth console\", web3.version.node, \"on block\", eth.blockNumber);\neth.defaultAccount = eth.coinbase;\nweb3.personal.unlockAccount(eth.defaultAccount, \"capture your password here\", 10);\n\noutput: Connected to Geth console Geth/v1.5.8-stable-f58fb322/darwin/go1.7.5 on block 62353\n```\n\nRegister a onChange callback:\n- param 1 (multi): is the instance of the MultiHttpProvider\n- param 2 (http) : is the instance of the HttpProvider currently connected with. If no node is available, this param is null.\n```js\nvar onConnectionChange = function(multi, http){\n\t\t\tconsole.log(\"MultiHttpProvider changed to:\",(http?http.host:\"no connection\"));\n\t\t\t}\nweb3.currentProvider.onChange(onConnectionChange);\n```\n\n## Documentation of internal attributes\nOnly the most relevant\n\n### hosts\nthe array of hosts provided in construction. You can eventually modify this array dynamically.\n\n### currentProvider\nthe current HttpProvider in use. will be \"undefined\" if no connection is available\n\n### switchToNextConnected()\nFunction called automatically when the provider detects a connection issue with the current HttpProvider.\nYou can call this function yourself if you wish to switch manually (load balancing for instance)\nWhen called, this function will (in that order)\n- select the next available HttpProvider (meaning where a rpc call can be made)\n- recreate all subscriptions (in synchronous calls) and store the new filterId (see below)\n- call the onChange callbacks that have been registered.\n\n### subscriptions\nAn object dictionary with the filterId registered (as available in the Filter object of the web3 module returned by the various filter and event functions)\nit contains in front of each filterId a structure as follow:\n- newId: the filterId in the current geth node (possibly different than the one the filter has been register into first)\n- method: the geth rpc method used to create the filter\n- params: the parameters provided to the node to create the filter.\nsee json rpc documentation of geth node for filter at https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newfilter\n```\n> web3.currentProvider.subscriptions\n{ \n   '0x4e1e5457d84ef49a0ba97d972329dfd9': \n            { newId: '0x3a05fc1f64e0fd75d780a8319f01ba88',\n              method: 'eth_newBlockFilter',\n\t\t\tparams: [] } \n}\n```\nThis structure allows to recreate the subscription to the new geth node when the connection switches \nand to map the original filterId (known by web3 module) with the current filterId known in the current geth node.\n__DO NOT TAMPER THIS STRUCTURE UNLESS YOU KNOW WHAT YOU ARE DOING.__\n\n### _traceMessage\nset to true to activate the log on the console of the outbound and inbound messages as communicated to/from this provided\n```\n<-- { json message returned to web3 }\n--> { json message received from web3 }\n```\n\n\n## Change log\n### v 0.1.2\n- correction of a bug that did not properly released the subscriptions\n- addition of the internal field _traceMessage (default is false) to log on the console what the provider send and receive\n\n[npm-image]: https://badge.fury.io/js/web3.png\n[npm-url]: https://npmjs.org/package/web3\n[travis-image]: https://travis-ci.org/ethereum/web3.js.svg\n[travis-url]: https://travis-ci.org/ethereum/web3.js\n[dep-image]: https://david-dm.org/ethereum/web3.js.svg\n[dep-url]: https://david-dm.org/ethereum/web3.js\n[dep-dev-image]: https://david-dm.org/ethereum/web3.js/dev-status.svg\n[dep-dev-url]: https://david-dm.org/ethereum/web3.js#info=devDependencies\n[coveralls-image]: https://coveralls.io/repos/ethereum/web3.js/badge.svg?branch=master\n[coveralls-url]: https://coveralls.io/r/ethereum/web3.js?branch=master\n[waffle-image]: https://badge.waffle.io/ethereum/web3.js.svg?label=ready&title=Ready\n[waffle-url]: http://waffle.io/ethereum/web3.js\n\n","created":"2017-03-19T18:57:34.229Z","modified":"2017-03-27T12:32:10.806Z","lastPublisher":{"name":"guenoledc","email":"guenoledc@yahoo.fr"},"owners":[{"name":"guenoledc","email":"guenoledc@yahoo.fr"}],"other":{"_attachments":{},"_from":".","_id":"multi-http-provider","_nodeVersion":"7.7.3","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/multi-http-provider-0.1.3.tgz_1490617930235_0.308284901548177"},"_npmUser":{"name":"guenoledc","email":"guenoledc@yahoo.fr"},"_npmVersion":"4.1.2","_rev":"4-4de86c878cb5028f7bdbc5f5d910cc85","_shasum":"cca08ae80d9162c1fc397989b0c513f70daf03d2","author":{"name":"Guénolé de Cadoudal","email":"guenoledc@yahoo.fr"},"bugs":{"url":"https://github.com/guenoledc/multi-http-provider/issues"},"directories":{},"dist-tags":{"latest":"0.1.3"},"dist":{"shasum":"cca08ae80d9162c1fc397989b0c513f70daf03d2","tarball":"https://registry.npmjs.org/multi-http-provider/-/multi-http-provider-0.1.3.tgz"},"maintainers":[{"name":"guenoledc","email":"guenoledc@yahoo.fr"}],"readmeFilename":"README.md","time":{"modified":"2017-03-27T12:32:10.806Z","created":"2017-03-19T18:57:34.229Z","0.1.0":"2017-03-19T18:57:34.229Z","0.1.1":"2017-03-19T19:04:40.926Z","0.1.2":"2017-03-22T10:18:24.583Z","0.1.3":"2017-03-27T12:32:10.806Z"}}}