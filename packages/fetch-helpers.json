{"name":"fetch-helpers","version":"1.4.0","description":"Response handlers and helpers to parse JSON and deal with HTTP errors when using the browser fetch API.","keywords":["fetch","checkStatus","parseJSON","parseJSONError","batch"],"license":"MIT","main":"lib/index.js","module":"es/index.js","scripts":{"compile-cjs":"rimraf lib && cross-env BABEL_ENV=cjs babel src -d lib","compile-es":"rimraf es && babel src -d es","compile":"npm run compile-cjs && npm run compile-es","lint":"eslint src","test":"cross-env BABEL_ENV=cjs mocha --compilers js:babel-core/register --recursive --require babel-polyfill","prepublish":"npm run lint && npm test && npm run compile"},"repository":"https://github.com/chadly/fetch-helpers","dependencies":{"lodash":"4.x"},"devDependencies":{"babel-cli":"6.x","babel-core":"6.x","babel-plugin-lodash":"3.x","babel-plugin-transform-export-extensions":"6.x","babel-polyfill":"6.x","babel-preset-es2015":"6.x","babel-preset-stage-2":"6.x","chai":"3.x","cross-env":"3.x","eslint":"3.x","eslint-config-civicsource":"2.x","mocha":"3.x","rimraf":"2.x"},"gitHead":"4a43815707b9b62c22b7e50a564608fcc68074b4","homepage":"https://github.com/chadly/fetch-helpers#readme","versions":[{"number":"1.0.0","date":"2016-03-15T01:03:48.753Z"},{"number":"1.0.1","date":"2016-03-15T01:33:06.681Z"},{"number":"1.0.2","date":"2016-03-15T01:37:03.201Z"},{"number":"1.0.3","date":"2017-01-06T16:42:01.889Z"},{"number":"1.1.0-alpha","date":"2017-01-26T21:13:57.613Z"},{"number":"1.1.0-alpha.2","date":"2017-01-26T21:20:44.331Z"},{"number":"1.1.0","date":"2017-01-26T22:12:35.112Z"},{"number":"1.2.0","date":"2017-02-06T23:17:01.656Z"},{"number":"1.3.0","date":"2017-02-09T20:03:04.428Z"},{"number":"1.4.0","date":"2017-03-08T19:54:56.021Z"}],"readme":"# Fetch Helpers\r\n\r\n> Response handlers and helpers to parse JSON and deal with HTTP errors when using the [browser fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\r\n\r\n[See here for a polyfill](https://github.com/github/fetch) if you are using the fetch API in a browser that doesn't support it yet.\r\n\r\n## Install\r\n\r\n```\r\nnpm install fetch-helpers --save\r\n```\r\n\r\n## Usage\r\n\r\n### `checkStatus(response)`\r\n\r\n[Read here](https://github.com/github/fetch#handling-http-error-statuses) for the inspiration for this function. It will reject fetch requests on any non-2xx response. It differs from the example in that it will try to parse a JSON body from the non-200 response and will set any `message` field (if it exists) from the JSON body as the error message.\r\n\r\n```js\r\nimport { checkStatus } from \"fetch-helpers\";\r\n\r\n//given a 400 Bad Request response with a JSON body of:\r\n//{ \"message\": \"Invalid arguments. Try again.\", \"someOtherThing\": 42 }\r\n\r\nfetch(\"/data\", {\r\n\tmethod: \"GET\",\r\n\theaders: {\r\n\t\tAccept: \"application/json\"\r\n\t}\r\n})\r\n.then(checkStatus)\r\n.catch(err => {\r\n\tconsole.log(err.message); //Invalid Arguments. Try again.\r\n\tconsole.log(err.response.statusText); //Bad Request\r\n\tconsole.log(err.response.jsonBody); //{ \"message\": \"Invalid arguments. Try again.\", \"someOtherThing\": 42 }\r\n});\r\n```\r\n\r\nIt will try to look for a `message` field first, and then an `exceptionMessage` falling back to the `statusText` if neither one exist or if the response body is not JSON.\r\n\r\n### `parseJSON(response)`\r\n\r\nA simple response handler that will simply parse the response body as JSON.\r\n\r\n```js\r\nimport { parseJSON } from \"fetch-helpers\";\r\n\r\n//given a 400 Bad Request response with a JSON body of:\r\n//{ \"message\": \"Invalid arguments. Try again.\", \"someOtherThing\": 42 }\r\n\r\nfetch(\"/data\", {\r\n\tmethod: \"GET\",\r\n\theaders: {\r\n\t\tAccept: \"application/json\"\r\n\t}\r\n})\r\n.then(parseJSON)\r\n.then(json => console.log(json));\r\n```\r\n\r\n### `batchFetch(keyName, performFetch, { maxBatchSize, timeout })`\r\n\r\nA utility to allow easily batching `fetch` requests. Calling code calls the function as if it will make a single request while, internally, it will wait a predetermined amount of time before actually making the request.\r\n\r\n```js\r\nimport { batchFetch } from \"fetch-helpers\";\r\n\r\nconst getItem = batchFetch(\"itemId\", chunk => fetch(`http://example.com/api/items/${chunk.join(\",\")}/`, {\r\n\tmethod: \"GET\"\r\n}));\r\n\r\nfor (let i = 1; i <= 10; i++) {\r\n\tgetItem(i).then(item => console.log(`item with id ${item.itemId} retrieved from the server`));\r\n}\r\n```\r\n\r\nThe above example will make one request to the URL `http://example.com/api/items/1,2,3,4,5,6,7,8,9,10/` but resolve all promises separately so that calling code is none-the-wiser that its requests have been batched into one. The `keyName` (in this case `itemId`) must be returned from the server in the results as that is how `batchFetch` matches what promises to resolve/reject.\r\n\r\nThe default batch size is 10 and the default timeout is 100ms. Both can be overridden:\r\n\r\n```js\r\nconst getItem = batchFetch(\"itemId\", chunk => fetch(`http://example.com/api/items/${chunk.join(\",\")}/`, {\r\n\tmethod: \"GET\"\r\n}), {\r\n\tmaxBatchSize: 30,\r\n\ttimeout = 300\r\n});\r\n```\r\n\r\nAny extra parameters passed to the resulting function will be passed to the `performFetch` function:\r\n\r\n```js\r\nconst getItem = batchFetch(\"itemId\", (chunk, method) => fetch(`http://example.com/api/items/${chunk.join(\",\")}/`, {\r\n\tmethod: method\r\n}));\r\n\r\ngetItem(42, \"GET\");\r\ngetItem(13, \"GET\");\r\ngetItem(69, \"GET\");\r\ngetItem(420, \"GET\"); // the last one wins (as far as the extra params passed to performFetch)\r\n```\r\n\r\n## Build Locally\r\n\r\nAfter cloning this repo, run:\r\n\r\n```\r\nnpm install\r\nnpm run compile\r\n```\r\n\r\nThis will build the `src` into `lib` using babel.\r\n","created":"2016-03-15T01:03:48.753Z","modified":"2017-03-08T19:54:56.021Z","lastPublisher":{"name":"chadly","email":"npm@chadly.net"},"owners":[{"name":"chadly","email":"npm@chadly.net"}],"other":{"_attachments":{},"_from":".","_id":"fetch-helpers","_nodeVersion":"7.2.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/fetch-helpers-1.4.0.tgz_1489002893990_0.5862494106404483"},"_npmUser":{"name":"chadly","email":"npm@chadly.net"},"_npmVersion":"4.0.3","_rev":"8-2c4bbfbe43623765b935d8b464b9e540","_shasum":"933951c0e261e878fc8c2040622a193ac9690aa0","author":{"name":"Chad Lee"},"bugs":{"url":"https://github.com/chadly/fetch-helpers/issues"},"directories":{},"dist-tags":{"latest":"1.4.0"},"dist":{"shasum":"933951c0e261e878fc8c2040622a193ac9690aa0","tarball":"https://registry.npmjs.org/fetch-helpers/-/fetch-helpers-1.4.0.tgz"},"maintainers":[{"name":"chadly","email":"npm@chadly.net"}],"readmeFilename":"README.md","time":{"modified":"2017-03-08T19:54:56.021Z","created":"2016-03-15T01:03:48.753Z","1.0.0":"2016-03-15T01:03:48.753Z","1.0.1":"2016-03-15T01:33:06.681Z","1.0.2":"2016-03-15T01:37:03.201Z","1.0.3":"2017-01-06T16:42:01.889Z","1.1.0-alpha":"2017-01-26T21:13:57.613Z","1.1.0-alpha.2":"2017-01-26T21:20:44.331Z","1.1.0":"2017-01-26T22:12:35.112Z","1.2.0":"2017-02-06T23:17:01.656Z","1.3.0":"2017-02-09T20:03:04.428Z","1.4.0":"2017-03-08T19:54:56.021Z"}}}