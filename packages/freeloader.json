{"name":"freeloader","version":"0.0.3","description":"Stream-based HTTP load testing framework","license":"MIT","keywords":["http","load","test","testing","performance","ab","jmeter","streams"],"repository":"https://github.com/rprieto/freeloader","main":"index.js","scripts":{"test":"mocha"},"dependencies":{"q":"~1.0.0","unirest":"~0.1.1"},"devDependencies":{"mocha":"~1.17.1","should":"~3.1.2","sinon":"~1.8.2"},"homepage":"https://github.com/rprieto/freeloader","versions":[{"number":"0.0.1","date":"2014-02-18T12:34:40.877Z"},{"number":"0.0.2","date":"2014-02-19T14:27:43.341Z"},{"number":"0.0.3","date":"2014-02-20T03:44:09.659Z"}],"readme":"# freeloader\n\nJust a super easy load-testing framework.\n\n- no complex GUI to get lost in\n- load tests == code, and yes you should check them in :)\n- easy to plug-in to your CI server\n- get started in seconds\n\n[![NPM](https://nodei.co/npm/freeloader.svg)](http://www.npmjs.org/package/freeloader)\n\n## Getting started\n\nFreeloader uses 4 basic keywords:\n\n- `request` to create an HTTP request using [unirest](https://github.com/mashape/unirest-nodejs)\n- `emit` to push the request down the pipeline\n- `send` to make the actual HTTP call\n- `join` to join 2 streams together\n\nThe simplest test looks like:\n\n```js\nrequire('freeloader').global();\n\n// See unirest documentation for all the options (headers, file uploads...)\nvar r = request.get('http://localhost:3000/people')\n               .header('Accept', 'application/json');\n\nemit(r).pipe(send());\n```\n\nThat's it! This test sends a single HTTP request, and finishes as soon as the response is received.\n\n## Building a pipeline\n\nIt becomes a lot more interesting when we start building a pipeline. Each step in the pipeline has access to all requests & responses. They can modify payloads, generate more requests, or collect data for reporting.\n\n[freeloader-bundle](http://github.com/rprieto/freeloader-bundle) contains a lot of useful modules to get started. Each module is an instance of a Node.js stream, and you can also easily [create your own](https://github.com/rprieto/freeloader-stream).\n\n```js\nrequire('freeloader-bundle').global();\n\nemit(r)\n.pipe(stopTimer('30s'))\n.pipe(concurrent(50))\n.pipe(transform(randomData))\n.pipe(progressDots())\n.pipe(consoleSummary())\n.pipe(responseTimeGraph('./graph.jpg'))\n.pipe(send())\n```\n\nWhich outputs something like:\n\n```bash\n............................................................\n....................................................\n\nWaiting for pending requests to finish...\n\nResponse count = 112\n\nResponse times\n  Min             =  16ms\n  Max             = 182ms\n  Mean            =  66ms\n  Median          =  58ms\n  75th percentile =  82ms\n  95th percentile = 150ms\n```\n\nThe test suite will end:\n\n- when every request has been sent\n- or when you press `Ctrl-C`\n- or when a module adds its own stopping condition\n\nTest pipelines can easily be included in a CI test suite:\n\n```js\nit('generates load test reports', function(done) {\n  emit(r1)\n  .pipe(times(50))\n  .pipe(jsonSummary('./report.json'))\n  .pipe(callback(done))\n  .pipe(send());\n});\n```\n\n## Joining streams\n\nStreams can also be joined for more complex scenarios. Here are a few examples:\n\n- Emit 2 different requests with a total concurrency of 50\n\n```js\njoin(emit(r1), emit(r2))\n.pipe(concurrent(50))\n.pipe(summary())\n.pipe(send());\n```\n\n- Emit 2 different requests with a concurrency of 50 each\n\n```js\nvar s1 = emit(r1).pipe(concurrent(50));\nvar s2 = emit(r2).pipe(concurrent(50));\njoin(s1, s2)\n.pipe(summary())\n.pipe(send());\n```\n\nIt's up to each reporter to either give global stats, or group the report by request URL.\n","starsCount":1,"created":"2014-02-18T12:34:37.154Z","modified":"2016-11-18T00:36:01.607Z","lastPublisher":{"name":"rprieto","email":"romain@asyncdev.net"},"owners":[{"name":"asyncadventures","email":"asyncadventures@gmail.com"},{"name":"sullivanpt","email":"patricktrentsullivan@yahoo.com"}],"other":{"_attachments":{},"_from":".","_id":"freeloader","_npmUser":{"name":"rprieto","email":"romain@asyncdev.net"},"_npmVersion":"1.3.24","_rev":"3-32f13ada2ca8c595b81828f012c446db","author":{"name":"Romain Prieto"},"bugs":{"url":"https://github.com/rprieto/freeloader/issues"},"directories":{},"dist-tags":{"latest":"0.0.3"},"dist":{"shasum":"b25581511f6e59b48e4740940f6757a83d4e0ab8","tarball":"http://registry.npmjs.org/freeloader/-/freeloader-0.0.3.tgz"},"maintainers":[{"name":"asyncadventures","email":"asyncadventures@gmail.com"},{"name":"sullivanpt","email":"patricktrentsullivan@yahoo.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-18T00:36:01.607Z","created":"2014-02-18T12:34:37.154Z","0.0.1":"2014-02-18T12:34:40.877Z","0.0.2":"2014-02-19T14:27:43.341Z","0.0.3":"2014-02-20T03:44:09.659Z"},"users":{"acjohnso25":true}}}