{"name":"jsonrpc-bidirectional","description":"Bidirectional JSONRPC over web sockets or HTTP with extensive plugin support.","version":"5.0.0","scripts":{"build":"node build.js","test":"node --expose-gc --max-old-space-size=1024 tests/main.js","benchmark":"node --expose-gc --max-old-space-size=1024 tests/benchmark.js","benchmark_endless_new_websockets":"node --expose-gc --max-old-space-size=1024 tests/benchmark_endless_new_websockets.js","lint":"eslint src tests --quiet"},"repository":"https://github.com/oxygen/jsonrpc-bidirectional","homepage":"https://github.com/oxygen/jsonrpc-bidirectional","license":"MIT","preferGlobal":false,"engines":{"node":">=7.80"},"browser":{"child_process":false},"dependencies":{"node-fetch":"^1.6.3","babel-polyfill":"^6.23.0","babel-runtime":"^6.23.0","es6-promise":"^4.1.0","jssha":"^2.2.0","whatwg-fetch":"^2.0.3"},"optionalDependencies":{"babel-polyfill":"^6.23.0","babel-runtime":"^6.23.0","es6-promise":"^4.1.0","jssha":"^2.2.0","whatwg-fetch":"^2.0.3"},"devDependencies":{"@types/node":"^7.0.13","babel-core":"^6.24.1","babel-eslint":"^7.2.2","babel-loader":"^6.4.1","babel-plugin-async-to-promises":"^1.0.5","babel-plugin-remove-comments":"^2.0.0","babel-preset-es2015":"^6.24.1","babel-preset-stage-3":"^6.24.1","eslint":"^3.19.0","eslint-plugin-jsdoc":"^3.0.2","phantom":"^4.0.2","recursive-keys":"^0.9.0","sleep-promise":"^2.0.0","uglify-js":"^2.8.22","uws":"^0.14.1","webpack":"^2.4.1","ws":"^2.2.3"},"files":["builds/browser/es5/jsonrpc.min.js","builds/browser/es5/jsonrpc.min.js.map","builds/browser/es7/jsonrpc.min.js","builds/browser/es7/jsonrpc.min.js.map","LICENSE","src/*","index.js","README.MD","node_modules/babel-polyfill/dist/polyfill.min.js","node_modules/whatwg-fetch/fetch.js","node_modules/regenerator-runtime/runtime.js","node_modules/es6-promise/dist/es6-promise.auto.min.js","node_modules/es6-promise/dist/es6-promise.auto.min.js.map"],"gitHead":"186ef2c24142a36afe1f1ae8dfab25289eb12968","versions":[{"number":"1.0.0","date":"2017-01-03T22:05:04.440Z"},{"number":"1.0.1","date":"2017-01-03T22:32:49.421Z"},{"number":"1.0.2","date":"2017-01-03T23:33:14.757Z"},{"number":"1.0.3","date":"2017-01-03T23:37:16.055Z"},{"number":"1.0.4","date":"2017-01-05T20:25:49.517Z"},{"number":"1.1.0","date":"2017-01-09T11:30:51.344Z"},{"number":"1.1.1","date":"2017-01-12T13:53:14.107Z"},{"number":"1.1.2","date":"2017-01-12T14:36:28.713Z"},{"number":"1.1.4","date":"2017-01-17T12:55:12.843Z"},{"number":"1.2.0","date":"2017-01-17T14:16:44.103Z"},{"number":"1.3.0","date":"2017-01-19T18:03:25.648Z"},{"number":"1.4.0","date":"2017-01-19T18:12:56.849Z"},{"number":"1.4.1","date":"2017-01-19T18:27:42.819Z"},{"number":"1.4.2","date":"2017-01-19T20:39:22.215Z"},{"number":"1.4.3","date":"2017-02-03T11:07:03.121Z"},{"number":"1.5.0","date":"2017-02-03T11:48:25.805Z"},{"number":"1.5.1","date":"2017-02-03T11:53:58.740Z"},{"number":"1.6.1","date":"2017-02-14T17:25:49.197Z"},{"number":"1.6.3","date":"2017-04-03T23:12:53.183Z"},{"number":"2.0.0","date":"2017-04-10T09:30:00.524Z"},{"number":"2.1.3","date":"2017-04-18T21:34:19.092Z"},{"number":"2.1.4","date":"2017-04-19T15:38:29.826Z"},{"number":"2.2.0","date":"2017-04-20T18:14:00.908Z"},{"number":"2.4.0","date":"2017-04-20T18:14:42.410Z"},{"number":"2.4.1","date":"2017-04-20T18:22:59.381Z"},{"number":"2.4.2","date":"2017-04-20T18:44:07.422Z"},{"number":"2.4.5","date":"2017-04-21T09:33:53.701Z"},{"number":"2.5.0","date":"2017-04-22T10:49:27.283Z"},{"number":"2.5.1","date":"2017-04-22T10:58:54.446Z"},{"number":"3.0.6","date":"2017-04-22T16:39:18.502Z"},{"number":"3.2.0","date":"2017-04-25T20:22:56.861Z"},{"number":"3.2.2","date":"2017-04-26T15:37:36.014Z"},{"number":"3.2.3","date":"2017-04-26T16:06:21.695Z"},{"number":"4.0.0","date":"2017-04-30T13:48:13.553Z"},{"number":"4.2.0","date":"2017-05-06T14:51:03.569Z"},{"number":"4.3.1","date":"2017-05-18T19:43:55.244Z"},{"number":"5.0.0","date":"2017-06-11T19:22:07.662Z"}],"readme":"# Bidirectional JSON-RPC\r\n\r\n[![Version npm](https://img.shields.io/npm/v/jsonrpc-bidirectional.svg)](https://www.npmjs.com/package/jsonrpc-bidirectional)\r\n[![Linux build](https://travis-ci.org/oxygens/jsonrpc-bidirectional.svg?branch=master)](https://travis-ci.org/oxygens/jsonrpc-bidirectional)\r\n[![Windows Build](https://ci.appveyor.com/api/projects/status/github/oxygens/jsonrpc-bidirectional?branch=master&svg=true)](https://ci.appveyor.com/project/oxygens/jsonrpc-bidirectional)\r\n\r\nA main goal of this project is to have the JSON-RPC server and client support __bidirectional JSON-RPC requests over a single WebSocket connection.__ In short, it makes it possible to have a JSONRPC __Server__ on the client side, or on both sides at once.\r\n\r\nThis library is tested in __browsers__ (>= IE10) and in __Node.js__ (>=7.8).\r\n\r\nVery simple usage allows for very easy application development: \r\n * export methods in an endpoint (which extends JSONRPC.EndpointBase), and call those method remotely through a client (which extends JSONRPC.Client);\r\n * on bidirectional transports, there may be endpoints at both ends of a connection, or reversed roles (TCP client is a JSONRPC server, while TCP server is JSONRPC client).\r\n * all remote invocations are asynchronous (multiple responses on the same connection are matched to the right waiting promises)\r\n\r\n## Transports\r\n\r\nThese transports are already implemented, and they all offer promise-based asynchronous method invocations:\r\n\r\n| Transport | Type | Browser | Node.js | Serialization |\r\n|-----------|----------------------------------|:-----:|:-----:|-------|\r\n| HTTP | one-way, new connection per call | [fetch](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) | [node-fetch](https://github.com/bitinn/node-fetch) | JSON |\r\n| WebSocket | bidirectional, single connection | [WebSocket](https://developer.mozilla.org/en/docs/Web/API/WebSocket) | [ws](https://github.com/websockets/ws) | JSON |\r\n| Worker | bidirectional, IPC, single connection | [Worker](https://developer.mozilla.org/en-US/docs/Web/API/Worker) | [Worker](https://nodejs.org/api/cluster.html#cluster_class_worker) | [Structured cloning](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm) |\r\n| ProcessStdIO | one-way, IPC, new child process per call | | [Process](https://nodejs.org/api/process.html#process_process) | JSON |\r\n| WebRTC | bidirectional, RTCDataChannel, single connection | [RTCDataChannel](https://developer.mozilla.org/en/docs/Web/API/RTCDataChannel) |  | JSON\r\n \r\n#### WebSocket\r\n\r\n__Any WebSocket implementation may be used__, as handling of the HTTP server and WebSocket is external to these JSONRPC classes.\r\n\r\nFor WebSocket client support in Node.js and browsers, `JSONRPC.Plugins.Client.WebSocketTransport` accepts connected W3C compatible WebSocket class instances (out of the box browser [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API) and Node.js [websockets/ws](https://github.com/websockets/ws) `WebSocket`). \r\n\r\nOn the Node.js side, this library is tested to work with [websockets/ws](https://github.com/websockets/ws). Other `WebSocketServer` implementations are supported if API compatible with `websockets/ws` (constructor and events), or made compatible through an adapter.\r\n\r\nThere is a wrapper for [uWebSockets](https://github.com/uWebSockets/uWebSockets) in `JSONRPC.WebSocketAdapters.uws.WebSocketWrapper`. All obtained `uws.WebSocket` instances (from the `connection` event, or instantiated directly) must be wrapped (and thus replaced) with an instance of this class. According to localhost benchmarks of this library, ws performs better than uws. __Warning:__ uws is buggy when calling .close() on the server (segmentation fault or infinite hang) and it also immediately closes connections with an empty reason string if very large payloads are sent. See `tests/uws_bug*`.\r\n\r\n#### HTTP\r\n\r\n`JSONRPC.Client` has embeded support for HTTP requests, through [fetch](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) (polyfills for older browsers exist, and work just fine). `JSONRPC.Server` has the `attachToHTTPServer` method.\r\n\r\n#### Worker\r\nFor Worker client support in Node.js and browsers, `JSONRPC.Plugins.Client.WorkerTransport` and `JSONRPC.BidirectionalWorkerRouter` accept Node.js [cluster.Worker](https://nodejs.org/api/cluster.html#cluster_class_worker) or standard browser [Worker](https://developer.mozilla.org/en-US/docs/Web/API/Worker) class instances. \r\n\r\nSee `tests/Tests/AllTests.runClusterTests()` and `tests/Browser/index.html` for an example of how to setup servers and clients for master-worker asynchronous communication.\r\n\r\n#### WebRTC\r\nBrowser to browser asynchronous RPC.\r\n\r\nThe `JSONRPC.Plugins.Client.WebRTCTransport` and `JSONRPC.BidirectionalWebRTCRouter` classes accept standard browser connected [RTCConnection](https://developer.mozilla.org/en/docs/Web/API/RTCDataChannel) class instances. \r\n\r\nSee `tests/Tests/BrowserWebRTC/*` for a browser side example. See `tests/Tests/TestEndpoint` for the server side mediator.\r\n\r\nWebRTC is experimental technology with very little vendor support, and constantly changing. The WebRTC code in this library is tested to work in Chrome.\r\n\r\n#### Other\r\n\r\nIt is easy to support other transports, see `JSONRPC.Plugins.Client.WebSocketTransport` for an example.\r\n\r\n## Events and plugins\r\n\r\nPlugins are allowed to replace the JSON-RPC protocol altogether, extend the protocol or wrap it.\r\n\r\n__Plugins for the server or the client may also be custom middle layers__, for example: authentication, authorization, validation, routing, backward compatibility translation, advanced error logging, automatic retries, caching, etc.\r\n\r\nSee `JSONRPC.ClientPluginBase` and `JSONRPC.ServerPluginBase`. Plugins may be added on `JSONRPC.Server` and `JSONRPC.Client` instances using the `.addPlugin()` method.\r\n\r\nEvents may be used instead of plugins. Method names in `JSONRPC.ClientPluginBase` and `JSONRPC.ServerPluginBase` are also event names (event handlers have the same params) while `JSONRPC.Server` and `JSONRPC.Client` emit these events.\r\n\r\nEvents may be more efficient than plugins, if very small performance gains matter. Plugins on the other hand help write readable and maintainable code (and are asynchronous).\r\n\r\n\r\n## Define an endpoint\r\n`JSONRPC.Server` exports methods of registered `JSONRPC.EndpointBase` subclass instances.\r\n\r\nThe JSONRPC.Server supports multiple endpoints at the same time.\r\n\r\nOn an incoming request, endpoints are identified by the URL path of the HTTP request, or of the WebSocket connection. \r\n\r\nFor example, both these URLs point to the same endpoint: `ws://localhost/api`, `http://localhost/api`, as both have `/api` as path.\r\n\r\n:warning: When in bidirectional mode, the endpoints at both ends of a connection must be initialized with the same path value (even if exporting different functions). The reverse calls client will connect to the same endpoint path as the one indicated by the current WebSocket connection URL.\r\n\r\n```JavaScript\r\n\r\nconst JSONRPC = require(\"jsonrpc-bidirectional\");\r\n\r\nmodule.exports =\r\nclass TestEndpoint extends JSONRPC.EndpointBase \r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(\r\n\t\t\t/*strName*/ \"Test\", \r\n\t\t\t/*strPath*/ \"/api\", \r\n\t\t\t/*objReflection*/ {}, // Reserved for future use.\r\n\t\t\t/*classReverseCallsClient*/ JSONRPC.Client // This may be left undefined\r\n\t\t);\r\n\r\n\t\t// The class reference classReverseCallsClient must be specified to enable bidirectional JSON-RPC over a single WebSocket connection.\r\n\t\t// If may be left undefined for one-way interrogation.\r\n\t\t// It must contain a reference to a subclass of JSONRPC.Client or a reference to the JSONRPC.Client class itself.\r\n\t}\r\n\r\n\tasync ping(incomingRequest, strReturn, bThrow)\r\n\t{\r\n\t\tif(bThrow)\r\n\t\t{\r\n\t\t\tthrow new JSONRPC.Exception(\"You asked me to throw.\");\r\n\t\t}\r\n\r\n\t\t// If using bidirectional JSON-RPC over a single WebSocket connection, a JSONRPC.Client subclass instance is available.\r\n\t\t// It is an instance of the class specified in the constructor of this EndpointBase subclass, `classReverseCallsClient`.\r\n\t\t// Also, it is attached to the same WebSocket connection of the current request.\r\n\t\tawait incomingRequest.reverseCallsClient.rpc(\"methodOnTheOtherSide\", [\"paramValue\", true, false]);\r\n\r\n\t\treturn strReturn;\r\n\t}\r\n\r\n\tasync divide(incomingRequest, nLeft, nRight)\r\n\t{\r\n\t\treturn nLeft / nRight;\r\n\t}\r\n};\r\n```\r\n\r\n\r\n## Extending the client\r\n\r\nExtending the `JSONRPC.Client` base class makes the code more readable. \r\n\r\nThis client's function names and params correspond to what `TestEndpoint` exports (defined above).\r\n\r\n```JavaScript\r\nconst JSONRPC = require(\"jsonrpc-bidirectional\");\r\n\r\nmodule.exports =\r\nclass TestClient extends JSONRPC.Client\r\n{\r\n\t/**\r\n\t * @param {JSONRPC.IncomingRequest} incomingRequest\r\n\t * @param {string} strReturn\r\n\t * @param {boolean} bThrow\r\n\t * \r\n\t * @returns {string}\r\n\t */\r\n\tasync ping(strReturn, bThrow)\r\n\t{\r\n\t\treturn this.rpc(\"ping\", [...arguments]);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {number} nLeft\r\n\t * @param {number} nRight\r\n\t *\r\n\t * @returns {number}\r\n\t */\r\n\tasync divide(nLeft, nRight)\r\n\t{\r\n\t\treturn this.rpc(\"divide\", [...arguments]);\r\n\t}\r\n```\r\n\r\n\r\n## Simple JSONRPC.Server over HTTP\r\n```JavaScript\r\nconst JSONRPC = require(\"jsonrpc-bidirectional\");\r\n\r\nconst httpServer = http.createServer();\r\nconst jsonrpcServer = new JSONRPC.Server();\r\n\r\njsonrpcServer.registerEndpoint(new TestEndpoint());\r\n\r\njsonrpcServer.attachToHTTPServer(httpServer, \"/api/\");\r\n\r\n// By default, JSONRPC.Server rejects all requests as not authenticated and not authorized.\r\njsonrpcServer.addPlugin(new JSONRPC.Plugins.Server.AuthenticationSkip());\r\njsonrpcServer.addPlugin(new JSONRPC.Plugins.Server.AuthorizeAll());\r\n\r\nhttpServer.listen(80);\r\n```\r\n\r\n\r\n## Simple JSONRPC.Client over HTTP\r\n```JavaScript\r\nconst JSONRPC = require(\"jsonrpc-bidirectional\");\r\n\r\n\r\nconst testClient = new TestClient(\"http://localhost/api\");\r\n\r\nconst fDivisionResult = await testClient.divide(2, 1);\r\n```\r\n\r\n\r\n## Simple JSONRPC.Client over WebSocket\r\nNon-bidirectional JSONRPC.Client over a WebSocket client connection.\r\n\r\n```JavaScript\r\nconst JSONRPC = require(\"jsonrpc-bidirectional\");\r\nconst WebSocket = require(\"ws\");\r\n\r\n\r\n// The WebSocketTransport plugin requires that the WebSocket connection instance supports the `close`, `error` and `message` events of the https://github.com/websockets/ws API.\r\n// If not using `websockets/ws`, the WebSocketTransport plugin may be extended to override WebSocketTransport._setupWebSocket().\r\n\r\n\r\nconst ws = new WebSocket(\"ws://localhost/api\");\r\nawait new Promise((fnResolve, fnReject) => {\r\n\tws.on(\"open\", fnResolve);\r\n\tws.on(\"error\", fnReject);\r\n});\r\n\r\n\r\nconst testClient = new TestClient(\"ws://localhost/api\");\r\n\r\n\r\nconst webSocketTransport = new JSONRPC.Plugins.Client.WebSocketTransport(ws);\r\ntestClient.addPlugin(webSocketTransport);\r\n\r\n\r\nconst fDivisionResult = await testClient.divide(2, 1);\r\n```\r\n\r\n\r\n## Bidirectional JSON-RPC over WebSocket\r\n\r\nThis JSONRPC server and client can be bidirectional over __a single WebSocket connection__. \r\n\r\nIn other words, there may be a `JSONRPC.Server` instance __and__ a `JSONRPC.Client` instance at one end, and another pair (or more) at the other end.\r\n\r\nAt the WebSocket or __TCP/HTTP server__ connection end, the `JSONRPC.Server` will automatically instantiate a `JSONRPC.Client` subclass per connection (of the class specified by the serving endpoint).\r\n\r\n\r\nCommon:\r\n\r\n```JavaScript\r\n// BidirectionalWebsocketRouter and the WebSocketTransport plugin both require that the WebSocket connection instance supports the `close`, `error` and `message` events of the https://github.com/websockets/ws API.\r\n// If not using `websockets/ws`, a wrapping adapter which emits the above events must be provided (if the WebSocket implementation is not already compatible with `websockets/ws`).\r\n\r\n// BidirectionalWebsocketRouter also uses properties on WebSocket instances to get the URL path (needed to determine the endpoint), like this: `webSocket.url ? webSocket.url : webSocket.upgradeReq.url`.\r\n\r\nconst JSONRPC = require(\"jsonrpc-bidirectional\");\r\nconst WebSocket = require(\"ws\");\r\nconst WebSocketServer = WebSocket.Server;\r\n```\r\n\r\n\r\n__Site A. WebSocket server (accepts incoming TCP connections), JSONRPC server & client:__\r\n\r\n```JavaScript\r\nconst jsonrpcServer = new JSONRPC.Server();\r\njsonrpcServer.registerEndpoint(new TestEndpoint()); // See \"Define an endpoint\" section above.\r\n\r\n// By default, JSONRPC.Server rejects all requests as not authenticated and not authorized.\r\njsonrpcServer.addPlugin(new JSONRPC.Plugins.Server.AuthenticationSkip());\r\njsonrpcServer.addPlugin(new JSONRPC.Plugins.Server.AuthorizeAll());\r\n\r\nconst wsJSONRPCRouter = new JSONRPC.BidirectionalWebsocketRouter(jsonrpcServer);\r\n\r\n// Optional.\r\nwsJSONRPCRouter.on(\"madeReverseCallsClient\", (clientReverseCalls) => { /*add plugins or just setup the client even further*/ });\r\n\r\n// Alternatively reuse existing web server: \r\n// const webSocketServer = new WebSocketServer({server: httpServerInstance});\r\nconst webSocketServer = new WebSocketServer({port: 8080});\r\nwebSocketServer.on(\"error\", (error) => {console.error(error); process.exit(1);});\r\n\r\nwebSocketServer.on(\r\n\t\"connection\", \r\n\tasync (webSocket) => \r\n\t{\r\n\t\tconst nWebSocketConnectionID = wsJSONRPCRouter.addWebSocketSync(webSocket);\r\n\t\t// Do something with nWebSocketConnectionID and webSocket here, like register them as a pair with an authorization plugin.\r\n\r\n\t\t// const clientForThisConnection = wsJSONRPCRouter.connectionIDToSingletonClient(nWebSocketConnectionID, JSONRPC.Client);\r\n\t}\r\n);\r\n```\r\n\r\n\r\n__Site B. WebSocket client (connects to the above WebSocket TCP server), JSONRPC server & client:__\r\n\r\n```JavaScript\r\nconst jsonrpcServer = new JSONRPC.Server();\r\njsonrpcServer.registerEndpoint(new TestEndpoint()); // See \"Define an endpoint\" section above.\r\n\r\n// By default, JSONRPC.Server rejects all requests as not authenticated and not authorized.\r\njsonrpcServer.addPlugin(new JSONRPC.Plugins.Server.AuthenticationSkip());\r\njsonrpcServer.addPlugin(new JSONRPC.Plugins.Server.AuthorizeAll());\r\n\r\n\r\nconst webSocket = new WebSocket(\"ws://localhost:8080/api\");\r\nawait new Promise((fnResolve, fnReject) => {\r\n\twebSocket.addEventListener(\"open\", fnResolve);\r\n\twebSocket.addEventListener(\"error\", fnReject);\r\n});\r\n\r\n\r\nconst wsJSONRPCRouter = new JSONRPC.BidirectionalWebsocketRouter(jsonrpcServer);\r\n\r\n\r\nconst nWebSocketConnectionID = wsJSONRPCRouter.addWebSocketSync(webSocket);\r\n\r\n\r\n// Obtain single client. See above section \"Extending the client\" for the TestClient class (subclass of JSONRPC.Client).\r\nconst theOnlyClient = wsJSONRPCRouter.connectionIDToSingletonClient(nWebSocketConnectionID, TestClient);\r\n\r\nawait theOnlyClient.divide(3, 2);\r\n```\r\n\r\n\r\n__Site B (ES5 browser). WebSocket client (connects to the above WebSocket TCP server), JSONRPC server & client:__\r\n```html\r\n<!doctype html>\r\n<html>\r\n\t<head>\r\n\t\t<title>Tests</title>\r\n\r\n\t\t<!-- These are external to jsonrpc.min.js intentionally, to reduce file size and reuse them for other libraries. -->\r\n\t\t<script type=\"text/javascript\" src=\"/node_modules/babel-polyfill/dist/polyfill.min.js\"></script>\r\n\t\t<script type=\"text/javascript\" src=\"/node_modules/whatwg-fetch/fetch.js\"></script>\r\n\t\t<script type=\"text/javascript\" src=\"/node_modules/es6-promise/dist/es6-promise.auto.min.js\"></script>\r\n\r\n\t\t<!-- Already covered by babel-polyfill: script type=\"text/javascript\" src=\"/node_modules/regenerator-runtime/runtime.js\"></script-->\r\n\t\t<script type=\"text/javascript\" src=\"/builds/browser/es5/jsonrpc.min.js\"></script>\r\n\r\n\t\t<script>\r\n\t\t\tfunction TestEndpoint()\r\n\t\t\t{\r\n\t\t\t\tJSONRPC.EndpointBase.prototype.constructor.apply(\r\n\t\t\t\t\tthis,\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t/*strName*/ \"Test\", \r\n\t\t\t\t\t\t/*strPath*/ location.protocol + \"//\" + location.host + \"/api\", \r\n\t\t\t\t\t\t/*objReflection*/ {},\r\n\t\t\t\t\t\t/*classReverseCallsClient*/ JSONRPC.Client\r\n\t\t\t\t\t]\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tTestEndpoint.prototype = new JSONRPC.EndpointBase(\"TestEndpoint\", \"/api\", {});\r\n\t\t\tTestEndpoint.prototype.constructor = JSONRPC.EndpointBase;\r\n\r\n\t\t\tTestEndpoint.prototype.ping = function(incomingRequest, strReturn){\r\n\t\t\t\treturn new Promise(function(fnResolve, fnReject){\r\n\t\t\t\t\tfnResolve(strReturn);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\r\n\t\t\tvar client;\r\n\t\t\tvar clientWS;\r\n\t\t\tvar clientOfBidirectionalWS;\r\n\r\n\r\n\t\t\tfunction testSimpleClient()\r\n\t\t\t{\r\n\t\t\t\tclient = new JSONRPC.Client(\"http://\" + location.host + \"/api\");\r\n\t\t\t\tclient.rpc(\"ping\", [\"Calling from html es5 client, http transport.\"]).then(genericTestsPromiseCatch).catch(genericTestsPromiseCatch);\r\n\t\t\t\t\r\n\t\t\t\t\r\n\r\n\t\t\t\tclientWS = new JSONRPC.Client(\"http://\" + location.host + \"/api\");\r\n\r\n\t\t\t\tvar ws = new WebSocket(\"ws://\" + location.host +  \"/api\"); \r\n\t\t\t\tclientWS.addPlugin(new JSONRPC.Plugins.Client.WebSocketTransport(ws, /*bBidirectionalWebSocketMode*/ false));\r\n\t\t\t\t\r\n\t\t\t\tws.addEventListener(\"open\", function(event){\r\n\t\t\t\t\tclient.rpc(\"ping\", [\"Calling from html es5 client, websocket transport.\"])\r\n\t\t\t\t\t\t.then(console.log)\r\n\t\t\t\t\t\t.catch(console.log)\r\n\t\t\t\t\t;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction testBidirectionalRPC()\r\n\t\t\t{\r\n\t\t\t\tvar jsonrpcServer = new JSONRPC.Server();\r\n\t\t\t\tjsonrpcServer.registerEndpoint(new TestEndpoint());\r\n\r\n\t\t\t\t// By default, JSONRPC.Server rejects all requests as not authenticated and not authorized.\r\n\t\t\t\tjsonrpcServer.addPlugin(new JSONRPC.Plugins.Server.AuthenticationSkip());\r\n\t\t\t\tjsonrpcServer.addPlugin(new JSONRPC.Plugins.Server.AuthorizeAll());\r\n\r\n\t\t\t\tvar ws = new WebSocket(\"ws://\" + location.host +  \"/api\"); \r\n\r\n\t\t\t\tws.addEventListener(\"open\", function(event){\r\n\t\t\t\t\tvar wsJSONRPCRouter = new JSONRPC.BidirectionalWebsocketRouter(jsonrpcServer);\r\n\r\n\t\t\t\t\tvar nWebSocketConnectionID = wsJSONRPCRouter.addWebSocketSync(ws);\r\n\r\n\t\t\t\t\tclientOfBidirectionalWS = wsJSONRPCRouter.connectionIDToSingletonClient(nWebSocketConnectionID, JSONRPC.Client);\r\n\r\n\t\t\t\t\tclientOfBidirectionalWS.rpc(\"ping\", [\"Calling from html es5 client, websocket transport with bidirectional JSONRPC.\"])\r\n\t\t\t\t\t\t.then(console.log)\r\n\t\t\t\t\t\t.catch(console.log)\r\n\t\t\t\t\t;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\r\n\r\n\t\t\twindow.addEventListener(\r\n\t\t\t\t\"load\",\r\n\t\t\t\tfunction(event){\r\n\t\t\t\t\ttestSimpleClient();\r\n\t\t\t\t\ttestBidirectionalRPC();\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t</script>\r\n\t</head>\r\n\t<body>\r\n\t\tOpen the developer tools console (F12 for most browsers, CTRL+SHIFT+I in Electron) to see errors or manually make calls.\r\n\t</body>\r\n</html>\r\n```\r\n","starsCount":2,"created":"2017-01-03T22:05:04.440Z","modified":"2017-06-11T19:22:07.662Z","lastPublisher":{"name":"oxygens","email":"oxygenus@gmail.com"},"owners":[{"name":"oxygens","email":"oxygenus@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"jsonrpc-bidirectional","_nodeVersion":"7.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsonrpc-bidirectional-5.0.0.tgz_1497208925966_0.2553855071309954"},"_npmUser":{"name":"oxygens","email":"oxygenus@gmail.com"},"_npmVersion":"4.2.0","_rev":"40-a6ea54f64223ecb1b4eb052b10205a6d","_shasum":"71d940df69dcc15c8893cabf06e45e1042b3361f","author":{"name":"Ionut Stan","email":"Ionut.Stan@bigstep.com"},"bugs":{"url":"https://github.com/oxygen/jsonrpc-bidirectional/issues"},"contributors":[{"name":"Ionut Stan","email":"Ionut.Stan@bigstep.com"},{"name":"Ionut Stan","email":"oxygenus@gmail.com"}],"directories":{},"dist-tags":{"latest":"5.0.0"},"dist":{"shasum":"71d940df69dcc15c8893cabf06e45e1042b3361f","tarball":"https://registry.npmjs.org/jsonrpc-bidirectional/-/jsonrpc-bidirectional-5.0.0.tgz"},"maintainers":[{"name":"oxygens","email":"oxygenus@gmail.com"}],"readmeFilename":"README.MD","time":{"modified":"2017-06-11T19:22:07.662Z","created":"2017-01-03T22:05:04.440Z","1.0.0":"2017-01-03T22:05:04.440Z","1.0.1":"2017-01-03T22:32:49.421Z","1.0.2":"2017-01-03T23:33:14.757Z","1.0.3":"2017-01-03T23:37:16.055Z","1.0.4":"2017-01-05T20:25:49.517Z","1.1.0":"2017-01-09T11:30:51.344Z","1.1.1":"2017-01-12T13:53:14.107Z","1.1.2":"2017-01-12T14:36:28.713Z","1.1.4":"2017-01-17T12:55:12.843Z","1.2.0":"2017-01-17T14:16:44.103Z","1.3.0":"2017-01-19T18:03:25.648Z","1.4.0":"2017-01-19T18:12:56.849Z","1.4.1":"2017-01-19T18:27:42.819Z","1.4.2":"2017-01-19T20:39:22.215Z","1.4.3":"2017-02-03T11:07:03.121Z","1.5.0":"2017-02-03T11:48:25.805Z","1.5.1":"2017-02-03T11:53:58.740Z","1.6.1":"2017-02-14T17:25:49.197Z","1.6.3":"2017-04-03T23:12:53.183Z","2.0.0":"2017-04-10T09:30:00.524Z","2.1.3":"2017-04-18T21:34:19.092Z","2.1.4":"2017-04-19T15:38:29.826Z","2.2.0":"2017-04-20T18:14:00.908Z","2.4.0":"2017-04-20T18:14:42.410Z","2.4.1":"2017-04-20T18:22:59.381Z","2.4.2":"2017-04-20T18:44:07.422Z","2.4.5":"2017-04-21T09:33:53.701Z","2.5.0":"2017-04-22T10:49:27.283Z","2.5.1":"2017-04-22T10:58:54.446Z","3.0.6":"2017-04-22T16:39:18.502Z","3.2.0":"2017-04-25T20:22:56.861Z","3.2.2":"2017-04-26T15:37:36.014Z","3.2.3":"2017-04-26T16:06:21.695Z","4.0.0":"2017-04-30T13:48:13.553Z","4.2.0":"2017-05-06T14:51:03.569Z","4.3.1":"2017-05-18T19:43:55.244Z","5.0.0":"2017-06-11T19:22:07.662Z"},"users":{"ovidiug":true,"oxygens":true}}}