{"name":"graceful-cluster","version":"0.0.3","description":"Gracefully restart node.js http cluster with zero downtime. Shutdown server without active inbound connections reset.","main":"index.js","repository":"https://github.com/itteco/graceful-cluster","keywords":["http","server","cluster","restart","shutdown","gracefully"],"license":"MIT","gitHead":"b98c889585620701f25ea243e13ecfeca82fb63c","homepage":"https://github.com/itteco/graceful-cluster#readme","scripts":{},"versions":[{"number":"0.0.1","date":"2016-07-26T10:23:21.984Z"},{"number":"0.0.2","date":"2017-01-11T15:00:05.042Z"},{"number":"0.0.3","date":"2017-06-08T19:36:34.874Z"}],"readme":"# Graceful cluster\n\nInstall:\n\n    npm install graceful-cluster\n    \n## How to use\n\n### 1. Enable graceful server shutdown\n\nThis patch will prevent active connections reset when server receives `SIGKILL` or `SIGTERM`. Idle (keep-alive) inbound connections without active requests will be destroyed.\n \nExample 'server.js':\n\n    // Example server with 'express'.\n    var express = require('express');\n    var app = express();\n    var listener = app.listen(8000);\n\n    var GracefulServer = require('graceful-cluster').GracefulServer;\n    var gracefulServer = new GracefulServer({\n        server: listener,\n        shutdownTimeout: 10 * 1000,             // 10 sec.\n    });\n    \nGracefulServer options description:\n\n - `server`                - required, http server instance.\n - `log`                   - function, custom log function, `console.log` used by default.\n - `shutdownTimeout`       - ms, force worker shutdown on `SIGTERM` timeout.\n \nAlso you can initiate graceful shutdown when needed:\n \n    gracefulServer.shutdown();\n\n### 2. Use simplified cluster initialization\n\nThis cluster wrapper will send `SIGTERM` signal to workers and wait till they finished all requests.\n\nAlso it can gracefully restart all workers one by one with zero cluster downtime on some conditions:\n\n  1. Worker memory used.\n  2. Worker time online.\n  3. Your custom condition: just call `GracefulCluster.gracefullyRestartCurrentWorker()` to restart current worker in `serverFunction`.\n  4. On `SIGUSR2` signal to cluster process.\n\nExample 'cluster.js':\n\n    var GracefulCluster = require('graceful-cluster').GracefulCluster;\n\n    process.title = '<your-cluster-title>';     // Note, process title must be near filename (cluster.js) length, longer title truncated.\n    \n    GracefulCluster.start({\n        shutdownTimeout: 10 * 1000,             // 10 sec.\n        restartOnTimeout: 5 * 3600 * 1000,      // 5 hours.\n        restartOnMemory: 150 * 1024 * 1024,     // 150 MB.\n        serverFunction: function() {\n            require('./server');                // Your 'server.js' code module with server logic.\n        }\n    });\n\nGracefulCluster options description:\n\n - `serverFunction`        - required, function with worker logic.\n - `log`                   - function, custom log function, `console.log` used by default.\n - `shutdownTimeout`       - ms, force worker shutdown on `SIGTERM` timeout.\n - `disableGraceful`       - disable graceful shutdown for faster debug.\n - `restartOnMemory`       - bytes, restart worker on memory usage.\n - `restartOnTimeout`      - ms, restart worker by timer.\n - `workersCount`          - workers count, if not specified `os.cpus().length` will be used.\n\n### Gracefully restart cluster\n\nGraceful restart performed by `USR2` signal:\n\n    pkill -USR2 <your-cluster-title>\n\nor\n\n    kill -s SIGUSR2 <cluster-pid>\n    \nThis method is also good if your app is launched with [forever](https://github.com/foreverjs/forever):\n\n    forever start cluster.js\n\n### Using with PM2\n\nIf you prefer [PM2](https://github.com/Unitech/pm2) you should use 'server.js' patch only. This will force PM2 to wait until active connections are closed when using:\n\n    pm2 reload <id>\n\nWith PM2 graceful reload don`t forget to set important process parameters:\n\n - `\"instances\": 0`         - use cluster with multiple instances, so one instance will still work when another is reloaded.\n - `\"kill_timeout\": 5000`   - wait more time to allow active connections finish their responses.","created":"2016-07-26T10:23:21.984Z","modified":"2017-06-08T19:36:34.874Z","lastPublisher":{"name":"itteco","email":"ivan@itteco.com"},"owners":[{"name":"itteco","email":"ivan@itteco.com"}],"other":{"_attachments":{},"_from":".","_id":"graceful-cluster","_nodeVersion":"7.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/graceful-cluster-0.0.3.tgz_1496950593991_0.3776273550465703"},"_npmUser":{"name":"itteco","email":"ivan@itteco.com"},"_npmVersion":"4.2.0","_rev":"3-ac030900b406e6562e7501bdbdfbe34d","_shasum":"2c3f57da3610afb28c1bbc8afaa5030dcf506bdc","bugs":{"url":"https://github.com/itteco/graceful-cluster/issues"},"directories":{},"dist-tags":{"latest":"0.0.3"},"dist":{"shasum":"2c3f57da3610afb28c1bbc8afaa5030dcf506bdc","tarball":"https://registry.npmjs.org/graceful-cluster/-/graceful-cluster-0.0.3.tgz"},"maintainers":[{"name":"itteco","email":"ivan@itteco.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-08T19:36:34.874Z","created":"2016-07-26T10:23:21.984Z","0.0.1":"2016-07-26T10:23:21.984Z","0.0.2":"2017-01-11T15:00:05.042Z","0.0.3":"2017-06-08T19:36:34.874Z"}}}