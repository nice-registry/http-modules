{"name":"cookie","description":"HTTP server cookie parsing and serialization","version":"0.3.1","license":"MIT","keywords":["cookie","cookies"],"repository":"https://github.com/jshttp/cookie","devDependencies":{"istanbul":"0.4.3","mocha":"1.21.5"},"files":["HISTORY.md","LICENSE","README.md","index.js"],"engines":{"node":">= 0.6"},"scripts":{"test":"mocha --reporter spec --bail --check-leaks test/","test-ci":"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"},"gitHead":"e3c77d497d66c8b8d4b677b8954c1b192a09f0b3","homepage":"https://github.com/jshttp/cookie","versions":[{"number":"0.0.0","date":"2012-05-28T23:56:12.299Z"},{"number":"0.0.1","date":"2012-05-29T02:15:56.897Z"},{"number":"0.0.2","date":"2012-06-01T17:57:58.161Z"},{"number":"0.0.3","date":"2012-06-06T18:50:00.041Z"},{"number":"0.0.4","date":"2012-06-21T16:27:06.621Z"},{"number":"0.0.5","date":"2012-10-29T17:26:30.049Z"},{"number":"0.0.6","date":"2013-04-09T05:59:56.056Z"},{"number":"0.1.0","date":"2013-05-01T19:18:22.075Z"},{"number":"0.1.1","date":"2014-02-23T15:56:33.086Z"},{"number":"0.1.2","date":"2014-04-16T23:00:21.566Z"},{"number":"0.1.3","date":"2015-05-20T01:22:20.719Z"},{"number":"0.2.0","date":"2015-08-14T05:15:35.455Z"},{"number":"0.1.4","date":"2015-09-17T17:03:42.289Z"},{"number":"0.2.1","date":"2015-09-17T17:08:41.911Z"},{"number":"0.1.5","date":"2015-09-17T18:52:10.481Z"},{"number":"0.2.2","date":"2015-09-17T20:40:15.826Z"},{"number":"0.2.3","date":"2015-10-26T01:02:06.233Z"},{"number":"0.2.4","date":"2016-05-21T00:32:45.246Z"},{"number":"0.3.0","date":"2016-05-27T01:00:41.646Z"},{"number":"0.3.1","date":"2016-05-27T04:32:39.156Z"}],"readme":"# cookie\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nBasic HTTP cookie parser and serializer for HTTP servers.\n\n## Installation\n\n```sh\n$ npm install cookie\n```\n\n## API\n\n```js\nvar cookie = require('cookie');\n```\n\n### cookie.parse(str, options)\n\nParse an HTTP `Cookie` header string and returning an object of all cookie name-value pairs.\nThe `str` argument is the string representing a `Cookie` header value and `options` is an\noptional object containing additional parsing options.\n\n```js\nvar cookies = cookie.parse('foo=bar; equation=E%3Dmc%5E2');\n// { foo: 'bar', equation: 'E=mc^2' }\n```\n\n#### Options\n\n`cookie.parse` accepts these properties in the options object.\n\n##### decode\n\nSpecifies a function that will be used to decode a cookie's value. Since the value of a cookie\nhas a limited character set (and must be a simple string), this function can be used to decode\na previously-encoded cookie value into a JavaScript string or other object.\n\nThe default function is the global `decodeURIComponent`, which will decode any URL-encoded\nsequences into their byte representations.\n\n**note** if an error is thrown from this function, the original, non-decoded cookie value will\nbe returned as the cookie's value.\n\n### cookie.serialize(name, value, options)\n\nSerialize a cookie name-value pair into a `Set-Cookie` header string. The `name` argument is the\nname for the cookie, the `value` argument is the value to set the cookie to, and the `options`\nargument is an optional object containing additional serialization options.\n\n```js\nvar setCookie = cookie.serialize('foo', 'bar');\n// foo=bar\n```\n\n#### Options\n\n`cookie.serialize` accepts these properties in the options object.\n\n##### domain\n\nSpecifies the value for the [`Domain` `Set-Cookie` attribute][rfc-6266-5.2.3]. By default, no\ndomain is set, and most clients will consider the cookie to apply to only the current domain.\n\n##### encode\n\nSpecifies a function that will be used to encode a cookie's value. Since value of a cookie\nhas a limited character set (and must be a simple string), this function can be used to encode\na value into a string suited for a cookie's value.\n\nThe default function is the global `ecodeURIComponent`, which will encode a JavaScript string\ninto UTF-8 byte sequences and then URL-encode any that fall outside of the cookie range.\n\n##### expires\n\nSpecifies the `Date` object to be the value for the [`Expires` `Set-Cookie` attribute][rfc-6266-5.2.1].\nBy default, no expiration is set, and most clients will consider this a \"non-persistent cookie\" and\nwill delete it on a condition like exiting a web browser application.\n\n**note** the [cookie storage model specification][rfc-6266-5.3] states that if both `expires` and\n`magAge` are set, then `maxAge` takes precedence, but it is possiblke not all clients by obey this,\nso if both are set, they should point to the same date and time.\n\n##### httpOnly\n\nSpecifies the `boolean` value for the [`HttpOnly` `Set-Cookie` attribute][rfc-6266-5.2.6]. When truthy,\nthe `HttpOnly` attribute is set, otherwise it is not. By default, the `HttpOnly` attribute is not set.\n\n**note** be careful when setting this to `true`, as compliant clients will not allow client-side\nJavaScript to see the cookie in `document.cookie`.\n\n##### maxAge\n\nSpecifies the `number` (in seconds) to be the value for the [`Max-Age` `Set-Cookie` attribute][rfc-6266-5.2.2].\nThe given number will be converted to an integer by rounding down. By default, no maximum age is set.\n\n**note** the [cookie storage model specification][rfc-6266-5.3] states that if both `expires` and\n`magAge` are set, then `maxAge` takes precedence, but it is possiblke not all clients by obey this,\nso if both are set, they should point to the same date and time.\n\n##### path\n\nSpecifies the value for the [`Path` `Set-Cookie` attribute][rfc-6266-5.2.4]. By default, the path\nis considered the [\"default path\"][rfc-6266-5.1.4]. By default, no maximum age is set, and most\nclients will consider this a \"non-persistent cookie\" and will delete it on a condition like exiting\na web browser application.\n\n##### sameSite\n\nSpecifies the `boolean` or `string` to be the value for the [`SameSite` `Set-Cookie` attribute][draft-west-first-party-cookies-07].\n\n  - `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n  - `false` will not set the `SameSite` attribute.\n  - `'lax'` will set the `SameSite` attribute to `Lax` for lax same site enforcement.\n  - `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in the specification\nhttps://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1.1\n\n**note** This is an attribute that has not yet been fully standardized, and may change in the future.\nThis also means many clients may ignore this attribute until they understand it.\n\n##### secure\n\nSpecifies the `boolean` value for the [`Secure` `Set-Cookie` attribute][rfc-6266-5.2.5]. When truthy,\nthe `Secure` attribute is set, otherwise it is not. By default, the `Secure` attribute is not set.\n\n**note** be careful when setting this to `true`, as compliant clients will not send the cookie back to\nthe server in the future if the browser does not have an HTTPS connection.\n\n## Example\n\nThe following example uses this module in conjunction with the Node.js core HTTP server\nto prompt a user for their name and display it back on future visits.\n\n```js\nvar cookie = require('cookie');\nvar escapeHtml = require('escape-html');\nvar http = require('http');\nvar url = require('url');\n\nfunction onRequest(req, res) {\n  // Parse the query string\n  var query = url.parse(req.url, true, true).query;\n\n  if (query && query.name) {\n    // Set a new cookie with the name\n    res.setHeader('Set-Cookie', cookie.serialize('name', String(query.name), {\n      httpOnly: true,\n      maxAge: 60 * 60 * 24 * 7 // 1 week\n    }));\n\n    // Redirect back after setting cookie\n    res.statusCode = 302;\n    res.setHeader('Location', req.headers.referer || '/');\n    res.end();\n    return;\n  }\n\n  // Parse the cookies on the request\n  var cookies = cookie.parse(req.headers.cookie || '');\n\n  // Get the visitor name set in the cookie\n  var name = cookies.name;\n\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n\n  if (name) {\n    res.write('<p>Welcome back, <b>' + escapeHtml(name) + '</b>!</p>');\n  } else {\n    res.write('<p>Hello, new visitor!</p>');\n  }\n\n  res.write('<form method=\"GET\">');\n  res.write('<input placeholder=\"enter your name\" name=\"name\"> <input type=\"submit\" value=\"Set Name\">');\n  res.end('</form');\n}\n\nhttp.createServer(onRequest).listen(3000);\n```\n\n## Testing\n\n```sh\n$ npm test\n```\n\n## References\n\n- [RFC 6266: HTTP State Management Mechanism][rfc-6266]\n- [Same-site Cookies][draft-west-first-party-cookies-07]\n\n[draft-west-first-party-cookies-07]: https://tools.ietf.org/html/draft-west-first-party-cookies-07\n[rfc-6266]: https://tools.ietf.org/html/rfc6266\n[rfc-6266-5.1.4]: https://tools.ietf.org/html/rfc6266#section-5.1.4\n[rfc-6266-5.2.1]: https://tools.ietf.org/html/rfc6266#section-5.2.1\n[rfc-6266-5.2.2]: https://tools.ietf.org/html/rfc6266#section-5.2.2\n[rfc-6266-5.2.3]: https://tools.ietf.org/html/rfc6266#section-5.2.3\n[rfc-6266-5.2.4]: https://tools.ietf.org/html/rfc6266#section-5.2.4\n[rfc-6266-5.3]: https://tools.ietf.org/html/rfc6266#section-5.3\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/cookie.svg\n[npm-url]: https://npmjs.org/package/cookie\n[node-version-image]: https://img.shields.io/node/v/cookie.svg\n[node-version-url]: https://nodejs.org/en/download\n[travis-image]: https://img.shields.io/travis/jshttp/cookie/master.svg\n[travis-url]: https://travis-ci.org/jshttp/cookie\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/cookie/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/cookie?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/cookie.svg\n[downloads-url]: https://npmjs.org/package/cookie\n","starsCount":58,"created":"2012-05-28T23:56:11.938Z","modified":"2017-06-05T08:30:29.317Z","lastPublisher":{"name":"dougwilson","email":"doug@somethingdoug.com"},"owners":[{"name":"dougwilson","email":"doug@somethingdoug.com"}],"other":{"_attachments":{},"_from":".","_id":"cookie","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/cookie-0.3.1.tgz_1464323556714_0.6435900838114321"},"_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"_npmVersion":"1.4.28","_rev":"16-d053024d20d83e52bd6e4b0ab3de23d9","_shasum":"e7e0a1f9ef43b4c8ba925c5c5a96e806d16873bb","author":{"name":"Roman Shtylman","email":"shtylman@gmail.com"},"bugs":{"url":"https://github.com/jshttp/cookie/issues"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"}],"directories":{},"dist-tags":{"latest":"0.3.1"},"dist":{"shasum":"e7e0a1f9ef43b4c8ba925c5c5a96e806d16873bb","tarball":"http://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz"},"maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-05T08:30:29.317Z","created":"2012-05-28T23:56:11.938Z","0.0.0":"2012-05-28T23:56:12.299Z","0.0.1":"2012-05-29T02:15:56.897Z","0.0.2":"2012-06-01T17:57:58.161Z","0.0.3":"2012-06-06T18:50:00.041Z","0.0.4":"2012-06-21T16:27:06.621Z","0.0.5":"2012-10-29T17:26:30.049Z","0.0.6":"2013-04-09T05:59:56.056Z","0.1.0":"2013-05-01T19:18:22.075Z","0.1.1":"2014-02-23T15:56:33.086Z","0.1.2":"2014-04-16T23:00:21.566Z","0.1.3":"2015-05-20T01:22:20.719Z","0.2.0":"2015-08-14T05:15:35.455Z","0.1.4":"2015-09-17T17:03:42.289Z","0.2.1":"2015-09-17T17:08:41.911Z","0.1.5":"2015-09-17T18:52:10.481Z","0.2.2":"2015-09-17T20:40:15.826Z","0.2.3":"2015-10-26T01:02:06.233Z","0.2.4":"2016-05-21T00:32:45.246Z","0.3.0":"2016-05-27T01:00:41.646Z","0.3.1":"2016-05-27T04:32:39.156Z"},"users":{"285858315":true,"fgribreau":true,"m42am":true,"rhedenk":true,"substack":true,"grncdr":true,"masanorinyo":true,"qiuzuhui":true,"shen-weizhong":true,"dexteryy":true,"dofy":true,"dgarlitt":true,"priyaranjan":true,"roryrjb":true,"x_soth":true,"vboctor":true,"koulmomo":true,"goodseller":true,"simplyianm":true,"trotyl":true,"akiva":true,"dac2205":true,"flyslow":true,"markthethomas":true,"nickeljew":true,"ovuncozturk":true,"kungkk":true,"awzm":true,"antanst":true,"intuitivcloud":true,"panlw":true,"wut":true,"justinliao":true,"qbylucky":true,"milfromoz":true,"demod":true,"oikewll":true,"qinyifeng":true,"princetoad":true,"danielsunami":true,"wkaifang":true,"eliasbf":true,"antixrist":true,"hongbo-miao":true,"abuelwafa":true,"wenbing":true,"tedyhy":true,"mhaidarh":true,"zuizuihao":true,"monjer":true,"zoluzo":true,"giussa_dan":true,"ilex.h":true,"waidd":true,"xiaoqiang.yang":true,"bphanikumar":true,"wayn":true,"vjudge":true}}}