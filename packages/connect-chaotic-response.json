{"name":"connect-chaotic-response","version":"0.1.2","description":"Chaotic http responses middleware for connect and express","main":"index.js","scripts":{"test":"mocha tests/*.spec.js","lint":"eslint ."},"repository":"https://github.com/gregra81/connect-chaotic-response","keywords":["connect","express","http"],"license":"Apache-2.0","homepage":"https://github.com/gregra81/connect-chaotic-response#readme","devDependencies":{"eslint":"^3.14.1","expect.js":"^0.3.1","mocha":"^3.2.0","node-mocks-http":"^1.5.6","sinon":"^1.17.7"},"gitHead":"9e7e7cbcde691ca562a36c1fed8d9067b5d66c02","versions":[{"number":"0.0.1","date":"2017-02-03T14:36:39.591Z"},{"number":"0.0.2","date":"2017-02-03T14:49:28.239Z"},{"number":"0.0.3","date":"2017-02-03T21:20:02.955Z"},{"number":"0.0.4","date":"2017-02-04T16:37:05.820Z"},{"number":"0.1.0","date":"2017-02-04T22:55:46.585Z"},{"number":"0.1.1","date":"2017-02-08T19:55:32.974Z"},{"number":"0.1.2","date":"2017-02-09T08:54:27.734Z"}],"readme":"# Connect Chaotic Response\n> A lightweight connect/express middleware that plugs chaotic http behaviour into your server\n\nChaotic is intended for anyone who needs to test scenarios where his server might become flaky in the best case, non-responsive in the worst case and anything between. It enables to plug (in a configurable fashion) random http errors and timeouts into any node server that uses connect/express (or connect/express like) HTTP server framework. \n\n\nBy default Chaotic will run in the `optimistic` mode that for 99% of requests to your server, will do nothing special for successfull responses (http 2xx codes) and http 3xx responses. 1% of your server requests will be \"hijacked\" by the Chaotic middleware and will randomly generate error responses (http 4xx or 5xx codes) or a timed out (succesffull) response. For other, more \"interesting\" ;) modes, see the [Configuration](#configuration) section.\n\n## Installation\n\n```\nnpm install connect-chaotic-response --save\n```\n\n## Usage as an express/connect middleware\n\n```js\nconst express = require('connect');\n\n// get the Chaotic response module\nconst chaoticResponse = require('connect-chaotic-response');\nconst app = connect();\n\n// Create a new chaoticResponse, optionaly with options\nconst ChaoticResponse = new chaoticResponse(options);\n\n// wire your app with the Chaoutic middleware\napp.use(ChaoticResponse.middleware);\n\napp.listen(3000);\n\n```\n\n## Configuration\nChaotic supports these modes:\n\n* `optimistic` - 99% - normal, 0.5% - 401, 0.1% - 429, 0.1% - 500, 0.1% - 503, 0.1% - 504, 0.1% - 7 seconds (by default) timeout\n* `pessimistic` - 50% - normal, 5% - 401, 5% - 429, 10% - 500, 10% - 503, 10% - 504, 10% - 7 seconds (by default) timeout\n* `timeout` - 1% - normal, 1% - 401, 6% - 429, 1% - 500, 1% - 503, 10% - 504, 80% - 7 seconds (by default) timeout\n* `failure` - 1% - normal, 1% - 401, 5% - 429, 40% - 500, 40% - 503, 10% - 504, 3% - 7 seconds (by default) timeout\n\nTo set a specific mode:\n```js\n// Create a new chaoticResponse, with the 'pessimistic' mode\nconst ChaoticResponse = new chaoticResponse({mode: 'pessimistic'});\n\n// wire your app with the Chaoutic middleware\napp.use(ChaoticResponse.middleware);\n```\nYou could also change the mode sometime later in your program by calling `ChaoticResponse.setMode(mode);`.\n\n### Options\nThe `chaoticResponse` constructor accepts an optional object with these options:\n\n* `mode` - As explained above. Supports optimistic, pessimistic, timeout, failure\n* `timeout` - The timeout in miliseconds for timed out responses\n* `customMode` - Enables to create a personal chaotic mode that consists of any (allowed) http responses and their related weights. `customMode` accepts an object of two arrays: `responses` and `weights` that represent the desired mix of the server's flaky behaviour. For a the full list of allowed http codes see [the responses list](../blob/master/lib/responses.js). If the `customMode` option is provided together with the `mode` option, Chaotic will ignore the `mode` option and use the `customMode` behaviour.\n\nAn example of using `customMode` + changing default timeout:\n```js\n\n// Set a custom mode and a 10 seconds timeout\nconst options = {\n  customMode: {\n    responses: [200, 201, 409, 500, 0],\n    weights: [5, 5, 2, 2, 1]\n  },\n  timeout: 10000\n};\n\n// Create a new chaoticResponse, with the above options\nconst ChaoticResponse = new chaoticResponse(options);\n\n// wire your app with the Chaoutic middleware\napp.use(ChaoticResponse.middleware);\n```\n\n### Callback for error responses\nBy default the middleware doesn't call `next()` for an error response and simply returns an error. If you require to\nrun a function that is fired whenever an error occurs, you can add you callback function by setting the ChaoticResponse.callbackOnError.\n\n## Contributing\n\n1. Fork it\n1. Install dependencies `npm install`\n1. Ensure `npm test` and `npm run lint` run successfully\n1. Submit a pull request\n","created":"2017-02-03T14:36:39.591Z","modified":"2017-02-09T08:54:27.734Z","lastPublisher":{"name":"rashkeg","email":"greg.rashkevitch@autodesk.com"},"owners":[{"name":"rashkeg","email":"greg.rashkevitch@autodesk.com"}],"other":{"_attachments":{},"_from":".","_id":"connect-chaotic-response","_nodeVersion":"6.2.2","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/connect-chaotic-response-0.1.2.tgz_1486630467090_0.8424617373384535"},"_npmUser":{"name":"rashkeg","email":"greg.rashkevitch@autodesk.com"},"_npmVersion":"3.9.5","_rev":"7-7ed6ecb51e9866f4581c76a76a207dd3","_shasum":"bbb4b0f1d743be2e4a61599c4df5ede74882253d","author":{"name":"Greg Rashkevitch"},"bugs":{"url":"https://github.com/gregra81/connect-chaotic-response/issues"},"directories":{},"dist-tags":{"latest":"0.1.2"},"dist":{"shasum":"bbb4b0f1d743be2e4a61599c4df5ede74882253d","tarball":"https://registry.npmjs.org/connect-chaotic-response/-/connect-chaotic-response-0.1.2.tgz"},"maintainers":[{"name":"rashkeg","email":"greg.rashkevitch@autodesk.com"}],"readmeFilename":"README.md","time":{"modified":"2017-02-09T08:54:27.734Z","created":"2017-02-03T14:36:39.591Z","0.0.1":"2017-02-03T14:36:39.591Z","0.0.2":"2017-02-03T14:49:28.239Z","0.0.3":"2017-02-03T21:20:02.955Z","0.0.4":"2017-02-04T16:37:05.820Z","0.1.0":"2017-02-04T22:55:46.585Z","0.1.1":"2017-02-08T19:55:32.974Z","0.1.2":"2017-02-09T08:54:27.734Z"}}}