{"name":"ajacks","description":"A wrapper for asynchronous http requests","keywords":["ajax","xhr","connection","web 2.0","async","sync"],"version":"1.0.0","homepage":"https://github.com/StuDocu/ajacks","repository":"https://github.com/StuDocu/ajacks","main":"./ajacks.js","browser":{"xhr2":false},"devDependencies":{"connect":"1.8.x","mime":"1.x.x","sink-test":">=0.1.2","dispatch":"0.x.x","valentine":">=1.4.7","smoosh":"0.4.0","delayed-stream":"0.0.5","bump":"0.2.3"},"scripts":{"boosh":"smoosh make ./build.json","test":"node ./test.js"},"license":"MIT","spm":{"main":"ajacks.js","ignore":["vendor","test","make"]},"files":["ajacks.js","ajacks.min.js"],"gitHead":"408104b4bf6efdae020a1f3d21d5c72bcd8cb496","versions":[{"number":"1.0.0","date":"2016-01-16T09:21:01.451Z"}],"readme":"# AJacks\n\nIncludes support for xmlHttpRequest, JSONP, CORS, and CommonJS Promises A.\n\nIt is also isomorphic allowing you to `require('ajacks')` in `Node.js` through the peer dependency [xhr2](https://github.com/pwnall/node-xhr2), albeit the original intent of this library is for the browser. For a more thorough solution for Node.js, see [mikeal/request](https://github.com/request/request).\n\n## API\n\n``` js\nAjacks('path/to/html', function (resp) {\n  qwery('#content').html(resp)\n})\n\nAjacks({\n    url: 'path/to/html'\n  , method: 'post'\n  , data: { foo: 'bar', baz: 100 }\n  , success: function (resp) {\n      qwery('#content').html(resp)\n    }\n})\n\nAjacks({\n    url: 'path/to/html'\n  , method: 'get'\n  , data: [ { name: 'foo', value: 'bar' }, { name: 'baz', value: 100 } ]\n  , success: function (resp) {\n      qwery('#content').html(resp)\n    }\n})\n\nAjacks({\n    url: 'path/to/json'\n  , type: 'json'\n  , method: 'post'\n  , error: function (err) { }\n  , success: function (resp) {\n      qwery('#content').html(resp.content)\n    }\n})\n\nAjacks({\n    url: 'path/to/json'\n  , type: 'json'\n  , method: 'post'\n  , contentType: 'application/json'\n  , headers: {\n      'X-My-Custom-Header': 'SomethingImportant'\n    }\n  , error: function (err) { }\n  , success: function (resp) {\n      qwery('#content').html(resp.content)\n    }\n})\n\n// Uses XMLHttpRequest2 credentialled requests (cookies, HTTP basic auth) if supported\nAjacks({\n    url: 'path/to/json'\n  , type: 'json'\n  , method: 'post'\n  , contentType: 'application/json'\n  , crossOrigin: true\n  , withCredentials: true\n  , error: function (err) { }\n  , success: function (resp) {\n      qwery('#content').html(resp.content)\n    }\n})\n\nAjacks({\n    url: 'path/to/data.jsonp?callback=?'\n  , type: 'jsonp'\n  , success: function (resp) {\n      qwery('#content').html(resp.content)\n    }\n})\n\nAjacks({\n    url: 'path/to/data.jsonp?foo=bar'\n  , type: 'jsonp'\n  , jsonpCallback: 'foo'\n  , jsonpCallbackName: 'bar'\n  , success: function (resp) {\n      qwery('#content').html(resp.content)\n    }\n})\n\nAjacks({\n    url: 'path/to/data.jsonp?foo=bar'\n  , type: 'jsonp'\n  , jsonpCallback: 'foo'\n  , success: function (resp) {\n      qwery('#content').html(resp.content)\n    }\n  , complete: function (resp) {\n      qwery('#hide-this').hide()\n    }\n})\n```\n\n## Promises\n\n``` js\nAjacks({\n    url: 'path/to/data.jsonp?foo=bar'\n  , type: 'jsonp'\n  , jsonpCallback: 'foo'\n})\n  .then(function (resp) {\n    qwery('#content').html(resp.content)\n  }, function (err, msg) {\n    qwery('#errors').html(msg)\n  })\n  .always(function (resp) {\n    qwery('#hide-this').hide()\n  })\n```\n\n``` js\nAjacks({\n    url: 'path/to/data.jsonp?foo=bar'\n  , type: 'jsonp'\n  , jsonpCallback: 'foo'\n})\n  .then(function (resp) {\n    qwery('#content').html(resp.content)\n  })\n  .fail(function (err, msg) {\n    qwery('#errors').html(msg)\n  })\n  .always(function (resp) {\n    qwery('#hide-this').hide()\n  })\n```\n\n``` js\nvar r = Ajacks({\n    url: 'path/to/data.jsonp?foo=bar'\n  , type: 'jsonp'\n  , jsonpCallback: 'foo'\n  , success: function () {\n      setTimeout(function () {\n        r\n          .then(function (resp) {\n            qwery('#content').html(resp.content)\n          }, function (err) { })\n          .always(function (resp) {\n             qwery('#hide-this').hide()\n          })\n      }, 15)\n    }\n})\n```\n\n## Options\n\n  * `url` a fully qualified uri\n  * `method` http method (default: `GET`)\n  * `headers` http headers (default: `{}`)\n  * `data` entity body for `PATCH`, `POST` and `PUT` requests. Must be a query `String` or `JSON` object\n  * `type` a string enum. `html`, `xml`, `json`, or `jsonp`. Default is inferred by resource extension. Eg: `.json` will set `type` to `json`. `.xml` to `xml` etc.\n  * `contentType` sets the `Content-Type` of the request. Eg: `application/json`\n  * `crossOrigin` for cross-origin requests for browsers that support this feature.\n  * `success` A function called when the request successfully completes\n  * `error` A function called when the request fails.\n  * `complete` A function called whether the request is a success or failure. Always called when complete.\n  * `jsonpCallback` Specify the callback function name for a `JSONP` request. This value will be used instead of the random (but recommended) name automatically generated by Ajacks.\n\n## Security\n\nIf you are *still* requiring support for IE6/IE7, consider including [JSON3](https://bestiejs.github.io/json3/) in your project. Or simply do the following\n\n``` html\n<script>\n(function () {\n  if (!window.JSON) {\n    document.write('<scr' + 'ipt src=\"http://cdnjs.cloudflare.com/ajax/libs/json3/3.3.2/json3.min.js\"><\\/scr' + 'ipt>')\n  }\n}());\n</script>\n```\n\n\n## Contributing\n\n``` sh\n$ git clone git://github.com/StuDocu/ajacks.git ajacks\n$ cd !$\n$ npm install\n```\n\nPlease keep your local edits to `src/ajacks.js`.\nThe base `./ajacks.js` and `./ajacks.min.js` will be built upon releases.\n\n## Running Tests\n\n``` sh\nmake test\n```\n\n## Browser support\n\n  * IE6+\n  * Chrome 1+\n  * Safari 3+\n  * Firefox 1+\n  * Opera\n\n## ajaxSetup\nUse the `request.ajaxSetup` to predefine a data filter on all requests. See the example below that demonstrates JSON hijacking prevention:\n\n``` js\n$.ajaxSetup({\n  dataFilter: function (response, type) {\n    if (type == 'json') return response.substring('])}while(1);</x>'.length)\n    else return response\n  }\n})\n```\n\nYou can also specify headers to be sent on each request:\n``` js\n$.ajaxSetup({\n  headers: {\n    'X-CSRF-Token': '12abcDEFGHIJkLmN3OPQrS45tUVWxY67zabc8Def'\n  }\n})\n```\n\n## jQuery and Zepto Compatibility\nThere are some differences between the *Ajacks way* and the\n*jQuery/Zepto way*.\n\n### method ###\njQuery/Zepto use `type` to specify the request method while Ajacks uses\n`method` and reserves `type` for the response data type.\n\n### dataType ###\nWhen using jQuery/Zepto you use the `dataType` option to specify the type\nof data to expect from the server, Ajacks uses `type`. jQuery also can\nalso take a space-separated list of data types to specify the request,\nresponse and response-conversion types but Ajacks uses the `type`\nparameter to infer the response type and leaves conversion up to you.\n\n### JSONP ###\nAjacks also takes optional `jsonpCallback` and `jsonpCallbackName`\noptions to specify the callback query-string key and the callback function\nname respectively while jQuery uses `jsonp` and `jsonpCallback` for\nthese same options.\n\nBut fear not! If you must work the jQuery/Zepto way then Ajacks has\na wrapper that will remap these options for you:\n\n```js\nAjacks.compat({\n    url: 'path/to/data.jsonp?foo=bar'\n  , dataType: 'jsonp'\n  , jsonp: 'foo'\n  , jsonpCallback: 'bar'\n  , success: function (resp) {\n      qwery('#content').html(resp.content)\n    }\n})\n\n**Happy Ajaxing!**\n","created":"2016-01-16T09:21:01.451Z","modified":"2016-01-16T09:21:01.451Z","lastPublisher":{"name":"abejfehr","email":"abe.fehr@gmail.com"},"owners":[{"name":"abejfehr","email":"abe.fehr@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"ajacks","_nodeVersion":"5.3.0","_npmUser":{"name":"abejfehr","email":"abe.fehr@gmail.com"},"_npmVersion":"3.5.3","_rev":"1-40602829e43977f0543d6f51b2fe0181","_shasum":"be75b8668eac2e98c9379f50e133c54c0e87feca","author":{"name":"Abe Fehr","email":"abe.fehr@gmail.com"},"bugs":{"url":"https://github.com/StuDocu/ajacks/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"be75b8668eac2e98c9379f50e133c54c0e87feca","tarball":"http://registry.npmjs.org/ajacks/-/ajacks-1.0.0.tgz"},"maintainers":[{"name":"abejfehr","email":"abe.fehr@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-01-16T09:21:01.451Z","created":"2016-01-16T09:21:01.451Z","1.0.0":"2016-01-16T09:21:01.451Z"}}}