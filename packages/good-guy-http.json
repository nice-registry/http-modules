{"name":"good-guy-http","version":"1.9.0","description":"The opinionated sane HTTP client with a good guy approach.","main":"lib/index.js","repository":"https://github.com/Schibsted-Tech-Polska/good-guy-http","scripts":{"test":"./node_modules/mocha/bin/mocha --recursive","coverage":"istanbul cover node_modules/mocha/bin/_mocha -- --recursive"},"keywords":["http","client"],"license":"MIT","engines":{"node":">=0.12"},"dependencies":{"circuit-breaker-js":"github:schibsted-tech-polska/circuit-breaker-js#v0.0.2","clone":"1.0.2","request":"2.74.0","underscore":"1.8.3","underscore.string":"3.2.3"},"devDependencies":{"coveralls":"^2.11.4","express":"^4.13.3","istanbul":"^0.4.2","jshint":"^2.8.0","mocha":"^2.3.2","q":"^1.4.1","sinon":"^1.16.1","supertest":"^1.1.0"},"gitHead":"6bb8a9e434e39ce002d7fa71af3edaf01b294b91","homepage":"https://github.com/Schibsted-Tech-Polska/good-guy-http#readme","versions":[{"number":"1.0.1","date":"2015-04-16T13:38:13.663Z"},{"number":"1.0.2","date":"2015-04-17T09:07:10.138Z"},{"number":"1.0.3","date":"2015-04-17T09:14:43.606Z"},{"number":"1.1.0","date":"2015-04-17T12:17:42.752Z"},{"number":"1.1.1","date":"2015-04-20T14:51:18.284Z"},{"number":"1.2.0","date":"2015-05-22T12:17:03.914Z"},{"number":"1.2.1","date":"2015-08-06T11:33:32.262Z"},{"number":"1.2.2","date":"2015-08-06T13:44:45.928Z"},{"number":"1.3.0","date":"2015-09-18T08:07:41.288Z"},{"number":"1.4.0","date":"2015-09-22T13:31:47.123Z"},{"number":"1.4.1","date":"2015-10-05T10:15:18.881Z"},{"number":"1.4.2","date":"2016-02-15T14:09:15.402Z"},{"number":"1.5.0","date":"2016-02-15T15:04:23.179Z"},{"number":"1.6.0","date":"2016-02-16T13:09:08.297Z"},{"number":"1.7.0","date":"2016-02-26T15:33:14.277Z"},{"number":"1.7.1","date":"2016-03-10T10:54:06.209Z"},{"number":"1.7.2","date":"2016-06-20T18:06:06.880Z"},{"number":"1.7.3","date":"2016-07-27T15:14:01.691Z"},{"number":"1.7.4","date":"2017-02-04T13:05:43.165Z"},{"number":"1.8.0","date":"2017-02-23T11:00:51.656Z"},{"number":"1.9.0","date":"2017-03-17T15:12:09.844Z"}],"readme":"# good-guy-http\n\n[![Build Status](https://travis-ci.org/Schibsted-Tech-Polska/good-guy-http.svg?branch=master)](https://travis-ci.org/Schibsted-Tech-Polska/good-guy-http) [![Coverage Status](https://coveralls.io/repos/Schibsted-Tech-Polska/good-guy-http/badge.svg?branch=master)](https://coveralls.io/r/Schibsted-Tech-Polska/good-guy-http?branch=master) [![Dependency status](https://david-dm.org/Schibsted-Tech-Polska/good-guy-http.svg)](https://david-dm.org/Schibsted-Tech-Polska/good-guy-http)\n\nGood guy HTTP is an HTTP client library based on the [request][request] module, adding the following stuff on top:\n\n* easy promise-based interface\n* caching GET and other idempotent requests, either in-memory or using your chosen cache\n  * this automatically obeys 'Cache-control' headers, but you can provide defaults for when it's missing\n* retrying failed requests\n* collapsing identical requests made at the same time into one\n* reporting HTTP error statuses as errors (promise rejections)\n* sane but strict defaults regarding timeouts etc.\n* implementation of the [circuit breaker][circuitbreaker] pattern\n* optional postprocessing of response to cache expensive parsing/munging operations\n* supports everything request supports by passing all the options to it\n\n![Good Guy HTTP](http://i.imgur.com/m7trEtL.jpg)\n\nAll of this is optional and you can opt-out of some or all of it.\n\n## Usage\n\n```javascript\nvar goodGuy = require('good-guy-http')();\n\n// this request will get its response cached, will be retried if it fails, will be collapsed if you\n// happen to make two of them\ngoodGuy('http://news.ycombinator.com').then(function(response) {\n  console.log(response.body);\n});\n```\n\nThat's the basics. If you want to change the default behaviour, pass a configuration object:\n\n```javascript\n// all of these are optional, the defaults are listed below\nvar goodGuy = require('good-guy-http')({\n  maxRetries: 2,                     // how many times to retry failed requests\n  collapseIdenticalRequests: true,   // should an identical request be collapsed into an ongoing one?\n  allowServingStale: true,           // should goodguy return stale cached content after it expires?\n                                     // it WILL be updated in the background either way, but if content that's\n                                     // a bit stale is acceptable, your requests will appear to be much faster\n  cache: ...,                        // cache object - see below for details         \n  cacheResponseTimeout: 500          // how many ms to wait for the cache to respond before ignoring it completely\n                                     // useful for remote caches (e.g. Redis)\n  maxResponseSize: 1024*1024         // any responses above this size will be rejected to prevent memory trouble,                                                                               \n                                     // the default is 1MB\n  errorLogger: console.error,        // error logging function - a failing cache doesn't break requests, but logs here\n                                     // instead\n  postprocess: false,                // pass a function here if you want to postprocess the response before caching/\n                                     // returning it, e.g. function(res) { return JSON.parse(res.body); }\n                                     // useful for ensuring that expensive parsing happens only once\n  \n  usePromise: Promise,               // Promise constructor to use, you may want to replace native Promise with \n                                     // different implementation, like q or bluebird\n  \n  defaultCaching: {                  // default caching settings for responses without Cache-Control                   \n    cached: true,                    // - whether such responses should be cached at all\n    timeToLive: 5000,                // - for how many ms\n    mustRevalidate: false            // - is it OK to return a stale response and fetch in the background?\n  },\n  \n  forceCaching: {...},               // uses the same properties as 'defaultCaching', but forces all requests\n                                     // to use the settings (existing Cache-Control headers are IGNORED)\n  \n  clientErrorCaching: {              // how 4xx errors are treated with regards to caching\n    cached: true,                    // they are cached by default, but you can opt out\n    timeToLive: 60000,\n    mustRevalidate: false\n  },\n  \n  circuitBreaking: {                 // circuit breaking - if more than errorThreshold percent of requests fail \n    errorThreshold: 50               // good-guy stops sending them and periodically checks if the situation improves\n  },                                 // you can set 'circuitBreaking: false' to turn this off\n  \n  idempotent: ...                    // request idempotence (boolean). By default it's automatically selected\n                                     // depending on request method\n});\n```\n\nYou can also pass options to the `request` module through this configuration object. Any options good guy doesn't\nrecognize will be used to configure the underlying `request` object:\n\n```javascript\nvar goodGuy = require('good-guy-http')({\n  timeout: 100 // that's request's timeout option\n});\n```\n\nGood guy objects can also be reconfigured on the fly by adding good guy options to the request:\n\n```javascript\ngoodGuy({url: 'http://extremely-flaky-server.org', maxRetries: 10}).then(...);\n```\n\n### The goodguy interface\n\nMirrors what `request` does almost exactly. Any object that the `request` module can handle can also be passed to `good-guy-http`. \nAll options will be passed onto request. The `get`, `post`, etc. convenience methods are also present.\n\nAll functions support both a promise-based interface (when no callback is passed) and a traditional callback-based one\n(when a callback function *is* passed as the second parameter).\n\nThe response object that you will receive will not be a http.IncomingMessage, since those are difficult to cache. Instead, you will get a plain old object with `statusCode`, `headers`, `body` and `httpVersion` in all the same places they would be in normal responses.\n\n### Caches\n\nAny object that has these methods can be used as a cache:\n\n* `store(key, object)` - returning a promise that resolves when the object is stored\n* `retrieve(key)` - returning a promise that resolves with the previously stored object, or undefined if no object is found\n* `evict(key)` - returning a promise that resolves when the object is evicted from cache\n\nBy default, an in-memory cache limited to the 500 most recently used requests is used, but you can easily override this:\n\n```javascript\nvar goodGuyLib = require('good-guy-http'); \n\nvar goodGuy = goodGuyLib({cache: goodGuyLib.inMemoryCache(10)});  // smaller in-memory cache\nvar goodGuy = goodGuyLib({cache: false});                         // disable caching altogether\nvar goodGuy = goodGuyLib({cache: customCache});                   // your custom implementation based on Redis/Mongo/Bitcoin blockchain\n```\n\nOnly idempotent requests are cached\n\n#### Idempotence\n\nBy default only HEAD, GET and OPTIONS request are treated as idempotent.\nThat means only requests mentioned above could be cached or retried as they, in short terms, do not modify state\n(for full explanation of idempotence follow the [wikipedia description](https://en.wikipedia.org/wiki/Idempotence#Computer_science_meaning) on the topic).\n\nThat behaviour could be changed using `idempotent` key in options.\nFor some services does that are not REST-ish (e.g. RPC) marking request as idempotent is quite useful.\nFor example this way failed ElasticSearch query will be retried up to 5 times:\n\n```javascript\ngoodGuy({\n    url: 'http://elasticsearch-server.io/_search',\n    method: 'POST',\n    maxRetries: 5,\n    idempotent: true,\n    json: true,\n    body: {\n        query: {\n            match_all: {}\n        }\n    }\n})\n  .then(...);\n```\n\n### Circuit breaker\n\nTo avoid overloading external services that are having trouble coping with the load, good-guy-http uses a circuit breaker\n(based on Yammer's [circuit-breaker-js][circuitbreakerjs]) by default. Each host is treated as a separate service and \nhas a separate circuit breaker.\n\nOnce the breaker trips (too many failures), your requests will start failing with a CircuitBrokenError. It can be easily\nidentified by having the `code` property set to `ECIRCUIT`. Once the situation improves, requests will start going\nthrough normally again.\n\nYou can configure the error threshold or turn the whole feature off:\n\n```javascript\nvar goodGuyLib = require('good-guy-http'); \n\nvar goodGuy = goodGuyLib({\n  circuitBreaking: { errorThreshold: 75 } // only break the circuit when 75% or more requests fail\n});\nvar goodGuy = goodGuyLib({circuitBreaking: false}); // no circuit breaking, please\n```\n\n\n\n\n\n[request]: https://github.com/request/request\n[circuitbreaker]: http://martinfowler.com/bliki/CircuitBreaker.html\n[circuitbreakerjs]: https://github.com/yammer/circuit-breaker-js\n","starsCount":1,"created":"2015-04-16T13:38:13.663Z","modified":"2017-03-17T15:12:09.844Z","lastPublisher":{"name":"kjarmicki","email":"jarmicki@gmail.com"},"owners":[{"name":"kjarmicki","email":"jarmicki@gmail.com"},{"name":"wasyl","email":"wasyl@wasyl.eu"}],"other":{"_attachments":{},"_from":".","_id":"good-guy-http","_nodeVersion":"6.9.4","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/good-guy-http-1.9.0.tgz_1489763529152_0.10244295210577548"},"_npmUser":{"name":"kjarmicki","email":"jarmicki@gmail.com"},"_npmVersion":"3.10.10","_rev":"5-db2c87e9425a5e30a66a3a6d9e57b458","_shasum":"409d8a2376801136d4e401936b6fe275c5675cce","author":{"name":"Jakub Wasilewski","email":"wasyl@wasyl.eu"},"bugs":{"url":"https://github.com/Schibsted-Tech-Polska/good-guy-http/issues"},"directories":{},"dist-tags":{"latest":"1.9.0"},"dist":{"shasum":"409d8a2376801136d4e401936b6fe275c5675cce","tarball":"https://registry.npmjs.org/good-guy-http/-/good-guy-http-1.9.0.tgz"},"maintainers":[{"name":"kjarmicki","email":"jarmicki@gmail.com"},{"name":"wasyl","email":"wasyl@wasyl.eu"}],"readmeFilename":"README.md","time":{"modified":"2017-03-17T15:12:09.844Z","created":"2015-04-16T13:38:13.663Z","1.0.1":"2015-04-16T13:38:13.663Z","1.0.2":"2015-04-17T09:07:10.138Z","1.0.3":"2015-04-17T09:14:43.606Z","1.1.0":"2015-04-17T12:17:42.752Z","1.1.1":"2015-04-20T14:51:18.284Z","1.2.0":"2015-05-22T12:17:03.914Z","1.2.1":"2015-08-06T11:33:32.262Z","1.2.2":"2015-08-06T13:44:45.928Z","1.3.0":"2015-09-18T08:07:41.288Z","1.4.0":"2015-09-22T13:31:47.123Z","1.4.1":"2015-10-05T10:15:18.881Z","1.4.2":"2016-02-15T14:09:15.402Z","1.5.0":"2016-02-15T15:04:23.179Z","1.6.0":"2016-02-16T13:09:08.297Z","1.7.0":"2016-02-26T15:33:14.277Z","1.7.1":"2016-03-10T10:54:06.209Z","1.7.2":"2016-06-20T18:06:06.880Z","1.7.3":"2016-07-27T15:14:01.691Z","1.7.4":"2017-02-04T13:05:43.165Z","1.8.0":"2017-02-23T11:00:51.656Z","1.9.0":"2017-03-17T15:12:09.844Z"},"users":{"cmtegner":true}}}