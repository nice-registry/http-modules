{"name":"eagles","version":"1.0.0","description":"http server framework providing shortcuts","main":"index.js","scripts":{"test":"./node_modules/mocha/bin/mocha test/**/*test.js"},"repository":"https://github.com/mirandalily/eagles","keywords":["http","server","framework","shortcuts","eagles"],"license":"MIT","homepage":"https://github.com/mirandalily/eagles#readme","devDependencies":{"chai":"^3.4.1","chai-http":"^1.0.0","gulp":"^3.9.0","gulp-eslint":"^1.1.1","gulp-mocha":"^2.2.0","gulp-util":"^3.0.7","mocha":"^2.3.4"},"gitHead":"a9b53ecb1f74a69059046c3af3adbbcc467e77b4","versions":[{"number":"1.0.0","date":"2016-01-20T02:54:54.382Z"}],"readme":"# eagles\r\nEagles is a HTTP server API that aims to provide shortcuts in creating server responses.\r\n\r\nCode Fellows 401 JS assignment by [Miranda Raymond](https://github.com/mirandalily), [Natalie Chow](https://github.com/xxnatc), and [Aaron Filson](https://github.com/AaronFilson)\r\n\r\n# Installation\r\nInstall Eagles from your command line:\r\n```\r\nnpm install eagles\r\n```\r\n\r\n# Getting Started\r\nThe backbone of Eagles is comprised of a HTTP server creator and a router. Here is the simplest way to implement Eagles:\r\n\r\n```javascript\r\nconst eagles = require('eagles');\r\n\r\nvar router = new eagles.Router();\r\neagles.createServer(router.route());\r\n```\r\n\r\nThis segment of code sets up a HTTP server listening at port 3000, and a router for you to add routes to. For customization of the server and methods to add routes, refer to the sections below.\r\n\r\n# API Reference\r\n## HTTP Server\r\n### Creating a Server\r\nEagles provides an easy way to create an up-and-running server:\r\n\r\n```javascript\r\neagles.createServer(requestListener[, port])\r\n```\r\n\r\n`.createServer()` returns a `http.Server` object. Like the Node.js HTTP interface, the method takes a `requestListener` function which takes the following form:\r\n\r\n```javascript\r\nfunction (request, response) { }\r\n```\r\n\r\nThe `requestListener` is automatically added to the HTTP `request` event. To dynamically generate the listener, we recommend using the Eagles' router function.\r\n\r\n`.createServer()` also takes an optional parameter for the hosting `port` number. It is defaulted to 3000 unless otherwise specified.\r\n\r\n## Router\r\n### Initiate Router\r\nCreate an instance of Eagles' router by calling the constructor:\r\n\r\n```javascript\r\nvar router = new eagles.Router();\r\n```\r\n\r\nSaving the instance allows you to add routes and referencing it in your server's `requestListener`.\r\n\r\n### Set Up Routes\r\nFive different methods (`.get()`, `.post()`, `.put()`, `.patch()`, `.delete()`), corresponding to five different REST verbs, are available for each router instance. Each method takes a URL and a request listener function as its parameters. The request listener follows the same format as a HTTP server `requestListener`, with the same [list of methods](https://nodejs.org/api/http.html) available for the request and response objects.\r\n\r\nHere is a simple example of routing a `GET` request to `/hello`:\r\n```javascript\r\nvar router = new eagles.Router();\r\nrouter.get('/hello', function(req, res) {\r\n  res.writeHead(200, {'Content-Type': 'text/plain'});\r\n  res.write('world');\r\n  res.end();\r\n});\r\n```\r\n\r\nVisit the [next section](#response-helper) for Eagles' helper methods for writing server response.\r\n\r\n\r\n#### Parameters in URL\r\nYou can set up your route such that parameters can be passed through the URL. Name the variables as you declare the URL and precede each with a colon (`:`). The parameters can then be accessed as properties of a `param` object, which will be the third argument in the request listener function.\r\n\r\n```javascript\r\nrouter.get('/greet/:time/:name', function(req, res, param) {\r\n  eagles.resHead(res, 200, 'plain');\r\n  eagles.resBody(res, 'good ' + param.time + ', ' + param.name);\r\n  res.end();\r\n});\r\n\r\n// GET /greet/morning/felicia\r\n// will yield the response 'good morning, felicia'\r\n```\r\nFrom this example, any `GET` requests with a URL that starts with `/greet` will be matched to this pattern.\r\nIf there are more parameters than the setup specification, the excess parameters will be ignored. However, if there are less parameters, the lacking fields will evaluate to `undefined`.\r\n\r\n\r\n#### Parameters in Query String\r\nAnother way to pass in parameters is through the query string. The parameters are parsed and become accessible as properties of the third argument (`query`) in the request listener function. Be sure to end the URL with a question mark (`?`) to indicate the expectation of a query string. Currently, Eagles only support one parameter in the query string.\r\n\r\n```javascript\r\nrouter.get('/sayhi?', function(req, res, query) {\r\n  eagles.resHead(res, 200, 'plain');\r\n  eagles.resBody(res, 'hi there ' + query.name);\r\n  res.end();\r\n});\r\n\r\n// GET /sayhi?name=felicia\r\n// will yield the response 'hi there felicia'\r\n```\r\nIf there is no query string given in the request, `query` will be an empty object and subsequently its properties will be undefined.\r\n\r\n### Dynamic Routing\r\nAny routes you have or will set up are available in your router instance. Calling `router.route()` will search for and run the function you've set up for that instance.\r\n\r\n\r\n## Response Helper\r\nTyping out `res.writeHead()` with status code and content type over and over again can be hideous.\r\n\r\nHere is a list of response helper functions available with Eagles. By passing in the `res` object as reference and parameters for status code and content type, Eagles provides an easy way to do the same task. There are also helpers for writing body contents.\r\n\r\n\r\n### Status Code: `.status()`\r\n`.status()` sets the response status code:\r\n\r\n```\r\neagles.status(res, code);\r\n```\r\n\r\nwhere `code` should be a 3-digit HTTP status code.\r\n\r\n\r\n### Content Type: `.contentType()`\r\n`.contentType()` sets the type of the response body:\r\n\r\n```\r\neagles.contentType(res, type);\r\n```\r\n`type` should correspond to the MIME type of the content. Use full MIME type identifier (e.g. `text/html`) or Eagles' shortcut for common content types:\r\n\r\n| Shortcut | MIME Type |\r\n| -------- | --------- |\r\n| `'plain'`| `'text/plain'` |\r\n| `'html'` | `'text/html'` |\r\n| `'xml'`  | `'text/xml'` |\r\n| `'json'` | `'application/json'` |\r\n| `'octet'`| `'application/octet-stream'` |\r\n| `'form'` | `'multipart/form-data'` |\r\n| `'jpg'`  | `'image/jpeg'` |\r\n| `'png'`  | `'image/png'` |\r\n\r\n**Use both `.status()` and `.contentType()` to write the header:**\r\n```javascript\r\nrouter.get('/hello', function(req, res) {\r\n  eagles.status(res, 200);\r\n  eagles.contentType(res, 'plain');\r\n  ...\r\n});\r\n```\r\n\r\nBoth methods are **chainable**, this code does the same things as above:\r\n```javascript\r\nrouter.get('/hello', function(req, res) {\r\n  eagles.status(res, 200).contentType(res, 'plain');\r\n  ...\r\n});\r\n```\r\n\r\n\r\n### Writing the Header in One Go: `.resHead()`\r\nCombining `.status()` and `.contentType()`, `.resHead()` is an even faster way to write header and it takes the following format:\r\n```\r\neagles.resHead(res, code, type);\r\n```\r\n\r\nwhere `type` takes the same shortcuts as described in the content type section above.\r\n\r\n\r\n### Writing Response Body Data: `.resBody()`\r\nWriting the response content is straightforward.\r\n```\r\neagles.resBody(res, content);\r\n```\r\n\r\n**Here are `.resHead()` and `.resBody()` in action:**\r\n```javascript\r\nrouter.get('/hello', function(req, res) {\r\n  eagles.resHead(res, 200, 'plain');\r\n  eagles.resBody(res, 'world');\r\n  res.end();\r\n});\r\n```\r\n\r\nBoth methods are again **chainable**, so this snippet is equivalent to the one above:\r\n```javascript\r\nrouter.get('/hello', function(req, res) {\r\n  eagles.resHead(res, 200, 'plain').resBody(res, 'world');\r\n  res.end();\r\n});\r\n```\r\n\r\n\r\n### Sending File: `.sendFile()`\r\n```\r\neagles.sendFile(res, filepath);\r\n```\r\n\r\nNothing will get through as the response if `filepath` is invalid. Be sure to specify in the header a correctly content type before calling `.sendFile()`:\r\n\r\n```javascript\r\nrouter.get('/helloFile', function(req, res) {\r\n  eagles.resHead(res, 200, 'html');\r\n  eagles.sendFile(res, 'path/to/file.html');\r\n});\r\n```\r\nNote that `res.end()` is not needed when using `.sendFile()`, as the read stream will close after all the data has been piped through.\r\n\r\n\r\n### Sending JSON: `.sendJSON()`\r\n```\r\neagles.sendJSON(res, input);\r\n```\r\n`input` can be a **JavaScript object, array, or string**, and will be stringified as when it passes through to response. `input` can also be a **filepath**. If the path leads to a JSON file, the content of that file will be used to populate the response. If the path does not lead to a file or if the file does not have the JSON extension, the filepath will be used as the response.\r\n\r\nUnlike other response helper methods, `.sendJSON()` defaults to send a 200 status code, set the content type to `application/json`, and automatically end the response once the data is through. So when using `.sendJSON`, this is all you need within the request listener:\r\n\r\n```javascript\r\nrouter.get('/helloJSON', function(req, res) {\r\n  eagles.sendJSON(res, {msg: 'hello world'});\r\n});\r\n\r\nrouter.get('/helloJSON2', function(req, res) {\r\n  eagles.sendJSON(res, '/some/filepath.json');\r\n});\r\n\r\n```\r\n\r\nNote that you can overwrite the status code with a header method (e.g. `.status()`).\r\n","created":"2016-01-20T02:54:54.382Z","modified":"2016-01-20T02:54:54.382Z","lastPublisher":{"name":"xxnatc","email":"cychownat@gmail.com"},"owners":[{"name":"xxnatc","email":"cychownat@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"eagles","_nodeVersion":"4.2.4","_npmUser":{"name":"xxnatc","email":"cychownat@gmail.com"},"_npmVersion":"2.14.12","_rev":"1-fa3337914cf0a667b352bd5083f41674","_shasum":"15158ca7e149ef1b6b16bc69da497a131761082a","author":{"name":"Miranda Raymond, Natalie Chow, Aaron Filson"},"bugs":{"url":"https://github.com/mirandalily/eagles/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"15158ca7e149ef1b6b16bc69da497a131761082a","tarball":"http://registry.npmjs.org/eagles/-/eagles-1.0.0.tgz"},"maintainers":[{"name":"xxnatc","email":"cychownat@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-01-20T02:54:54.382Z","created":"2016-01-20T02:54:54.382Z","1.0.0":"2016-01-20T02:54:54.382Z"}}}