{"name":"passport-reverseproxy","version":"0.1.0","description":"HTTP reverse proxy authentication strategies for Passport.","keywords":["passport","reverse proxy","authentication"],"repository":"https://github.com/mckinsey/passport-reverseproxy","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/MIT"}],"main":"./lib/index.js","dependencies":{"pkginfo":">=0.2","passport":">=0.1.3","netmask":">=0.0.2"},"devDependencies":{"vows":">=0.6.x"},"scripts":{"test":"node node_modules/vows/bin/vows --spec test/*"},"engines":{"node":">= 0.8.0"},"readme":"# Passport-ReverseProxy\n\nHTTP reverse proxy authentication strategies for [Passport](https://github.com/jaredhanson/passport).\n\nThis module lets you authenticate HTTP requests using HTTP header values injected by a\nHTTP reverse proxy server in front of your application server.  Reverse proxy authentication\nis a technique for enterprise networks to provide Single Sign On (SSO) for enterprise users.\n\nBy plugging into Passport, support for these schemes can be easily and unobtrusively integrated into any\napplication or framework that supports [Connect](http://www.senchalabs.org/connect/)-style\nmiddleware, including [Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-reverseproxy\n\n## Usage of HTTP \n\n#### Using Apache as a reverse proxy\n\nHere is an example of configuring Apache for use as a reverse proxy using a local passwd file.\n\nCredit: [Jenkins Reverse Proxy Auth Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Reverse+Proxy+Auth+Plugin)\n\n    <Location />\n        AuthName \"Please sign in with your Apache user name and password\"\n        AuthType BASIC\n        AuthUserFile /etc/apache2/passwd\n        Require valid-user\n\n        # prevent the client from setting this header\n        RequestHeader unset X-Forwarded-User\n\n        # Adds the X-Forwarded-User header that indicates the current user name.\n        # this portion came from http://old.nabble.com/Forcing-a-proxied-host-to-generate-REMOTE_USER-td2911573.html#a2914465\n        RewriteEngine On\n        # see the Apache documentation on why this has to be lookahead\n        RewriteCond %{LA-U:REMOTE_USER} (.+)\n        # this actually doesn't rewrite anything. what we do here is to set RU to the match above\n        RewriteRule .* - [E=RU:%1]\n        RequestHeader set X-Forwarded-User %{RU}e\n    </Location>\n\n> Notes:\n> * Make sure that clients cannot bypass the reverse proxy. If they can send requests directly to Jenkins, then a malicious client can send in arbitrary header name with arbitrary value, thus compromising the security of Jenkins\n> * Make sure you configure the reverse proxy to erase the header that you use to pass the authenticated user name. This prevents malicious client from setting the header name with arbitrary value, which would ruin the security.\n\n\n#### Configure Strategy\n\nThe HTTP Reverse proxy authentication strategy authenticates users by inspecting a\nconfigurable set of HTTP request headers. \n\nBy default, the strategy will look for a request header named 'X-Forwarded-User',\nwhich will be used as the value for `req.user.username`.\n\nOptionally, you can specify the request headers that should participate in \nauthentication decisions via the `options.headers` map:\n\n    var express = require('express'),\n        passport = require('passport'),\n        ReverseProxyStrategy = require('passport-reverseproxy');\n\n    passport.use(new ReverseProxyStrategy({\n        headers: {\n          'X-Forwarded-User': { alias: 'username', required: true },\n          'X-Forwarded-UserEmail': { alias: 'email', required: false }\n        }\n      })\n    );\n\n    // require authentication for all requests except favicon.ico\n    app.configure(function() {\n      app.use(express.favicon())\n      app.use(express.bodyParser());\n      app.use(passport.initialize());\n      app.use(passport.authenticate('reverseproxy', { session: false }));\n      app.use(express.static(path.join(__dirname, 'public')));\n    });\n\nYou can also specify a network range as a whitelist of allowed client\nconnections to your app.  The whitelist is a cursory security check\nto verify the end user did not circumvent the reverse proxy server.\nYour deployment should use this setting merely as a defense in depth\nlayer alongside more robust network access control techniques \n(e.g.,  IPSec tunnels, VLANs, firewall rules). Advanced enterprise\nreverse proxy appliances may also include a non-repudiatable\ntoken, like a digital signature, that you should validate\nin the `verify` function.\n\n    passport.use(new ReverseProxyStrategy({\n        headers: {\n          'X-Forwarded-User': { alias: 'username', required: true },\n          'X-Forwarded-UserId': { alias: 'id', required: false }\n        },\n         // only allow localhost to proxy requests\n        whitelist: '127.0.0.1/0'\n      })\n    );\n\nUnlike most Passport authentication strategies, it is unlikely you will need\nsession caching of the authentication ticket, since the reverse proxy should\ninject the headers into every request to your server.\n\nThe strategy optinally supports a `verify` callback, which accepts these\nreverse proxy header values and calls `done` providing a user.\n\n    passport.use(new ReverseProxyStrategy({\n       headers: { \n          'X-Forwarded-User': { alias: 'username', required: true },\n          'X-Forwarded-UserId': { alias: 'id', required: false }\n       },\n       // only allow localhost to proxy requests\n       whitelist: '127.0.0.1/0'\n      },\n      function(headers, user, done) {\n        var err = null;\n\n        // verify that the username is an email address\n        if (! /^.*@.*$/.test(headers['X-Forwarded-User'])) { return done(err, false, 401); }\n\n        return done(err, user);\n      })\n    );\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'reverseproxy'` strategy, to\nauthenticate requests.  Requests relying on request header values are inherently\nstateless, and should not require session support, so the `session` option can be set to `false`.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/private', \n      passport.authenticate('reverseproxy', { session: false }),\n      function(req, res) {\n        res.json(req.user);\n      });\n\n#### Examples\n\nFor a complete, working example, refer to the [Reverse Proxy example](https://github.com/mckinsey/passport-reverseproxy/tree/master/examples).\n\n## Credits\n\n  - [Steve Jansen](http://github.com/steve-jansen)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\n","versions":[{"number":"0.1.0","date":"2013-08-11T03:21:50.762Z"}],"starsCount":1,"created":"2013-08-11T03:21:49.960Z","modified":"2016-10-06T12:50:44.868Z","lastPublisher":{"name":"steve-jansen","email":"stevejansen_github@icloud.com"},"owners":[{"name":"steve-jansen","email":"stevejansen_github@icloud.com"}],"other":{"_attachments":{},"_from":".","_id":"passport-reverseproxy","_npmUser":{"name":"steve-jansen","email":"stevejansen_github@icloud.com"},"_npmVersion":"1.2.15","_rev":"1-bcb24fa5cec9620e62e8f40dd4d307e4","author":{"name":"Steve Jansen","email":"stevejansen_github@icloud.com","url":"http://steve-jansen.github.com/"},"bugs":{"url":"http://github.com/mckinsey/passport-reverseproxy/issues"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"a01def585e003f32aa55e2d88cb384289d4093b1","tarball":"http://registry.npmjs.org/passport-reverseproxy/-/passport-reverseproxy-0.1.0.tgz"},"maintainers":[{"name":"steve-jansen","email":"stevejansen_github@icloud.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-06T12:50:44.868Z","created":"2013-08-11T03:21:49.960Z","0.1.0":"2013-08-11T03:21:50.762Z"},"users":{"tmurngon":true}}}