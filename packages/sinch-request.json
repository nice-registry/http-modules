{"name":"sinch-request","version":"0.0.6","description":"Library for signing and verifying Sinch API http REST-requests for client (web/node) or backend.","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["Sinch","browserify","SMS","VoIP","calling","video","datachannel","webrtc","SDK","request","signing","signature","digest","http auth","http","backend","callback","portal","dashboard","PAPI"],"license":"MIT","dependencies":{"assert-plus":"^0.1.5","create-hash":"^1.1.1","create-hmac":"^1.1.3"},"gitHead":"9387ce7897d7756fa016942de4955e8f8d1af1d2","versions":[{"number":"0.0.1","date":"2015-07-10T14:59:20.679Z"},{"number":"0.0.2","date":"2015-07-10T15:35:11.407Z"},{"number":"0.0.3","date":"2015-07-10T15:36:02.428Z"},{"number":"0.0.4","date":"2015-07-10T15:44:24.653Z"},{"number":"0.0.5","date":"2015-08-17T15:19:29.752Z"},{"number":"0.0.6","date":"2015-08-17T15:22:22.434Z"}],"readme":"# Sinch HTTP Authentication node module\n\nNode module to add authentication headers, or validate request headers, according to Sinch HTTP Authentication practice for Digest authentication and user authentication. Compatible with browserify for browser based applications.\n\n_Note: This module is for advanced developer where specific control over HTTP requests are required. For a more high-level module, check out the sinch-rest-api module or the sinch SDK._\n\nTransforming request headers usually involves verifying and/or setting the following headers as needed;\n\n - authorization\n - x-timestamp\n - content-length\n - content-type\n\n## Installing\n\nInstall is straight forward using npm; \n\n\tnpm install sinch-request --save\n\n_Note: Module is compatible with browserify_\n\n## Include in your project\n\n\tvar sinchRequest = require('sinch-request');\n\nPass the options object through the relevant sinchRequest method, before proceeding with the http request, as shown in the following example.\n\n## Example, send SMS\n\n\tvar sinchRequest = require('sinch-request');\n\tvar https = require('https');\n\n\t// Your application credentials\n\tvar creds = {\n\t  key: 'SOME_APP_KEY',\n\t  secret: 'SOME_APP_SECRET'\n\t}\n\n\t// HTTP request parameters for sending SMS\n\tvar options = {\n\t  method: 'POST',\n\t  host: 'messagingapi-01.sinch.com',\n\t  port: 443,\n\t  path: '/v1/sms/+1555123456',\n\t  data: '{\"message\":\"Hello World!\"}', // Data to be sent in JSON format\n\t  withCredentials: false, // Necessary for browser compatability (browserify)\n\t};\n\n\t// Add authentication header (application)\n\tsinchRequest.applicationSigned(options, creds);\n\n\t// Perform the request\n\tvar req = https.request(options, function(response) {\n\t  console.log('API response', response.statusCode);\n\t  var data = '';\n\t  response.on('data', function (chunk) {\n\t    data += chunk;\n\t  });\n\t  response.on('end', function () {\n\t    console.log('Response body: ' + data);\n\t  });\n\t});\n\treq.end(options.data);\n\n## Example, verify callback signature\n\n\tvar sinchRequest = require('sinch-request');\n\tvar http = require('http');\n\n\t// Your application credentials\n\tvar creds = {\n\t  key: 'SOME_APP_KEY',\n\t  secret: 'SOME_APP_SECRET'\n\t}\n\n\t// Create a server\n\tvar server = http.createServer(function handleRequest(request, response) {\n\t  var data = '';\n\t  request.on('data', function (chunk) {\n\t    data += chunk; // Collect POST data\n\t  });\n\n\t  request.on('end', function() {\n\t    request.data = data;\n\n\t    // Verify signature\n\t    var validSignature = sinchRequest.verifySignature(request, creds);\n\n\t    response.writeHead(200, {'Content-Type': 'application/json; charset=utf-8'});\n\t    if(validSignature) {\n\t      response.end(someResponse); // Give good response\n\t    }\n\t    else {\n\t      response.end('{}'); // This was not from Sinch, give empty response\n\t      // Optionally this attempt should be logged for later investigation\n\t    }\n\t  });\n\t});\n\n\tserver.listen(8080, function(){ console.log('Server is running'); });\n\nIn this example, a simple http callback server is set-up to validate incoming requests. This is important in order to verify that the requests are actually coming from Sinch. When giving a positive response, additional checks may be desired. For example, when building a verification backend it may be a good idea to have some checks on the price or any custom headers you've attached to the request (for example, a session ID) in order to prevent abuse or unexpected costs. Also, in the case of verification, it may be a good idea to log successful verification attempts. \n\n## Get your app key\n\nNew to Sinch? In order to get started, please visit [our website](http://www.sinch.com) and sign up for a free development account.\n\n## Methods\n\n- __public__ - Used for public endpoints (only sinch User API)\n- __applicationSigned__ - Digest authentication using application credentials\n- __instanceSigned__ - Digest authentication using instance credentials\n- __verify__ - Verify incoming request with Digest authentication \n- __ticket__ - Use a ticket for request authentication, only used for retrieving an instance\n\n## Application or Instance credentials?\n\nSinch credentials (key and secret pair) come in two flavors; __application__ and __instance__. \n\n_Application credentials_ are used when API calls are made on behalf of a particular application and are usually made by systems you control, or when Sinch perform callbacks to your backend. When verifying callbacks, please see the `verify()` method.\n\n_Instance credentials_ are used for authenticated users and have an expire time set. Usually the credentials are valid for 24 hours and can be used to access resources on behalf of that particular user, for example, when placing a call. A user can get instance credentials by providing an authentication ticket to the `/instance` endpoint on the base API (api.sinch.com). The authentication ticket itself can be created using the `sinch-ticketgen` module, or by relying on Sinch User Authentication services. See the [Sinch REST user guide](https://www.sinch.com/docs/overview/) for more information. \n\n## Public or Signed?\n\nOnly a few User-API endpoints can be used with the public authentication header, this is only used with Sinch Authentication, which is optionally used for partner applications and always used for Sinch Portal API integrations. See the [Sinch user guide](https://www.sinch.com/docs/voice/javascript/#authentication) for more information.\n\nAll other requests should be made using either application-signed requests, or instance-signed requests.\n\n## Samples\n\nSee the `samples/` folder, for some basic usage examples. Both samples work fine both in Node.js and in the browser by using browserify. \n\nFirst edit the relevant sample to ensure it got your credentials or user information. Then you can run the sample in Node using: \n\n\t$ node samples/SAMPLE_NAME.js\n\nIf you'd like to run it in the browser, first [browserify](http://browserify.org) the sample into a browser-compatible script using: \n\n\t$ browserify samples/SAMPLE_NAME.js > sample_bundle.js\n\nInclude the bundle in a web project, by adding the following tag to your HTML file:\n\n\t<script src=\"sample_bundle.js\"></script>\n\nBe sure to check the developer console for console output.\n\n## Alternate pattern\n\nInstead of including data in the options object it's possible to only set the `Content-Length` header, as well as `Content-MD5`. The example above would then look like this; \n\n\tvar sinchRequest = require('sinch-request');\n\tvar https = require('https');\n\tvar createHash = require('create-hash');\n\n\t// Your application credentials\n\tvar creds = {\n\t  key: 'SOME_APP_KEY',\n\t  secret: 'SOME_APP_SECRET'\n\t}\n\n\tvar data = '{\"message\":\"Hello World!\"}'; // Data to be sent in JSON format\n\n\t// HTTP request parameters for sending SMS\n\tvar options = {\n\t  method: 'POST',\n\t  host: 'messagingapi-01.sinch.com',\n\t  port: 443,\n\t  path: '/v1/sms/+1555123456',\n\t  withCredentials: false, // Necessary for browser compatability (browserify)\n\t  headers: {\n\t  \t'content-md5': createHash('md5').update(data).digest('base64'),\n\t  \t'content-length': data.length\n\t  }\n\t};\n\n\t// Add authentication header (application)\n\tsinchRequest.applicationSigned(options, creds);\n\n\t// Perform the request\n\tvar req = https.request(options, function(response) {\n\t  console.log('API response', response.statusCode);\n\t  var data = '';\n\t  response.on('data', function (chunk) {\n\t    data += chunk;\n\t  });\n\t  response.on('end', function () {\n\t    console.log('Response body: ' + data);\n\t  });\n\t});\n\treq.end(data);\n\nThis method requires a few extra steps and there's an extra dependency on the `create-hash` library for MD5 calculation. However, it will give you a bit more control and in some scenarios this may be crucial for optimization. \n\n## Feedback \n\nQuestions and/or feedback on this module can be sent by contacting [dev@sinch.com](mailto:dev@sinch.com).\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Sinch AB\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n","created":"2015-07-10T14:59:20.679Z","modified":"2015-08-17T15:22:22.434Z","lastPublisher":{"name":"sinchmagnus","email":"magnus@sinch.com"},"owners":[{"name":"sinchmagnus","email":"magnus@sinch.com"}],"other":{"_attachments":{},"_from":".","_id":"sinch-request","_nodeVersion":"0.10.32","_npmUser":{"name":"sinchmagnus","email":"magnus@sinch.com"},"_npmVersion":"2.1.7","_rev":"1-d46776b4957700953571d59adb225973","_shasum":"dd3f140848b9e76a8ddc6e6ffd1e73dc9c35e856","author":{"name":"Magnus Lundstedt"},"directories":{},"dist-tags":{"latest":"0.0.6"},"dist":{"shasum":"dd3f140848b9e76a8ddc6e6ffd1e73dc9c35e856","tarball":"http://registry.npmjs.org/sinch-request/-/sinch-request-0.0.6.tgz"},"maintainers":[{"name":"sinchmagnus","email":"magnus@sinch.com"}],"readmeFilename":"README.md","time":{"modified":"2015-08-17T15:22:22.434Z","created":"2015-07-10T14:59:20.679Z","0.0.1":"2015-07-10T14:59:20.679Z","0.0.2":"2015-07-10T15:35:11.407Z","0.0.3":"2015-07-10T15:36:02.428Z","0.0.4":"2015-07-10T15:44:24.653Z","0.0.5":"2015-08-17T15:19:29.752Z","0.0.6":"2015-08-17T15:22:22.434Z"}}}