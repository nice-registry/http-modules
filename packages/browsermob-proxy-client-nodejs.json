{"name":"browsermob-proxy-client-nodejs","version":"0.0.0","description":"HTTP client is interacting with BrowserMobProxy backend trough REST API","main":"index.js","scripts":{"test":"test"},"keywords":["browsermob","proxy","har","selenium","testing"],"license":"MIT","dependencies":{"co":"^4.6.0","request":"^2.72.0","typedproxy":"^1.0.3"},"devDependencies":{"nconf":"^0.8.4","should":"^8.4.0","webdriverio":"^4.0.9"},"gitHead":"227ea512a6c5cfe6c18e74f2f8dc307ed3f9db9d","versions":[{"number":"0.0.0","date":"2016-08-10T10:32:14.544Z"}],"readme":"# Browsermob-proxy-client-nodejs\r\nHTTP client is interacting with BrowserMobProxy backend trough REST API. With LittleProxy implementation only.\r\n##Installation\r\n```\r\nnpm i browsermob-proxy-client-nodejs\r\n```\r\n##Example\r\n```javascript\r\nconst bmpClient = require('browsermob-proxy-client-nodejs');\r\n\r\nconst bmpHost = '127.0.0.1'; //ip where BrowserMob Proxy was started\r\nconst bmpPort = 9090; //tcp port where BrowserMob Proxy was started\r\n\r\nlet browserMobProxyClient = undefined;\r\n\r\n(new bmpClient(bmpHost, bmpPort)).create()\r\n  .then((client) => {\r\n    //Browser Mob Client\r\n    browserMobProxyClient = client;\r\n  })\r\n  .then(() => {\r\n  //start capture a traffic\r\n    return browserMobProxyClient.newHar();\r\n  })\r\n  .then(() => {\r\n    //make some request through browsermob proxy, that has started above\r\n    const proxy = `http://${bmpHost}:${browserMobProxyClient.port}` \r\n    return makeSomeRequestThroughProxy(proxy); //it is a imaginary function\r\n  })\r\n  .then(() => {\r\n    //get HAR\r\n    return browserMobProxyClient.getHar();\r\n  })\r\n .then((har) => {\r\n    //make some action with HAR\r\n    console.log(har);\r\n  })\r\n .catch((value) => {done(new Error(value));});\r\n```\r\n\r\n##Usage\r\nFirst, you must start BrowserMob Proxy something like :\r\n```\r\njava -jar ./path/to/browsermobproxy.jar -port 9090\r\n```\r\n\r\nOk, we may start coding:\r\n\r\n-\r\n\r\n> Include **browsermob-proxy-client-nodejs** module in your application : \r\n\r\n```javascript\r\nconst bmp = require('browsermob-proxy-client-nodejs');\r\n```\r\n\r\n-\r\n\r\n> Create an object(**bmpSet**) for service set of browserMob Proxy instances. : \r\n\r\n```javascript\r\nconst bmpHost = '127.0.0.1';\r\nconst bmpPort = 9090; \r\n\r\nconst bmpSet = new bmp(bmpHost, bmpPort);\r\n```\r\n\r\n-\r\n\r\n> Now, we are ready to create client for interacting with BrowserMob Proxy. \r\nThen, we can invoke all methods, that described [below](#clientMethods). Each method is Promise. \r\n\r\n```javascript\r\nbmpSet.create()\r\n  .then((client) => {\r\n    return client.close();\r\n  });\r\n```\r\n\r\n-\r\n\r\n> If you want control all of clients instance, you may use [controllingMethods](#controllingMethods).\r\nEach method is Promise, too. \r\n\r\n```javascript\r\nbmpSet.getProxiesList()\r\n  .then((list) => {\r\n    console.log(list);\r\n    //print : [{port : 8080}, {port : 8081}, {port : 8083}]\r\n  });\r\n```\r\n<a name=\"clientMethods\"></a>\r\n##Client methods\r\n\r\n<a name=\"browserMobProxyClientApi+newHar\"></a>\r\n\r\n##### newHar([boolCaptureHeaders], [boolCaptureBody], [boolCaptureAllContent], [pageRef], [pageTitle])\r\nCreates a new HAR attached to the proxy and returns the HAR content if there was a previous HAR\r\n\r\n\r\n| Param | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| [boolCaptureHeaders] | <code>boolean</code> | <code>true</code> | capture headers or not |\r\n| [boolCaptureBody] | <code>boolean</code> | <code>false</code> | capture content bodies or not |\r\n| [boolCaptureAllContent] | <code>boolean</code> | <code>false</code> | capture binary content or not. |\r\n| [pageRef] | <code>string</code> | <code>&quot;Page 1&quot;</code> | the string name of the first page ref that should be used in the HAR |\r\n| [pageTitle] | <code>string</code> | <code>&quot;Page 1&quot;</code> | the title of first HAR page |\r\n\r\n*Fulfill returned value* : Object that represent [HAR](http://www.softwareishard.com/blog/har-12-spec)\r\n\r\n<a name=\"browserMobProxyClientApi+startPage\"></a>\r\n##### startPage([newPageTitleObject], [pageRef], [pageTitle])\r\nStarts a new page on the existing HAR\r\n\r\n| Param | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| [newPageTitleObject] | <code>object</code> |  | - |\r\n| [pageRef] | <code>string</code> | <code>&quot;Page N&quot;</code> | The string name of the first page ref that should be used in the HAR. |\r\n| [pageTitle] | <code>string</code> | <code>&quot;Page N&quot;</code> | The title of new HAR page |\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+close\"></a>\r\n##### close()\r\nShuts down the proxy and closes the port.\r\n\r\n*Fulfill returned value* : undefined\r\n<a name=\"browserMobProxyClientApi+getHar\"></a>\r\n\r\n##### getHar()\r\nReturns the JSON/HAR content representing all the HTTP traffic passed through the proxy\r\n(provided you have already created the HAR with this [method](#browserMobProxyClientApi+newHar))\r\n\r\n*Fulfill returned value* : Object that represent [HAR](http://www.softwareishard.com/blog/har-12-spec)\r\n\r\n<a name=\"browserMobProxyClientApi+getWhiteList\"></a>\r\n##### getWhiteList()\r\nDisplays whitelisted items\r\n\r\n*Fulfill returned value* : Array of urls which have set before by [setWhiteList() method](#browserMobProxyClientApi+setWhiteList) \r\n\r\n<a name=\"browserMobProxyClientApi+setWhiteList\"></a>\r\n##### setWhiteList(httpCodeStatus, regexps)\r\nSets a list of URL patterns to whitelist\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| httpCodeStatus | <code>number</code> | the HTTP status code to return for URLs that do not match the whitelist. |\r\n| regexps | <code>string</code> | a comma separated list of regular expressions. |\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+clearWhiteList\"></a>\r\n##### clearWhiteList()\r\nClears all URL patterns from the whitelist\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n##### getBlackList()\r\nDisplays blacklisted items\r\n\r\n*Fulfill returned value* : Array of object that represent black list item\r\n\r\n*Fulfill returned value description* : It's one object desccription from array\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| urlPattern | <code>string</code> | incoming regexp for blocking |\r\n| statusCode | <code>number</code> | incoming http code is returned for blocked url |\r\n| httpMethodPattern | <code>string</code> | incoming  regular expression for matching HTTP method (GET, POST, PUT, etc). If null processing all HTTP method. |\r\n| method | <code>string</code> | regular expression for matching HTTP method (GET, POST, PUT, etc). If null processing all HTTP method. |\r\n| responseCode | <code>number</code> | http code is returned for blocked url |\r\n| pattern | <code>string</code> | incoming regexp for blocking |\r\n\r\n<a name=\"browserMobProxyClientApi+setBlackList\"></a>\r\n##### setBlackList(httpCodeStatus, regexp, [methodsRegexp])\r\nSetup url to black list\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| httpCodeStatus | <code>number</code> | The HTTP status code to return for URLs that are blacklisted |\r\n| regexp | <code>string</code> | The blacklist regular expression |\r\n| [methodsRegexp] | <code>string</code> | The regular expression for matching HTTP method (GET, POST, PUT, etc). Optional, by default processing all HTTP method |\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+clearBlackList\"></a>\r\n##### clearBlackList() \r\nClears all URL patterns from the blacklist\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+setLimits\"></a>\r\n##### setLimits([browserMobProxyLimitObject])\r\nSets the downstream bandwidth limit in kbps\r\n\r\n| Param | Type |\r\n| --- | --- |\r\n| [browserMobProxyLimitObject] | <code>[LimitsSetterObject](#LimitsSetterObject)</code> | \r\n\r\n<a name=\"LimitsSetterObject\"></a>\r\n###### LimitsSetterObject : <code>object</code>\r\nObject for setting up limits of BrowserMob Proxy\r\n\r\n| Name | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| downstreamKbps | <code>number</code> |  | Downstream bandwidth limit in kbps |\r\n| downstreamBps | <code>number</code> |  | Downstream bandwidth limit in bit per second |\r\n| upstreamKbps | <code>number</code> |  | Upstream bandwidth limit in kbps |\r\n| upstreamBps | <code>number</code> |  | Upstream bandwidth limit in bit per second |\r\n| downstreamMaxKB | <code>number</code> |  | Specifies how many kilobytes in total the client is allowed to download through the proxy |\r\n| upstreamMaxKB | <code>number</code> |  | Specifies how many kilobytes in total the client is allowed to upload through the proxy |\r\n| latency | <code>number</code> | <code>0</code> | Add the given latency to each HTTP request. By default all requests are invoked without latency |\r\n| enable | <code>boolean</code> | <code>false</code> | A boolean that enable bandwidth limiter. Setting any of the properties above will implicitly enable throttling |\r\n| payloadPercentage | <code>number</code> |  | Specifying what percentage of data sent is payload, e.g. use this to take into account overhead due to tcp/ip |\r\n| maxBitsPerSecond | <code>number</code> |  | The max bits per seconds you want this instance of StreamManager to respect |\r\n\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+getLimits\"></a>\r\n##### getLimits()\r\nDisplays the amount of data remaining to be uploaded/downloaded until the limit is reached\r\n\r\n*Fulfill returned value* : [LimitsGetterObject](#LimitsGetterObject)\r\n\r\n*Fulfill returned value description* : \r\n<a name=\"LimitsGetterObject\"></a>\r\n###### LimitsGetterObject : <code>object</code>\r\nObject describes amount of data remaining to be uploaded/downloaded until the limit is reached\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| maxUpstreamKB | <code>number</code> | Show maxUpstreamKB set by [setLimits](#browserMobProxyClientApi+setLimits) |\r\n| maxDownstreamKB | <code>number</code> | Show maxDownstreamKB set by [setLimits](#browserMobProxyClientApi+setLimits) |\r\n| remainingUpstreamKB | <code>number</code> | Show how many kilobytes will be uploaded before the limit is reached |\r\n| remainingDownstreamKB | <code>number</code> | Show how many kilobytes will be downloaded before the limit is reached |\r\n\r\n\r\n<a name=\"browserMobProxyClientApi+setHeaders\"></a>\r\n##### setHeaders(headers)\r\nSet and override HTTP Request headers\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| headers | <code>object</code> | Represents set of headers, where key is a header name and value is a value of HTTP header |\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+overrideDNS\"></a>\r\n##### overrideDNS(dns)\r\nOverrides normal DNS lookups and remaps the given hosts with the associated IP address\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| dns | <code>object</code> | Represents set of of hosts, where key is a host name and value is a IP address which associated with host name |\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+setAutoAuthentication\"></a>\r\n##### setAutoAuthentication(auth, domain)\r\nSets automatic basic authentication for the specified domain. This method supports only BASIC authentication.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| auth | <code>object</code> | Object describes authentication data |\r\n| auth.username | <code>string</code> | Login |\r\n| auth.password | <code>string</code> | Password |\r\n| domain | <code>string</code> | At the domain will be applying basic auth |\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+setWait\"></a>\r\n##### setWait(waitObject)\r\nWait till all request are being made\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| waitObject | <code>object</code> | Object describes waits data |\r\n| waitObject.quietPeriodInMs | <code>number</code> | amount of time after which network traffic will be considered \"stopped\" |\r\n| waitObject.timeoutInMs | <code>number</code> | maximum amount of time to wait for network traffic to stop |\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+setTimeouts\"></a>\r\n##### setTimeouts(timeoutObj)\r\nHandles different proxy timeouts. The new LittleProxy implementation requires that all timeouts be set before start Proxy, because of it tests skipped.\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| timeoutObj | <code>object</code> | Describes timeout object |\r\n| timeoutObj.requestTimeout | <code>number</code> | Request timeout in milliseconds. timeout value of -1 is interpreted as infinite timeout. |\r\n| timeoutObj.readTimeout | <code>number</code> | Read timeout in milliseconds. Which is the timeout for waiting for data or, put differently, a maximum period inactivity between two consecutive data packets. A timeout value of zero is interpreted as an infinite timeout. |\r\n| timeoutObj.connectionTimeout | <code>number</code> | Determines the timeout in milliseconds until a connection is established. A timeout value of zero is interpreted as an infinite timeout. |\r\n| timeoutObj.dnsCacheTimeout | <code>number</code> | Sets the maximum length of time that records will be stored in this Cache. A nonpositive value disables this feature |\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+setRedirectUrls\"></a>\r\n##### setRedirectUrls(redirectObj)\r\nRedirecting URL's\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| redirectObj |  | Describes redirect object |\r\n| redirectObj.matchRegex | <code>string</code> | a matching URL regular expression |\r\n| redirectObj.replace | <code>string</code> | replacement URL |\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+removeRedirects\"></a>\r\n##### removeRedirects()\r\nRemoves all URL redirection rules currently in effect\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+setRetries\"></a>\r\n##### setRetries(numberOfTries)\r\nSetting the retry count\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| numberOfTries | <code>number</code> | The number of times a method will be retried |\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+clearDNSCache\"></a>\r\n##### clearDNSCache() \r\nEmpties the DNS cache\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+setRequestInterception\"></a>\r\n##### setRequestInterception(rule)\r\nDescribe your own request interception. See details explanation [here](#https://github.com/lightbody/browsermob-proxy#rest-api-interceptors-with-littleproxy)\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| rule | <code>string</code> | a string which determines interceptor rules. |\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"browserMobProxyClientApi+setResponseInterception\"></a>\r\n##### setResponseInterception(rule)\r\nDescribe your own response interception. See details explanation [here](#https://github.com/lightbody/browsermob-proxy#rest-api-interceptors-with-littleproxy)\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| rule | <code>string</code> | a string which determines interceptor rules. |\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n<a name=\"controllingMethods\"></a>\r\n##Controlling methods\r\n\r\n<a name=\"browserMobProxyClient+getProxiesList\"></a>\r\n##### getProxiesList()\r\nReceives list of all proxies, which were started.\r\n\r\n*Fulfill returned value* : Array of object that represent proxy info\r\n\r\n*Fulfill returned value description* : It's one object description from array\r\n\r\n<a name=\"proxyInfo\"></a>\r\n###### proxyInfo : <code>object</code>\r\nObject that represent proxy info\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| port | <code>number</code> | tcp port, where proxy was started |\r\n\r\n<a name=\"browserMobProxyClient+create\"></a>\r\n##### create()\r\nCreates new instance of [browserMob Proxy Client](#clientMethods)\r\n\r\n*Fulfill returned value* : Instance of [browserMob Proxy Client](#clientMethods)\r\n\r\n<a name=\"browserMobProxyClient+getOwnProxiesList\"></a>\r\n##### getOwnProxiesList()\r\nReturns own proxy list. Returned proxies belong only to current instance of [browserMob Proxy Client](#clientMethods)\r\n\r\n*Fulfill returned value* : Array of object that represent proxy info\r\n\r\n*Fulfill returned value description* : It's one object description from array\r\n\r\n<a name=\"proxyInfo\"></a>\r\n###### proxyInfo : <code>object</code>\r\nObject that represent proxy info\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| port | <code>number</code> | tcp port, where proxy was started |\r\n\r\n\r\n<a name=\"browserMobProxyClient+closeAllOwnProxies\"></a>\r\n##### closeAllOwnProxies()\r\nCloses all proxies belong to current set of BrowserMob Proxy clients.\r\n\r\n*Fulfill returned value* : undefined\r\n\r\n\r\n##If you use a some webdriver module for Node.JS\r\n\r\nSuppose you are using [webdriverio](https://github.com/webdriverio/webdriverio) and want change User-Agent header.\r\nLet's go\r\n```javascript\r\nconst bmp = require('browsermob-proxy-client-nodejs');\r\nconst webdriverio = require('webdriverio');\r\n\r\n//helper for starting browser trough our Browser Mob Proxy\r\nconst initWithProxy = (seleniumPort, proxyHost, proxyPort) => {\r\n    const options = {\r\n        port : seleniumPort,\r\n        desiredCapabilities: {\r\n            browserName: 'firefox',\r\n            proxy : {\r\n                proxyType : 'manual',\r\n                httpProxy : `${proxyHost}:${proxyPort}`\r\n            }\r\n        }\r\n    };\r\n    return webdriverio.remote(options).init();\r\n};\r\n\r\n//connection info (browserMob Proxy and Selenium)\r\nconst bmpHost = '127.0.0.1';\r\nconst bmpPort = 9090;\r\n\r\nconst seleniumPort = 4444;\r\n\r\n//create browsermob proxy controlling instance\r\nconst bmpSet = new bmp(bmpHost, bmpPort);\r\n\r\n//rule for change header\r\nconst headerName = 'User-Agent';\r\nconst headerValue = 'YOUR AWESOME USER';\r\nconst interceptionRule = `request.headers().add('${headerName}', '${headerValue}');`;\r\n\r\n//here we will be storing client instance\r\nlet  browserMobProxyClient = undefined;\r\n\r\n//create browsermob client instance\r\nbmpSet.create()\r\n  .then((client) => {\r\n      //Browser Mob Client\r\n      browserMobProxyClient = client;\r\n      //set up our or override current header\r\n      return browserMobProxyClient.setRequestInterception(interceptionRule);\r\n  })\r\n  .then(() => {\r\n    //Create new selenium session\r\n    return initWithProxy(seleniumPort, bmpHost, browserMobProxyClient.port)\r\n    .url(moronHTTPUrl);\r\n  })\r\n  .catch((error) => {/*error handling*/});\r\n```\r\n","created":"2016-08-10T10:32:14.544Z","modified":"2016-08-10T10:32:14.544Z","lastPublisher":{"name":"antonecma","email":"anton.ecma@gmail.com"},"owners":[{"name":"antonecma","email":"anton.ecma@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"browsermob-proxy-client-nodejs","_nodeVersion":"6.3.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/browsermob-proxy-client-nodejs-0.0.0.tgz_1470825118686_0.6204304473940283"},"_npmUser":{"name":"antonecma","email":"anton.ecma@gmail.com"},"_npmVersion":"3.10.3","_rev":"1-3f6eafade20ed203445a59761e746a50","_shasum":"81bff4186d9532aa57b6ca0dd45e6e782be069ae","author":{"name":"Anton L."},"directories":{},"dist-tags":{"latest":"0.0.0"},"dist":{"shasum":"81bff4186d9532aa57b6ca0dd45e6e782be069ae","tarball":"http://registry.npmjs.org/browsermob-proxy-client-nodejs/-/browsermob-proxy-client-nodejs-0.0.0.tgz"},"maintainers":[{"name":"antonecma","email":"anton.ecma@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-08-10T10:32:14.544Z","created":"2016-08-10T10:32:14.544Z","0.0.0":"2016-08-10T10:32:14.544Z"}}}