{"name":"listen-spawn","description":"Start a HTTP server which runs commands when pinged.","version":"0.7.3","homepage":"https://github.com/twolfson/listen-spawn","repository":"https://github.com/twolfson/listen-spawn","licenses":[{"type":"MIT","url":"https://github.com/twolfson/listen-spawn/blob/master/LICENSE-MIT"}],"main":"lib/listen-spawn","bin":{"listen-spawn":"bin/listen-spawn"},"engines":{"node":">= 0.6.0"},"scripts":{"test":"mocha"},"devDependencies":{"grunt":"~0.3.17","mocha":"~1.11.0","request":"~2.21.0"},"keywords":["server","listen","spawn","command","http","run","exec","ping"],"dependencies":{"fn-colors":"~0.1.0","optimist":"~0.5.2","single-child":"~0.3.3"},"readme":"# listen-spawn [![Donate on Gittip](http://badgr.co/gittip/twolfson.png)](https://www.gittip.com/twolfson/)\n\nStart a server to run commands when touched.\n\nIt was designed to allow for execution of semi-frequent commands but not on *every* save.\n\nThis is accomplished by being a generic HTTP server with the ability to write [text editor specific plugins][plugins] to ping the server.\n\nSublime Text 2 terminal\n\n![Sublime Text 2][subl-screenshot]\n\n[plugins]: #sublime-text-plugin\n[subl-screenshot]: sublime_text_2.png\n\n## Getting Started\nInstall the module globally with: `npm install -g listen-spawn`\n\n```sh\n# Navigate to your working directory\ncd my_project\n\n# Set up listen-spawn to run `npm test`\nlisten-spawn -- npm test # Listening at http://localhost:3000/ [...]\n\n# In a separate process, curl the server to run `npm test` again\ncurl http://localhost:3000/ # > my_project@0.1.0 test [...]\n```\n\n### Integrating with Sublime Text 2\nI am still looking for a silent yet plugin-free solution. If really want a one-off plugin, please open a [GitHub issue][issues].\n\nFor the time being, the following shortcut invokes a `curl` request to `http://localhost:3000/` when `alt+x` is pressed.\n\n```js\n// Add the following to your \"Key Bindings - User\" inside the []\n{ \"keys\": [\"alt+x\"], \"command\": \"exec\", \"args\": {\"cmd\": [\"curl\", \"http://localhost:3000/\"]} }\n```\n\nFor the Windows users, please install [MinGW][mingw] (should be installed with [msysgit][msysgit]) and add it to your `PATH`.\n\n[issues]: https://github.com/twolfson/listen-spawn/issues\n[mingw]: http://www.mingw.org/\n[msysgit]: http://msysgit.github.io/\n\n## Documentation\n`listen-spawn` installs a CLI endpoint via `npm`. It is good practice to always use `--` to separate `options` from `command` as this can lead to unintended parsing.\n\n```sh\n$ listen-spawn\nUsage: listen-spawn [options] -- command [args...]\nStarts server and invokes command with arguments whenever touched.\n\nOptions:\n  --port  Port to start server on  [default: 3000]\n```\n\n## Examples\n### Run a specific test\n```sh\n$ listen-spawn -- mocha test/assert.js\n20 Jun 04:17:58 - [listen-spawn] Listening at http://localhost:3000/\n20 Jun 04:17:58 - [listen-spawn] Starting new process -- mocha test/assert.js\n\n  ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․\n\n  42 tests complete (16 ms)\n\n20 Jun 04:17:58 - [listen-spawn] App exited cleanly\n```\n\n### Script testing a browser launcher\n```sh\n$ listen-spawn -- node example/launch.js\n20 Jun 04:20:25 - [listen-spawn] Listening at http://localhost:3000/\n20 Jun 04:20:25 - [listen-spawn] Starting new process -- node example/launch.js\nStarting browser\n[...]\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via [grunt](https://github.com/gruntjs/grunt) and test via `npm test`.\n\n## License\nCopyright (c) 2013 Todd Wolfson\n\nLicensed under the MIT license.\n","versions":[{"number":"0.1.0","date":"2013-06-20T11:22:50.279Z"},{"number":"0.1.1","date":"2013-06-22T19:30:40.020Z"},{"number":"0.2.0","date":"2013-06-22T20:12:51.696Z"},{"number":"0.2.1","date":"2013-06-22T20:14:44.320Z"},{"number":"0.2.2","date":"2013-06-22T23:10:15.803Z"},{"number":"0.3.0","date":"2013-06-22T23:33:55.084Z"},{"number":"0.4.0","date":"2013-06-22T23:43:00.683Z"},{"number":"0.4.1","date":"2013-06-22T23:47:13.194Z"},{"number":"0.5.0","date":"2013-06-27T09:08:21.662Z"},{"number":"0.6.0","date":"2013-06-28T06:13:54.577Z"},{"number":"0.6.1","date":"2013-07-05T05:02:18.827Z"},{"number":"0.7.0","date":"2013-07-24T08:18:11.793Z"},{"number":"0.7.1","date":"2013-07-24T08:35:58.222Z"},{"number":"0.7.2","date":"2013-07-29T07:24:50.655Z"},{"number":"0.7.3","date":"2013-08-05T03:05:08.028Z"}],"created":"2013-06-20T11:22:48.130Z","modified":"2013-08-05T03:05:08.028Z","lastPublisher":{"name":"twolfson","email":"todd@twolfson.com"},"owners":[{"name":"twolfson","email":"todd@twolfson.com"}],"other":{"_attachments":{},"_from":".","_id":"listen-spawn","_npmUser":{"name":"twolfson","email":"todd@twolfson.com"},"_npmVersion":"1.2.14","_rev":"1-bd55f75b5d92177addef720a81b2bb91","author":{"name":"Todd Wolfson","email":"todd@twolfson.com","url":"http://twolfson.com/"},"bugs":{"url":"https://github.com/twolfson/listen-spawn/issues"},"directories":{},"dist-tags":{"latest":"0.7.3"},"dist":{"shasum":"bb9e6ee1b2d0bcd908f2a8cb8f587b60cfedec13","tarball":"http://registry.npmjs.org/listen-spawn/-/listen-spawn-0.7.3.tgz"},"maintainers":[{"name":"twolfson","email":"todd@twolfson.com"}],"readmeFilename":"README.md","time":{"modified":"2013-08-05T03:05:08.028Z","created":"2013-06-20T11:22:48.130Z","0.1.0":"2013-06-20T11:22:50.279Z","0.1.1":"2013-06-22T19:30:40.020Z","0.2.0":"2013-06-22T20:12:51.696Z","0.2.1":"2013-06-22T20:14:44.320Z","0.2.2":"2013-06-22T23:10:15.803Z","0.3.0":"2013-06-22T23:33:55.084Z","0.4.0":"2013-06-22T23:43:00.683Z","0.4.1":"2013-06-22T23:47:13.194Z","0.5.0":"2013-06-27T09:08:21.662Z","0.6.0":"2013-06-28T06:13:54.577Z","0.6.1":"2013-07-05T05:02:18.827Z","0.7.0":"2013-07-24T08:18:11.793Z","0.7.1":"2013-07-24T08:35:58.222Z","0.7.2":"2013-07-29T07:24:50.655Z","0.7.3":"2013-08-05T03:05:08.028Z"}}}