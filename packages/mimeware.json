{"name":"mimeware","description":"Framework agnostic HTTP middleware to infer the proper MIME content type response header","version":"0.1.2","license":"MIT","repository":"https://github.com/h2non/mimeware","main":"index","keywords":["middleware","mime","content","type","mimetype","types","text","response","express","connect"],"engines":{"node":">= 0.10.0","io":">=1.0.0"},"scripts":{"test":"mocha --reporter spec --ui tdd"},"dependencies":{"lodash.merge":"^3.0.0","mime":"^1.2.11"},"devDependencies":{"chai":"^1.9.1","express":"3.4.1","mocha":"^2.1.0","request":"^2.51.0"},"gitHead":"7309d2dfaa452ce0c7167ad641ce1fa2f56fbb80","homepage":"https://github.com/h2non/mimeware","versions":[{"number":"0.1.0","date":"2015-01-27T23:32:43.901Z"},{"number":"0.1.1","date":"2015-01-28T09:55:56.391Z"},{"number":"0.1.2","date":"2015-01-28T16:07:34.067Z"}],"readme":"# mimeware [![Build Status](https://api.travis-ci.org/h2non/mimeware.svg?branch=master)][travis] [![Dependency Status](https://gemnasium.com/h2non/mimeware.svg)][gemnasium] [![NPM version](https://badge.fury.io/js/mimeware.svg)][npm]\n\nNode.js/io.js HTTP server middleware to infer and define the proper MIME content type as response header\n\nIt is web framework agnostic and works properly in Connect, Express, Restify, Sails... among others\nwhich implements the standard connect-based middleware interface: `use(function (req, res, next) { ... })`\n\nIt includes all 600+ types and 800+ extensions defined by the Apache project, plus additional types submitted by the node.js community. It uses [node-mime](https://github.com/broofa/node-mime)\n\nIt was implemented specially for older Express/Connect versions \nwhich has no smart support for content type discovering\n\n## Installation\n\n```bash\nnpm install mimeware --save\n```\n\n## Usage\n\n```js\nvar express = require('express')\nvar mimeware = require('mimeware')\nvar app = express()\n\napp.use(mimeware({ defaultType: 'text/html' }))\n\napp.get('/hello', function (req, res, next) {\n  // respond with default type: text/html\n  res.send('Hello World!')\n})\n\napp.get('/hello.json', function (req, res, next) {\n  // respond with type: application/json\n  res.json({ say: 'Hello World!' })\n})\n\napp.get('/hello.xml', function (req, res, next) {\n  // respond with type: text/xml\n  res.send('<say>Hello World!</say>')\n})\n```\n\n### Options\n\n#### defaultType\nType: `string` Type: `text/html`\n\nDefine the default MIME type to use if cannot infer it\n\n#### ignore\nType: `array<string|regex>`\n\nAn array of regex or string-like path patterns to ignore\n\n#### defaultCharset\nType: `string` Default: `utf-8`\n\nDefine the default charset encoding type if cannot infer one.\n\n#### charset\nType: `boolean` Default: `true`\n\nDefine the proper encoding charset if required\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT) Â© Tomas Aparicio\n\n[travis]: http://travis-ci.org/h2non/mimeware\n[gemnasium]: https://gemnasium.com/h2non/mimeware\n[npm]: http://npmjs.org/package/mimeware\n","created":"2015-01-27T23:32:43.901Z","modified":"2015-01-28T16:07:34.067Z","lastPublisher":{"name":"h2non","email":"tomas@aparicio.me"},"owners":[{"name":"h2non","email":"tomas@aparicio.me"}],"other":{"_attachments":{},"_from":".","_id":"mimeware","_npmUser":{"name":"h2non","email":"tomas@aparicio.me"},"_npmVersion":"1.4.28","_rev":"1-977ed1d8a6ffa88334be028e43abe07a","_shasum":"69df1cfcc7ebe8c2e88c8f9d914bfdebfc64c11c","author":{"name":"Tomas Aparicio"},"bugs":{"url":"https://github.com/h2non/mimeware/issues"},"directories":{},"dist-tags":{"latest":"0.1.2"},"dist":{"shasum":"69df1cfcc7ebe8c2e88c8f9d914bfdebfc64c11c","tarball":"http://registry.npmjs.org/mimeware/-/mimeware-0.1.2.tgz"},"maintainers":[{"name":"h2non","email":"tomas@aparicio.me"}],"readmeFilename":"README.md","time":{"modified":"2015-01-28T16:07:34.067Z","created":"2015-01-27T23:32:43.901Z","0.1.0":"2015-01-27T23:32:43.901Z","0.1.1":"2015-01-28T09:55:56.391Z","0.1.2":"2015-01-28T16:07:34.067Z"}}}