{"name":"all-node-oracle","description":"A NodeJS and Oracle DB integration, NodeJS act as http gateway for plsql server pages","keywords":["oracle","sql","plsql","psp","psp.web","servlet","driver","jdbc","ndbc","pool"],"version":"0.10.5","homepage":"https://github.com/kaven276/noradle","repository":"https://github.com/kaven276/noradle","main":"server.js","bin":{},"scripts":{"start":"node demo/server.js","testDBCall":"node test/call_plsql_for_result_sets.js"},"config":{},"engines":{"node":">=0.8"},"dependencies":{"formidable":">1.0.11","debug":"~2.1.1"},"devDependencies":{},"optionalDependencies":{"formidable":">1.0.11","debug":"~2.1.1"},"gitHead":"c6af92585b89be9a5a78af736f9c54619959e43d","readme":"Noradle is for Node & Oracle integration,\nwith the aid of Node,\njust write nearly all business logic in a infomation system in PL/SQL store procedure code,\nnode, in front of oracle, provide access to oracle by HTTP,\nand node javascript code can access oracle directly by noradle NDBC,\noracle plsql can send out message to node by repeat NDBC call.\n\nThe formal repository name is 'noradle',\n**all-node-oracle** is just a synonym used for npm search and github search,\nnever `npm install all-node-oracle`.\n\nsee [noradle](https://github.com/kaven276/noradle) for latest version in github.\n\nsee [noradle](https://www.npmjs.com/package/noradle) for latest npm publishment in npm registry.\n\nThe work at Now\n==========\n\n  Sorry for long time of broken install scripts and demos.\nI have just checked installation scripts and demos,\nthey are passed test for initial and overlap installation,\ndemo app work fine.\n\n  But documentation may be somewhat old,\nnot sync with the very latest work.\nSee demo first, and I'm rushing to make a set of refreshed documentation.\nBut noradle is not a small utility project,\nit's a full oracle-node-based server-side information system architecture,\nit have a framework and library API.\nThrough it's more easy to develope/maintain a oracle-based information system,\ncomplete and concise documentation require big effort.\n\n##  The recent changes are list below:\n\n* use node-store-based session, remove oracle GAC(global application context) based session store.\nsupport session across different oracle instances among RAC instances, data-guard nodes, distributed databases\n* oracle result-cache refresh mechanism prefer user session marker based update checker\n* no longer rely on GAC for features, so oracle GAC memeory overlow will never occur, no GA required\n* obsolete old complex printing/url API p(k_xhtp)/u, add new concise print API(x,m,tb,tr,sty,l)\nthat servlet code is formatted well for both plsql code and html/xml code\n* noradle core have fine architecture, split to layers, servlet engine is just a http handler,\nand can be easy integrated to connect/express like environment.\n* support response filter plugin architecture, now support lines/resultsets format converters.\n* All none core features is removed or refactored as internal plugins.\n* old DCO(exthub+worker) call-out mechanism is removed,\nuse repeated NDBC call-in to listen to pipe message(as call-out request header/body)\n\n\n\n##  The noradle project is now advanced to v0.10.x release.\n\n## Roadmap:\n\n* one DBPool instance can hold oracle connections from different oracle instance among RAC, data-guard, distributed db.\nand one request can route to the right connect among them.\n* Good response caching, server cache that can serve requests even if it's session controled page.\n* GAC based result cache version updater\n*\n* connection tunnel that let oracle to connect to node front positioned behind NAT\n* better file upload/post design\n\nOverview\n==========\n\n1. psp.web. NodeJS act as http gateway to convert and pass http request data onto oracle PL/SQL procedure\nand receive and transfer back what the PL/SQL produce.\n2. call in db driver. Provide javascript API to access PL/SQL page and facilities to product result sets\nand convert them into javascript objects.\n3. call out facility as repeated call in listen for new messages.\n\nsee [Introduction](http://docs.noradle.com/introduction.html) for more intro.\n\nsee [Noradle's Goal](http://docs.noradle.com/NoradleGoal.html) to understand what noradle aim for.\n\n`cd ./demo && node server.js` will start demo server.\nor see ready demo server at http://unidialbook.com/demo.\nAll noradle features are shown in demo app.\n\nInstallation\n===========================\n\n### Prequirement\n\n* Oracle Instant Client or Any Oracle Client is installed first\n* Python, used by node-gyp\n* C++ Compiler toolchain (GCC, Visual Studio or similar)\n* set ENV variables OCI_LIB_DIR, OCI_INCLUDE_DIR, OCI_VERSION, NLS_LANG\n* Create symlinks for libclntsh and libocci\n* (Linux) Install libaio\n* Configure the dynamic library path on your platform to include $OCI_LIB_DIR\n\n**No No No, all items in the above list is not required at all.**\n\n  All you need to install on is just node and oracle,\nthere are no any types of oracle client driver required,\nnor oracle instant client required.\nIf you can install node and oracle on your server on any OS,\nyou can install noradle on your server.\n\n### install on OS filesystem and ORACLE database\n\n  Noradle will install two parts:\n\n* one is node javascript code,\nrun on top of node,\n`npm -g install noradle` is ok.\n* the other is oracle schema units,\ninstall/run on top of oracle database.\n`cd oracle && sqlplus \"/ as sysdba\" @install.sql` will create supporting schema and its objects in oracle database.\n\nsee [Deployment](http://docs.noradle.com/deployment.html) for detailed info.\n\nPart 1 : psp.web (plsql http servlet)\n==========\n\n## very basic demo\n\n  The very basic demo that use `r.getc` to get request parameter,\ncall `h.write` to print response body.\n\n\n```plsql\n\n procedure show_user_name is\n   v user_tab%rowtype\n  begin\n    v.user_id := r.getc('uid');\n    select a.* into v from user_tab a where a.user_id = v.user_id;\n    h.write('hello ' || v.user_name);\n  end;\n\n  // access http://host/dbu/show_user_name?uid=xxx then\n\n```\n\nsee [noradle-demo](https://github.com/kaven276/noradle-demo) 'server.js'\nfor how to integrate a noradle servlet engine to a node http server.\n\n##  Noradle support concise printing API as below:\n\n* x(tag) print jade like tag for xml/xhtml\n* m(multi) multiply template with array\n* tb(list) quick print table\n* tr(tree) quick print hierachical/nested tags/data\n* sty(style) embed/link css\n* l(url) link other resouce with concise code\n\nsee demo app for all of above.\n\n## documentation links\n\n_Note: doc content may be old or obsolete._\n\nplease see [Introduction](doc/introduction.md) at doc/introduction.md on github (format will lose)\n\nplease see [Documentation Index](http://docs.noradle.com/index.html) at my site\n\nplease see [Introduction](http://docs.noradle.com/introduction.html) at my site\n\nplease see [Deployment](http://docs.noradle.com/deployment.html) at my site\n\nplease see [API demo](http://unidialbook.com/demo) at my demo site\n\nplease see [Basic Coding Guide of Noradle](http://docs.noradle.com/coding_guide.html)\n\nplease see [SAAS app \"dialbook\" developed on Noradle](http://unidialbook.com/com)  (you can use any mobile number\n11digits to login)\n\nplease see [License of PSP.WEB](http://docs.noradle.com/license.html) at doc/license.md\n\n\nPart 2 : NDBC (node database connectivity)\n======\n\n`rs.print(name, sys_refcursor)` can print a named SQL result set that is compact formatted.\n\n### The node javascript client who call in oracle plsql servlet\n\n```javascript\n\nvar Noradle = require('..')\n  , parse = Noradle.RSParser.rsParse\n  , inspect = require('util').inspect\n  ;\n\nvar dbPool = new Noradle.DBPool(1522, {\n  FreeConnTimeout : 60000\n});\n\nvar dbc = new Noradle.NDBC(dbPool, {\n  x$dbu : 'demo',\n  __parse : true\n});\n\ndbc.call('db_src_b.example', {limit : 10}, function(status, headers, page){\n  console.log(\"no:\", no);\n  if (status != 200) {\n    console.error('status is', status);\n    console.error(page);\n    console.error(headers);\n    return;\n  }\n  log(page);\n  if (page instanceof String) {\n    console.log(inspect(parse(page), {depth : 8}));\n  } else {\n    console.log(inspect(page, {depth : 8}));\n  }\n\n});\n\n\n```\n\n### The oracle plsql sevlet code who generate SQL result sets\n\n```plsql\ncreate or replace package body db_src_b is\n\n\tprocedure example is\n\t\tcur sys_refcursor;\n\t\tv1  varchar2(50) := 'psp.web';\n\t\tv2  number := 123456;\n\t\tv3  date := date '1976-10-26';\n\tbegin\n\t\topen cur for\n\t\t\tselect a.object_name, a.subobject_name, a.object_type, a.created\n\t\t\t\tfrom user_objects a\n\t\t\t where rownum <= r.getn('limit', 8);\n\t\trs.print('test', cur);\n\n\t\topen cur for\n\t\t\tselect v1 as name, v2 as val, v3 as ctime from dual;\n\t\trs.print('namevals', cur);\n\tend;\n\nend db_src_b;\n\n```\n\n### The compact result sets response lines separated by hidden ASCII and linefeed/comma chars.\n\n```text\n[test]\u001e\nOBJECT_NAME:1\u001f,SUBOBJECT_NAME:1\u001f,OBJECT_TYPE:1\u001f,CREATED:12\u001e\nMEDIA_B\u001f,\u001f,PACKAGE\u001f,2014-05-13 11:31:37\u001e\nMEDIA_B\u001f,\u001f,PACKAGE BODY\u001f,2014-05-13 11:31:37\u001e\nLIST_B\u001f,\u001f,PACKAGE\u001f,2014-07-04 11:32:16\u001e\nLIST_B\u001f,\u001f,PACKAGE BODY\u001f,2014-07-04 11:32:16\u001e\nATTR_TAGP_DEMO_B\u001f,\u001f,PACKAGE\u001f,2014-07-04 15:49:37\u001e\nATTR_TAGP_DEMO_B\u001f,\u001f,PACKAGE BODY\u001f,2014-07-04 15:50:04\u001e\nSTYLE_B\u001f,\u001f,PACKAGE\u001f,2014-07-03 09:40:08\u001e\nSTYLE_B\u001f,\u001f,PACKAGE BODY\u001f,2014-07-03 09:45:21\u001e\nPO_IFRAME_B\u001f,\u001f,PACKAGE\u001f,2014-10-10 10:56:41\u001e\nPO_IFRAME_B\u001f,\u001f,PACKAGE BODY\u001f,2014-10-10 10:56:43\u001e\n\u001e\n[namevals]\u001e\nNAME:1\u001f,VAL:2\u001f,CTIME:12\u001f,P1:1\u001f,P2:1\u001f,PNULL:1\u001e\npsp.web\u001f,123456\u001f,1976-10-26 00:00:00\u001f,value1\u001f,value2\u001f,\u001e\n\n```\n\n### More\n\nResult sets print support main-sub table data print, can be synthesized to hierachical javascript/JSON object.\n\nplease see [Call oracle plsql stored procedure with javascript](http://docs.noradle.com/js_call_plsql.html) at\ndoc/js_call_plsql.md\n\n\n\nPart 3 : call out net proxy\n======\n\n  The \"call out proxy facility\" is depleted,\nuse repeated NDBC call to monitor call-out messages,\nuse normal NDBC call to write back call-out response to oracle.\n\n  The two demos below use repeated NDBC call to pull message from oracle.\n\n## use named pipe, sep by line message format, direct send pipe demo\n\n### The node javascript client who listen call-out message from oracle plsql servlet\n\n```javascript\n\nvar Noradle = require('noradle')\n  , log = console.log\n  , inspect = require('util').inspect\n  ;\n\nvar dbPool = new Noradle.DBPool(1522, {\n    FreeConnTimeout : 60000\n  })\n  , callout = new Noradle.NDBC(dbPool, {\n    __parse : true,\n    __repeat : true,\n    __parallel : 1,\n    __ignore_error : true,\n    x$dbu : 'public',\n    timeout : 1\n  })\n  , callin = new Noradle.NDBC(dbPool, {\n    x$dbu : 'public'\n  })\n  ;\n\ncallout.call('mp_h.pipe2node', {pipename : 'pipe_only'}, function(status, headers, p){\n  var pipename = p.pop()\n    , oper = p[0]\n    , p1 = parseInt(p[1])\n    , p2 = parseInt(p[2])\n    , result\n    ;\n  console.log('callout input params', p);\n  if (pipename) {\n    switch (oper) {\n      case 'add':\n        result = p1 + p2;\n        break;\n      case 'minus':\n        result = p1 - p2;\n        break;\n      case 'multiply':\n        result = p1 * p2;\n        break;\n      default:\n        result = 0;\n    }\n    // need call back with response to oracle\n    callin.call('mp_h.node2pipe', {\n      h$pipename : pipename,\n      oper : oper,\n      result : result\n    });\n  }\n});\n```\n\n### the plsql servet that generate call-out message using dbms_pipe directly\n\n```plsql\n\n﻿procedure multiple_callout_easy_resp is\n  v_result    number;\n  v_rpipename varchar2(100) := r.cfg || '.' || r.slot;\n  p1          number := r.getn('p1', 5);\n  p2          number := r.getn('p2', 3);\n  v_oper      varchar2(30);\n  v_opers     varchar2(100);\n  v_add       number;\n  v_minus     number;\n  v_multiply  number;\nbegin\n  -- clear receive reponse pipe first\n  dbms_pipe.purge(v_rpipename);\n\n  -- callout 1\n  dbms_pipe.pack_message('add');\n  dbms_pipe.pack_message(p1);\n  dbms_pipe.pack_message(p2);\n  dbms_pipe.pack_message(v_rpipename);\n  tmp.n := dbms_pipe.send_message('pipe_only');\n\n  -- callout 2\n  dbms_pipe.pack_message('minus');\n  dbms_pipe.pack_message(p1);\n  dbms_pipe.pack_message(p2);\n  dbms_pipe.pack_message(v_rpipename);\n  tmp.n := dbms_pipe.send_message('pipe_only');\n\n  -- callout 3\n  dbms_pipe.pack_message('multiply');\n  dbms_pipe.pack_message(p1);\n  dbms_pipe.pack_message(p2);\n  dbms_pipe.pack_message(v_rpipename);\n  tmp.n := dbms_pipe.send_message('pipe_only');\n\n  -- receive all the callout response, with any order\n  for i in 1 .. 3 loop\n    if not mp.pipe2param(v_rpipename, 15) then\n      -- callout timeout\n      h.status_line(400);\n      x.t('callout timeout!');\n      return;\n    end if;\n    v_oper   := r.getc('oper');\n    v_result := r.getn('result');\n\n    v_opers := v_opers || v_oper || ',';\n    case v_oper\n      when 'add' then\n        v_add := v_result;\n      when 'minus' then\n        v_minus := v_result;\n      when 'multiply' then\n        v_multiply := v_result;\n      else\n        null;\n    end case;\n  end loop;\n\n  x.p('<p>', 'p1:' || p1);\n  x.p('<p>', 'p2:' || p2);\n  x.p('<p>', 'response receive order:' || v_opers);\n  x.p('<p>', 'add:' || v_add);\n  x.p('<p>', 'minus:' || v_minus);\n  x.p('<p>', 'multiply:' || v_multiply);\nend;\n\n```\n\n## use default named pipe, sep by line message format, use standard print API to generate request demo\n\n### The node javascript client who listen call-out message from oracle plsql servlet\n\n``` javascript\n\nvar Noradle = require('noradle')\n  , log = console.log\n  , inspect = require('util').inspect\n  ;\n\nvar dbPool = new Noradle.DBPool(1522, {\n  FreeConnTimeout : 60000\n});\nvar callout = new Noradle.NDBC(dbPool, {\n  __repeat : true,\n  __parallel : 1,\n  __ignore_error : false,\n  __parse : true,\n  timeout : 1\n});\n\nvar callin = new Noradle.NDBC(dbPool, {});\n\n/**\n * you can fetch multiple types of call-out messages from one named pipe\n * use header to differentiate them\n */\ncallout.call('demo.mp_h.fetch_msg', function(status, headers, message){\n  var msgType = headers['Msg-Type'];\n  switch (msgType) {\n    case 'type1':\n      console.log('type 1 message received.');\n      break;\n    case 'type2':\n      console.log('type 2 message received.');\n      break;\n    case 'type3':\n      console.log('type 3 message received.');\n      break;\n    case 'type4':\n      console.log('type 4 message received.');\n      // mimic call external service to get result and send it back to oracle as synchronized call return value\n      setTimeout(function(){\n        callin.call('demo1.mp_h.node2pipe', {h$pipename : headers['Callback-Pipename'], temperature : -3});\n      }, 1000);\n\n      break;\n  }\n  console.log(headers);\n  console.log(message);\n});\n```\n\n### the plsql servet that generate call-out message using standard printing API between `mp.begin_msg` and `mp.send_msg`\n\n``` plsql\nprocedure sync_sendout4 is\nbegin\n  x.p('<p>', 'a call-out message is send as this page is produced!');\n  mp.begin_msg;\n  mp.set_callback_pipename;\n  h.header('Content-Type', 'text/items');\n  h.header('Msg-Type', 'type4');\n  h.line('Tianjin');\n  mp.send_msg;\n\n  if not mp.pipe2param then\n    h.status_line(504);\n    x.t('callout(get termperature) timeout!');\n    return;\n  end if;\n  x.t('temperature is ' || r.getn('temperature') || ' degree');\nend;\n```\n\n### ECO-System\n\n* see [noradle-demo](https://github.com/kaven276/noradle-demo)\nfor example app of noradle\nthat use http servlet, NDBC call, call-out features.\n* see [noradle-cm](https://github.com/kaven276/noradle-cm)\nfor how to do *Software Configuration Management* with noradle app(PLSQL app).\n* see [unidialbook](http://unidialbook.com)\nfor a noradle based production app.\nIt's a chinese language SAAS web app that serve address book for group customers,\ndeveloped for China Unicom(Tianjin).\nAnd unidialbook have some shared plugin app like EXAM, they are all noradle based.","versions":[{"number":"1.0.0","date":"2015-01-23T06:22:18.412Z"},{"number":"0.10.4","date":"2015-01-23T06:28:09.031Z"},{"number":"0.10.5","date":"2015-01-23T07:52:44.344Z"}],"created":"2015-01-23T06:22:18.412Z","modified":"2015-01-23T07:52:44.344Z","lastPublisher":{"name":"kaven276","email":"kaven276@vip.sina.com"},"owners":[{"name":"kaven276","email":"kaven276@vip.sina.com"}],"other":{"_attachments":{},"_from":".","_id":"all-node-oracle","_npmUser":{"name":"kaven276","email":"kaven276@vip.sina.com"},"_npmVersion":"1.4.28","_rev":"1-b4c6a4528bbe477e226852b171add15b","_shasum":"5d28dae5c7ba41c9412b5f4a53a2e834df17feb3","author":{"name":"Li Yong","email":"kaven276@vip.sina.com"},"bugs":{"url":"https://github.com/kaven276/noradle/issues","email":"kaven276@vip.sina.com"},"directories":{},"dist-tags":{"latest":"0.10.5"},"dist":{"shasum":"5d28dae5c7ba41c9412b5f4a53a2e834df17feb3","tarball":"http://registry.npmjs.org/all-node-oracle/-/all-node-oracle-0.10.5.tgz"},"maintainers":[{"name":"kaven276","email":"kaven276@vip.sina.com"}],"readmeFilename":"README.md","time":{"modified":"2015-01-23T07:52:44.344Z","created":"2015-01-23T06:22:18.412Z","1.0.0":"2015-01-23T06:22:18.412Z","0.10.4":"2015-01-23T06:28:09.031Z","0.10.5":"2015-01-23T07:52:44.344Z"}}}