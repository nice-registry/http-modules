{"name":"frock","version":"1.1.1","description":"A plugin-based tool for running fake HTTP and socket services.","main":"lib/index.js","bin":{"frock":"./bin/frock.js"},"scripts":{"prepublish":"npm test","lint":"standard src/**/*.js tests/**/*.js","build":"rimraf lib && babel src --out-dir lib","start":"npm run build -- --watch","test":"npm run build && babel-node tests/index.js &&  npm run lint"},"repository":"https://github.com/urbanairship/frock","license":"Apache-2.0","homepage":"https://github.com/urbanairship/frock#readme","devDependencies":{"babel-cli":"^6.3.17","babel-preset-es2015":"^6.3.13","portfinder":"^0.4.0","proxyquire":"^1.7.3","rimraf":"^2.4.3","standard":"^5.1.0","tape":"^4.0.0","through":"^2.3.8"},"dependencies":{"arrify":"^1.0.0","babel-polyfill":"^6.3.14","bole":"^2.0.0","chokidar":"^1.0.5","commuter":"^2.0.0","deter":"^1.0.4","evidence":"^1.0.3","fs-find-root":"^1.0.2","garnish":"^2.3.0","interpret":"^1.0.0","minimist":"^1.1.3","mkdirp":"^0.5.1","rechoir":"^0.6.2","resolve":"^1.1.6","semver":"^5.0.3","server-destroy":"^1.0.1"},"babel":{"presets":["es2015"]},"gitHead":"147ed8b5fbf4529aad883f07c7d876cfab13a833","versions":[{"number":"1.0.0","date":"2015-12-25T03:00:27.308Z"},{"number":"1.0.1","date":"2015-12-25T08:39:54.267Z"},{"number":"1.0.2","date":"2016-01-04T21:41:20.161Z"},{"number":"1.1.0","date":"2016-01-29T18:47:01.510Z"},{"number":"1.1.1","date":"2016-01-29T18:58:00.850Z"}],"readme":"# frock\n\nA plugin-based tool for running fake HTTP and socket services.\n\n[![Build Status](http://img.shields.io/travis/urbanairship/frock/master.svg?style=flat-square)](https://travis-ci.org/urbanairship/frock)\n[![npm install](http://img.shields.io/npm/dm/frock.svg?style=flat-square)](https://www.npmjs.org/package/frock)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n\nfrock is a tool for running fake services and serving mock data. It's designed\nfor developers who work in service-oriented architectures, and need to stand up\nfake services that approximate production services in their development\nenvironments.\n\nfrock itself is a host for running HTTP and socket services, and its HTTP router\nmakes it simple to run multiple services on the same port. Outside of the core\nfunctions of starting services and routing to handlers, frock's functionality is\nimplemented through plugins and middleware that you write.\n\nThere are some generic plugins provided for out-of-the-box functionality:\n\n- [frock-static][static] is a plugin for serving static content from files,\n  directories, or URLs.\n- [frock-proxy][proxy] is a plugin for proxying requests from frock to a remote\n  server.\n  \nFor a quick overview of the functionality frock provides, see the\n[example](#quick-start-example) in this README.\n\n## Quick-Start Example\n\nfrock is a Node.js CLI utility, which loads a _frockfile_ from your project\ndirectory. In the following example, we'll create a service that proxies\nrequests to your local development server at http://localhost:8052, but\nintercepts some URLs to serve static content from a variety of sources.\n\nIn your working directory, create a `frockfile.json`:\n\n```json\n{\n  \"servers\": [\n    {\n      \"port\": 8080,\n      \"routes\": [\n        {\n          \"path\": \"/api/segments\",\n          \"methods\": [\"GET\"],\n          \"handler\": \"frock-static\",\n          \"options\": {\n            \"file\": \"fixtures/static/segments.json\",\n            \"contentType\": \"application/json\"\n          }\n        },\n        {\n          \"path\": \"/api/remote\",\n          \"methods\": [\"GET\"],\n          \"handler\": \"frock-static\",\n          \"options\": {\n            \"url\": \"http://raw.githubusercontent.com/somewhere/something.json\",\n            \"contentType\": \"application/json\"\n          }\n        },\n        {\n          \"path\": \"*\",\n          \"methods\": \"any\",\n          \"handler\": \"frock-proxy\",\n          \"options\": {\n            \"url\": \"http://localhost:8052\"\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\nInstall frock and the plugins you requested:\n\n```shell\n$ npm install frock frock-static frock-proxy\n```\n\nThen, run frock:\n\n```shell\n$ frock\n```\n\nThis examples expects that your `PATH` is set to run Node.js packages from your\nproject's installed `node_modules`; see the [Understanding Packages][packages]\nsection of the documentation for details.\n\n_Note:_ By default, frock only allows connections from `localhost`; see the\n[docs on connection filtering][filtering] for details.\n\n## Detailed Documentation\n\nfrock's [documentation](./docs) is split into several sections:\n\n- [Using frock in your project/Understanding Packages][packages] is an overview\n  of how frock is meant to sit alongside your project.\n- Implementing mocks/fakes:\n    - [Plugins][plugins]: writing plugins, where you'll implement your fake\n      services.\n    - [Middleware][middleware]: writing middleware, which can augment your\n      plugins' functionality.\n    - [Cores][cores]: writing cores, which can extend the core functionality of\n      frock.\n- [_frockfile_ Reference][frockfile], which explains the configuration file format\n  that frock uses, the `frockfile.json`\n- [Examples][examples] which provides detailed examples of using frock, and can\n  help you understand how to implement your fake services.\n- [API][api] details the frock API, which can be used programatically rather\n  than via the provided CLI. This also documents the frock singleton your\n  plugins will be passed when they are instantiated.\n\n## CLI\n\nThe `frock` command will search upward from your current directory for a\n`frockfile.json`, and run it; it will also start up a watcher on that file and\nhot-reload on any changes made to it.\n\nUse the built-in help to learn about other options:\n\n```shell\n$ frock --help\n```\n\nSome options can be set via environment variables; these provide defaults, which\ncan still be overridden by explicitly passing CLI flags. Set these to any value\nbesides an empty string to set the default to `true`:\n\n- `FROCK_NO_WATCH` disable watching the frockfile to reload changes\n- `FROCK_DEBUG` set the log level to `debug`\n- `FROCK_RAW_OUTPUT` output the raw log JSON rather than pretty-printing\n- `FROCK_UNSAFE_DISABLE_CONNECTION_FILTERING` disable processing of\n  whitelists/blacklists for connections, and allow any incoming connections\n\n## Testing\n\nFrom the project directory:\n\n```shell\n$ npm test\n```\n\nAny test file that should be run must be required in the `tests/index.js` file.\n\n## License\n\nApache 2.0, see [LICENSE](./LICENSE) for details.\n\n[packages]: ./docs/understanding-packages.md\n[api]: ./docs/api.md\n[cores]: ./docs/cores.md\n[plugins]: ./docs/plugins.md\n[middleware]: ./docs/middleware.md\n[frockfile]: ./docs/frockfile.md\n[filtering]: ./docs/frockfile.md#connection-object-optional \n[examples]: ./examples\n[static]: http://www.npmjs.com/packages/frock-static\n[proxy]: http://www.npmjs.com/packages/frock-proxy\n","starsCount":1,"created":"2015-12-25T03:00:27.308Z","modified":"2016-01-29T18:58:00.850Z","lastPublisher":{"name":"fardog","email":"code@fardogllc.com"},"owners":[{"name":"fardog","email":"code@fardogllc.com"},{"name":"ua","email":"web-team@urbanairship.com"}],"other":{"_attachments":{},"_from":".","_id":"frock","_nodeVersion":"4.2.3","_npmUser":{"name":"fardog","email":"code@fardogllc.com"},"_npmVersion":"2.14.7","_rev":"1-9b79fbcc220b28bec30f330d56fe2231","_shasum":"29a2b5ffbaa30f26e2ec8a8b297299cd72113646","author":{"name":"Urban Airship"},"bugs":{"url":"https://github.com/urbanairship/frock/issues"},"contributors":[{"name":"Nathan Wittstock","email":"nate.wittstock@urbanairship.com"},{"name":"Jesse Keane","email":"jesse.keane@urbanairship.com"}],"directories":{},"dist-tags":{"latest":"1.1.1"},"dist":{"shasum":"29a2b5ffbaa30f26e2ec8a8b297299cd72113646","tarball":"http://registry.npmjs.org/frock/-/frock-1.1.1.tgz"},"maintainers":[{"name":"fardog","email":"code@fardogllc.com"},{"name":"ua","email":"web-team@urbanairship.com"}],"readmeFilename":"README.md","time":{"modified":"2016-01-29T18:58:00.850Z","created":"2015-12-25T03:00:27.308Z","1.0.0":"2015-12-25T03:00:27.308Z","1.0.1":"2015-12-25T08:39:54.267Z","1.0.2":"2016-01-04T21:41:20.161Z","1.1.0":"2016-01-29T18:47:01.510Z","1.1.1":"2016-01-29T18:58:00.850Z"},"users":{"foto":true}}}