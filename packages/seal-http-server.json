{"name":"seal-http-server","version":"2.0.9","description":"seal-http-server serves an Express app. It accepts local HTTP connections and HTTPS-encrypted connections from any given external interface.","license":"MIT","scripts":{"bot":"bot","release":"bot release && npm publish","release-minor":"bot release --type minor && npm publish","release-major":"bot release --type major && npm publish","test":"bot test-units","coverage":"istanbul cover _mocha -- --recursive --ui tdd ","report":"npm run coverage && if [[ $OSTYPE == darwin* ]]; then open=open; else open=xdg-open; fi && $open coverage/lcov-report/index.html"},"main":"lib/httpServer.js","dependencies":{"async":"2.3.0","getenv":"0.7.0","lodash":"4.17.4","@sealsystems/seal-consul":"3.5.4","seal-log":"1.2.0","seal-tlscert":"1.2.1"},"devDependencies":{"assertthat":"0.9.0","docker-host":"3.1.0","eslint-config-seal":"0.0.9","express":"4.15.2","nodeenv":"0.2.1","proxyquire":"1.7.11","roboter":"0.15.1","roboter-server":"0.15.1"},"repository":"https://github.com/sealsystems/seal-http-server","gitHead":"0e791170ff8930e709da12f9c45fb107b4eae872","homepage":"https://github.com/sealsystems/seal-http-server#readme","versions":[{"number":"2.0.8","date":"2017-02-09T09:16:51.607Z"},{"number":"2.0.9","date":"2017-04-28T13:36:17.533Z"}],"readme":"# seal-http-server\n\n[![CircleCI](https://circleci.com/gh/sealsystems/seal-http-server.svg?style=svg)](https://circleci.com/gh/sealsystems/seal-http-server)\n[![AppVeyor](https://ci.appveyor.com/api/projects/status/3bxsobq24cq7jljy?svg=true)](https://ci.appveyor.com/project/Plossys/seal-http-server)\n\nseal-http-server serves an [Express](https://expressjs.com) app. It accepts local HTTP connections and HTTPS-encrypted connections from any given external interface.\n\n## Installation\n\n    $ npm install seal-http-server\n\n## Quick start\n\nFirst you need to add a reference to seal-http-server within your application.\n\n```javascript\nconst httpServer = require('seal-http-server');\n```\n\n### Starting the server\n\nCreate an Express app to define the routes that should be handled:\n\n```javascript\nconst express = require('express');\nconst myExpressApp = express();\n\nmyExpressApp.get('/', function(req, res){\n  res.send('hello world');\n});\n```\n\nThen, create an `options` object:\n\n```javascript\nconst options = {\n  app: myExpressApp,\n  host: '192.168.0.1',\n  port: '3000'\n};\n```\n\n`host` is the hostname or the IP address of the external interface you want the server to bind to. Regardless of the `host` value it will also bind to `localhost`. Both, local and external connections use the given `port`. If you ommit the property `host`, the address that is advertised by Consul will be used as the external interface. See Consul's docs for more information about its [`advertise_addr` setting](https://www.consul.io/docs/agent/options.html#advertise_addr).\n\nFinally, call the `start` function:\n\n```javascript\nhttpServer.start(options, (err) => {\n  if (err) {\n    return console.log('Starting the http server failed.');\n  }\n\n  console.log('Http server is listening', options);\n});\n```\n\n### Shutting down the server\n\nBefore you exit the application, you can perform a graceful shutdown. In this case, no new connection will be accepted by the server and the callback will be called after all already open connections are closed. Thus, no connection will be dropped by the server.\n\nTo perform a graceful shutdown, call the `shutdown` function:\n\n```javascript\nhttpServer.shutdown((err) => {\n  if (err) {\n    return console.log('Shutting down the http server failed.');\n  }\n\n  console.log('Http server is shut down.');\n});\n```\n\nThe only parameter is a `callback` function. It will be called when there are no more open connections.\n\n## Environment variables\n\nFor connections via HTTPS you can define the set of allowed ciphers by setting the environment variable `TLS_CIPHERS`.  \n\n`TLS_UNPROTECTED` controls which connections are encrypted:\n\n- `none`\n\n  Local and external connections are encrypted via HTTPS. This is the most secure setting but decreases the performance to some extend.\n\n- `loopback`\n\n  Local connections are served via HTTP. External connections are encrypted via HTTPS. This is the default setting.\n\n- `world`\n\n  Local and external connections are served via HTTP. **This is insecure!**\n\n## Technical details\n\nIn order to handle traffic coming through the local and the given external interface(s), two server objects will be created: One binds to the local interface, the other one binds to the given external interface(s). Both servers use the same port. This also allows e.g. to use HTTP locally but to encrypt external connections via HTTPS.\n\nFor bookkeeping purposes the server objects are stored as properties of the `instances` variable in [lib/httpServer.js](lib/httpsServer.js).\n\n```javascript\nconst instances = {\n  external: <external server object>,\n  local: <local server object>\n};\n```\n\nDepending on the environment variable `TLS_UNPROTECTED`, the server objects will be of type `Http` or `Https`.\n\nIf `host` in the options of the `start` function is set to `localhost` or `127.0.0.1`, only the local server will be created. The `instances` variable will look like:\n\n```javascript\nconst instances = {\n  local: <local server object>\n};\n```\n\n## Running the build\n\nTo build this module use [roboter](https://www.npmjs.com/package/roboter).\n\n```bash\n$ bot\n```\n","created":"2017-02-09T09:16:51.607Z","modified":"2017-04-28T13:36:17.533Z","lastPublisher":{"name":"manni19682","email":"manfred.thein@sealsystems.de"},"owners":[{"name":"manni19682","email":"manfred.thein@sealsystems.de"}],"other":{"_attachments":{},"_from":".","_id":"seal-http-server","_nodeVersion":"6.10.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/seal-http-server-2.0.9.tgz_1493386575659_0.16003605420701206"},"_npmUser":{"name":"manni19682","email":"manfred.thein@sealsystems.de"},"_npmVersion":"3.10.10","_rev":"2-8ab9bb2e39797af5d6baabc4360da1af","_shasum":"3bc4c8f88136329c0eb2c808770a8b3e2a406f65","author":{"name":"SEAL Systems AG","email":"opensource@sealsystems.de","url":"https://www.sealsystems.de"},"bugs":{"url":"https://github.com/sealsystems/seal-http-server/issues"},"directories":{},"dist-tags":{"latest":"2.0.9"},"dist":{"shasum":"3bc4c8f88136329c0eb2c808770a8b3e2a406f65","tarball":"https://registry.npmjs.org/seal-http-server/-/seal-http-server-2.0.9.tgz"},"maintainers":[{"name":"manni19682","email":"manfred.thein@sealsystems.de"}],"readmeFilename":"README.md","time":{"modified":"2017-04-28T13:36:17.533Z","created":"2017-02-09T09:16:51.607Z","2.0.8":"2017-02-09T09:16:51.607Z","2.0.9":"2017-04-28T13:36:17.533Z"}}}