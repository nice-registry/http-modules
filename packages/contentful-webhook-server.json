{"name":"contentful-webhook-server","version":"1.2.0","description":"Server to handle Contentful webhook HTTP requests","keywords":["contentful","webhook"],"repository":"https://github.com/jvandemo/contentful-webhook-server","main":"index.js","scripts":{"test":"mocha"},"license":"MIT","dependencies":{"basic-auth":"^1.0.0"},"devDependencies":{"chai":"^2.2.0","mocha":"^2.2.4"},"gitHead":"d2548f41d001f7739668a82159f1ce13848d5977","homepage":"https://github.com/jvandemo/contentful-webhook-server","versions":[{"number":"0.1.0","date":"2015-04-24T18:02:00.851Z"},{"number":"0.2.0","date":"2015-04-25T07:34:12.554Z"},{"number":"1.0.0","date":"2015-04-26T13:34:42.038Z"},{"number":"1.1.0","date":"2015-04-26T15:36:08.958Z"},{"number":"1.2.0","date":"2015-05-15T14:26:46.800Z"}],"readme":"# Contentful webhook server\n\n[![Build Status](https://travis-ci.org/jvandemo/contentful-webhook-server.svg?branch=master)](https://travis-ci.org/jvandemo/contentful-webhook-server)\n\nWebhooks in [Contentful](https://www.contentful.com) notify you when content in your space has changed.\n\nContentful webhook server is a lightweight server to handle these notifications:\n\n- handles incoming [Contentful webhook HTTP requests](https://www.contentful.com/developers/documentation/content-delivery-api/#webhooks)\n- emits events for all Contentful webhook topics to allow easy webhook handling\n- supports username/password authentication\n- supports all default [node HTTP server](https://nodejs.org/api/http.html) options\n\n## Installation\n\n```bash\n$ npm install contentful-webhook-server\n```\n\n## Quick example\n\n```javascript\n// Create webhook server\nvar server = require('contentful-webhook-server')({\n  path: '/',\n  username: 'user',\n  password: 'pass'\n});\n\n// Attach handlers to Contentful webhooks\nserver.on('ContentManagement.ContentType.publish', function(req){\n  console.log('A content type was published!');\n});\n\n// Start listening for requests on port 3000\nserver.listen(3000, function(){\n  console.log('Contentful webhook server running on port ' + 3000)\n});\n\n```\n\n## Configuration\n\nYou can pass a configuration object when instantiating the server:\n\n```javascript\n// Create webhook server\nvar server = require('contentful-webhook-server')({\n  path: '/',\n  username: 'user',\n  password: 'pass'\n});\n```\n\nwhere:\n\n- **path**: the path you want the server to listen on, default: '/'\n- **username**: the username you expect the request to contain, default: ''\n- **password**: the password you expect the request to contain, default: ''\n\nSo to start a server on `localhost:3000` without authentication, you can:\n\n```javascript\n// Create server with default options\nvar server = require('contentful-webhook-server')();\n\n// Start listening for requests on port 3000\nserver.listen(3000, function(){\n  console.log('Contentful webhook server running on port ' + 3000)\n});\n```\n\nand to start a server on `localhost:3000/webhooks` with authentication, you can:\n\n```javascript\n// Create server with default options\nvar server = require('contentful-webhook-server')({\n  path: '/webhooks',\n  username: 'user',\n  password: 'pass'\n});\n\n// Start listening for requests on port 3000\nserver.listen(3000, function(){\n  console.log('Contentful webhook server running on port ' + 3000)\n});\n```\n\n## Handling incoming webhook requests\n\nThe server emits incoming Contentful webhook topics as event, so you can:\n\n```javascript\nserver.on('ContentManagement.ContentType.publish', function(req){\n  console.log('A content type was published!');\n});\n\nserver.on('ContentManagement.ContentType.unpublish', function(req){\n  console.log('A content type was unpublished!');\n});\n\nserver.on('ContentManagement.Entry.publish', function(req){\n  console.log('An entry was published!');\n});\n\nserver.on('ContentManagement.Entry.unpublish', function(req){\n  console.log('An entry was unpublished!');\n});\n\nserver.on('ContentManagement.Asset.publish', function(req){\n  console.log('An asset was published!');\n});\n\nserver.on('ContentManagement.Asset.unpublish', function(req){\n  console.log('An asset was unpublished!');\n});\n```\n\n> This module does not make any assumptions about your application and does **NOT** attempt to parse or extract the contents of the request.\n\n> Instead it passes the [request](https://nodejs.org/api/http.html#http_http_incomingmessage) to your handler(s) so you can process (or ignore) the contents of the [incoming message](https://nodejs.org/api/http.html#http_http_incomingmessage) from within your handler(s).\n\n\n## Special wildcard event\n\nThe server emits a special wildcard event too in case you want to listen to all events in one go:\n\n```javascript\n\n// Handler for all successful requests\n// Is not emitted when an error occurs\nserver.on('ContentManagement.*', function(topic, req){\n\n  // topic is available as string\n  // => e.g. ContentManagement.Asset.unpublish\n  console.log('Request came in for: ' + topic);\n});\n```\n\n> This event is only emitted on successful requests, not on errors\n\n## Handling errors and invalid requests\n\nWhen an invalid request comes in, a `ContentManagement.error` event is emitted:\n\n```javascript\n// Handle errors\nserver.on('ContentManagement.error', function(err, req){\n  console.log(err);\n});\n```\n\n## Simulating a request using curl\n\nIf you want to try out your server during development, you can simulate a request without credentials using cUrl:\n\n```bash\n$ curl -X POST --header \"X-Contentful-Topic: ContentManagement.Entry.publish\" localhost:3000\n```\n\nand simulate requests with authentication like this:\n\n```bash\n$ curl -X POST -u user:pass --header \"X-Contentful-Topic: ContentManagement.Entry.publish\" localhost:3000\n```\n\n## Enabling webhooks in Contentful\n\nTo enable webhooks in your Contentful space, go to your space settings and fill in the options you specified in your server configuration:\n\n![contentful-webhook](https://cloud.githubusercontent.com/assets/1859381/7337492/fc2b25e6-ec2b-11e4-99ef-ddaba53e77a6.png)\n\nAs soon as you save the webhook in Contentful, your server will start receiving notifications.\n\n## Example\n\nA working example is included [here](examples/webhook-server.js).\n\n## License\n\nMIT\n\n## Change log\n\n### 1.2.0\n\n- Added ability to mount as middleware\n\n### 1.1.0\n\n- Added working example\n- Updated documentation\n\n### 1.0.0\n\n- Added authentication support\n- Updated documentation\n\n### 0.2.0\n\n- Added unit tests\n- Updated documentation\n\n### 0.1.0\n\n- Initial version\n","starsCount":3,"created":"2015-04-24T18:02:00.851Z","modified":"2015-05-15T14:26:46.800Z","lastPublisher":{"name":"jvandemo","email":"jurgen.van.de.moere@gmail.com"},"owners":[{"name":"jvandemo","email":"jurgen.van.de.moere@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"contentful-webhook-server","_npmUser":{"name":"jvandemo","email":"jurgen.van.de.moere@gmail.com"},"_npmVersion":"1.4.28","_rev":"1-f4e924dd4e8f01493543d78c737d2320","_shasum":"1d6bbbdfce564440a7a421ad65584ff46c41385d","author":{"name":"Jurgen Van de Moere","email":"jurgen.van.de.moere@gmail.com","url":"http://www.jvandemo.com"},"bugs":{"url":"https://github.com/jvandemo/contentful-webhook-server/issues"},"directories":{},"dist-tags":{"latest":"1.2.0"},"dist":{"shasum":"1d6bbbdfce564440a7a421ad65584ff46c41385d","tarball":"http://registry.npmjs.org/contentful-webhook-server/-/contentful-webhook-server-1.2.0.tgz"},"maintainers":[{"name":"jvandemo","email":"jurgen.van.de.moere@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-05-15T14:26:46.800Z","created":"2015-04-24T18:02:00.851Z","0.1.0":"2015-04-24T18:02:00.851Z","0.2.0":"2015-04-25T07:34:12.554Z","1.0.0":"2015-04-26T13:34:42.038Z","1.1.0":"2015-04-26T15:36:08.958Z","1.2.0":"2015-05-15T14:26:46.800Z"},"users":{"dwoolfe":true,"smtudor":true,"nichoth":true}}}