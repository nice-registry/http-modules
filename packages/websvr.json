{"name":"websvr","description":"A simple web server, implement http module(filter) and handler(servlet), autorecover persistent session","version":"0.1.41","dependencies":{"dot":"1.0.0","formidable":"1.0.14","mime":"1.2.9"},"keywords":["web","server","https","filter","handler"],"repository":"https://github.com/newghost/websvr","main":"./websvr/websvr.js","gitHead":"91acf80ac8fb082ce8f923435960c8a5d88a4657","homepage":"https://github.com/newghost/websvr","scripts":{},"versions":[{"number":"0.1.0","date":"2013-05-07T10:17:28.311Z"},{"number":"0.1.1","date":"2013-05-08T02:20:41.128Z"},{"number":"0.1.2","date":"2013-05-15T09:56:01.675Z"},{"number":"0.1.3","date":"2013-05-23T01:34:46.833Z"},{"number":"0.1.4","date":"2013-05-29T07:51:44.603Z"},{"number":"0.1.5","date":"2013-08-31T04:48:49.685Z"},{"number":"0.1.6","date":"2013-09-11T01:19:10.877Z"},{"number":"0.1.7","date":"2013-09-28T23:32:04.407Z"},{"number":"0.1.8","date":"2013-10-27T01:55:50.624Z"},{"number":"0.1.9","date":"2013-10-27T06:29:55.567Z"},{"number":"0.1.10","date":"2013-11-15T14:50:20.019Z"},{"number":"0.1.11","date":"2013-12-15T13:44:24.036Z"},{"number":"0.1.12","date":"2014-01-18T10:13:27.575Z"},{"number":"0.1.13","date":"2014-03-04T15:06:43.997Z"},{"number":"0.1.14","date":"2014-03-04T15:46:20.132Z"},{"number":"0.1.15","date":"2014-03-15T12:22:28.447Z"},{"number":"0.1.16","date":"2014-03-15T13:02:21.606Z"},{"number":"0.1.17","date":"2014-04-12T14:28:16.408Z"},{"number":"0.1.18","date":"2014-06-24T02:54:49.185Z"},{"number":"0.1.19","date":"2014-07-09T05:39:50.017Z"},{"number":"0.1.20","date":"2014-07-18T05:56:52.625Z"},{"number":"0.1.21","date":"2014-07-30T02:43:16.432Z"},{"number":"0.1.22","date":"2014-08-14T09:22:07.096Z"},{"number":"0.1.23","date":"2014-08-15T06:22:32.372Z"},{"number":"0.1.24","date":"2014-08-17T12:40:56.479Z"},{"number":"0.1.25","date":"2014-09-06T08:19:59.654Z"},{"number":"0.1.26","date":"2014-09-23T23:18:54.273Z"},{"number":"0.1.27","date":"2014-10-10T02:05:31.613Z"},{"number":"0.1.28","date":"2014-11-27T09:51:51.536Z"},{"number":"0.1.29","date":"2014-12-10T07:22:35.043Z"},{"number":"0.1.30","date":"2014-12-10T13:25:00.489Z"},{"number":"0.1.31","date":"2014-12-17T06:19:34.520Z"},{"number":"0.1.32","date":"2014-12-28T09:07:22.033Z"},{"number":"0.1.33","date":"2014-12-28T13:37:02.401Z"},{"number":"0.1.35","date":"2015-01-18T00:18:37.088Z"},{"number":"0.1.37","date":"2015-04-12T07:16:07.204Z"},{"number":"0.1.38","date":"2015-06-13T11:59:03.686Z"},{"number":"0.1.39","date":"2015-07-24T04:42:52.567Z"},{"number":"0.1.40","date":"2015-11-13T01:09:41.359Z"},{"number":"0.1.41","date":"2015-12-11T15:11:36.867Z"}],"readme":"WebSvr\r\n==============\r\nA simple web server, implement with filter and handler.\r\n\r\n\r\nFeatures\r\n--------------\r\n- Filter (Middleware):  A request will try to match all the filters first.\r\n- Handler: When a request matched a handler, it will returned, only one handler will be executed.\r\n- Session: By config sessionDir, you can store session in files, with JSON format\r\n- File:  Support uploading files\r\n- Cache: Cahce template in release mode\r\n\r\nInstall\r\n--------------\r\n\r\n    npm install websvr\r\n\r\n\r\nStart\r\n--------------\r\nIt's simple to start the websvr.\r\n\r\n    //import WebSvr module\r\n    var WebSvr = require(\"websvr\");\r\n\r\n    //Start the WebSvr, runnting at parent folder, default port is 8054, directory browser enabled;\r\n    //Trying at: http://localhost:8054\r\n    var webSvr = WebSvr({\r\n        home: \"./web\"\r\n      , listDir:  true\r\n      , debug:    true\r\n      , sessionTimeout: 60 * 1000\r\n    });\r\n\r\n\r\nFilter (HttpModule)\r\n--------------\r\nSession based authentication, basically useage:\r\n\r\n    /*\r\n    Session support; \r\n    */\r\n    webSvr.filter(function(req, res) {\r\n      //Link to next filter\r\n      req.filter.next();\r\n    }, {session:true});\r\n\r\n\r\n    /*\r\n    * filter equal to use\r\n    */\r\n    webSvr.use('/home', function(req, res) {\r\n      //do sth.\r\n      req.filter.next();\r\n    });\r\n\r\n\r\nFilter all the requests that begin with \"test/\", check the user permission in session, except the \"index.htm\" and \"login.do\".\r\n\r\n    /*\r\n    Session Filter: protect web/* folder => (validation by session);\r\n    */\r\n    webSvr.filter(function(req, res) {\r\n      //It's not index.htm/login.do, do the session validation\r\n      if (req.url.indexOf(\"login.htm\") < 0 && req.url.indexOf(\"login.do\") < 0 && req.url !== '/') {\r\n        var val = req.session.get(\"username\");\r\n\r\n        console.log(\"session username:\", val);\r\n        !val && res.end(\"You must login, first!\");\r\n\r\n        //Link to next filter\r\n        req.filter.next();\r\n      } else {\r\n        req.filter.next();\r\n      }\r\n    }, { session: true });\r\n\r\nHandler (HttpHandler, Servlet)\r\n--------------\r\nHandle Login and put the username in session\r\n\r\n    /*\r\n    Handler: login.do => (validate the username & password)\r\n      username: admin\r\n      password: 12345678\r\n    webSvr.url equal to webSvr.get/webSvr.post/webSvr.handle\r\n    */\r\n    webSvr.url(\"login.do\", function(req, res) {\r\n      var qs = req.body;\r\n      console.log(qs);\r\n      if (qs.username == \"admin\" && qs.password == \"12345678\") {\r\n        //Add username in session\r\n        var session = req.session.set(\"username\", qs.username);\r\n        console.log(session);\r\n        res.redirect(\"setting.htm\");\r\n      } else {\r\n        res.writeHead(401);\r\n        res.end(\"Wrong username/password\");\r\n      }\r\n    }, 'qs');\r\n\r\nNote:\r\n--------------\r\nFilter and Handler doesn't have the same match rules when you sending a request\r\n\r\nFilter  : Match any section in the request url, for example\r\n\r\n    websvr.filter(\".svr\", cb);\r\n\r\nThe result is\r\n\r\n    request: \"domain.com/admin/root/login.svr\"   match: true\r\n\r\nHandler : Match from the begining (ignore the first '/'), etc: \r\n\r\n    websvr.handle(\"root/login\", cb)   //equal to\r\n    websvr.handle(\"/root/login\", cb)\r\n\r\netc:\r\n\r\n    request: \"domain.com/root/login.svr\"         match: true\r\n    request: \"domain.com/admin/root/login.svr\"   match: false\r\n\r\nYou can use regular expression to match any part of url in Handler.\r\n\r\nCookies\r\n--------------\r\n\r\n    //get cookie value by key\r\n    req.cookies[key];\r\n\r\n\r\nTemplate\r\n--------------\r\nRender template with params, using doT template engine\r\n\r\n    res.render([view, model]);\r\n\r\nView is optional, it will get the location of template from req.url\r\n\r\n    res.render({json: true});\r\n\r\nView is a relative path, relative to web home\r\n\r\n    //means related to Setting.home\r\n    res.render(\"list.tmpl\", {json: true});\r\n\r\nView is a absolute path, relative to web root\r\n\r\n    //means related to Setting.root\r\n    res.render(\"/list.tmpl\", {json: true});\r\n\r\nRender raw HTML views\r\n\r\n    res.renderRaw(viewContent, model);\r\n\r\nYou can change template engine, \r\n\r\n    webSvr.engine(engineFunc);\r\n\r\nfor example:\r\n\r\n    webSvr.engine(require(\"doT\").compile);\r\n    webSvr.engine(require(\"jade\").compile);\r\n\r\nYou can define some default properties in model, for example header/footer, this parameters will be overridden if they have the same key in your custom model.\r\n\r\n    webSvr.model({\r\n        title   : \"WebSvr Page\"\r\n      , username: \"WebSvr\"\r\n    });\r\n\r\nYou can use template and render it by using websvr.render(tmplPath, model, callback), tmplPath relative to webSvr.home;\r\n\r\n    //pre-defined model\r\n    var model = {};\r\n    webSvr.model(model);\r\n\r\n    //render a template using model, callbak argument is result html\r\n    webSvr.render(\"header.tmpl\", {categoryList: category.categoryList}, function(html) {\r\n      //store rendered html to header\r\n      model.header = html;\r\n      console.log(model);\r\n    });\r\n\r\nInclude file, you can using \"#include\" to include a file during rendering a template, in order to make the process easier, the file will fetched from the cache pool so the first refresh will not work when you first start the server;\r\n\r\n###Be ware: include file: relative to web home, not the template file itself.###\r\n\r\n    <body>\r\n    <!--#include=\"header.part\"-->\r\n    <div id=\"articles\" class=\"container home\">\r\n\r\nCache templates, by default, server will cache the templates(include the \"include file\" in the templates), turn it off via:\r\n\r\n    var webSvr = WebSvr({\r\n      templateCache: false\r\n    });\r\n\r\nClear the cached templates\r\n\r\n    webSvr.clear()\r\n\r\n\r\n\r\nEnable template engine and '<!--#include=\"\"-->', using: res.render()/res.render(model)/res.render(tmplPath, model), etc\r\n\r\nwebSvr.url(['login.htm', 'setting.htm'], function(req, res) {\r\n  res.render();\r\n});\r\n\r\n\r\nIt also support include file in include files, but you need to refresh more times after the first running.\r\n\r\n\r\nSettings\r\n--------------\r\nReturn configuration of current WebSvr instance\r\n\r\n    webSvr.settings\r\n\r\nSettings API:\r\n\r\n    var Settings = {\r\n      //home folder of web\r\n      home: \"../\"\r\n\r\n      //http start\r\n      //default port of http\r\n      , port: 8054\r\n\r\n      //default port of https\r\n      , httpsPort:  8443\r\n      , httpsKey:   \"\"\r\n      , httpsCert:  \"\"\r\n\r\n      //list files in directory\r\n      , listDir: false\r\n      //enable client-side cache(304)\r\n      , cache: true\r\n      //enable debug information output\r\n      , debug: true\r\n      //enable cache of template/include file (when enabled templates will not be refreshed before restart)\r\n      , templateCache: true\r\n\r\n      //default pages, only one is supported\r\n      , defaultPage: \"index.html\"\r\n      //404 template/static file\r\n      , 404:         \"404.tmpl\"\r\n      //show errors to user(displayed in response)\r\n      , showError: true\r\n\r\n      /*\r\n      Session timeout, in milliseconds.\r\n      */\r\n      , sessionTimeout: 1440000\r\n\r\n      //session file stored here\r\n      , sessionDir: os.tmpDir()\r\n\r\n      //session domain, e.g. \".google.com\"\r\n      , sessionDomain: \"\"\r\n\r\n      //tempary upload file stored here\r\n      , uploadDir:  os.tmpDir()\r\n    };\r\n\r\nResponse\r\n--------------\r\nExtension on reponse object\r\n\r\nOuput file, filepath relative to the root\r\n\r\n    res.sendRootFile(filePath, [callback]);\r\n\r\nOuput file, filepath relative to the home (web dir)\r\n\r\n    res.sendFile(filePath);\r\n    res.sendHomeFile(filePath);\r\n\r\nReidrect request\r\n\r\n    res.redirect(url);\r\n\r\nReturn request object\r\n\r\n    res.req\r\n\r\nSet Content-Type\r\n\r\n    res.type('xml');\r\n\r\nSet/Remove Cookie\r\n\r\n    //Set Cookie\r\n    res.cookie(name, value [, {domain: string, path: string, expires: date, secure, httponly }])\r\n    //Remove Cookie\r\n    res.cookie(name, null);\r\n\r\n\r\nChange default charset\r\n\r\n    res.charset = 'utf-8'\r\n\r\n\r\nWebSvr APIs\r\n--------------\r\nMapping url to file, webSvr.url equal to webSvr.handle\r\n\r\n    webSvr.url(\"sitetest\", [\"svr/sitetest.js\"]);\r\n\r\nMapping url to string\r\n\r\n    webSvr.url(\"hello\", \"Hello WebSvr!\")\r\n\r\nHandle post\r\n\r\n    webSvr.post(\"post.htm\", function(req, res) {\r\n        res.end('Received : ' + req.body);\r\n    });\r\n\r\n    //Equal to\r\n    webSvr.handle(\"post.htm\", function(req, res) {\r\n        res.end('Received : ' + req.body);\r\n    }, {post: true});\r\n\r\nPost type\r\n\r\n    post: true/\"json\"/\"qs\"\r\n\r\nHandle session\r\n\r\n    webSvr.session(\"session required url\", function(req, res) {\r\n        console.log(req.session);\r\n        res.end();\r\n    });\r\n\r\n\r\nHandle upload file, it's a specfic filter\r\n\r\n    webSvr.file(\"upload.do\", function(req, res) {\r\n      res.writeHead(200, {\"Content-Type\": \"text/plain\"});\r\n      //Upload file is stored in req.files\r\n      //form fields is stored in req.body\r\n      res.write(JSON.stringify(req.body));\r\n      res.end(JSON.stringify(req.files));\r\n    });\r\n\r\nValid File beofre receing it\r\n\r\n    /*\r\n    * Valid request before receiving\r\n    */\r\n    webSvr.file(\"upload.do\", function(req, res) {\r\n      res.writeHead(200, {\"Content-Type\": \"text/plain\"});\r\n      res.send(req.files);\r\n    }).before(function(req, res) {\r\n      if ((req.headers['content-length'] || 0) > 245760) {\r\n        res.send('Posting is too large, should less than 240K')\r\n      } else {\r\n        return true\r\n      }\r\n    });\r\n\r\nMulti-Mapping in Handler or Filter\r\n\r\n    webSvr.handle([\"about\", \"help\", \"welcome\"], function(req, res) {\r\n        res.writeFile(req.url + \".shtml\");\r\n    }, {post: true});\r\n\r\nPickup parameters from url expression\r\n\r\n    webSvr.handle(\"/verify/:id\", function(req, res) {\r\n      var id = req.params.id;\r\n    });\r\n\r\nParse parameters in url\r\n\r\n    * expression = /home/:key/:pager\r\n    *   /home/JavaScript => { id: 'JavaScript', pager: '' }\r\n    *   /key/JavaScript  => false \r\n\r\n    var params = webSvr.parseUrl(expression, reqUrl);\r\n\r\nSend API\r\n\r\n  webSvr.send([type or statusCode, ] content);\r\n\r\nSend JSON\r\n\r\n    webSvr.send('json', { a: 1, b: 2 });\r\n\r\nSend String\r\n\r\n    webSvr.send(401, 'No permission');\r\n\r\n\r\nMulti-instance support\r\n--------------\r\nStart a https server, make sure that the port will no conflict with others.\r\n\r\n    var httpsSvr = new WebSvr({\r\n        home: \"./\"\r\n\r\n      //disable http server\r\n      , port:      null\r\n\r\n      //enable https server\r\n      , httpsPort: 8443\r\n      , httpsKey:  require(\"fs\").readFileSync(\"svr/cert/privatekey.pem\")\r\n      , httpsCert: require(\"fs\").readFileSync(\"svr/cert/certificate.pem\")\r\n\r\n    }).start();\r\n\r\nDo you want to re-use the filters & handlers?\r\n\r\n    httpsSvr.filters   = webSvr.filters;\r\n    httpsSvr.handlers  = webSvr.handlers;\r\n\r\n\r\nStore session in redis\r\n--------------\r\nInstall: npm install websvr-redis\r\n\r\n    var RedisStore = require('websvr-redis');\r\n\r\n    RedisStore.start({ \r\n        port: 6379\r\n      , host: 'ourjs.org'\r\n      , auth: 'your-password-if-needed'\r\n      , select: 0\r\n    });\r\n\r\n    httpsSvr.sessionStore = RedisStore;\r\n\r\n\r\nClear expired sessions, only 1 refresh timer is needed\r\n\r\n    setInterval(RedisStore.clear, 1000000);\r\n\r\n\r\n\r\n\r\nLincenses\r\n----\r\nMIT, see our license file\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nDemo Sites\r\n----\r\n1. ourjs: url [ourjs.com](http://ourjs.com)\r\n2. icalc: url [icalc.cn](http://icalc.cn),  source code [github](https://github.com/newghost/websvr-icalc/)\r\n\r\n\r\nWebsvr\r\n====\r\n基于NodeJS的一个极简Web服务器, 专为ARM设计。\r\n假设嵌入式设备需要保持长时间稳定运行，当遇到问题时也可自动重启并恢复此前用户的Session会话。\r\n","created":"2013-05-07T10:17:20.205Z","modified":"2015-12-11T15:11:36.867Z","lastPublisher":{"name":"newghost","email":"kris.newghost@gmail.com"},"owners":[{"name":"newghost","email":"kris.newghost@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"websvr","_npmUser":{"name":"newghost","email":"kris.newghost@gmail.com"},"_npmVersion":"1.4.14","_rev":"1-52a6f5eaf4dc68ae696771b1f1ba3b6e","_shasum":"d48b4109ff5999770f69f4963043bc2f505678e6","author":{"name":"Kris Zhang","email":"kris.newghost@gmail.com"},"bugs":{"url":"https://github.com/newghost/websvr/issues"},"directories":{},"dist-tags":{"latest":"0.1.41"},"dist":{"shasum":"d48b4109ff5999770f69f4963043bc2f505678e6","tarball":"http://registry.npmjs.org/websvr/-/websvr-0.1.41.tgz"},"maintainers":[{"name":"newghost","email":"kris.newghost@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-12-11T15:11:36.867Z","created":"2013-05-07T10:17:20.205Z","0.1.0":"2013-05-07T10:17:28.311Z","0.1.1":"2013-05-08T02:20:41.128Z","0.1.2":"2013-05-15T09:56:01.675Z","0.1.3":"2013-05-23T01:34:46.833Z","0.1.4":"2013-05-29T07:51:44.603Z","0.1.5":"2013-08-31T04:48:49.685Z","0.1.6":"2013-09-11T01:19:10.877Z","0.1.7":"2013-09-28T23:32:04.407Z","0.1.8":"2013-10-27T01:55:50.624Z","0.1.9":"2013-10-27T06:29:55.567Z","0.1.10":"2013-11-15T14:50:20.019Z","0.1.11":"2013-12-15T13:44:24.036Z","0.1.12":"2014-01-18T10:13:27.575Z","0.1.13":"2014-03-04T15:06:43.997Z","0.1.14":"2014-03-04T15:46:20.132Z","0.1.15":"2014-03-15T12:22:28.447Z","0.1.16":"2014-03-15T13:02:21.606Z","0.1.17":"2014-04-12T14:28:16.408Z","0.1.18":"2014-06-24T02:54:49.185Z","0.1.19":"2014-07-09T05:39:50.017Z","0.1.20":"2014-07-18T05:56:52.625Z","0.1.21":"2014-07-30T02:43:16.432Z","0.1.22":"2014-08-14T09:22:07.096Z","0.1.23":"2014-08-15T06:22:32.372Z","0.1.24":"2014-08-17T12:40:56.479Z","0.1.25":"2014-09-06T08:19:59.654Z","0.1.26":"2014-09-23T23:18:54.273Z","0.1.27":"2014-10-10T02:05:31.613Z","0.1.28":"2014-11-27T09:51:51.536Z","0.1.29":"2014-12-10T07:22:35.043Z","0.1.30":"2014-12-10T13:25:00.489Z","0.1.31":"2014-12-17T06:19:34.520Z","0.1.32":"2014-12-28T09:07:22.033Z","0.1.33":"2014-12-28T13:37:02.401Z","0.1.35":"2015-01-18T00:18:37.088Z","0.1.37":"2015-04-12T07:16:07.204Z","0.1.38":"2015-06-13T11:59:03.686Z","0.1.39":"2015-07-24T04:42:52.567Z","0.1.40":"2015-11-13T01:09:41.359Z","0.1.41":"2015-12-11T15:11:36.867Z"}}}