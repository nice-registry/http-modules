{"name":"merry","version":"5.3.1","description":"Modular http framework","main":"index.js","bin":{"merry":"./pretty.js"},"scripts":{"deps":"dependency-check . && dependency-check . --extra --no-dev --entry pretty.js","start":"node example | ./pretty.js","test":"standard && npm run deps && nyc tap test/*.js","coverage":"nyc report --reporter=text-lcov > coverage.lcov"},"repository":"https://github.com/shipharbor/merry","keywords":["http","framework","modular","http-framework"],"license":"MIT","dependencies":{"envobj":"^1.0.2","fast-safe-stringify":"^1.1.3","from2-string":"^1.1.0","json-stream-to-object":"^1.1.0","log-http":"^1.0.0","pino":"^4.0.0","pino-colada":"^1.4.0","pump":"^1.0.1","server-router":"^5.2.0"},"devDependencies":{"dependency-check":"^2.5.1","dev-null":"^0.1.1","get-server-port":"^1.0.0","nyc":"^10.0.0","request":"^2.79.0","spok":"^0.8.1","standard":"^8.0.0","tap":"^10.0.2","tape":"^4.6.2"},"gitHead":"f5c5c52e47610f3ed03ff4fafc267aa19f8df6a6","homepage":"https://github.com/shipharbor/merry#readme","versions":[{"number":"1.0.0","date":"2016-05-10T18:22:06.989Z"},{"number":"1.0.1","date":"2016-08-23T00:59:04.567Z"},{"number":"1.0.2","date":"2016-09-05T00:56:29.773Z"},{"number":"2.0.0","date":"2016-11-05T02:06:57.254Z"},{"number":"2.0.1","date":"2016-11-05T06:47:29.137Z"},{"number":"2.0.2","date":"2016-11-05T07:21:32.782Z"},{"number":"2.1.0","date":"2016-11-07T00:46:03.826Z"},{"number":"2.1.1","date":"2016-11-20T13:43:56.155Z"},{"number":"3.0.0","date":"2016-12-25T00:35:09.517Z"},{"number":"3.0.1","date":"2016-12-25T13:14:52.199Z"},{"number":"3.0.2","date":"2017-01-02T14:05:13.120Z"},{"number":"3.1.0","date":"2017-01-10T22:15:30.254Z"},{"number":"3.2.0","date":"2017-01-11T00:26:46.580Z"},{"number":"3.3.0","date":"2017-01-11T20:11:26.572Z"},{"number":"3.4.0","date":"2017-01-11T22:16:13.560Z"},{"number":"3.5.0","date":"2017-01-13T00:37:32.131Z"},{"number":"4.0.0","date":"2017-01-13T03:07:12.144Z"},{"number":"4.1.0","date":"2017-01-14T17:06:09.509Z"},{"number":"4.1.1","date":"2017-01-21T15:25:39.675Z"},{"number":"4.1.2","date":"2017-01-26T12:51:01.610Z"},{"number":"4.1.3","date":"2017-01-28T11:20:45.199Z"},{"number":"4.1.4","date":"2017-02-01T21:54:54.997Z"},{"number":"4.2.0","date":"2017-02-04T21:21:47.723Z"},{"number":"4.2.1","date":"2017-02-05T04:10:19.516Z"},{"number":"4.2.2","date":"2017-02-15T13:30:50.434Z"},{"number":"4.3.0","date":"2017-02-17T12:18:52.622Z"},{"number":"4.3.1","date":"2017-02-17T12:27:23.186Z"},{"number":"4.4.0","date":"2017-02-19T01:36:17.940Z"},{"number":"4.5.0","date":"2017-02-19T23:52:22.404Z"},{"number":"4.6.0","date":"2017-02-19T23:57:55.026Z"},{"number":"4.7.0","date":"2017-02-21T23:26:46.446Z"},{"number":"4.7.1","date":"2017-02-22T11:43:40.078Z"},{"number":"4.7.2","date":"2017-02-24T10:23:39.346Z"},{"number":"5.0.0","date":"2017-05-30T20:07:36.480Z"},{"number":"5.0.1","date":"2017-05-30T20:31:40.585Z"},{"number":"5.0.2","date":"2017-05-30T20:59:16.655Z"},{"number":"5.0.3","date":"2017-05-30T22:17:43.695Z"},{"number":"5.0.4","date":"2017-05-31T23:01:46.106Z"},{"number":"5.0.5","date":"2017-06-01T12:23:40.934Z"},{"number":"5.0.6","date":"2017-06-10T17:43:17.484Z"},{"number":"5.1.0","date":"2017-06-16T09:10:38.962Z"},{"number":"5.2.0","date":"2017-06-16T10:10:50.902Z"},{"number":"5.2.1","date":"2017-06-16T13:05:46.494Z"},{"number":"5.3.0","date":"2017-06-17T11:32:34.696Z"},{"number":"5.3.1","date":"2017-06-20T16:25:13.964Z"}],"readme":"<h1 align=\"center\">merry</h1>\n\n<div align=\"center\">\n  🌊🌊⛵️🌊🌊\n</div>\n<div align=\"center\">\n  <strong>Cute streaming API framework</strong>\n</div>\n\n<br />\n\n---\n\n<div align=\"center\">\n  <!-- Stability -->\n  <a href=\"https://nodejs.org/api/documentation.html#documentation_stability_index\">\n    <img src=\"https://img.shields.io/badge/stability-experimental-orange.svg?style=flat-square\"\n      alt=\"API stability\" />\n  </a>\n  <!-- NPM version -->\n  <a href=\"https://npmjs.org/package/merry\">\n    <img src=\"https://img.shields.io/npm/v/merry.svg?style=flat-square\"\n      alt=\"NPM version\" />\n  </a>\n  <!-- Build Status -->\n  <a href=\"https://travis-ci.org/shipharbor/merry\">\n    <img src=\"https://img.shields.io/travis/shipharbor/merry/master.svg?style=flat-square\"\n      alt=\"Build Status\" />\n  </a>\n  <!-- Test Coverage -->\n  <a href=\"https://codecov.io/github/shipharbor/merry\">\n    <img src=\"https://img.shields.io/codecov/c/github/shipharbor/merry/master.svg?style=flat-square\"\n      alt=\"Test Coverage\" />\n  </a>\n  <!-- Downloads -->\n  <a href=\"https://npmjs.org/package/merry\">\n    <img src=\"https://img.shields.io/npm/dm/merry.svg?style=flat-square\"\n      alt=\"Downloads\" />\n  </a>\n  <!-- Standard -->\n  <a href=\"https://codecov.io/github/shipharbor/merry\">\n    <img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\"\n      alt=\"Standard\" />\n  </a>\n</div>\n\n<br />\n\nMerry is a little Node framework that helps you build performant applications\nwith little effort. We don't think that \"fast\" and \"cute\" should be mutually\nexclusive. Out of the box we've included consistent logging, standardized error\nhandling, a clean streams API and plenty of nuts, bolts and options to\ncustomize merry to fit your use case. We hope you have a good time using it.\n:v: _-Team Merry_\n\n## Features\n- __fast:__ using Node streams, merry handles request like no other\n- __fun:__ helps with boring stuff like error handling\n- __communicative:__ standardized [ndjson][ndjson] logs for everything\n- __sincere:__ doesn't monkey patch Node's built-ins\n- __linear:__ smooth sailing from tinkering to production\n- __very cute:__ 🌊🌊⛵️🌊🌊\n\n## Table of Content\n- [Usage](#usage)\n- [Logging](#logging)\n- [Error Handling](#error-handling)\n- [Configuration](#configuration)\n- [Routing](#routing)\n- [Middleware](#middleware)\n- [API](#api)\n- [Installation](#installation)\n- [See Also](#see-also)\n\n## Usage\n```js\nvar merry = require('merry')\n\nvar app = merry()\n\napp.route('GET', '/', function (req, res, ctx) {\n  ctx.log.info('oh hey, a request here')\n  ctx.send(200, { cute: 'butts' })\n})\n\napp.route('default', function (req, res, ctx) {\n  ctx.log.info('Route doesnt exist')\n  ctx.send(404, { message: 'nada butts here' })\n})\n\napp.listen(8080)\n```\n\n```sh\n$ node index.js | merry\n```\n\n## Logging\nMerry uses the `pino` logger under the hood. When you create a new `merry` app,\nwe enable a log forwarder that by default prints all logs to `process.stdout`.\n\nThere are different log levels that can be used. The possible log levels are:\n- __debug:__ used for developer annotation only, should not be enable in\n  production\n- __info:__ used for transactional messages\n- __warn:__ used for expected errors\n- __error:__ used for unexpected errors\n- __fatal:__ used for critical errors that should terminate the process\n\n```js\nvar merry = require('merry')\nvar app = merry()\n\napp.route('GET', '/', function (req, res, ctx) {\n  ctx.log.debug('it works!')\n  ctx.log.info('hey')\n  ctx.log.warn('oh')\n  ctx.log.error('oh no!')\n  ctx.log.fatal('send help')\n})\n```\n\nThe difference between an expected and unexpected error is that the first is\ngenerally caused by a user (e.g. wrong password) and the system knows how to\nrespond, and the latter is caused by the system (e.g. there's no database) and\nthe system doesn't know how to handle it.\n\n## Error handling\nError handling is different for each application. Errors come in different\nshapes, have different status codes, so we can't provide a one-size-fits-all\nsolution. But we do think that having consistent error messages is useful, so\nMerry comes with a recommended pattern to handle errors.\n\n```js\n// errors.js\nexports.ENOTFOUND = function (req, res, ctx) {\n  ctx.log.warn('ENOTFOUND')\n  ctx.send(404, {\n    type: 'invalid_request_error',\n    message: 'Invalid request data'\n  })\n}\n\nexports.EDBOFFLINE  = function (req, res, ctx) {\n  ctx.log.error('EDBOFFLINE')\n  ctx.send(500, {\n    type: 'api_error',\n    message: 'Internal server error'\n  })\n}\n```\n\n```js\n// index.js\nvar errors = require('./errors')\nvar merry = require('merry')\nvar db = require('my-cool-db')\n\nvar app = merry()\n\napp.route('GET', '/', function (req, res, ctx) {\n  db.get('some-key-from-request', function (err, data) {\n    if (err) return errors.ENOTFOUND(req, res, ctx)\n    ctx.send(200, data)\n  })\n})\n\napp.listen(8080)\n```\n\n## Configuration\nGenerally there are two ways of passing configuration into an application.\nThrough files and through command line arguments. In practice it turns out\npassing environment variables can be done with less friction than using files.\nEspecially in siloed environments such as Docker and Kubernetes where mounting\nvolumes can at times be tricky, but passing environment variables is trivial.\n\nMerry ships with an environment argument validator that checks the type of\nargument passed in, and optionally falls back to a default if no value is\npassed in. To set the (very common) `$PORT` variable to default to `8080` do:\n```js\nvar merry = require('merry')\nvar env = { PORT: 8080 }\nvar app = merry({ env: env })\napp.listen(app.env.PORT)\n```\n\nAnd then from the CLI do:\n```sh\nnode ./server.js\n// => port: 8080\n\nPORT=1234 node ./server.js\n// => port: 1234\n```\n\n## Routing\nMerry uses `server-router` under the hood to create its routes. Routes are\ncreated using recursive arrays that are turned into an efficient `trie`\nstructure under the hood. You don't need to worry about any of this though; all\nyou need to know is that we've tested it and it's probably among the fastest\nmethods out there. Routes look like this:\n```js\nvar merry = require('merry')\nvar app = merry()\napp.route('GET', '/', handleIndex)\napp.route('PUT', '/foo', handleFoo)\napp.route('GET', '/foo/:bar', handleFoobarPartial)\napp.listen()\n```\n\nPartial routes can be set using the `':'` delimiter. Any route that's\nregistered in this was will be passed to the `ctx` argument as a key. So\ngiven a route of `/foo/:bar` and we call it with `/foo/hello`, it will show up\nin `ctx` as `{ bar: 'hello' }`.\n\n## Middleware\nOh, hey, middleware are just functions, use those.\n\n## API\n### app = merry(opts)\nCreate a new instance of `merry`. Takes optional opts:\n- __opts.logLevel:__ defaults to `'info'`. Determine the cutoff point for\n  logging\n- __opts.logStream:__ defaults to `process.stdout`. Set the output writable stream to\n  write logs to\n- __opts.env:__ pass an object containing env var assertions\n\n### app.route(method|methods, route, handler)\nRegister a new handler for a route and HTTP method. Method can be either a\nsingle HTTP method, or an array of HTTP methods.\n\n### app.route('default', handler)\nRegister a new default handler that will be called if no other handlers match.\n\n#### routes\nEach route has a signature of `(req, res, ctx)`:\n- __req:__ the server's unmodified `req` object\n- __res:__ the server's unmodified `res` object\n- __ctx:__ an object that can contain values and methods\n\n#### ctx.params\nParameters picked up from the `router` using the `:route` syntax in the route.\n\n#### ctx.env\nEnvironment variables passed into the `choo({ env })` constructor.\n\n#### ctx.log[loglevel]\\([…data])\nLog data. Loglevel can be one of `trace`, `debug`, `info`, `warn`, `error`,\n`fatal`. Can be passed varying arguments.\n\n#### ctx.send(statusCode, data, [headers])\nEfficiently encode JSON, set the appropriate headers and end the request. Uses\nstreams under the hood.\n\n#### ctx.parse(jsonStream, callback(err, data))\nParse a stream of JSON into an object. Useful to decode a server's `req` stream\nwith.\n\n### handler = app.start()\nCreate a handler that can be passed directly into an `http` server. Useful if\nyou want https or http2 support:\n```js\nvar merry = require('merry')\nvar http = require('http')\n\nvar app = merry()\napp.route('GET', '/', handleRoute)\n\nvar handler = app.start()\nvar server = http.createServer(handler)\nserver.listen(8080)\n\nfunction handleRoute (req, res, ctx, done) {\n  done(null, 'hello planet')\n}\n```\n\n### app.listen(port)\nStart the application directly and listen on a port:\n```js\nvar merry = require('merry')\n\nvar app = merry()\napp.route('GET', '/', handleRoute)\napp.listen(8080)\n\nfunction handleRoute (req, res, ctx, done) {\n  done(null, 'hello planet')\n}\n```\n\n## Installation\n```sh\n$ npm install merry\n```\n\n## See Also\n- [yoshuawuyts/choo](https://github.com/yoshuawuyts/choo) - fun frontend framework\n- [yoshuawuyts/bankai](https://github.com/yoshuawuyts/bankai) - streaming asset compiler\n- [yoshuawuyts/server-router](https://github.com/yoshuawuyts/server-router) - efficient server router\n- [lrlna/pino-colada](https://github.com/lrlna/pino-colada) - cute ndjson formatter\n\n## License\n[MIT](https://tldrlegal.com/license/mit-license)\n\n[0]: https://img.shields.io/badge/stability-experimental-orange.svg?style=flat-square\n[1]: https://nodejs.org/api/documentation.html#documentation_stability_index\n[2]: https://img.shields.io/npm/v/merry.svg?style=flat-square\n[3]: https://npmjs.org/package/merry\n[4]: https://img.shields.io/travis/shipharbor/merry/master.svg?style=flat-square\n[5]: https://travis-ci.org/shipharbor/merry\n[6]: https://img.shields.io/codecov/c/github/shipharbor/merry/master.svg?style=flat-square\n[7]: https://codecov.io/github/shipharbor/merry\n[8]: http://img.shields.io/npm/dm/merry.svg?style=flat-square\n[9]: https://npmjs.org/package/merry\n[10]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\n[11]: https://github.com/feross/standard\n[pino]: https://github.com/pinojs/pino\n[ndjson]: http://ndjson.org/\n[corsify]: https://github.com/Raynos/corsify\n","created":"2016-05-10T18:22:06.989Z","modified":"2017-06-20T16:25:13.964Z","lastPublisher":{"name":"lrlna","email":"shestak.irina@gmail.com"},"owners":[{"name":"lrlna","email":"shestak.irina@gmail.com"},{"name":"yoshuawuyts","email":"i@yoshuawuyts.com"}],"other":{"_attachments":{},"_from":".","_id":"merry","_nodeVersion":"6.10.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/merry-5.3.1.tgz_1497975912856_0.7040882820729166"},"_npmUser":{"name":"lrlna","email":"shestak.irina@gmail.com"},"_npmVersion":"3.10.10","_rev":"44-3bc69dd810bbfe5a6104134ea5a23923","_shasum":"1fb1ec247de384c57d42749be10db904e0414ac6","bugs":{"url":"https://github.com/shipharbor/merry/issues"},"directories":{},"dist-tags":{"latest":"5.3.1"},"dist":{"shasum":"1fb1ec247de384c57d42749be10db904e0414ac6","tarball":"https://registry.npmjs.org/merry/-/merry-5.3.1.tgz"},"maintainers":[{"name":"lrlna","email":"shestak.irina@gmail.com"},{"name":"yoshuawuyts","email":"i@yoshuawuyts.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-20T16:25:13.964Z","created":"2016-05-10T18:22:06.989Z","1.0.0":"2016-05-10T18:22:06.989Z","1.0.1":"2016-08-23T00:59:04.567Z","1.0.2":"2016-09-05T00:56:29.773Z","2.0.0":"2016-11-05T02:06:57.254Z","2.0.1":"2016-11-05T06:47:29.137Z","2.0.2":"2016-11-05T07:21:32.782Z","2.1.0":"2016-11-07T00:46:03.826Z","2.1.1":"2016-11-20T13:43:56.155Z","3.0.0":"2016-12-25T00:35:09.517Z","3.0.1":"2016-12-25T13:14:52.199Z","3.0.2":"2017-01-02T14:05:13.120Z","3.1.0":"2017-01-10T22:15:30.254Z","3.2.0":"2017-01-11T00:26:46.580Z","3.3.0":"2017-01-11T20:11:26.572Z","3.4.0":"2017-01-11T22:16:13.560Z","3.5.0":"2017-01-13T00:37:32.131Z","4.0.0":"2017-01-13T03:07:12.144Z","4.1.0":"2017-01-14T17:06:09.509Z","4.1.1":"2017-01-21T15:25:39.675Z","4.1.2":"2017-01-26T12:51:01.610Z","4.1.3":"2017-01-28T11:20:45.199Z","4.1.4":"2017-02-01T21:54:54.997Z","4.2.0":"2017-02-04T21:21:47.723Z","4.2.1":"2017-02-05T04:10:19.516Z","4.2.2":"2017-02-15T13:30:50.434Z","4.3.0":"2017-02-17T12:18:52.622Z","4.3.1":"2017-02-17T12:27:23.186Z","4.4.0":"2017-02-19T01:36:17.940Z","4.5.0":"2017-02-19T23:52:22.404Z","4.6.0":"2017-02-19T23:57:55.026Z","4.7.0":"2017-02-21T23:26:46.446Z","4.7.1":"2017-02-22T11:43:40.078Z","4.7.2":"2017-02-24T10:23:39.346Z","5.0.0":"2017-05-30T20:07:36.480Z","5.0.1":"2017-05-30T20:31:40.585Z","5.0.2":"2017-05-30T20:59:16.655Z","5.0.3":"2017-05-30T22:17:43.695Z","5.0.4":"2017-05-31T23:01:46.106Z","5.0.5":"2017-06-01T12:23:40.934Z","5.0.6":"2017-06-10T17:43:17.484Z","5.1.0":"2017-06-16T09:10:38.962Z","5.2.0":"2017-06-16T10:10:50.902Z","5.2.1":"2017-06-16T13:05:46.494Z","5.3.0":"2017-06-17T11:32:34.696Z","5.3.1":"2017-06-20T16:25:13.964Z"}}}