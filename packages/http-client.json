{"name":"http-client","version":"4.3.1","description":"Compose HTTP clients using JavaScript's fetch API","repository":"https://github.com/mjackson/http-client","license":"MIT","scripts":{"build":"node ./scripts/build.js","build-lib":"babel ./modules -d . --ignore '__tests__'","build-min":"webpack -p modules/index.js umd/http-client.min.js","build-umd":"webpack modules/index.js umd/http-client.js","release":"node ./scripts/release.js","prepublish":"node ./scripts/build.js","lint":"eslint modules","test":"npm run lint && karma start"},"dependencies":{"byte-length":"^0.1.1","query-string":"^4.1.0"},"devDependencies":{"babel-cli":"^6.5.1","babel-core":"^6.5.2","babel-eslint":"^7.0.0","babel-loader":"^6.2.3","babel-preset-es2015":"^6.5.0","es6-promise":"^4.0.3","eslint":"^3.2.2","eslint-plugin-import":"^2.0.0","expect":"^1.14.0","gzip-size":"^3.0.0","in-publish":"^2.0.0","isomorphic-fetch":"^2.2.1","karma":"^1.1.2","karma-browserstack-launcher":"^1.0.1","karma-chrome-launcher":"^2.0.0","karma-mocha":"^1.1.1","karma-mocha-reporter":"^2.0.4","karma-sourcemap-loader":"^0.3.7","karma-webpack":"^1.7.0","mocha":"^3.0.0","pretty-bytes":"^4.0.2","readline-sync":"^1.4.1","webpack":"^1.12.14"},"gitHead":"b89859942f59f6877287b0832b38ec615d8f1c45","homepage":"https://github.com/mjackson/http-client#readme","versions":[{"number":"1.0.0","date":"2012-11-30T12:22:44.148Z"},{"number":"0.0.1","date":"2016-03-01T19:44:16.896Z"},{"number":"2.0.0","date":"2016-03-01T19:49:20.645Z"},{"number":"2.0.1","date":"2016-03-02T07:02:53.115Z"},{"number":"2.1.0","date":"2016-03-02T16:10:37.638Z"},{"number":"2.1.1","date":"2016-03-02T16:46:12.160Z"},{"number":"2.1.2","date":"2016-03-03T17:03:41.373Z"},{"number":"2.2.0","date":"2016-03-07T00:54:21.215Z"},{"number":"2.2.1","date":"2016-03-13T22:38:16.344Z"},{"number":"2.3.0","date":"2016-03-14T23:37:48.438Z"},{"number":"2.3.1","date":"2016-03-14T23:51:32.677Z"},{"number":"2.4.0","date":"2016-03-19T01:29:07.406Z"},{"number":"2.4.1","date":"2016-03-19T05:52:36.184Z"},{"number":"2.4.2","date":"2016-03-21T19:13:15.976Z"},{"number":"3.0.0","date":"2016-03-22T18:54:46.131Z"},{"number":"3.0.1","date":"2016-03-28T05:14:30.315Z"},{"number":"3.1.0","date":"2016-03-28T17:38:17.242Z"},{"number":"4.0.0-0","date":"2016-04-28T02:18:48.927Z"},{"number":"4.0.0","date":"2016-04-28T19:10:59.223Z"},{"number":"4.0.1","date":"2016-05-19T03:34:56.882Z"},{"number":"4.1.0","date":"2016-06-17T03:30:31.818Z"},{"number":"4.1.1","date":"2016-09-19T18:17:35.114Z"},{"number":"4.2.0","date":"2016-09-29T21:36:55.199Z"},{"number":"4.3.0","date":"2016-09-30T16:06:24.094Z"},{"number":"4.3.1","date":"2016-09-30T16:19:57.664Z"}],"readme":"# http-client [![Travis][build-badge]][build] [![npm package][npm-badge]][npm]\n\n[build-badge]: https://img.shields.io/travis/mjackson/http-client/master.svg?style=flat-square\n[build]: https://travis-ci.org/mjackson/http-client\n\n[npm-badge]: https://img.shields.io/npm/v/http-client.svg?style=flat-square\n[npm]: https://www.npmjs.org/package/http-client\n\n[http-client](https://www.npmjs.com/package/http-client) lets you compose HTTP clients using JavaScript's [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API). This library has the following goals:\n\n  - Preserve the full capabilities of the fetch API\n  - Provide an extendable middleware API\n  - Use the same API on both client and server\n\n## Installation\n\nUsing [npm](https://www.npmjs.com/):\n\n    $ npm install --save http-client\n\nhttp-client requires you to bring your own [global `fetch`](https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch) function (for convenience when using the top-level `createFetch` function). [isomorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch) is a great polyfill if you need to support environments that don't already have a global `fetch` function.\n\nThen, use as you would anything else:\n\n```js\n// using ES6 modules\nimport { createFetch } from 'http-client'\n\n// using CommonJS modules\nvar createFetch = require('http-client').createFetch\n```\n\nThe UMD build is also available on [unpkg](https://unpkg.com):\n\n```html\n<script src=\"https://unpkg.com/http-client/umd/http-client.min.js\"></script>\n```\n\nYou can find the library on `window.HTTPClient`.\n\n## Usage\n\nhttp-client simplifies the process of creating flexible HTTP clients that work in both node and the browser. You create your own `fetch` function using the `createFetch` method, optionally passing [middleware](#middleware) as arguments.\n\n```js\nimport { createFetch, base, accept, parse } from 'http-client'\n\nconst fetch = createFetch(\n  base('https://api.stripe.com/v1'),  // Prefix all request URLs\n  accept('application/json'),         // Set \"Accept: application/json\" in the request headers\n  parse('json')                       // Read the response as JSON and put it in response.body\n)\n\nfetch('/customers/5').then(response => {\n  console.log(response.jsonData)\n})\n```\n\n## Top-level API\n\n#### `createFetch(...middleware)`\n\nCreates a `fetch` function that uses some [middleware](#middleware). Uses the global `fetch` function to actually make the request.\n\n#### `createStack(...middleware)`\n\nCombines several middleware into one, in the same order they are provided as arguments. Use this function to create re-usable [middleware stacks](#stacks) or if you don't want to use a global `fetch` function.\n\n#### `enableRecv(fetch)`\n\nReturns an \"enhanced\" version of the given `fetch` function that knows how to run response handlers registered using [`recv`](#recvhandler). This is only really useful when using [stacks](#stacks) directly instead of `createFetch`.\n\n## Middleware\n\nhttp-client provides a variety of middleware that may be used to extend the functionality of the client. Out of the box, http-client ships with the following middleware:\n\n#### `accept(contentType)`\n\nAdds an `Accept` header to the request.\n\n```js\nimport { createFetch, accept } from 'http-client'\n\nconst fetch = createFetch(\n  accept('application/json')\n)\n```\n\n#### `auth(value)`\n\nAdds an `Authorization` header to the request.\n\n```js\nimport { createFetch, auth } from 'http-client'\n\nconst fetch = createFetch(\n  auth('Bearer ' + oauth2Token)\n)\n```\n\n#### `base(baseURL)`\n\nAdds the given `baseURL` to the beginning of the request URL.\n\n```js\nimport { createFetch, base } from 'http-client'\n\nconst fetch = createFetch(\n  base('https://api.stripe.com/v1')\n)\n\nfetch('/customers/5') // GET https://api.stripe.com/v1/customers/5\n```\n\n#### `body(content, contentType)`\n\nSets the given `content` string as the request body.\n\n```js\nimport { createFetch, body } from 'http-client'\n\nconst fetch = createFetch(\n  body(JSON.stringify(data), 'application/json')\n)\n```\n\n#### `debug()`\n\nAdds a `debug` property to the response or error object so you can inspect them. Mainly useful for testing/debugging (should run *after* all other middleware).\n\n```js\nimport { createFetch, debug } from 'http-client'\n\nconst fetch = createFetch(\n  // ... other middleware\n  debug()\n)\n\nfetch(input).then(response => {\n  console.log(response.debug.input, response.debug.options)\n})\n```\n\n#### `header(name, value)`\n\nAdds a header to the request.\n\n```js\nimport { createFetch, header } from 'http-client'\n\nconst fetch = createFetch(\n  header('Content-Type', 'application/json')\n)\n```\n\n#### `init(propertyName, value)`\n\nSets the value of an arbitrary property in the options object.\n\n```js\nimport { createFetch, init } from 'http-client'\n\nconst fetch = createFetch(\n  init('credentials', 'include')\n)\n```\n\n#### `json(object)`\n\nAdds the data in the given object as JSON to the request body.\n\n#### `method(verb)`\n\nSets the request method.\n\n```js\nimport { createFetch, method } from 'http-client'\n\nconst fetch = createFetch(\n  method('POST')\n)\n```\n\n#### `params(object)`\n\nAdds the given object to the query string of `GET`/`HEAD` requests and as a `x-www-form-urlencoded` payload on all others.\n\n```js\nimport { createFetch, method, params } from 'http-client'\n\n// Create a client that will append hello=world to the URL in the query string\nconst fetch = createFetch(\n  params({ hello: 'world' })\n)\n\n// Create a client that will send hello=world as POST data\nconst fetch = createFetch(\n  method('POST'),\n  params({ hello: 'world' })\n)\n```\n\n#### `parse(parser, as = 'body')`\n\nReads the response body to completion, parses the response, and puts the result on `response.body` (or whatever `as` is). `parser` must be the name of a valid [Body](https://developer.mozilla.org/en-US/docs/Web/API/Body) parsing method. The following parsers are available in [the spec](https://fetch.spec.whatwg.org/#body-mixin):\n\n- `arrayBuffer`\n- `blob`\n- `formData`\n- `json`\n- `text`\n\n```js\nimport { createFetch, parse } from 'http-client'\n\nconst fetch = createFetch(\n  parse('json')\n)\n\nfetch(input).then(response => {\n  console.log(response.body)\n})\n```\n\nNote: Some parsers may not be available when using a `fetch` polyfill. In particular if you're using `node-fetch`, you should be aware of [its limitations](https://github.com/bitinn/node-fetch/blob/master/LIMITS.md).\n\n#### `query(object)`\n\nAdds the data in the given object (or string) to the query string of the request URL.\n\n#### `recv(handler)`\n\nUsed to handle the `response` in some way. The `handler` function should return the new response value, or a promise for it. Response handlers run in the order they are defined.\n\n```js\nimport { createFetch, recv } from 'http-client'\n\nconst fetch = createFetch(\n  recv(response => (console.log('runs first'), response)),\n  recv(response => (console.log('runs second'), response))\n)\n```\n\n## Stacks\n\nMiddleware may be combined together into re-usable middleware \"stacks\" using `createStack`. A stack is itself a middleware that is composed of one or more other pieces of middleware. Thus, you can pass a stack directly to `createFetch` as if it were any other piece of middleware.\n\nThis is useful when you have a common set of functionality that you'd like to share between several different `fetch` methods, e.g.:\n\n```js\nimport { createFetch, createStack, header, base, parse, query } from 'http-client'\n\nconst commonStack = createStack(\n  header('X-Auth-Key', key),\n  header('X-Auth-Email', email),\n  base('https://api.cloudflare.com/client/v4'),\n  parse('json')\n)\n\n// This fetch function can be used standalone...\nconst fetch = createFetch(commonStack)\n\n// ...or we can add further middleware to create another fetch function!\nconst fetchSinceBeginningOf2015 = createFetch(\n  commonStack,\n  query({ since: '2015-01-01T00:00:00Z' })\n)\n```\n\nStacks are also useful when you don't have a global `fetch` function, e.g. in node. In those cases, you can still use http-client middleware and supply your own `fetch` (we recommend [node-fetch](https://www.npmjs.com/package/node-fetch)) function directly, but make sure you \"enhance\" it first:\n\n```js\nconst { createStack, enableRecv, header, base } = require('http-client')\n\n// We need to \"enhance\" node-fetch so it knows how to\n// handle responses correctly. Specifically, enableRecv\n// gives a fetch function the ability to run response\n// handlers registered with recv (which parse, used below,\n// uses behind the scenes).\nconst fetch = enableRecv(\n  require('node-fetch')\n)\n\nconst stack = createStack(\n  header('X-Auth-Key', key),\n  header('X-Auth-Email', email),\n  base('https://api.cloudflare.com/client/v4'),\n  parse('json')\n)\n\nstack(fetch, input, options)\n```\n","starsCount":1,"created":"2012-11-30T12:22:41.742Z","modified":"2016-09-30T16:19:57.664Z","lastPublisher":{"name":"mjackson","email":"mjijackson@gmail.com"},"owners":[{"name":"mjackson","email":"mjijackson@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-client","_nodeVersion":"6.6.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/http-client-4.3.1.tgz_1475252397432_0.2638399542775005"},"_npmUser":{"name":"mjackson","email":"mjijackson@gmail.com"},"_npmVersion":"3.10.3","_rev":"1-cad5c428c1ebb7a7218d8098aaa8839b","_shasum":"cf82fa1b1ef993c078a82144fe677a8671bc7cf2","author":{"name":"Michael Jackson"},"bugs":{"url":"https://github.com/mjackson/http-client/issues"},"directories":{},"dist-tags":{"latest":"4.3.1","next":"4.0.0-0"},"dist":{"shasum":"cf82fa1b1ef993c078a82144fe677a8671bc7cf2","tarball":"http://registry.npmjs.org/http-client/-/http-client-4.3.1.tgz"},"maintainers":[{"name":"mjackson","email":"mjijackson@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-09-30T16:19:57.664Z","created":"2012-11-30T12:22:41.742Z","1.0.0":"2012-11-30T12:22:44.148Z","0.0.1":"2016-03-01T19:44:16.896Z","2.0.0":"2016-03-01T19:49:20.645Z","2.0.1":"2016-03-02T07:02:53.115Z","2.1.0":"2016-03-02T16:10:37.638Z","2.1.1":"2016-03-02T16:46:12.160Z","2.1.2":"2016-03-03T17:03:41.373Z","2.2.0":"2016-03-07T00:54:21.215Z","2.2.1":"2016-03-13T22:38:16.344Z","2.3.0":"2016-03-14T23:37:48.438Z","2.3.1":"2016-03-14T23:51:32.677Z","2.4.0":"2016-03-19T01:29:07.406Z","2.4.1":"2016-03-19T05:52:36.184Z","2.4.2":"2016-03-21T19:13:15.976Z","3.0.0":"2016-03-22T18:54:46.131Z","3.0.1":"2016-03-28T05:14:30.315Z","3.1.0":"2016-03-28T17:38:17.242Z","4.0.0-0":"2016-04-28T02:18:48.927Z","4.0.0":"2016-04-28T19:10:59.223Z","4.0.1":"2016-05-19T03:34:56.882Z","4.1.0":"2016-06-17T03:30:31.818Z","4.1.1":"2016-09-19T18:17:35.114Z","4.2.0":"2016-09-29T21:36:55.199Z","4.3.0":"2016-09-30T16:06:24.094Z","4.3.1":"2016-09-30T16:19:57.664Z"},"users":{"tkh44":true}}}