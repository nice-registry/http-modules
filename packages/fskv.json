{"name":"fskv","version":"0.0.7","description":"A filesystem based key-value store in Node.JS via HTTP","main":"./fskv.js","preferGlobal":true,"bin":{"fskv":"./fskv.js"},"scripts":{"test":"for f in test/*; do echo \"$f\"; node \"$f\" || exit 1; done; echo Passed; exit 0"},"repository":"https://github.com/bahamas10/fskv","homepage":"https://github.com/bahamas10/fskv","license":"MIT","dependencies":{"access-log":"~0.3.3","easyreq":"~0.0.5","latest":"~0.1.2","log-buffer":"~0.0.3","posix-getopt":"~1.0.0","routes":"~0.2.0","static-route":"~0.0.10"},"readme":"File System Key Value\n=====================\n\nA filesystem based key-value store in Node.JS via HTTP\n\n- [Installation](#installation)\n- [Features](#features)\n- [Example](#example)\n- [Methods](#methods)\n- [Usage](#usage)\n- [Notes](#notes)\n- [Inspiration](#inspiration)\n- [License](#license)\n\n<a name=\"installation\" />\n\nInstallation\n------------\n\nFirst, install [Node.JS](http://nodejs.org/).  Then:\n\n    [sudo] npm install -g fskv\n\n<a name=\"features\" />\n\nFeatures\n--------\n\n- HTTP API for storing, modifying, and deleting data\n- Flat text files used for storage\n- HTTP Caching headers (ETag, Last-Modified, If-None-Match)\n\n<a name=\"example\" />\n\nExample\n-------\n\nFire up `fskv` by running:\n\n    $ mkdir data\n    $ fskv\n    [2013-05-03T01:39:48.227Z] server started on http://localhost:9000\n\nThis will start the HTTP server listening on `localhost` on port 9000,\nand serve out of `./data`.\n\n### Basic Example\n\nNow, put some data in the database.\n\n    $ curl -X PUT -d 'dave' -i localhost:9000/data/myname\n    HTTP/1.1 200 OK\n    Content-Type: application/json; charset=utf-8\n    Date: Fri, 03 May 2013 01:48:43 GMT\n    Connection: keep-alive\n    Transfer-Encoding: chunked\n\n    {\"message\":\"saved\",\"status\":\"ok\"}\n\nThe server will respond with a 200 if everything was successful, and with\na JSON encoded message.\n\nNow, retrieve the data.\n\n    $ curl -i localhost:9000/data/myname\n    HTTP/1.1 200 OK\n    Last-Modified: Fri, 03 May 2013 01:48:43 GMT\n    Content-Length: 4\n    Content-Type: application/octet-stream\n    ETag: \"4-1367545723000\"\n    Date: Fri, 03 May 2013 01:49:51 GMT\n    Connection: keep-alive\n\n    dave\n\n`ETag` and `Last-Modified` supported for both `HEAD` and `GET` requests.\nThe body of the response is the value supplied in the `PUT` request above.\n\nDelete the data.\n\n    $ curl -i -X DELETE localhost:9000/data/myname\n    HTTP/1.1 200 OK\n    Content-Type: application/json; charset=utf-8\n    Date: Fri, 03 May 2013 01:51:06 GMT\n    Connection: keep-alive\n    Transfer-Encoding: chunked\n\n    {\"message\":\"deleted\",\"status\":\"ok\"}\n\nLike the `PUT`, a 200 is returned with a JSON encoded message if everything\nis successful.\n\n### Advanced\n\n404 is returned for non-existent keys\n\n    $ curl -i localhost:9000/data/myname\n    HTTP/1.1 404 Not Found\n    Date: Fri, 03 May 2013 01:52:01 GMT\n    Connection: keep-alive\n    Transfer-Encoding: chunked\n\nYou can put data more than once... last write wins\n\n    $ curl -X PUT -d 'hello' localhost:9000/data/myname\n    {\"message\":\"saved\",\"status\":\"ok\"}\n    $ curl -X PUT -d 'goodbye' localhost:9000/data/myname\n    {\"message\":\"saved\",\"status\":\"ok\"}\n    $ curl localhost:9000/data/myname\n    goodbye\n\nUse `?exclusive` with `PUT`s to error if the key exists.  Use this to avoid\nrace conditions.\n\n    $ curl -X PUT -d 'first' localhost:9000/data/myname?exclusive\n    {\"message\":\"saved\",\"status\":\"ok\"}\n    $ curl -X PUT -d 'second' localhost:9000/data/myname?exclusive\n    {\"error\":\"EEXIST, open 'myname'\",\"code\":\"EEXIST\"}\n    $ curl localhost:9000/data/myname\n    first\n\n### Stats and Health\n\nYou can hit `/ping` or `/stats` to see process health.\n\n    $ curl localhost:9000/ping\n    pong\n    $ curl localhost:9000/stats | json\n    {\n      \"started\": 1367545690361,\n      \"nodeversion\": \"v0.8.8\",\n      \"fskvversion\": \"0.0.0\",\n      \"pid\": 2382,\n      \"dir\": \"/Users/dave/dev/fskv/data\",\n      \"mem\": {\n        \"rss\": 16261120,\n        \"heapTotal\": 9214976,\n        \"heapUsed\": 4967640\n      },\n      \"arch\": \"x64\",\n      \"platform\": \"darwin\"\n    }\n\n<a name=\"methods\" />\n\nMethods\n-------\n\n### `GET /data/:key`\n\nRetrieve a key, supports `if-none-match` with the `ETag` given.\n\n### `HEAD /data/:key`\n\nSame as `GET` without the data.\n\n### `PUT /data/:key`\n\nPut data given into the key.\n\nOptions\n\n- `?exclusive`: Error if the key already exists, allows for an atomic `PUT`.\nIf the key exists, the `PUT` will fail with `EEXISTS` and return a 409.\n\n### `DELETE /data/:key`\n\nDelete the key given.\n\n<a name=\"usage\" />\n\nUsage\n-----\n\n    Usage: fskv [-b] [-d dir] [-h] [-H host] [-l] [-p port] [-u] [-v]\n\n    A filesystem based key-value store in Node.JS via HTTP\n\n    Options\n      -b, --buffer       buffer logging, defaults to false\n      -d, --dir <dir>    the database directory, defaults to ./data\n      -h, --help         print this message and exit\n      -H, --host <host>  the address to bind to, defaults to localhost\n      -n, --no-log       disable logging, logging is enabled by default\n      -p, --port <port>  the port to bind to, defaults to 9000\n      -u, --updates      check npm for available updates\n      -v, --version      print the version number and exit\n\n<a name=\"notes\" />\n\nNotes\n-----\n\n- This program does no in-memory caching or expiring of data, it's built to run\non the [ZFS](http://en.wikipedia.org/wiki/ZFS) filesystem with the ARC for\ncaching.\n- I don't know if I would use this in production.\n- TODO: The `Content-Type` header is not stored, and is determined by key name extension\n\n<a name=\"inspiration\" />\n\nInspiration\n-----------\n\nMy tweet about the filesystem being the best nosql database.\n\n<blockquote class=\"twitter-tweet\"><p>my favorite db. writes = echo value &gt;\nkey.reads = cat key. most languages have built in bindings.</p>&mdash; Dave\nEddy (@superxero3) <a\nhref=\"https://twitter.com/superxero3/status/310096645356404737\">March 8,\n2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n[greyhound](https://github.com/gen0cide-/greyhound) for using bash+netcat for a\nfilesystem key-value store\n\n<a name=\"license\" />\n\nLicense\n-------\n\nMIT\n","versions":[{"number":"0.0.0","date":"2013-05-08T04:40:55.760Z"},{"number":"0.0.1","date":"2013-09-10T03:04:18.017Z"},{"number":"0.0.2","date":"2013-09-12T21:13:00.795Z"},{"number":"0.0.3","date":"2013-09-13T01:08:48.306Z"},{"number":"0.0.4","date":"2013-09-13T05:56:40.194Z"},{"number":"0.0.5","date":"2013-09-13T16:17:08.609Z"},{"number":"0.0.6","date":"2013-09-13T16:40:04.978Z"},{"number":"0.0.7","date":"2013-11-12T05:36:25.570Z"}],"created":"2013-05-08T04:40:54.356Z","modified":"2013-11-12T05:36:25.570Z","lastPublisher":{"name":"bahamas10","email":"dave@daveeddy.com"},"owners":[{"name":"bahamas10","email":"dave@daveeddy.com"}],"other":{"_attachments":{},"_from":".","_id":"fskv","_npmUser":{"name":"bahamas10","email":"dave@daveeddy.com"},"_npmVersion":"1.3.11","_rev":"1-4c76a59328ac9b4de31915746e87197e","author":{"name":"Dave Eddy","email":"dave@daveeddy.com","url":"http://www.daveeddy.com"},"bugs":{"url":"https://github.com/bahamas10/fskv/issues"},"directories":{},"dist-tags":{"latest":"0.0.7"},"dist":{"shasum":"c1f672595d07c95cbc391d33da7ed16c0459394d","tarball":"http://registry.npmjs.org/fskv/-/fskv-0.0.7.tgz"},"maintainers":[{"name":"bahamas10","email":"dave@daveeddy.com"}],"readmeFilename":"README.md","time":{"modified":"2013-11-12T05:36:25.570Z","created":"2013-05-08T04:40:54.356Z","0.0.0":"2013-05-08T04:40:55.760Z","0.0.1":"2013-09-10T03:04:18.017Z","0.0.2":"2013-09-12T21:13:00.795Z","0.0.3":"2013-09-13T01:08:48.306Z","0.0.4":"2013-09-13T05:56:40.194Z","0.0.5":"2013-09-13T16:17:08.609Z","0.0.6":"2013-09-13T16:40:04.978Z","0.0.7":"2013-11-12T05:36:25.570Z"}}}