{"name":"pino-http-format","version":"1.0.5","description":"Transform Pino HTTP log messages with a format string","main":"index.js","bin":{"pino-http-format":"./cmd.js"},"scripts":{"test":"standard && tap -R=spec test/*.js","cov":"tap --cov test/*.js","cov-ui":"tap --cov --coverage-report=html test/*.js","ci":"standard && tap --cov --coverage-report=lcov test/*.js"},"license":"MIT","devDependencies":{"standard":"^7.1.2","tap":"^6.2.0"},"dependencies":{"basic-auth":"^1.1.0","clf-date":"0.0.4","minimist":"^1.2.0","ndjson":"^1.4.3","pump":"^1.0.2","through2":"^2.0.1"},"repository":"https://github.com/pinojs/pino-http-format","keywords":[],"homepage":"https://github.com/pinojs/pino-http-format#readme","gitHead":"b0c0ce82b78eb65d90c1eb3b16af6e4e934aeb0a","versions":[{"number":"1.0.0","date":"2017-04-28T23:28:18.318Z"},{"number":"1.0.1","date":"2017-04-29T00:41:39.762Z"},{"number":"1.0.2","date":"2017-04-29T00:49:28.101Z"},{"number":"1.0.3","date":"2017-04-29T01:13:06.951Z"},{"number":"1.0.4","date":"2017-04-29T01:17:26.715Z"},{"number":"1.0.5","date":"2017-04-29T01:53:26.802Z"}],"readme":"# pino-http-format &nbsp; &nbsp;[![stability][0]][1]\n[![npm version][2]][3] [![build status][4]][5] [![test coverage][6]][7] [![dependencies freshness][14]][15] [![js-standard-style][10]][11]\n\nTransform Pino HTTP log messages with a format string\n\nThis CLI tool and module is a transform [transport](https://github.com/pinojs/pino/blob/master/docs/transports.md) for the [pino](http://npm.im/logger), specifically for processing HTTP\nlog messages (see the [Supports](#supports) section). Output is configured using the tokenized\nformat string as used in the [`morgan`](http://npm.im/morgan) logger.\n\n\n## Supports\n\n* [express-pino-logger](http://npm.im/express-pino-logger)\n* [restify-pino-logger](http://npm.im/restify-pino-logger)\n* [koa-pino-logger](http://npm.im/koa-pino-logger)\n* [pino-http](http://npm.im/pino-http)\n* [hapi-pino](http://npm.im/hapi-pino)\n\n## Usage\n\n```sh\n$ npm install -g pino-http-format\n```\n\n```sh\n$ pino-http-format -h\n```\n\n```sh\n  \n    pino-http-format [-d] [-k] [-a]  [tokens]\n\n    -d | --dest |       stderr | stdout (default) or Number. Specify output fd\n    --destination\n    \n    -a | --ancillary    stderr | stdout or Number. Specify JSON logs fd\n    \n    -k | --keep         true | false (default) Retain transformed logs in ancillary output\n\n    tokens              :id :pid :level :hostname :url :date[format] :time[format] \n                        :method :response-time :status :referrer :remote-addr \n                        :remote-user :http-version :user-agent :req[header] :res[header]\n```\n\n\n### Example\n\nSpin up a server that uses a pino http logger (see the [Supports](#supports) section),\npipe it to `pino-http-format` and desribe the format in tokenized form\n\n```sh\n$ node server | pino-http-format :method :url :status :res[content-length] - :response-time ms\n```\n\n## Destination (`-d`)\n\nBy default, logs are output to STDOUT, however we can set the `-d` (alias, `--dest`, `--destination`), flag to a a `stderr`, or a number (`1` for stdout, `2` for stderr, `3` or more for custom file descriptor):\n\n```sh\n$ node server | pino-http-format -d stderr :status :get :url - :response-time ms\n```\n\nThe above is equivalent to:\n\n```sh\n$ node server | pino-http-format -d 2 :status :get :url - :response-time ms\n```\n\nWe can also direct formatted log output to custom file descriptors, but we *must*\nuse bash redirection (in some form) from that file descriptor, otherwise the process\nwill most likely immediately crash (this is to do with how unix works).\n\n```sh\n$ node server | pino-http-format -d 8 :status :get :url - :response-time ms 8> ./http-logs\n```\n\n## Ancillary Output (`-a`)\n\nBy default, any logs which aren't an HTTP log (meaning, they don't have `req` and `res`\nproperties and the `msg` isn't \"request complete\") are filtered out.\n\nHowever, we can specify an ancillary (secondary) output for other log messages, using\nthe `-a` (alias `--ancillary`) flag.\n\nThe following will write reformatted HTTP logs to STDOUT and original JSON logs\nwhich *are not* HTTP logs to STDERR.\n\n```sh\n$ node server | pino-http-format -a 2 :status :get :url - :response-time ms\n```\n\nThe following achieves the reverse effect:\n\n```sh\n$ node server | pino-http-format -d 2 -a 1 :status :get :url - :response-time ms\n```\n\nThe next example creates an custom file descriptor, and redirects output from that\ndescriptor to a `./logs` file, whilst outputting formatted HTTP logs to STDOUT\n\n```sh\n$ node server | pino-http-format  -a 4 :status :get :url - :response-time ms 4> ./logs\n```\n\nThis will sends formatted HTTP logs to the `./http-logs` file and pipe all other log messages to [`pino-elasticsearch`](http://npm.im/pino-elasticsearch)\n\n```sh\n$ node server | pino-http-format -a 1 -d 4 :status :get :url - :response-time ms 4> ./http-logs | pino-elasticsearch\n```\n\n## Keep Original HTTP JSON Logs (`-k`)\n\nThe `-a` (`--ancillary`) flag can be coupled with the `-k` (`--keep`) flag so that\nraw HTTP JSON logs are also piped to the ancillary output stream, along with any\nfiltered output.\n\nThe following will pipe all formatted logs to the `4` file descriptor which is redirected to a file,\nwhile *all* original JSON logs (instead of non-HTTP logs) are written to STDOUT.\n\n```\n$ node server | pino-http-format -k -a 1 -d 4 :status :get :url - :response-time ms 4> ./http-logs \n```\n\n\n### Tokens\n\n`pino-http-format` supports all the same tokens found in the [`morgan`](http://npm.im/morgan) \nlogger, with additional tokens based on the information we have in the pino HTTP log format.\n\nTokens supported in addition to `morgan`'s token set are `:id`, `:pid`, `:level`,\n`:hostname`, and `:time`.\n\n#### :id\n\nLogs from `pino-http` add a unique identifer to each request, this gives the unique id\n\n#### :pid\n\nProcess Id (as in all pino logs)\n\n#### :level\n\nLog level (as in all pino logs)\n\n#### :hostname\n\nServer hostname (as in all pino logs)\n\n#### :url\n\nURL of the request (as per `req.url`, so does not include domain name)\n\n#### :date[format]\n\nDate and time based on the `time` key in the pino log.\n\n`[format]` can be:\n\n* web - RFC 1123 format (default) - `Fri, 28 Apr 2017 14:12:42 GMT`\n* iso - ISO 8601 format - `2017-04-28T14:12:42.454Z`\n* clf - date format used in Common Log Format `28/Apr/2017:14:12:42 -0060`\n\nWhen format is omitted, or not recognized, defaults to `web`\n\n#### :time[format]\n\nThe time based on the `time` key in the pino log\n\n`[format]` can be:\n\n* ms - milliseconds (default)\n* iso - the time format after `T` and before the decimal (`.`) in ISO 8601 string `14:12:42`\n\nWhen format is omitted, or not recognized, defaults to `ms`\n\n#### :method\n\nRequest method\n\n#### :response-time\n\nResponse time as recorded by `pino-http` in the `res` object.\n\n#### :status\n\nHTTP Status\n\n#### :referrer\n\nReferrer header (normalizes alternative \"referer\" heading)\n\n#### :remote-addr\n\nRemote address (IP)\n\n#### :remote-user\n\nIf Basic auth is being used, this will contain the user name provided via basic auth\n\n#### :http-version\n\nHTTP version (e.g. `1.0`, `1.1`)\n\n#### :user-agent\n\nContents of the `User-Agent` header\n\n#### :req[header]\n\nGiven header in the request\n\n#### :res[header]\n\nGiven header in the response\n\n\n### Programmatic Usage\n\n#### format(fmt, destination, ancillary)\n\nReturns a stream that we write Pino JSON logs to.\n\nThe `fmt` parameter is required and can be a format string, a function or \nan object. \n\nA format string represents how a log line should be written out, using a \"tokens\",\nwhich are essentially placholder elements in the `:token`. The string\ncan also contain normal text, which will appear between the tokens.\nUnrecognized tokens will appear in the output as normal text.\n\n```js\nformat(':method :url :status')\n```\n\nIf `fmt` is a function it should have the signature `(o, tokens)`. \nThe `tokens` parameter is an object of mapping functions, which pick \nproperties from the `o` object (see `./tokens.js` file. \nThe `o` parameter will be an object representation each HTTP JSON log line.\nIt's return value will be the contents of the transformed log line.\n\n\n```\nformat((o, tokens) => 'some log line')\n```\n\nIf `fmt` is an object, should have a property called `fmt` that contains the\n`fmt` string or a function.\n\n ```js\nformat({fmt: ':method :url :status'})\n```\n\n ```js\nformat({fmt: (o, tokens) => 'some log line'})\n```\n\n\nWhen `fmt` is an object, additional options can be provided. \nThere's only one valid option, `keep`:\n\n ```js\nformat({fmt: ':method :url :status', keep: true})\n```\n\nWhen `keep` is `true` all JSON log messages will be written verbatim \nto the `ancillary` write stream. It `keep` is `false`, only messages\nwhich we not processed as HTTP related messages will be written to \nthe `ancillary` write stream. This only applies if an `ancillary` stream\nis provided.\n\n\nThe optional `destination` parameter is a writeable stream that receives\nthe reformatted log messages. It defaults to `process.stdout`.\n\nThe optional `ancillary` parameter is a writable stream that \n\n\n#### format.compile(fmt)\n\nCompile a format string (`fmt`) in a function. The returned function \ntakes a `tokens` and `o` parameters. The `tokens` parameter is an object\nof mapping functions, which pick properties from the `o` object. The\n`o` parameter is an object representation of a pino JSON log line.\n\nThis can be useful for pre- and post-processing when providing a a function to `format`.\n\n## LICENSE\n\nMIT\n\n## Acknowledgements\n\n* Inspired by the [`morgan`](http://npm.im/morgan) logger\n* Sponsored by [nearForm](http://nearform.com)\n\n\n\n[0]: https://img.shields.io/badge/stability-stable-green.svg?style=flat-square\n[1]: https://nodejs.org/api/documentation.html#documentation_stability_index\n[2]: https://img.shields.io/npm/v/pino-http-format.svg?style=flat-square\n[3]: https://npmjs.org/package/pino-http-format\n[4]: https://img.shields.io/travis/pinojs/pino-http-format/master.svg?style=flat-square\n[5]: https://travis-ci.org/pinojs/pino-http-format\n[6]: https://img.shields.io/codecov/c/github/pinojs/pino-http-format/master.svg?style=flat-square\n[7]: https://codecov.io/github/pinojs/pino-http-format\n[8]: http://img.shields.io/npm/dm/pino-http-format.svg?style=flat-square\n[9]: https://npmjs.org/package/pino-http-format\n[10]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\n[11]: https://github.com/feross/standard\n[12]: https://npm.im/debug\n[13]: https://npm.im/github/pinojs/pino\n[14]: https://david-dm.org/pinojs/pino-http-format/status.svg\n[15]: https://david-dm.org/pinojs/pino-http-format\n\n","created":"2017-04-28T23:28:18.318Z","modified":"2017-05-06T04:04:43.404Z","lastPublisher":{"name":"davidmarkclements","email":"huperekchuno@googlemail.com"},"owners":[{"name":"davidmarkclements","email":"huperekchuno@googlemail.com"},{"name":"jsumners","email":"james.sumners@gmail.com"},{"name":"matteo.collina","email":"hello@matteocollina.com"},{"name":"watson","email":"w@tson.dk"}],"other":{"_attachments":{},"_from":".","_id":"pino-http-format","_nodeVersion":"6.10.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pino-http-format-1.0.5.tgz_1493430804691_0.323617743793875"},"_npmUser":{"name":"davidmarkclements","email":"huperekchuno@googlemail.com"},"_npmVersion":"3.10.10","_rev":"6-4a92f9e6986880ffd241f903213fdd0c","_shasum":"15f7e2debfc4a676c2a881b9d97fbfc37f7d4518","author":{"name":"David Mark Clements"},"bugs":{"url":"https://github.com/pinojs/pino-http-format/issues"},"directories":{},"dist-tags":{"latest":"1.0.5"},"dist":{"shasum":"15f7e2debfc4a676c2a881b9d97fbfc37f7d4518","tarball":"https://registry.npmjs.org/pino-http-format/-/pino-http-format-1.0.5.tgz"},"maintainers":[{"name":"davidmarkclements","email":"huperekchuno@googlemail.com"},{"name":"jsumners","email":"james.sumners@gmail.com"},{"name":"matteo.collina","email":"hello@matteocollina.com"},{"name":"watson","email":"w@tson.dk"}],"readmeFilename":"readme.md","time":{"modified":"2017-05-06T04:04:43.404Z","created":"2017-04-28T23:28:18.318Z","1.0.0":"2017-04-28T23:28:18.318Z","1.0.1":"2017-04-29T00:41:39.762Z","1.0.2":"2017-04-29T00:49:28.101Z","1.0.3":"2017-04-29T01:13:06.951Z","1.0.4":"2017-04-29T01:17:26.715Z","1.0.5":"2017-04-29T01:53:26.802Z"}}}