{"name":"storehouse","description":"Simple http file store in node.js","version":"1.0.6","repository":"https://github.com/andyburke/node-storehouse","main":"storehouse.js","bin":{"storehouse":"cli.js"},"dependencies":{"commander":"1.2.x","express":"4.0.x","humanize":"0.0.x","node.extend":"1.0.x","node-fs":"0.1.x","async":"~0.7.0","body-parser":"~1.0.2","mmmagic":"~0.3.7","request":"~2.34.0","multer":"~0.1.7"},"engine":"node >= 0.10.0","gitHead":"25dc9bd05cd425086fccf212b70761dacce42d62","homepage":"https://github.com/andyburke/node-storehouse#readme","scripts":{},"versions":[{"number":"0.0.1","date":"2013-06-22T00:59:16.897Z"},{"number":"0.0.2","date":"2013-06-24T02:31:20.726Z"},{"number":"0.0.3","date":"2013-06-24T03:22:35.931Z"},{"number":"0.0.4","date":"2014-04-29T01:52:24.858Z"},{"number":"0.0.5","date":"2014-04-29T02:13:29.255Z"},{"number":"0.0.6","date":"2014-04-29T02:36:55.718Z"},{"number":"1.0.0","date":"2015-01-22T21:10:56.142Z"},{"number":"1.0.1","date":"2015-01-27T22:38:15.558Z"},{"number":"1.0.2","date":"2015-01-28T01:42:44.588Z"},{"number":"1.0.3","date":"2015-02-13T00:54:36.751Z"},{"number":"1.0.5","date":"2016-02-29T22:08:43.154Z"},{"number":"1.0.6","date":"2016-02-29T22:17:17.824Z"}],"readme":"Storehouse <img src=\"https://raw.github.com/andyburke/node-storehouse/master/storehouse.png\" width=\"48\" height=\"48\" />\n=========\n\nStorehouse is a small, simple *node.js* module that allows you to easily handle HTTP file uploads. It also comes with a convenient command line utility for creating a standalone Storehouse server.\n\n## Installation\n\nStorehouse requires *node.js* and *npm*.\n\nYou can install Storehouse for use in your own project:\n\n```\nnpm install storehouse\n```\n\nOr you can install Storehouse globally, making it easy to run the standalone server:\n\n```\nsudo npm install storehouse -g\n```\n\n## Usage\n\n### In your project:\n\nIf you're already using express, you can attach a storehouse directly to your app:\n\n```javascript\nconst Storehouse = require( 'storehouse' );\n\nconst storehouse = new Storehouse( {\n    url: '/fileupload',\n    directory: './files',\n    allowDownload: true,\n    downloadPrefix: '/files',\n    secret: 'this is the secret key'\n} );\n\nstorehouse.attach( app ); // attach to an existing express app\n```\n\nIf you don't already have an express app, you can tell storehouse to listen on its own:\n\n```javascript\nstorehouse.listen( {\n    port: 8888\n} );\n```\n\nStorehouse also supports SSL:\n\n```javascript\nstorehouse.listen( {\n    port: 8888,\n    ssl: {\n        key: './path/to/ssl.key',\n        cert: './path/to/ssl.crt',\n        port: 4443\n    }\n} );\n```\n\n### As a standalone server:\n\n```\n  Usage: storehouse [options]\n\n  Options:\n\n    -h, --help                 output usage information\n    -s, --secret <secret key>  Specify the secret key for the storehouse. !!REQUIRED!!\n    --nooverwrite              Do not allow files to be overwritten.\n    --url <url>                Specify the upload url. Eg: --url \"/uploadfile\"  Default: /upload\n    -d, --directory <path>     Specify the location to store files. Eg: --directory ./files  Default: ./\n    --allowDownload            Allow file downloads. Default: off\n    --prefix <prefix>          Specify the prefix for downloading files. Eg: --prefix /files  Default: /\n    -p, --port <port>          Specify the port to listen on. Default: 8888\n    --sslkey <keyfile>         Specify an SSL key file.\n    --sslcert <certfile>       Specify an SSL cert file.\n    --quiet                    Do not print out upload events.\n```\n\nExample:\n\n```\nstorehouse -s \"this is the secret key\" --allowDownload --url /testupload --nooverwrite\n```\n\nThis would start a Storehouse server with the secret key \"this is the secret key\" that:\n - Allows downloads\n - Has an upload url of: /testupload\n - Does not allow overwriting existing files\n\n## Cool, how do I keep everyone on the internet from uploading?\n\nThat's where the secret key comes in: to upload you must send a signature along with the file which Storehouse will validate.\n\nThe signature is a SHA1 of the sorted key/value pairs in your request, plus a secret key:\n\n```javascript\nlet verification = '';\nfor ( let key in Object.keys( opts ).sort() ) {\n    verification += key + '=' + opts[ key ] + '&';\n}\n\nverification += 'secret=this is the secret key';\n\nconst signature = CryptoJS.SHA1( verification );    \n```\n\nThe signature you send with the file must match this signature composed from the sorted key/value pairs of your request body plus the secret key.\n\n## That's great, but how do I generate a signature without leaking my secret key?\n\nGood question! Storehouse is mostly intended to be used as a part of an existing web infrastructure where you already have some kind of web service running.\n\nIn that service, you should expose a way for a user to obtain a signature for a file they'd like to upload. In that case, you can verify they have permission to upload and you can keep your secret key secret. Here's an example of how you might usually handle a file upload in this way:\n\n```javascript\najaxCall( {\n    url: '/api/fileuploadsignature',\n    type: 'POST',\n    data: {\n        path: '/some/path/to/upload/to.png',\n        type: 'image/png'\n    },\n    success: function( signature ) {\n        // here your API has given us back a signature that allows this file to be uploaded,\n        // now we can send the file to the server\n\n        let formData = new FormData();\n\n        formData.append( 'path', path );\n        formData.append( 'file', file ); // this would be from a file input in a form, for example\n        formData.append( 'signature', signature );\n\n        const xhr = new XMLHttpRequest();\n\n        xhr.onreadystatechange = function() {\n            if ( xhr.readyState == 4 ) // complete\n            {\n                if ( xhr.status < 200 || xhr.status >= 400 ) {\n                    alert( xhr.responseText ); // oops, error!\n                }\n            }\n        }\n\n        xhr.upload.addEventListener( 'progress', function( progressEvent ) {\n            if ( progressEvent.lengthComputable ) {\n                var percentComplete = Math.floor( ( progressEvent.loaded / progressEvent.total ) * 100 );\n                console.log( percentComplete ); // let's print the progress of our upload to the console\n            }\n        }, false );\n\n        xhr.addEventListener( 'load', function() {\n            alert( 'Done!' );\n        }, false );\n\n        xhr.addEventListener( 'error', function( error ) {\n            alert( error );\n        }, false );\n\n        xhr.addEventListener( 'abort', function() {\n            alert( 'Aborted!' );\n        }, false );\n\n        xhr.open( 'POST', '/fileupload', true ); // open a post to whatever URL you've configured Storehouse to listen to\n        xhr.send( formData ); // send the file\n    }\n} );\n```\n\n## Why?\n\nI created this because I became frustrated working with Amazon S3/CloudFront. Don't get me wrong, S3/CloudFront is great: tough to beat on price and there's no question of it handling scaling.\n\nSo why was I frustrated? Because I am often a 1-man team. Amazon AWS services are great, but they're really meant for larger-scale operations. Sometimes you just need to upload some files and not have to try to figure out all the nooks and crannies that AWS provides for managing a huge enterprise. And Amazon's approach is essentially that you write your own tooling.\n\nCheck out this great post by Vikrum Nijjar about switching from S3 to Fastly: https://www.firebase.com/blog/2012-07-30-making-the-switch-from-amazon-cloudfront-to-fastly.html\n\nThat post started me down this road. Except I needed a way for users to upload things to my server that I could then allow Fastly to cache. Hence: Storehouse.\n\n# CHANGELOG\n\nv1.0.6\n------\n- Update docs\n\nv1.0.5\n------\n- Fall back to streams to move file if fs.rename failes (eg: EXDEV error)\n\nv1.0.4\n------\n- Update to ES6\n\nv1.0.3\n------\n- Bump dependency on multer\n\nv1.0.2\n------\n- Bugfix signature generation (again)\n\nv1.0.1\n------\n- Bugfix signature generation\n\nv1.0.0\n------\n- Code cleanup/refactor\n- Change signature generation to be based on key order\n\nv0.0.7\n------\n- Improved logging\n  - fetch- and upload-requests are now logged\n  - file mime type added to logging output\n  - file encoding added to logging output\n- Added .jsbeautifyrc and .jshintrc files to project\n\nv0.0.6\n------\n- Need to check if there are actually requested headers... :(\n\nv0.0.5\n------\n- CORS fixes\n  - reflect back access-control-request-headers\n  - allow restricting the CORS origin with an option\n\nv0.0.4\n------\n- Allow for fetching URLs in addition to uploading files.\n- Upgrade to Express 4.x\n- Add fetching example to examples/\n\nv0.0.3\n------\n- Allow CORS requests.\n\nv0.0.2\n------\n- Allow key to be stored in a .storehouse_key file in the current directory.\n\nv0.0.1\n------\n- Initial release.\n","created":"2013-06-22T00:59:15.268Z","modified":"2016-02-29T22:17:17.824Z","lastPublisher":{"name":"andyburke","email":"aburke@bitflood.org"},"owners":[{"name":"andyburke","email":"aburke@bitflood.org"}],"other":{"_attachments":{},"_from":".","_id":"storehouse","_nodeVersion":"4.3.1","_npmOperationalInternal":{"host":"packages-6-west.internal.npmjs.com","tmp":"tmp/storehouse-1.0.6.tgz_1456784236330_0.35755880060605705"},"_npmUser":{"name":"andyburke","email":"aburke@bitflood.org"},"_npmVersion":"2.14.12","_rev":"1-62020a7008cd378f0def6fffad6c7bff","_shasum":"f91932cbca84b03a9f71cfea8daed9c407e5b2cb","author":{"name":"Andy Burke","email":"aburke@bitflood.org"},"bugs":{"url":"https://github.com/andyburke/node-storehouse/issues"},"directories":{},"dist-tags":{"latest":"1.0.6"},"dist":{"shasum":"f91932cbca84b03a9f71cfea8daed9c407e5b2cb","tarball":"http://registry.npmjs.org/storehouse/-/storehouse-1.0.6.tgz"},"maintainers":[{"name":"andyburke","email":"aburke@bitflood.org"}],"readmeFilename":"README.md","time":{"modified":"2016-02-29T22:17:17.824Z","created":"2013-06-22T00:59:15.268Z","0.0.1":"2013-06-22T00:59:16.897Z","0.0.2":"2013-06-24T02:31:20.726Z","0.0.3":"2013-06-24T03:22:35.931Z","0.0.4":"2014-04-29T01:52:24.858Z","0.0.5":"2014-04-29T02:13:29.255Z","0.0.6":"2014-04-29T02:36:55.718Z","1.0.0":"2015-01-22T21:10:56.142Z","1.0.1":"2015-01-27T22:38:15.558Z","1.0.2":"2015-01-28T01:42:44.588Z","1.0.3":"2015-02-13T00:54:36.751Z","1.0.5":"2016-02-29T22:08:43.154Z","1.0.6":"2016-02-29T22:17:17.824Z"}}}