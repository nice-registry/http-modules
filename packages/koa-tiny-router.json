{"name":"koa-tiny-router","version":"0.0.2","description":"A router for koa2 that does not consider HTTP methods when matching","main":"lib/router.js","scripts":{"test":"NODE_ENV=test node node_modules/gulp/bin/gulp.js test"},"repository":"https://github.com/turnstyle/koa-tiny-router","keywords":["koa","router","middleware","rest"],"license":"MIT","homepage":"https://github.com/turnstyle/koa-tiny-router#readme","dependencies":{"path-to-regexp":"^1.7.0"},"devDependencies":{"gulp":"^3.9.1","gulp-mocha":"^3.0.1","koa":"^2.0.0-alpha.3","mocha":"^3.2.0","should":"^11.1.2"},"gitHead":"efc5f44bea9776a420512ac2148796f974f9e250","versions":[{"number":"0.0.1","date":"2017-01-16T17:06:33.524Z"},{"number":"0.0.2","date":"2017-01-16T17:49:15.573Z"}],"readme":"koa-tiny-router\n===================\n\nkoa-tiny-router is a very simple router package for Koa2. It uses the\nsame [underlying library][1] for parsing routes as [koa-router][2], but\nit has one fundamental difference from koa-router: it doesn't use the HTTP\nmethod for matching routes.\n\nThis library can work in conjuction with koa-router though, so you can have\nparts of your application use koa-router, and other parts use\nkoa-tiny-router depending on your needs.\n\n\nAPI-documentation\n-----------------\n\n* [koa-tiny-router](#koa-tiny-router)\n  * [Router](#router) ⏏\n    * [new Router()](#new-router)\n    * _instance_\n      * [.match](#match) ⇒ <code>Router</code>\n\n<a name=\"#koa-tiny-router\"></a>\n<a name=\"#router\"></a>\n\n### koa-tiny-router\n\n**kind:** package\n\n<a name=\"#router\"></a>\n\n### Router\n\n**kind**: Exported class\n\n### new Router()\n\nCreate a new router.\n\n**Example**\n\nBasic usage:\n\n```js\nvar app = require('koa')();\nvar router = require('koa-source-router')();\nrouter.match('/foo', function(ctx, next) {...});\n```\n\n### router.match ⇒ <code>Router</code> ###\n\nMatch a path and execute a middleware function if it does. The path is\nevaluated using [path-to-regexp][2].\n\n**Example**\n\n```js\nrouter.match('/article/:id', function(ctx, next) {\n  ctx.body = 'Hello world' + ctx.params.id;\n});\n```\n\nQuery strings will not be considered when matching. Any URL parameters (such\nas `:id`) in the last example will be set to `ctx.params`.\n\n\nUse-case\n--------\n\nThis library was developed at Turnstyle, because while we developing a REST\nwebservice, we noticed that:\n\n1. There was a lot of repetition in our routes.\n2. It was annoying to write per-route middleware.\n\nIn our use-case, we wanted to express the following pattern efficiently.\n\n### Controller class\n\nWe have one ES2015 class per route or resource. These are our controllers. We\nnever break this pattern. This allows our 'controller' to look like this:\n\n\n```js\nclass FooController {\n\n  async get() {\n\n  }\n\n  async put() {\n\n  }\n\n  async del() {\n\n  }\n\n  async post() {\n\n  }\n\n  async options() {\n\n  }\n\n}\n```\n\nIf there's a route that only supports 1 method (`GET` for example), that means\nthat those controllers also have one method (`async get()`).\n\nWe use a super-class that implements defaults for all these methods, which just\ncause a `405 Method Not Allowed` to be returned.\n\nThe superclass looks a bit like this:\n\n```js\nclass BaseController {\n\n  async match(ctx) {\n\n    // Do content-negotiation.\n    // Do validation.\n    // Do pre-condition checking.\n    // Call this[ctx.method](ctx).\n\n  }\n\n  async get(ctx) {\n\n    // Throw 405\n\n  }\n\n  async put() {\n\n    // Throw 405\n\n  }\n\n  async del() {\n\n    // Throw 405\n\n  }\n\n  async post() {\n\n    // Throw 405\n\n  }\n\n  async options() {\n\n    // Add a bunch of default headers\n\n  }\n\n}\n```\n\nHaving a a default 'match' method that matches every HTTP request is super\nuse-ful, as we can do a number of things that are applicable to each HTTP\nrequest, but the default [koa-router][2] does not elegantly handle this.\n\n\n\nRunning tests\n-------------\n\nRun tests using `npm test`.\n\n\n[1]: https://www.npmjs.com/package/path-to-regexp \"path-to-regexp\"\n[2]: https://www.npmjs.com/package/koa-router \"koa-router\"\n","created":"2017-01-16T17:06:33.524Z","modified":"2017-04-11T02:57:41.785Z","lastPublisher":{"name":"evrt","email":"me@evertpot.com"},"owners":[],"other":{"_attachments":{},"_from":".","_id":"koa-tiny-router","_nodeVersion":"6.9.4","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/koa-tiny-router-0.0.2.tgz_1484588953742_0.338622210547328"},"_npmUser":{"name":"evrt","email":"me@evertpot.com"},"_npmVersion":"3.10.10","_rev":"7-05e425469dddc87184d60e9303cd9f2d","_shasum":"1d776ed0e5e4ce5342ec7fafba43de0a66c865d5","bugs":{"url":"https://github.com/turnstyle/koa-tiny-router/issues"},"contributors":[{"name":"Phil Schwyter","url":"http://philschwyter.com/"},{"name":"Evert Pot","url":"https://evertpot.com"}],"directories":{},"dist-tags":{"latest":"0.0.2"},"dist":{"shasum":"1d776ed0e5e4ce5342ec7fafba43de0a66c865d5","tarball":"https://registry.npmjs.org/koa-tiny-router/-/koa-tiny-router-0.0.2.tgz"},"maintainers":[],"readmeFilename":"README.md","time":{"modified":"2017-04-11T02:57:41.785Z","created":"2017-01-16T17:06:33.524Z","0.0.1":"2017-01-16T17:06:33.524Z","0.0.2":"2017-01-16T17:49:15.573Z"}}}