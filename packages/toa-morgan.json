{"name":"toa-morgan","description":"HTTP request logger middleware for Toa.","authors":["Yan Qing <admin@zensh.com>"],"version":"1.1.0","main":"index.js","repository":"https://github.com/toajs/toa-morgan","engines":{"node":">= 4.5.0"},"homepage":"https://github.com/toajs/toa-morgan","keywords":["toa","toa-module","toa-middleware","morgan","log","logger"],"dependencies":{},"devDependencies":{"split":"^1.0.0","standard":"^10.0.2","supertest":"^3.0.0","tman":"^1.6.9","toa":"^2.6.8"},"scripts":{"test":"standard && tman"},"files":["README.md","index.js"],"gitHead":"8308b474dff45a513c85ad90b0ddc5379bb5fb11","versions":[{"number":"0.1.0","date":"2015-12-12T10:02:46.649Z"},{"number":"1.0.0","date":"2015-12-25T15:32:41.668Z"},{"number":"1.0.1","date":"2015-12-26T01:07:20.972Z"},{"number":"1.0.2","date":"2016-04-09T07:42:40.582Z"},{"number":"1.0.3","date":"2016-09-05T16:19:29.774Z"},{"number":"1.1.0","date":"2017-06-15T15:22:48.260Z"}],"readme":"# toa-morgan\n\nHTTP request logger middleware for Toa.\n\n[![NPM version][npm-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Downloads][downloads-image]][downloads-url]\n\n> Modified from https://github.com/expressjs/morgan\n\n## Examples\n\n### simple toa server\n\nSimple app that will log all request in the Apache combined format to STDOUT\n\n```js\nconst Toa = require('toa')\nconst toaMorgan = require('toa-morgan')\n\nconst app = new Toa()\napp.use(toaMorgan())\napp.use(function () {\n  this.body = 'Hello!'\n})\n\napp.listen(3000)\n```\n\n### write logs to a file\n\nSimple app that will log all requests in the Apache combined format to the file\n`access.log`.\n\n```js\nconst fs = require('fs')\nconst Toa = require('toa')\nconst toaMorgan = require('toa-morgan')\n\n// create a write stream (in append mode)\nconst accessLogStream = fs.createWriteStream(__dirname + '/access.log', {flags: 'a'})\n\nconst app = new Toa()\napp.use(toaMorgan('common', {stream: accessLogStream}))\napp.use(function () {\n  this.body = 'Hello!'\n})\n\napp.listen(3000)\n```\n\n### use custom token formats\n\nSample app that will use custom token formats. This adds an ID to all requests and displays it using the `:id` token.\n\n```js\nconst Toa = require('toa')\nconst uuid = require('uuid')\nconst toaMorgan = require('toa-morgan')\n\ntoaMorgan.token('id', function () {\n  return this.state.id\n})\n\nconst app = new Toa()\napp.use(toaMorgan(':id :method :url :response-time'))\napp.use(function (next) {\n  this.state.id = uuid.v4()\n  next()\n})\n\napp.use(function () {\n  this.body = 'Hello!'\n})\napp.listen(3000)\n```\n\n## API\n\n```js\nconst morgan = require('toa-morgan')\n```\n\n### morgan([format, options])\n\nCreate a new morgan logger middleware function using the given `format` and `options`.\nThe `format` argument may be a string of a predefined name (see below for the names),\na string of a format string, or a function that will produce a log entry.\n\n#### Options\n\nMorgan accepts these properties in the options object.\n\n#### immediate\n\nWrite log line on request instead of response. This means that a requests will\nbe logged even if the server crashes, _but data from the response (like the\nresponse code, content length, etc.) cannot be logged_.\n\n##### skip\n\nFunction to determine if logging is skipped, defaults to `false`. This function\nwill be called as `skip.call(context)`.\n\n```js\n// EXAMPLE: only log error responses\nmorgan('combined', {\n  skip: function () {\n    return this.status < 400\n  }\n})\n```\n\n##### stream\n\nOutput stream for writing log lines, defaults to `process.stdout`.\n\n#### Predefined Formats\n\nThere are various pre-defined formats provided:\n\n##### combined\n\nStandard Apache combined log output. It is default format.\n\n```text\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length] \":referrer\" \":user-agent\"\n```\n\n##### common\n\nStandard Apache common log output.\n\n```text\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length]\n```\n\n##### dev\n\nConcise output colored by response status for development use. The `:status`\ntoken will be colored red for server error codes, yellow for client error\ncodes, cyan for redirection codes, and uncolored for all other codes.\n\n```text\n:method :url :status :response-time ms - :res[content-length]\n```\n\n##### tiny\n\nThe minimal output.\n\n```text\n:method :url :status :res[content-length] - :response-time ms\n```\n\n#### Tokens\n\n##### Creating new tokens\n\nTo define a token, simply invoke `morgan.token` with the name and a callback function. This callback function is expected to return a string value. The value returned is then available as \":type\" in this case:\n\n```js\nmorgan.token('type', function () {\n  return this.get('content-type')\n})\n```\n\nCalling `morgan.token` using the same name as an existing token will overwrite that token definition.\n\n##### :date[format]\n\nThe current date and time in UTC. The available formats are:\n\n- `clf` for the common log format (`\"10/Oct/2000:13:55:36 +0000\"`)\n- `iso` for the common ISO 8601 date time format (`2000-10-10T13:55:36.000Z`)\n- `web` for the common RFC 1123 date time format (`Tue, 10 Oct 2000 13:55:36 GMT`)\n\nIf no format is given, then the default is `web`.\n\n##### :http-version\n\nThe HTTP version of the request.\n\n##### :method\n\nThe HTTP method of the request.\n\n##### :referrer\n\nThe Referrer header of the request. This will use the standard mis-spelled Referer header if exists, otherwise Referrer.\n\n##### :remote-addr\n\nThe remote address of the request. This will use `this.ip`.\n\n##### :remote-user\n\nThe user, default is `\"-\"`.\n\n##### :req[header]\n\nThe given `header` of the request.\n\n##### :res[header]\n\nThe given `header` of the response.\n\n##### :response-time\n\nThe time between the request coming into `morgan` and when the response\nheaders are written, in milliseconds.\n\n##### :status\n\nThe status code of the response.\n\nIf the request/response cycle completes before a response was sent to the\nclient (for example, the TCP socket closed prematurely by a client aborting\nthe request), then the status will be empty (displayed as `\"-\"` in the log).\n\n##### :url\n\nThe URL of the request. This will use `this.originalUrl`.\n\n##### :user-agent\n\nThe contents of the User-Agent header of the request.\n\n## Licences\n\n(The MIT License)\n\n[npm-url]: https://npmjs.org/package/toa-morgan\n[npm-image]: http://img.shields.io/npm/v/toa-morgan.svg\n\n[travis-url]: https://travis-ci.org/toajs/toa-morgan\n[travis-image]: http://img.shields.io/travis/toajs/toa-morgan.svg\n\n[downloads-url]: https://npmjs.org/package/toa-morgan\n[downloads-image]: http://img.shields.io/npm/dm/toa-morgan.svg?style=flat-square\n","created":"2015-12-12T10:02:46.649Z","modified":"2017-06-15T15:22:48.260Z","lastPublisher":{"name":"zensh","email":"admin@zensh.com"},"owners":[{"name":"zensh","email":"admin@zensh.com"}],"other":{"_attachments":{},"_from":".","_id":"toa-morgan","_nodeVersion":"6.10.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/toa-morgan-1.1.0.tgz_1497540168187_0.03981826803646982"},"_npmUser":{"name":"zensh","email":"admin@zensh.com"},"_npmVersion":"3.10.10","_rev":"2-1d5173cb28061c9869eaf9c9aeda8061","_shasum":"124aebf1e11c298f3ced9d93514a4560763725f5","bugs":{"url":"https://github.com/toajs/toa-morgan/issues"},"directories":{},"dist-tags":{"latest":"1.1.0"},"dist":{"shasum":"124aebf1e11c298f3ced9d93514a4560763725f5","tarball":"https://registry.npmjs.org/toa-morgan/-/toa-morgan-1.1.0.tgz"},"maintainers":[{"name":"zensh","email":"admin@zensh.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-15T15:22:48.260Z","created":"2015-12-12T10:02:46.649Z","0.1.0":"2015-12-12T10:02:46.649Z","1.0.0":"2015-12-25T15:32:41.668Z","1.0.1":"2015-12-26T01:07:20.972Z","1.0.2":"2016-04-09T07:42:40.582Z","1.0.3":"2016-09-05T16:19:29.774Z","1.1.0":"2017-06-15T15:22:48.260Z"}}}