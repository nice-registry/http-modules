{"name":"a-server","version":"1.1.0","description":"A dead-simple HTTP server class.","main":"index.js","scripts":{"test":"mocha tests/**/*.spec.js","lint":"eslint ./index.js ./lib"},"repository":"https://github.com/taitulism/a-server","keywords":["server","simple server","server wrapper","server constructor","server class","server api","http server"],"license":"MIT","devDependencies":{"chai":"3.5.0","eslint":"^3.8.1","mocha":"3.1.2","request":"2.76.0","sinon":"1.17.6"},"gitHead":"aecbaa85a0481bce5d62549ec26d11d1616e8103","homepage":"https://github.com/taitulism/a-server#readme","versions":[{"number":"0.0.1","date":"2015-11-15T15:12:30.103Z"},{"number":"0.0.2","date":"2015-11-23T17:27:56.071Z"},{"number":"0.9.9","date":"2016-11-03T23:28:05.142Z"},{"number":"1.0.0","date":"2016-11-06T01:37:39.614Z"},{"number":"1.0.1","date":"2017-04-18T18:32:18.435Z"},{"number":"1.0.2","date":"2017-04-18T18:37:56.315Z"},{"number":"1.1.0","date":"2017-04-19T07:41:45.541Z"}],"readme":"[![Build Status](https://travis-ci.org/taitulism/a-server.svg?branch=develop)](https://travis-ci.org/taitulism/a-server)\n\na-server\n========\nA dead-simple HTTP server class. A wrapper to Node's native HTTP server, enables you to easly create and control an HTTP server. \n\n\n\n\nWithout a-server :-(\n--------------------\nIf all you want is just a plain HTTP server you probably write something like this:\n```js\nvar http = require('http');\n\nvar server = http.createServer(function (req, res) {\n\tres.end('Hello beautiful world');\n});\n\nserver.listen(8080, '127.0.0.1', function () {\n\tconsole.log('Listening at 127.0.0.1:8080');\n});\n```\n\nWell, no more.\n\nWith a-server :-)\n-----------------\nGet the same result with this:\n```js\t\nrequire('a-server')().start((req, res) => {\n\tres.end('Hello beautiful world');\n});\n```\n\n\n- [x] A server with a dead simple API (`.start()`, `.stop()` etc).\n- [x] Zero configuration for basic usage.\n- [x] Yet, configurable.\n\n\n\n\nInstall\n-------\n```sh\n$ npm install a-server --save\n```\n\nUsage\n-----\n```js\nconst aServer = require('a-server');\nconst myServer = aServer(options);\n\nmyServer.start(function (req, res) {\n\tres.end('Hello beautiful world');\n});\n```\n\n### A Single Server\nIf all you need is only one server, you can:\n```js\t\nconst server = require('a-server')(options);\n\nserver.start((req, res) => {\n\tres.end('Hello beautiful world');\n});\n```\nor even:\n```js\t\nrequire('a-server')(options).start((req, res) => {\n\tres.end('Hello beautiful world');\n});\n```\n\n### Multiple Servers\nYou can create multiple servers:\n```js\nvar aServer = require('a-server');\n\nvar myServer1 = aServer({port:8181});\nvar myServer2 = aServer({port:8282});\n```\n\n---------------------------\n\n\nOptions\n-------\n#### `host` <String\\>\nBegin accepting connections on the specified hostname. If the hostname is `null`, the server will accept connections on any IPv6 address (::)  \n**Default**: process.env.IP (if exists) or `'127.0.0.1'`.\n\n\n#### `port` <Number\\>\nBegin accepting connections on the specified port.  \n**Default**: process.env.PORT (if exists) or `8080`.\n\n\n#### `https` <Object\\>\nAn HTTPS options object. [Read more](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener).  \n**Default**: `false` (HTTP server)\n\n\n#### `timeout` <Number\\>\nSockets idle timeout limit in milliseconds (Node's default is 2 minutes)  \n**Default**: `5000`\n\n\n#### `logs` <Boolean\\>\nBasic default logs when the server starts, when it stops and when a new app is being mounted.  \n**Default**: `true`\n\n\n\n\n### Global options vs. Own options\nTo setup a new a-server instance with its own individual options:\n```js\nconst aServer = require('a-server')();\nconst myServer = aServer({\n\ttimeout: 10000\n\tlogs: false,\n});\n\nmyServer.start();\n```\n\nTo change a-server's **global** defaults:\n```js\nconst aServer = require('a-server');\n\n/* NOTE: This will be applied for ALL new a-server instances */\naServer.defaults.timeout = 10000;\naServer.defaults.logs    = false;\n```\n\n\n\n-----------\nAPI Methods\n-----------\n* [start](#startapp)\n* [stop](#stopcallback)\n* [restart](#restartnewapp)\n* [remount](#remountnewapp)\n* [kill](#kill)\n\n\n\n\n### `.start(app)`\nStart listening for client requests.  \n`app` is a request-handler, a function for handling the `request` and the `response`.  \nAfter the server has started the `.onStart()` hook function gets called (see [hooks](#hooks) below).\n\n**example:**  \n```js\nvar server = require('a-server')(options);\n\nfunction app (req, res) {\n\tres.end('Hello beautiful world');\n}\n\nserver.start(app);\n```\n\n\n\n\n### `.stop([callback])`\nStops the server from accepting new requests.\n`callback` (function) is an optional argument. It will get called after the `.onStop()` hook (see [hooks](#hooks) below).\n\n**example:**  \n```js\nvar server = require('a-server')();\n\nfunction app (req, res) {\n\tres.end('Hello beautiful world');\n}\n\nserver.start(app);\n\n// ...\n\nserver.stop(function () {\n\tconsole.log('Goodbye!');\n});\n```\n\n\n\n\n### `.restart([newApp])`\nStops the server and starts it again with an optional new app function (a new request-handler).  \nCalls `.stop()` and `.start()` methods (meaning: runs the `onStop` and `onStart` hooks. Read more about [hooks](#hooks).\n\n**example:**  \n```js\nvar aServer = require('a-server')();\n\nfunction app_1 (req, res) {\n\tres.end('good morning!');\n}\n\nfunction app_2 (req, res) {\n\tres.end('good evening!');\n}\n\naServer.start(app_1);\n\n// ...\n\naServer.restart(app_2);\n```\n\n\n\n\n### `.remount(newApp)`\nReplaces the server's current request-handler with a new one.  \nDoes NOT call `.stop()` and`.start()` methods.\n\n**example:**  \n```js\nvar aServer = require('a-server')();\n\nfunction app_1 (req, res) {\n\tres.end('good morning!');\n}\n\nfunction app_2 (req, res) {\n\tres.end('good evening!');\n}\n\naServer.start(app_1);\n\n// ...\n\naServer.remount(app_2);\n```\n\n\n\n### `.kill()`\nStops the server from accepting new requests and kill its props and handlers. Calls the native `server.unref()`.  \nA killed server cannot be started again.\n\n**example:**  \n```js\nvar aServer = require('a-server')();\n\nfunction app (req, res) {\n\tres.end('Hello beautiful world');\n}\n\naServer.start(app);\n\n// ...\n\naServer.kill();\n\n// ...\n\naServer.start(app_1); // --> error\n```\n\n\n\n\nHooks\n-----\n>**NOTE:** a-server is NOT an instance of EventEmitter.\n\na-server has two event-like hooks:\n\n### `onStart`  \n**type**: \\<Function\\>  \n**default**: None.  \nA callback function to run after the server starts.  \nGets called with the `server` instance as its only argument.\n\n### `onStop`  \n**type**: \\<Function\\>  \n**default**: None.  \nA callback function to run after the server stops.  \nGets called with the `server` instance as its only argument.\n\n&nbsp;\n\nSimply put your callback functions in those placeholders:\n```js\nvar myServer = require('a-server')();\n\nmyServer.onStart = function (myServer) {\n\t// e.g. OPEN a databse connection\n};\n\nmyServer.onStop = function (myServer) {\n\t// e.g. CLOSE a databse connection\n};\n\nmyServer.start((req, res) => {\n\tres.end('hello')\n});\n```\n\n\n\nP.S.\n----\nYou have access to the underlying native HTTP server using the `_server` property:\n```js\n\tvar aServer = require('a-server')();\n\n\t// the native HTTP server\n\tconsole.log(server._server);\n```\n","created":"2015-11-15T15:12:30.103Z","modified":"2017-04-19T07:41:45.541Z","lastPublisher":{"name":"taitulism","email":"taitulism@gmail.com"},"owners":[{"name":"taitulism","email":"taitulism@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"a-server","_nodeVersion":"7.8.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/a-server-1.1.0.tgz_1492587703587_0.6944634814281017"},"_npmUser":{"name":"taitulism","email":"taitulism@gmail.com"},"_npmVersion":"4.2.0","_rev":"6-1e288abb4f2b4e9310385bb5347853d6","_shasum":"ba6a23fe954670fd4d82a6ee6d7fd0c121370855","author":{"name":"Taitulism","email":"taitulism@gmail.com","url":"https://github.com/taitulism"},"bugs":{"url":"https://github.com/taitulism/a-server/issues"},"directories":{},"dist-tags":{"latest":"1.1.0"},"dist":{"shasum":"ba6a23fe954670fd4d82a6ee6d7fd0c121370855","tarball":"https://registry.npmjs.org/a-server/-/a-server-1.1.0.tgz"},"maintainers":[{"name":"taitulism","email":"taitulism@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-19T07:41:45.541Z","created":"2015-11-15T15:12:30.103Z","0.0.1":"2015-11-15T15:12:30.103Z","0.0.2":"2015-11-23T17:27:56.071Z","0.9.9":"2016-11-03T23:28:05.142Z","1.0.0":"2016-11-06T01:37:39.614Z","1.0.1":"2017-04-18T18:32:18.435Z","1.0.2":"2017-04-18T18:37:56.315Z","1.1.0":"2017-04-19T07:41:45.541Z"}}}