{"name":"http-hash-server","version":"1.0.2","description":"HTTP server for http-hash router","keywords":[],"repository":"https://github.com/Matt-Esch/http-hash-server","main":"index.js","homepage":"https://github.com/Matt-Esch/http-hash-server","dependencies":{"fast-url-parser":"^1.1.3","http-hash":"^2.0.0","xtend":"^4.0.1"},"devDependencies":{"coveralls":"^2.10.0","eslint":"1.8.0","eslint-config-perf-standard":"2.0.0","eslint-plugin-perf-standard":"1.0.2","istanbul":"^0.3.5","opn":"^1.0.1","tape":"^3.4.0"},"licenses":[{"type":"MIT","url":"http://github.com/Matt-Esch/http-hash-server/raw/master/LICENSE"}],"scripts":{"travis":"npm run cover -s && istanbul report lcov && ((cat coverage/lcov.info | coveralls) || exit 0)","check-cover":"istanbul check-coverage --branches=100 --lines=100 --functions=100","check-ls":"npm ls 1>/dev/null","cover":"npm run test-cover -s && npm run check-cover -s","lint":"eslint $(git ls-files | grep '.js$')","test":"npm run check-ls -s && npm run lint -s && npm run cover -s","test-cover":"istanbul cover --report html --print detail -- test/index.js","view-cover":"opn ./coverage/index.html"},"engines":{"node":">= 0.10.x"},"gitHead":"b4f1e4019a4d37f8eb799008eda5e362b8d4a343","versions":[{"number":"1.0.0","date":"2016-04-25T08:12:38.936Z"},{"number":"1.0.1","date":"2016-05-02T01:54:37.273Z"},{"number":"1.0.2","date":"2016-05-02T01:56:27.173Z"}],"readme":"# http-hash-server\n\n<!--\n    [![build status][build-png]][build]\n    [![Coverage Status][cover-png]][cover]\n    [![Davis Dependency status][dep-png]][dep]\n-->\n\n<!-- [![NPM][npm-png]][npm] -->\n\nHTTP server for http-hash router\n\n## Example\n\n```js\nvar createServe = require(\"http-hash-server\");\n\n// GET /example/buzzer returns `buzz`\nvar server = createServer({\n    hostname: '127.0.0.1',\n    port: 9000,\n    services: {\n        example: {\n            route: '/example',\n            methods: {\n                buzzer: {\n                    httpMethod: 'GET',\n                    route: '/buzzer',\n                    handler: function handleRequest(req, res, opts) {\n                        opts.deps.logger.info(opts.requestContext.serviceName);\n                        // -> \"example\"\n\n                        opts.deps.logger.info(opts.requestContext.methodName);\n                        // -> \"bazzer\"\n\n                        res.end('buzz');\n                    }\n                }\n            }\n        }\n    },\n    globalRequestOptions: {\n        deps: {\n            logger: console\n        }\n    }\n});\n\nserver.listen(function onServerListen(err) {\n    assert.ifError(err);\n});\n```\n\n```\ncurl -X GET http://127.0.0.1:9000/example/buzzer\n-> buzz\n```\n\n```\ncurl -X POST http://127.0.0.1:9000/example/buzzer\n-> {\"message\": \"Method Not Allowed\"}\n```\n\n```\ncurl -X GET http://127.0.0.1:9000/foo\n-> {\"message\": \"URL Not Found\"}\n```\n\n## Concept and Motivation\n\nA basic http server implementation involes routing requests to a handler and\ndealing with bad requests (not found, or method not allowed). Http-hash is a\ntree-structure based router than can be used for such purposes. This module\naims to provide a pairing of the http-hash router with a server implementation\nfor doing the very basics of http in node.\n\nAn http route handler is considered to have the interface\n\n```js\nfunction requestHandler(req, res, opts)\n```\n\nWhere `req` and `res` are the unadulterated `IncomingRequest` and\n`OutgoingReponse` streams supplied by the node http implementation, and opts\nare a global object, shallow-cloned for each request, used for storing request\nmeta-information and doing dependency injection of global service dependencies.\n\n\nThe route table is based around two pieces of information, the *service* and\nthe *method*. Services are essentially collections of methods. A service has a\ntop level route and each method has a route. A method's route nests under the\nservice's route, for example the service `foo` that mounts on `/foo` can\nimplement method `bar` with route `/bar`, giving us a service method routed by\nthe URL `/foo/bar`.\n\nBasic implementations will mount a single service on `/` and implement a\nhandful of methods. Complicated services could implement many services\nunder different prefixes.\n\n\n## API Documentation\n\n### `var createServer = require('http-hash-server')`\n\n```ocaml\ncreateServer: (HttpHashServerOpts) => HttpHashServer\n\n```\n\nThe http-hash-server module exposes a safe constructor for the HttpHashSerer\nconstructor function, so it is created without using the `new` keyword.\n\n### `var server = createServer(opts)`\n\n\n```ocaml\n\nHttpHashServerOpts := {\n    hostname?: String,\n    port: Number,\n    globalRequestOptions?: Object as GlobalRequestOptions,\n    handleNotFound?: RequestHandler,\n    handleMethodNotAllowed?: RequestHandler,\n    services: ServiceDefinition\n}\n\nHttpHashServer := {\n    globalRequestOptions: Object,\n    family: String,\n    hostname: String,\n    port: Number,\n    init: (cb: (err) => void) => void\n    destroy: (cb: (err) => void) => void\n}\n```\n\nThe HTTP hash server in created by passing a set of options, which comprises of\nthe following\n\n#### `opts.hostname : String`\n\nThis is the address of the interface for the server to listen on,\n**Default:** `\"127.0.0.1\"`\n\n#### `opts.port : Number`\n\nThe port that the server should listen on. The port must be an integer value\ngreater than or equal to 0. Port 0 will be assigned to a random port by the\noperating system and the HttpHashServer port property with reflect this new\nport after the server is initialized.\n**Required**\n\n#### `opts.globalRequestOptions : Object`\n\nThe global request options are shallow cloned and passed into each request. The\nserver adds extra information to this object to provide context on the route\nthat has been matched.\n**Default:** `{}`\n\n#### `opts.handleNotFound: RequestHandler`\n\nIf a route is not matched, the server will handle this by returning a\n`404 Not Found` response, with a JSON body `{message: \"Not Found\"}`. Setting\nthis option will override the default not-found handler and use the specified\nroute handler for all unresolved requests. Note that because the route is\nunmatched, the `serviceName` and `methodName` on the request context are null.\n\n#### `opts.handleMethodNotAllowed: RequestHandler`\n\nIf a route is matched but there is no route handler specified for the http\nmethod of the current request, the `methodNotFound` route handler is invoked.\nBy default, the server will return a `405 Method Not Allowed` response with a\nJSON body `{message: 'Method Not Allowed'}`. Setting this option will override\nthe default method-not-allowed handler.\n\n#### `opts.services: ServiceDefinition`\n\n``` ocaml\nServiceDefinition := {\n    $serviceName: {\n        route: String,\n        methods: {\n            $methodName: {\n                httpMethod: String,\n                route: String,\n                handler: (\n                    req: HttpRequest,\n                    res: HttpResponse,\n                    opts: RequestOptions\n                ) => void\n            }\n        }\n    }\n}\n```\n\nThe service defintion is essentially a hash map of ServiceName => Methods. The\nservice route is a route prefix for the routes defined for each of the service\nmethods.\n\n\n### `function handleRequest(req, res, opts)`\n\n```ocaml\nRequestHandler := (HttpRequest, HttpResponse, RequestOptions) => Void\n\nRequestOptions := GlobalRequestOptions & {\n    requestContext: {\n            requestTime: Number,\n            parsedUrl: NodeParsedUrl,\n            params: Object<String, String>,\n            splat: String | null,\n            serviceName: String | null,\n            methodName: String | null\n        }\n    }\n}\n```\n\nThe options derive from the the gloabl request options passed into the\n`HttpHashServer` constructor. The options are shallow cloned for each request\nand the key `requestContext` added.\n\n#### `opts.requestContext.requestTime`\n\nThe request time is added to the request context as early as possible to ensure\ncorrect statistics for endpoint latencies. The value is the result of\n`Date.now()`.\n\n#### `opts.requestContext.parsedUrl`\n\nIn order to do the route matching, http-hash-server calls\n`url.parse(req.url, true)`. This provides the pathname to do the route matching\nand provides the parsed query for consumers.\n\n#### `opts.requestContext.params`\n\nThe params matched in the route. For example, a route with params defined as\n`/user/:id/messages` would yield params with an `id` key.\n\n#### `opts.requetContext.splat`\n\nIf a route has a splat i.e. `/service/collection/*`, the suffix of the request\n(i.e. the * portion) is retained in the `splat` field. If the route does not\nhave a splat, the value is null.\n\n#### `opts.requestContext.serviceName`\n\nThe service name that owns the matched route. It can be null in the not found\nand method not allowed handlers.\n\n#### `opts.requestContext.methodName`\n\nThe method name associated with the matched route. It can be null in the not\nfound and method not allowed handlers.\n\n\n### ```server.init(cb)```\n\nCalls `this.server.listen` and calls the callback when the socket is open. Calls\nback with an error if there was an error listening on the socket.\n\n\n### ```server.destroy(cb)```\n\nCalls `this.server.close()` and invokes the callback immediately.\n\n\n\n## Installation\n\n`npm install http-hash-server`\n\n## Tests\n\n`npm test`\n\n## NPM scripts\n\n - `npm run cover` This runs the tests with code coverage\n - `npm run lint` This will run the linter on your code\n - `npm test` This will run the tests.\n - `npm run view-cover` This will show code coverage in a browser\n - `npm run check-licence` This will verify all files are licenced\n - `npm run add-licence` This will add licence files\n\n## Contributors\n\n - Matt Esch\n\n## MIT Licenced\n\n  [build-png]: https://secure.travis-ci.org/Matt-Esch/http-hash-server.png\n  [build]: https://travis-ci.org/Matt-Esch/http-hash-server\n  [cover-png]: https://coveralls.io/repos/Matt-Esch/http-hash-server/badge.png\n  [cover]: https://coveralls.io/r/Matt-Esch/http-hash-server\n  [dep-png]: https://david-dm.org/Matt-Esch/http-hash-server.png\n  [dep]: https://david-dm.org/Matt-Esch/http-hash-server\n  [test-png]: https://ci.testling.com/Matt-Esch/http-hash-server.png\n  [tes]: https://ci.testling.com/Matt-Esch/http-hash-server\n  [npm-png]: https://nodei.co/npm/http-hash-server.png?stars&downloads\n  [npm]: https://nodei.co/npm/http-hash-server\n","created":"2016-04-25T08:12:38.936Z","modified":"2016-05-02T01:56:27.173Z","lastPublisher":{"name":"mattesch","email":"matt@mattesch.info"},"owners":[{"name":"mattesch","email":"matt@mattesch.info"}],"other":{"_attachments":{},"_from":".","_id":"http-hash-server","_nodeVersion":"0.10.32","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/http-hash-server-1.0.2.tgz_1462154186789_0.4400743106380105"},"_npmUser":{"name":"mattesch","email":"matt@mattesch.info"},"_npmVersion":"2.11.3","_rev":"1-3bdc88977df217d6adf4710814051b86","_shasum":"5c78ab48202152ddd8a846c8169930d94bf6ccca","author":{"name":"Matt Esch","email":"matt@mattesch.info"},"bugs":{"url":"https://github.com/Matt-Esch/http-hash-server/issues","email":"matt@mattesch.info"},"contributors":[{"name":"Matt Esch"}],"directories":{},"dist-tags":{"latest":"1.0.2"},"dist":{"shasum":"5c78ab48202152ddd8a846c8169930d94bf6ccca","tarball":"http://registry.npmjs.org/http-hash-server/-/http-hash-server-1.0.2.tgz"},"maintainers":[{"name":"mattesch","email":"matt@mattesch.info"}],"readmeFilename":"README.md","time":{"modified":"2016-05-02T01:56:27.173Z","created":"2016-04-25T08:12:38.936Z","1.0.0":"2016-04-25T08:12:38.936Z","1.0.1":"2016-05-02T01:54:37.273Z","1.0.2":"2016-05-02T01:56:27.173Z"}}}