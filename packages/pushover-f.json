{"name":"pushover-f","description":"git push deploy server over http","version":"1.1.2","repository":"https://github.com/substack/pushover","main":"index.js","keywords":["git","push","deploy","http","web","repository"],"scripts":{"test":"tap -d test/*.js"},"dependencies":{"http-duplex":"~0.0.2","inherits":"~1.0.0","mkdirp":"~0.3.4","event-stream":"~3.0.9"},"devDependencies":{"tap":"~0.2.5","seq":"~0.3.5"},"engines":{"node":">=0.4.0"},"license":"MIT","versions":[{"number":"1.1.0","date":"2012-12-11T16:21:00.907Z"},{"number":"1.1.1","date":"2012-12-12T17:21:18.604Z"},{"number":"1.1.2","date":"2012-12-13T17:43:59.110Z"}],"readme":"# pushover\n\nServe up git repositories over http and accept git pushes.\n\n[![build status](https://secure.travis-ci.org/substack/pushover.png)](http://travis-ci.org/substack/pushover)\n\nThis library makes it super easy to set up custom git push deploy logic.\n\n# example\n\n``` js\nvar pushover = require('pushover');\nvar repos = pushover('/tmp/repos');\n\nrepos.on('push', function (push) {\n    console.log('push ' + push.repo + '/' + push.commit\n        + ' (' + push.branch + ')'\n    );\n    push.accept();\n});\n\nrepos.on('fetch', function (fetch) {\n    console.log('fetch ' + fetch.commit);\n    fetch.accept();\n});\n\nvar http = require('http');\nvar server = http.createServer(function (req, res) {\n    repos.handle(req, res);\n});\nserver.listen(7005);\n```\n\nthen start up the pushover server...\n\n```\n$ node example/simple.js \n```\n\nmeanwhile...\n\n```\n$ git push http://localhost:7000/beep master\nCounting objects: 356, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (133/133), done.\nWriting objects: 100% (356/356), 46.20 KiB, done.\nTotal 356 (delta 210), reused 355 (delta 210)\nTo http://localhost:7000/beep\n * [new branch]      master -> master\n\n```\n\nand then...\n\n```\n$ node example/simple.js \npush beep.git/d5013a53a0e139804e729a12107fc212f11e64c3 (master)\n```\n\nor...\n\n```\n$ git clone http://localhost:7000/beep.git\n```\n\nand then...\n\n```\nfetch beep.git/d5013a53a0e139804e729a12107fc212f11e64c3\n```\n\n# methods\n\nvar pushover = require('pushover')\n\n## var repos = pushover(repoDir, opts={autoCreate:true})\n\nCreate a new repository collection from the directory `repoDir`.\n`repoDir` should be entirely empty except for git repo directories.\n\n`repos` is an EventEmitter that emits the events listed below in the events\nsection.\n\nBy default, repository targets will be created if they don't exist. You can\ndisable that behavior with `opts.autoCreate`.\n\nIf `opts.checkout` is true, create and expected checked-out repos instead of\nbare repos.\n\n## repos.handle(req, res)\n\nHandle incoming HTTP requests with a connect-style middleware.\n\nEverything is admin-party by default.\nCheck the credentials further up the stack using basic auth or whatevs.\n\n## repos.create(repoName, cb)\n\nCreate a new bare repository `repoName` in the instance repository directory.\n\nOptionally get a callback `cb(err)` to be notified when the repository was\ncreated.\n\n## repos.mkdir(dir, cb)\n\nCreate a subdirectory `dir` in the repo dir with an errback `cb(err)`.\n\n## repos.list(cb) \n\nGet a list of all the repositories in the callback `cb(err, repos)`.\n\n## repos.exists(repoName, cb)\n\nFind out whether `repoName` exists in the callback `cb(exists)`.\n\n# events\n\n## repos.on('push', function (push) { ... }\n\nEmitted when somebody does a `git push` to the repo.\n\nExactly one listener must call `push.accept()` or `push.reject()`. If there are\nno listeners, `push.accept()` is called automatically.\n\n`push` is an http duplex object (see below) with these extra properties:\n\n* push.repo\n* push.commit\n* push.branch\n\n## repos.on('tag', function (tag) { ... }\n\nEmitted when somebody does a `git push --tags` to the repo.\n\nExactly one listener must call `tag.accept()` or `tag.reject()`. If there are\nno listeners, `tag.accept()` is called automatically.\n\n`tag` is an http duplex object (see below) with these extra properties:\n\n* tag.repo\n* tag.commit\n* tag.version\n\n## repos.on('fetch', function (fetch) { ... }\n\nEmitted when somebody does a `git fetch` to the repo (which happens whenever you\ndo a `git pull` or a `git clone`).\n\nExactly one listener must call `fetch.accept()` or `fetch.reject()`. If there are\nno listeners, `fetch.accept()` is called automatically.\n\n`fetch` is an http duplex objects (see below) with these extra properties:\n\n* fetch.repo\n* fetch.commit\n\n## repos.on('info', function (info) { ... }\n\nEmitted when the repo is queried for info before doing other commands.\n\nExactly one listener must call `info.accept()` or `info.reject()`. If there are\nno listeners, `info.accept()` is called automatically.\n\n`info` is an http duplex object (see below) with these extra properties:\n\n* info.repo\n\n## repos.on('head', function (head) { ... }\n\nEmitted when the repo is queried for HEAD before doing other commands.\n\nExactly one listener must call `head.accept()` or `head.reject()`. If there are\nno listeners, `head.accept()` is called automatically.\n\n`head` is an http duplex object (see below) with these extra properties:\n\n* head.repo\n\n# http duplex objects\n\nThe arguments to each of the events `'push'`, `'fetch'`, `'info'`, and `'head'`\nare [http duplex](http://github.com/substack/http-duplex) that act as both http\nserver request and http server response objects so you can pipe to and from them.\n\nFor every event if there are no listeners `dup.accept()` will be called\nautomatically.\n\n## dup.accept()\n\nAccept the pending request.\n\n## dup.reject()\n\nReject the pending request.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install pushover\n```\n\n# license\n\nMIT\n\n# kudos\n\nReading through\n[grack](https://github.com/schacon/grack/blob/master/lib/git_http.rb)\nwas super handy.\n","created":"2012-12-11T16:20:57.605Z","modified":"2016-04-08T21:38:38.911Z","lastPublisher":{"name":"fractal","email":"contact@wearefractal.com"},"owners":[{"name":"contra","email":"contra@wearefractal.com"},{"name":"fractal","email":"contact@wearefractal.com"}],"other":{"_attachments":{},"_id":"pushover-f","_npmUser":{"name":"fractal","email":"contact@wearefractal.com"},"_npmVersion":"1.1.68","_rev":"1-d31cdcbef0e8484ef1635b481620eb63","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"directories":{"lib":".","example":"example","test":"test"},"dist-tags":{"latest":"1.1.2"},"dist":{"shasum":"3718d3b64562c3833196868b11497bb39becff03","tarball":"http://registry.npmjs.org/pushover-f/-/pushover-f-1.1.2.tgz"},"maintainers":[{"name":"contra","email":"contra@wearefractal.com"},{"name":"fractal","email":"contact@wearefractal.com"}],"readmeFilename":"README.markdown","time":{"modified":"2016-04-08T21:38:38.911Z","created":"2012-12-11T16:20:57.605Z","1.1.0":"2012-12-11T16:21:00.907Z","1.1.1":"2012-12-12T17:21:18.604Z","1.1.2":"2012-12-13T17:43:59.110Z"}}}