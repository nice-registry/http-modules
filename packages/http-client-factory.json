{"name":"http-client-factory","version":"0.3.1","description":"Fluent and extensible HTTP[S] client for RESTful calls","main":"lib/httpClientFactory.js","dependencies":{"bluebird":"^3.1.1"},"devDependencies":{"jasmine":"^2.4.1","underscore":"^1.8.3","proxyquire":"^1.7.3"},"scripts":{"test":"jasmine"},"repository":"https://github.com/mdickin/httpClientFactory","keywords":["http","client","rest","json"],"license":"MIT","homepage":"https://github.com/mdickin/httpClientFactory#readme","gitHead":"cd1f3ee170bca83b72fced6b01efa6e2a223fc0a","versions":[{"number":"0.1.0","date":"2016-01-20T03:12:35.680Z"},{"number":"0.2.0","date":"2016-01-26T03:50:41.646Z"},{"number":"0.3.0","date":"2016-02-14T04:04:14.291Z"},{"number":"0.3.1","date":"2016-05-20T00:27:19.888Z"}],"readme":"# Http Client Factory\r\n\r\nThis library is aimed at improving the development experience for REST-like calls in\r\nNodeJS. It builds off the Node `http` library. It's inspired by the \r\nSystem.Net.Http.HttpClientFactory library in .NET. \r\n\r\n##Basic Usage\r\n\r\n```javascript\r\nvar HttpClientFactory = require(\"http-client-factory\")\r\n\r\n//Issues a GET request to http://www.tempuri.org/my/endpoint?some=value&search=text\r\nvar promise = HttpClientFactory.getClient()\r\n    .get(\"http://www.tempuri.org/my/endpoint\", { some: \"value\", search: \"text\"})\r\n  \r\npromise.then(function (response) {\r\n    //Do something with the response\r\n})\r\n.catch(function (error) {\r\n    //Do something with the error\r\n})\r\n```\r\n\r\n## API\r\n`HttpClientFactory`\r\n- `.getClient(AgentOptions)`\r\n - Returns `HttpClient`\r\n - `AgentOptions` is from `http` library\r\n - If `AgentOptions` is null, default settings are used (recommended)\r\n\r\nHttpClient\r\n- `.addHeader(headerKey, headerValue)`\r\n - Adds a header to the request with the given key and value\r\n- `.setAuthorization(scheme, parameter)`\r\n - Sets the Authorization header to `scheme parameter`\r\n - Returns `HttpClient`\r\n- `.setBasicAuth(username, password)`\r\n - Sets the Authorization header to use basic authentication with the given credentials\r\n - Returns `HttpClient`\r\n- `.addHandler(HttpClientHandler)`\r\n - Adds an HttpClientHandler to run on requests and responses\r\n - Request handlers are run in the order they're added. The first handler added will \r\nrun first\r\n - Response handlers are run in the reverse order. The _last_ handler added will run first\r\n - Returns `HttpClient`\r\n- `.get(url, RequestBody)`\r\n - Returns `Promise`\r\n- `.post(url, RequestBody)`\r\n - Returns `Promise`\r\n- `.put(url, RequestBody)`\r\n - Returns `Promise`\r\n- `.delete(url, RequestBody)`\r\n - Returns `Promise`\r\n- `.send(HttpRequest, RequestBody)`\r\n - Sends a [raw request](https://nodejs.org/api/http.html#http_http_request_options_callback)\r\n - Returns `Promise`\r\n\r\nHttpClientHandler\r\n- `onRequest: function (HttpRequest, body)`\r\n - Reads or modifies request and/or body as needed\r\n - Leave undefined if not needed\r\n- `onResponse: function (HttpResponse)`\r\n - Reads or modifies response if needed\r\n - Leave undefined if not needed\r\n \r\nRequestBody\r\n- Normal JSON object\r\n- For `.get()`, `.delete()`, `.head()`, and `.options()` requests, this will be converted into query string parameters\r\n- For `.put()`, `.post()`, and `.patch()` requests, this will be sent as JSON content\r\n\r\n\r\n##Reading the Response\r\nThe response is a typical HTTP response as defined by the `http` library,\r\nwith the addition of a `body` property which contains the response content\r\n(in string form).\r\n\r\n\r\n##Handlers\r\n\r\n### Setting authorization headers\r\n```javascript\r\nvar handler = {\r\n    onRequest: function (req) {\r\n        req.headers.authorization = \"sampleAuthScheme authValue\";\r\n    }   \r\n}\r\n\r\n//Issues a POST request to the URL \r\n//with the authorization header set to \"sampleAuthScheme authValue\"\r\n//and a JSON payload  of { \"postdata\": \"goes here\" }\r\nHttpClientFactory.getClient()\r\n    .addHandler(handler)\r\n    .post(\"http://www.tempuri.org/my/endpoint\", { postdata: \"goes here\" })\r\n```\r\n\r\nAs of v0.2.0, this can be accomplished by calling \r\n`client.setAuthorization(\"sampleAuthScheme\", \"authValue\")`\r\n\r\n### Logging request/response data\r\n```javascript\r\nvar traceLogHandler = {\r\n    onRequest: function (req, body) {\r\n        var logger = require(\"myTraceLogger\")\r\n        logger.logRequest(req.href, req.headers, body)\r\n    },\r\n    onResponse: function (response) {\r\n        var logger = require(\"myTraceLogger\")\r\n        logger.logResponse(response.headers, response.body)\r\n    } \r\n}\r\n\r\n//Logs both request and response data to myTraceLogger\r\nHttpClientFactory.getClient()\r\n    .addHandler(traceLogHandler)\r\n    .post(\"http://www.tempuri.org/my/endpoint\", { postdata: \"goes here\" })\r\n```\r\n\r\n##Promises\r\n\r\n`httpClientFactory` uses the [bluebird](http://www.npmjs.org/package/bluebird) library for promises","created":"2016-01-20T03:12:35.680Z","modified":"2016-05-20T00:27:19.888Z","lastPublisher":{"name":"mdickin","email":"matt@mdickin.com"},"owners":[{"name":"mdickin","email":"matt@mdickin.com"}],"other":{"_attachments":{},"_from":".","_id":"http-client-factory","_nodeVersion":"4.4.3","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/http-client-factory-0.3.1.tgz_1463704036580_0.1625848647672683"},"_npmUser":{"name":"mdickin","email":"matt@mdickin.com"},"_npmVersion":"3.8.5","_rev":"1-9602f7a435f4fd94b58a8cc37cb8dec1","_shasum":"0c76cb0d742dd0cca85300f496be0da54c3d5bca","author":{"name":"Matt Dickinson"},"bugs":{"url":"https://github.com/mdickin/httpClientFactory/issues"},"directories":{},"dist-tags":{"latest":"0.3.1"},"dist":{"shasum":"0c76cb0d742dd0cca85300f496be0da54c3d5bca","tarball":"http://registry.npmjs.org/http-client-factory/-/http-client-factory-0.3.1.tgz"},"maintainers":[{"name":"mdickin","email":"matt@mdickin.com"}],"readmeFilename":"README.md","time":{"modified":"2016-05-20T00:27:19.888Z","created":"2016-01-20T03:12:35.680Z","0.1.0":"2016-01-20T03:12:35.680Z","0.2.0":"2016-01-26T03:50:41.646Z","0.3.0":"2016-02-14T04:04:14.291Z","0.3.1":"2016-05-20T00:27:19.888Z"}}}