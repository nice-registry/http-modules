{"name":"rodo","version":"1.0.0","description":"Http mocking service","main":"src/index.js","scripts":{"test":"npm run lint && mocha","lint":"eslint src test","lint:fix":"eslint src test --fix","postversion":"git push && git push --tags && npm publish"},"keywords":["rodo","http","assert","mock","mocking","service","api"],"license":"MIT","devDependencies":{"chai":"^3.5.0","eslint":"^3.5.0","eslint-config-airbnb":"^11.1.0","eslint-plugin-import":"^1.15.0","eslint-plugin-jsx-a11y":"^2.2.2","eslint-plugin-react":"^6.3.0","mocha":"^3.0.2","supertest":"^3.0.0"},"repository":"https://github.com/nescalante/rodo","homepage":"https://github.com/nescalante/rodo#readme","gitHead":"df606a4369913faaa897658169d1537d57bb0fb2","versions":[{"number":"0.1.0","date":"2016-09-20T21:56:26.958Z"},{"number":"0.2.0","date":"2016-09-26T15:23:03.116Z"},{"number":"0.3.0","date":"2016-09-26T19:45:55.329Z"},{"number":"0.3.1","date":"2016-09-26T19:47:25.128Z"},{"number":"0.4.0","date":"2016-09-26T20:14:02.758Z"},{"number":"0.4.1","date":"2016-10-12T14:41:46.320Z"},{"number":"0.5.0","date":"2016-10-12T21:07:06.907Z"},{"number":"0.5.2","date":"2017-01-05T20:26:52.504Z"},{"number":"0.5.3","date":"2017-01-20T21:23:22.312Z"},{"number":"0.6.0","date":"2017-01-20T21:38:05.195Z"},{"number":"0.7.0","date":"2017-01-30T13:06:37.808Z"},{"number":"0.7.1","date":"2017-01-30T13:12:41.675Z"},{"number":"1.0.0","date":"2017-02-07T13:36:01.373Z"}],"readme":"# Rodo\n\n![Rodo](http://i.ebayimg.com/images/g/PFEAAOSwmrlUsqos/s-l300.jpg)\n\n> Http mocking service\n\n**Rodo** can be used to create a real mocked API with an specific port and host.\n\nThe main difference with other Http mocking libraries like [`nock`](https://github.com/node-nock/nock) is that **Rodo** creates a real Http server instead of overriding the behavior of Node Http objects.\n\n## Install\n\n```\nnpm install rodo\n```\n\n## Sample usage\n\nWriting a new mocked endpoint can be as easy as:\n\n```js\n// Mocking API\nconst assert = require('assert');\nconst rodo = require('rodo');\nconst mockServer = rodo(8000);\nconst myCall = mockServer\n  .get('/foo')\n  .reply({ bar: 'baz' })\n  .withHeader('content-type', 'application/json');\n\n// Assertions  \nfetch('http://localhost:8000/foo')\n  .then((res) => res.json())\n  .then((res) => {\n    assert.equal(res.bar, 'baz');\n    assert.equal(myCall.calls.length, 1);\n  });\n```\n\n## Getting started\n\n### The request\n\nTo get started, you first need to instantiate the **Rodo** server doing the following:\n\n```js\nconst rodo = require('rodo');\nconst mockServer = rodo(8000);\n```\n\nLets start building the filtering process for a specific request:\n\n```js\nvar myRequest = mockServer.request()\n  .havingMethod('GET')\n  .havingPath('/foo');\n```\n\nYou can do the same by doing:\n\n```js\nvar myRequest = mockServer.get('/foo');\n```\n\nNice! Now **Rodo** will intercept every request to `GET http://localhost:8000/foo`.\n\n### The response\n\nNow you want **Rodo** to return a specific response to that request:\n\n```js\nvar myResponse = myRequest.reply()\n  .withHeader('content-type', 'application/json')\n  .withStatus(200)\n  .withBody({ bar: 'baz' });\n```\n\nYou can do the same with:\n\n```js\nvar myResponse = myRequest.reply({ bar: 'baz '})\n  .withHeader('content-type', 'application/json');\n```\n\nGood! you can now check for the requests that were resolved with that response:\n\n```js\nmyResponse.calls; // [...calls]\n```\n\nYou are all set, now **Rodo** will start intercepting all that requests and will return the response that you specify.\n\n### If you now want to clear the results and start again\n\n```js\nmockServer.clean();\n```\n\n### Want to kill the server?\n\n```js\nmockServer.close();\n```\n\n## API\n\n### Request methods\n\nThe filtering process for a specific request:\n\n#### `.havingMethod(method)`\n\nSpecifies the Http method, should be one of GET, POST, PUT, DELETE, PATCH.\n\n#### `.havingPath(path)`\n\nWill intercept a specific path.\n\n#### `.havingQuery(query)`\n\nWill filter by query object params.\n\n#### `.havingHeader(name, value)`\n\nWill filter by header, only requests with the specified header and value will be intercepted.\n\n### Response methods\n\nThe response for a specific request:\n\n#### `.withHeader(name, value)`\n\nWill return specific header with the response.\n\n#### `.withBody(body)`\n\nWill return the specified body with the response.\n\n#### `.withStatus(status)`\n\nWill change the status code to the one specified.\n\n#### `.withDelay(ms)`\n\nWill delay the response.\n\n### Other utilities\n\n#### `.use((req, res) => { })`\n\nWill add a middleware to the server.\n\nExample:\n\n```js\nmockServer.use(morgan('dev'));\n```\n\n## License\n\nMIT\n","created":"2016-09-20T21:56:26.958Z","modified":"2017-02-07T13:36:01.373Z","lastPublisher":{"name":"nescalante","email":"nlante@gmail.com"},"owners":[{"name":"nescalante","email":"nlante@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"rodo","_nodeVersion":"6.9.5","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/rodo-1.0.0.tgz_1486474559461_0.9786536053288728"},"_npmUser":{"name":"nescalante","email":"nlante@gmail.com"},"_npmVersion":"3.10.10","_rev":"7-9edd001f271b6e3fbce5845ae242b621","_shasum":"48a56e610118b262a07cb880336577bbfdcfb190","author":{"name":"Nicolas Escalante","email":"nlante@gmail.com"},"bugs":{"url":"https://github.com/nescalante/rodo/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"48a56e610118b262a07cb880336577bbfdcfb190","tarball":"https://registry.npmjs.org/rodo/-/rodo-1.0.0.tgz"},"maintainers":[{"name":"nescalante","email":"nlante@gmail.com"}],"readmeFilename":"readme.md","time":{"modified":"2017-02-07T13:36:01.373Z","created":"2016-09-20T21:56:26.958Z","0.1.0":"2016-09-20T21:56:26.958Z","0.2.0":"2016-09-26T15:23:03.116Z","0.3.0":"2016-09-26T19:45:55.329Z","0.3.1":"2016-09-26T19:47:25.128Z","0.4.0":"2016-09-26T20:14:02.758Z","0.4.1":"2016-10-12T14:41:46.320Z","0.5.0":"2016-10-12T21:07:06.907Z","0.5.2":"2017-01-05T20:26:52.504Z","0.5.3":"2017-01-20T21:23:22.312Z","0.6.0":"2017-01-20T21:38:05.195Z","0.7.0":"2017-01-30T13:06:37.808Z","0.7.1":"2017-01-30T13:12:41.675Z","1.0.0":"2017-02-07T13:36:01.373Z"}}}