{"name":"fun-http","version":"0.2.1","description":"Functional HTTP server for FUN!","keywords":["middleware","framework","application","http","app","web"],"license":"MIT","repository":"https://github.com/d6u/fun-http","homepage":"https://github.com/d6u/fun-http#readme","main":"lib/index.js","typings":"lib/index.d.ts","bin":{"fun-http":"./lib/bin/fun-http.js"},"files":["lib"],"devDependencies":{"onchange":"2.5.0","supertest":"1.2.0","tap-spec":"4.1.1","tape":"4.5.1","tslint":"3.10.2","typescript":"1.8.10","typings":"1.0.4"},"dependencies":{"babel-plugin-syntax-async-functions":"6.8.0","babel-plugin-transform-async-to-module-method":"6.8.0","babel-plugin-transform-es2015-modules-commonjs":"6.8.0","babel-register":"6.9.0","bluebird":"3.4.0","commander":"2.9.0","lodash":"4.13.1"},"scripts":{"clean":"rm -rv lib","build":"tsc","watch:build":"npm run build -- -w","test":"node test | tap-spec","watch:test":"npm test -s; onchange 'lib/*.js' 'test/*.js' -- npm test -s","preversion":"npm run clean -s; npm run build","postversion":"git push && git push --tags"},"gitHead":"1999d5fc64348e7603ae597d1918585a1d34630d","versions":[{"number":"0.0.0","date":"2016-06-07T21:34:46.461Z"},{"number":"0.0.1","date":"2016-06-07T21:35:01.696Z"},{"number":"0.0.3","date":"2016-06-08T21:49:59.307Z"},{"number":"0.0.4","date":"2016-06-09T00:47:55.230Z"},{"number":"0.0.5","date":"2016-06-10T00:26:34.222Z"},{"number":"0.1.0","date":"2016-06-10T18:21:27.074Z"},{"number":"0.2.0","date":"2016-06-12T22:24:35.048Z"},{"number":"0.2.1","date":"2016-06-20T20:26:33.752Z"}],"readme":"# :monkey_face: Fun(ctional) Http\n\n[![npm version](https://badge.fury.io/js/fun-http.svg)](https://badge.fury.io/js/fun-http)\n[![CircleCI](https://circleci.com/gh/d6u/fun-http/tree/master.svg?style=svg)](https://circleci.com/gh/d6u/fun-http/tree/master)\n\n_Possibly the easiest way to start a HTTP server in Node.js._\n\nHTTP server should be as stateless as possible like functions. We should write request handlers in pure funtion. Let's treat return value as responses and use [promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) to wrap async operations.\n\n## Usage\n\n**fun-http** supports Node >= 4.\n\n### As a CLI\n\n1. Install as global package\n\n    ```sh\n    $ npm install -g fun-http\n    ```\n\n2. Define the server, only need to export a function.\n\n    ```js\n    // server.js\n    export default async function (req) {\n      return 'Hello, World!';\n    }\n    ```\n\n3. Fire the server, and tada~ :tada:\n\n    ```sh\n    $ fun-http server.js\n    $ curl -i localhost:3000\n\n    HTTP/1.1 200 OK\n    Date: Sun, 12 Jun 2016 22:12:41 GMT\n    Connection: keep-alive\n    Content-Length: 13\n\n    Hello, World!\n    ```\n\n### As a module\n\n```sh\nnpm install --save fun-http\n```\n\n```js\nconst FunHttp = require('fun-http').FunHttp;\nconst app = new FunHttp();\n\napp.use(function (req) {\n  return 'Hello, World!';\n});\n\napp.listen(3000, () => {\n  console.log('server started');\n});\n```\n\nVisit `localhost:3000` will display \"Hello, World!\".\n\nYou can also return promise in request handlers, the resolved value will become the body of response.\n\n```js\napp.use(function (req) {\n  return Promise.resolve('Hello, World!');\n});\n```\n\nIf returned value (or promise resolved value) is not a number or string, it will be parsed into JSON string using `JSON.stringify`.\n\n## Customize Response\n\n**fun-http** will look for special structure on values returned from request handler to customize response's status and headers.\n\n```js\napp.use(function () {\n  return {\n    status: 404,\n    json: {\n      reason: 'not found'\n    }\n  };\n});\n```\n\n```\n$ curl -i localhost:3000\n\nHTTP/1.1 404 Not Found\nDate: Fri, 10 Jun 2016 00:14:34 GMT\nConnection: keep-alive\nContent-Length: 22\n\n{\"reason\":\"not found\"}\n```\n\nFor custom headers:\n\n```js\napp.use(function (req) {\n  return {\n    headers: {\n      'x-really-awesome': 'yes!'\n    }\n  };\n});\n```\n\n```\n$ curl -i localhost:3000\n\nHTTP/1.1 200 OK\nx-really-awesome: yes!\nDate: Fri, 10 Jun 2016 00:14:02 GMT\nConnection: keep-alive\nContent-Length: 0\n```\n\nYou can also force **fun-http** to return text:\n\n```js\napp.use(function (req) {\n  return {\n    text: 'I just want to tell you...'\n  };\n});\n```\n\n## Middleware\n\n**fun-http** supports middleware similar to Koa. Calling `next` will invoke next middleware and return a promise wrapping the return value of that middleware.\n\n```js\napp.use(function (req, next) {\n  return next()\n    .then(name => {\n      return {hello: name}; // name === 'World'\n    });\n});\n\napp.use(function () {\n  return 'World';\n});\n```\n\nPaire with [co](https://www.npmjs.com/package/co), you can make everything cleaner.\n\n```js\nconst co = require('co');\n\napp.use(co.wrap(function *(req, next) {\n  const name = yield next();\n  return {hello: name};\n}));\n\napp.use(function () {\n  return 'World';\n});\n```\n\nOr you can even use it with async/await functions:\n\n```js\napp.use(async function (req, next) {\n  const name = await next();\n  return {hello: name};\n});\n\napp.use(function () {\n  return 'World';\n});\n```\n\n_Of cause, Node.js doesn't currently support async/await functions, you will need to use transpiler like Babel to transpile the source._\n\n## Examples\n\nCheck out [examples](./examples).\n\n## TypeScript\n\nDid I tell you **fun-http** is written using [TypeScript](http://www.typescriptlang.org/)?\n","created":"2016-06-07T21:34:46.461Z","modified":"2016-06-20T20:26:33.752Z","lastPublisher":{"name":"daiweilu","email":"daiweilu123@gmail.com"},"owners":[{"name":"daiweilu","email":"daiweilu123@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"fun-http","_nodeVersion":"6.2.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/fun-http-0.2.1.tgz_1466454391317_0.5881220330484211"},"_npmUser":{"name":"daiweilu","email":"daiweilu123@gmail.com"},"_npmVersion":"3.9.5","_rev":"1-df5bc2c5a7d9c49aa24d80640ec3ffa7","_shasum":"ef5ab577745329a836ea82a32c9f7118363ca989","author":{"name":"Daiwei Lu","email":"daiweilu123@gmail.com","url":"http://daiwei.lu/"},"bugs":{"url":"https://github.com/d6u/fun-http/issues"},"directories":{},"dist-tags":{"latest":"0.2.1"},"dist":{"shasum":"ef5ab577745329a836ea82a32c9f7118363ca989","tarball":"http://registry.npmjs.org/fun-http/-/fun-http-0.2.1.tgz"},"maintainers":[{"name":"daiweilu","email":"daiweilu123@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-06-20T20:26:33.752Z","created":"2016-06-07T21:34:46.461Z","0.0.0":"2016-06-07T21:34:46.461Z","0.0.1":"2016-06-07T21:35:01.696Z","0.0.3":"2016-06-08T21:49:59.307Z","0.0.4":"2016-06-09T00:47:55.230Z","0.0.5":"2016-06-10T00:26:34.222Z","0.1.0":"2016-06-10T18:21:27.074Z","0.2.0":"2016-06-12T22:24:35.048Z","0.2.1":"2016-06-20T20:26:33.752Z"}}}