{"name":"httphooks","description":"A webhook implementation which extends the concept to HTTP REST API's","version":"0.0.1","keywords":["http","hook","web","webhook"],"dependencies":{"querystring":">= 0.2.0","async":">= 0.2.9","clone":">= 0.1.11","rx":">= 2.2.7","collections":">= 0.2.2","node-uuid":">= 1.4.1","route-pattern":">= 0.0.6","debug":">= 0.7.3","request":">= 2.0.0","socket.io-client":">= 0.9.16","sockjs-client":">= 0.1.3"},"devDependencies":{"mocha":"*","should":"*","jsdox":"*","socket.io":">= 0.9.16","sockjs":">= 0.3.8"},"scripts":{"test":"node tests/runTests.js","doc":"jsdox lib/ --output doc/api/"},"main":"index.js","engines":{"node":">= 0.8.0"},"licenses":[{"type":"Apache 2.0","url":"http://www.apache.org/licenses/LICENSE-2.0"}],"versions":[{"number":"0.0.1","date":"2014-03-26T19:08:57.133Z"}],"readme":"# httphooks\r\n\r\nIn this world of internet of things, we have realized that while there are multiple frameworks, protocols and standards that allow you to intercommunicate between different devices none is more prevalent than the actual ones exposed by and defined through the web. For this reason, this module has the intent of standardizing using HTTP, REST and web sockets with the intent to facilitate connecting logic and data while maintaining its distribution and facilities.\r\n\r\n`httphooks` is a [node](http://nodejs.org) HTTP pub-sub architecture that allows you to associate an incoming HTTP request to a single/multiple dependent/independent user defined operations. These operations work in a loosely coupled manner such that together, with a well defined [execution model](./doc/design.md), each collaborate in order to deliver a result. `httphooks` extends the webhooks model to the primary REST HTTP verbs and formalizes request/response, inter-communication and signaling using HTTP as the communication standard.\r\n\r\nWhile there are existing and similar modules (a.k.a middleware), we have a pretty interesting architecture, model and set of features that are not present in others and which allow you to streamline your development. Don't be shy and take a look at our documentation, you just might be pleasantly surprised...\r\n\r\n## Installation\r\n\r\n```\r\nnpm install httphooks\r\n```\r\n\r\n## Tests\r\n##### Running the tests\r\nThe test suite can be invoked from the command line like this:  \r\n> <code>npm test</code>  \r\n\r\n##### Some details about the tests\r\nIn order to successfully run the tests three environment variables are used for setting the port numbers: <code>PORT</code>, <code>PORT1</code> and <code>PORT2</code>. \r\n\r\n* <code>PORT</code> and <code>PORT1</code> default to <code>8080</code>\r\n* <code>PORT2</code> defaults to <code>8081</code>\r\n\r\nFor now, if you want to use different port numbers, you'll have to modify the values in the <code>./tests/runTests.js</code> file. When time permits we'll change this so it can be done in some other manner (i.e. via a JSON file, command-line options, etc.).\r\n\r\n\r\n## Usage\r\n\r\nWith `httphooks` you are able to associate logical units for execution with url paths with a given HTTP verb.\r\n\r\n```js\r\nvar http = require('http');\r\nvar HttpHooks = new require('httphooks');\r\nvar hooks = new HttpHooks();\r\n\r\n// Respond to any incoming requests with a hello world message which includes the url path\r\nhooks.get('/*', function (hookContext, done) {\r\n    var request = hookContext.request;\r\n    var response = hookContext.response;\r\n    hookContext.setResponse(\r\n        200,\r\n        { 'Content-Type': 'text/html' },\r\n        'Welcome to \\'' + request.url.path + '\\'... Hello World! :)');\r\n    done();\r\n});\r\n\r\nvar server = http.createServer(function (request, response) {\r\n    hooks.dispatch({request: request, response: response});\r\n});\r\n\r\nserver.listen(8080);\r\n```\r\n\r\n## Features\r\n* Integrates and standardizes on default primitives defined by the HTTP protocol.\r\n* Interfaces with node.js http server and both [sockjs](https://github.com/sockjs/) and  [socket.io](http://socket.io).\r\n* By default, supports the four main HTTP verbs: GET, PUT, POST and DELETE.\r\n* Leverages [route-pattern](https://github.com/bjoerge/route-pattern) to define the resource locations to hook on.\r\n* Well defined execution and inter-communication model for logical units.\r\n* Clean separation between listener and responder for compute or I/O logical units.\r\n* Inline, file (e.g. 'file:') or remote (e.g. 'http:', 'https:' or 'ws:') hook definition of logical execution units.\r\n* Default responder support allowing any request to be serviced when no matching hook is found.\r\n* Handling of non-matching requests to hooks (when no default responder is set).\r\n* Supports detection and collapsing of multiple responses into a single multipart response (by default).\r\n* Large amount of documentation including design, common use patterns, code examples and API references.\r\n* Large test suite exercising features.\r\n\r\n## Documentation\r\n* [General design](./doc/design.md)\r\n* [Common hook usage patterns](./doc/patterns.md)\r\n* [API reference](./doc/api.md)\r\n* [Examples](./example)\r\n","created":"2014-03-26T19:08:57.133Z","modified":"2014-03-26T19:08:57.133Z","lastPublisher":{"name":"langholz","email":"langholz@gmail.com"},"owners":[{"name":"langholz","email":"langholz@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"httphooks","_npmUser":{"name":"langholz","email":"langholz@gmail.com"},"_npmVersion":"1.4.3","_rev":"1-9fbaaac8dc371ffa15dcaa01d7dc191c","author":{"name":"Microsoft Corporation"},"contributors":[{"name":"Langholz, Elmar","email":"elan@microsoft.com"}],"directories":{},"dist-tags":{"latest":"0.0.1"},"dist":{"shasum":"953da8fbb902f1c6c289949427984e1c4b73b2cc","tarball":"http://registry.npmjs.org/httphooks/-/httphooks-0.0.1.tgz"},"maintainers":[{"name":"langholz","email":"langholz@gmail.com"}],"readmeFilename":"readme.md","time":{"modified":"2014-03-26T19:08:57.133Z","created":"2014-03-26T19:08:57.133Z","0.0.1":"2014-03-26T19:08:57.133Z"}}}