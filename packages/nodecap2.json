{"name":"nodecap2","version":"2.2.2","description":"ICAP server framework for node.js - create custom HTTP proxy filters for Squid, etc.","main":"index.js","dependencies":{"eventemitter3":"^1.2.0","winston":"^2.2.0","mmmagic":"^0.4.0"},"optionalDependencies":{"mmmagic":"^0.4.0"},"devDependencies":{"tap":"^6.3.2"},"scripts":{"tap":"tap","test":"tap ./test/*_spec.js"},"repository":"https://github.com/horpto/nodecap2","keywords":["nodejs","icap","http","proxy","filter","squid"],"license":"MIT","gitHead":"0b0399acf87a1058ac1589441513ea21e0033874","homepage":"https://github.com/horpto/nodecap2#readme","versions":[{"number":"0.2.0","date":"2015-11-11T21:08:06.190Z"},{"number":"0.2.1","date":"2015-11-13T07:23:22.872Z"},{"number":"0.2.10","date":"2015-11-26T10:21:46.892Z"},{"number":"0.2.11","date":"2016-02-04T10:47:19.021Z"},{"number":"2.0.0","date":"2016-02-04T10:52:08.431Z"},{"number":"2.0.1","date":"2016-05-05T18:05:48.312Z"},{"number":"2.1.0","date":"2016-05-12T17:46:33.124Z"},{"number":"2.2.0","date":"2016-08-16T17:17:20.390Z"},{"number":"2.2.1","date":"2016-09-16T11:03:32.044Z"},{"number":"2.2.2","date":"2016-11-09T15:38:40.072Z"}],"readme":"nodecap2\n=======\n\n[![Join the chat at https://gitter.im/horpto/nodecap2](https://badges.gitter.im/horpto/nodecap2.svg)](https://gitter.im/horpto/nodecap2?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nIt is fork of [nodecap](https://www.npmjs.com/package/nodecap) with some fixes and performance improvements.\n\nICAP server framework for node.js - create custom HTTP proxy filters for Squid, etc. **nodecap** implements the [ICAP protocol](http://www.icap-forum.org/documents/specification/rfc3507.txt).\n\n**WARN** : version 2.2.0 has a bit different behaviour as previous version, so check github repo and your server before upgrading. It's last version that may work with node v0.10.\n\n\n## Use Case\n[Squid](http://www.squid-cache.org/) and other HTTP proxy servers typically provide only basic levels of filtering. **nodecap** implements the ICAP protocol, allowing for dynamic, per-request filtering and modification of requests and responses.\n\nExamples:\n\n* Whitelist some domains (eg http://example.com) and then dynamically graylist domains that appear frequently in the response HTML (eg example.com's asset CDN, http://cdn.example.net).\n* Rewrite response content\n* Verify MIME types of requests/responses\n* Perform request-time validation against other services (anything you can do in node)\n\n\n## Usage\n\nSee `examples/example.js` for a full example.\n\nThe basics:\n\n\t# server.js\n\tvar ICAPServer = require('nodecap').ICAPServer;\n\n\t//  run the server\n\tvar server = new ICAPServer({\n\t  debug: false,\n\t\t// 4096 by default - size of chunks that will send to Squid\n\t\t// 0 - not slice big chunks by chunkSize\n\t\tchunkSize: 0\n\t});\n\tconsole.log('Starting ICAP server...');\n\tserver.listen(function(port) {\n\t  console.log('ICAP server listening on port ' + port);\n\t});\n\n\n## Configuration & Getting Started\n\nConsult your proxy's documentation to understand how to configure the proxy to talk to your ICAP server. It is recommended that you configure requests and responses to be sent to different paths (resource endpoints) on your ICAP server.\n\nThe best documentation is the example and tests, which demonstrate example ICAP requests, ICAP handling, and ICAP responses.\n\n## API Configuration\n\n### `server.options(path, next)`\nAllows configuration of a given ICAP endpoint. To set the options for endpoint `/squid/configured/request-path`, you could use:\n\n\t# server.js\n\tserver.options('/squid/configured/request-path', function(icapReq, icapRes, next) {\n\t  icapRes.setIcapStatusCode(200);\n\t  icapRes.setIcapHeaders({\n\t    'Methods': 'REQMOD',\n\t    'Preview': '128'\n\t  });\n\t  icapRes.writeHeaders(false);\n\t  icapRes.end();\n\t});\n\n## API Routing\n\n**nodecap** presents an expressjs-style API where middleware can be declared and matched to requests. Instead of request URI/method combinations, the unit of matching is domains through the `DomainList` class, which implements an efficient matcher for squid3 whitelist/blacklist syntax. Middleware is attached to handle requests to / responses from lists of domains:\n\n### `server.request(domainList, next)`\nAdds middleware to handle a REQMOD (HTTP request modification). The callback signature is `callback(icapRequest, icapResponse, httpRequest, httpResponse, next)`. Calling `next()` is optional and will continue to the next handler. Be sure to have a catch-all handler at the end. `domainList` can be either a DomainList instance - which allows matching request domains against a configured list - or the literal string`\"*\"` to match all requests.\n\n### `server.response(domainList, next)`\nAdds middleware to handle a RESPMOD (HTTP response modification). The `domainList` and `next` options are the same as for `server.request`.\n\n### `server.error(err, icapReq, icapRes, next)`\nAdds middleware to handle errors that occur either at the protocol level or within any options/request/response middleware.\n\n\n### License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Joseph Savona\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","created":"2015-11-11T21:08:06.190Z","modified":"2016-11-09T15:38:40.072Z","lastPublisher":{"name":"horpto","email":"__Singleton__@hackerdom.ru"},"owners":[{"name":"horpto","email":"__Singleton__@hackerdom.ru"}],"other":{"_attachments":{},"_from":".","_id":"nodecap2","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/nodecap2-2.2.2.tgz_1478705919538_0.5997144610155374"},"_npmUser":{"name":"horpto","email":"__Singleton__@hackerdom.ru"},"_npmVersion":"3.10.8","_rev":"2-37ea1158f4e66ab1c5769d0ab33c29b4","_shasum":"9f9abad942791340c4e32fda5e2b0eabf07c7622","author":{"name":"Joseph Savona","email":"joe@josephsavona.com"},"bugs":{"url":"https://github.com/horpto/nodecap2/issues"},"directories":{"example":"examples","test":"test"},"dist-tags":{"latest":"2.2.2","next":"2.0.0"},"dist":{"shasum":"9f9abad942791340c4e32fda5e2b0eabf07c7622","tarball":"http://registry.npmjs.org/nodecap2/-/nodecap2-2.2.2.tgz"},"maintainers":[{"name":"horpto","email":"__Singleton__@hackerdom.ru"}],"readmeFilename":"README.md","time":{"modified":"2016-11-09T15:38:40.072Z","created":"2015-11-11T21:08:06.190Z","0.2.0":"2015-11-11T21:08:06.190Z","0.2.1":"2015-11-13T07:23:22.872Z","0.2.10":"2015-11-26T10:21:46.892Z","0.2.11":"2016-02-04T10:47:19.021Z","2.0.0":"2016-02-04T10:52:08.431Z","2.0.1":"2016-05-05T18:05:48.312Z","2.1.0":"2016-05-12T17:46:33.124Z","2.2.0":"2016-08-16T17:17:20.390Z","2.2.1":"2016-09-16T11:03:32.044Z","2.2.2":"2016-11-09T15:38:40.072Z"}}}