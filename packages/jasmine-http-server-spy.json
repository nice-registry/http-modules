{"name":"jasmine-http-server-spy","version":"0.3.1","description":"Creates jasmine spy objects backed by a http server.","main":"lib/jasmine-http-server-spy.js","scripts":{"test":"grunt","prepublish":"npm run compile","compile":"grunt compile"},"repository":{"type":"git","url":"git+https://bitbucket.org/atlassian/jasmine-http-server-spy.git"},"keywords":["jasmine","mock-server","spy","test","integration"],"license":"Apache-2.0","devDependencies":{"grunt":"^0.4.5","grunt-cli":"^0.1.13","grunt-contrib-clean":"^0.6.0","grunt-contrib-coffee":"^0.13.0","grunt-contrib-watch":"^0.6.1","grunt-shell":"^1.1.2","jasmine":"^2.3.1","jasmine-reporters":"^2.0.7","load-grunt-tasks":"^3.2.0","request":"^2.59.0","tsd":"^0.6.5","typescript":"^1.6.2"},"dependencies":{"body-parser":"^1.13.2","debug":"^2.2.0","express":"^4.13.1","lodash":"^3.10.0","q":"^1.4.1"},"gitHead":"a367c82a2c73ee32967ffae8bba89cfece87c516","homepage":"https://bitbucket.org/atlassian/jasmine-http-server-spy#readme","versions":[{"number":"0.0.1","date":"2015-07-21T07:12:39.859Z"},{"number":"0.0.2","date":"2015-07-21T07:14:27.921Z"},{"number":"0.0.3","date":"2015-07-21T07:21:41.380Z"},{"number":"0.0.4","date":"2015-07-21T13:43:32.050Z"},{"number":"0.0.5","date":"2015-07-22T03:46:58.587Z"},{"number":"0.0.6","date":"2015-07-22T03:59:54.722Z"},{"number":"0.0.7","date":"2015-07-27T03:27:02.922Z"},{"number":"0.1.0","date":"2015-08-28T06:06:09.036Z"},{"number":"0.1.1","date":"2016-02-22T23:38:54.746Z"},{"number":"0.1.2","date":"2016-04-11T13:57:57.963Z"},{"number":"0.2.0","date":"2016-04-13T22:16:37.802Z"},{"number":"0.3.0","date":"2016-07-13T06:28:02.324Z"},{"number":"0.3.1","date":"2017-03-07T03:52:03.073Z"}],"readme":"# jasmine-http-server-spy\n\n> Creates jasmine spy objects backed by a http server. Designed to help you write integration tests where your code \nmakes real http requests to a server, where the server is controlled via the familiar jasmine spy api.\n  \n \n## Install\n\n```\n$ npm install --save jasmine-http-server-spy\n```\n\n## API\n\n### Server API by example\n\n```javascript\nvar jasmineHttpServerSpy = require('jasmine-http-server-spy');\n\ndescribe('Test', function() {\n  beforeAll(function(done) {\n    this.httpSpy = jasmineHttpServerSpy.createSpyObj('mockServer', [\n      {\n        method: 'get',\n        url: '/some-url-to-mock',\n        handlerName: 'getSomeUrlToMock'\n      }\n    ]);\n    this.httpSpy.server.start(8082, done);\n    // you can pass jasmine 'done' function as a callback, or use returned promise\n    // this.httpSpy.server.start(8082).then(done, done.fail);\n    // you can also specify the hostname to start the server on:\n    // this.httpSpy.server.start(8082, '127.0.0.1').then(done, done.fail);\n    // this is useful if you need to test multiple servers listening on the same port\n  });\n  \n  afterAll(function(done) {\n    this.httpSpy.server.stop(done)\n    // you can pass jasmine 'done' function as a callback, or use returned promise:\n    // this.httpSpy.server.stop().then(done, done.fail);\n  });\n  \n  afterEach(function() {\n    this.httpSpy.getSomeUrlToMock.calls.reset();\n  });\n  \n  it('all the things', function() {\n    // 1. Define what mock server would return\n    this.httpSpy.getSomeUrlToMock.and.returnValue({\n      statusCode: 200,\n      body: {\n        data: 10\n      }\n    });\n    \n    // 2. ... calls to main service that uses 'http://localhost:8082/some-url-to-mock'\n    \n    // 3. Assert mock server has been called as expected\n    expect(this.httpSpy.getSomeUrlToMock).toHaveBeenCalled();\n    \n    // or\n    expect(this.httpSpy.getSomeUrlToMock).toHaveBeenCalledWith(jasmine.objectContaining({\n      body: {\n        data: \"something\"\n      }\n    }));\n  });\n  \n  it('can accept promise as handler returnValue', function() {\n    var deferred = q.defer(); \n    this.httpSpy.getSomeUrlToMock.and.returnValue(deferred.promise);\n    setTimeout(function(){\n        deferred.resolve({\n          statusCode: 200,\n           body: {\n             data: 10\n           }\n        });\n    });\n  });\n});\n```\n\n### Handler's expected output\n\nHandler function result will end up in the http response mock server gives back. \nYou can define ```code```, ```body``` and ```headers``` at the moment:\n \n```coffee\nhttpSpy.getSomeUrlToMock.and.returnValue {code: 200, body: {data: []}}\n\nhttpSpy.getSomeUrlToMock.and.returnValue {code: 200, body: '<xml>...</xml>', headers: {'Content-Type' : 'application/xml'}}\n\nhttpSpy.getSomeUrlToMock.and.returnValue {code: 401, body: {message: 'Please login first'}}\n```\n\n### Handler's input\n\nWhile handlers are jasmine spy objects, you can define a callback function to make response dynamic. For example:\n\n```coffee\nhttpSpy.getAnswerForANumber.and.callFake (req) ->\n    code: 200\n    body:\n        if req.body.number is 42\n            {answer: 'The answer to the ultimate question of life, the universe and everything'}\n        else\n            {answer: \"I don't know\"}\n```\n\nYou can expect following properties in the first argument of this callback:\n \n#### body\n\nJS Object representing JSON body of a request. This object defaults to ```{}```.\n \n#### query\n\nObject containing all query parameters used. This object defaults to ```{}```.\n\n#### originalUrl\n\nRequested original URL. For example request to ```http://localhost:8082/mockService/users?something``` end up as \n```/mockService/users?something``` in ```originalUrl```\n\n#### headers\n\nObject containing all headers provided with request.\n\n#### params\n\nAn object containing properties mapped to the named route \"parameters\". \nFor example, if you have the route ```/user/:name```, then the \"name\" property is available as ```req.params.name```. \nThis object defaults to ```{}```.\n\n## Changelog\n\n### 0.3.1\n   \n`start` now accepts hostname as optional second parameter `start(8082, '127.0.0.1')`\n\n### 0.3.0\n\n`start` and `stop` function return promise now. Use of jasmine `done` callback is now optional.\n\n## Contribute\n\nFeel free to fork it here https://bitbucket.org/atlassian/jasmine-http-server-spy/fork and make a pull request. \n Issues and suggestions can be added here https://bitbucket.org/atlassian/jasmine-http-server-spy/issues\n","starsCount":1,"created":"2015-07-21T07:12:39.859Z","modified":"2017-03-07T03:52:03.073Z","lastPublisher":{"name":"amotsjonov-atlassian","email":"amotsjonov@atlassian.com"},"owners":[{"name":"amotsjonov-atlassian","email":"amotsjonov@atlassian.com"},{"name":"bsayers","email":"bsayers@atlassian.com"}],"other":{"_attachments":{},"_from":".","_id":"jasmine-http-server-spy","_nodeVersion":"6.9.4","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/jasmine-http-server-spy-0.3.1.tgz_1488858720894_0.07134319213218987"},"_npmUser":{"name":"amotsjonov-atlassian","email":"amotsjonov@atlassian.com"},"_npmVersion":"3.10.10","_rev":"2-dea299d8910e167939e136aa41c6108f","_shasum":"e2e3de13a52a606cca11e07e8803c844638ee692","author":{"name":"Aleksandr Motsjonov","email":"amotsjonov@atlassian.com"},"bugs":{"url":"https://bitbucket.org/atlassian/jasmine-http-server-spy/issues"},"directories":{},"dist-tags":{"latest":"0.3.1"},"dist":{"shasum":"e2e3de13a52a606cca11e07e8803c844638ee692","tarball":"https://registry.npmjs.org/jasmine-http-server-spy/-/jasmine-http-server-spy-0.3.1.tgz"},"maintainers":[{"name":"amotsjonov-atlassian","email":"amotsjonov@atlassian.com"},{"name":"bsayers","email":"bsayers@atlassian.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-07T03:52:03.073Z","created":"2015-07-21T07:12:39.859Z","0.0.1":"2015-07-21T07:12:39.859Z","0.0.2":"2015-07-21T07:14:27.921Z","0.0.3":"2015-07-21T07:21:41.380Z","0.0.4":"2015-07-21T13:43:32.050Z","0.0.5":"2015-07-22T03:46:58.587Z","0.0.6":"2015-07-22T03:59:54.722Z","0.0.7":"2015-07-27T03:27:02.922Z","0.1.0":"2015-08-28T06:06:09.036Z","0.1.1":"2016-02-22T23:38:54.746Z","0.1.2":"2016-04-11T13:57:57.963Z","0.2.0":"2016-04-13T22:16:37.802Z","0.3.0":"2016-07-13T06:28:02.324Z","0.3.1":"2017-03-07T03:52:03.073Z"},"users":{"amotsjonov-atlassian":true}}}