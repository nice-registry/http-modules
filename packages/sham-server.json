{"name":"sham-server","version":"1.0.1","description":"Create a Sham HTTP server and mock out endpoints in JS","main":"index.js","scripts":{"precommit":"lint-staged","test":"jest","lint":"eslint ."},"repository":"https://github.com/dos-j/sham-server","license":"MIT","homepage":"https://github.com/dos-j/sham-server#readme","dependencies":{"portfinder":"^1.0.13"},"devDependencies":{"eslint":"^3.18.0","eslint-config-prettier":"^1.5.0","express":"^4.15.2","husky":"^0.13.2","jest":"^19.0.2","jest-junit-reporter":"^1.1.0","lint-staged":"^3.4.0","prettier":"^0.22.0","request":"^2.81.0","supertest":"^3.0.0"},"lint-staged":{"*.js":["prettier --write","eslint --fix","git add"]},"jest":{"testResultsProcessor":"./node_modules/jest-junit-reporter"},"gitHead":"7d4a6fe6f0f82510ac949d6b67ea87b46ab76bc4","readme":"# sham-server\n[![NPM Version](https://img.shields.io/npm/v/sham-server.svg)](https://www.npmjs.com/package/sham-server)\n[![Build Status](https://circleci.com/gh/dos-j/sham-server.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/dos-j/sham-server) [![Coverage](https://img.shields.io/codecov/c/github/dos-j/sham-server.svg)](https://codecov.io/gh/dos-j/sham-server) [![dependencies](https://david-dm.org/dos-j/sham-server.svg)](https://david-dm.org/dos-j/sham-server) [![devDependencies](https://david-dm.org/dos-j/sham-server/dev-status.svg)](https://david-dm.org/dos-j/sham-server#info=devDependencies) [![Known Vulnerabilities](https://snyk.io/test/github/dos-j/sham-server/badge.svg)](https://snyk.io/test/github/dos-j/sham-server) [![License](\thttps://img.shields.io/github/license/dos-j/sham-server.svg)](https://github.com/dos-j/sham-server/blob/master/LICENSE)\n\nSham-Server allows you to easily create mock web services that you can use within your tests.\n\nWhen you need to test a web service which depends on third party web services you are forced to choose between loading the entire platform, creating complicated stub services or mocking out the parts of your codebase that call external services.\n\nAs the size of your platform gets bigger, trying to load all of it at once will grind your integration tests to a halt. This inevitably forces you to choose between stub services and mocking out huge chucks of the api.\n\nAs the number of tests you write increases, the complexity of your stub services will also have to increase to send your api down the paths you need to test. You will also need to come up with inventive solutions to change your api's responses between tests and check that it was called.\n\nWith mocking classes and functions there are plenty of easy to use options for mocking out individual calls within the tests you are writing and writing expectations that they were cakked. Unfortunately with this approach, you aren't testing how your service behaves across the network and the code you've replace with mocks won't get tested.\n\nWith sham-server you get the best of both worlds. Sham server create's a node http server which means you only need to point your code at a different uri. Sham server also provides an easy method for mocking requests and records all of the requests so that you can write expectations about the http calls your code is making.\n\nAll of the code to create mock routes and write expectations can be done within your test functions, giving you the convenience and flexibility you get when using mocking libraries as well as the confidence that a network request was made.\n\n## Getting Started\n\nFirst intall the npm module:\n```\nnpm install sham-server\n```\n\nThen in JavaScript follow the steps below to create a sham-server, mock out and endpoint, call it then check it was called.\n```js\n// Step 1: Import sham-server\nconst sham = require(\"sham-server\");\n\n(async function() {\n  // Step 2: Create a new sham server using the defaults\n  const server = await sham();\n\n  // or...\n  // create a new sham server with all options\n  const serverWithOptions = await sham({\n    // ip is the IP Address that the node server powering sham will listen on\n    ip: \"0.0.0.0\", // 0.0.0.0 is the default\n\n    // port is the Port that the sham server can be access on\n    port: 9001, // If not specified portfinder (https://www.npmjs.com/package/portfinder) will find you the next available port.\n\n    // defaultReply is used when a mocked route isn't matched\n    defaultReply: {\n      status: 404, // 404 is the default status of the defaultReply\n\n      headers: { \"Content-Type\": \"text/plain\" }, // \"Content-Type\": \"text/plain\" is the default header of the defaultReply\n\n      body: \"Not Found\" // \"Not Found\" is the default body of the default reply\n    }\n  });\n\n  // Step 3: Check the properties available on the sham server\n  console.log(`ip: ${server.ip}`);\n  console.log(`port: ${server.port}`);\n  console.log(`listening: ${server.listening}`);\n  console.log(`calls: ${server.calls.length}`);\n\n  // Step 4: Mock out an endpoint\n  const matcher = server.when(\n    // matcher function that is checked. (Required, will throw an error if not supplied)\n    req => {\n      // You could use the node built-in url module to parse the request\n      const {\n        pathname\n      } = require(\"url\").parse(req.url);\n\n      return req.method === \"GET\" && pathname === \"/a/b/c\";\n    },\n    // Mocked response that's returned if the matcher function returns true (Required, will throw an error if not supplied)\n    {\n      status: 200, // Optional: Defaults to 200\n      headers: { \"Content-Type\": \"application/json\" }, // Optional: Defaults to { \"Content-Type\": \"application/json\" }\n      body: { my: \"data\" } // If an object is supplied it is automatically stringified using JSON.stringify(...)\n    }\n\n    // Optional: You can also pass in a 3rd parameter for the number of times the matcher should match. After which it will be deleted.\n    // If no value is specified then the matcher will match an unlimited number of times.\n  );\n  console.log(matcher); // { matcher: [Function], mock: { status: ..., headers: ..., body: ... }, calls: [] }\n\n  // Step 5: Send a request to the sham server\n  const request = require(\"request\");\n\n  // Step 6: Fire a request against the sham server\n  await new Promise((resolve, reject) =>\n    request(\n      {\n        uri: `http://localhost:${server.port}/a/b/c`,\n        json: true\n      },\n      (err, res, body) => {\n        if (err) return reject(err);\n\n        const statusCode = res.statusCode;\n        const contentType = res.headers[\"content-type\"];\n\n        console.log(statusCode === matcher.mock.status); // true\n        console.log(contentType === matcher.mock.headers[\"Content-Type\"]); // true\n\n        console.log(body.my === matcher.mock.body.my); // true\n\n        resolve(body);\n      }\n    ));\n  // You can also now see the call in either the matcher's list of calls or the server's list of calls\n  console.log(matcher.calls.length); // 1\n  console.log(server.calls.length); // 1\n\n  // In your tests you can expect that sham server received the correct request by doing (jest example)\n\n  // expect(matcher.calls).toContainEqual(\n  //    expect.objectContaining({\n  //        request: expect.objectContaining({\n  //            method: \"GET\",\n  //            url: \"/a/b/c\"\n  //        })\n  //    })\n  //);\n\n  // Step 7: Reset the mocked routes and calls\n  server.reset();\n  console.log(server.calls); // 0\n\n  // Step 8: Close the server to stop it listening\n  server.close();\n  serverWithOptions.close();\n  console.log(`listening: ${server.listening}`);\n})();\n\n```\n\n## Examples\n\nSham server contains the following testing examples.\n\n### Testing a function which calls an api you want to mock\n\nThe [request-example.js](https://github.com/dos-j/sham-server/tree/master/examples/request-example.js) and [request-example.test.js](https://github.com/dos-j/sham-server/tree/master/examples/request-example.test.js) are examples of testing a function which is using request to send requests to an api.\n\nInstead of mocking out the request library, you could use sham-server to run integration tests and make sure that the right http calls will actually be sent.\n\n### Testing a web service which calls an api you want to mock\n\nThe [supertest-example.js](https://github.com/dos-j/sham-server/tree/master/examples/supertest-example.js) and [supertest-example.test.js](https://github.com/dos-j/sham-server/tree/master/examples/supertest-example.test.js) are examples of testing an express api which (using request) calls an external api to validate the incoming requests.\n\nWhen trying to run integration tests against API's having to mock out calls to external services can be difficult and in doing so undermines the value of the tests. With sham-server you can run integration tests against mock/stub api's, but still get the same convenience and flexibility provided by mocking libraries.\n\n## Roadmap\n\nWe've just published our 1.0.0 version ðŸŽ‰.\n\nFor our future plans and roadmap we are using GitHub Projects. You can see our projects [here](https://github.com/dos-j/sham-server/projects)\n\n## Issues\n\nIf you find any problems with sham-server or have any feature requests please [log them here](https://github.com/dos-j/sham-server/issues?state=open).\n\n## Contributing\n\nPull requests are more than welcome!\n\n## Maintainers\n* [Jason Hewison](https://github.com/JasonHewison)\n\n## License\n\nLicensed under [MIT](./LICENSE).\n\n","versions":[{"number":"1.0.0-beta.1","date":"2017-03-27T15:06:23.644Z"},{"number":"1.0.0","date":"2017-03-27T15:31:46.713Z"},{"number":"1.0.1","date":"2017-03-27T15:44:39.924Z"}],"created":"2017-03-27T15:06:23.644Z","modified":"2017-03-27T15:44:39.924Z","lastPublisher":{"name":"jasonhewison","email":"jhewison@gmail.com"},"owners":[{"name":"jasonhewison","email":"jhewison@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"sham-server","_nodeVersion":"7.7.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/sham-server-1.0.1.tgz_1490629477961_0.4760810360312462"},"_npmUser":{"name":"jasonhewison","email":"jhewison@gmail.com"},"_npmVersion":"4.1.2","_rev":"5-08c7dcb56ff370f23dff080d10c6b11c","_shasum":"df2bd0833681dc9cbd0ec2493079d590f4ab3ed0","author":{"name":"dos-j"},"bugs":{"url":"https://github.com/dos-j/sham-server/issues"},"directories":{},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"df2bd0833681dc9cbd0ec2493079d590f4ab3ed0","tarball":"https://registry.npmjs.org/sham-server/-/sham-server-1.0.1.tgz"},"maintainers":[{"name":"jasonhewison","email":"jhewison@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-27T15:44:39.924Z","created":"2017-03-27T15:06:23.644Z","1.0.0-beta.1":"2017-03-27T15:06:23.644Z","1.0.0":"2017-03-27T15:31:46.713Z","1.0.1":"2017-03-27T15:44:39.924Z"}}}