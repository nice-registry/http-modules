{"name":"datadog-metrics","version":"0.4.0","description":"Buffered metrics reporting via the DataDog HTTP API","main":"index.js","repository":"https://github.com/dbader/node-datadog-metrics","scripts":{"test":"mocha --reporter spec && ./node_modules/.bin/jshint --reporter node_modules/jshint-stylish-ex/stylish.js *.js ./lib/*.js ./test/*.js && ./node_modules/.bin/jscs --config .jscsrc *.js ./lib/*.js ./test/*.js"},"keywords":["datadog","metrics","stats"],"license":"MIT","devDependencies":{"chai":"3.5.0","chai-string":"1.1.6","jscs":"2.9.0","jshint":"2.9.1","jshint-stylish-ex":"0.2.0","mocha":"2.4.5"},"dependencies":{"debug":"2.2.0","dogapi":"1.1.0"},"gitHead":"6ffe18554a8403004ba67e97c4bd8205ae70dd2a","homepage":"https://github.com/dbader/node-datadog-metrics#readme","versions":[{"number":"0.0.0","date":"2014-12-08T01:12:05.441Z"},{"number":"0.1.0","date":"2014-12-15T05:24:23.116Z"},{"number":"0.1.1","date":"2014-12-15T05:56:05.354Z"},{"number":"0.2.0","date":"2014-12-18T18:49:04.463Z"},{"number":"0.2.1","date":"2014-12-24T22:23:29.970Z"},{"number":"0.3.0","date":"2016-02-06T22:28:55.557Z"},{"number":"0.4.0","date":"2017-03-30T17:03:41.583Z"}],"readme":"# datadog-metrics\n> Buffered metrics reporting via the DataDog HTTP API.\n\n[![NPM Version][npm-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Downloads Stats][npm-downloads]][npm-url]\n\nDatadog-metrics lets you collect application metrics through DataDog's HTTP API. Using the HTTP API has the benefit that you **don't need to install the DataDog Agent (StatsD)**. Just get an API key, install the module and you're ready to go.\n\nThe downside of using the HTTP API is that it can negatively affect your app's performance. Datadog-metrics **solves this issue by buffering metrics locally and periodically flushing them** to DataDog.\n\n## Installation\n\n```sh\nnpm install datadog-metrics --save\n```\n\n## Example\n\n![](header.png)\n\nSave the following into a file named `example_app.js`:\n```js\nvar metrics = require('datadog-metrics');\nmetrics.init({ host: 'myhost', prefix: 'myapp.' });\n\nfunction collectMemoryStats() {\n    var memUsage = process.memoryUsage();\n    metrics.gauge('memory.rss', memUsage.rss);\n    metrics.gauge('memory.heapTotal', memUsage.heapTotal);\n    metrics.gauge('memory.heapUsed', memUsage.heapUsed);\n};\n\nsetInterval(collectMemoryStats, 5000);\n```\n\nRun it:\n```sh\nDATADOG_API_KEY=YOUR_KEY DEBUG=metrics node example_app.js\n```\n\n## Tutorial\n\nThere's also a longer [tutorial](https://dbader.org/blog/monitoring-your-nodejs-app-with-datadog) that walks you through setting up a monitoring dashboard on DataDog using datadog-metrics.\n\n\n## Usage\n\n### DataDog API key\n\nMake sure the `DATADOG_API_KEY` environment variable is set to your DataDog\nAPI key. You can find the API key under [Integrations > APIs](https://app.datadoghq.com/account/settings#api). *You only need to provide the API key, not the APP key. However, you can provide an APP key if you want by setting the `DATADOG_APP_KEY` environment variable.*\n\n### Module setup\n\nThere are three ways to use this module to instrument an application.\nThey differ in the level of control that they provide.\n\n#### Use case #1: Just let me track some metrics already!\n\nJust require datadog-metrics and you're ready to go. After that you can call\n`gauge`, `increment` and `histogram` to start reporting metrics.\n\n```js\nvar metrics = require('datadog-metrics');\nmetrics.gauge('mygauge', 42);\n```\n\n#### Use case #2: I want some control over this thing!\n\nIf you want more control you can configure the module with a call to `init`.\nMake sure you call this before you use the `gauge`, `increment` and `histogram`\nfunctions. See the documentation for `init` below to learn more.\n\n```js\nvar metrics = require('datadog-metrics');\nmetrics.init({ host: 'myhost', prefix: 'myapp.' });\nmetrics.gauge('mygauge', 42);\n```\n\n\n#### Use case #3: Must. Control. Everything.\n\nIf you need even more control you can create one or more `BufferedMetricsLogger` instances and manage them yourself:\n\n```js\nvar metrics = require('datadog-metrics');\nvar metricsLogger = new metrics.BufferedMetricsLogger({\n    apiKey: 'TESTKEY',\n    host: 'myhost',\n    prefix: 'myapp.',\n    flushIntervalSeconds: 15,\n    defaultTags: ['env:staging', 'region:us-east-1']\n});\nmetricsLogger.gauge('mygauge', 42);\n```\n\n## API\n\n### Initialization\n\n`metrics.init(options)`\n\nWhere `options` is an object and can contain the following:\n\n* `host`: Sets the hostname reported with each metric. (optional)\n    * Setting a hostname is useful when you're running the same application\n      on multiple machines and you want to track them separately in DataDog.\n* `prefix`: Sets a default prefix for all metrics. (optional)\n    * Use this to namespace your metrics.\n* `flushIntervalSeconds`: How often to send metrics to DataDog. (optional)\n    * This defaults to 15 seconds. Set it to 0 to disable auto-flushing which\n      means you must call `flush()` manually.\n* `apiKey`: Sets the DataDog API key. (optional)\n    * It's usually best to keep this in an environment variable.\n      Datadog-metrics looks for the API key in `DATADOG_API_KEY` by default.\n* `appKey`: Sets the DataDog APP key. (optional)\n    * It's usually best to keep this in an environment variable.\n      Datadog-metrics looks for the APP key in `DATADOG_APP_KEY` by default.\n* `defaultTags`: Default tags used for all metric reporting. (optional)\n    * Set tags that are common to all metrics.\n\n\nExample:\n\n```js\nmetrics.init({ host: 'myhost', prefix: 'myapp.' });\n```\n\n\n### Gauges\n\n`metrics.gauge(key, value[, tags])`\n\nRecord the current *value* of a metric. They most recent value in\na given flush interval will be recorded. Optionally, specify a set of\ntags to associate with the metric. This should be used for sum values\nsuch as total hard disk space, process uptime, total number of active\nusers, or number of rows in a database table.\n\nExample:\n\n```js\nmetrics.gauge('test.mem_free', 23);\n```\n\n### Counters\n\n`metrics.increment(key[, value[, tags]])`\n\nIncrement the counter by the given *value* (or `1` by default). Optionally,\nspecify a list of *tags* to associate with the metric. This is useful for\ncounting things such as incrementing a counter each time a page is requested.\n\nExample:\n\n```js\nmetrics.increment('test.requests_served');\nmetrics.increment('test.awesomeness_factor', 10);\n```\n\n### Histograms\n\n`metrics.histogram(key, value[, tags])`\n\nSample a histogram value. Histograms will produce metrics that\ndescribe the distribution of the recorded values, namely the minimum,\nmaximum, average, count and the 75th, 85th, 95th and 99th percentiles.\nOptionally, specify a list of *tags* to associate with the metric.\n\nExample:\n\n```js\nmetrics.histogram('test.service_time', 0.248);\n```\n\n### Flushing\n\n`metrics.flush([onSuccess[, onError]])`\n\nCalling `flush` sends any buffered metrics to DataDog. Unless you set\n`flushIntervalSeconds` to 0 it won't be necessary to call this function.\n\nIt can be useful to trigger a manual flush by calling if you want to\nmake sure pending metrics have been sent before you quit the application\nprocess, for example.\n\n## Logging\n\nDatadog-metrics uses the [debug](https://github.com/visionmedia/debug)\nlibrary for logging at runtime. You can enable debug logging by setting\nthe `DEBUG` environment variable when you run your app.\n\nExample:\n\n```sh\nDEBUG=metrics node app.js\n```\n\n## Tests\n\n```sh\nnpm test\n```\n\n## Release History\n\n* 0.4.0\n    * ADD: Initialize with a default set of tags\n* 0.3.0\n    * FIX: Don't overwrite metrics with the same key but different tags when aggregating them (Thanks @akrylysov and @RavivIsraeli!)\n    * ADD: Add success/error callbacks to `metrics.flush()` (Thanks @akrylysov!)\n    * ADD: Allow DataDog APP key to be configured (Thanks @gert-fresh!)\n    * Bump dependencies to latest\n    * Update docs\n* 0.2.1\n    * Update docs (module code remains unchanged)\n* 0.2.0\n    * API redesign\n    * Remove `setDefaultXYZ()` and added `init()`\n* 0.1.1\n    * Allow `increment` to be called with a default value of 1\n* 0.1.0\n    * The first proper release\n    * Rename `counter` to `increment`\n* 0.0.0\n    * Work in progress\n\n## Meta\n\nThis module is heavily inspired by the Python [dogapi module](https://github.com/DataDog/dogapi).\n\nDaniel Bader – [@dbader_org](https://twitter.com/dbader_org) – mail@dbader.org\n\nDistributed under the MIT license. See ``LICENSE`` for more information.\n\n[https://github.com/dbader/node-datadog-metrics](https://github.com/dbader/node-datadog-metrics)\n\n[npm-image]: https://img.shields.io/npm/v/datadog-metrics.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/datadog-metrics\n[npm-downloads]: https://img.shields.io/npm/dm/datadog-metrics.svg?style=flat-square\n[travis-image]: https://img.shields.io/travis/dbader/node-datadog-metrics/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/dbader/node-datadog-metrics\n","starsCount":6,"created":"2014-12-08T01:12:05.441Z","modified":"2017-04-10T05:53:56.161Z","lastPublisher":{"name":"csabapalfi","email":"csaba@palfi.me"},"owners":[{"name":"csabapalfi","email":"csaba@palfi.me"},{"name":"dbader","email":"mail@dbader.org"}],"other":{"_attachments":{},"_from":".","_id":"datadog-metrics","_nodeVersion":"7.7.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/datadog-metrics-0.4.0.tgz_1490893419418_0.21915951487608254"},"_npmUser":{"name":"csabapalfi","email":"csaba@palfi.me"},"_npmVersion":"3.10.8","_rev":"6-9022b5a54314baa325c69cf188e16f2f","_shasum":"06566a9b147858cf02caf269332677c875b49e4f","author":{"name":"Daniel Bader","email":"mail@dbader.org","url":"http://dbader.org/"},"bugs":{"url":"https://github.com/dbader/node-datadog-metrics/issues"},"directories":{},"dist-tags":{"latest":"0.4.0"},"dist":{"shasum":"06566a9b147858cf02caf269332677c875b49e4f","tarball":"https://registry.npmjs.org/datadog-metrics/-/datadog-metrics-0.4.0.tgz"},"maintainers":[{"name":"csabapalfi","email":"csaba@palfi.me"},{"name":"dbader","email":"mail@dbader.org"}],"readmeFilename":"README.md","time":{"modified":"2017-04-10T05:53:56.161Z","created":"2014-12-08T01:12:05.441Z","0.0.0":"2014-12-08T01:12:05.441Z","0.1.0":"2014-12-15T05:24:23.116Z","0.1.1":"2014-12-15T05:56:05.354Z","0.2.0":"2014-12-18T18:49:04.463Z","0.2.1":"2014-12-24T22:23:29.970Z","0.3.0":"2016-02-06T22:28:55.557Z","0.4.0":"2017-03-30T17:03:41.583Z"},"users":{"focusaurus":true,"saili":true,"quantiumx":true,"schwartzman":true,"joshuagross":true,"craigpatten":true}}}