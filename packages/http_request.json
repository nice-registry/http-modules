{"name":"http_request","description":"http-request is a nodeJS module that simplifies HTTP request making","version":"0.1.2","scripts":{"test":"mocha -R spec"},"tags":["http","request","http-request","simple","web services","util"],"dependencies":{"q":"~0.9.3","underscore":"~1.4.4"},"devDependencies":{"mocha":"~1.9.0","chai":"~1.6.1","sinon":"~1.7.2","rewire":"~1.1.3"},"repository":"https://github.com/ranm8/http-request","engines":{"node":"~0.10.x"},"readme":"http-request - Simplifies nodeJS HTTP requests [![Build Status](https://secure.travis-ci.org/ranm8/http-request.png?branch=master)](http://travis-ci.org/ranm8/http-request)\n==============================================\n\nhttp-request is a nodeJS module that simplifies HTTP request making.\n\nImportent to note, this module is still under development and can be unstable!\n\n## Install\n\n\tnpm install http_request  \n\n\n## Ease of use\n\nhttp-request is extremely easy to use and always return a promise (using the great Q module)...\n\nSimply require the module and start requesting:\n\n\tvar httpRequest = require('http_request'); \n\nGET Request:\n\n\thttpRequest.get('http://example.com').then(function(response) {\n\t\t// Get the response body\n\t\tresponse.getBody();\n\t});\n\nPOST Request in JSON:\n\n\thttpRequest.post('http://example.com', {\n\t\t\tparams: {\n\t\t\t\thello: 'world'\n\t\t\t}\n\t\t})\n\t\t.then(function(response) {\n\t\t\t// Get the response body\n\t\t\tresponse.getBody();\n\t\t});\n\n\n## API\n\n### options\n\n* `method` {string} - HTTP method to use, can be one of the following - POST|GET|DELETE|HEAD|PUT.\n* `params` {object|string} - Can be either an object (key, val) or string, will be formatted according to the dataType property and served via response body.\n* `headers` {object} - (key, value) object of headers (some headers like content-length are set by default)\n* `cookies` {object} - (key, value) object of cookies to encode and serve via the request header.\n* `auth` {{ username: string, password: string }} - Adds Basic authintication header with given username and password\n* `dataType` {string} - Determines the request data type (json|form-url-encoded), this option will encode the request body according to the given dataType and will add the appropriate header (defaults to json).\n\n### httpRequest.request(url, options)\n\nExecutes a custom request according to options object\n\n\thttpRequest.request('https://example.com/api/foo', {\n\t\tmethod: 'POST',\n\t\tparams: {\n\t\t\tfoo: 'bar'\n\t\t\tbar: 'foo'\n\t\t},\n\t\theaders: {\n\t\t\t'X-Forwarded-By': 'me'\n\t\t},\n\t\tcookies: {\n\t\t\tmySession: 'some cookie value'\n\t\t},\n\t\tauth: {\n\t\t\tusername: 'foo',\n\t\t\tpassword: 'bar'\n\t\t},\n\t\tdataType: 'json'\t\t\n\t})\n\t.then(function(response) {\n\t\t// get the response body\n\t\tresponse.getBody();\n\t\t\n\t\t// get the response headers\n\t\tresponse.getHeaders();\n\t\t\n\t\t// get specific response header\n\t\tresponse.getHeader('Accept');\n\t\t\n\t\t// get the code\n\t\tresponse.getCode();\n\t});\n\n### httpRequest.get(url, options)\n\nExceutes a GET method request\n\n\thttpRequest.get('http://example.com').then(function(response) {\n\t\t// Get the response body\n\t\tresponse.getBody();\n\t});\n\n### httpRequest.post(url, options)\n\nExceutes a POST method request\n\n\thttpRequest.post('http://example.com', {\n\t\tparams: {\n\t\t\thello: 'world'\n\t\t}\n\t})\n\t.then(function(response) {\n\t\t// Get the response body\n\t\tresponse.getBody();\n\t});\n\n\n### httpRequest.put(url, options)\n\nExceutes a PUT method request\n\n\thttpRequest.put('http://example.com', {\n\t\tparams: 'some file content',\n\t\tdataType: null\t\n\t})\n\t.then(function(response) {\n\t\t// Get the response body\n\t\tresponse.getBody();\n\t});\n\n\n### httpRequest.del(url, options)\n\nExceutes a DELETE method request\n\n\thttpRequest.del('http://example.com').then(function(response) {\n\t\t// Get the response body\n\t\tresponse.getBody();\n\t});\n\n\n### httpRequest.head(url, options)\n\nExceutes a HEAD method request\n\t\n\thttpRequest.head('http://example.com').then(function(response) {\n\t\t// Get the response body\n\t\tresponse.getCode();\n\t});\n\n\n","versions":[{"number":"0.1.0","date":"2013-06-17T20:44:21.554Z"},{"number":"0.1.1","date":"2013-06-17T21:48:09.280Z"},{"number":"0.1.2","date":"2013-06-17T22:14:39.665Z"}],"starsCount":2,"created":"2013-06-17T20:44:16.088Z","modified":"2016-10-19T16:45:10.711Z","lastPublisher":{"name":"ranm8","email":"me@ranmizrahi.com"},"owners":[{"name":"ranm8","email":"me@ranmizrahi.com"}],"other":{"_attachments":{},"_from":".","_id":"http_request","_npmUser":{"name":"ranm8","email":"me@ranmizrahi.com"},"_npmVersion":"1.2.25","_rev":"1-b39c38ac822f6208d129a69d3ae35155","author":{"name":"Ran Mizrahi","email":"ranm@codeoasis.com"},"bugs":{"url":"https://github.com/ranm8/http-request/issues"},"directories":{},"dist-tags":{"latest":"0.1.2"},"dist":{"shasum":"e146aa2eb5df4bdfe281c5cce99b18bc8f0068d8","tarball":"http://registry.npmjs.org/http_request/-/http_request-0.1.2.tgz"},"maintainers":[{"name":"ranm8","email":"me@ranmizrahi.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-19T16:45:10.711Z","created":"2013-06-17T20:44:16.088Z","0.1.0":"2013-06-17T20:44:21.554Z","0.1.1":"2013-06-17T21:48:09.280Z","0.1.2":"2013-06-17T22:14:39.665Z"},"users":{"alexandermac":true,"zvovu":true}}}