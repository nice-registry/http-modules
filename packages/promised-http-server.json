{"name":"promised-http-server","version":"5.0.0","description":"A simple http server with an interface based on promises","main":"src/Server.js","keywords":["http","server","promise","futures","bluebird"],"repository":"https://github.com/srcagency/promised-http-server","license":"MIT","dependencies":{"bluebird":"^3.3.4","debug":"^2.2.0","is-integer":"^1.0.6","JSONStream":"^1.2.1","object-assign":"^4.0.1","promise-streams":"^1.0.1"},"gitHead":"e9e3a828371668b228f7dc7b9c61371b05304ddc","homepage":"https://github.com/srcagency/promised-http-server#readme","scripts":{},"versions":[{"number":"2.0.1","date":"2014-09-24T09:32:37.947Z"},{"number":"2.0.2","date":"2014-10-07T13:30:05.216Z"},{"number":"2.0.3","date":"2014-10-23T10:52:32.205Z"},{"number":"3.0.1","date":"2015-03-13T17:15:42.451Z"},{"number":"3.0.2","date":"2015-03-22T14:08:03.293Z"},{"number":"4.0.0","date":"2015-04-27T13:09:55.915Z"},{"number":"4.0.1","date":"2016-03-15T12:11:45.428Z"},{"number":"5.0.0","date":"2016-11-17T14:39:05.004Z"}],"readme":"# Promised http server\n\n## Install\n\n```shell\nnpm install\n```\n\n## Use\n\n```js\nvar server = new HttpServer([ handler[, listen ]]);\n```\n\nWhere `handler` (optional) is a function to handle requests\n\n`listen` (optional) will be passed on to\n[http.Server.listen](http://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback)\n\nBy default the server will respond with 404 on all requests and won't\nlisten anywhere\n\n```js\nserver.listen(listen);\n```\n\nSee [http.Server.listen](http://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback)\n\nReturns a promise which is resolved with the address listened on.\n\n```js\nserver.handleRequest = fn;\nserver.handleResult = fn;\nserver.handleHttpError = fn;\nserver.handleFatalError = fn;\n```\n\nWhere `fn` is a function\n\nAll handlers have default implementations and they are listed here in\nthe same order as they are called during a request\n\nA handler can return a promise which will then be resolved before\npassed to the next handler\n\n`handleRequest` will be called with arguments `request, response, id`\n\nAll other handlers will be called with a context of the format:\n\n```js\n{\n\tid: Integer,\t\t\t\t\t// unique request id\n\trequest: http.ClientRequest,\t// request object\n\tresponse: http.ServerResponse,\t// response object\n}\n```\n\n`handleResult` will be called with whatever `handleRequest` returned. The\ndefault implementation handles HttpResponse and HttpError correctly and casts\neverything else to a string before sending it to the client.\n\n`handleHttpError` receives any thrown `HttpError` while `handleFatalError` receives\nany other error.\n\n### Example\n\n```js\nvar HttpServer = require('promised-http-server');\nvar HttpError = HttpServer.Error;\n\nnew HttpServer(function(){\n\tif (this.request.url === '/things') {\n\t\tswitch (this.request.method) {\n\t\t\tcase 'POST':\n\t\t\t\treturn saveThingFromRequest(this.request)\n\t\t\t\t\t.return(HttpResponse(204));\n\t\t\tcase 'PUT':\n\t\t\t\treturn Promise\n\t\t\t\t\t.resolve(someAsyncStuff)\n\t\t\t\t\t.return({ saved: true });\n\t\t\tcase 'GET':\n\t\t\t\treturn { things: [] };\n\t\t\tdefault:\n\t\t\t\tthrow HttpError(501); // not implemented\n\t\t}\n\t} else {\n\t\tthrow HttpError(404);\n\t}\n}, 80);\n```\n\n### For tests\n\nIn a test you might do something along the lines of this\n\n```js\nvar tap = require('tap');\n\nvar server = require('../src');\nserver.listen(0);\n\ntap.on('end', function(){\n\tserver.close();\n});\n\nvar address = server.listening();\n\naddress\n\t.then(function( addr ){\n\t\t// ready to test the server at `addr`\n\t});\n```\n","created":"2014-09-24T09:32:37.947Z","modified":"2016-11-17T14:39:05.004Z","lastPublisher":{"name":"thomas-jensen","email":"thomas@src.agency"},"owners":[{"name":"thomas-jensen","email":"thomas@src.agency"}],"other":{"_attachments":{},"_from":".","_id":"promised-http-server","_nodeVersion":"7.0.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/promised-http-server-5.0.0.tgz_1479393544436_0.46874415152706206"},"_npmUser":{"name":"thomas-jensen","email":"thomas@src.agency"},"_npmVersion":"3.10.9","_rev":"2-41acc42bd490766ad200f8a353182a29","_shasum":"3d360f291f1fb5a27ed696755828abae4d5b2feb","author":{"name":"Thomas Jensen","email":"thomas@src.agency","url":"http://src.agency"},"bugs":{"url":"https://github.com/srcagency/promised-http-server/issues"},"directories":{},"dist-tags":{"latest":"5.0.0","next":"4.0.0"},"dist":{"shasum":"3d360f291f1fb5a27ed696755828abae4d5b2feb","tarball":"http://registry.npmjs.org/promised-http-server/-/promised-http-server-5.0.0.tgz"},"maintainers":[{"name":"thomas-jensen","email":"thomas@src.agency"}],"readmeFilename":"README.md","time":{"modified":"2016-11-17T14:39:05.004Z","created":"2014-09-24T09:32:37.947Z","2.0.1":"2014-09-24T09:32:37.947Z","2.0.2":"2014-10-07T13:30:05.216Z","2.0.3":"2014-10-23T10:52:32.205Z","3.0.1":"2015-03-13T17:15:42.451Z","3.0.2":"2015-03-22T14:08:03.293Z","4.0.0":"2015-04-27T13:09:55.915Z","4.0.1":"2016-03-15T12:11:45.428Z","5.0.0":"2016-11-17T14:39:05.004Z"}}}