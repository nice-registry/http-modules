{"name":"argo","version":"1.0.1","description":"An extensible, asynchronous HTTP reverse proxy and origin server.","main":"argo.js","license":"MIT","scripts":{"test":"mocha -R spec","coverage":"bin/_coverage"},"repository":"https://github.com/argo/argo","devDependencies":{"mocha":"~1.8.1"},"dependencies":{"pipeworks":"1.3.x","methods":"~0.1.0"},"gitHead":"e12ec9a30363eb785e4c747bc2c1a7c65be67355","homepage":"https://github.com/argo/argo#readme","versions":[{"number":"0.1.5","date":"2013-05-01T15:20:45.105Z"},{"number":"0.1.6","date":"2013-05-01T15:21:33.514Z"},{"number":"0.1.7","date":"2013-06-10T19:54:51.211Z"},{"number":"0.1.8","date":"2013-06-10T21:35:22.010Z"},{"number":"0.2.0","date":"2013-07-03T14:32:05.627Z"},{"number":"0.2.1","date":"2013-07-12T15:16:02.360Z"},{"number":"0.2.2","date":"2013-08-23T15:22:47.213Z"},{"number":"0.3.2","date":"2013-08-29T20:03:38.105Z"},{"number":"0.4.0-alpha","date":"2013-09-09T18:39:50.894Z"},{"number":"0.4.0-alpha.2","date":"2013-09-11T19:13:14.463Z"},{"number":"0.4.0-alpha.3","date":"2013-09-12T02:01:49.150Z"},{"number":"0.4.0-alpha.4","date":"2013-09-12T19:29:57.712Z"},{"number":"0.4.0-beta","date":"2013-09-20T14:50:08.113Z"},{"number":"0.4.1-beta","date":"2013-10-10T15:49:32.961Z"},{"number":"0.4.2","date":"2013-10-29T18:36:52.319Z"},{"number":"0.4.3","date":"2013-10-30T20:00:23.455Z"},{"number":"0.4.4","date":"2013-11-07T20:02:39.715Z"},{"number":"0.4.5","date":"2013-11-13T19:41:22.862Z"},{"number":"0.4.6","date":"2013-11-13T22:12:06.651Z"},{"number":"0.4.7","date":"2013-11-14T16:02:10.287Z"},{"number":"0.4.8","date":"2014-01-03T18:36:52.819Z"},{"number":"0.4.9","date":"2014-01-06T20:43:01.257Z"},{"number":"0.5.0","date":"2014-09-18T13:43:21.999Z"},{"number":"0.6.0","date":"2015-03-10T14:40:40.157Z"},{"number":"1.0.0","date":"2015-09-01T19:50:13.567Z"},{"number":"1.0.1","date":"2017-04-03T15:18:36.008Z"}],"readme":"# Argo\n\nAn extensible, asynchronous HTTP reverse proxy and origin server.\n\n<!-- Argo is:\n\n* An API-focused HTTP server.\n* A reverse proxy to manage and modify HTTP requests and responses.\n* Modular using handlers for request and response pipelines.\n* Extensible using a package system.\n\nAs an API server:\n\n* Route requests to handlers.\n* Separate resources into modules.\n\nAs a reverse proxy:\n\n* Route requests to backend servers.\n* Transform HTTP messages on the fly.\n* Add OAuth 2.0 support to an existing API.\n* Create a RESTful API faÃ§ade over legacy systems.\n-->\n\n## Examples\n\n### Adding Cross-Origin Resource Sharing\n\nSetup the server:\n\n```javascript\nvar argo = require('argo');\n\nargo()\n  .use(function(handle) {\n    handle('response', function(env, next) {\n      env.response.setHeader('Access-Control-Allow-Origin', '*');\n      next(env);\n    });\n  })\n  .target('http://weather.yahooapis.com')\n  .listen(1337);\n```\n\nMake a request:\n\n```bash\n$ curl -i http://localhost:1337/forecastrss?w=2467861\n\nHTTP/1.1 200 OK\nDate: Thu, 28 Feb 2013 20:55:03 GMT\nContent-Type: text/xml;charset=UTF-8\nConnection: keep-alive\nServer: YTS/1.20.13\nAccess-Control-Allow-Origin: *\nContent-Length: 2337\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n<GiantXMLResponse/>\n```\n\n### Serving an API Response \n\nSetup the server: \n\n```javascript\nvar argo = require('argo');\n\nargo()\n  .get('^/dogs$', function(handle) {\n    handle('request', function(env, next) {\n      env.response.statusCode = 200;\n      env.response.body = { dogs: ['Alfred', 'Rover', 'Dino'] };\n      next(env);\n    });\n  })\n  .listen(1337);\n```\n\nMake a request:\n\n```bash\n$ curl -i http://localhost:1337/dogs\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 34 \nDate: Thu, 28 Feb 2013 20:44:46 GMT\nConnection: keep-alive\n\n{\"dogs\":[\"Alfred\",\"Rover\",\"Dino\"]}\n```\n\n## Install\n\n```bash\n$ npm install argo\n```\n\n## Documentation\n\n* [handleFunction](#handleFunction)\n* [use(handleFunction)](#usehandle)\n* [use(package)](#usepackage)\n* [target](#target)\n* [route](#route)\n* Method filters\n  * [get](#get)\n  * [post](#post)\n  * [put](#put)\n  * [head](#head)\n  * [del](#del)\n  * [options](#options)\n  * [trace](#trace)\n  * [copy](#copy)\n  * [lock](#lock)\n  * [mkcol](#mkcol)\n  * [move](#move)\n  * [propfind](#propfind)\n  * [proppatch](#proppatch)\n  * [unlock](#unlock)\n  * [report](#report)\n  * [mkactivity](#mkactivity)\n  * [checkout](#checkout)\n  * [merge](#merge)\n  * [msearch](#msearch)\n  * [notify](#notify)\n  * [subscribe](#subscribe)\n  * [unsubscribe](#unsubscribe)\n  * [patch](#patch)\n  * [search](#search)\n* [map](#map)\n* [include](#include)\n* [listen](#listen)\n* [Error Handling](#error-handling)\n\n\n## Usage\n\n<a name=\"handleFunction\"/>\n### handleFunction(type, [options], callback)\n\n* `type`: `'request'` or `'response'`\n\n* `options`: Mostly used for internal purposes.  Optional.\n\n* `callback(env, next)`: A request or response callback. `env` is an environment context that is passed to every handler, and `next` is a reference to the next function in the pipeline.\n\nWhen the handler is complete and wishes to pass to the next function in the pipeline, it must call `next(env)`.\n\n<a name=\"usehandle\"/>\n### use(handleFunction)\n\n`handleFunction` is used to set up request and response handlers.  \n\n```javascript\nargo()\n  //For every request add 'X-Custom-Header' with value 'Yippee!'\n  .use(function(handle) {\n    handle('request', function(env, next) {\n      env.request.headers['X-Custom-Header'] = 'Yippee!';\n      next(env);\n    });\n  })\n```\n<a name=\"usepackage\"/>\n### use(package)\n\nAlias for `include(package)`.\n\n<a name=\"target\"/>\n### target(uri)\n\n`target` is used for proxying requests to a backend server.\n\n* `uri`: a string pointing to the target URI.\n\nExample:\n\n```javascript\nargo()\n  .target('http://weather.yahooapis.com')\n```\n<a name=\"route\"/>\n### route(path, [options], handleFunction)\n\n* `path`: a regular expression used to match HTTP Request URI path.\n\n* `options`: an object with a `methods` property to filter HTTP methods (e.g., `{ methods: ['GET','POST'] }`).  Optional.\n\n* `handleFunction`: Same as in `use`.\n\nExample:\n\n```javascript\nargo()\n  .route('^/greeting$', function(handle) {\n    handle('request', function(env, next) {\n      env.response.statusCode = 200;\n      env.response.headers = { 'Content-Type': 'text/plain' };\n      env.response.body = 'Hello World!';\n \n      next(env);\n    });\n  })\n```\n\n### Method filters\n<a name=\"get\"/>\n<a name=\"post\"/>\n<a name=\"put\"/>\n<a name=\"head\"/>\n<a name=\"del\"/>\n<a name=\"options\"/>\n<a name=\"trace\"/>\n<a name=\"copy\"/>\n<a name=\"lock\"/>\n<a name=\"mkcol\"/>\n<a name=\"move\"/>\n<a name=\"propfind\"/>\n<a name=\"proppatch\"/>\n<a name=\"unlock\"/>\n<a name=\"report\"/>\n<a name=\"mkactivity\"/>\n<a name=\"checkout\"/>\n<a name=\"merge\"/>\n<a name=\"msearch\"/>\n<a name=\"notify\"/>\n<a name=\"subscribe\"/>\n<a name=\"unsubscribe\"/>\n<a name=\"patch\"/>\n<a name=\"search\"/>\n#### get(path, handleFunction)\n#### post(path, handleFunction)\n#### put(path, handleFunction)\n#### head(path, handleFunction)\n#### del(path, handleFunction)\n#### options(path, handleFunction)\n#### trace(path, handleFunction)\n#### copy(path, handleFunction)\n#### lock(path, handleFunction)\n#### mkcol(path, handleFunction)\n#### move(path, handleFunction)\n#### propfind(path, handleFunction)\n#### proppatch(path, handleFunction)\n#### unlock(path, handleFunction)\n#### report(path, handleFunction)\n#### mkactivity(path, handleFunction)\n#### checkout(path, handleFunction)\n#### merge(path, handleFunction)\n#### msearch(path, handleFunction)\n#### notify(path, handleFunction)\n#### subscribe(path, handleFunction)\n#### unsubscribe(path, handleFunction)\n#### patch(path, handleFunction)\n#### search(path, handleFunction)\n\nMethod filters built on top of `route`. `del` and `msearch` correspond to\nthe DELETE and M-SEARCH methods, respectively.\n\nExample:\n\n```javascript\nargo()\n  .get('^/puppies$', function(handle) {\n    handle('request', function(env, next) {\n      env.response.body = JSON.stringify([{name: 'Sparky', breed: 'Fox Terrier' }]);\n      next(env);\n    });\n  })\n```\n\n<a name=\"map\"/>\n### map(path, [options], argoSegmentFunction)\n\n`map` is used to delegate control to sub-Argo instances based on a request URI path.\n\n* `path`: a regular expression used to match the HTTP Request URI path.\n\n* `options`: an object with a `methods` property to filter HTTP methods (e.g., `{ methods: ['GET','POST'] }`).  Optional.\n\n* `argoSegmentFunction`: a function that is passed an instance of `argo` for additional setup.\n\nExample:\n\n```javascript\nargo()\n  .map('^/payments', function(server) {\n    server\n      .use(oauth)\n      .target('http://backend_payment_server');\n  })\n```\n<a name=\"include\"/>\n### include(package)\n\n* `package`: An object that contains a `package` property.\n\nThe `package` property is a function that takes an argo instance as a paramter and returns an object that contains a `name` and an `install` function.\n\nExample:\n\n```javascript\nvar superPackage = function(argo) {\n  return {\n    name: 'Super Package',\n    install: function() {\n      argo\n        .use(oauth)\n        .route('^/super$', require('./super'));\n    }\n  };\n};\n\nargo()\n  .include({ package: superPackage})\n```\n<a name=\"listen\"/>\n### listen(port)\n\n* `port`: A port on which the server should listen.\n\n<a name=\"error-handling\"/>\n### Error Handling\n\nArgo allows a special `error` handler for capturing state when an uncaught exception occurs.\n\n```javascript\nargo()\n  .use(function(handle) {\n    handle('error', function(env, error, next) {\n      console.log(error.message);\n      env.response.statusCode = 500;\n      env.response.body = 'Internal Server Error';\n      next(env);\n      process.exit();\n    });\n  })\n  .get('^/$', function(handle) {\n    handle('request', function(env, next) {\n      env.response.body = 'Hello World!';\n      next(env);\n    });\n  })\n  .get('^/explode$', function(handle) {\n    handle('request', function(env, next) {\n      setImmediate(function() { throw new Error('Ahoy!'); });\n    });\n  })\n  .listen(3000);\n```\n\nUnlike other named pipelines, there should be only one error handler assigned to an Argo server. It is recommended to exit the process once an error has been handled. This feature uses [domains](http://nodejs.org/api/domain.html).\n\nSee [`cluster.js`](https://github.com/argo/argo/blob/master/example/cluster.js) for an example of using error handling to restart workers in a cluster.\n\n## Tests\n\nUnit tests: \n\n```bash\n$ npm test\n```\n\nTest Coverage:\n\n```bash\n$ npm run-script coverage\n```\n\n## License\nMIT\n","created":"2013-05-01T15:20:44.029Z","modified":"2017-04-06T00:51:54.759Z","lastPublisher":{"name":"adammagaluk","email":"AdamMagaluk@gmail.com"},"owners":[{"name":"adammagaluk","email":"AdamMagaluk@gmail.com"},{"name":"kevinswiber","email":"kswiber@gmail.com"},{"name":"mdobs","email":"mdobson4@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"argo","_nodeVersion":"6.9.2","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/argo-1.0.1.tgz_1491232715109_0.7730578579939902"},"_npmUser":{"name":"adammagaluk","email":"AdamMagaluk@gmail.com"},"_npmVersion":"3.10.9","_rev":"4-d1ed1708da8ba60939a40cb951b343ff","_shasum":"0d4101b30c6856531129efe764a9608e76a5c3fa","author":{"name":"Kevin Swiber","email":"kswiber@gmail.com"},"bugs":{"url":"https://github.com/argo/argo/issues"},"contributors":[{"name":"Kevin Swiber","email":"kswiber@gmail.com"},{"name":"Matthew Dobson","email":"mdobson4@gmail.com"},{"name":"Greg Brail","email":"greg@apigee.com"}],"directories":{"example":"example"},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"0d4101b30c6856531129efe764a9608e76a5c3fa","tarball":"https://registry.npmjs.org/argo/-/argo-1.0.1.tgz"},"maintainers":[{"name":"adammagaluk","email":"AdamMagaluk@gmail.com"},{"name":"kevinswiber","email":"kswiber@gmail.com"},{"name":"mdobs","email":"mdobson4@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-06T00:51:54.759Z","created":"2013-05-01T15:20:44.029Z","0.1.5":"2013-05-01T15:20:45.105Z","0.1.6":"2013-05-01T15:21:33.514Z","0.1.7":"2013-06-10T19:54:51.211Z","0.1.8":"2013-06-10T21:35:22.010Z","0.2.0":"2013-07-03T14:32:05.627Z","0.2.1":"2013-07-12T15:16:02.360Z","0.2.2":"2013-08-23T15:22:47.213Z","0.3.2":"2013-08-29T20:03:38.105Z","0.4.0-alpha":"2013-09-09T18:39:50.894Z","0.4.0-alpha.2":"2013-09-11T19:13:14.463Z","0.4.0-alpha.3":"2013-09-12T02:01:49.150Z","0.4.0-alpha.4":"2013-09-12T19:29:57.712Z","0.4.0-beta":"2013-09-20T14:50:08.113Z","0.4.1-beta":"2013-10-10T15:49:32.961Z","0.4.2":"2013-10-29T18:36:52.319Z","0.4.3":"2013-10-30T20:00:23.455Z","0.4.4":"2013-11-07T20:02:39.715Z","0.4.5":"2013-11-13T19:41:22.862Z","0.4.6":"2013-11-13T22:12:06.651Z","0.4.7":"2013-11-14T16:02:10.287Z","0.4.8":"2014-01-03T18:36:52.819Z","0.4.9":"2014-01-06T20:43:01.257Z","0.5.0":"2014-09-18T13:43:21.999Z","0.6.0":"2015-03-10T14:40:40.157Z","1.0.0":"2015-09-01T19:50:13.567Z","1.0.1":"2017-04-03T15:18:36.008Z"}}}