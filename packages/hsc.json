{"name":"hsc","version":"0.2.3","description":"Comprehensive HTTP Status Code Information in Node.js Made Easy!","keywords":["http","status","codes"],"main":"lib/hsc.js","license":"MIT","repository":"https://github.com/qw3rtman/hsc","scripts":{"test":"jscs -p airbnb lib examples"},"homepage":"https://github.com/qw3rtman/hsc","engines":{"node":">=0.10.0"},"preferGlobal":false,"dependencies":{"request":"^2.53.0"},"devDependencies":{"jscs":"~1.11.3"},"gitHead":"a1dd107f6f59c4c60d3ca6d4f8b59ca9fc64b644","versions":[{"number":"0.0.1","date":"2015-03-23T04:20:31.171Z"},{"number":"0.1.0","date":"2015-03-23T05:12:38.840Z"},{"number":"0.2.0","date":"2015-03-23T05:42:52.150Z"},{"number":"0.2.1","date":"2015-03-23T05:49:02.824Z"},{"number":"0.2.2","date":"2015-03-23T05:59:09.448Z"},{"number":"0.2.3","date":"2015-03-23T06:05:41.482Z"}],"readme":"`hsc`\n=====\n[![Build Status](https://travis-ci.org/qw3rtman/hsc.svg?branch=master)](https://travis-ci.org/qw3rtman/gg)&nbsp;\n![](https://img.shields.io/npm/dm/hsc.svg)&nbsp;\n![npm version](http://img.shields.io/npm/v/hsc.svg)&nbsp;\n[![npm version](https://badge.fury.io/js/hsc.svg)](http://badge.fury.io/js/hsc)&nbsp;\n![](https://img.shields.io/npm/l/hsc.svg)&nbsp;  \n[![NPM](https://nodei.co/npm/hsc.png?mini=true)](https://nodei.co/npm/hsc/)\n\n## Comprehensive HTTP Status Code Information in Node.js Made Easy!\n\n```js\nvar hsc = require('hsc');\n\nhsc.code(404, function(information) {\n  console.log(information.summary);\n});\n```\n\n```\nrequested resource could not be found\n```\n\n`hsc` is an npm package that aims to simplify the retrieval of HTTP status code information. `hsc` relies on the wonderful [httpstatus.es](http://httpstatus.es/) [API](https://github.com/citricsquid/httpstatus.es).\n\nPractical uses of `hsc` include:\n* Translating HTTP status codes into something users can understand.\n\n`hsc` is simple to install and even more simple to use.\n\n## Installation\n`hsc` is an npm module, so simply run:\n\n```bash\nnpm install hsc\n```\n\nor, if you want to add `hsc` as a dependency to your `package.json` file, run:\n\n```bash\nnpm install hsc --save\n```\n\n## Usage\n### Standard report with bare-bones information.\n```js\nhsc.code(200, function(information) {\n  console.log(information);\n});\n```\n\n```json\n{\n  \"code\": \"200\",\n  \"title\": \"OK\",\n  \"summary\": \"standard response for successful HTTP requests\",\n  \"status\": \"success\"\n}\n```\n\n### Report with descriptions, but no references.\n```js\nhsc.code(200, function(information) {\n  console.log(information);\n}, true);\n\nhsc.code(200, function(information) {\n  console.log(information);\n}, true, false);\n```\n\n```json\n{\n  \"code\": \"200\",\n  \"title\": \"OK\",\n  \"summary\": \"standard response for successful HTTP requests\",\n  \"descriptions\": {\n    \"wikipedia\": {\n      \"body\": \"Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action.\",\n      \"link\": \"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#200\"\n    },\n    \"ietf\": {\n      \"body\": \"The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action;\",\n      \"link\": \"http://www.ietf.org/rfc/rfc2616.txt\"\n    }\n  },\n  \"status\": \"success\"\n}\n```\n\n### Report with references, but no descriptions.\n```js\nhsc.code(200, function(information) {\n  console.log(information);\n}, false, true);\n```\n```json\n{\n  \"code\": \"200\",\n  \"title\": \"OK\",\n  \"summary\": \"standard response for successful HTTP requests\",\n  \"references\": {\n    \"rails\": {\n      \"title\": \"Rails HTTP Status Symbol\",\n      \"value\": \":ok\"\n    }\n  },\n  \"status\": \"success\"\n}\n```\n\n### Report with both descriptions and references.\n```js\nhsc.code(200, function(information) {\n  console.log(information);\n}, true, true);\n```\n\n```json\n{\n  \"code\": \"200\",\n  \"title\": \"OK\",\n  \"summary\": \"standard response for successful HTTP requests\",\n  \"descriptions\": {\n    \"wikipedia\": {\n      \"body\": \"Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action.\",\n      \"link\": \"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#200\"\n    },\n    \"ietf\": {\n      \"body\": \"The request has succeeded. The information returned with the response is dependent on the method used in the request, for example: GET an entity corresponding to the requested resource is sent in the response; HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body; POST an entity describing or containing the result of the action;\",\n      \"link\": \"http://www.ietf.org/rfc/rfc2616.txt\"\n    }\n  },\n  \"references\": {\n    \"rails\": {\n      \"title\": \"Rails HTTP Status Symbol\",\n      \"value\": \":ok\"\n    }\n  },\n  \"status\": \"success\"\n}\n```\n\nIn the event of an error, the `status` property will become `\"error\"` and the `error` property will hold the error.\n\n### Invalid HTTP status code.\n```js\nhsc.code(2500, function(information) {\n  console.log(information);\n});\n```\n\n```json\n{\n  \"status\": \"error\",\n  \"error\": \"Invalid code 2500.\"\n}\n```\n\n### Miscellaneous error during request.\n```js\n// Some call.\n```\n\n```json\n{\n  \"status\": \"error\",\n  \"error\": \"Error with request.\"\n}\n```\n\nThese examples, excluding the \"Miscellaneous error during request.\", can also be found in `/examples/everything.js`.\n\n## Contributing\nContributions are always welcome.\n\nWe follow [Airbnb's coding standard](https://github.com/airbnb/javascript), so make sure you use that as a guideline.\n\nFork our code, make a new branch, and send a pull request.\n\n## TODO:\n","starsCount":1,"created":"2015-03-23T04:20:31.171Z","modified":"2015-03-23T06:05:41.482Z","lastPublisher":{"name":"qw3rtman","email":"nimit@nimitkalra.com"},"owners":[{"name":"qw3rtman","email":"nimit@nimitkalra.com"}],"other":{"_attachments":{},"_from":".","_id":"hsc","_nodeVersion":"0.12.0","_npmUser":{"name":"qw3rtman","email":"nimit@nimitkalra.com"},"_npmVersion":"2.5.1","_rev":"1-53cbbd8d3c2a4edc3c6951ed541fa6f3","_shasum":"b0431996443b38fbefc803aa23c4be1472f84c3e","author":{"name":"Nimit Kalra","email":"nimit@nimitkalra.com","url":"http://nimitkalra.com"},"bugs":{"url":"https://github.com/qw3rtman/hsc/issues"},"directories":{},"dist-tags":{"latest":"0.2.3"},"dist":{"shasum":"b0431996443b38fbefc803aa23c4be1472f84c3e","tarball":"http://registry.npmjs.org/hsc/-/hsc-0.2.3.tgz"},"maintainers":[{"name":"qw3rtman","email":"nimit@nimitkalra.com"}],"readmeFilename":"README.md","time":{"modified":"2015-03-23T06:05:41.482Z","created":"2015-03-23T04:20:31.171Z","0.0.1":"2015-03-23T04:20:31.171Z","0.1.0":"2015-03-23T05:12:38.840Z","0.2.0":"2015-03-23T05:42:52.150Z","0.2.1":"2015-03-23T05:49:02.824Z","0.2.2":"2015-03-23T05:59:09.448Z","0.2.3":"2015-03-23T06:05:41.482Z"},"users":{"qw3rtman":true}}}