{"name":"node-multi-webserver","version":"1.2.4","description":"A multi http server manager","main":"lib/main.js","scripts":{"start":"node lib/main.js","test":"gulp"},"repository":"https://github.com/Psychopoulet/node-multi-webserver","keywords":["http","https","multi","many","ssl","port","server","web"],"license":"ISC","dependencies":{"http-shutdown":"^1.0.3"},"devDependencies":{"express":"^4.14.0","simplessl":"^2.0.0","node-promfs":"^0.1.0","gulp":"^3.9.1","gulp-eslint":"^2.1.0","gulp-exclude-gitignore":"^1.0.0","gulp-mocha":"^2.2.0","gulp-plumber":"^1.1.0"},"homepage":"https://github.com/Psychopoulet/node-multi-webserver#readme","engines":{"node":">=4.0.0"},"gitHead":"b93e604ad4a6ddfae6c2c5608b2703e7b9d8a80c","versions":[{"number":"0.1.0","date":"2016-07-04T07:24:54.711Z"},{"number":"0.1.1","date":"2016-07-04T08:04:34.126Z"},{"number":"0.1.2","date":"2016-07-04T08:08:57.449Z"},{"number":"0.1.3","date":"2016-07-04T09:17:17.033Z"},{"number":"1.0.0","date":"2016-07-04T15:43:10.870Z"},{"number":"1.0.1","date":"2016-08-02T15:34:55.373Z"},{"number":"1.0.2","date":"2016-08-02T15:42:18.520Z"},{"number":"1.0.3","date":"2016-08-03T15:54:39.274Z"},{"number":"1.1.0","date":"2016-08-04T09:24:45.405Z"},{"number":"1.2.0","date":"2016-08-05T08:46:54.566Z"},{"number":"1.2.1","date":"2016-08-05T09:39:14.698Z"},{"number":"1.2.2","date":"2016-08-08T08:14:27.151Z"},{"number":"1.2.3","date":"2016-08-08T15:41:02.987Z"},{"number":"1.2.4","date":"2016-08-08T15:57:35.981Z"}],"readme":"# node-multi-webserver\r\nA multi http server manager\r\n\r\n# Installation\r\n\r\n```bash\r\n$ npm install node-multi-webserver\r\n```\r\n\r\n# Features\r\n\r\n  run the same server with different configurations (ports, ssl, etc...)\r\n  \r\n  note : to use sockets on the same way, you should see the [node-multi-socketservers](https://www.npmjs.com/package/node-multi-socketservers) module\r\n\r\n# Doc\r\n\r\n* ``` object servers ``` servers managed (servers[x].options & servers[x].server)\r\n\r\n* ``` constructor() ```\r\n\r\n* ``` listening() : return boolean  ``` is there a server listening ?\r\n* ``` addServer(object options) : return Promise instance  ``` add server options (mandatory : \"port\" & \"name\" for http & https, + \"key\" & \"cert\" for https) (ssl : default = false)\r\n* ``` setTimeout(number timeout) : return Promise instance ``` set timeout to all servers\r\n* ``` listen(function requestListener) : return Promise instance ``` run your logic on all servers\r\n* ``` close() : return Promise instance ``` close all servers & kill sockets (with \"http-shutdown\" module)\r\n* ``` release() : return Promise instance ``` call \"close\" and forget servers options\r\n\r\n# Examples\r\n\r\n### with express\r\n\r\n```js\r\nconst http = require(\"http\"),\r\n      https = require(\"https\"),\r\n      express = require(\"express\"),\r\n      multiservers = require(\"node-multi-webserver\");\r\n\r\nlet servers = new multiservers(),\r\n    app = express().get(\"/\", (req, res) => {\r\n\r\n  res.set(\"Content-Type\", contentType).send(message);\r\n\r\n});\r\n\r\nreturn servers.addServer({\r\n  port: 80,\r\n  name: \"http server\"\r\n}).then(() => {\r\n\r\n  return servers.addServer({\r\n    port: 443,\r\n    name: \"secure server\",\r\n    ssl: true,\r\n    key: \"YOUR_PRIVATE_KEY\",\r\n    cert: \"YOUR_CERTIFICATE\"\r\n  });\r\n\r\n}).then(() => {\r\n\r\n  return servers.addServer({\r\n    port: 1337,\r\n    name: \"admin server\",\r\n    key: \"YOUR_PRIVATE_KEY\",\r\n    cert: \"YOUR_CERTIFICATE\"\r\n  });\r\n\r\n}).then(() => {\r\n\r\n  return servers.setTimeout(2 * 1000);\r\n\r\n}).then(() => {\r\n\r\n  return servers.listen(app);\r\n\r\n}).catch((err) => {\r\n\r\n  console.log(err);\r\n\r\n  servers.release().catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\n});\r\n```\r\n### native\r\n\r\n```js\r\nconst http = require(\"http\"),\r\n      https = require(\"https\"),\r\n      multiservers = require(\"node-multi-webserver\");\r\n\r\nlet servers = new multiservers();\r\n\r\nreturn servers.addServer({\r\n  port: 80,\r\n  name: \"http server\"\r\n}).then(() => {\r\n\r\n  return servers.addServer({\r\n    port: 443,\r\n    name: \"secure server\",\r\n    ssl: true,\r\n    key: \"YOUR_PRIVATE_KEY\",\r\n    cert: \"YOUR_CERTIFICATE\"\r\n  });\r\n\r\n}).then(() => {\r\n\r\n  return servers.addServer({\r\n    port: 1337,\r\n    name: \"admin server\",\r\n    key: \"YOUR_PRIVATE_KEY\",\r\n    cert: \"YOUR_CERTIFICATE\"\r\n  });\r\n\r\n}).then(() => {\r\n\r\n  return servers.setTimeout(2 * 1000);\r\n\r\n}).then(() => {\r\n\r\n  return servers.listen((req, res) => {\r\n\r\n    res.writeHead(200, {\"Content-Type\": contentType});\r\n    res.end(\"hello world, from http:80, https:443 or https:1337\");\r\n\r\n  });\r\n\r\n}).catch((err) => {\r\n\r\n  console.log(err);\r\n\r\n  servers.release().catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\n});\r\n```\r\n\r\n\r\n# Tests\r\n\r\n```bash\r\n$ gulp\r\n```\r\n\r\n## License\r\n\r\n  [ISC](LICENSE)\r\n","created":"2016-07-04T07:24:54.711Z","modified":"2016-08-08T15:57:35.981Z","lastPublisher":{"name":"psychopoulet","email":"svidal1@free.fr"},"owners":[{"name":"psychopoulet","email":"svidal1@free.fr"}],"other":{"_attachments":{},"_from":".","_id":"node-multi-webserver","_nodeVersion":"6.3.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-multi-webserver-1.2.4.tgz_1470671854030_0.5899247869383544"},"_npmUser":{"name":"psychopoulet","email":"svidal1@free.fr"},"_npmVersion":"3.10.3","_rev":"1-fb9aa30186d89c701aecdc656cf20966","_shasum":"47baeafeafeedf50c3a5433d49390ae84318c68a","author":{"name":"SÃ©bastien VIDAL"},"bugs":{"url":"https://github.com/Psychopoulet/node-multi-webserver/issues"},"directories":{},"dist-tags":{"latest":"1.2.4"},"dist":{"shasum":"47baeafeafeedf50c3a5433d49390ae84318c68a","tarball":"http://registry.npmjs.org/node-multi-webserver/-/node-multi-webserver-1.2.4.tgz"},"maintainers":[{"name":"psychopoulet","email":"svidal1@free.fr"}],"readmeFilename":"README.md","time":{"modified":"2016-08-08T15:57:35.981Z","created":"2016-07-04T07:24:54.711Z","0.1.0":"2016-07-04T07:24:54.711Z","0.1.1":"2016-07-04T08:04:34.126Z","0.1.2":"2016-07-04T08:08:57.449Z","0.1.3":"2016-07-04T09:17:17.033Z","1.0.0":"2016-07-04T15:43:10.870Z","1.0.1":"2016-08-02T15:34:55.373Z","1.0.2":"2016-08-02T15:42:18.520Z","1.0.3":"2016-08-03T15:54:39.274Z","1.1.0":"2016-08-04T09:24:45.405Z","1.2.0":"2016-08-05T08:46:54.566Z","1.2.1":"2016-08-05T09:39:14.698Z","1.2.2":"2016-08-08T08:14:27.151Z","1.2.3":"2016-08-08T15:41:02.987Z","1.2.4":"2016-08-08T15:57:35.981Z"}}}