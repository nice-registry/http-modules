{"name":"express-hijackresponse","description":"Rewrite HTTP responses on their way out.","version":"0.2.1","repository":"https://github.com/papandreou/express-hijackresponse","main":"lib/hijackResponse.js","engines":{"node":">=0.10.0"},"devDependencies":{"bufferedstream":"=1.0.1","express":"4.8.8","request":"=2.9.153","vows":"0.7.0"},"gitHead":"3ce9ce337ecee0261b04ae38ba5a6a734b1f4669","homepage":"https://github.com/papandreou/express-hijackresponse","scripts":{},"versions":[{"number":"0.0.1","date":"2012-03-07T00:01:14.131Z"},{"number":"0.0.2","date":"2012-03-07T16:28:43.946Z"},{"number":"0.0.3","date":"2012-03-07T22:11:34.107Z"},{"number":"0.0.4","date":"2012-03-07T23:49:35.792Z"},{"number":"0.0.5","date":"2012-03-12T09:06:28.161Z"},{"number":"0.0.6","date":"2012-03-11T12:40:23.894Z"},{"number":"0.0.7","date":"2012-03-13T23:44:40.105Z"},{"number":"0.1.0","date":"2013-03-12T17:02:18.762Z"},{"number":"0.1.1","date":"2013-03-19T12:36:29.969Z"},{"number":"0.1.2","date":"2013-03-26T12:56:45.591Z"},{"number":"0.2.1","date":"2014-10-13T09:38:17.156Z"}],"readme":"express-hijackresponse\n======================\n\nModule that allows you to rewrite HTTP responses from middleware\nfurther down the stack, such as static providers, HTTP proxies etc.\n\nIt's mostly useful for content filters. The original use case is\ninjecting an inline JavaScript into all HTML responses in <a\nhref='https://github.com/One-com/livestyle'>LiveStyle</a>.\n\n\nInstallation\n------------\n\nMake sure you have node.js and npm installed, then run:\n\n    npm install express-hijackresponse\n\nUsage\n-----\n\nRequiring the module installs a `hijack` method on your response objects:\n\n    var express = require('express');\n    require('express-hijackresponse');\n\n    var app = express.createServer();\n\n    // ...\n\n    app.use(function (req, res, next) {\n        res.hijack(function (err, res) {\n            if (err) {\n                res.unhijack(); // Make the original res object work again\n                return next(err);\n            }\n            // 'res' is now a fake response object with `writeHead`,\n            // `write`, `end`, `getHeader`, `setHeader`, `removeHeader` methods.\n\n            if (/^text/html(?:;$)/.test(res.getHeader('Content-Type'))) {\n                // Don't hijack HTML responses:\n                return res.unhijack();\n            }\n            res.setHeader('X-Hijacked', 'yes!');\n            res.removeHeader('Content-Length');\n\n            // It emits 'data' and 'end' events representing the original response:\n            res.on('data', function (chunk, encoding) {\n                // The original response emitted a chunk!\n            }).on('end', function () {\n                // The original response ended!\n                res.end('Sorry, your data was hijacked!');\n            });\n        });\n        // next() must be called explicitly, even when hijacking the response:\n        next();\n    });\n\n\nExample\n-------\n\nRewrite all JSON responses so they're wrapped into a {\"foo\": ...} literal:\n\n    var express = require('express');\n    require('express-hijackresponse');\n\n    express.createServer()\n        .use(function (req, res, next) {\n            if (req.accepts('json')) {\n                res.hijack(function (err, res) {\n                    if (err) {\n                        res.unhijack(); // Make the original res object work again\n                        return next(err);\n                    }\n                    // Inspect the original response headers to see if we actually want to rewrite the response:\n                    if (/\\/json$/.test(res.getHeader('Content-Type'))) {\n                        // Remove Content-Length if it's there (it won't be correct when the response has been rewritten):\n                        res.removeHeader('Content-Length');\n                        res.writeHead(res.statusCode);\n                        res.write('{\"foo\":');\n\n                        // Stream the original response and slip in a '}' before ending:\n                        res.pipe(res, {end: false});\n                        res.on('end', function () {\n                            res.write('}');\n                            res.end();\n                        });\n                    } else {\n                        res.unhijack();\n                    }\n                });\n            }\n            next();\n        })\n        .use(express.static(__dirname))\n        .listen(1337);\n\nTODO\n----\n\nBetter error handling, backpressure support when streaming.\n\n\nLicense\n-------\n\n3-clause BSD license -- see the `LICENSE` file for details.\n","starsCount":0,"created":"2012-03-07T00:01:12.619Z","modified":"2017-05-22T17:19:55.097Z","lastPublisher":{"name":"maartenwinter","email":"maarten@mwinter.nl"},"owners":[{"email":"andreas@one.com","name":"papandreou"},{"email":"mail@mwinter.nl","name":"maartenwinter"}],"other":{"_attachments":{},"_from":".","_id":"express-hijackresponse","_npmUser":{"name":"maartenwinter","email":"maarten@mwinter.nl"},"_npmVersion":"1.4.23","_rev":"2-72ed7950bff0acb51599421513c25d85","_shasum":"1aa2ce09920e05f8141df800408c27bee9386b92","author":{"name":"Andreas Lind Petersen","email":"andreas@one.com"},"bugs":{"url":"https://github.com/papandreou/express-hijackresponse/issues"},"directories":{},"dist-tags":{"latest":"0.2.1"},"dist":{"shasum":"1aa2ce09920e05f8141df800408c27bee9386b92","tarball":"http://registry.npmjs.org/express-hijackresponse/-/express-hijackresponse-0.2.1.tgz"},"maintainers":[{"email":"andreas@one.com","name":"papandreou"},{"email":"mail@mwinter.nl","name":"maartenwinter"}],"readmeFilename":"README.md","time":{"modified":"2017-05-22T17:19:55.097Z","created":"2012-03-07T00:01:12.619Z","0.0.1":"2012-03-07T00:01:14.131Z","0.0.2":"2012-03-07T16:28:43.946Z","0.0.3":"2012-03-07T22:11:34.107Z","0.0.4":"2012-03-07T23:49:35.792Z","0.0.5":"2012-03-12T09:06:28.161Z","0.0.6":"2012-03-11T12:40:23.894Z","0.0.7":"2012-03-13T23:44:40.105Z","0.1.0":"2013-03-12T17:02:18.762Z","0.1.1":"2013-03-19T12:36:29.969Z","0.1.2":"2013-03-26T12:56:45.591Z","0.2.1":"2014-10-13T09:38:17.156Z"},"users":{}}}