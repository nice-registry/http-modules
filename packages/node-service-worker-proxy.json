{"name":"node-service-worker-proxy","version":"1.0.2","main":"src/index.js","bin":{"service-worker-proxy":"./cli.js"},"scripts":{"test":"mocha --ui exports tests/test.js --no-timeouts","from-env":"env.js"},"license":"MIT","dependencies":{"bunyan":"^1.8.5","fs-promise":"^1.0.0","node-fetch":"^1.6.3","node-service-worker":"^2.0.3","serve-static":"^1.11.1","server-destroy":"^1.0.1","yargs":"^6.5.0"},"devDependencies":{"mocha":"^3.2.0"},"repository":"https://github.com/gdnmobilelab/node-service-worker-proxy","gitHead":"4b04b663351a75eb782a24ff7e0daee691769830","description":"A proxy server that allows you to send HTTP requests through an instance of [`node-service-worker`](https://github.com/gdnmobilelab/node-service-worker).","homepage":"https://github.com/gdnmobilelab/node-service-worker-proxy#readme","versions":[{"number":"1.0.0","date":"2016-12-12T21:52:12.164Z"},{"number":"1.0.1","date":"2017-01-03T19:40:07.898Z"},{"number":"1.0.2","date":"2017-01-10T20:41:01.494Z"}],"readme":"# node-service-worker-proxy\n\nA proxy server that allows you to send HTTP requests through an instance of\n[`node-service-worker`](https://github.com/gdnmobilelab/node-service-worker).\n\n## Why?\n\nWhile most service worker demos demonstrate using the `fetch` event to return\nitems in the service worker cache, it can actually construct responses manually.\n\nSo, we can use the service worker to manually construct HTTP responses just like\nwe would with a Node server, complete with whatever templating library we choose.\nBut the API is entirely different to that of Express or any other Node HTTP server\nlibrary, which is where this proxy comes in.\n\n## What works?\n\nMuch like node-service-worker, very little right now. But it does succesfully pass\nrequests through into the worker, and to the `source` if `fetch()` is called from inside\nthe worker (or we'd get an infinite loop).\n\nIt does not (and will not) do things like gzip responses â€“ you should put this behind\nNginx or similar when serving to the public, and setup compression, caching etc. there.\n\n## How do I use it?\n\nAfter running:\n\n    npm install node-service-worker-proxy\n\nyou can call `service-worker-proxy` in any NPM script. Or just manually call:\n\n    node cli.js\n\nwith these arguments:\n\n - `source`: the directory or HTTP server you want to pull content from. For example:\n   - `../html-build`\n   - `https://proxy-origin.example.com`\n\n   Note: only local directory usage has been tested, but remote should work as well\n\n- `target`: the address this proxy will be serving from (i.e. the URL we will send into\n  the worker). Example: `https://www.example.com`.\n\n- `worker`: the relative path (from `source`) of the JS file to load as a worker.\n  Example: `sw.js`.\n\n- `scope`: the scope to register the worker under. Just like `navigator.serviceWorker.register`\n  in the browser this is optional, and will default to the directory the `worker` is in.\n\n- `maxAge`: if you're using a local source there won't be any HTTP headers to forward - this\n  argument lets you specify how long static files should be cached, by default. Accepts an integer\n  value millisecond value, or a string parsable by [`ms`](https://www.npmjs.com/package/ms). Examples:\n   - `6000` = 6 seconds\n   - `60s` = 60 seconds \n\nin the format of:\n\n    service-worker-proxy --source ../html-build --target https://www.example.com --maxAge 60s\n\n## Using in Docker\n\nI've thrown together a quick Dockerfile that'll let you use this in Docker. You need to specify\nthe arguments above as `--build-arg`s, as well as make sure your local source directory is in\nthe current directory. Also, use `sourcelocal` instead of `source` (and you can only specify a local path).\n\n Example script to assemble:\n\n    cp -r ../html-build ./build-source\n    docker build -t gdnmobilelab/app-proxy . --build-arg sourcelocal=./build-source --build-arg target=https://www.example.com --build-arg worker=sw.js --build-arg maxAge=\"60s\"\n    rm -rf ./build-source\n\nThis could do with some improvement. But it works.\n\n## Tests\n\nSome quick tests are available. Just run:\n\n   npm test\n\nTo see the results. Needs a lot more test coverage.","created":"2016-12-12T21:52:12.164Z","modified":"2017-01-10T20:41:01.494Z","lastPublisher":{"name":"alastaircoote","email":"npm@alastairc.33mail.com"},"owners":[{"name":"alastaircoote","email":"npm@alastairc.33mail.com"}],"other":{"_attachments":{},"_from":".","_id":"node-service-worker-proxy","_nodeVersion":"6.6.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-service-worker-proxy-1.0.2.tgz_1484080859367_0.4603380321059376"},"_npmUser":{"name":"alastaircoote","email":"npm@alastairc.33mail.com"},"_npmVersion":"3.10.3","_rev":"3-48dddd7d1fe888f60b551f5744b61b13","_shasum":"5b4ae76438a12f576b97feca8ab39b81aad093eb","author":{"name":"Alastair Coote","email":"alastair.coote@gmail.com"},"bugs":{"url":"https://github.com/gdnmobilelab/node-service-worker-proxy/issues"},"directories":{},"dist-tags":{"latest":"1.0.2"},"dist":{"shasum":"5b4ae76438a12f576b97feca8ab39b81aad093eb","tarball":"https://registry.npmjs.org/node-service-worker-proxy/-/node-service-worker-proxy-1.0.2.tgz"},"maintainers":[{"name":"alastaircoote","email":"npm@alastairc.33mail.com"}],"readmeFilename":"readme.md","time":{"modified":"2017-01-10T20:41:01.494Z","created":"2016-12-12T21:52:12.164Z","1.0.0":"2016-12-12T21:52:12.164Z","1.0.1":"2017-01-03T19:40:07.898Z","1.0.2":"2017-01-10T20:41:01.494Z"}}}