{"name":"http-later","version":"1.1.1","description":"queue HTTP requests and replay them later","main":"index.js","dependencies":{"express":"^4","objektify":"^1","httpolyglot":"^0.1","redis":"^1","es6-promise":"^3","concat-stream":"^1","request":"^2","squabble":"^1","propertize":"^2","colors":"^1","console-stamp":"^0.2","async":"^1","concussion":"^1","http-later-redis":"^1","event-emitter-forward":"^1","noopable":"^1","retryable":"^1","tlsfs":"^1"},"scripts":{"test":"mocha"},"license":"MIT","bin":{"http-later":"bin/http-later.js"},"devDependencies":{},"repository":"https://github.com/Zingle/http-later","gitHead":"7ea6626bb33bdbb4297d367f856c6852a5e71013","homepage":"https://github.com/Zingle/http-later#readme","versions":[{"number":"1.0.1","date":"2016-03-14T23:09:22.754Z"},{"number":"1.1.0","date":"2016-11-22T18:42:26.224Z"},{"number":"1.1.1","date":"2016-11-22T18:45:57.090Z"}],"readme":"HTTP Later\n==========\nQueue incoming HTTP requests and replay them later.\n\nUsage\n-----\n```\nUsage: http-later [[-v|--verbose], ...] [-q|--quiet|-s|--silent]\n    [[-A|--accept=<aspec>]] [-S|--storage=<sspec>] [-r|--replay]\n\n  -A  --accept=<aspec>  accept requests; see Accepting Requests below\n  -q  --quiet           do not write any output\n  -s  --silent          alias for --quiet\n  -S  --storage=<sspec> configure server storage; see Storage below\n  -T  --tls=<certspec>  enable TLS server and set default server cert\n                        q.v., Accepting Request tls option for more info\n  -F  --httpsonly       force https security on incoming insecure requests for all accept queues\n  -v  --verbose         increase output; use multiple times for more output\n\nAccepting Requests\n  The --accept option adds a rule describing requests which should be accepted\n  by http-later.  The value is expected to be a comma-delimited list of colon-\n  delimited name:value pairs.  The following names are recognized:\n  \n  host      host name on which to accept requests\n  forward   host name to use when replaying requests\n  method    HTTP method to accept\n  methods   colon-delimited list of HTTP methods to accept\n  path      URL path prefix to accept; 404 for other paths\n  paths     colon-delimited list of URL path prefixes to accept\n  port      port on which server should listen\n  tls       paths to TLS certs (requires -T options); expects colon-delimited\n            file paths: [<pfx>|<cert>:<key>[[:<ca>], ...]]\n  httpsonly force https security on incoming insecure requests (flag)\n  \n  Example: http-later --accept=host:example.com,methods:GET:POST,port:8080\n  \nStorage\n  By default, http-later will try to use a local redis server for storage and\n  prefix all redis keys with \"later:\".  The --storage option can be used to\n  configure other storage options.  The option is expected to be a comma-\n  delimited list of colon-delimited name:value pairs.  The following names are\n  recognized:\n  \n  driver    storage driver name, appended to \"http-later-\" to identify package\n  \n  The default \"redis\" driver also recognized the following name:\n  \n  keyspace  key prefix to use for all redis keys\n  and Redis parameters like:\n  host                   redis server hostname                  (default: 127.0.0.1)\n  port                   redis server port                      (default: 6379)\n  path                   redis server unix_path to socket       (default: null)\n  url                    redis server URL                       (default: null)\n  \n  Example: http-later --storage=keyspace:foo-\n```\n\nExamples\n--------\n**Example:** accept and queue all incoming HTTP requests to /foo/*\n```sh\nhttp-later -Apath:/foo/\n```\n\n**Example:** accept and queue all secure requests to example.com\n```sh\nhttp-later -Ahost:example.com,tls:/path/to/cert:/path/to/key:/path/to/ca\n```\n\n**Example:** accept HTTP requests on port 8000\n```sh\nhttp-later -Aport:8000\n```\n\n**Example:** replay queued requests\n```sh\nhttp-later -r\n```\n\n**Example:** configure redis storage\n```sh\nhttp-later -Sdriver:redis,keyspace:later:\n```\n\nOverview\n--------\nThe HTTP Later module provides a command `http-later` which can be used to\nquickly setup an HTTP request queue.  The default storage provider connects to\na local redis database for storing queued requests.  Various options can be\napplied to filter requests based on method, path, or protocol.  By default, no\nrequests will be accepted and nothing will be queued.\n\nWhen requests arrive, Later will check the request against filters, write\nthe request to the storage provider, and return a response.\n\n### Reponse Status Codes\n\n##### 202 Accepted\nThe request was accepted and queued for later.\n\n##### 404 Not Found\nThe request was rejected because of the URL path.  The `--accept` options can\nbe used to configure which URL paths are allowed.\n\n##### 405 Method Not Allowed\nThe request was rejected becasue of the HTTP method.  The `--accept` option can\nbe used to configure which methods are allowed.\n\n##### 500 Internal Server Error\nSomething went wrong trying to record the request.\n\n### HTTP Later Headers\nThe HTTP Later server generates and recognizes a few custom headers which can\nbe used to control the replay of requests.  It preserves headers except where\nnoted here.\n\n##### X-Later-Attempts\nSent by client to retry the request on failure.  Sets the number of times the\nrequest should be tried.  Defaults to 1.\n\n```\nX-Later-Attempts: 10\nX-Later-Retry-After: 2015-04-01T12:34:56\nX-Later-Retry-On: 403,503\n```\n\n##### X-Later-Callback\nSent by client to have response posted to a callback URL after replay.\n\n```\nX-Later-Callback: https://example.com/receive-queued-response\n```\n\n*Example callback request*\n```\nPOST /recieve-queued-response HTTP/1.1\nHost: example.com\nContent-Type: application/json\n\n{\n    \"req\": {\n        \"httpVersion\": \"1.1\",\n        \"method\": \"GET\",\n        \"url\": \"/path/to/resource?with=foo\",\n        \"headers\": {\n            \"Host\": \"service.example.com\",\n            \"X-Later-Server\": \"queue.example.com\"\n        }\n    },\n    \"res\": {\n        \"httpVersion\": \"1.1\",\n        \"status\": 200,\n        \"headers\": {\n            \"Content-Type\": \"text/plain;charset=ASCII\",\n            \"Content-Length\": \"3\"\n        },\n        \"body\": \"foo\"\n    }\n}\n```\n\n##### X-Later-Host\nSent by client to override the Host header during replay.  The original Host\nheader will be sent in the X-Later-Server header.\n\n*http-later request to queue.example.com and forwarded to service.example.com*\n```\nGET /foo HTTP/1.1\nHost: queue.example.com\nX-Later-Host: service.example.com\n```\n\n*Example request passed on to service.example.com*\n```\nGET /foo HTTP/1.1\nHost: service.example.com\nX-Later-Server: queue.example.com\n```\n\n##### X-Later-Key\nSent in response to client when a request is accepted to uniquely identify the\nqueued request.  Sent to destination during replay as a reference.\n\n```\nX-Later-Key: c74c1c6bf9c9fd10247e85252bd6a012\n```\n\n##### X-Later-Retry-After\nSent by client to indicate the earliest time a retry should be attempted.\nExpects ISO date (YYYY-MM-DDTHH:MM:SS).  Must be used in conjuntion with\n`X-Later-Attempts` (*q.v.*, for example).\n\n##### X-Later-Retry-On\nSent by client to retry on specified response codes.  Comma (`,`) delimited\nlists of HTTP status codes which should be retried.  Must be used in conjuntion\nwith `X-Later-Attempts` (*q.v.*, for example).\n\n##### X-Later-Server\nSent during replay when the Host header was overwritten using the X-Later-Host\nheader.  Contains the original Host header sent by the client.  *q.v.*,\n`X-Later-Host` for example.\n\n##### X-Later-TLS\nBy default, HTTP Later will replay requests over TLS if the incoming request\ncomes over TLS.  The client can send this header to force HTTP Later to replay\nthe request over TLS with a value of \"secure\" and no-TLS with a values of\n\"insecure\".\n\n```\nX-Later-Host: public.example.com\nX-Later-Secure: insecure\n```\n\n### Install\n```sh\ngit clone git@github.com:Zingle/http-later.git\ncd http-later\nnpm install -g\n```\n\n### Replay\nWhen replay is enabled, the request queue will be continuously scanned for new\nrequests.  The requests will then passed along to their destination.  Requests\nwhich fail to connect will be retried for about 5 minutes and then fail.  This\nfailure may then trigger a retry if there are attempts left.\n\n### Storage\nStorage can be customized by writing new storage drivers.  The default storage\ndriver is `redis`.  This causes the `http-later` to load the `http-later-redis`\nmodule, which exports a constructor which is used to create a storage instance.\nThe `http-later` server passes any storage options to the constructor as an\noptions object.\n\n#### Creating A New Storage Driver\nThe following steps should be taken to implement a new storage driver.\n\n * choose a name for the driver\n * add dependency for `http-later-storage`\n * create new class using `createStorage` export from `http-later-storage`\n   * call with `queue`, `unqueue`, and `log` arguments\n   * `queue(object, function)`\n     * store request object in queue\n     * execute callback with two arguments, `err`, and `key`\n       * `key` should uniquely identify the queued request\n   * `unqueue(function)`\n     * remove a request from the queue\n     * execute callback with three arguments, `err`, `req`, and `key`\n       * `req` should be the unqueued request\n       * `key` should be the original key\n   * `log(string, object, function)`\n     * log result\n     * execute callback with `err` argument\n * install the module in the application `node_modules` directory and name\n   the module by taking the driver name and prefixing it with `http-later-`\n\n##### Example Storage Driver\n```js\nvar storage = require(\"http-later-storage\"),\n    randomBytes = require(\"crypto\").randomBytes.bind(null, 16);\n\n/**\n * 'array' storage driver\n * @constructor\n */\nvar ArrayStorage = storage(\n        function(data, done) {\n            var key = randomBytes().toString(\"hex\");\n            this.data = this.data || [];\n            this.data.push({\n                key: key,\n                data: data\n            });\n            done(null, key);\n        },\n        function(done) {\n            this.data = this.data || [];\n            var data = this.data.unshift();\n            done(null, data.data, data.key);\n        },\n        function(key, result, done) {\n            this.log = this.log || {};\n            this.log[key] = result;\n            done();\n        }\n    );\n```\n\n###### Installing Storage Driver\nThe http-later command expects to load drivers using package names beginning\nwith `http-later-`.  If the driver above is named `http-later-array` and\ninstalled to the `node_modules` folder for http-later, the driver will be\nloaded using something like:\n\n```sh\nhttp-later -Sdriver:array\n```\n\n","created":"2016-03-14T23:09:22.754Z","modified":"2016-11-22T18:45:57.090Z","lastPublisher":{"name":"rremer","email":"reanjr@gmail.com"},"owners":[{"name":"rremer","email":"reanjr@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-later","_nodeVersion":"4.2.6","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/http-later-1.1.1.tgz_1479840355371_0.19426219374872744"},"_npmUser":{"name":"rremer","email":"reanjr@gmail.com"},"_npmVersion":"3.10.2","_rev":"3-f2da798449f45d6198ad26e63683150d","_shasum":"8056df83997655667986dc2e4ee891af2d962bb1","author":{"name":"Richard Remer","url":"reanjr@gmail.com"},"bugs":{"url":"https://github.com/Zingle/http-later/issues"},"contributors":[{"name":"Reiner Keller"}],"directories":{},"dist-tags":{"latest":"1.1.1"},"dist":{"shasum":"8056df83997655667986dc2e4ee891af2d962bb1","tarball":"http://registry.npmjs.org/http-later/-/http-later-1.1.1.tgz"},"maintainers":[{"name":"rremer","email":"reanjr@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-22T18:45:57.090Z","created":"2016-03-14T23:09:22.754Z","1.0.1":"2016-03-14T23:09:22.754Z","1.1.0":"2016-11-22T18:42:26.224Z","1.1.1":"2016-11-22T18:45:57.090Z"}}}