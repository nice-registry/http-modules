{"name":"drugged","description":"Prototypal extendable HTTP router","version":"2.0.1","main":"./drugged.js","scripts":{"test":"tap test.js"},"repository":"https://github.com/AndreasMadsen/drugged","keywords":["router","domains","dispatch"],"dependencies":{"http-hash":"2.x.x"},"devDependencies":{"tap":"2.x.x","endpoint":"0.4.x"},"license":"MIT","gitHead":"d30106fba626f10ebfdc005869594c6598d2e469","homepage":"https://github.com/AndreasMadsen/drugged#readme","versions":[{"number":"0.2.0","date":"2013-08-18T20:21:42.579Z"},{"number":"0.2.1","date":"2015-02-25T08:50:43.508Z"},{"number":"1.0.0","date":"2015-10-01T20:14:59.536Z"},{"number":"2.0.0","date":"2015-10-30T17:54:02.009Z"},{"number":"2.0.1","date":"2015-10-30T17:55:59.244Z"}],"readme":"#drugged\n\n> Prototypal extendable HTTP router\n\n## Installation\n\n```sheel\nnpm install drugged\n```\n\n## Example\n\n```javascript\nvar util = require('util');\nvar http = require('http');\nvar drugged = require('drugged');\n\n// Create a router and attach it to a server\nvar router = new drugged.Router();\nvar server = http.createServer();\n    server.on('request', router.dispatch.bind(router));\n    server.listen();\n\n// Extend the this keyword\nrouter.attach(function () {\n  this.prefix = 'file: ';\n});\n\n// Setup a simple router\nrouter.get('/:file', function (file) {\n  this.res.write(this.prefix + file + '\\n');\n  this.res.end('query: ' + this.url.search);\n});\n```\n\n## Documentation\n\n```javascript\nvar drugged = require('drugged');\n```\n\nThere are two main components one is the required [`Router`](#router-constructor) and\nthe other is the optional [`Handle base constructor`](#handle-constructor) that you can\nuse to extend the `this` keyword. You enable this key-feature by using the\n[`router.setHandle`](#routersethandlehandle) method.\n\n### Router constructor\n\nYou create a new `router` instance by calling `drugged.Router`.\n\n```javascript\nvar router = drugged.Router();\n```\n\n#### Router.dispatch(req, res)\n\nTo handle a server request call the `Router.dispatch` method with the `req` and\n`res` objects you got.\n\n```javascript\nvar router = new drugged.Router(Handle);\nvar server = http.createServer(router.dispatch.bind(router));\n    server.listen(8000, '127.0.0.1');\n```\n\n#### Router.attach(fn)\n\nWhen dispatching a request a new `Handle` object is created. This handle object\ncan then be accessed by using the `this` keyword route methods. But before\nthat happens you can extend the `Handle` object by using the `attach` method.\n\n```javascript\nrouter.attach(function () {\n  // this refer to the Handle object\n  this.foo = 'bar';\n});\n```\n\n#### Router.at(path, [method = all], fn)\n\nTo create a route handler you should call `Rotuer.at`.\n\nThe `path` is a string, see the `http-hash` module\n[documentation](https://github.com/Matt-Esch/http-hash#path-formats) for\nmore information on the syntax.\n\nThe `method` argument is optional, if not set the `fn` will handle all methods,\nthats useful if you have some other module there takes care of everything.\n\n```javascript\nrouter.at('/', function () {\n  // this refer to the Handle object\n  this.req.pipe(somemodule()).pipe(this.res);\n});\n```\n\notherwise the `method` can be any `HTTP` method that node.js supports:\n\n```javascript\nrouter.at('/', 'POST', function () {\n  // post message handler\n});\n```\n\nNote the case that there is a `GET` route but no `HEAD` route, `HEAD` requests\nwill be handled by the `GET` route.\n\n```javascript\nrouter.at('/', 'GET', function () {\n  // handles both GET and HEAD requests, but in in the HEAD case res.write\n  //  won't write anything.\n});\n\n// Please note that the POST route still works\n```\n\nYou can also set multiply routes at once using an object:\n\n```javascript\nrouter.at('/', {\n  'HEAD': function () { },\n  'GET': function () { },\n  'POST': function () { }\n});\n// Please note this will overwrite the previous set GET and HEAD routes and\n//  because there now is a HEAD route, it won't be handled by the GET route.\n```\n\nEach route you set will be execute with a variable amount of arguments,\nwhere each argument will refer to an parameter (`:colon`) or splat (`*`) you\nmight have in your route path.\n\n```javascript\nrouter.at('/:first/:last/*', function (first, last, splat) {\n\n});\n```\n\n#### Router\\[method\\]\\(path, fn\\)\n\nThis is a simple shortcut to `router.at` where, eq. `router.get` is is a short\ncut to `router.at(path, 'get', fn)`.\n\nThis shortcut exists for all the HTTP 1.1 methods, for other HTTP methods you\nmust use the `router.at` method.\n\n```javascript\nrouter.option(path, fn);\nrouter.get(path, fn);\nrouter.head(path, fn);\nrouter.post(path, fn);\nrouter.put(path, fn);\nrouter.delete(path, fn);\nrouter.trace(path, fn);\nrouter.connect(path, fn);\n```\n\nThe main method is `drugged.Router` it takes a `Handle` constructor function\nand returns a new `Router` instance.\n\n#### Router.setHandle(Handle)\n\nIn case you want use your own `Handle` constructor use this method. For more\ninformation about the custom and default `Handle` constructor see below.\n\n```javascript\nrouter.setHandle(Handle);\n```\n\nThe default handler is `drugged.DefaultHandle`, but there is also a predefined\n`drugged.DebugHandle` that you can use. This has a special error handler\nthat will print the error and then stop the process.\n\n### Handle constructor\n\nYou create a `Handle` constructor by extending the `drugged.DefaultHandle` constructor\nfunction. After this you have the opportunity to do sync/async operations like\nuser authorization. When you are done you must call the `callback`\n\n```javascript\nfunction Handle(callback) {\n  // Sets `.url`, `.req`, `.res`\n  drugged.DefaultHandle.apply(this, arguments);\n\n  // Do async or sync stuff\n  setTimeout(callback, 10);\n}\nutil.inherits(Handle, drugged.DefaultHandle);\n```\n\n#### Handle.error(err)\n\nThis method is called when an error occur, the `drugged.DefaultHandle` class has a\ndefault `error` method, but you are welcome to overwrite it.\n\nThis is the default error handler and its also an example on how to overwrite\nit:\n\n```javascript\nDefaultHandle.prototype.error = function (err) {\n  var self = this;\n  this.res.statusCode = err.statusCode || 500;\n  this.res.end(err.message);\n};\n```\n\nErrors can come from multiply places, depending on the origin the `err` object\nwill have a different `statusCode` property value.\n\n* No matching route was found: 404\n* A route was found but the method is unsupported: 405\n\nYou can also call `error` your self, in that case no `statusCode` will be set.\n\n#### Handle.req\n\nThe native server request object, see node.js\n[documentation](http://nodejs.org/api/http.html#http_http_incomingmessage).\n\n#### Handle.res\n\nThe native server response object, see node.js\n[documentation](http://nodejs.org/api/http.html#http_class_http_serverresponse).\n\n#### Handle.url\n\nThe `url.parse` result, but without `parseQueryString` enabled, see node.js\n[documentation](http://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost).\n\n## The name\n\nI wrote this module while I was medically drugged, which was pretty hard :)\n","starsCount":1,"created":"2013-08-18T20:21:23.784Z","modified":"2015-10-30T17:55:59.244Z","lastPublisher":{"name":"andreasmadsen","email":"amwebdk@gmail.com"},"owners":[{"name":"andreasmadsen","email":"amwebdk@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"drugged","_nodeVersion":"5.0.0-pre","_npmUser":{"name":"andreasmadsen","email":"amwebdk@gmail.com"},"_npmVersion":"2.14.7","_rev":"1-ef56217ee00b69d297842d87c2a8917b","_shasum":"18a7eadfd557d4cd43c835418429317d13c131b5","author":{"name":"Andreas Madsen","email":"amwebdk@gmail.com"},"bugs":{"url":"https://github.com/AndreasMadsen/drugged/issues"},"directories":{},"dist-tags":{"latest":"2.0.1"},"dist":{"shasum":"18a7eadfd557d4cd43c835418429317d13c131b5","tarball":"http://registry.npmjs.org/drugged/-/drugged-2.0.1.tgz"},"maintainers":[{"name":"andreasmadsen","email":"amwebdk@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-10-30T17:55:59.244Z","created":"2013-08-18T20:21:23.784Z","0.2.0":"2013-08-18T20:21:42.579Z","0.2.1":"2015-02-25T08:50:43.508Z","1.0.0":"2015-10-01T20:14:59.536Z","2.0.0":"2015-10-30T17:54:02.009Z","2.0.1":"2015-10-30T17:55:59.244Z"},"users":{"fgribreau":true}}}