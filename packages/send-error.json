{"name":"send-error","version":"1.0.1","description":"Send errors as HTTP bodies, with some opinionated, but sensible defaults and conventions","devDependencies":{"assert-called":"^0.1.2-1"},"repository":"https://github.com/mmalecki/send-error","scripts":{"test":"node test/simple-test.js"},"gitHead":"573a17ef5fcb4a5549aba238bba05c9e86f30363","homepage":"https://github.com/mmalecki/send-error#readme","versions":[{"number":"1.0.0-1","date":"2015-01-10T19:46:03.210Z"},{"number":"1.0.0-2","date":"2015-01-11T00:09:18.836Z"},{"number":"1.0.0-3","date":"2015-01-11T00:24:00.829Z"},{"number":"1.0.1","date":"2015-08-06T01:28:04.494Z"}],"readme":"# send-error\n[![Build Status](https://travis-ci.org/mmalecki/send-error.png?branch=master)](https://travis-ci.org/mmalecki/send-error)\n\nSend errors as HTTP bodies, with some opinionated, but sensible defaults and\nconventions.\n\n## Why?\nBecause errors are important, and I found that having a convention around them\nhelps with making sure that they end up being handled and reported.\n\n## How?\n```js\nvar http = require('http')\nvar sendError = require('send-error')()\nvar db = require('./db.js')()\n\nfunction NotFoundError(msg) {\n  this.statusCode = 404\n  Error.call(this, msg || 'Not found')\n}\n\nhttp.createServer(function(req, res) {\n  db.get('foo', function(err, entity) {\n    if (err) return sendError(req, res, err)\n    if (!entity) return sendError(req, res, new NotFoundError())\n    res.writeHead(200, {'content-type': 'application/json'})\n    res.end(JSON.stringify(entity))\n  })\n})\n```\n\n## API\n\n### `SendError(options)`\n\n* `options` - optional\n  * `options.contentType` (`String`, optional, defaults to `'application/json'`) -\n    what Content-Type header to use for errors. This might be useful if your service\n    defines its own Content-Type .\n  * `options.exclude` (`Array`, optional, defaults to `[]`)- which error properties\n    to exlude from the stringified error.\n  * `options.includeStack` (`Boolean`)- whether to include stack trace. As\n    including the stack trace in the error is a potential security risk (also,\n    users of your API rarely care about it and you should be reporting it\n    somewhere yourself), this option defaults to `false`.\n  * `onerror` (`Function(http.IncomingMessage, http.ServerResponse, Error)`, optional) -\n    a function to call when the function returned by the constructor is called.\n    When called, it's passed the request, response and error.\n\n### `sendError(req, res, error)`\nReturned by the `SendError` constructor.\n\n* `req` (`http.IncomingMessage`)\n* `req` (`http.ServerResponse`)\\\n* `err` (`Error`) - error you want to be sent\n","created":"2015-01-10T19:46:03.210Z","modified":"2015-08-06T01:28:04.494Z","lastPublisher":{"name":"mmalecki","email":"me@mmalecki.com"},"owners":[{"name":"mmalecki","email":"me@mmalecki.com"}],"other":{"_attachments":{},"_from":".","_id":"send-error","_nodeVersion":"2.4.0","_npmUser":{"name":"mmalecki","email":"me@mmalecki.com"},"_npmVersion":"2.13.0","_rev":"1-1c4c84b06616eaf2e07f6a28f0895482","_shasum":"b6102e3285e576357eefce01350b9d3ec658ab89","author":{"name":"Maciej Ma≈Çecki","email":"me@mmalecki.com"},"bugs":{"url":"https://github.com/mmalecki/send-error/issues"},"directories":{},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"b6102e3285e576357eefce01350b9d3ec658ab89","tarball":"http://registry.npmjs.org/send-error/-/send-error-1.0.1.tgz"},"maintainers":[{"name":"mmalecki","email":"me@mmalecki.com"}],"readmeFilename":"README.md","time":{"modified":"2015-08-06T01:28:04.494Z","created":"2015-01-10T19:46:03.210Z","1.0.0-1":"2015-01-10T19:46:03.210Z","1.0.0-2":"2015-01-11T00:09:18.836Z","1.0.0-3":"2015-01-11T00:24:00.829Z","1.0.1":"2015-08-06T01:28:04.494Z"}}}