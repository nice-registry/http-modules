{"name":"dutch-master","version":"0.2.0","description":"Wraps the Node cluster module to provide a full HTTP clustering solution with lifecycle management for workers.","main":"index.js","license":"MIT","scripts":{"test":"jshint --exclude=node_modules . && ./node_modules/.bin/mocha --compilers js:test/support/babel test"},"repository":"https://github.com/change/dutch-master","dependencies":{"async":"^0.9.0","lodash":"^4.6.1"},"devDependencies":{"JSONStream":"^0.10.0","babel":"^5.0.12","body-parser":"^1.10.0","bunyan":"^1.2.3","express":"^4.10.6","immutable":"^3.4.1","js-csp":"^0.4.0","jshint":"^2.5.6","mocha":"^2.0.1","request":"^2.51.0","transducers.js":"^0.3.1","when":"^3.6.4"},"homepage":"https://github.com/change/dutch-master","keywords":["cluster","http","management"],"gitHead":"7d97fdef4dc743183ed22dd20161cdca379ac4b9","versions":[{"number":"0.1.2","date":"2015-01-09T21:50:47.472Z"},{"number":"0.1.3","date":"2015-04-14T04:35:40.536Z"},{"number":"0.1.4","date":"2015-05-22T19:48:26.726Z"},{"number":"0.1.5","date":"2016-02-25T17:39:22.519Z"},{"number":"0.1.6","date":"2016-03-14T22:32:13.747Z"},{"number":"0.1.7","date":"2016-07-01T17:16:58.060Z"},{"number":"0.2.0","date":"2016-07-15T10:17:59.842Z"}],"readme":"# dutch-master\n\n> Pass on the left hand side. - @luk-\n\nWraps the Node cluster module to provide a full HTTP clustering solution with\nlifecycle management for workers.\n\n## Install:\n```bash\n$ npm install --save dutch-master\n```\n\n## Usage\n\nCreate a 'master' script e.g. `master.js`:\n\n```js\nrequire('dutch-master').start({\n  worker: 'app.js',\n  beforeFork: function () {\n    process.chdir('/deploys/app/current')\n  },\n  numWorkers: function () {\n    return Math.max(require('os').cpus().length, 2)\n  },\n  logger: require('bunyan')({name: 'my-app'}),\n  workerEnvironment: {\n    NODE_ENV: 'production'\n  }\n})\n```\n\n`app.js` should be a regular Node/Express/etc app:\n\n```js\nvar app = require('express')()\n\napp.get('/', function (req, res) {\n  res.send('Hello world')\n})\n\napp.listen(8000)\n```\n\n## Function: `start`\n\nOptions:\n\n* `worker`: Name of script to pass to `cluster` that will be invoked as many times\nas `numWorkers`.\n* `numWorkers`: The number of workers that the cluster will attempt to keep running.\nEither an integer, or a callback returning an integer. Optional, defaults to 2.\n* `beforeFork`: Supply a callback that will be run by the master process each time\nit is about to create a new worker. If you're using `capistrano` this is a great\nplace to `chdir` to a newly symlinked release directory. Optional.\n* `logger`: A [bunyan](https://github.com/trentm/node-bunyan) logger instance.\n* `workerEnvironment`: Object describing the environment variables that the worker\nwill have access to. Passed directly to `cluster.fork`. Optional, defaults to `{}`\n* `restartSignal`: The signal to trigger a rolling restart, by default it's `SIGUSR2`\n\n## Signal: `SIGUSR2`\n\nInitiates a rolling restart when received.  You can also set the `restartSignal` option\nto restart with a different signal (a common signal to trigger rolling restarts is SIGHUP).\n\n## Signal: `SIGTERM`\n\nInitiates a graceful stop of all workers, then exits.\n\n## Message: `{event: 'request-restart'}`\n\nA worker can signal to `dutch-master` that it needs to be restarted. Typically\nthis would be in response to a top-level error handler being triggered by an\nuncaught error, meaning that the app is in an inconsistent state but is still\ncapable of finishing in-flight requests. As the section below explains, a\nreplacement worker will be started, and once it is ready, the worker that\nrequested the restart will be stopped gracefully.\n\nExample usage:\n\n```js\n// Middleware to isolate each request into its own domain\napp.use(function (req, res, next) {\n  var d = domain.create()\n  d.add(req)\n  d.add(res)\n\n  d.on('error', function (err) {\n    next(err)\n    process.send({event: 'request-restart'})\n  })\n\n  d.run(next)\n})\n```\n\n## Stopping and starting workers\n\nWorkers will be stopped, when necessary, by calling\n [`disconnect`](http://nodejs.org/api/cluster.html#cluster_worker_disconnect) on\nthem. If they are still alive after 30 seconds, `dutch-master` will attempt to\nkill the worker process.\n\nNo worker is stopped until a replacement worker is available (i.e. has fired\nit's `listening` event). This makes `dutch-master` suitable for applications that\nare slow to start up. This does not apply when performing a graceful stop invoked\nby `SIGTERM`.\n\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT)\n","starsCount":1,"created":"2015-01-09T21:50:47.472Z","modified":"2016-07-15T10:17:59.842Z","lastPublisher":{"name":"jmerrifield","email":"jon@jmerrifield.com"},"owners":[{"name":"jmerrifield","email":"jon@jmerrifield.com"},{"name":"kylev","email":"kylev@kylev.com"}],"other":{"_attachments":{},"_from":".","_id":"dutch-master","_nodeVersion":"6.0.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/dutch-master-0.2.0.tgz_1468577877349_0.13890012772753835"},"_npmUser":{"name":"jmerrifield","email":"jon@jmerrifield.com"},"_npmVersion":"3.8.6","_rev":"1-8b97a116a845a1dc1c1a61cd2bc78fa8","_shasum":"f0be1e8d77ec8cadc19c48b23ce791678c8ad792","author":{"name":"Jon Merrifield","email":"jon@jmerrifield.com","url":"http://www.jmerrifield.com"},"bugs":{"url":"https://github.com/change/dutch-master/issues"},"directories":{"example":"example","test":"test"},"dist-tags":{"latest":"0.2.0"},"dist":{"shasum":"f0be1e8d77ec8cadc19c48b23ce791678c8ad792","tarball":"http://registry.npmjs.org/dutch-master/-/dutch-master-0.2.0.tgz"},"maintainers":[{"name":"jmerrifield","email":"jon@jmerrifield.com"},{"name":"kylev","email":"kylev@kylev.com"}],"readmeFilename":"README.md","time":{"modified":"2016-07-15T10:17:59.842Z","created":"2015-01-09T21:50:47.472Z","0.1.2":"2015-01-09T21:50:47.472Z","0.1.3":"2015-04-14T04:35:40.536Z","0.1.4":"2015-05-22T19:48:26.726Z","0.1.5":"2016-02-25T17:39:22.519Z","0.1.6":"2016-03-14T22:32:13.747Z","0.1.7":"2016-07-01T17:16:58.060Z","0.2.0":"2016-07-15T10:17:59.842Z"},"users":{"ninjatux":true}}}