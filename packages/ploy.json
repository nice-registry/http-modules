{"name":"ploy","version":"1.9.0","description":"git push deploy http router, hosting branches on subdomains","bin":{"ploy":"bin/cmd.js"},"main":"index.js","dependencies":{"bouncy":"~3.2.1","cert-unbundle":"~0.0.0","cicada":"~1.1.1","clone":"~0.1.6","defined":"~0.0.0","hyperquest":"~0.2.0","inherits":"~1.0.0","logdir":"~0.0.1","mkdirp":"~0.3.5","optimist":"~0.4.0","quotemeta":"~0.0.0","rimraf":"~2.2.6","shell-quote":"~0.1.0","split":"^0.0.0","strftime":"~0.8.0","subdir":"~0.0.3","text-table":"~0.0.1","through":"^2.3.4","through2":"^0.4.1"},"devDependencies":{"tap":"~0.4.0","concat-stream":"~0.1.1"},"scripts":{"test":"tap test/*.js"},"repository":"https://github.com/substack/ploy","homepage":"https://github.com/substack/ploy","keywords":["git","deploy","continuous","push","http","proxy"],"license":"MIT","gitHead":"70f8fac22f5642930694890ab572a332634ed8b7","versions":[{"number":"0.0.0","date":"2013-03-24T04:29:44.800Z"},{"number":"0.1.0","date":"2013-03-24T12:15:29.322Z"},{"number":"0.2.0","date":"2013-03-25T03:29:31.197Z"},{"number":"0.2.1","date":"2013-03-26T00:02:24.423Z"},{"number":"0.2.2","date":"2013-03-31T08:51:02.896Z"},{"number":"0.3.0","date":"2013-04-03T06:56:58.340Z"},{"number":"0.4.0","date":"2013-04-03T10:09:04.098Z"},{"number":"0.4.1","date":"2013-04-03T10:23:44.615Z"},{"number":"0.4.2","date":"2013-04-03T11:19:42.063Z"},{"number":"0.5.0","date":"2013-04-04T09:23:14.411Z"},{"number":"0.6.0","date":"2013-04-07T03:36:12.210Z"},{"number":"0.6.1","date":"2013-04-08T11:16:56.406Z"},{"number":"0.6.2","date":"2013-04-08T21:45:36.185Z"},{"number":"0.6.3","date":"2013-04-09T01:12:32.853Z"},{"number":"0.6.4","date":"2013-04-09T21:34:19.303Z"},{"number":"0.6.5","date":"2013-04-09T23:25:54.175Z"},{"number":"0.6.6","date":"2013-04-12T11:41:21.318Z"},{"number":"0.7.0","date":"2013-04-13T12:34:37.547Z"},{"number":"0.7.1","date":"2013-04-13T12:39:10.058Z"},{"number":"0.7.2","date":"2013-04-13T18:27:49.257Z"},{"number":"0.7.3","date":"2013-04-13T19:08:09.815Z"},{"number":"0.8.0","date":"2013-04-13T22:27:31.143Z"},{"number":"0.9.0","date":"2013-04-13T22:37:33.829Z"},{"number":"0.10.0","date":"2013-04-14T01:31:26.599Z"},{"number":"0.10.1","date":"2013-04-14T01:51:42.764Z"},{"number":"0.10.2","date":"2013-04-14T02:27:06.597Z"},{"number":"0.11.0","date":"2013-04-15T05:27:19.769Z"},{"number":"0.12.0","date":"2013-04-16T01:57:57.283Z"},{"number":"0.13.0","date":"2013-04-16T04:25:44.459Z"},{"number":"0.13.1","date":"2013-04-18T04:15:47.058Z"},{"number":"0.14.0","date":"2013-04-18T11:54:26.781Z"},{"number":"1.0.0","date":"2013-04-21T13:06:42.163Z"},{"number":"1.1.0","date":"2013-04-23T20:37:01.435Z"},{"number":"1.2.0","date":"2013-05-11T10:38:25.582Z"},{"number":"1.2.1","date":"2013-06-21T16:42:41.711Z"},{"number":"1.2.2","date":"2013-07-17T23:52:52.157Z"},{"number":"1.2.3","date":"2013-09-04T02:04:23.082Z"},{"number":"1.3.0","date":"2014-02-15T17:04:14.142Z"},{"number":"1.4.0","date":"2014-02-15T19:31:57.576Z"},{"number":"1.5.0","date":"2014-02-15T19:58:25.313Z"},{"number":"1.6.0","date":"2014-02-15T22:27:35.059Z"},{"number":"1.6.1","date":"2014-02-17T01:25:49.064Z"},{"number":"1.6.2","date":"2014-02-17T01:28:09.199Z"},{"number":"1.6.3","date":"2014-02-18T02:12:32.618Z"},{"number":"1.6.4","date":"2014-03-19T06:15:24.661Z"},{"number":"1.7.0","date":"2014-03-22T03:10:34.587Z"},{"number":"1.8.0","date":"2014-04-15T14:04:51.465Z"},{"number":"1.8.1","date":"2014-04-15T14:09:57.521Z"},{"number":"1.8.2","date":"2014-04-15T14:31:58.289Z"},{"number":"1.8.3","date":"2014-04-15T23:09:42.512Z"},{"number":"1.8.4","date":"2014-04-17T23:27:40.129Z"},{"number":"1.8.5","date":"2014-04-19T22:58:38.371Z"},{"number":"1.9.0","date":"2014-07-07T00:37:08.398Z"}],"readme":"# ploy\n\ngit push at this http router and it will host your branches on subdomains\n\n[![build status](https://secure.travis-ci.org/substack/ploy.png)](http://travis-ci.org/substack/ploy)\n\nthink [bouncy](https://github.com/substack/bouncy) +\n[cicada](https://github.com/substack/cicada)\n\n![ploy](http://substack.net/images/ploy.png)\n\n# example\n\ncreate an auth file and start the ploy server:\n\n```\n$ echo '{ \"beep\": \"boop\" }' > auth.json\n$ sudo ploy server ./data -p 80 -a auth.json\n```\n\nthen from a git repo with a `server.js` and/or a `scripts.start` in its\npackage.json:\n\n`server.js` should host its http server on `process.env.PORT`.\n\n```\n$ git remote add ploy http://beep:boop@localhost/_ploy/server.git\n$ git push ploy master\n```\n\nNow your server.js will be running on `http://localhost/`.\nIf you push again to master, in a few seconds the new master code will be\nrunning on `http://localhost/`.\n\nTo launch a staging instance on a subdomain, just push to a non-master branch:\n\n```\n$ git push ploy master:staging\n```\n\nNow go to `http://staging.localhost/` to see your staging instance.\n(Edit /etc/hosts or set up dns wildcards with\n[dnsmasq](http://www.thekelleys.org.uk/dnsmasq/doc.html) to test locally.)\n\nUse `ploy ls` to list the running branches:\n\n```\n$ ploy ls\nmaster\n```\n\n# details\n\nploy does not detach your server processes. When the ploy server goes down, it\ntakes the processes it started with it.\n\nHowever, when the ploy server is started back up, it will attempt to restart all\nof the processes it was previously running.\n\nWhen you `git push` code at a ploy server, your server will be started and any\nprevious server running under the same branch name will be killed.\n\n# usage\n\n```\nusage:\n\n  ploy server DIRECTORY PORT\n  ploy server { -d DIRECTORY | -p PORT | -a AUTHFILE | -f BOUNCER }\n\n    Create a ploy http server, hosting repositories in DIRECTORY and listening\n    on PORT for incoming connections.\n \n    If AUTHFILE is given, it should be a json file that maps usernames to\n    token strings to use for basic auth protection for ploy actions.\n    \n    Type `ploy help ssl` to show ssl options.\n    \n    You can specify a BOUNCER module with -f to use a custom http router.\n \n  ploy ls { -r REMOTE | --verbose, -v | --format=FORMAT }\n \n    List the running process branch names at REMOTE.\n    \n    Verbose formatting will use `branch,hash,repo,port`.\n \n  ploy work { -r REMOTE | --format=FORMAT }\n\n    List the working directories from checked out git commits.\n    The default FORMAT is `repo,commit,time,branch`.\n \n    Active branches are shown with a trailing *.\n\n  ploy clean\n\n    Remove unused working directories. These are the directories listed in\n    `ploy work` without a *.\n\n  ploy log NAME { -n ROWS | -f | -b BEGIN | -e END }\n\n    Show ROWS of log output for the branch NAME like `tail`.\n    Default -n value: screen height.\n \n    Stream live updates when `-f` is set like `tail -f`.\n    Slice log records for NAME directly with `-b` and `-e`.\n \n  ploy log { -n ROWS | -f | -b BEGIN | -e END | --color=true }\n\n    Show ROWS of log output for all branches.\n    Lines will be prefaced with a colored branch name when stdout is a tty.\n\n  ploy mv SRC DST { -r REMOTE }\n \n    Move the branch name SRC to the DST branch name at REMOTE.\n \n  ploy rm NAME { -r REMOTE }\n \n    Remove the branch name at NAME, killing any running processes.\n \n  ploy restart NAME { -r REMOTE }\n \n    Restart the process at NAME.\n \n  ploy stop NAME { -r REMOTE }\n \n    Stop the process at NAME.\n \n  ploy redeploy NAME { -r REMOTE }\n \n    Redeploy the process at NAME, re-running install and test scripts.\n \n  ploy help [TOPIC]\n \n    Show this message or optionally a TOPIC.\n    \n    Topics: ssl\n\nOPTIONS\n\n  For `ploy ls`, `ploy mv`, `ploy rm` commands that take a REMOTE parameter:\n  \n  REMOTE can be a git remote name or a remote URL to a ploy server. If there\n  is exactly one ploy remote in set up as a git remote, it will be used by\n  default.\n\n```\n\n# scripts\n\n## start\n\nploy will look at your `package.json`'s `scripts.start` field for how to start\nprocesses.\n\nBefore any services are started, `npm install .` will be run on the deployed\nrepo. npm will handle the `preinstall`, `install`, and `postinstall` hooks.\n`postinstall` is a good place to put bundle steps like\n[browserify](http://browserify.org).\n\nIf `scripts.start` is a string, ploy will set `$PORT` for a single process and\nhost it accordinly.\n\nIf `scripts.start` is an object, the keys should map subdomains to commands to\nlaunch servers with. For instance:\n\n``` json\n{\n  \"scripts\": {\n    \"start\": {\n      \"beep\": \"node beep.js\",\n      \"boop\": \"node boop.js\",\n      \"index\": \"node server.js\"\n    }\n  }\n}\n```\n\nWill host `beep.js` at `beep.domain`, `boop.js` at `boop.domain` and `server.js`\nat just `domain`. When you push to non-master branches, `domain` will be\nprefaced accordingly to mount hosts at `beep.staging.domain` etc.\n\nEach key can be a full url such as `\"beepboop.com\"` or just a subdomain.\n\nUse the special key `\"index\"` to set a host to resolve for the root subdomain.\n\nEach service start command will be immediately restarted when it crashes.\n\n## stop\n\nYou can also have a `scripts.stop` that will have a `$PID` environment variable\ndefined for the start script that was defined:\n\n``` json\n{\n  \"scripts\": {\n    \"start\": \"sudo node server.js\",\n    \"stop\": \"sudo kill $PID\",\n  }\n}\n```\n\nThe `scripts.stop` keys work the same as the `scripts.start` keys:\n\n``` json\n{\n  \"scripts\": {\n    \"start\": {\n      \"x\": \"node x.js\",\n      \"y\": \"node y.js\"\n    },\n    \"stop\": {\n      \"x\": \"node kill.js x\",\n      \"y\": \"node kill.js y\"\n    }\n  }\n}\n```\n\n## test\n\nIf you specify a `scripts.test`, it will be run.\n\nIf the test fails, code that you push will not be deployed and any old branches\nwill continue to be run rather than be replaced.\n\n## services\n\nYou might want to manage non-http services with ploy.\nJust preface the services you don't want to show up in the http routing tables\nwith an `'_'` like this:\n\n``` json\n{\n  \"scripts\": {\n    \"start\": {\n      \"web\": \"node web.js\",\n      \"_notweb\": \"node notweb.js\"\n    }\n  }\n}\n```\n\nUnderscored non-http services will not be given a `$PORT` to listen on so you'll\nneed to figure out how you want multiple services running on the same box to\nwork on your own. Consider registering your non-http services with\n[seaport](https://github.com/substack/seaport).\n\n## preinstall\n\nOne handy trick you can do to make deploys much faster and more resilient\nagainst npm outages is to include a `scripts.preinstall` to copy over the\nnode_modules directory from the previous build. This avoids a ton of extra\nnetwork traffic and costly recompilation.\n\nHere's an example `scripts.preinstall`:\n\n```\n{\n  \"dependencies\": {\n    \"level\": \"^0.18.0\"\n  },\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"preinstall\": \"(cp -r $PREV/node_modules .; exit 0)\"\n  }\n}\n```\n\n# environment\n\nEach script has these environment variables defined:\n\n* `$COMMIT` - git hash of the current deploy\n* `$BRANCH` - commit branch name, for example `\"master\"`\n* `$REPO` - repo name, for example `\"repo.git\"`\n\n* `$PREV` - the last previous working directory, if any\n* `$PREV_COMMIT` - git hash of the previous deploy, if any\n* `$PREV_BRANCH` - commit branch name of the previous deploy for the current\n`$REPO`, if any\n\nAdditionally, `$PATH` is prepended with `node_modules/.bin` so that bin scripts\ninstalled with npm will be available for install scripts.\n\n# methods\n\n``` js\nvar ploy = require('ploy')\n```\n\n## var server = ploy(opts)\n\nCreate a new ploy instance, splitting `opts` between\nthe underlying\n[bouncy](https://github.com/substack/bouncy)\nand [cicada](https://github.com/substack/cicada)\ninstances.\n\n* opts.repodir - directory to put git repo data\n* opts.workdir - directory to check out git repos into\n* opts.logdir - directory to store process stderr and stdout branch files\n* opts.auth - optional object mapping usernames to password token strings for\nbasic auth\n* opts.bouncer - optional http router function. `opts.bouncer(req, res, bounce)`\nis called for each incoming request with a `bounce()` function from\n[bouncy](https://npmjs.org/package/bouncy). To defer back to ploy, just call\n`bounce()` with no arguments.\n\nIf `opts` is a string, it will be used as the basedir for `opts.repodir` and\n`opts.workdir`.\n\nThe rest of the options will be looked over by bouncy to do things like set up\nan https server or whatever.\n\n## server.listen(opts, port, host...)\n\nCall `.listen()` on the underlying http or https server, passing any `opts`\nobject directly through to [bouncy](https://github.com/substack/bouncy).\n\nTo host ploy over ssl, set the (`opts.key`, `opts.ca`, and `opts.cert`),\nor set `opts.pfx`.\n\n## server.add(name, rec)\n\nAdd a a service under a branch `name`. `rec` should have:\n* rec.port - port where the http server lives\n* rec.hash - commit hash string\n* rec.process - process object to call .kill() on\n\n## server.remove(name)\n\nRemove the process at the branch `name`, killing as necessary.\n\n## server.restart(name)\n\nRestart the process at the branch `name`.\n\n## server.move(src, dst)\n\nMove the process at branch name `src` to `dst`, killing the branch process at\n`src` if it was running.\n\n## server.getWorking(cb)\n\nGather an array of the working directories in `cb(err, working)`. Each `w` item in\nthe `working` array has:\n\n* w.commit - the commit hash of the checked out working directory\n* w.time - the unix timestamp of when the commit was sent\n* w.branch - the branch name that was deployed\n* w.pid - the process id. undefined if inactive.\n* w.dir - the working directory\n* w.active - whether the process is active\n\n## server.clean(cb)\n\nRemove inactive working directories.\n\n## server.redeploy(name, cb)\n\nRe-run the deploy scripts for `name` at the current commit hash.\n\n# events\n\n## server.on('spawn', function (ps, info) {})\n\nWhen a process is created from `npm install` or one of the package.json start\nscripts, this event fires with the `info.commit` and `info.command` executed\nunder the `info.env` environment object.\n\n## server.on('output', function (name, stream) {})\n\nWhen there is a new output stream for a branch, this event fires with the\nreadable `stream`.\n\nOutput streams merge the output from all the processes used to start a branch.\n\n# running as non-root\n\nOn Linux you can easily setup port forwarding with iptables to avoid running ploy on port 80, which requires root privileges.\n\nYou'll need at least 2 new iptables rules to set it up. The first rule will redirect all incoming traffic from port 80 to port 8080:\n\n```\niptables -A PREROUTING -t nat -p tcp --dport 80 -j REDIRECT --to-port 8080\n```\n\nThe second rule will redirect all localhost traffic from port 80 to port 8080:\n\n```\niptables -t nat -I OUTPUT -p tcp -d 127.0.0.1 --dport 80 -j REDIRECT --to-ports 8080\n```\n\nYou might also need a third rule if you'll push to ploy from localhost, but will use a hostname instead of `localhost` as ploy's remote url:\n\n```\niptables -t nat -I OUTPUT -p tcp -d testling.com --dport 80 -j REDIRECT --to-ports 8080\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install -g ploy\n```\n\nto get the `ploy` command or just\n\n```\nnpm install ploy\n```\n\nto get the library.\n\n# license\n\nMIT\n","starsCount":4,"created":"2013-03-24T04:29:43.574Z","modified":"2014-07-07T00:37:08.398Z","lastPublisher":{"name":"substack","email":"mail@substack.net"},"owners":[{"name":"substack","email":"mail@substack.net"}],"other":{"_attachments":{},"_from":".","_id":"ploy","_npmUser":{"name":"substack","email":"mail@substack.net"},"_npmVersion":"1.4.15","_rev":"1-c6f34b78e794e7e2f2a371d53e9b26e3","_shasum":"a34c73d1d135d8144f0764d7c0909e843631ebc9","author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"bugs":{"url":"https://github.com/substack/ploy/issues"},"directories":{},"dist-tags":{"latest":"1.9.0"},"dist":{"shasum":"a34c73d1d135d8144f0764d7c0909e843631ebc9","tarball":"http://registry.npmjs.org/ploy/-/ploy-1.9.0.tgz"},"maintainers":[{"name":"substack","email":"mail@substack.net"}],"readmeFilename":"readme.markdown","time":{"modified":"2014-07-07T00:37:08.398Z","created":"2013-03-24T04:29:43.574Z","0.0.0":"2013-03-24T04:29:44.800Z","0.1.0":"2013-03-24T12:15:29.322Z","0.2.0":"2013-03-25T03:29:31.197Z","0.2.1":"2013-03-26T00:02:24.423Z","0.2.2":"2013-03-31T08:51:02.896Z","0.3.0":"2013-04-03T06:56:58.340Z","0.4.0":"2013-04-03T10:09:04.098Z","0.4.1":"2013-04-03T10:23:44.615Z","0.4.2":"2013-04-03T11:19:42.063Z","0.5.0":"2013-04-04T09:23:14.411Z","0.6.0":"2013-04-07T03:36:12.210Z","0.6.1":"2013-04-08T11:16:56.406Z","0.6.2":"2013-04-08T21:45:36.185Z","0.6.3":"2013-04-09T01:12:32.853Z","0.6.4":"2013-04-09T21:34:19.303Z","0.6.5":"2013-04-09T23:25:54.175Z","0.6.6":"2013-04-12T11:41:21.318Z","0.7.0":"2013-04-13T12:34:37.547Z","0.7.1":"2013-04-13T12:39:10.058Z","0.7.2":"2013-04-13T18:27:49.257Z","0.7.3":"2013-04-13T19:08:09.815Z","0.8.0":"2013-04-13T22:27:31.143Z","0.9.0":"2013-04-13T22:37:33.829Z","0.10.0":"2013-04-14T01:31:26.599Z","0.10.1":"2013-04-14T01:51:42.764Z","0.10.2":"2013-04-14T02:27:06.597Z","0.11.0":"2013-04-15T05:27:19.769Z","0.12.0":"2013-04-16T01:57:57.283Z","0.13.0":"2013-04-16T04:25:44.459Z","0.13.1":"2013-04-18T04:15:47.058Z","0.14.0":"2013-04-18T11:54:26.781Z","1.0.0":"2013-04-21T13:06:42.163Z","1.1.0":"2013-04-23T20:37:01.435Z","1.2.0":"2013-05-11T10:38:25.582Z","1.2.1":"2013-06-21T16:42:41.711Z","1.2.2":"2013-07-17T23:52:52.157Z","1.2.3":"2013-09-04T02:04:23.082Z","1.3.0":"2014-02-15T17:04:14.142Z","1.4.0":"2014-02-15T19:31:57.576Z","1.5.0":"2014-02-15T19:58:25.313Z","1.6.0":"2014-02-15T22:27:35.059Z","1.6.1":"2014-02-17T01:25:49.064Z","1.6.2":"2014-02-17T01:28:09.199Z","1.6.3":"2014-02-18T02:12:32.618Z","1.6.4":"2014-03-19T06:15:24.661Z","1.7.0":"2014-03-22T03:10:34.587Z","1.8.0":"2014-04-15T14:04:51.465Z","1.8.1":"2014-04-15T14:09:57.521Z","1.8.2":"2014-04-15T14:31:58.289Z","1.8.3":"2014-04-15T23:09:42.512Z","1.8.4":"2014-04-17T23:27:40.129Z","1.8.5":"2014-04-19T22:58:38.371Z","1.9.0":"2014-07-07T00:37:08.398Z"},"users":{"maxgfeller":true,"allain":true,"moimikey":true,"brandonpapworth":true}}}