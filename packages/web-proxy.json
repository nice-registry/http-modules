{"name":"web-proxy","version":"1.1.2","description":"Web Proxy (forward proxy) for intercepting and selectively caching HTTP requests.","main":"src/web-proxy.js","repository":"https://github.com/gajus/web-proxy","keywords":["mitm","forward","proxy","http"],"dependencies":{"bluebird":"^2.9.13","bunyan":"^1.3.4","commander":"^2.6.0","jsonfile":"^2.0.0","lodash":"^3.3.1","noop-logger":"^0.1.0","promise-mysql":"^1.0.0","request-promise":"^0.4.0"},"devDependencies":{"chai":"^2.1.0","gulp":"^3.8.11","gulp-eslint":"^0.5.0","gulp-mocha":"^2.0.0"},"scrips":{"test":"gulp test"},"gitHead":"b8b3657c8a5b78e1205fe5ce453f878008435a02","homepage":"https://github.com/gajus/web-proxy","scripts":{},"versions":[{"number":"1.0.0","date":"2015-02-18T09:48:17.726Z"},{"number":"1.1.0","date":"2015-02-18T15:05:54.350Z"},{"number":"1.1.1","date":"2015-02-18T15:17:06.855Z"},{"number":"1.1.2","date":"2015-03-02T10:27:05.792Z"}],"readme":"# Web Proxy\n\n[![Travis build status](http://img.shields.io/travis/gajus/web-proxy/master.svg?style=flat)](https://travis-ci.org/gajus/web-proxy)\n[![NPM version](http://img.shields.io/npm/v/web-proxy.svg?style=flat)](https://www.npmjs.org/package/web-proxy)\n\nWeb Proxy (forward proxy) for intercepting and selectively caching HTTP requests.\n\n## Use Case\n\nweb-proxy has been designed to selectively cache outgoing HTTP requests for logging and re-iteration purposes, e.g. if you are running an inefficient web scrapping service or wish to re-run scrapping service using earlier fetched pages.\n\n## Demo\n\n![cURL, web proxy, mitmproxy](./docs/web-proxy.png)\n\nIllustration demonstrates cURL requests being made using web-proxy.\n\nweb-proxy is configured to:\n\n* cache all HTTP GET requests that result in 200 response.\n* to forward all resulting HTTP requests to further proxy ([mitmproxy](https://mitmproxy.org/)).\n\n## Command Line Usage\n\n```sh\nnode ./bin/proxy --help\n```\n\n### MySQL\n\nWeb Proxy can be used with a persistent data store. The only backend supported at the moment is MySQL.\n\nTo enable use of the MySQL backend, provide connections credentials at the time of starting the proxy.\n\nDatabase schema can be obtained from `./database/proxy.sql`. Note that table is using `ROW_FORMAT=COMPRESSED`. In order to benefit from the compression, ensure that the following MySQL variables are set:\n\n```ini\ninnodb_file_format=BARRACUDA\ninnodb_file_per_table=ON\n```\n\nFor more information, refer to http://stackoverflow.com/a/13636565/368691.\n\n### Proxy\n\nWeb Proxy can forward all outgoing HTTP requests to another proxy.\n\nTo enable forwarding, provide proxy credentials at the time of starting the proxy.\n\n```sh\nnode ./bin/proxy --help\n```\n\n## API\n\nWebProxy can be used programmatically.\n\n```js\nvar WebProxy = require('../src/webproxy'),\n    config = {},\n    server;\n\n/**\n * @param {Object} reference\n * @param {String} reference.method\n * @param {String} reference.url\n * @return {Null} Returning null will allow HTTP request to progress.\n * @return {Object} response\n * @return {Number} response.statusCode\n * @return {Object} response.headers\n * @return {String} response.body\n */\nconfig.read = function (request) {\n    //\n};\n\n/**\n * @param {Object} reference\n * @param {String} reference.method\n * @param {String} reference.url\n * @param {Object} response\n * @param {Number} response.statusCode\n * @param {Object} response.headers\n * @param {String} response.body\n */\nconfig.write = function (request, response) {\n    //\n};\n\n/**\n * @param {Object} config\n * @param {Function} config.read\n * @param {Function} config.write\n * @param {Object} config.logger\n */\nserver = WebProxy(config);\n\nserver.listen(9000);\n```\n\n### Data Store\n\nData can be read/written using custom logic.\n\nThere are two existing data store interfaces:\n\n| Name | Description |\n| --- | --- |\n| `DataStore.session` | Session persits data in an object for the duration of the script runtime. |\n| `DataStore.database` | Data is read/written to/from a MySQL database. |\n\nRefer to the [`./bin/proxy.js`](./bin/proxy.js) implementation to see a working example.\n","created":"2015-02-18T09:48:17.726Z","modified":"2017-05-22T12:44:15.330Z","lastPublisher":{"name":"gajus","email":"gk@anuary.com"},"owners":[{"email":"gajus@gajus.com","name":"gajus"}],"other":{"_attachments":{},"_from":".","_id":"web-proxy","_nodeVersion":"1.4.2","_npmUser":{"name":"gajus","email":"gk@anuary.com"},"_npmVersion":"2.6.1","_rev":"2-d8781775ee94051af31977a74a27527d","_shasum":"a9ca2d36bb259ab181822706fc549f342ff51a94","author":{"name":"Gajus Kuizinas","email":"gk@anuary.com"},"bugs":{"url":"https://github.com/gajus/web-proxy/issues"},"directories":{},"dist-tags":{"latest":"1.1.2"},"dist":{"shasum":"a9ca2d36bb259ab181822706fc549f342ff51a94","tarball":"http://registry.npmjs.org/web-proxy/-/web-proxy-1.1.2.tgz"},"maintainers":[{"email":"gajus@gajus.com","name":"gajus"}],"readmeFilename":"README.md","time":{"modified":"2017-05-22T12:44:15.330Z","created":"2015-02-18T09:48:17.726Z","1.0.0":"2015-02-18T09:48:17.726Z","1.1.0":"2015-02-18T15:05:54.350Z","1.1.1":"2015-02-18T15:17:06.855Z","1.1.2":"2015-03-02T10:27:05.792Z"}}}