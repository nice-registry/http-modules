{"name":"client-request","version":"2.0.0","description":"A zero-dependency stripped-down http client request module based on the http://npm.im/request API","main":"request.js","scripts":{"test":"node test/"},"keywords":["request","http","client","https"],"license":"MIT","devDependencies":{"stream-spigot":"~3.0.5","tape":"~4.0.0"},"dependencies":{},"repository":"https://github.com/brycebaril/client-request","homepage":"https://github.com/brycebaril/client-request","gitHead":"8fd7cd217f947e58b6ddde26e573664c303cd0a5","versions":[{"number":"1.0.0","date":"2015-05-24T21:04:32.880Z"},{"number":"1.0.1","date":"2015-06-16T16:52:03.098Z"},{"number":"1.1.0","date":"2016-09-22T20:41:03.141Z"},{"number":"1.2.0","date":"2016-11-16T06:54:27.111Z"},{"number":"1.2.1","date":"2017-03-31T22:12:37.920Z"},{"number":"1.2.2","date":"2017-04-05T06:09:42.153Z"},{"number":"2.0.0","date":"2017-04-06T16:08:22.585Z"}],"readme":"client-request\n=====\n\n[![NPM](https://nodei.co/npm/client-request.png)](https://nodei.co/npm/client-request/)\n\nSometimes you want to use a library that uses the (great!!) [request](http://npm.im/request) library but you can't have all those dependencies.\n\nThis library is a a very narrow subset of the common simpler uses of `request` that can be substituted for `request` without too much effort.\n\nFor the small subset of the `request` interface it implements, it is **super opinionated** and leaves any fancier features to you.\n\nJust to be clear, this module **does not even try** to implement most of the features of `request`.\n\nThings it does support from the `request` API:\n* **Only** this call form: `var req = request(options, callback)`\n* automatic selection of `http` or `https` based on the uri\n* options.timeout\n* options.json\n\nIf you want...\n* streaming -- use [hyperquest](http://npm.im/hyperquest) instead of this library (it's awesome!)\n* `request.form` -- use [form-urlencoded](https://www.npmjs.com/package/form-urlencoded), a zero-deps form body encoder. (example below)\n* `options.qs` -- use the core `querystring` library or [qs](http://npm.im/qs) and append the querystring to your url path prior to sending it to request\n* anything else ... find a module and suggest it here!\n\n\n```javascript\nvar request = require(\"client-request\")\n\nvar options = {\n  uri: \"http://brycebaril.com\",\n  method: \"POST\",\n  body: {blah: \"some stuff\"},\n  timeout: 100,\n  json: true\n}\n\nvar req = request(options, function callback(err, response, body) {\n  console.log(response.statusCode)\n  if (body) {\n    console.log(body)\n  }\n})\n\n```\n\n```javascript\nvar requestPromise = require(\"client-request/promise\")\n\nrequestPromise(options).then(function (result) {\n  if (result.response.statusCode === 201) {\n    console.log(result.response.headers.location)\n  } else {\n    console.log(result.body)\n  }\n}).catch(err){\n  console.log(err)\n})\n```\n\n```javascript\nvar requestPromise = require(\"client-request/promise\")\n\n// ONLY in ES2016 and later, you can await a promise in an async function (generator)\nasync function(){\n  try {\n    let result = await requestPromise(options)\n    console.log(result.response.headers.location)\n  } catch (err) {\n    console.log(err)\n  }\n}\n```\n\nWHY DID I MAKE THIS?\n===\n\n`request`\n```\nbryce@x1c:~/forks/request$ browserify --bare index.js -o bundle.js && wc -c bundle.js\n741099 bundle.js\n```\n\n`client-request`\n```\nbryce@x1c:~/forks/client-request$ browserify --bare request.js -o bundle.js && wc -c bundle.js\n6159 bundle.js\n```\n\nAPI\n===\n\n`var req = require(\"client-request\")(options, callback)`\n---\n\nPerform a client request. Returned value is the core `http` request object.\n\nThe `callback` is executed with three arguments `callback(err, response, body)`\n* err: any error when attempting to make the request, timeouts, or parse errors\n* response: the core http Response object\n* body: the `Buffer` returned by the server, or if `options.json` is used, the object the server's body deserializes into.\n\nOptions:\n* `uri` -- a full uri, e.g. \"https://example.com:9090/path?query=args\"\n* `method` -- GET, POST, PUT, etc. (Default GET)\n* (generally similar to the core `http.request` options)\n* `json` -- attempt to JSON.parse the response body and return the parsed object (or an error if it doesn't parse)\n* `timeout` -- a timeout in ms for the client to abort the request\n* `body` -- the raw body to send to the server (e.g. PUT or POST) -- if `body` is a string/buffer, it will send that, if `body` quacks like a stream, stream it, otherwise it will send it JSON serialized.\n\nExtensions\n===\n\nForms\n---\n\nI suggest [form-urlencoded](https://www.npmjs.com/package/form-urlencoded) for your form needs.\n\nCode with [request](http://npm.im/request):\n```js\nvar request = require(\"request\")\n\nvar form = {\n  alice: \"hi bob\",\n  bob: \"hi alice\"\n}\nvar options = {\n  uri: \"https://mysite.example\",\n  form: form,\n  method: \"PUT\",\n}\n\nvar req = request(options, function callback(err, response) {\n  // ...\n})\n```\n\nConverted to use `client-request`:\n\n```js\nvar request = require(\"request-client\")\nvar encodeForm = require(\"form-urlencoded\").encode\n\nvar form = {\n  alice: \"hi bob\",\n  bob: \"hi alice\"\n}\nvar options = {\n  uri: \"https://mysite.example\",\n  body: encodeForm(form),\n  method: \"PUT\",\n  headers: {\n    \"content-type\": \"application/x-www-form-urlencoded\"   // setting headers is up to *you*\n  }\n}\n\nvar req = request(options, function callback(err, response, body) {\n  // ...\n})\n```\n\nQuerystrings\n---\n\nIf it works for you, the core `querystring` module is a great way to avoid additional dependencies.\n\nCode with request:\n```js\nvar request = require(\"request\")\n\nvar qs = {\n  q: \"what?\",\n  page: 99\n}\nvar options = {\n  uri: \"https://mysite.example\",\n  qs: qs\n}\n\nvar req = request(options, function callback(err, response, body) {\n  // ...\n})\n```\n\n```js\nvar request = require(\"request-client\")\nvar encodeQuery = require(\"querystring\").encode\n\nvar qs = {\n  q: \"what?\",\n  page: 99\n}\nvar options = {\n  uri: \"https://mysite.example\" + \"?\" + encodeQuery(qs)\n}\n\nvar req = request(options, function callback(err, response, body) {\n  // ...\n})\n```\n\nLICENSE\n=======\n\nMIT\n","starsCount":3,"created":"2015-05-24T21:04:32.880Z","modified":"2017-04-06T16:08:22.585Z","lastPublisher":{"name":"bryce","email":"bryce@ravenwall.com"},"owners":[{"name":"bryce","email":"bryce@ravenwall.com"}],"other":{"_attachments":{},"_from":".","_id":"client-request","_nodeVersion":"6.10.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/client-request-2.0.0.tgz_1491494900654_0.8235592311248183"},"_npmUser":{"name":"bryce","email":"bryce@ravenwall.com"},"_npmVersion":"3.10.10","_rev":"7-07ed34cdb36850acb9222c3503560825","_shasum":"32bb63c11a829f65e4ee5e7655abe8f276000c97","author":{"name":"Bryce B. Baril"},"bugs":{"url":"https://github.com/brycebaril/client-request/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"2.0.0"},"dist":{"shasum":"32bb63c11a829f65e4ee5e7655abe8f276000c97","tarball":"https://registry.npmjs.org/client-request/-/client-request-2.0.0.tgz"},"maintainers":[{"name":"bryce","email":"bryce@ravenwall.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-06T16:08:22.585Z","created":"2015-05-24T21:04:32.880Z","1.0.0":"2015-05-24T21:04:32.880Z","1.0.1":"2015-06-16T16:52:03.098Z","1.1.0":"2016-09-22T20:41:03.141Z","1.2.0":"2016-11-16T06:54:27.111Z","1.2.1":"2017-03-31T22:12:37.920Z","1.2.2":"2017-04-05T06:09:42.153Z","2.0.0":"2017-04-06T16:08:22.585Z"},"users":{"nomemires":true,"laggingreflex":true,"hecto932":true}}}