{"name":"plex-control","version":"2.0.1","description":"Controlling Plex clients through the Plex Media Server HTTP API","main":"lib/control.js","files":["lib"],"dependencies":{"plex-api":"^3.0.0","validator":"^3.22.1","when":"^3.6.3"},"devDependencies":{"expect.js":"*","mocha":"*","sinon":"*"},"scripts":{"test":"mocha test/bootstrapTests.js test/**/*-test.js","test-tdd":"mocha -w test/bootstrapTests.js test/**/*-test.js"},"repository":"https://github.com/phillipj/node-plex-control","keywords":["plex","api","control"],"engines":{"node":">=0.10"},"license":"MIT","gitHead":"05d39424bd17aa2d1e2cc7353f98c962fa9be896","homepage":"https://github.com/phillipj/node-plex-control","versions":[{"number":"0.0.1","date":"2013-03-04T18:42:02.374Z"},{"number":"0.0.2","date":"2013-10-26T19:29:57.244Z"},{"number":"0.0.3","date":"2013-12-27T17:02:45.385Z"},{"number":"0.2.0","date":"2013-12-27T21:59:25.980Z"},{"number":"1.0.0","date":"2014-12-07T13:04:12.027Z"},{"number":"1.0.1","date":"2014-12-07T17:03:52.389Z"},{"number":"2.0.0","date":"2015-07-12T20:16:56.004Z"},{"number":"2.0.1","date":"2015-07-12T20:23:29.990Z"}],"readme":"# plex-control [![Build Status](https://api.travis-ci.org/phillipj/node-plex-control.png)](http://travis-ci.org/phillipj/node-plex-control)\n\nNode module used to control Plex clients. Utilises the Plex Media Server HTTP API/Control.\n\n## Usage\n\n**PlexControl(serverIp, clientNameOrIp[, options])**\n\n```js\nvar PlexControl = require(\"plex-control\").PlexControl;\n\n// having Plex Media Server on 192.168.0.1\n// and client wanting to control with hostname \"mac-mini\"\nvar control = new PlexControl(\"192.168.0.1\", \"mac-mini\");\n\n// ..or assigning client by IP address\ncontrol = new PlexControl(\"192.168.0.1\", \"192.168.0.2\");\n```\n\nIf **options** are provided they are given to the underlying [plex-api](https://www.npmjs.com/package/plex-api) upon instantiation.\n\n### Commands\n\n**Promise based**\n\nEach command returns a promise which gets resolved when command was delivered successfully by the Plex API or rejected when any error occured.\n```js\ncontrol.navigation.moveUp().then(function(){\n\t// moveUp was successfully communicated to Plex\n}, function(err){\n\tconsole.err('Error while communicating with HTTP API', err);\n});\n```\n\nThe commands are pretty much self describing and identical to what the HTTP API offers.\n\n**Navigation**\n```js\ncontrol.navigation.moveUp();\ncontrol.navigation.moveDown();\ncontrol.navigation.moveLeft();\ncontrol.navigation.moveRight();\ncontrol.navigation.pageUp();\ncontrol.navigation.pageDown();\ncontrol.navigation.nextLetter();\ncontrol.navigation.previousLetter();\ncontrol.navigation.select();\ncontrol.navigation.back();\ncontrol.navigation.contextMenu();\ncontrol.navigation.toggleOSD();\n```\n\n**Playback**\n```js\ncontrol.playback.play();\ncontrol.playback.pause();\ncontrol.playback.stop();\ncontrol.playback.rewind();\ncontrol.playback.fastForward();\ncontrol.playback.stepForward();\ncontrol.playback.bigStepForward();\ncontrol.playback.stepBack();\ncontrol.playback.bigStepBack();\ncontrol.playback.skipNext();\ncontrol.playback.skipPrevious();\n```\n\n**Currently**\n\nWhat's currently happing on the client?\n\n```js\ncontrol.currently.playing();\ncontrol.currently.paused();\n```\n\nIt resolves to an object representing what's currently playing/paused. The object has lots of details about the given media. Hints of what's available in these gigantic detailed media representations can be found on the XML example on the [StatusSessions page in the unofficial Plex API documentation](https://code.google.com/p/plex-api/wiki/StatusSessions).\n\n```js\ncontrol.currently.playing().then(function(result){\n\tif (!result) {\n\t\tconsole.log(\"Nothing is currently playing\");\n\t} else {\n\t\tconsole.log(\"Currently playing a %s titled: %s\",\n\t\t\tresult.attributes.type,\n\t\t\tresult.attributes.title);\n\t}\n});\n\n```\n\n**getClientInfo(name | IP)**\n\nReturns a promise containing the info about the client matched by either the name or IP-address provided. Rejects with a `NotFoundError` if client was not found.\n\n## Changelog\n\n### v2.0.0\n- Upgraded the plex-api dependency from v0.x -> v3.0.0 by @phillipj\n- getClientInfo() might reject with NotFoundError by @phillipj\n\n#### BREAKING CHANGES FROM v1.x\n\n`control.api` which holds a reference to the underlying [plex-api](https://www.npmjs.com/package/plex-api) instance,\nhas gotten a major upgrade. Read more especially about the XML -> JSON changes done in plex-api between v1.0 and v2.0.\n\n`getClientInfo()` rejects with a `NotFoundError` instead of resolving to an `undefined` value. To check whether or not\nthe error is a NotFoundError you could check `err.name === 'NotFound'` or compare the error instance against the exposed\nNotFoundError constructor from this module (`require('plex-control').NotFoundError`).\n\n### v1.0.0\n- Added the .currently commands\n- Major bumped when.js from v2 to v3\n- Changed control.on(\"resolved\") to provide the whole plex client object found by hostname or IP, rather than just the IP-address\n\n### v0.2.0\n- Converted all methods to be promise based, rather than callbacks\n\n## License\n(The MIT License)\n\nCopyright (c) 2013-2014 Phillip Johnsen &lt;phillip@lightweight.no&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","starsCount":4,"created":"2013-03-04T18:42:00.204Z","modified":"2015-07-12T20:23:29.990Z","lastPublisher":{"name":"flipp","email":"johphi@gmail.com"},"owners":[{"name":"flipp","email":"johphi@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"plex-control","_npmUser":{"name":"flipp","email":"johphi@gmail.com"},"_npmVersion":"1.4.28","_rev":"1-ff28e29004bec49764357d0d8eaa664f","_shasum":"88d25ff320ff89506f27523d600dce414c55d8b8","author":{"name":"Phillip Johnsen","email":"phillip@lightweight.no"},"bugs":{"url":"https://github.com/phillipj/node-plex-control/issues"},"directories":{},"dist-tags":{"latest":"2.0.1"},"dist":{"shasum":"88d25ff320ff89506f27523d600dce414c55d8b8","tarball":"http://registry.npmjs.org/plex-control/-/plex-control-2.0.1.tgz"},"maintainers":[{"name":"flipp","email":"johphi@gmail.com"}],"readmeFilename":"Readme.md","time":{"modified":"2015-07-12T20:23:29.990Z","created":"2013-03-04T18:42:00.204Z","0.0.1":"2013-03-04T18:42:02.374Z","0.0.2":"2013-10-26T19:29:57.244Z","0.0.3":"2013-12-27T17:02:45.385Z","0.2.0":"2013-12-27T21:59:25.980Z","1.0.0":"2014-12-07T13:04:12.027Z","1.0.1":"2014-12-07T17:03:52.389Z","2.0.0":"2015-07-12T20:16:56.004Z","2.0.1":"2015-07-12T20:23:29.990Z"},"users":{"crowbar":true,"sveisvei":true,"pilsy":true,"calimares":true}}}