{"name":"shmock","version":"0.8.1","description":"Simple HTTP Mocking library","keywords":["express","http","test","mock"],"dependencies":{"assert-diff":"^1.0.1","express":"~3.4.8","methods":"~0.1.0"},"devDependencies":{"mocha":"~1.12.0","request":"~2.27.0","supertest":"~0.9.0","should":"~1.2.2"},"scripts":{"test":"make test"},"license":"MIT","repository":"https://github.com/xetorthio/shmock","homepage":"https://github.com/xetorthio/shmock","gitHead":"12929e1915584426450f7e97054334cf92cb47fd","versions":[{"number":"0.0.1","date":"2014-02-21T22:40:01.972Z"},{"number":"0.1.0","date":"2014-02-21T22:53:40.164Z"},{"number":"0.2.0","date":"2014-02-22T03:30:36.592Z"},{"number":"0.3.0","date":"2014-02-24T15:56:17.197Z"},{"number":"0.3.1","date":"2014-02-24T16:44:27.123Z"},{"number":"0.4.0","date":"2014-02-24T17:10:22.606Z"},{"number":"0.4.1","date":"2014-02-24T19:19:02.770Z"},{"number":"0.5.0","date":"2014-02-25T20:52:16.724Z"},{"number":"0.6.0","date":"2014-02-27T16:52:47.598Z"},{"number":"0.7.0","date":"2014-05-22T21:23:36.259Z"},{"number":"0.7.1","date":"2014-07-17T16:10:07.026Z"},{"number":"0.7.2","date":"2015-09-07T21:29:21.698Z"},{"number":"0.8.0","date":"2016-01-19T21:08:32.061Z"},{"number":"0.8.1","date":"2016-01-19T21:18:25.516Z"}],"readme":"# Shmock\n\n  [![Build Status](https://travis-ci.org/xetorthio/shmock.png)](https://travis-ci.org/xetorthio/shmock)\n\n  [Express](https://github.com/visionmedia/express) based http mocking library.\n\n  The reason for this to exist is because I believe that mocking functions to change their behavior is extremely horrible and prone to errors. Libraries like [nock](https://github.com/pgte/nock) take this approach, and then there are a few cases where thing doesn't work. Maybe because of how http clients work, etc.\n\n  So this library provides a super nice API, like the one of [superagent](https://github.com/visionmedia/superagent) but it creates a real http server (using [express](https://github.com/visionmedia/express)). The nice thing about this is that you don't really care about the implementation, which http client is being used, or even if nodes native http api changes.\n\n  Make sure to view the test for [examples](https://github.com/xetorthio/shmock/tree/master/test/shmock.js).\n\n## Installation\n\n```\n$ npm install shmock\n```\n\n## Usage\n\n### Initialize with or without port\n\n```js\nvar shmock = require('shmock');\n\nvar mock = shmock(); // will give some arbitrary port\n\nvar mock2 = shmock(9000); // will use port 9000\n```\n\n### Define expectations\n\n\n#### On http methods\n\n```js\nmock.get(\"/foo\").reply(200, \"bar\");\n```\n\n#### On http headers\n\n```js\nmock.get(\"/foo\").set(\"Authorization\", \"123456\").reply(200, \"bar\");\n```\n\n#### Specifying response headers\n\n```js\nmock.get(\"/foo\").set(\"Authorization\", \"123456\").reply(200, \"bar\", {\"X-my-header\", \"My header value\"});\n```\n\n#### On querystring parameters\n\n```js\nmock.get(\"/foo\").query(\"a=bi&c=d\").reply(200, \"bar\");\nmock.get(\"/foo\").query({a: \"b\", c: \"d\"}).reply(200, \"bar\");\n```\n\n#### On request body\n\n```js\nmock.post(\"/foo\").send({a: \"b\"}).reply(200, \"bar\");\nmock.post(\"/foo\").send(\"123456\").reply(200, \"bar\");\n```\n\n#### Add a delay to the reply\n```js\nmock.get(\"/foo\").delay(500).reply(200);\n```\n\n### Make assertions on the handler\n\n#### Check if expectation has been met\n\n```js\nvar handler = mock.get(\"/foo\").reply(200);\n...\n...\nhandler.isDone.should.be.ok;\nhandler.done(); // Throws an error if isDone is false\n```\n\n#### Wait for expectation to be met\n```js\nvar handler = mock.get(\"/foo\").reply(200);\n...\n...\nhandler.wait(function(err) {\n  if(err) {\n    // A default timeout of 2 seconds has passed and still the expectation hasn't been bet\n  }\n});\n```\n\nYou can also specify a timeout in ms:\n```js\nhandler.wait(200, function(err) { ... });\n```\nOr if using mocha:\n```js\nhandler.wait(200, done);\n```\n\n### Custom middleware\nCustom middlewares can be injected into the Express stack in order to perform arbitrary manipulations on mock requests, for instance:\n\n```javascript\nvar shmock = shmock(9100, [function(req, res, next) {\n  // do something with req/res then call next\n  next();\n}, function(req, res, next) {\n  // do something else with the request object\n  next()\n}]);\n```\n\nAs you would expect the arguments are the default arguments passed to request middleware by Express, so in order they are: `req` (the request object); `res` (the response object); and `done` (the callback).\n\n## License\n\n  MIT\n\n","created":"2014-02-21T22:40:01.972Z","modified":"2016-01-19T21:18:25.516Z","lastPublisher":{"name":"xetorthio","email":"ionathan@gmail.com"},"owners":[{"name":"xetorthio","email":"ionathan@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"shmock","_nodeVersion":"4.2.1","_npmUser":{"name":"xetorthio","email":"ionathan@gmail.com"},"_npmVersion":"2.14.7","_rev":"1-252f2e43ce0ef98b8467ae7c1c38055f","_shasum":"210ed02c167d2306f5db8d698ed43a44a5eeae90","bugs":{"url":"https://github.com/xetorthio/shmock/issues"},"directories":{},"dist-tags":{"latest":"0.8.1"},"dist":{"shasum":"210ed02c167d2306f5db8d698ed43a44a5eeae90","tarball":"http://registry.npmjs.org/shmock/-/shmock-0.8.1.tgz"},"maintainers":[{"name":"xetorthio","email":"ionathan@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-01-19T21:18:25.516Z","created":"2014-02-21T22:40:01.972Z","0.0.1":"2014-02-21T22:40:01.972Z","0.1.0":"2014-02-21T22:53:40.164Z","0.2.0":"2014-02-22T03:30:36.592Z","0.3.0":"2014-02-24T15:56:17.197Z","0.3.1":"2014-02-24T16:44:27.123Z","0.4.0":"2014-02-24T17:10:22.606Z","0.4.1":"2014-02-24T19:19:02.770Z","0.5.0":"2014-02-25T20:52:16.724Z","0.6.0":"2014-02-27T16:52:47.598Z","0.7.0":"2014-05-22T21:23:36.259Z","0.7.1":"2014-07-17T16:10:07.026Z","0.7.2":"2015-09-07T21:29:21.698Z","0.8.0":"2016-01-19T21:08:32.061Z","0.8.1":"2016-01-19T21:18:25.516Z"}}}