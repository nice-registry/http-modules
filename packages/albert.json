{"name":"albert","preferGlobal":"true","version":"0.1.0","description":"An HTTP event server in Node.js","bin":{"albert-server":"./bin/albert"},"scripts":{"test":"node ./bin/test"},"main":"./lib/albert","repository":"https://github.com/ArmedGuy/albert","keywords":["http","event","message","server","distributed"],"licence":"MIT","engines":{"node":">=0.8"},"dependencies":{"request":"~2.29.0","commander":"~2.1.0"},"readme":"# albert - managing events no matter the language\r\n\r\n![Image](http://i.imgur.com/ZnDfNNd.jpg)\r\n\r\nalbert is an event-message server written in Node.js to be plugged into Node's HTTP server module.\r\nIt allows for sending events across several applications programming languages.\r\n\r\nalbert is implemented as a middleware handler(based on [Connect](http://npmjs.org/package/connect)) and an accompanying middleware plugin.\r\n\r\n\r\n### How it works\r\n\r\nAlbert strives to make the following possible:\r\n```javascript\r\n\r\n// Firing an event in Node.js\r\nobject.emit(\"event_name\", data);\r\n```\r\n\r\n```csharp\r\n\r\n// Capturing the same event in C#\r\nAlbert.On += (object sender, AlbertEventArgs e) => {\r\n\tif(e.EventName == \"event_name\") {\r\n\t\tConsole.WriteLine(\"Win win!\");\r\n\t}\r\n};\r\n```\r\nTo send and capture events between different programs, in different languages, from different locations.\r\nThis is made possible by using a webserver(for easy configuration and maximum compatability) as a message handler.\r\n\r\n## How to serve\r\n\r\nFirst, setup the server by using one of either method:\r\n\r\n##### Node.js middleware\r\n```javascript\r\nvar albert = require('albert')\r\n, http = require('http');\r\nvar app = albert() //the middleware handler\r\n\t.use(albert.eventHandler()); // The event handler plugin, does not fire next(), so keep at bottom of stack\r\n\r\nhttp.createServer(app).listen(30301, \"127.0.0.1\");\r\n```\r\n\r\n##### Node.js with Express\r\n```javascript\r\nvar albert = require('albert')\r\n, http = require('http')\r\n, express = require('express');\r\nvar app = express();\r\napp.use(albert.eventHandler()); // The event handler plugin, does not fire next(), so keep at bottom of stack\r\napp.listen(30301);\r\n```\r\n\r\n##### Server(install via npm install -g)\r\n```bash\r\nalbert-server -h 127.0.0.1 -p 30301\r\n```\r\n\r\n\r\nThen, use sample code from https://github.com/ArmedGuy/albert-clients or write your own wrapper,\r\nand specify the server that was setup\r\n\r\n## Specification\r\n\r\n#### Note: EVENT_NAME_OR_MASK_* can use wildcards in the form of an asterisk(*)\r\n### Implemented\r\n\r\n#### /listen/EVENT_NAME_OR_MASK_*\r\nOpens an HTTP stream without time, with Connection: keep-alive and Transfer-Encoding: chunked, to listen for incoming events matching EVENT_NAME_OR_MASK_*.\r\nAll output is in the form of an JSON object followed by CRLF(\\r\\n).\r\nThe first line after opening a connection always looks like:\r\n```javascript\r\n{\"listening\": true, \"event\": \"EVENT_NAME_OR_MASK_*\", \"id\": \"listener_id\"}\r\n```\r\n\r\nStream is open until connection is lost by the client\r\n\r\nAvailable aliases for /listen/: \r\n - /on/\r\n\r\n#### /callback/EVENT_NAME_OR_MASK_*/base64_encode(callback_url)\r\nRegisters a HTTP POST callback URL that will be called when incoming events match EVENT_NAME_OR_MASK_*.\r\nThe return data is an raw JSON object in the format:\r\n```javascript\r\n{\"event\":\"event_name\", \"id\":\"event_id\", \"status\":\"OK or ERROR or CUSTOM\", \"progress\": \"less or equal to 100\", \"data\": \"mixed data from event\"}\r\n```\r\n\r\nAvailable aliases for /callback/:\r\n - None\r\n  \r\n  \r\n#### /emit/EVENT_NAME (POST version)\r\nEmits an event on the server, with parameters in the form of an JSON object as the POST data.\r\nThe data must not be empty, if not passing arguments(such as status, ok or data), pass an empty JSON object\r\n\r\nFormat for POST data:\r\n```javascript\r\n{\"status\": \"OK or ERROR or CUSTOM\", \"progress\": \"less or equal to 100\", \"data\": \"mixed data from event\"}\r\n```\r\n - If status is left out, it defaults to OK.\r\n - If progress is left out, it defaults to 100.\r\n - If data is left out, it defaults to empty.\r\n\r\nReturns an JSON object containing the id of the event, incase you want to update an event's progress([read more](#))\r\n\r\nAvailable aliases for /emit/:\r\n - /fire/\r\n\r\n#### /emit/EVENT_NAME?status=OK&progress=100&data=Hi (GET version)\r\nEmits an event on the server, with parameters in the form of GET variables\r\n\r\n - If status is left out, it defaults to OK.\r\n - If progress is left out, it defaults to 100.\r\n - If data is left out, it defaults to empty.\r\n\r\nReturns an JSON object containing the id of the event, incase you want to update an event's progress([read more](#))\r\n\r\nAvailable aliases for /emit/:\r\n - /fire/\r\n\r\n#### /update/EVENT_ID (POST version)\r\nUpdates an existing event on the server, with parameters in the form of an JSON object as the POST data.\r\nThe data must not be empty, if not passing arguments(such as status, ok or data), pass an empty JSON object\r\n\r\n - If status is left out, it defaults to last value.\r\n - If progress is left out, it defaults to last value.\r\n - If data is left out, it defaults to last value.\r\n\r\nAvailable aliases for /update/:\r\n - /push/\r\n\r\n#### /update/EVENT_ID?status=OK&progress=100&data=Hi (GET version)\r\nUpdates an existing event on the server, with parameters in the form of GET variables\r\n\r\n - If status is left out, it defaults to last value.\r\n - If progress is left out, it defaults to last value.\r\n - If data is left out, it defaults to last value.\r\n\r\nAvailable aliases for /update/:\r\n - /push/\r\n\r\n### Planned\r\n\r\n#### /link/base64_encode(albert_server_url)\r\nLink the handling albert server together with another albert server, making them share events\r\n","versions":[{"number":"0.1.0","date":"2013-12-10T23:56:51.559Z"}],"created":"2013-12-10T23:56:47.246Z","modified":"2013-12-10T23:56:51.559Z","lastPublisher":{"name":"armedguy","email":"johan@pie-studios.com"},"owners":[{"name":"armedguy","email":"johan@pie-studios.com"}],"other":{"_attachments":{},"_from":".","_id":"albert","_npmUser":{"name":"armedguy","email":"johan@pie-studios.com"},"_npmVersion":"1.3.8","_rev":"1-dd336d28e485eb008bc287f73f64132e","author":{"name":"Johan Jatko","email":"johan@pie-studios.com"},"bugs":{"url":"https://github.com/ArmedGuy/albert/issues"},"contributors":[{"name":"Johan Jatko","email":"johan@pie-studios.com"}],"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"65308fbefe38ebc75f16e948da0bc334be41ac01","tarball":"http://registry.npmjs.org/albert/-/albert-0.1.0.tgz"},"maintainers":[{"name":"armedguy","email":"johan@pie-studios.com"}],"readmeFilename":"README.md","time":{"modified":"2013-12-10T23:56:51.559Z","created":"2013-12-10T23:56:47.246Z","0.1.0":"2013-12-10T23:56:51.559Z"}}}