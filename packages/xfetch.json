{"ava":{"babel":{"babelrc":true},"require":"babel-register"},"dependencies":{"bluefeather":"^2.6.0","debug":"^2.6.8","es6-error":"^4.0.2","http-proxy-agent":"^1.0.0","https-proxy-agent":"^1.0.0","node-fetch":"^2.0.0-alpha.5","retry":"^0.10.1","tough-cookie":"^2.3.2"},"description":"A light-weight HTTP client for Node.js.","devDependencies":{"ava":"^0.19.1","babel-cli":"^6.24.1","babel-plugin-istanbul":"^4.1.4","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-plugin-transform-object-rest-spread":"^6.23.0","babel-preset-env":"^1.5.1","babel-register":"^6.24.1","coveralls":"^2.13.1","eslint":"^3.19.0","eslint-config-canonical":"^8.2.1","flow-bin":"^0.47.0","flow-copy-source":"^1.1.0","husky":"^0.13.4","nock":"^9.0.13","nyc":"^11.0.2","semantic-release":"^6.3.6"},"engines":{"node":">8"},"keywords":["promise"],"license":"BSD-3-Clause","main":"./dist/index.js","name":"xfetch","nyc":{"include":["src/**/*.js"],"instrument":false,"reporter":["text-lcov"],"require":["babel-register"],"sourceMap":false},"repository":"https://github.com/gajus/xfetch","scripts":{"build":"rm -fr ./dist && NODE_ENV=production babel ./src --out-dir ./dist --copy-files --source-maps && flow-copy-source src dist","lint":"eslint ./src ./test && flow","precommit":"npm run lint && npm run test && npm run build","test":"NODE_ENV=development nyc --reporter=text ava --verbose --serial"},"version":"3.6.1","gitHead":"fe4b5a6c258fedc6d28f873368d7e06ea625b6bc","homepage":"https://github.com/gajus/xfetch#readme","versions":[{"number":"1.0.0","date":"2017-02-26T12:07:57.780Z"},{"number":"1.1.0","date":"2017-02-27T14:12:04.644Z"},{"number":"1.1.1","date":"2017-02-27T14:55:09.579Z"},{"number":"1.2.0","date":"2017-02-27T17:22:43.981Z"},{"number":"1.3.0","date":"2017-03-03T11:48:58.809Z"},{"number":"1.3.1","date":"2017-03-03T12:46:37.320Z"},{"number":"1.4.0","date":"2017-03-03T13:00:37.233Z"},{"number":"1.5.0","date":"2017-03-07T17:28:52.246Z"},{"number":"2.0.0","date":"2017-03-17T10:33:32.172Z"},{"number":"3.0.0","date":"2017-03-17T13:03:12.310Z"},{"number":"3.1.0","date":"2017-03-17T14:36:05.942Z"},{"number":"3.1.1","date":"2017-03-17T15:06:17.502Z"},{"number":"3.1.2","date":"2017-03-17T17:26:31.361Z"},{"number":"3.1.3","date":"2017-03-18T12:01:40.384Z"},{"number":"3.2.0","date":"2017-03-18T15:22:02.688Z"},{"number":"3.3.0","date":"2017-03-20T12:58:48.864Z"},{"number":"3.3.1","date":"2017-04-09T20:21:50.544Z"},{"number":"3.4.0","date":"2017-04-09T21:53:00.932Z"},{"number":"3.5.0","date":"2017-06-05T14:26:25.218Z"},{"number":"3.5.1","date":"2017-06-17T18:28:40.609Z"},{"number":"3.6.0","date":"2017-06-17T19:19:13.493Z"},{"number":"3.6.1","date":"2017-06-17T19:25:31.949Z"}],"readme":"# xfetch\n\n[![Travis build status](http://img.shields.io/travis/gajus/xfetch/master.svg?style=flat-square)](https://travis-ci.org/gajus/xfetch)\n[![Coveralls](https://img.shields.io/coveralls/gajus/xfetch.svg?style=flat-square)](https://coveralls.io/github/gajus/xfetch)\n[![NPM version](http://img.shields.io/npm/v/xfetch.svg?style=flat-square)](https://www.npmjs.org/package/xfetch)\n[![Canonical Code Style](https://img.shields.io/badge/code%20style-canonical-blue.svg?style=flat-square)](https://github.com/gajus/canonical)\n\nA light-weight HTTP client for Node.js.\n\n* [API](#api)\n* [Configuration](#configuration)\n* [Behaviour](#behaviour)\n  * [HTTP proxy](#http-proxy)\n  * [Throws an error if response code is non-2xx](#throws-an-error-if-response-code-is-non-2xx)\n* [Cookbook](#cookbook)\n  * [Retry request](#retry-request)\n  * [Validate response](#validate-response)\n  * [Make cookies persist between requests](#make-cookies-persist-between-requests)\n\n## Motivation\n\nIt started as a light-wrapper of `node-fetch` due to the lack of [`HTTP_PROXY` support](https://github.com/bitinn/node-fetch/issues/195).\n\nThe surface grew to incorporate new requirements. In comparison to the WHATWG [Fetch](https://fetch.spec.whatwg.org/), xfetch API is designed to keep the code minimal by providing short-cuts to common operations.\n\nOn top of the `node-fetch`, xfetch implements:\n\n* [HTTP proxy](#http-proxy) support.\n* [Response validation](#validate-response).\n* [Retry request](#retry-request) strategy.\n* [In-built CookieJar](#make-cookies-persist-between-requests).\n* Strictly typed API.\n\n## API\n\n```js\ntype HeadersConfigurationType = {\n  [key: string]: string | number\n};\n\ntype RawHeadersType = {|\n  [key: string]: $ReadOnlyArray<string>\n|};\n\ntype HeadersType = {|\n  +raw: () => RawHeadersType,\n  +get: (name: string) => string\n|};\n\ntype IsResponseRedirectType = (Response: ResponseType) => boolean;\ntype IsResponseValidType = (response: ResponseType) => boolean | Promise<boolean>;\n\ntype HttpMethodType = 'get' | 'post' | 'delete' | 'post' | 'trace';\n\n/**\n * @see https://github.com/tim-kos/node-retry#retrytimeoutsoptions\n */\ntype RetryConfigurationType = {\n  factor?: number,\n  maxTimeout?: number,\n  minTimeout?: number,\n  randomize?: boolean,\n  retries?: number\n};\n\ntype ResponseType = {|\n  +headers: HeadersType,\n  +json: () => Promise<Object>,\n  +status: number,\n  +text: () => Promise<string>,\n  +url: string\n|} | string;\n\n/**\n * @property isResponseValid Used to validate response. Refer to [Validate response](#validate-response).\n * @property retry Used to retry requests that produce response that does not pass validation. Refer to [Retry request](#retry-request) and [Validating response](#validating-response).\n * @property jar An instance of `tough-cookie` [`CookieJar`](https://github.com/salesforce/tough-cookie#cookiejar). Used to collect & set cookies.\n */\ntype UserConfigurationType = {\n  +body?: string,\n  +compress?: boolean,\n  +headers?: HeadersConfigurationType,\n  +isResponseRedirect?: IsResponseRedirectType,\n  +isResponseValid?: IsResponseValidType,\n  +jar?: CookieJar,\n  +method?: HttpMethodType,\n  +query?: Object,\n  +retry?: RetryConfigurationType,\n  +responseType?: 'full' | 'text' | 'json'\n};\n\ntype fetch = (url: string, configuration?: UserConfigurationType) => Promise<ResponseType>;\n\n```\n\n## Behaviour\n\n### HTTP proxy\n\nUses `HTTP_PROXY` (`http://host:port`) environment variable value to configure HTTP proxy.\n\n> Note: You must also configure `NODE_TLS_REJECT_UNAUTHORIZED=0`.\n> This is a lazy workaround to enable the proxy to work with TLS.\n\n### Throws an error if response code is non-2xx or 3xx\n\nThrows `UnexpectedResponseCodeError` error if response code is non-2xx or 3xx.\n\nThis behaviour can be overridden using `isResponseValid` configuration.\n\n## Cookbook\n\n### Retry request\n\nRequests that result in non-2xx response will be retried.\n\n`retry` option is used to configure request retry strategy.\n\nThe `retry` configuration shape matches [configuration of the `retry`](https://github.com/tim-kos/node-retry) module.\n\n### Validate response\n\nDefine a custom validator function to force use the request retry strategy.\n\nA custom validator is configured using `isResponseValid` configuration, e.g.\n\n```js\nimport xfetch, {\n  UnexpectedResponseError\n};\n\nconst isResponseValid = async (response) => {\n  const body = await response.text();\n\n  if (body.includes('rate error')) {\n    throw new UnexpectedResponseError(response);\n  }\n\n  return true;\n}\n\nawait xfetch('http://gajus.com', {\n  isResponseValid\n});\n\n```\n\nA custom validator must return a boolean flag indicating whether the response is valid. A custom validator can throw an error that extends `UnexpectedResponseError` error.\n\n`xfetch` default validator can be imported and used to extend a custom validator, e.g.\n\n```js\nimport xfetch, {\n  UnexpectedResponseError,\n  isResponseValid as defaultIsResponseValid\n};\n\nconst isResponseValid = async (response) => {\n  const responseIsValid = await defaultIsResponseValid(response);\n\n  if (!responseIsValid) {\n    return responseIsValid;\n  }\n\n  const body = await response.text();\n\n  if (body.includes('rate error')) {\n    throw new UnexpectedResponseError(response);\n  }\n\n  return true;\n}\n\nawait xfetch('http://gajus.com', {\n  isResponseValid\n});\n\n```\n\n## Make cookies persist between requests\n\n`jar` parameter can be passed an instance of `tough-cookie` [`CookieJar`](https://github.com/salesforce/tough-cookie#cookiejar) to collect cookies and use them for the following requests.\n\n```js\nimport xfetch, {\n  CookieJar\n};\n\nconst jar = new CookieJar();\n\nawait xfetch('http://gajus.com/this-url-sets-cookies', {\n  jar\n});\n\nawait xfetch('http://gajus.com/this-url-requires-cookies-to-be-present', {\n  jar\n});\n\n```\n\n> Note:\n>\n> `xfetch` exports `CookieJar` class that can be used to construct an instance of `tough-cookie` [`CookieJar`](https://github.com/salesforce/tough-cookie#cookiejar).\n","created":"2017-02-26T12:07:57.780Z","modified":"2017-06-17T19:25:31.949Z","lastPublisher":{"name":"gajus","email":"gajus@gajus.com"},"owners":[{"name":"gajus","email":"gajus@gajus.com"}],"other":{"_attachments":{},"_id":"xfetch","_nodeVersion":"8.1.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/xfetch-3.6.1.tgz_1497727530886_0.6199885345995426"},"_npmUser":{"name":"gajus","email":"gajus@gajus.com"},"_npmVersion":"5.0.3","_rev":"22-890ed71e687ae06b0793d7a9606827d6","author":{"name":"Gajus Kuizinas","email":"gajus@gajus.com","url":"http://gajus.com"},"bugs":{"url":"https://github.com/gajus/xfetch/issues"},"directories":{},"dist-tags":{"latest":"3.6.1"},"dist":{"integrity":"sha512-uUbmQYt2fRipdLU1D4KzcAC+qI4WfMOhlx5yOH8WwCUMREt5ZcTneJSYJJ9gNf51xvlfKLdrYrKIAcYdey8cIA==","shasum":"2910628fd303601615281b56a716823f91fe8ea2","tarball":"https://registry.npmjs.org/xfetch/-/xfetch-3.6.1.tgz"},"maintainers":[{"name":"gajus","email":"gajus@gajus.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-17T19:25:31.949Z","created":"2017-02-26T12:07:57.780Z","1.0.0":"2017-02-26T12:07:57.780Z","1.1.0":"2017-02-27T14:12:04.644Z","1.1.1":"2017-02-27T14:55:09.579Z","1.2.0":"2017-02-27T17:22:43.981Z","1.3.0":"2017-03-03T11:48:58.809Z","1.3.1":"2017-03-03T12:46:37.320Z","1.4.0":"2017-03-03T13:00:37.233Z","1.5.0":"2017-03-07T17:28:52.246Z","2.0.0":"2017-03-17T10:33:32.172Z","3.0.0":"2017-03-17T13:03:12.310Z","3.1.0":"2017-03-17T14:36:05.942Z","3.1.1":"2017-03-17T15:06:17.502Z","3.1.2":"2017-03-17T17:26:31.361Z","3.1.3":"2017-03-18T12:01:40.384Z","3.2.0":"2017-03-18T15:22:02.688Z","3.3.0":"2017-03-20T12:58:48.864Z","3.3.1":"2017-04-09T20:21:50.544Z","3.4.0":"2017-04-09T21:53:00.932Z","3.5.0":"2017-06-05T14:26:25.218Z","3.5.1":"2017-06-17T18:28:40.609Z","3.6.0":"2017-06-17T19:19:13.493Z","3.6.1":"2017-06-17T19:25:31.949Z"}}}