{"name":"wreck","description":"HTTP Client Utilities","version":"12.2.2","repository":"https://github.com/hapijs/wreck","main":"lib/index","keywords":["utilities","http","client"],"engines":{"node":">=4.0.0"},"dependencies":{"boom":"5.x.x","hoek":"4.x.x"},"devDependencies":{"code":"4.x.x","lab":"13.x.x","require-reload":"0.2.x"},"scripts":{"test":"lab -t 100 -L -a code","test-cov-html":"lab -r html -o coverage.html -a code"},"license":"BSD-3-Clause","gitHead":"c966d22de63624011afcb18035d7a580449a6eb6","homepage":"https://github.com/hapijs/wreck#readme","readme":"![wreck Logo](https://raw.github.com/hapijs/wreck/master/images/wreck.png)\n\n### HTTP Client Utilities\n\n[![Npm Version](https://img.shields.io/npm/v/wreck.svg)](https://npmjs.com/package/wreck)\n[![Node Version](https://img.shields.io/node/v/wreck.svg)](https://npmjs.com/package/wreck)\n[![Build Status](https://secure.travis-ci.org/hapijs/wreck.svg)](http://travis-ci.org/hapijs/wreck)\n\nLead Maintainer: [Wyatt Preul](https://github.com/geek)\n\n## Usage\n\n### Basic\n```javascript\nconst Wreck = require('wreck');\n\nWreck.get('https://google.com/', (err, res, payload) => {\n    /* do stuff */\n});\n```\n\n```javascript\nconst Wreck = require('wreck');\n\nWreck.post('https://posttestserver.com/post.php', { payload: { hello: 'post' } }, (err, res, payload) => {\n    /* do stuff */\n});\n```\n\n### Advanced\n```javascript\nconst Wreck = require('wreck');\n\nconst method = 'GET'; // GET, POST, PUT, DELETE\nconst uri = '/';\nconst readableStream = Wreck.toReadableStream('foo=bar');\n\nconst wreck = Wreck.defaults({\n    headers: { 'x-foo-bar': 123 },\n    agents: {\n        https: new Https.Agent({ maxSockets: 100 }),\n        http: new Http.Agent({ maxSockets: 1000 }),\n        httpsAllowUnauthorized: new Https.Agent({ maxSockets: 100, rejectUnauthorized: false })\n    }\n});\n\n// cascading example -- does not alter `wreck`\n// inherits `headers` and `agents` specified above\nconst wreckWithTimeout = wreck.defaults({\n    timeout: 5\n});\n\n// all attributes are optional\nconst options = {\n    baseUrl: 'https://www.example.com',\n    payload: readableStream || 'foo=bar' || new Buffer('foo=bar'),\n    headers: { /* http headers */ },\n    redirects: 3,\n    beforeRedirect: function (redirectMethod, statusCode, location, resHeaders, redirectOptions, next) { return next() },\n    redirected: function (statusCode, location, req) {},\n    timeout: 1000,    // 1 second, default: unlimited\n    maxBytes: 1048576, // 1 MB, default: unlimited\n    rejectUnauthorized: true || false,\n    downstreamRes: null,\n    agent: null,         // Node Core http.Agent\n    secureProtocol: 'SSLv3_method' // The SSL method to use\n};\n\nconst optionalCallback = (err, res) => {\n\n    /* handle err if it exists, in which case res will be undefined */\n\n    // buffer the response stream\n    Wreck.read(res, null, (err, body) => {\n        /* do stuff */\n    });\n};\n\nconst req = wreck.request(method, uri, options, optionalCallback);\n```\n\n### `defaults(options)`\n\nReturns a *new* instance of Wreck which merges the provided `options` with those provided on a per-request basis. You can call defaults repeatedly to build up multiple http clients.\n- `options` - Config object containing settings for both `request` and `read` operations.\n\n### `request(method, uri, [options, [callback]])`\n\nInitiate an HTTP request.\n- `method` - A string specifying the HTTP request method, defaulting to 'GET'.\n- `uri` - The URI of the requested resource.\n- `options` - An optional configuration object. To omit this argument but still\n  use a callback, pass `null` in this position. The options object supports the\n  following optional keys:\n    - `baseUrl` - fully qualified uri string used as the base url. Most useful with `request.defaults`, for example when you want to do many requests to the same domain.\n                  If `baseUrl` is `https://example.com/api/`, then requesting `/end/point?test=true` will fetch `https://example.com/api/end/point?test=true`. Any\n                  querystring in the `baseUrl` will be overwritten with the querystring in the `uri` When `baseUrl` is given, `uri` must also be a string.\n    - `socketPath` - `/path/to/unix/socket` for Server.\n    - `payload` - The request body as a string, Buffer, Readable Stream, or an object that can be serialized using `JSON.stringify()`.\n    - `headers` - An object containing request headers.\n    - `redirects` - The maximum number of redirects to follow.\n    - `redirect303` - if `true`, a HTTP 303 status code will redirect using a GET method. Defaults to no redirection on 303.\n    - `beforeRedirect` - A callback function that is called before a redirect is triggered, using the signature\n      `function(redirectMethod, statusCode, location, resHeaders, redirectOptions, next)` where:\n          - `redirectMethod` - A string specifying the redirect method.\n          - `statusCode` - HTTP status code of the response that triggered the redirect.\n          - `location` - The redirect location string.\n          - `resHeaders` - An object with the headers received as part of the redirection response.\n          - `redirectOptions` - Options that will be applied to the redirect request. Changes to this object are applied to the redirection request.\n          - `next` - the callback function called to perform the redirection using signature `function()`.\n    - `redirected` - A callback function that is called when a redirect was triggered, using the signature `function(statusCode, location, req)` where:\n      - `statusCode` - HTTP status code of the response that triggered the redirect.\n      - `location` - The redirected location string.\n      - `req` - The new [ClientRequest](http://nodejs.org/api/http.html#http_class_http_clientrequest) object which replaces the one initially returned.\n    - `timeout` - The number of milliseconds to wait without receiving a response\n      before aborting the request. Defaults to unlimited.\n    - `maxBytes` - maximum size for response payload. Defaults to unlimited.\n    - `rejectUnauthorized` - [TLS](http://nodejs.org/api/tls.html) flag indicating\n      whether the client should reject a response from a server with invalid certificates.  This cannot be set at the\n      same time as the `agent` option is set.\n    - `downstreamRes`: downstream Resource dependency.\n    - `agent` - Node Core [http.Agent](http://nodejs.org/api/http.html#http_class_http_agent).\n      Defaults to either `wreck.agents.http` or `wreck.agents.https`.  Setting to `false` disables agent pooling.\n    - `secureProtocol` - [TLS](http://nodejs.org/api/tls.html) flag indicating the SSL method to use, e.g. `SSLv3_method`\n      to force SSL version 3. The possible values depend on your installation of OpenSSL. Read the official OpenSSL docs\n      for possible [SSL_METHODS](http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_PROTOCOL_METHODS).\n- `callback` - The optional callback function using the signature `function (err, response)` where:\n    - `err` - Any error that may have occurred during the handling of the request.\n    - `response` - The [HTTP Incoming Message](https://nodejs.org/api/http.html#http_class_http_incomingmessage)\n       object, which is also a readable stream.\n\nReturns an instance of the node.js [ClientRequest](http://nodejs.org/api/http.html#http_class_http_clientrequest) object.\n\n\n### `read(response, options, callback)`\n- `response` - An HTTP Incoming Message object.\n- `options` - `null` or a configuration object with the following optional keys:\n    - `timeout` - The number of milliseconds to wait while reading data before\n    aborting handling of the response. Defaults to unlimited.\n    - `json` - A value indicating how to try to parse the payload as JSON. Defaults to `undefined` meaning no parse logic.\n        - `true`, 'smart' - only try `JSON.parse` if the response indicates a JSON content-type.\n        - `force` - try `JSON.parse` regardless of the content-type header.\n    - `maxBytes` - The maximum allowed response payload size. Defaults to unlimited.\n- `callback` - The callback function using the signature `function (err, payload)` where:\n    - `err` - Any error that may have occurred while reading the response.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\n\n### `get(uri, [options], callback)`\n\nConvenience method for GET operations.\n- `uri` - The URI of the requested resource.\n- `options` - Optional config object containing settings for both `request` and\n  `read` operations.\n- `callback` - The callback function using the signature `function (err, response, payload)` where:\n    - `err` - Any error that may have occurred during handling of the request or a Boom error object if the response has an error status code (i.e. 4xx or 5xx). If the error is a boom error object it will have the following properties in addition to the standard boom properties.\n        - `data.isResponseError` - boolean, indicates if the error is a result of an error response status code\n        - `data.headers` - object containing the response headers\n        - `data.payload` - the payload in the form of a Buffer or as a parsed object\n        - `data.response` - the [HTTP Incoming Message](https://nodejs.org/api/http.html#http_class_http_incomingmessage) object\n    - `response` - The [HTTP Incoming Message](https://nodejs.org/api/http.html#http_class_http_incomingmessage)\n       object, which is a readable stream that has \"ended\" and contains no more data to read.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\nReturns an instance of the node.js [ClientRequest](http://nodejs.org/api/http.html#http_class_http_clientrequest) object.\n\n\n### `post(uri, [options], callback)`\n\nConvenience method for POST operations.\n- `uri` - The URI of the requested resource.\n- `options` - Optional config object containing settings for both `request` and\n  `read` operations.\n- `callback` - The callback function using the signature `function (err, response, payload)` where:\n    - `err` - Any error that may have occurred during handling of the request or a Boom error object if the response has an error status code (i.e. 4xx or 5xx). If the error is a boom error object it will have the following properties in addition to the standard boom properties.\n        - `data.isResponseError` - boolean, indicates if the error is a result of an error response status code\n        - `data.headers` - object containing the response headers\n        - `data.payload` - the payload in the form of a Buffer or as a parsed object\n        - `data.response` - the [HTTP Incoming Message](https://nodejs.org/api/http.html#http_class_http_incomingmessage) object\n    - `response` - The [HTTP Incoming Message](https://nodejs.org/api/http.html#http_class_http_incomingmessage)\n       object, which is a readable stream that has \"ended\" and contains no more data to read.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\nReturns an instance of the node.js [ClientRequest](http://nodejs.org/api/http.html#http_class_http_clientrequest) object.\n\n### `patch(uri, [options], callback)`\n\nConvenience method for PATCH operations.\n- `uri` - The URI of the requested resource.\n- `options` - Optional config object containing settings for both `request` and\n  `read` operations.\n- `callback` - The callback function using the signature `function (err, response, payload)` where:\n    - `err` - Any error that may have occurred during handling of the request or a Boom error object if the response has an error status code (i.e. 4xx or 5xx). If the error is a boom error object it will have the following properties in addition to the standard boom properties.\n        - `data.isResponseError` - boolean, indicates if the error is a result of an error response status code\n        - `data.headers` - object containing the response headers\n        - `data.payload` - the payload in the form of a Buffer or as a parsed object\n        - `data.response` - the [HTTP Incoming Message](https://nodejs.org/api/http.html#http_class_http_incomingmessage) object\n    - `response` - The [HTTP Incoming Message](https://nodejs.org/api/http.html#http_class_http_incomingmessage)\n       object, which is a readable stream that has \"ended\" and contains no more data to read.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\nReturns an instance of the node.js [ClientRequest](http://nodejs.org/api/http.html#http_class_http_clientrequest) object.\n\n\n### `put(uri, [options], callback)`\n\nConvenience method for PUT operations.\n- `uri` - The URI of the requested resource.\n- `options` - Optional config object containing settings for both `request` and\n  `read` operations.\n- `callback` - The callback function using the signature `function (err, response, payload)` where:\n    - `err` - Any error that may have occurred during handling of the request or a Boom error object if the response has an error status code (i.e. 4xx or 5xx). If the error is a boom error object it will have the following properties in addition to the standard boom properties.\n        - `data.isResponseError` - boolean, indicates if the error is a result of an error response status code\n        - `data.headers` - object containing the response headers\n        - `data.payload` - the payload in the form of a Buffer or as a parsed object\n        - `data.response` - the [HTTP Incoming Message](https://nodejs.org/api/http.html#http_class_http_incomingmessage) object\n    - `response` - The [HTTP Incoming Message](https://nodejs.org/api/http.html#http_class_http_incomingmessage)\n       object, which is a readable stream that has \"ended\" and contains no more data to read.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\nReturns an instance of the node.js [ClientRequest](http://nodejs.org/api/http.html#http_class_http_clientrequest) object.\n\n\n### `delete(uri, [options], callback)`\n\nConvenience method for DELETE operations.\n- `uri` - The URI of the requested resource.\n- `options` - Optional config object containing settings for both `request` and\n  `read` operations.\n- `callback` - The callback function using the signature `function (err, response, payload)` where:\n    - `err` - Any error that may have occurred during handling of the request or a Boom error object if the response has an error status code (i.e. 4xx or 5xx). If the error is a boom error object it will have the following properties in addition to the standard boom properties.\n        - `data.isResponseError` - boolean, indicates if the error is a result of an error response status code\n        - `data.headers` - object containing the response headers\n        - `data.payload` - the payload in the form of a Buffer or as a parsed object\n        - `data.response` - the [HTTP Incoming Message](https://nodejs.org/api/http.html#http_class_http_incomingmessage) object\n    - `response` - The [HTTP Incoming Message](https://nodejs.org/api/http.html#http_class_http_incomingmessage)\n       object, which is a readable stream that has \"ended\" and contains no more data to read.\n    - `payload` - The payload in the form of a Buffer or (optionally) parsed JavaScript object (JSON).\n\nReturns an instance of the node.js [ClientRequest](http://nodejs.org/api/http.html#http_class_http_clientrequest) object.\n\n\n### `toReadableStream(payload, [encoding])`\n\nCreates a [readable stream](http://nodejs.org/api/stream.html#stream_class_stream_readable)\nfor the provided payload and encoding.\n- `payload` - The Buffer or string to be wrapped in a readable stream.\n- `encoding` - The encoding to use. Must be a valid Buffer encoding, such as 'utf8' or 'ascii'.\n\n```javascript\nconst stream = Wreck.toReadableStream(new Buffer('Hello', 'ascii'), 'ascii');\nconst read = stream.read();\n// read -> 'Hello'\n```\n\n### `parseCacheControl(field)`\n\nParses the provided *cache-control* request header value into an object containing\na property for each directive and it's value. Boolean directives, such as \"private\"\nor \"no-cache\" will be set to the boolean `true`.\n- `field` - The header cache control value to be parsed.\n\n```javascript\nconst result = Wreck.parseCacheControl('private, max-age=0, no-cache');\n// result.private -> true\n// result['max-age'] -> 0\n// result['no-cache'] -> true\n```\n\n### `agents`\n\nObject that contains the agents for pooling connections for `http` and `https`.\nThe properties are `http`, `https`, and `httpsAllowUnauthorized` which is an\n`https` agent with `rejectUnauthorized` set to false.  All agents have\n`maxSockets` configured to `Infinity`.  They are each instances of the Node.js\n[Agent](http://nodejs.org/api/http.html#http_class_http_agent) and expose the\nstandard properties.\n\nFor example, the following code demonstrates changing `maxSockets` on the `http`\nagent.\n\n ```js\n const Wreck = require('wreck');\n\n Wreck.agents.http.maxSockets = 20;\n ```\n\nBelow is another example that sets the certificate details for all HTTPS requests.\n\n```js\nconst HTTPS = require('https');\nconst Wreck = require('wreck');\n\nWreck.agents.https = new HTTPS.Agent({\n    cert,\n    key,\n    ca\n});\n```\n\n### Events\n\n#### `request`\n\nThe request event is emitted just before *wreck* makes a request.  The\nhandler should accept the following arguments `(uri, options)` where:\n\n  - `uri` - the result of `Url.parse(uri)`. This will provide information about\n  the resource requested.  Also includes the headers and method.\n  - `options` - the options passed into the request function.  This will include\n  a payload if there is one.\n\nSince the `request` event executes on a global event handler, you can intercept\nand decorate a request before its sent.\n\n\n#### `response`\n\nThe response event is always emitted for any request that *wreck* makes.  The\nhandler should accept the following arguments `(err, details)` where:\n\n  - `err` - a Boom error\n  - `details` - object with the following properties\n    - `req` - the raw `ClientHttp` request object\n    - `res` - the raw `IncomingMessage` response object\n    - `start` - the time that the request was initiated\n    - `uri` - the result of `Url.parse(uri)`. This will provide information about\n    the resource requested.  Also includes the headers and method.\n\nThis event is useful for logging all requests that go through *wreck*. The `err`\nand `res` arguments can be undefined depending on if an error occurs.  Please\nbe aware that if multiple modules are depending on the same cached *wreck*\nmodule that this event can fire for each request made across all modules.  The\n`start` property is the timestamp when the request was started.  This can be\nuseful for determining how long it takes *wreck* to get a response back and\nprocessed.\n\nThe `EventEmitter` is attached to the `process` object under a `Symbol` with the\nvalue of `'wreck'`.  Therefore, if you want to capture a wreck event, after\nwreck has been loaded, but in a module that doesn't require wreck, you can\nhandle events in the following way:\n\n```js\nconst symbol = Symbol.for('wreck');\nprocess[symbol].on('response', (err, details) => {\n\n    if (err) {\n      console.error(err);\n    }\n});\n```\n","versions":[{"number":"3.0.1","date":"2014-08-16T03:34:19.673Z"},{"number":"0.0.0","date":"2014-08-16T06:26:03.755Z"},{"number":"3.0.0","date":"2014-08-18T17:56:03.269Z"},{"number":"4.0.0","date":"2014-08-29T20:24:15.151Z"},{"number":"5.0.0","date":"2014-09-03T20:05:04.196Z"},{"number":"5.0.1","date":"2014-09-04T20:32:28.548Z"},{"number":"5.1.0","date":"2014-12-16T03:14:04.935Z"},{"number":"5.2.0","date":"2015-02-13T22:15:24.601Z"},{"number":"5.3.0","date":"2015-03-23T17:03:06.989Z"},{"number":"5.4.0","date":"2015-03-31T20:50:32.335Z"},{"number":"5.5.0","date":"2015-04-23T19:11:44.563Z"},{"number":"5.5.1","date":"2015-04-23T19:23:22.609Z"},{"number":"5.6.0","date":"2015-06-19T17:22:03.895Z"},{"number":"5.6.1","date":"2015-07-01T17:44:23.074Z"},{"number":"6.0.0","date":"2015-07-01T21:35:08.183Z"},{"number":"6.1.0","date":"2015-07-29T20:52:18.706Z"},{"number":"6.2.0","date":"2015-08-26T22:01:55.781Z"},{"number":"6.3.0","date":"2015-09-25T17:44:38.553Z"},{"number":"7.0.0","date":"2015-10-31T19:38:40.981Z"},{"number":"7.0.1","date":"2016-03-02T17:52:20.596Z"},{"number":"7.0.2","date":"2016-03-05T20:02:49.015Z"},{"number":"7.1.0","date":"2016-03-24T18:24:52.932Z"},{"number":"7.2.0","date":"2016-04-15T19:40:53.527Z"},{"number":"7.2.1","date":"2016-05-12T21:05:58.765Z"},{"number":"8.0.0","date":"2016-06-02T15:24:18.219Z"},{"number":"8.0.1","date":"2016-07-28T19:50:23.723Z"},{"number":"9.0.0","date":"2016-08-03T16:51:09.146Z"},{"number":"10.0.0","date":"2016-09-08T17:33:36.981Z"},{"number":"11.0.0","date":"2017-03-21T23:44:50.382Z"},{"number":"12.0.0","date":"2017-03-24T16:43:20.276Z"},{"number":"12.1.0","date":"2017-04-19T18:22:20.389Z"},{"number":"12.2.0","date":"2017-05-08T14:47:49.087Z"},{"number":"12.2.1","date":"2017-05-28T07:01:49.329Z"},{"number":"12.2.2","date":"2017-05-28T08:58:59.223Z"}],"starsCount":32,"created":"2014-08-16T03:34:19.673Z","modified":"2017-06-15T22:50:51.877Z","lastPublisher":{"name":"hueniverse","email":"eran@hammer.io"},"owners":[{"name":"hueniverse","email":"eran@hammer.io"},{"name":"marsup","email":"nicolas@morel.io"},{"name":"nlf","email":"quitlahok@gmail.com"},{"name":"wyatt","email":"wpreul@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"wreck","_nodeVersion":"7.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/wreck-12.2.2.tgz_1495961938939_0.8778469352982938"},"_npmUser":{"name":"hueniverse","email":"eran@hammer.io"},"_npmVersion":"4.2.0","_rev":"94-b2822b3fa981e6acf33a9af91b704e88","_shasum":"e21823d34c36d672004eefa347ae8c4f6050e3db","bugs":{"url":"https://github.com/hapijs/wreck/issues"},"directories":{},"dist-tags":{"latest":"12.2.2"},"dist":{"shasum":"e21823d34c36d672004eefa347ae8c4f6050e3db","tarball":"https://registry.npmjs.org/wreck/-/wreck-12.2.2.tgz"},"maintainers":[{"name":"hueniverse","email":"eran@hammer.io"},{"name":"marsup","email":"nicolas@morel.io"},{"name":"nlf","email":"quitlahok@gmail.com"},{"name":"wyatt","email":"wpreul@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-15T22:50:51.877Z","created":"2014-08-16T03:34:19.673Z","3.0.1":"2014-08-16T03:34:19.673Z","0.0.0":"2014-08-16T06:26:03.755Z","3.0.0":"2014-08-18T17:56:03.269Z","4.0.0":"2014-08-29T20:24:15.151Z","5.0.0":"2014-09-03T20:05:04.196Z","5.0.1":"2014-09-04T20:32:28.548Z","5.1.0":"2014-12-16T03:14:04.935Z","5.2.0":"2015-02-13T22:15:24.601Z","5.3.0":"2015-03-23T17:03:06.989Z","5.4.0":"2015-03-31T20:50:32.335Z","5.5.0":"2015-04-23T19:11:44.563Z","5.5.1":"2015-04-23T19:23:22.609Z","5.6.0":"2015-06-19T17:22:03.895Z","5.6.1":"2015-07-01T17:44:23.074Z","6.0.0":"2015-07-01T21:35:08.183Z","6.1.0":"2015-07-29T20:52:18.706Z","6.2.0":"2015-08-26T22:01:55.781Z","6.3.0":"2015-09-25T17:44:38.553Z","7.0.0":"2015-10-31T19:38:40.981Z","7.0.1":"2016-03-02T17:52:20.596Z","7.0.2":"2016-03-05T20:02:49.015Z","7.1.0":"2016-03-24T18:24:52.932Z","7.2.0":"2016-04-15T19:40:53.527Z","7.2.1":"2016-05-12T21:05:58.765Z","8.0.0":"2016-06-02T15:24:18.219Z","8.0.1":"2016-07-28T19:50:23.723Z","9.0.0":"2016-08-03T16:51:09.146Z","10.0.0":"2016-09-08T17:33:36.981Z","11.0.0":"2017-03-21T23:44:50.382Z","12.0.0":"2017-03-24T16:43:20.276Z","12.1.0":"2017-04-19T18:22:20.389Z","12.2.0":"2017-05-08T14:47:49.087Z","12.2.1":"2017-05-28T07:01:49.329Z","12.2.2":"2017-05-28T08:58:59.223Z"},"users":{"siandiaz":true,"santosharakere":true,"ruiquelhas":true,"bbrown":true,"sprjrx":true,"markthethomas":true,"corintho":true,"passcod":true,"koulmomo":true,"parkerproject":true,"jalcine":true,"nalindak":true,"hentai_mew":true,"illustratordavid":true,"ceejbot":true,"stgogm":true,"vitorazevedo":true,"blacksun1":true,"mouradhamoud":true,"pospi":true,"jujhars13":true,"tmurngon":true,"janez89":true,"antixrist":true,"mhaidarh":true,"cbeulke":true,"hurerera":true,"geduardcatalin":true,"lassevolkmann":true,"dankle":true,"papasavva":true,"wyatt":true}}}