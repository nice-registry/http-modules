{"name":"sn-proxy","description":"Project Tin HTTP Reverse Proxy (formerly OhMeadhbh/kaeng)","licenses":[{"type":"MIT","url":"https://github.com/smithee-us/sn-proxy/raw/master/LICENSE"}],"repository":"https://github.com/smithee-us/sn-proxy","version":"0.0.17","keywords":["proxy"],"bin":{"gssc":"./bin/gssc","sn-proxy":"./bin/sn-proxy","httpsify":"./bin/httpsify","test-server":"./bin/test-server"},"dependencies":{"sn-core":"*","sn-props":"*","http-proxy":"0.10.4"},"homepage":"https://github.com/smithee-us/sn-proxy","gitHead":"aee5b41a2186945907ca99492d650bb485f34464","scripts":{},"versions":[{"number":"0.0.7","date":"2013-12-14T00:09:14.571Z"},{"number":"0.0.8","date":"2014-01-15T18:30:38.984Z"},{"number":"0.0.9","date":"2014-01-23T02:00:19.209Z"},{"number":"0.0.10","date":"2014-10-18T02:07:36.006Z"},{"number":"0.0.11","date":"2014-12-11T01:20:00.101Z"},{"number":"0.0.12","date":"2015-01-03T19:10:30.120Z"},{"number":"0.0.13","date":"2015-01-04T07:04:34.768Z"},{"number":"0.0.14","date":"2015-01-10T19:14:36.963Z"},{"number":"0.0.15","date":"2015-01-10T19:41:42.044Z"},{"number":"0.0.16","date":"2015-02-01T01:13:13.729Z"},{"number":"0.0.17","date":"2015-06-01T02:06:55.705Z"}],"readme":"sn-proxy\n========\n\nProject Tin HTTP Reverse Proxy (formerly OhMeadhbh/kaeng)\n\n# Introduction\n\n'sn-proxy' is a small package we use around the office to implement a simple\ntls-aware, hostname-based reverse proxy. This code will listen on ports 80\nand 443 on a \"real\" network interface and proxy HTTP and HTTPS requests to\nports on different ports on localhost based on the hostname in the request.\n\nThe current version is more or less just a wrapper around Nodjitsu's\nhttp-proxy, but this may change in the near future.\n\n# Installation\n\nTo install with NPM, issue this command:\n\n<pre>    npm install sn-proxy</pre>\n\nOr, to get the (even more) bleeding edge code, use GIT:\n\n<pre>    git clone git://github.com/OhMeadhbh/sn-proxy.git</pre>\n\n# Configuration\n\nOnce you've downloaded the package, copy the <code>proxyroutes-example.json</code>\nfile to <code>proxyroutes.json</code> and open it in your favorite editor. The\nexample file shows a configuration with three \"zones\": production, development\nand secure. Each zone is an element in the JSON object in the proxyroutes.json\nfile.\n\n<pre>{\n  \"production\": {\n    \"ssl\": false,\n    \"port\": 80,\n    \"router\": {\n      \"local.example.com\": \"127.0.0.1:9000\",\n      \"local.example.net\": \"127.0.0.1:9001\",\n      \"local.example.org\": \"127.0.0.1:9002\"\n    }\n  },\n  \"development\": {\n    \"ssl\": false,\n    \"port\": 8080,\n    \"router\": {\n      \"local.example.com\": \"127.0.0.1:19000\",\n      \"local.example.org\": \"127.0.0.1:19002\"\n    }\n  },\n  \"secure\": {\n    \"ssl\": true,\n    \"port\": 443,\n    \"ciphers\": \"AES:!LOW:!MEDIUM:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!3DES\",\n    \"router\": {\n      \"local.example.com\": \"127.0.0.1:29000\"\n      \"local.example.net\": \"127.0.0.1:29001\"\n    }\n  }\n}</pre>\n\nThe first two zones (production and development) are non-secure\n(i.e. - non https.) You can see this because the \"ssl\" member of the zone\nobject is \"false\". The \"production\" zone routes requests that come in from\nport 80 to local ports 9000, 9001 or 9002 depending on the hostname in the\nrequest.\n\nIf you wanted to deploy a service on local.example.com, you would build your\nservice normally, but instead of listening on port 80, you would listen on\nport 9000 on the local interface (127.0.0.1).\n\nThe \"secure\" zone works the same way, except you have the option of adding\n\"ciphers\" and \"secureProtocol\" members that describe the ciphers you want to\nuse and the version of TLS you want to support.\n\nBefore using the secure option, you must generate keys for each host specified\nin the zone's router object. Keys are named <hostname>.key while certs are\n<hostname>.crt. So, for example, in the example above, we would need the files:\nlocal.example.com.key, local.example.com.crt, local.example.net.key and\nlocal.example.net.crt before continuing.\n\nYou'll also need a default key and cert called \"localhost.key\" and\n\"localhost.crt\". The default key is used if an unknown host is specified, so\nit's up to you to determine how secure this key (and cert) should be. We\nfrequently use self-signed certs for the default. (For a quick and easy way\nto generate a self signed cert, the <code>gssc</code> script in the\nbin directory.\n\nThere is also a node.js program in the certs directory called\n<code>self-certs.js</code>. This program will scan\n<code>/etc/proxyroutes.json</code> (if it exists) or a resource\nidentified with the <code>--config</code> option and generate\nself-signed certificates for each entry in the file. This invocation\nwill extract hostnames from <code>/etc/proxyroutes.json</code>:\n\n<pre>    node self-certs.js</pre>\n\nwhile this invocation will extract hostnames from the file\n<code>proxyroutes.json</code> in the package's root directory:\n\n<pre>    node self-certs.js --config file://../proxyroutes.json</pre>\n\n# Deployment\n\nOnce you've configured your proxy, install the pre-requesite packages with\nthe command:\n\n<pre>    make</pre>\n\nOnce that completes, you can start it with the command:\n\n<pre>    node sn-proxy.js --config file://proxyroutes.json</pre>\n\n## Deploying on a Debian Linux host\n\nAssuming everything above works correctly and you're on a Debian-based system\n(including most recent versions of Ubuntu) you can install it as a\nself-starting service with the command:\n\n<pre>    make install-deb</pre>\n\nThis will copy the startup script from <code>conf/sn-proxy</code> into\n<code>/etc/init.d/sn-proxy</code> and run <code>update-rc.d</code>.\n\nIf you want to overwrite your existing <pre>/etc/proxyroutes.json</pre> file\nwith a default set of routes, use this command:\n\n<pre>    make install-routes</pre>\n\nThis will create routes for localhost, your hostname, your fully qualified\ndomain name, and the IP addresses for each of the attached network interfaces.\nIncoming traffic on port 80 will be redirected to port 9000 on the localhost\ninterface (127.0.0.1). Incoming TLS traffic will be redirected to port 29000\non 127.0.0.1.\n\n# test-server and httpsify\n\nTwo scripts are included to facilitate https-only and testing environments.\nThe `httpsify` script listens on a port and redirects all incoming traffic on\na http server to the eqivalent https URL. To start a httpsify server, simply\nspecify the local port to listen on as a parameter:\n\n<pre>    httpsify 9000</pre>\n\nThe `test-server` exports a simple HTTP server on the specified port:\n\n<pre>    test-server 29000</pre>","created":"2013-12-14T00:07:55.934Z","modified":"2015-06-01T02:06:55.705Z","lastPublisher":{"name":"meadhbh","email":"meadhbh@smithee.us"},"owners":[{"name":"meadhbh","email":"meadhbh+npm@smithee.us"}],"other":{"_attachments":{},"_from":".","_id":"sn-proxy","_npmUser":{"name":"meadhbh","email":"meadhbh@smithee.us"},"_npmVersion":"1.4.28","_rev":"1-13b2a00c5d684d22ec3cd95f9b4012d3","_shasum":"7a592c308bfecd1861b467962e2437f61acc7d45","bugs":{"url":"https://github.com/smithee-us/sn-proxy/issues"},"directories":["conf","bin"],"dist-tags":{"latest":"0.0.17"},"dist":{"shasum":"7a592c308bfecd1861b467962e2437f61acc7d45","tarball":"http://registry.npmjs.org/sn-proxy/-/sn-proxy-0.0.17.tgz"},"maintainers":[{"name":"meadhbh","email":"meadhbh+npm@smithee.us"}],"readmeFilename":"README.md","time":{"modified":"2015-06-01T02:06:55.705Z","created":"2013-12-14T00:07:55.934Z","0.0.7":"2013-12-14T00:09:14.571Z","0.0.8":"2014-01-15T18:30:38.984Z","0.0.9":"2014-01-23T02:00:19.209Z","0.0.10":"2014-10-18T02:07:36.006Z","0.0.11":"2014-12-11T01:20:00.101Z","0.0.12":"2015-01-03T19:10:30.120Z","0.0.13":"2015-01-04T07:04:34.768Z","0.0.14":"2015-01-10T19:14:36.963Z","0.0.15":"2015-01-10T19:41:42.044Z","0.0.16":"2015-02-01T01:13:13.729Z","0.0.17":"2015-06-01T02:06:55.705Z"}}}