{"name":"apx-express-socket.io","version":"0.3.1","description":"Express HTTP Server, and Socket.IO translator for APX API server","homepage":"https://github.com/snailjs/apx-express-socket.io","authors":[{"name":"Bryan Tong","email":"contact@nullivex.com","homepage":"https://github.com/nullivex"},{"name":"Tony Butler","email":"spudz76@gmail.com","homepage":"https://github.com/spudz76"}],"repository":"https://github.com/snailjs/apx-express-socket.io","keywords":["express","socket.io","translator","apx"],"engines":{"node":">=0.8.0"},"dependencies":{"express":"~3.4.7","socket.io":"~0.9.16","redis":"~0.9.2","temp":"~0.6.0","jsontoxml":"0.0.11","busboy":"0.0.14"},"devDependencies":{"grunt":"~0.4.2","grunt-contrib-jshint":"~0.7.1","grunt-contrib-watch":"~0.5.3","grunt-mocha-test":"~0.8.1","grunt-project-update":"~0.2.2","mocha":"~1.15.1","chai":"~1.8.1","jshint-stylish":"~0.1.3","apx":"~0.6.1","socket.io-client":"~0.9.16","restler":"~3.1.0"},"scripts":{"test":"grunt test"},"versions":[{"number":"0.1.0","date":"2013-12-18T00:02:11.428Z"},{"number":"0.2.0","date":"2013-12-27T02:13:15.548Z"},{"number":"0.3.0","date":"2014-01-23T03:02:54.305Z"},{"number":"0.3.1","date":"2014-03-27T19:28:11.913Z"}],"readme":"apx-express-socket.io [![Build Status](https://travis-ci.org/snailjs/apx-express-socket.io.png?branch=master)](https://travis-ci.org/snailjs/apx-express-socket.io)\r\n============\r\n\r\nExpress HTTP Server, and Socket.IO translator for APX API server\r\n\r\n## Usage\r\n\r\nSimply add the initializer to the Apx config.\r\n\r\n```\r\n$ npm install apx apx-express-socket.io\r\n```\r\n\r\n```js\r\nvar apx = require('apx')\r\napx.start({\r\n  translators: ['apx-express-socket.io']\r\n})\r\n```\r\n\r\n## Note about Socket.IO\r\n\r\nAs of writing we are using `Socket.IO 0.9.16`. After quite a bit of research and testing for our test\r\nsuite it wont quite shut down correctly even when the HTTP server is closed. Express shuts down just fine\r\nbut Socket.IO uses an instance upstream that doesn't seem to want to shutdown and restart within our tests.\r\n\r\nIn order to get the tests passing we restructured our tests to use a single instance of the translator rather than\r\nrestarting it for each section.\r\n\r\nIn production this should not cause a limitation however we are open to suggestions on how to better handle shutting\r\nSocket.IO down. That way when the translator is stopped it can truly be started again.\r\n\r\n## Configuration\r\n\r\n### Express\r\n\r\n#### Enabled\r\n* Variable `express.enabled`\r\n* Required **no**\r\n* Default `true`\r\n\r\nEnable or disable express also listening on the port.\r\n\r\n### Host\r\n* Variable `express.host`\r\n* Require **no**\r\n* Default `null`\r\n\r\nHost for express to listen on will default to the express default otherwise\r\n\r\n#### Port\r\n* Variable `express.port`\r\n* Required **no**\r\n* Default `3000`\r\n\r\nPort to listen on otherwise will default to 3000\r\n\r\n### Logger\r\n* Variable `express.logger`\r\n* Require **no**\r\n* Default `null`\r\n\r\nEnable or disable the express connection logger explicitly. By default it will\r\nbe used during development and disabled when `NODE_ENV` is set to `production`\r\n\r\n### Static\r\n* Variable `express.static`\r\n* Required **non**\r\n* Default `null`\r\n\r\nSet this to the root path of the static file server to be used with express. No static server will\r\nbe setup if this variable is not set.\r\n\r\n#### Routes\r\n* Variable `express.routes`\r\n* Required **no**\r\n\r\nArray of routes that should be accepted.\r\n\r\n```js\r\n{\r\n  express: {\r\n    routes: [\r\n      {get: {path: '/status', file: 'actions/status.js'}}\r\n      {post: {path: '/page', file: 'actions/page.js', methods: ['list','find','findOne','save','remove']}}\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n#### Busboy\r\n\r\nBusboy is the HTTP multipart parser for the express translator. In order to configure busboy\r\nuse any of the prescribed configuration options in the docs [see here](https://github.com/mscdex/busboy#busboy-methods)\r\n\r\nExample\r\n```js\r\n{\r\n  express: {\r\n    busboy: {\r\n      limits: {\r\n        fileSize: 33554432 //32MB\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Socket.IO\r\n\r\n#### Enabled\r\n* Variable `socket-io.enabled`\r\n* Required **no**\r\n* Default `true`\r\n\r\nEnable or disable Socket.IO also listening on the express port.\r\n\r\n#### Config\r\n* Variable `socket-io.config`\r\n* Required **no**\r\n* Default `{}`\r\n\r\nConfiguration object to be passed to socket.io at call time.\r\n\r\n#### Routes\r\n* Variable `socket-io.routes`\r\n* Required **no**\r\n\r\nArray of routes that should be accepted. These would be considered event listeners, eg `page:list`\r\n\r\n```js\r\n{\r\n  'socket-io': {\r\n    routes: [\r\n      {status: 'actions/status.js'},\r\n      {page: {file: 'actions/page.js', methods: ['list','find','findOne','save','remove']}}\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n## Socket.IO in Production / Clustering\r\n\r\nIt is imperative to use redis to back Socket.IO in production or cluster environments. Here is an example of the\r\nconfiguration.\r\n\r\n```js\r\nvar redis = require('redis')\r\n  , RedisStore = require('socket.io/lib/stores/redis')\r\n  , IOStore = new RedisStore({\r\n      redisPub: redis.createClient(),\r\n      redisSub: redis.createClient(),\r\n      redisClient: redis.createClient()\r\n    }))\r\napx.start({\r\n  'socket-io': {\r\n    config: {\r\n      store: IOStore\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Changelog\r\n\r\n### 0.3.1\r\n* Added req.raw.req and req.raw.res\r\n* Added static support through config\r\n\r\n### 0.3.0\r\n* Upgraded to work with apx 0.6.0\r\n* Response handling now does the rendering in the translator\r\n* Added `busboy` to handle incoming file uploads\r\n* Works with latest apx file object format\r\n* Supports sending json, xml, raw, and files\r\n* Added extensive testing against input and output formats\r\n* In order to support busboy and mime type detection node support for node ~0.8 has been dropped\r\n* Redis is no longer started automatically and must be configured by the user\r\n* Added full config passing to socket.io for better control\r\n\r\n### 0.2.0\r\n* Upgraded to work with apx 0.4.0\r\n* Added additional configuration parameters for express\r\n* Socket.io can now be disabled through the config\r\n* Added additional configuration parameters for socket.io\r\n\r\n### 0.1.0\r\n* Initial release\r\n","created":"2013-12-18T00:02:09.288Z","modified":"2014-03-27T19:28:11.913Z","lastPublisher":{"name":"nullivex","email":"contact@nullivex.com"},"owners":[{"name":"nullivex","email":"contact@nullivex.com"}],"other":{"_attachments":{},"_from":".","_id":"apx-express-socket.io","_npmUser":{"name":"nullivex","email":"contact@nullivex.com"},"_npmVersion":"1.3.22","_rev":"1-2bc723546ffbb1a8a31456488728259e","bugs":{"url":"https://github.com/snailjs/apx-express-socket.io/issues"},"directories":{},"dist-tags":{"latest":"0.3.1"},"dist":{"shasum":"28f0819362ede372f43c3cd99841879017508561","tarball":"http://registry.npmjs.org/apx-express-socket.io/-/apx-express-socket.io-0.3.1.tgz"},"maintainers":[{"name":"nullivex","email":"contact@nullivex.com"}],"readmeFilename":"README.md","time":{"modified":"2014-03-27T19:28:11.913Z","created":"2013-12-18T00:02:09.288Z","0.1.0":"2013-12-18T00:02:11.428Z","0.2.0":"2013-12-27T02:13:15.548Z","0.3.0":"2014-01-23T03:02:54.305Z","0.3.1":"2014-03-27T19:28:11.913Z"}}}