{"name":"jquery-http","version":"1.0.1","description":"Simple wrapper around jquery's ajax","main":"dist/jquery-http.min.js","license":"MIT","repository":"https://github.com/ilucin/jquery-http","keywords":["http","request","jquery"],"devDependencies":{"grunt":"^0.4.5","grunt-contrib-clean":"^0.6.0","grunt-contrib-uglify":"^0.9.1"},"gitHead":"4f5b701e3b38edd63a71815845efb7e11ec2bc68","homepage":"https://github.com/ilucin/jquery-http#readme","scripts":{},"readme":"# JQueryHttp\n\nA simple wrapper for jquery's ajax that provides few convenient features.\n\nDon't worry, it also works as a drop-in replacement for $.ajax.\n\n## Instalation\n\n```html\n<script type=\"text/javascript\" src=\"dist/jquery-http.js\"></script>\n```\n\n Bower package:\n ```\n bower install -S jquery-http\n ```\n\n NPM module:\n ```\n npm install --save jquery-http\n ```\n\n## Example usage\n\nFirst instantiate and setup your http wrapper:\n```javascript\nvar http = new JQueryHttp({\n  serverRoot: 'http://mysite.com',\n  apiRoot: '/api/v1/'\n});\n```\n\n... and then perform a request to some API route:\n\n```javascript\nhttp.request({\n  url: {\n    route: 'user/:id/profile',\n    params: {\n      id: 5\n    }\n  },\n  method: 'GET',\n  context: this\n}).then(function(response) {\n  console.log(response);\n}, function(err) {\n  console.log(err);\n});\n// Will fire a request to http://mysite.com/api/v1/user/5/profile\n```\n\nor event simpler:\n\n```javascript\nhttp.request('GET', 'users/:id', { id: user.id }).then(function(response) {\n  console.log(response);\n});\n\nhttp.request('POST', 'users/:id', { id: user.id }, { name: 'Ivan'} );\n```\n\n## Main features / Why would you use it?\n\n### Setup default API endpoint and query parameters\nUsually, you want to setup your API configuration only once and use it from the rest of your app - to keep things DRY. Sometimes you need to use default query params for every request, like language or token. Or you need to use and handle multiple versions of your API.\n\nWith **JQueryHttp** you can create a configured instance for all of that:\n\n```javascript\nvar http = new JQueryHttp({\n  defaultParams: {\n    lang: 'en'\n  },\n  serverRoot: 'api.mysite.com',\n  apiRoot: '/v1'\n});\n```\n\n### URL creation helper\nSometimes you only need to generate URL for a request and you want to reuse the same configuration you defined earlier. For example, in Backbone, if you want to use integrated Backbone.sync mechanism that's performing http requests for your models and collections.  \n\n```javascript\nhttp.url({\n  route: 'users/:id/cars'\n  params: {\n    id: '5'\n  }\n});\n// ==> 'api.mysite.com/v1/users/5/cars'\n```\n\nURL helper supports convenient \":param\" syntax for injecting parameters.\n\n### Returns Promises/A+ compliant promise instead of jquery deferred\nWhat I've always hated about Jquery is their non-standard Promise implementation. This wrapper returns a native promise instead of jquery deffered promise object. If you need a good, small (Promises/A+ compliant) library to polyfill the native Promise - you can use [lie.js](https://github.com/calvinmetcalf/lie) or similar.\n\nSo, now you can do something like this:\n```javascript\nhttp.request('GET', 'users/5')\n  .then(function(response) {\n    console.log('We got user 5');\n    return http.request('GET', 'users/5/cars');\n  })\n  .then(function(response) {\n    console.log('We got user cars');\n    return http.request('GET', 'users/5/cars/1');\n  })\n  .then(function(response) {\n    console.log('We got car 1');\n  })\n  .catch(function(err) {\n    console.log('We got an error:', err);\n  });\n```\n\n... or this:\n\n```javascript\nPromise.all([\n  http.request('GET', 'users/5'),\n  http.request('GET', 'users/5/cars'),\n  http.request('GET', 'users/5/cars/1')\n]).then(function(responses) {\n  console.log('All responses', responses);\n}, function(err) {\n  console.log('Error:', err);\n})\n```\n\n### Loading local mock data\nWhen developing new client-side apps, you often don't have an API ready but you want to start working on the client code. In these cases, I tend to setup mocked json responses for every future API call and instead of connecting to the server just load all the mock data from the filesystem. JQueryHttp wrapper is simplifying this process so later, when you get your API, you can just switch one configuration flag and everything works.\n\nYou would be suprised how far can you get developing your app just by using mocked data. This approach can also make the client-side testing much easier to perform.\n\nFirst configure the http instance to use mock data and define root directory where mocked data is stored:\n```javascript\nhttp.setup({\n  isMockMode: true,\n  mockRoot: '/data/mock/'\n})\n```\n\nThen write your requests just as you usually would but but add another parameter that defines the file for mock response:\n```javascript\nhttp.request({\n  method: 'GET',\n  url: {\n    mock: 'user',\n    route: '/users/:id',\n    params: {\n      id: 5\n    }\n  }\n}).then(function(response) {\n  console.log('We got mocked data here:', response);\n});\n\n// This will load content of /data/mock/user.json into the response\n```\n\nThis also works for POST, PATCH, PUT and DELETE requests (library is always forcing GET in mock mode).\n\n### Aborting multiple equivalent requests\nThere are use cases when you're doing a lot of equivalent requests and it only makes sense to complete the last one. For example, when performing a search on the client and the user types really fast. Of course, you should still use throttling (or debouncing) for keyboard event handlers but I've still found this feature very usefull.\n\nWhen you try to perform a request, the last one with the same **requestKey** will be aborted if it hadn't finished yet.\n\nYou can either explictly define a **requestKey** or it will be implicitly generated from the URL. Example:\n\n```javascript\nhttp.request({\n  method: 'GET',\n  url: '/users',\n  requestKey: 'users'\n})\n```\n\nYou can disable this behavior by doing (it's on by default):\n```javascript\nhttp.setup({\n  abortEquivalentRequests: false\n})\n```\n\nYou can also manually abort a request with a given **requestKey** using this:\n```javascript\nhttp.abortRequest('users');\n```\n\n## API Documentation\n\n### constructor\n```javascript\n// opts: object => passed to http.setup()\nhttp = new JQueryHttp(opts);\n```\n\n#### http.setup()\nUsed to initialize the wrapper instance. Setup method is invoked either via constructor or manually.\n\nDefault configuration:\n```javascript\nhttp.setup({\n  defaultParams: null,  // Default params for http.url() helper\n  abortEquivalentRequests: true,  // Flag to enable/disable abort equivalent requests behavior\n  isMockMode: false,  // Flag to enable/disable mock mode\n  mockRoot: '', // A route to mock data directory\n  serverRoot: '', // Server root url\n  apiRoot: '' // API root prefix for urls\n});\n```\n\n#### http.url()\nCreate URL for the request. Returns URL string.\n\n```javascript\nhttp.url({\n  route: string, // A route string that accepts :param syntax as data placeholder\n  params: object, // Params that will be injected either as route or query params\n  mock: string // Path to mock file for the request\n});\n```\n\nShorter syntax:\n```javascript\n// route: string => 'users/:id'\n// params: object (optional) => { id: 5 }\n// mock: string (optional) => 'users'\nhttp.url(route, params, mock);\n```\n\n#### http.request()\nPerform a request (call to $.ajax). Returns a Promise.\n\n```javascript\nhttp.request({\n  url: object || string, // If object - it's passed to http.url()\n  requestKey: string, // Optional\n  ... // all other standard $.ajax options\n});\n```\n\nShorter syntax:\n```javascript\n// method: string => 'GET'\n// route: string => 'users/:id'\n// urlParams: object (optional) => { id: 5 }\n// data: object (optional) => $.ajax data (for POST request for example)\n// opts: object (optional) => All other standard $.ajax options\nhttp.request(method, route, urlParams, data, opts);\n```\n\n#### http.abortRequest()\nAbort a request with the given **requestKey**.\n```javascript\n// requestKey: string\nhttp.abortRequest(requestKey);\n```\n\n#### http.noConflict()\nIf you need to run this library in no-conflict mode just call this method in the initialization process. You will get back your old JQueryHttp object to global scope and the new one will be returned from the function call.\n\n## Important Notes\n**Browser support:** This library is using native Promise implementation so you **should** have a Promises/A+ compliant polyfill loaded if you want this to work in older browsers. Well, you should do it anyway and use promises instead of callbacks! :)\n\n## TODOs\n* Better test coverage\n* Handle serverRoot, apiRoot and url route concatenation so user don't have to think about leading and trailing slashes\n\n## Contribution\nIf you like this library but you think it can be improved, feel free to [open an issue](https://github.com/ilucin/jquery-http/issues/new) or [submit a pull request](https://github.com/ilucin/jquery-http/pulls). I'm open to adding new features.\n","versions":[{"number":"1.0.0","date":"2016-02-23T15:54:46.265Z"},{"number":"1.0.1","date":"2016-02-24T12:25:17.054Z"}],"created":"2016-02-23T15:54:46.265Z","modified":"2016-02-24T12:25:17.054Z","lastPublisher":{"name":"ilucin","email":"lucin.ivan@gmail.com"},"owners":[{"name":"ilucin","email":"lucin.ivan@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"jquery-http","_nodeVersion":"4.1.2","_npmOperationalInternal":{"host":"packages-5-east.internal.npmjs.com","tmp":"tmp/jquery-http-1.0.1.tgz_1456316716050_0.6095640284474939"},"_npmUser":{"name":"ilucin","email":"lucin.ivan@gmail.com"},"_npmVersion":"3.5.2","_rev":"1-575dfa1898664fca3ac383a0aa57eb22","_shasum":"ec2a604e5d627cb0a6ef4feb5a34e250f52826e0","author":{"name":"Ivan Lucin"},"bugs":{"url":"https://github.com/ilucin/jquery-http/issues"},"directories":{},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"ec2a604e5d627cb0a6ef4feb5a34e250f52826e0","tarball":"http://registry.npmjs.org/jquery-http/-/jquery-http-1.0.1.tgz"},"maintainers":[{"name":"ilucin","email":"lucin.ivan@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-02-24T12:25:17.054Z","created":"2016-02-23T15:54:46.265Z","1.0.0":"2016-02-23T15:54:46.265Z","1.0.1":"2016-02-24T12:25:17.054Z"}}}