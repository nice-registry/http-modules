{"name":"sw-proxy","version":"0.5.0","description":"A RFC-compliant HTTP proxy library for service workers.","keywords":["service-worker","serviceworker","proxy","http","rfc7234","rfc5861"],"homepage":"https://github.com/ithinkihaveacat/sw-proxy","license":"Apache-2.0","files":["dist"],"repository":"https://github.com/ithinkihaveacat/sw-proxy","main":"dist/commonjs/proxy.js","module":"dist/es2015/proxy.js","types":"dist/es2015/proxy.d.ts","devDependencies":{"docco":"^0.7.0","eslint":"^3.18.0","eslint-config-google":"^0.7.1","http-server":"^0.9.0","mocha":"^3.2.0","node-fetch":"^1.6.3","rollup":"^0.41.6","rollup-plugin-typescript":"^0.8.1","tslint":"^4.5.1","typescript":"^2.2.1"},"scripts":{"preversion":"$npm_execpath test","prepare":"tsc -p tsconfig.json --sourceMap -d --module commonjs --outDir dist/commonjs && tsc -p tsconfig.json --sourceMap -d --module es2015 --outDir dist/es2015","postpublish":"git push && git push --tags","test":"$npm_execpath run prepare && $npm_execpath run lint && mocha","test:watch":"$npm_execpath run test -- -w","lint":"eslint test/*.js && tslint router.ts proxy.ts examples/*.ts","printenv":"printenv","examples:build":"cd examples ; for f in *.ts ; do rollup -c -f iife -i $f -o `basename $f .ts`.js ; done","examples:docs":"docco -o examples/docs examples/*.ts","start":"$npm_execpath run examples:build && $npm_execpath run examples:docs && http-server -a localhost examples -c-1"},"dependencies":{"@types/service_worker_api":"^0.0.9"},"gitHead":"c5459a3bef1cca19cbda15eff9e3dcf736901047","versions":[{"number":"0.0.1","date":"2016-11-25T12:37:32.694Z"},{"number":"0.0.2","date":"2016-11-25T12:41:19.713Z"},{"number":"0.0.3","date":"2016-11-25T13:15:55.645Z"},{"number":"0.0.4","date":"2016-11-25T13:25:30.853Z"},{"number":"0.1.0","date":"2017-01-14T07:38:59.421Z"},{"number":"0.2.0","date":"2017-01-14T08:47:21.009Z"},{"number":"0.3.0","date":"2017-02-18T10:23:32.060Z"},{"number":"0.4.0","date":"2017-03-17T13:41:45.616Z"},{"number":"0.5.0","date":"2017-03-23T16:04:15.886Z"}],"readme":"[![Build Status](https://travis-ci.org/ithinkihaveacat/sw-proxy.svg?branch=master)](https://travis-ci.org/ithinkihaveacat/sw-proxy)\n\n# HTTP Proxy Proof-of-Concept\n\n*This is not an official Google product!*\n\n## Motivation\n\nPerhaps surprisingly, the service worker cache [does not behave like a standard\nHTTP cache](http://stackoverflow.com/a/35152817/11543);\n[`http-proxy.js`](/docs/http-proxy.html) attempts to implement an [RFC\n7234](https://tools.ietf.org/html/rfc7234) and [RFC\n5861](https://tools.ietf.org/html/rfc5861) compliant HTTP proxy suitable for use\nwithin a service worker.\n\nSome reasons for investigating this:\n\n* **Is it possible to polyfill HTTP features browsers don't support?** Browsers support some, but not all, of the standard cache control headers. For example, no browser implements [`stale-while-revalidate`](https://tools.ietf.org/html/rfc5861#section-3) or [`stale-if-error`](https://tools.ietf.org/html/rfc5861#section-4) (though `stale-while-revalidate` may arrive in Chrome [at some point](https://www.chromestatus.com/feature/5050913014153216)). Is it possible to provide a useful polyfill for these cache control headers? (This may be particularly useful in the future if [foreign fetch](https://www.chromestatus.com/feature/5684130679357440) is implemented.)\n* **Is it possible to implement different caching strategies on top of HTTP?** HTTP has sophisticated, well-defined, and well-understood caching features, and so it might make sense to implement different caching strategies via simple header-manipulating wrappers on top of a generic HTTP proxy, instead of writing strategy-specific cache manipulation code with a custom configuration language. Is this a viable approach?\n\n## <strike>Examples</strike> (currently broken)\n\nTo view the examples:\n\n```sh\n$ yarn # or npm install\n$ yarn start\n# open http://127.0.0.1:8000/\n```\n\nRecommendations:\n\n* Keep the \"server\" terminal window open to see when requests are really made.\n* Open DevTools.\n* Turn on network throttling to the slowest speed.\n\nNotes:\n\n* The cache and service workers are reset every time `index.html` is loaded.\n* The examples are initiated via an interstitial page that installs and activates the service worker. This is slightly ugly, but it makes the examples a lot easier to follow.\n\n## Tests\n\nThere aren't many tests at the moment, but what tests there are can be run via:\n\n```sh\n$ yarn test # or npm test\n```\n\n## Author\n\nMichael Stillwell <mjs@beebo.org>\n","created":"2016-11-25T12:37:32.694Z","modified":"2017-03-23T16:04:15.886Z","lastPublisher":{"name":"mjs","email":"mjs@beebo.org"},"owners":[{"name":"mjs","email":"mjs@beebo.org"}],"other":{"_attachments":{},"_from":".","_id":"sw-proxy","_nodeVersion":"7.6.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/sw-proxy-0.5.0.tgz_1490285055185_0.6198781304992735"},"_npmUser":{"name":"mjs","email":"mjs@beebo.org"},"_npmVersion":"4.1.2","_rev":"9-fcbd07ba3d5f2972ddd78ada3c3b6966","_shasum":"5d63046e203b8c6c3f123964c5da3dd9fe2dd9ba","author":{"name":"Michael Stillwell","email":"mjs@beebo.org","url":"https://beebo.org/"},"bugs":{"url":"https://github.com/ithinkihaveacat/sw-proxy/issues"},"directories":{},"dist-tags":{"latest":"0.5.0"},"dist":{"shasum":"5d63046e203b8c6c3f123964c5da3dd9fe2dd9ba","tarball":"https://registry.npmjs.org/sw-proxy/-/sw-proxy-0.5.0.tgz"},"maintainers":[{"name":"mjs","email":"mjs@beebo.org"}],"readmeFilename":"README.md","time":{"modified":"2017-03-23T16:04:15.886Z","created":"2016-11-25T12:37:32.694Z","0.0.1":"2016-11-25T12:37:32.694Z","0.0.2":"2016-11-25T12:41:19.713Z","0.0.3":"2016-11-25T13:15:55.645Z","0.0.4":"2016-11-25T13:25:30.853Z","0.1.0":"2017-01-14T07:38:59.421Z","0.2.0":"2017-01-14T08:47:21.009Z","0.3.0":"2017-02-18T10:23:32.060Z","0.4.0":"2017-03-17T13:41:45.616Z","0.5.0":"2017-03-23T16:04:15.886Z"}}}