{"name":"raiden","version":"1.0.4","description":"CLI for interacting with http servers","scripts":{"test":"jest","postinstall":"node ./bin/postinstall"},"repository":"https://github.com/peterjcaulfield/raiden","keywords":["CLI","API","http","devtool","REST","workflow"],"engines":{"node":">=6.0.0"},"os":["darwin","linux"],"email":"peterjcaulfield@gmail.com","license":"MIT","homepage":"https://github.com/peterjcaulfield/raiden#readme","dependencies":{"bluebird":"^3.4.1","chance":"^1.0.3","commander":"^2.9.0","js-yaml":"^3.6.1","qs":"^6.2.0","request-promise":"^3.0.0","schema-inspector":"^1.6.4"},"devDependencies":{"babel-jest":"^12.1.0","eslint":"^2.9.0","eslint-config-airbnb-base":"^3.0.1","eslint-plugin-import":"^1.10.1","expect":"^1.20.1","grunt":"^1.0.1","grunt-exec":"^0.4.7","jest-cli":"^16.0.1","load-grunt-config":"^0.19.2","load-grunt-configs":"^1.0.0","load-grunt-tasks":"^3.5.0","pm2":"^1.1.3"},"bin":{"raiden":"./bin/raiden"},"jest":{"setupFiles":["<rootDir>/jest_env.js"]},"gitHead":"bb00b249be96693d7b8daf243231b2e8994c3ccc","versions":[{"number":"1.0.0-alpha.1","date":"2016-07-04T13:28:06.146Z"},{"number":"1.0.0-alpha.2","date":"2016-07-04T14:35:18.002Z"},{"number":"1.0.0-alpha.3","date":"2016-07-04T15:14:15.579Z"},{"number":"1.0.0-alpha.4","date":"2016-07-04T15:19:40.001Z"},{"number":"1.0.0-alpha.5","date":"2016-07-04T15:27:04.481Z"},{"number":"1.0.0-alpha.6","date":"2016-07-05T10:38:38.261Z"},{"number":"1.0.0-alpha.7","date":"2016-07-05T10:52:20.434Z"},{"number":"1.0.0-alpha.8","date":"2016-07-05T13:11:25.063Z"},{"number":"1.0.1-alpha","date":"2016-07-06T11:02:49.955Z"},{"number":"1.0.2","date":"2016-07-09T10:44:30.609Z"},{"number":"1.0.3","date":"2016-10-16T15:36:12.823Z"},{"number":"1.0.4","date":"2016-11-06T18:48:44.232Z"}],"readme":"# Raiden\n[![Build Status](https://api.travis-ci.org/peterjcaulfield/raiden.svg?branch=master)](http://travis-ci.org/peterjcaulfield/raiden)\n\n`raiden` is a CLI built on top of the node [request](https://github.com/request/request/blob/master/README.md) module and is \ndesigned for interacting with http servers. `raiden` is useful for development, testing and debugging. With some simple configs \n`raiden` allows you to execute http requests without the overhead of jumping into a browser or fiddling with `curl`.\n\n## Why\n\n`raiden` can drastically speed up your workflow when working with http servers with features like:\n\n- Tabbed autocompletion. \n- Dynamic request payloads from static configs. No more manual changing of the request payload between requests.\n- Cookie Jar out of the box. Cookies are persisted and used in subsequent requests.\n- Easy to define requests. `raiden` does the heavy lifting.\n\n---\n\n## Table of contents\n- [Installation](#installation)\n- [Getting Started](#getting-started)\n- [Using Multiple Request Configs](#using-multiple-request-configs)\n- [Example Request Definitions](#example-request-definitions)\n    - [Simple GET Request](#simple-get-request)\n    - [Forms](#forms)\n    - [Json](#json)\n    - [Custom Headers](#custom-headers)\n    - [Http Authentication](#http-authentication)\n    - [TLS/SSL Protocol](#tlsssl-protocol)\n    - [Dynamic Request Payloads](#dynamic-request-payloads)\n- [Additional Tips](#additional-tips)\n\n---\n\n## Installation\n\n`npm install -g raiden`\n\nTo enable tab-completion for bash, add the following to your `.bashrc` script:\n\n`which raiden > /dev/null && . \"$( raiden initpath )\"`\n\n---\n\n## Getting started\n\nOn install, a hidden `.raiden` folder will have been created in your home directory containing several files.\n\n#### ~/.raiden/envs.yml\n\nHostnames are stored `~/.raiden/envs.yml` as key/value. You can also define a `default` host to be used for when \nno host is provided to `raiden`. An example config looks like so:\n\n```\n# ~/.raiden/envs.yml\n\ndefault: 127.0.0.1:8888\nstaging: staging.localhost.com:8888\n\n```\n\n**NOTE:** Do not include the protocol in the host definition. `raiden` will use `http` protocol by default for all requests.\nIf you want to use `https` set the `protocol` property in your request definition to `https`.\n\n#### ~/.raiden/requests.yml\n\nAPI request definitions are stored in `~/.raiden/requests.yml`. A simple example config with one request defined looks like so:\n\n```\n# ~/.raiden/requests.yml\n\nget_posts:\n    endpoint: posts\n\n```\n\n--\n\nUsing the above two example configs, we could then execute an API request with:\n\n```\n$ raiden request -e staging get_posts\n```\n\nThis would issue a `GET` request to `http://staging.localhost.com:8888/posts`\n\nMultiple requests can be given to `raiden request` at the same time as arguments:\n\n```\nraiden request -e staging request1 request2 request3 ...\n```\n\nUse `raiden --help` to learn more about raidens exec options and commands. \n\n---\n\n## Using multiple request configs\n\n`raiden` supports multiple request definition config files. If you are working with multiple API's and you wish to segregate the request definitions \nat the API level to different files, simply create additional .yml config files in the `~/.raiden` directory. \n\nYou can then tell `raiden` which config file\nto use for request definitions using the `raiden config` command with the `--set` option:\n\n```\n$ raiden config --set reqfile acme_api_requests.yml\n```\n\n`raiden` will then use `~/.raiden/acme_api_requests.yml` for the request definitions. \n\nYou can confirm the file that's currently being used for request definitions by executing:\n\n```\n$ raiden config --list\nreqfile:acme_api_requests.yml\n```\n\n---\n\n## Example Request Definitions\n\n`raiden` endeavours to support most of the [node request library](https://github.com/request/request/blob/master/README.md) API which\nit is built on top of by way of request-promise. `raiden` will pass nearly all request config props transparently through to the request lib\nunchanged. The notable exceptions are detailed below (filepath values being transformed where applicable in forms/agent options etc). As such\nit is helpful to consult the [node request library docs](https://github.com/request/request#requestoptions-callback) if you are looking to do\nsomething with a request that is not detailed in the following examples.\n\n### Simple GET Request\n\n```\n# ~/.raiden/requests.yml\n\nget_posts:\n    endpoint: posts\n    method: GET\n    qs:             \n        rpp: 10\n        page: 2\n\n```\n\nWith this config `raiden request get_posts` would execute a `GET` request to default host:\n\n`http://127.0.0.1:8888/posts/?rrp=10&page=2`\n\n--\n\n### Forms\n\n`raiden` supports `application/x-www-form-urlencoded` and `multipart/form-data` form uploads.\n\n#### application/x-www-form-urlencoded (URL-Encoded forms)\n\n```\n# ~/.raiden/requests.yml\n\nurl_encoded_form_request:\n    endpoint: form\n    method: POST\n    form:\n        foo: bar\n        baz: qux\n```\n\n#### multipart/form-data (Multipart form uploads)\n\n```\n# ~/.raiden/requests.yml\n\nmultipart_form_request:\n    endpoint: upload\n    method: POST\n    formData:\n        my_field: value \n        file_1: test.txt # this path will be read relative to the .raiden directory\n        file_2: /absolute/path/to/img.png # you can also provide absolute paths\n```\nIf you provide a file path as a value, `raiden` will take care of grabbing binary data needed for the request.\nAny other values will be left unchanged.\n\n--\n\n### Json\n\nDefining a POST request with a json payload is simple:\n\n```\n# ~/.raiden/requests.yml\n\njson_request:\n    endpoint: posts\n    method: POST\n    body:\n        author: W. Whitman\n        title: Leaves of Grass\n        text: A blade of grass is the journeywork of the stars...\n    json: true # let raiden know we want to POST as json\n```\n\n--\n\n### Custom Headers\n\n```\n# ~/.raiden/requests.yml\n\nget_posts:\n    endpoint: posts\n    method: GET\n    headers: \n        User-Agent: raiden\n\n```\n\n--\n\n### HTTP Authentication\n\n```\n\n# ~/.raiden/requests.yml\n\nlogin:\n    protocol: https\n    endpoint: login\n    auth:\n        username: username\n        password: password\n        sendImmediately: false\n\n```\nSee the [request library](https://github.com/request/request#http-authentication) for more information on this configration.\n\n--\n\n### TLS/SSL Protocol\n\nA request that utilises a self signed SSL cert:\n\n```\n# ~/.raiden/requests.yml\n\nlogin:\n    protocol: https\n    endpoint: login\n    agentOptions:\n        ca: /path/to/ca.cert.pem\n```\nSee the [request library](https://github.com/request/request#tlsssl-protocol) for more information on this configration.\n\n--\n\n### Dynamic request payloads\n\n`raiden` allows you to generate dynamic payload data from your static request config using the `transforms` prop.\n\nIt achieves this by integrating with the fantastic [chance library](https://github.com/chancejs/chancejs) to generate the data. \nA good use case example for a transform would be if you wanted to interact with a user registration API endpoint and it required \na unique username in the payload of every request. Rather than manually altering the payload everytime you execute the request, \nyou can use a transform like so:\n\n```\n# ~/.raiden/requests.yml\n\nregister:\n    method: POST\n    endpoint: register\n    body:\n        username: placeholder # raiden will replace this value\n        password: password\n    json: true\n    transforms:\n        - transform: \n            method: string\n            args: \n                length: 10\n            prefix: hans_gruber\n          key: username # execute transform on the username value of the payload\n```\n\nThe above transform would change the Json POST body of the register request to something like:\n\n```\n{\n    username: \"hans_gruber_hkJ983jFn5\"\n    password: \"password\"\n}\n```\n\n`raiden` transforms can also handle generating dynamic values for nested payload props. We just need to specify the path to the prop\nusing a period '.' seperator to delineate the nested object keys:\n\n```\n# ~/.raiden/requests.yml\n\nregister:\n    method: POST\n    endpoint: register\n    body:\n        data:\n            username: placeholder # raiden will replace this value \n            password: password\n    json: true\n    transforms:\n        - transform: \n            method: string\n            args: \n                length: 10\n            prefix: hans_gruber\n          key: data.username \n```\n\n#### transforms API\n\n- `transforms` - array of transform objects.\n    - `transform` - object describing the transform.\n        - `method` - the method to call in the [chance library](https://github.com/chancejs/chancejs) to generate the new value.\n        -  `args` - object of arguments to pass to the chance libary method.\n        - `prefix` - optional string to prepend to the generated value.\n        - `suffix` - optional string to append to the generated value.\n    - `key` - string specifying the property in the request payload that will be transformed.\n\nCheck out the [chance library docs](http://chancejs.com/) for what's possible with the data generation.\n\n---\n### Additional Tips\n\nAutocomplete by default requires you to hit `tab` twice if there are multiple possible matches for the input. This annoying.\nI would highly suggest putting the following into your `~/.inputrc` for a nicer autocomplete experience:\n\n```\nset show-all-if-ambiguous on\n```\n\n---\n\n### License \n\nMIT\n","created":"2016-07-04T13:28:06.146Z","modified":"2016-11-06T18:48:44.232Z","lastPublisher":{"name":"peterjcaulfield","email":"peterjcaulfield@gmail.com"},"owners":[{"name":"peterjcaulfield","email":"peterjcaulfield@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"raiden","_nodeVersion":"6.8.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/raiden-1.0.4.tgz_1478458123625_0.6395370855461806"},"_npmUser":{"name":"peterjcaulfield","email":"peterjcaulfield@gmail.com"},"_npmVersion":"3.10.8","_rev":"2-a08e4d95d10dfe19774904b228fe96b1","_shasum":"d59abc0629f67f696d7290ee365041404d414186","author":{"name":"peter caulfield"},"bugs":{"url":"https://github.com/peterjcaulfield/raiden/issues"},"directories":{},"dist-tags":{"latest":"1.0.4","beta":"1.0.2"},"dist":{"shasum":"d59abc0629f67f696d7290ee365041404d414186","tarball":"http://registry.npmjs.org/raiden/-/raiden-1.0.4.tgz"},"maintainers":[{"name":"peterjcaulfield","email":"peterjcaulfield@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-06T18:48:44.232Z","created":"2016-07-04T13:28:06.146Z","1.0.0-alpha.1":"2016-07-04T13:28:06.146Z","1.0.0-alpha.2":"2016-07-04T14:35:18.002Z","1.0.0-alpha.3":"2016-07-04T15:14:15.579Z","1.0.0-alpha.4":"2016-07-04T15:19:40.001Z","1.0.0-alpha.5":"2016-07-04T15:27:04.481Z","1.0.0-alpha.6":"2016-07-05T10:38:38.261Z","1.0.0-alpha.7":"2016-07-05T10:52:20.434Z","1.0.0-alpha.8":"2016-07-05T13:11:25.063Z","1.0.1-alpha":"2016-07-06T11:02:49.955Z","1.0.2":"2016-07-09T10:44:30.609Z","1.0.3":"2016-10-16T15:36:12.823Z","1.0.4":"2016-11-06T18:48:44.232Z"}}}