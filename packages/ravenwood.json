{"name":"ravenwood","version":"2.0.0","description":"A pipeline-oriented and modular HTTP server","license":"WTFPL","main":"src/index.js","homepage":"https://github.com/pinicarus/ravenwood#readme","keywords":["server","modular","standard"],"repository":"https://github.com/pinicarus/ravenwood","scripts":{"doc":"jsdoc2md --heading-depth 1 --files src/**.js src/di/**.js > API.md","lint":"eslint . --ignore-path .gitignore","unittest":"mocha --opts ./.mocha.opts","unitcov":"istanbul cover -- _mocha --opts ./.mocha.opts","postunitcov":"istanbul check-coverage","pretest":"npm run lint","test":"npm run unitcov","posttest":"cat coverage/lcov.info | coveralls || true"},"dependencies":{"bluebird":"3.5.0","facies":"2.0.2","is-plain-obj":"1.1.0","piquouze":"5.0.0","ramda":"0.23.0","route-trie":"2.1.0","titlecase":"1.1.2","topo":"2.0.2"},"devDependencies":{"coveralls":"2.12.0","eslint":"3.18.0","istanbul":"0.4.5","jsdoc-to-markdown":"3.0.0","mocha":"3.2.0"},"gitHead":"d00c5f44f9dff5c24db2ff7b336cfb4cc0b25504","versions":[{"number":"1.0.0","date":"2017-03-07T22:16:21.645Z"},{"number":"2.0.0","date":"2017-03-27T19:41:37.330Z"}],"readme":"# Ravenwood\n\n`ravenwood` is a pipeline-oriented, extremely modular, HTTP server tailored on standard compliance\nfor [nodejs](https://nodejs.org).\n\n[![NPM Summary](https://nodei.co/npm/ravenwood.png)](https://www.npmjs.com/package/ravenwood)\n[![NPM Downloads](https://nodei.co/npm-dl/ravenwood.png?months=1)](https://www.npmjs.com/package/ravenwood)\n\n[![Build Status](https://travis-ci.org/pinicarus/ravenwood.svg?branch=master)](https://travis-ci.org/pinicarus/ravenwood)\n[![Coverage Status](https://coveralls.io/repos/github/pinicarus/ravenwood/badge.svg?branch=master)](https://coveralls.io/github/pinicarus/ravenwood?branch=master)\n\n## Features\n\n- Two-ways middlewares\n- Dependencies Injection\n\nSee the [changelog](https://github.com/pinicarus/ravenwood/blob/master/CHANGELOG.md) and the\n[API reference](https://github.com/pinicarus/ravenwood/blob/master/API.md)\n\nRavenwood is pipeline oriented, so requests are processed by a chain of *middleware* stages before reaching a final\nhandler. Stages are operating both ways: on entry, before the final handler and on exit, after the final handler. This\nis because depending on the use case, various actions may need to be performed on either or both logical paths.\n\nThe middleware stages are organised as a stack so any middleware called on entry will also be called on exit, unless an\nexception bubbles up the pipeline.\n\n```\n                 ┌────────────┐   ┌────────────┐         ┌────────────┐   ┌────────────┐\n                 │ Middleware │   │ Middleware │         │ Middleware │   │ Handler    │\n                 │            │   │            │         │            │   │            │\n HTTP Request ─>─│ enter()    │─>─│ enter()    │─>─ ┄ ─>─│ enter()    │─>─│            │\n                 │            │   │            │         │            │   │  handle()  │\nHTTP Response ─<─│    leave() │─<─│    leave() │─<─ ┄ ─<─│    leave() │─<─│            │\n                 │            │   │            │         │            │   │            │\n                 └────────────┘   └────────────┘         └────────────┘   └────────────┘\n```\n\nPipeline stages have a (string) type, which is use to determine where to place each stage along the chain define on the\nserver. Stages that are not specifically typed will always be traversed first, even when no final handler was defined\n(leading to e.g. 404 or 405 responses).\n\n### Middlewares\n\nMiddlewares can be given either as plain object descriptors or as classes extending the `Middleware` class.\nDescriptors will be scaffolded into classes just as if given straight as such:\n\n```javascript\n// Descriptor\n{\n\ttype:  \"authentication\",\n\tenter: () => {}, // The function to call on pipeline entry\n\tleave: () => {}, // The function to call on pipeline exit\n}\n\n// Class\nclass extends Middleware(\"authentication\") {\n\tenter() {} // The method to call on pipeline entry\n\tleave() {} // The method to call on pipeline exit\n}\n```\n\n### Routes\n\nRoutes can be given either as plain object descriptors or as classes extending the `Route` class.\nDescriptors will be scaffolded into classes just as if given straight as such:\n\n```javascript\n// Descriptor\n{\n\tmethod:      \"GET\",\n\tpath:        \"/\",\n\tmiddlewares: [middlewareDescriptor, middlewareClass], // Route-specific middlewares\n\thandle: () => {}, // The function to call as a final handler\n}\n\n// Class\nclass extends Route(\"GET\", \"/\", middlewareDescriptor, middlewareClass) {\n\thandle() {} // The function to call as a final handler\n}\n```\n\n### Server\n\nServers is where middleware and routes building blocks are all tied together into a proper pipeline.\nA server is built from a [piquouze container](https://www.npmjs.org/package/piquouze) to handle dependencies injection,\nwith names modified by the mapping function before registration on the container.\n\n```javascript\nconst server = new Server(container, options, mapping);\n```\n\nTo use middleware types, it is required to first define all stages in order:\n\n```javascript\nserver.setPipeline(\"stageType1\", \"stageType2\", \"stageType3\");\n```\n\nShared middlewares can then be added to the server. They will be reordered according to the defined pipeline stage\ntypes:\n\n```javascript\nserver.addMiddleware(middlewareDescriptor, middlewareClass/*, ...*/);\n```\n\nRoutes can also be added to the server:\n\n```javascript\nserver.addRoute(routeDescriptor, routeClass/*, ...*/);\n```\n\nRequests can then be served once the server is started:\n\n```javascript\nserver.start(hostname, port);\n```\n\nServers can be started and stopped as many times as required, as long as a started server is not started again before\nbeing properly stopped and a stopped server being stopped again before being properly started.\n\n#### Testing\n\nServers can be easily tested by injecting fake request and observing the responses:\n\n```javascript\nserver.inject(request).then((response) => {});\n```\n\nRequest injection can also be used to implemented various middlewares requiring output from the server.\n\n#### Error Handling\n\nBasic servers automatically handle error cases for situations where HTTP statuses 404, 405, 500, 501 and 505 may apply.\nError responses are very terse but this behaviour can be modified by overriding the server `catch` method:\n\n```javascript\nclass VerboseServer extends Server {\n\tcatch(error) {\n\t\treturn new Promise((resolve) => resolve(new Response(500, \"Explanatory reason\")));\n\t}\n}\n```\n\n### Dependencies Injection\n\nMiddleware and route functions are all injected with dependencies previously defined on the container.\nMiddleware and route class constructors are injected as well.\n\nEach time a request is handled, a new child container is built and the request object registered on it with the result\nof mapping the name `\"request\"`. The list of defined HTTP methods for the request path is registered with the result of\nmapping the name `\"allowed\"`.\n\nEach time a middleware or route handle function return an instance (or an array of instances) of the `DI.Factory` or\n`DI.Value` class, the value(s) or factory(ies) will be transfered to the container so that they can be injected on later\nstages, including during the exit phase of the pipeline.\n","created":"2017-03-07T22:16:21.645Z","modified":"2017-03-27T19:41:37.330Z","lastPublisher":{"name":"pini","email":"pini@tuxfamily.org"},"owners":[{"name":"pini","email":"pini@tuxfamily.org"}],"other":{"_attachments":{},"_from":".","_id":"ravenwood","_nodeVersion":"6.10.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/ravenwood-2.0.0.tgz_1490643695206_0.4172748648561537"},"_npmUser":{"name":"pini","email":"pini@tuxfamily.org"},"_npmVersion":"3.10.10","_rev":"2-4b477cba556ce95c7825370fcc73e05f","_shasum":"7684efd85c9223ef45525a330caf2dc7a1a85e18","author":{"name":"Pierre-Nicolas Clauss"},"bugs":{"url":"https://github.com/pinicarus/ravenwood/issues"},"directories":{},"dist-tags":{"latest":"2.0.0"},"dist":{"shasum":"7684efd85c9223ef45525a330caf2dc7a1a85e18","tarball":"https://registry.npmjs.org/ravenwood/-/ravenwood-2.0.0.tgz"},"maintainers":[{"name":"pini","email":"pini@tuxfamily.org"}],"readmeFilename":"README.md","time":{"modified":"2017-03-27T19:41:37.330Z","created":"2017-03-07T22:16:21.645Z","1.0.0":"2017-03-07T22:16:21.645Z","2.0.0":"2017-03-27T19:41:37.330Z"}}}