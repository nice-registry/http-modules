{"name":"itsnmptrap","version":"0.0.1","description":"An snmp trap receiver router, similar in concept to the HTTP request routing in the likes of Expressjs.","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["snmp","trap","receiver"],"license":"mit","dependencies":{"snmp-native":"^1.0.17"},"gitHead":"a662f53dcccf520d35453c3e02f168f55d33ef7e","versions":[{"number":"0.0.1","date":"2014-10-28T21:27:42.464Z"}],"readme":"ItSNMPTrap\r\n==========\r\n\r\nIt's a trap...receiver router similar in concept to how Expressjs routes HTTP requests. Has been tested and works with SNMPv2c.\r\n\r\nMakes use of the snmp-native package for parsing SNMP messages.\r\n\r\n## Examples\r\n\r\n```\r\nvar snmprouter = require('itsnmptrap');\r\nvar trapper = new snmprouter({once: true});\r\n\r\ntrapper.use(function(trap, next) {\r\n  //only allow traps from \r\n  next(/192\\.168\\.1\\./.test(trap.remote.address));\r\n});\r\n\r\ntrapper.trap('1.3.6.1.4.1.20632.2.3', function(trap) {\r\n  console.log(\"Barracuda out queue:\", trap.value);\r\n})\r\n```\r\n\r\n##Methods\r\n\r\n####constructor([opts])\r\n\r\n```\r\nopts: {\r\n  once: false // If true, only executes the first matching trap() callback.\r\n              // Sets the default for all trap()s.\r\n}\r\n```\r\n\r\n#### use([oid], callback)\r\nSomewhat similar to Expressjs and it's use(). This can filter the incoming SNMP messages before getting the trap()s.\r\n\r\n* oid can be either a string or a RegExp. If not provided uses the RegExp `/./`.\r\n\r\nIf oid is a string, it must match against entire oid from the snmp message.\r\nOIDs for specific hosts can be defined by using the ipaddress@oid format.\r\nWhen using the ipaddress@oid format, the ip address portion can be a regex that does not make use of the @ sign.\r\n\r\nAlternatively, RegExp can be used for matching oids.\r\n\r\n```\r\ncallback(trap, next)\r\n  //next takes a boolean or no value.\r\n  //True or undefined proceeds to the next filter\r\n  //False or not calling next() stops processing the chain and will \r\n  //  prevent further processing of the SNMP message.\r\n\r\ntrap = {\r\n  oid: 'oid'\r\n  ,value: 'value'\r\n  ,varbind: 'raw varbind provided by snmp-native'\r\n  ,msg: 'entire snmp-native object of original message'\r\n  ,remote: {address: 'remote ip address', port: 'remote port'}\r\n}\r\n```\r\n\r\n#####example\r\n```\r\n//don't process any oids starting with 1.3\r\nuse(/1\\.3/, function(trap, next) { next(false); });\r\n//don't process any oid's with the remote ip address 1.1.1.1.\r\nuse(function(trap, next) { next(trap.remote.address == '1.1.1.1'); });\r\n```\r\n\r\n\r\n\r\n#### trap([oid], [opt], callback)\r\n\r\n* oid is the same as use().\r\n* opt is the same as the constructor and overrides the value given when the object instance is created.\r\n\r\n```\r\ntrap(oid, callback)\r\ntrap(opt, callback)\r\ntrap(oid, opt, callback)\r\n\r\ncallback(trap) //trap is the same as the one from use().\r\n```\r\n\r\n\r\n#### listen(port, [address])\r\nStart listening on a port for SNMP traps\r\n\r\n#### close()\r\nStops the UDP socket.\r\n\r\n\r\nLicense\r\n=======\r\nMIT\r\n","created":"2014-10-28T21:27:42.464Z","modified":"2014-10-28T21:27:42.464Z","lastPublisher":{"name":"snoj","email":"josh@snoj.us"},"owners":[{"name":"snoj","email":"josh@snoj.us"}],"other":{"_attachments":{},"_from":".","_id":"itsnmptrap","_npmUser":{"name":"snoj","email":"josh@snoj.us"},"_npmVersion":"1.4.28","_rev":"1-89ba987b58392ff7b1c0ac1cf3776bda","_shasum":"b436577d498e4fd45d97813a66ff0823620832e0","author":{"name":"snoj","email":"josh@snoj.us"},"directories":{},"dist-tags":{"latest":"0.0.1"},"dist":{"shasum":"b436577d498e4fd45d97813a66ff0823620832e0","tarball":"http://registry.npmjs.org/itsnmptrap/-/itsnmptrap-0.0.1.tgz"},"maintainers":[{"name":"snoj","email":"josh@snoj.us"}],"readmeFilename":"readme.md","time":{"modified":"2014-10-28T21:27:42.464Z","created":"2014-10-28T21:27:42.464Z","0.0.1":"2014-10-28T21:27:42.464Z"}}}