{"name":"rocky-consul","version":"0.1.1","description":"Rocky HTTP proxy middleware for service discovery and balancing using Consul","repository":"https://github.com/h2non/rocky-consul","license":"MIT","keywords":["http","proxy","http-proxy","replay","rocky","consul","balacing","balancer","reactive","discovery","service"],"engines":{"node":">= 0.12"},"scripts":{"test":"mocha --timeout 2000 --reporter spec --ui tdd test/*"},"devDependencies":{"chai":"^3.0.0","mocha":"^2.2.5","nock":"^2.7.0","rocky":"^0.3.0"},"dependencies":{"got":"^3.3.0","object-assign":"^3.0.0"},"gitHead":"9cc9a62386cccc1d6a524942c38dbeff0b89b599","homepage":"https://github.com/h2non/rocky-consul#readme","versions":[{"number":"0.1.0","date":"2015-07-06T08:48:11.787Z"},{"number":"0.1.1","date":"2015-09-01T18:15:25.915Z"}],"readme":"# rocky-consul [![Build Status](https://api.travis-ci.org/h2non/rocky-consul.svg?branch=master&style=flat)](https://travis-ci.org/h2non/rocky-consul) [![NPM](https://img.shields.io/npm/v/rocky-consul.svg)](https://www.npmjs.org/package/rocky-consul)\n\n[rocky](https://github.com/h2non/rocky) middleware to easily setup a reverse HTTP proxy with service discovery and load balancer using [Consul](https://consul.io).\n\nEssentially, this middleware will ask to Consul on every interval (configurable) to retrieve a list of URLs of a specific service (e.g: API, CDN, storage), and then them will be provided to `rocky` in order to balance the incoming HTTP traffic between those URLs.\n\n<table>\n<tr>\n<td><b>Name</b></td><td>consul</td>\n</tr>\n<tr>\n<td><b>Rocky</b></td><td>+0.2</td>\n</tr>\n<tr>\n<td><b>Scope</b></td><td>global, route</td>\n</tr>\n<tr>\n<td><b>Type</b></td><td>forward / balance</td>\n</tr>\n</table>\n\n## Installation\n\n```\nnpm install rocky-consul --save\n```\n\n## Usage\n\n```js\nvar rocky = require('rocky')\nvar consul = require('rocky-consul')\n\nvar proxy = rocky()\n```\n\nPlug in as global middleware\n```js\nproxy.use(consul({\n  // Servers refresh interval (default to 60000)\n  interval: 60 * 5 * 1000,\n  // App service name (required)\n  service: 'web',\n  // Use a custom datacenter (optional)\n  datacenter: 'ams2',\n  // Consul servers pool\n  servers: [\n    'http://demo.consul.io',\n    'http://demo.consul.io'\n  ]\n}))\n\n// Handle all the traffic\nproxy.all('/*')\n\nproxy.listen(3000)\nconsole.log('Rocky server started')\n```\n\nPlug in as route level middleware\n```js\nproxy\n  .get('/download/:id')\n  .use(consul({\n    // Servers refresh interval (default to 60000)\n    interval: 60 * 5 * 1000,\n    // App service name (required)\n    service: 'web',\n    // Use a custom datacenter (optional)\n    datacenter: 'ams2',\n    // Consul servers pool\n    servers: [\n      'http://demo.consul.io',\n      'http://demo.consul.io'\n    ]\n  }))\n\n// Handle the rest of the traffic without using Consul\nproxy.all('/*')\n  .forward('http://my.server')\n  .replay('http://old.server')\n\nproxy.listen(3000)\nconsole.log('Rocky server started')\n```\n\n## API\n\n### consul(options) `=>` Function(req, res, next)\n\nReturn a middleware `function` with the Consul client as static property `function.consul`.\n\n#### Options\n\n- **service** `string` - Consul service. Required\n- **servers** `array<string>` - List of Consul servers URLs. Required\n- **datacenter** `string` - Custom datacenter to use. If not defined the default one will be used\n- **tag** `string` - Use a specific tag for the service\n- **defaultServers** `array<string>` - Optional list of default target servers to balance. This avoid asking Consul the first time.\n- **protocol** `string` - Transport URI protocol. Default to `http`\n- **timeout** `number` - Consul server timeout in miliseconds. Default to `5000` = 5 seconds\n- **interval** `number` - Consul servers update interval in miliseconds. Default to `120000` = 2 minutes\n- **headers** `object` - Map of key-value headers to send to Consul\n- **auth** `string` - Basic authentication for Consul. E.g: `user:p@s$`\n- **onRequest** `function` - Executes this function before sending a request to Consul server. Passed arguments are: `httpOpts`\n- **onUpdate** `function` - Executes this function on every servers update. Passed arguments are: `err, servers`\n- **onResponse** `function` - Executes this function on every Consul server response. Passed arguments are: `err, servers, res`\n\n### Consul(options)\n\nInternally used micro Consul client interface.\n\n#### consul#servers(cb)\n\nReturns the Consul servers for the given service.\nPassed arguments to the callback are: `cb(err, servers)`.\n\n#### consul#update(cb)\n\nPerform the servers update asking to Consul\nPassed arguments to the callback are: `cb(err, servers)`.\n\n#### consul#startInterval()\n\nStart the servers update interval as recurrent job for the given miliseconds defined at `options.interval`.\nYou should not call this method unless you already called `stopInterval()`.\n\n#### consul#stopInterval()\n\nStop server update interval process.\n\n## License\n\nMIT - Tomas Aparicio\n","starsCount":2,"created":"2015-07-06T08:48:11.787Z","modified":"2015-09-01T18:15:25.915Z","lastPublisher":{"name":"h2non","email":"tomas@aparicio.me"},"owners":[{"name":"h2non","email":"tomas@aparicio.me"}],"other":{"_attachments":{},"_from":".","_id":"rocky-consul","_nodeVersion":"0.12.7","_npmUser":{"name":"h2non","email":"tomas@aparicio.me"},"_npmVersion":"2.13.5","_rev":"1-a38fceff4b9f19b0e84a229ea672b14e","_shasum":"75eb4024ee3195ce604b95c22d7b9db75999740c","author":{"name":"Tomas Aparicio"},"bugs":{"url":"https://github.com/h2non/rocky-consul/issues"},"directories":{},"dist-tags":{"latest":"0.1.1"},"dist":{"shasum":"75eb4024ee3195ce604b95c22d7b9db75999740c","tarball":"http://registry.npmjs.org/rocky-consul/-/rocky-consul-0.1.1.tgz"},"maintainers":[{"name":"h2non","email":"tomas@aparicio.me"}],"readmeFilename":"README.md","time":{"modified":"2015-09-01T18:15:25.915Z","created":"2015-07-06T08:48:11.787Z","0.1.0":"2015-07-06T08:48:11.787Z","0.1.1":"2015-09-01T18:15:25.915Z"},"users":{"goliatone":true,"bitsonic":true}}}