{"name":"node-ambiclimate","version":"2.1.2","description":"Thin wrapper around the Ambi Climate HTTP API","repository":"https://github.com/alisdairjsmyth/node-ambiclimate","license":"MIT","keywords":["ambi+climate","air+conditioner"],"main":"./ambi","dependencies":{"lodash":"4.17.x","q":"^1.4.x","request":"^2.79.x","simple-oauth2":"^1.0.3","url":"^0.11.0"},"devDependencies":{},"homepage":"https://github.com/alisdairjsmyth/node-ambiclimate#readme","gitHead":"f26e9af002b7e9fd9bed9e0c61cdce3aad2f0b4e","scripts":{},"versions":[{"number":"0.0.1","date":"2017-01-08T09:40:59.323Z"},{"number":"0.0.2","date":"2017-01-08T11:16:55.135Z"},{"number":"1.0.0","date":"2017-01-16T10:40:14.509Z"},{"number":"2.0.0","date":"2017-01-25T02:06:15.230Z"},{"number":"2.0.1","date":"2017-01-25T10:29:35.595Z"},{"number":"2.1.0","date":"2017-01-25T10:42:57.727Z"},{"number":"2.1.1","date":"2017-03-10T10:40:00.442Z"},{"number":"2.1.2","date":"2017-04-25T00:24:57.338Z"}],"readme":"# node-ambiclimate\r\n[![NPM Version](https://img.shields.io/npm/v/node-ambiclimate.svg)](https://www.npmjs.com/package/node-ambiclimate)\r\n[![Dependency Status](https://img.shields.io/versioneye/d/nodejs/node-ambiclimate.svg)](https://www.versioneye.com/nodejs/node-ambiclimate/)\r\n\r\nA thin Node.js wrapper of the Ambi Climate HTTP API.\r\n\r\n## Installation\r\n\r\n    npm install node-ambiclimate --save\r\n\r\n## OAuth Client\r\n\r\nRegister a OAuth Client in the <a href=\"https://api.ambiclimate.com/\" target=\"_new\">Ambi Dev Portal</a> by following the steps on the Quick Start page.  You require the Client Id and Client Secret of that client in order to use this wrapper.\r\n\r\n## Usage\r\n\r\nThis wrapper uses a client for network communication, which in turn handles all requests against the underlying Ambi Climate API.\r\n\r\n    var ac = require('node-ambiclimate'),\r\n        client;\r\n\r\n    client = new ac(clientId, clientSecret, username, password);\r\n\r\nOption | Type | Description\r\n------ | ---- | -----------\r\n`clientId` | String | As per value on Ambi Dev Portal\r\n`clientSecret` | String | As per value on Ambi Dev Portal\r\n`username` | String | Ambi Climate User email\r\n`password` | String | Ambi Climate Password\r\n\r\n## Power Off\r\nPower off your AC\r\n\r\n    client.off(settings, [cb])\r\n\r\nOption | Type | Description\r\n------ | ---- | -----------\r\n`settings` | Object | Object containing the attributes required by the underlying API: `room_name` and `location_name`\r\n`cb` | function | `function(err, data) {}` Callback function which will be called when the HTTP request to the API is processed\r\n\r\n**Usage example:**\r\n\r\n    //Using callbacks\r\n    client.off({\r\n            room_name: 'Bedroom',\r\n            location_name: 'Home'\r\n        },\r\n        function (err, data) {\r\n            if (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            console.log(data);\r\n        }\r\n    );\r\n\r\n    // Using promises\r\n    client.off({\r\n        room_name: 'Bedroom',\r\n        location_name: 'Home'\r\n    }).then(console.log, console.error);\r\n\r\n## Comfort Mode\r\nEnable Comfort mode on your AC\r\n\r\n    client.comfort(settings, [cb])\r\n\r\nOption | Type | Description\r\n------ | ---- | -----------\r\n`settings` | Object | Object containing the attributes required by the underlying API: `room_name` and `location_name`\r\n`cb` | function | `function(err, data) {}` Callback function which will be called when the HTTP request to the API is processed\r\n\r\n**Usage example:**\r\n\r\n    //Using callbacks\r\n    client.comfort({\r\n            room_name: 'Bedroom',\r\n            location_name: 'Home'\r\n        },\r\n        function (err, data) {\r\n            if (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            console.log(data);\r\n        }\r\n    );\r\n\r\n    // Using promises\r\n    client.comfort({\r\n        room_name: 'Bedroom',\r\n        location_name: 'Home'\r\n    }).then(console.log, console.error);\r\n\r\n## Comfort Mode Feedback\r\nSend feedback for Comfort mode\r\n\r\n    client.feedback(settings, [cb])\r\n\r\nOption | Type | Description\r\n------ | ---- | -----------\r\n`settings` | Object | Object containing the attributes required by the underlying API: `room_name`, `location_name` and `value`.  Supported comfort values: too_hot , too_warm , bit_warm , comfortable , bit_cold , too_cold , freezing\r\n`cb` | function | `function(err, data) {}` Callback function which will be called when the HTTP request to the API is processed\r\n\r\n**Usage example:**\r\n\r\n    //Using callbacks\r\n    client.feedback({\r\n            room_name: 'Bedroom',\r\n            location_name: 'Home',\r\n            value: 'bit_warm'\r\n        },\r\n        function (err, data) {\r\n            if (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            console.log(data);\r\n        }\r\n    );\r\n\r\n    // Using promises\r\n    client.feedback({\r\n        room_name: 'Bedroom',\r\n        location_name: 'Home',\r\n        value: 'but_warm'\r\n    }).then(console.log, console.error);\r\n\r\n## Away Mode - Temperature Lower\r\nEnable Away mode on your AC to stay below target temperature\r\n\r\n    client.away_temperature_lower(settings, [cb])\r\n\r\nOption | Type | Description\r\n------ | ---- | -----------\r\n`settings` | Object | Object containing the attributes required by the underlying API: `room_name`, `location_name` and `value`.  Value represents the target temperature in celsius\r\n`cb` | function | `function(err, data) {}` Callback function which will be called when the HTTP request to the API is processed\r\n\r\n**Usage example:**\r\n\r\n    //Using callbacks\r\n    client.away_temperature_lower({\r\n            room_name: 'Bedroom',\r\n            location_name: 'Home',\r\n            value: 27\r\n        },\r\n        function (err, data) {\r\n            if (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            console.log(data);\r\n        }\r\n    );\r\n\r\n    // Using promises\r\n    client.away_temperature_lower({\r\n        room_name: 'Bedroom',\r\n        location_name: 'Home',\r\n        value: 27\r\n    }).then(console.log, console.error);\r\n\r\n## Away Mode - Temperature Upper\r\nEnable Away mode on your AC to stay above target temperature\r\n\r\n    client.away_temperature_upper(settings, [cb])\r\n\r\nOption | Type | Description\r\n------ | ---- | -----------\r\n`settings` | Object | Object containing the attributes required by the underlying API: `room_name`, `location_name` and `value`.  Value represents the target temperature in celsius\r\n`cb` | function | `function(err, data) {}` Callback function which will be called when the HTTP request to the API is processed\r\n\r\n**Usage example:**\r\n\r\n    //Using callbacks\r\n    client.away_temperature_upper({\r\n            room_name: 'Bedroom',\r\n            location_name: 'Home',\r\n            value: 22\r\n        },\r\n        function (err, data) {\r\n            if (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            console.log(data);\r\n        }\r\n    );\r\n\r\n    // Using promises\r\n    client.away_temperature_upper({\r\n        room_name: 'Bedroom',\r\n        location_name: 'Home',\r\n        value: 22\r\n    }).then(console.log, console.error);\r\n\r\n## Away Mode - Humidity Upper\r\nEnable Away mode on your AC to stay above target humidity\r\n\r\n    client.away_humidity_upper(settings, [cb])\r\n\r\nOption | Type | Description\r\n------ | ---- | -----------\r\n`settings` | Object | Object containing the attributes required by the underlying API: `room_name`, `location_name` and `value`.  Value represents the target relative humidity\r\n`cb` | function | `function(err, data) {}` Callback function which will be called when the HTTP request to the API is processed\r\n\r\n**Usage example:**\r\n\r\n    //Using callbacks\r\n    client.away_humidity_upper({\r\n            room_name: 'Bedroom',\r\n            location_name: 'Home',\r\n            value: 70\r\n        },\r\n        function (err, data) {\r\n            if (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            console.log(data);\r\n        }\r\n    );\r\n\r\n    // Using promises\r\n    client.away_humidity_upper({\r\n        room_name: 'Bedroom',\r\n        location_name: 'Home',\r\n        value: 70\r\n    }).then(console.log, console.error);\r\n\r\n## Temperature Mode\r\nEnable Temperature mode on your AC\r\n\r\n    client.temperature(settings, [cb])\r\n\r\nOption | Type | Description\r\n------ | ---- | -----------\r\n`settings` | Object | Object containing the attributes required by the underlying API: `room_name`, `location_name` and `value`.  Value represents the target temperature in celsius\r\n`cb` | function | `function(err, data) {}` Callback function which will be called when the HTTP request to the API is processed\r\n\r\n**Usage example:**\r\n\r\n    //Using callbacks\r\n    client.temperature({\r\n            room_name: 'Bedroom',\r\n            location_name: 'Home',\r\n            value: 24\r\n        },\r\n        function (err, data) {\r\n            if (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            console.log(data);\r\n        }\r\n    );\r\n\r\n    // Using promises\r\n    client.temperature({\r\n        room_name: 'Bedroom',\r\n        location_name: 'Home',\r\n        value: 24\r\n    }).then(console.log, console.error);\r\n\r\n## Sensor Temperature\r\nGet latest sensor temperature data\r\n\r\n    client.sensor_temperature(settings, [cb])\r\n\r\nOption | Type | Description\r\n------ | ---- | -----------\r\n`settings` | Object | Object containing the attributes required by the underlying API: `room_name`, and `location_name`.\r\n`cb` | function | `function(err, data) {}` Callback function which will be called when the HTTP request to the API is processed\r\n\r\nReturns an array of objects with two attributes:\r\n* `created_on`: timestamp of last recorded temperature value\r\n* `value`: temperature is celsius\r\n\r\n**Usage example:**\r\n\r\n    //Using callbacks\r\n    client.sensor_temperature({\r\n            room_name: 'Bedroom',\r\n            location_name: 'Home'\r\n        },\r\n        function (err, data) {\r\n            if (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            console.log(data);\r\n        }\r\n    );\r\n\r\n    // Using promises\r\n    client.sensor_temperature({\r\n        room_name: 'Bedroom',\r\n        location_name: 'Home'\r\n    }).then(console.log, console.error);\r\n\r\n## Sensor Humidity\r\nGet latest sensor humidity data\r\n\r\n    client.sensor_humidity(settings, [cb])\r\n\r\nOption | Type | Description\r\n------ | ---- | -----------\r\n`settings` | Object | Object containing the attributes required by the underlying API: `room_name`, and `location_name`.\r\n`cb` | function | `function(err, data) {}` Callback function which will be called when the HTTP request to the API is processed\r\n\r\nReturns an array of objects with two attributes:\r\n* `created_on`: timestamp of recorded humdity value\r\n* `value`: last recorded relative humidity\r\n\r\n**Usage example:**\r\n\r\n    //Using callbacks\r\n    client.sensor_humidity({\r\n            room_name: 'Bedroom',\r\n            location_name: 'Home'\r\n        },\r\n        function (err, data) {\r\n            if (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            console.log(data);\r\n        }\r\n    );\r\n\r\n    // Using promises\r\n    client.sensor_humidity({\r\n        room_name: 'Bedroom',\r\n        location_name: 'Home'\r\n    }).then(console.log, console.error);\r\n\r\n## Mode\r\nGet Ambi Climate's current working mode\r\n\r\n    client.mode(settings, [cb])\r\n\r\nOption | Type | Description\r\n------ | ---- | -----------\r\n`settings` | Object | Object containing the attributes required by the underlying API: `room_name`, and `location_name`.\r\n`cb` | function | `function(err, data) {}` Callback function which will be called when the HTTP request to the API is processed\r\n\r\nReturns an array of objects with two attributes:\r\n* `mode`: Current mode\r\n* `value`: Value associated with mode\r\n\r\n**Usage example:**\r\n\r\n    //Using callbacks\r\n    client.mode({\r\n            room_name: 'Bedroom',\r\n            location_name: 'Home'\r\n        },\r\n        function (err, data) {\r\n            if (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            console.log(data);\r\n        }\r\n    );\r\n\r\n    // Using promises\r\n    client.mode({\r\n        room_name: 'Bedroom',\r\n        location_name: 'Home'\r\n    }).then(console.log, console.error);\r\n\r\n## Acknowledgements\r\nThanks to [gbrooker](https://github.com/gbrooker) for developing the OAUTH2 Client for the Ambi Climate API\r\n","created":"2017-01-08T09:40:59.323Z","modified":"2017-04-25T00:24:57.338Z","lastPublisher":{"name":"alisdairjsmyth","email":"alisdair.smyth@gmail.com"},"owners":[{"name":"alisdairjsmyth","email":"alisdair.smyth@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"node-ambiclimate","_nodeVersion":"6.9.5","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-ambiclimate-2.1.2.tgz_1493079897125_0.8096760262269527"},"_npmUser":{"name":"alisdairjsmyth","email":"alisdair.smyth@gmail.com"},"_npmVersion":"3.10.10","_rev":"8-e64cea1883a3a71d373d130f19389b17","_shasum":"1e31d709fc520ed6a6f7465ed5d7200d445d497d","author":{"name":"Alisdair Smyth","email":"alisdair.smyth@gmail.com"},"bugs":{"url":"https://github.com/alisdairjsmyth/node-ambiclimate/issues"},"directories":{},"dist-tags":{"latest":"2.1.2"},"dist":{"shasum":"1e31d709fc520ed6a6f7465ed5d7200d445d497d","tarball":"https://registry.npmjs.org/node-ambiclimate/-/node-ambiclimate-2.1.2.tgz"},"maintainers":[{"name":"alisdairjsmyth","email":"alisdair.smyth@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-25T00:24:57.338Z","created":"2017-01-08T09:40:59.323Z","0.0.1":"2017-01-08T09:40:59.323Z","0.0.2":"2017-01-08T11:16:55.135Z","1.0.0":"2017-01-16T10:40:14.509Z","2.0.0":"2017-01-25T02:06:15.230Z","2.0.1":"2017-01-25T10:29:35.595Z","2.1.0":"2017-01-25T10:42:57.727Z","2.1.1":"2017-03-10T10:40:00.442Z","2.1.2":"2017-04-25T00:24:57.338Z"}}}