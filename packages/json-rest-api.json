{"name":"json-rest-api","version":"0.1.1","description":"A simple lightweight REST API that receives and responds to JSON HTTP requests, supports all verbs. Very simple.","main":"index.js","scripts":{"test":"mocha --reporter list ./test.js"},"repository":"https://github.com/stdarg/json-rest-api","keywords":["simple","REST","HTTP","JSON","API","interface"],"license":"MIT","dependencies":{"async-err":"0.0.2","debug":"0.7.4","is2":"0.0.12"},"devDependencies":{"mocha":"1.17.1","request":"2.33.0"},"homepage":"https://github.com/stdarg/json-rest-api","versions":[{"number":"0.0.0","date":"2013-10-16T00:02:32.724Z"},{"number":"0.0.1","date":"2013-10-18T20:54:47.145Z"},{"number":"0.0.2","date":"2013-11-06T21:57:34.255Z"},{"number":"0.0.3","date":"2013-12-08T04:45:27.041Z"},{"number":"0.0.4","date":"2014-02-03T23:08:51.263Z"},{"number":"0.0.5","date":"2014-02-05T01:23:35.413Z"},{"number":"0.1.0","date":"2014-02-13T21:17:04.158Z"},{"number":"0.1.1","date":"2014-02-13T22:50:38.305Z"}],"readme":"json-rest-api\n=============\nA lightweight REST API that receives and responds to JSON HTTP requests,\nsupports all verbs. Expects JSON requests and responds in JSON via an added\nmethod to the http.ServerResponse object called `json` (see below).\n\n# Motivation\nSometimes you want a simple REST API and don't need all the bells and whistles\nof express.js.\n\n# Installation\n\n    npm install json-rest-api\n\n# Example\n\n## server\n\n```JavaScript\n'use strict';\nvar JsonRestApi = require('json-rest-api');\nvar inspect = require('util').inspect;\nvar debug = require('debug')('json-rest-api:example:server');\n\nvar RestApi = new JsonRestApi({port: 8000}, function(err) {\n    if (err) {\n        debug('/ping error: '+inspect(err));\n        return;\n    }\n    console.log('Listening on port 8000.');\n\n    // add a \"GET\" route\n    RestApi.addRoute('get', '/ping', function(req, res, json, qs) {\n        var qsExp = {'alpha': 'one', 'beta': '2', 'gamma': 'true'};\n        assert.deepEqual(qsExp, qs);\n        res.json({success: true, pong: 'pong'});\n    });\n\n    // add a \"POST\" route\n    RestApi.addRoute('get', '/setName', function(req, res, json, qs) {\n        var qsExp = {'alpha': 'one', 'beta': '2', 'gamma': 'true'};\n\n        assert.deepEqual(qsExp, qs);\n        res.json({success: true, pong: 'pong'});\n    });\n});\n```\n\n## client\n\n```JavaScript\n'use strict';\nvar request = require('request');\nvar inspect = require('util').inspect;\nvar debug = require('debug')('json-rest-api:example:client');\nvar assert = require('assert');\n\nvar qs = {\n    alpha: 'one',\n    beta: 2,\n    gamma: true\n};\n\nrequest({json:true, qs:qs, uri: 'http://localhost:8000/ping'}, function(err, res, json) {\n    if (err) {\n        debug('Error: '+inspect(err));\n        return;\n    }\n\n    assert.ok(json.success === true);\n    assert.ok(json.pong === 'pong');\n    console.log('Success!');\n});\n\nrequest({json:true, qs:qs, uri: 'http://localhost:8000/setName'}, function(err, res, json) {\n    if (err) {\n        debug('Error: '+inspect(err));\n        return;\n    }\n\n    var qsExp = {'alpha': 'one', 'beta': '2', 'gamma': 'true'};\n\n    assert.ok(json.success === true);\n    assert.ok(json.cmd === 'setName');\n    assert.deepEqual(json.qs, qsExp);\n    console.log('Success!');\n});\n```\n\n# API\n\n## RestApi([config], [cb])\nRestApi constructor. Creates the HTTP server objects and starts listening on\nthe socket.\n\n### Params:\n* **Object** *[config]* Optional configuration object to configure the server.\n  The configuration options are:\n    * bindTo - Optional. The address to bind, default: INADDR_ANY.\n    * port - Optional. The port to bind the server, default: 44401.\n* **Function** *[cb]* An optional callback. If there is a callback, the process\n  will be begin listening on the socket for HTTP requests. Without a callback,\n  you must call listen explicitly.\n\n## listen([cb])\nStart listening on the socket for HTTP requests.\n\n### Params:\n* **Function** *[cb]* An optional callback called when the server is ready.\n\n## stop([cb])\nStops the server from acccepting new connections and listening on the port.\n\n### Params:\n* **Function** *[cb]* The callback function. Optional.\n\n## addRoute(verb, path, cb)\nAdd a route along with a function to run.\n\n### Params:\n* **String** *verb* HTTP verb for route. e.g.: 'get', 'post'.\n* **String** *path* A valid URI path.\n* **Function** *cb* A function to run when the path executes. Which has the\n  following form: fn(req, res, json, qs):\n        * @param {Object} req - Node.js HTTP request object\n        * @param {Object} res - Node.js HTTP response object\n        * @param {Object} json - The JSON body of the request, if present.\n        * @param {Object} qs - The query string of the request, if present.\n\n### Return:\n* **Boolean|Error** True, if no errors on the parameters, Error\n* **Error|Boolean** true on success and Error on failure.\n\n## json([status code,] jsonObject)\nA method for the JsonServerResponse prototype to send JSON by passing an object.\n\n### Params:\n* **Number|Object** *Optional.* First argument may be either the status code or\n  the object to convert to JSON.\n* **Object** *Optional.* If the first object is the status code, then the second\n  param must be the object to convert to JSON.\n\n# LICENSE\n\nThe MIT License (MIT)\n\nCopyright (c) 2013,2014 Edmond Meinfelder\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","starsCount":1,"created":"2013-10-16T00:02:31.503Z","modified":"2014-02-13T22:50:38.305Z","lastPublisher":{"name":"stdarg","email":"edmond@stdarg.com"},"owners":[{"name":"stdarg","email":"edmond@stdarg.com"}],"other":{"_attachments":{},"_from":".","_id":"json-rest-api","_npmUser":{"name":"stdarg","email":"edmond@stdarg.com"},"_npmVersion":"1.3.24","_rev":"1-385829aff213b54780111a3467749cb6","author":{"name":"Edmond Meinfelder"},"bugs":{"url":"https://github.com/stdarg/json-rest-api/issues"},"directories":{},"dist-tags":{"latest":"0.1.1"},"dist":{"shasum":"b69d3ab4157e57e6d1365f22e20a35ae41776742","tarball":"http://registry.npmjs.org/json-rest-api/-/json-rest-api-0.1.1.tgz"},"maintainers":[{"name":"stdarg","email":"edmond@stdarg.com"}],"readmeFilename":"README.md","time":{"modified":"2014-02-13T22:50:38.305Z","created":"2013-10-16T00:02:31.503Z","0.0.0":"2013-10-16T00:02:32.724Z","0.0.1":"2013-10-18T20:54:47.145Z","0.0.2":"2013-11-06T21:57:34.255Z","0.0.3":"2013-12-08T04:45:27.041Z","0.0.4":"2014-02-03T23:08:51.263Z","0.0.5":"2014-02-05T01:23:35.413Z","0.1.0":"2014-02-13T21:17:04.158Z","0.1.1":"2014-02-13T22:50:38.305Z"},"users":{"frankg":true}}}