{"name":"standard-http-error","version":"2.0.0","description":"Standard HTTP error class. Proper serialization, no bloat. Extensible.","keywords":["error","errors","http","exception"],"homepage":"https://github.com/moll/js-standard-http-error","repository":"https://github.com/moll/js-standard-http-error","licenses":[{"type":"LAGPL","url":"https://github.com/moll/js-standard-http-error/blob/master/LICENSE"}],"main":"index.js","scripts":{},"browser":{"./codes.js":"./codes.json"},"dependencies":{"standard-error":">= 1.1.0 < 2"},"devDependencies":{"mocha":">= 2.1.0 < 3","must":">= 0.12.0 < 0.13","oolong":">= 1.7.0 < 2","http-codes":">= 1.0.0 < 2","semver":">= 5 < 6"},"gitHead":"63780f4491ff9bbaf8db6614b540972901243a7a","versions":[{"number":"1.0.0","date":"2015-02-22T16:54:25.096Z"},{"number":"1.0.1","date":"2015-02-23T19:34:45.225Z"},{"number":"1.1.0","date":"2015-05-21T14:59:17.690Z"},{"number":"1.1.1","date":"2015-06-04T09:31:47.074Z"},{"number":"1.2.0","date":"2015-10-04T09:11:02.989Z"},{"number":"2.0.0","date":"2015-10-04T09:28:28.553Z"}],"readme":"StandardHttpError.js\n====================\n[![NPM version][npm-badge]](https://www.npmjs.com/package/standard-http-error)\n[![Build status][travis-badge]](https://travis-ci.org/moll/js-standard-http-error)\n\n**StandardHttpError.js** is a very simple but useful **error class** for\nJavaScript and Node.js that represents HTTP errors. You can then detect it with\n`instanceof` in error handling middleware and act accordingly. Also works in the\nbrowser through [Browserify](http://browserify.org).\n\nYou can use StandardHttpError.js with any error code you like, standardized or\nnot. They don't have to exist beforehand, so if you're living on the cutting\nedge, feel free to use `new HttpError(451, \"Unavailable For Legal Reasons\")`.\n\n[npm-badge]: https://img.shields.io/npm/v/standard-http-error.svg\n[travis-badge]: https://travis-ci.org/moll/js-standard-http-error.png?branch=master\n\n\nInstalling\n----------\n```sh\nnpm install standard-http-error\n```\n\nStandardHttpError.js follows [semantic versioning](http://semver.org/), so feel\nfree to depend on its major version with something like `>= 1.0.0 < 2`\n(a.k.a `^1.0.0`).\n\n\nUsing\n-----\n```javascript\nvar HttpError = require(\"standard-http-error\")\nthrow new HttpError(404)\n```\n\nYour error handler will then receive an instance of `HttpError` along with the\nfollowing enumerable properties:\n\nProperty | Value\n---------|------\nname     | `\"HttpError\"`\ncode     | `404`\nmessage  | `\"Not Found\"`\n\nAs always for errors, the non-enumerable `stack` property is there as well.\n\nFor compatibility with Express or Koa's default request handler (the one that\nprints your errors out if you don't handle them), StandardHttpError.js also sets\n`status`, `statusCode` and `statusMessage` to be aliases of `code` and\n`message`. They're non-enumerable to not pollute serialization.\n\n### Creating a new instance by error name\nStandardHttpError.js also supports passing a constant name instead of the error\ncode.\n\n```javascript\nnew HttpError(\"NOT_FOUND\")\nnew HttpError(\"FORBIDDEN\")\n```\n\nSee below for a [list of error code names](#error-codes).\n\n### Setting a custom message\n```javascript\nnew HttpError(412, \"Bad CSRF Token\")\n```\n\nThe default \"Precondition Failed\" message that the error code 412 would've\nresulted in will then be replaced by \"Bad CSRF Token\".\n\nNote that status messages were always meant to be human readable, so it's\nperfect fine and even preferable to provide clarification in the status message.\nTry to stick to the capitalized form, though, as that will match the default\nHTTP status message style.\n\n### Setting custom properties\nYou can pass custom properties to be attached to the error instance as an\nobject:\n\n```javascript\nnew HttpError(404, {url: req.url})\nnew HttpError(412, \"Bad CSRF Token\", {session: req.session})\n```\n\nYou can access the given `session` property then as `err.session`.\n\n\n### Subclassing StandardHttpError\nIf you wish to add your own functionality to StandardHttpError, subclass it:\n\n```javascript\nvar HttpError = require(\"standard-http-error\")\n\nfunction RemoteError(res) {\n  HttpError.call(this, res.statusCode, res.statusMessage)\n}\n\nRemoteError.prototype = Object.create(HttpError.prototype, {\n  constructor: {value: RemoteError, configurable: true, writeable: true}\n})\n```\n\nThe [StandardError.js](https://github.com/moll/js-standard-error) library that\nStandardHttpError.js uses makes sure the `name` and `stack` properties of your\nnew error class are set properly.\n\nIf you don't want your new error class to directly inherit from\n`StandardHttpError`, feel free to leave the `RemoteError.prototype` line out.\nEverything will work as before except your `RemoteError` will no longer be an\n`instanceof` StandardHttpError.js.  You might want to manually grab the\n`HttpError.prototype.toString` function then though, as that's useful for nice\n`String(err)` output.\n\n### Switching based on error codes\n```javascript\nswitch (err.code) {\n  case HttpError.UNAUTHORIZED: return void res.redirect(\"/signin\")\n  case HttpError.NOT_FOUND: return void res.render(\"404\")\n  case 451: return void res.redirect(\"/legal\")\n  default: return void res.render(\"500\")\n}\n```\n\n### Using with Express\nStandardHttpError.js comes very handy when used with Connect/Express's error\nhandling functionality:\n\n```javascript\nvar HttpError = require(\"standard-http-error\")\nvar app = require(\"express\")()\n\napp.get(\"/account\", function(req, res, next) {\n  if (req.account == null) throw new HttpError(401)\n  if (req.account.budget == 0) throw new HttpError(402)\n  // ...\n})\n\napp.use(function(err, req, res, next) {\n  if (!(err instanceof HttpError)) return void next(err)\n\n  res.statusCode = err.code\n  res.statusMessage = err.message\n  res.render(\"error\", {title: err.message})\n})\n```\n\n\n<a name=\"error-codes\" />\nError Codes\n-----------\nStandardHttpError.js comes with a list of status message constants that you can\nuse for comparison and in `switch` statements.\n\n```javascript\nHttpError.NOT_FOUND // => 404\n```\n\nWhen running on Node.js, cached status codes and their names get merged with new\ncodes from `Http.STATUS_CODES`. Existing status codes will not be changed\nwithout bumping StandardHttpError.js's major version number. That ensures\nconsistent constants in Node and in the browser.\n\nCode  | Name\n------|-----\n`100` | `CONTINUE`\n`101` | `SWITCHING_PROTOCOLS`\n`102` | `PROCESSING`\n`200` | `OK`\n`201` | `CREATED`\n`202` | `ACCEPTED`\n`203` | `NON_AUTHORITATIVE_INFORMATION`\n`204` | `NO_CONTENT`\n`205` | `RESET_CONTENT`\n`206` | `PARTIAL_CONTENT`\n`207` | `MULTI_STATUS`\n`208` | `ALREADY_REPORTED`\n`226` | `IM_USED`\n`300` | `MULTIPLE_CHOICES`\n`301` | `MOVED_PERMANENTLY`\n`302` | `FOUND`\n`303` | `SEE_OTHER`\n`304` | `NOT_MODIFIED`\n`305` | `USE_PROXY`\n`307` | `TEMPORARY_REDIRECT`\n`308` | `PERMANENT_REDIRECT`\n`400` | `BAD_REQUEST`\n`401` | `UNAUTHORIZED`\n`402` | `PAYMENT_REQUIRED`\n`403` | `FORBIDDEN`\n`404` | `NOT_FOUND`\n`405` | `METHOD_NOT_ALLOWED`\n`406` | `NOT_ACCEPTABLE`\n`407` | `PROXY_AUTHENTICATION_REQUIRED`\n`408` | `REQUEST_TIMEOUT`\n`409` | `CONFLICT`\n`410` | `GONE`\n`411` | `LENGTH_REQUIRED`\n`412` | `PRECONDITION_FAILED`\n`413` | `PAYLOAD_TOO_LARGE`\n`414` | `URI_TOO_LONG`\n`415` | `UNSUPPORTED_MEDIA_TYPE`\n`416` | `RANGE_NOT_SATISFIABLE`\n`417` | `EXPECTATION_FAILED`\n`418` | `IM_A_TEAPOT`\n`421` | `MISDIRECTED_REQUEST`\n`422` | `UNPROCESSABLE_ENTITY`\n`423` | `LOCKED`\n`424` | `FAILED_DEPENDENCY`\n`425` | `UNORDERED_COLLECTION`\n`426` | `UPGRADE_REQUIRED`\n`428` | `PRECONDITION_REQUIRED`\n`429` | `TOO_MANY_REQUESTS`\n`431` | `REQUEST_HEADER_FIELDS_TOO_LARGE`\n`500` | `INTERNAL_SERVER_ERROR`\n`501` | `NOT_IMPLEMENTED`\n`502` | `BAD_GATEWAY`\n`503` | `SERVICE_UNAVAILABLE`\n`504` | `GATEWAY_TIMEOUT`\n`505` | `HTTP_VERSION_NOT_SUPPORTED`\n`506` | `VARIANT_ALSO_NEGOTIATES`\n`507` | `INSUFFICIENT_STORAGE`\n`508` | `LOOP_DETECTED`\n`509` | `BANDWIDTH_LIMIT_EXCEEDED`\n`510` | `NOT_EXTENDED`\n`511` | `NETWORK_AUTHENTICATION_REQUIRED`\n\n\nLicense\n-------\nStandardHttpError.js is released under a *Lesser GNU Affero General Public\nLicense*, which in summary means:\n\n- You **can** use this program for **no cost**.\n- You **can** use this program for **both personal and commercial reasons**.\n- You **do not have to share your own program's code** which uses this program.\n- You **have to share modifications** (e.g. bug-fixes) you've made to this\n  program.\n\nFor more convoluted language, see the `LICENSE` file.\n\n\nAbout\n-----\n**[Andri Möll][moll]** typed this and the code.  \n[Monday Calendar][monday] supported the engineering work.\n\nIf you find StandardHttpError.js needs improving, please don't hesitate to type\nto me now at [andri@dot.ee][email] or [create an issue online][issues].\n\n[email]: mailto:andri@dot.ee\n[issues]: https://github.com/moll/js-standard-http-error/issues\n[moll]: http://themoll.com\n[monday]: https://mondayapp.com\n","created":"2015-02-22T16:54:25.096Z","modified":"2015-10-04T09:28:28.553Z","lastPublisher":{"name":"moll","email":"andri@dot.ee"},"owners":[{"name":"moll","email":"andri@dot.ee"}],"other":{"_attachments":{},"_from":".","_id":"standard-http-error","_nodeVersion":"4.1.0","_npmUser":{"name":"moll","email":"andri@dot.ee"},"_npmVersion":"2.14.4","_rev":"1-528d5961af2c3f5d20de77495d25854c","_shasum":"b59295c13f67fffa4b78973f2e522dc1426b3df5","author":{"name":"Andri Möll","email":"andri@dot.ee","url":"http://themoll.com"},"bugs":{"url":"https://github.com/moll/js-standard-http-error/issues"},"directories":{},"dist-tags":{"latest":"2.0.0"},"dist":{"shasum":"b59295c13f67fffa4b78973f2e522dc1426b3df5","tarball":"http://registry.npmjs.org/standard-http-error/-/standard-http-error-2.0.0.tgz"},"maintainers":[{"name":"moll","email":"andri@dot.ee"}],"readmeFilename":"README.md","time":{"modified":"2015-10-04T09:28:28.553Z","created":"2015-02-22T16:54:25.096Z","1.0.0":"2015-02-22T16:54:25.096Z","1.0.1":"2015-02-23T19:34:45.225Z","1.1.0":"2015-05-21T14:59:17.690Z","1.1.1":"2015-06-04T09:31:47.074Z","1.2.0":"2015-10-04T09:11:02.989Z","2.0.0":"2015-10-04T09:28:28.553Z"}}}