{"name":"blobby","version":"0.3.1","description":"An HTTP Proxy for Blob storage systems (such as S3) that automatically shards and replicates your data","main":"index.js","scripts":{"build":"babel ./src --out-dir ./lib","clean":"rimraf ./lib","prepublish":"npm run clean && npm run build","start":"./bin/blobby server --config-dir ./test/config --config-base defaults","test":"echo \"Error: no test specified\" && exit 1","watch":"babel ./src --out-dir ./lib --watch"},"bin":{"blobby":"./bin/blobby"},"repository":"https://github.com/asilvas/blobby","license":"MIT","homepage":"https://github.com/asilvas/blobby#readme","dependencies":{"async":"^2.3.0","bytes":"^2.5.0","chalk":"^1.1.3","config-shield":"^0.2.0","json5":"^0.5.1","merge":"^1.2.0","mime-types":"^2.1.15","retry-fn":"^1.0.1","terminal-kit":"^1.4.1","tty-table":"^2.2.5","yargs":"^7.0.2"},"devDependencies":{"babel-cli":"^6.24.1","babel-plugin-transform-object-rest-spread":"^6.23.0","babel-preset-env":"^1.3.3","blobby-auth-header":"^0.1.0","blobby-fs":"^0.2.0","rimraf":"^2.6.1"},"files":["bin","lib","src","index.js","LICENSE","README.md","package.json"],"gitHead":"6e50b824078e82eb5d0b4160482762e9b9673242","versions":[{"number":"0.1.0","date":"2017-05-02T23:25:50.130Z"},{"number":"0.1.1","date":"2017-05-03T18:52:35.492Z"},{"number":"0.1.2","date":"2017-05-03T19:23:11.529Z"},{"number":"0.1.3","date":"2017-05-03T22:14:17.948Z"},{"number":"0.1.4","date":"2017-05-03T22:40:45.900Z"},{"number":"0.1.5","date":"2017-05-04T03:03:29.830Z"},{"number":"0.1.6","date":"2017-05-04T19:35:15.318Z"},{"number":"0.1.7","date":"2017-05-04T23:53:42.952Z"},{"number":"0.1.8","date":"2017-05-07T13:57:24.877Z"},{"number":"0.1.9","date":"2017-05-07T19:05:55.311Z"},{"number":"0.1.10","date":"2017-05-07T20:21:06.832Z"},{"number":"0.1.11","date":"2017-05-07T21:02:25.680Z"},{"number":"0.2.0","date":"2017-05-09T17:18:31.738Z"},{"number":"0.2.1","date":"2017-05-09T17:42:27.094Z"},{"number":"0.2.2","date":"2017-05-09T22:00:12.980Z"},{"number":"0.2.3","date":"2017-05-12T23:23:32.292Z"},{"number":"0.2.4","date":"2017-05-17T17:52:59.378Z"},{"number":"0.2.5","date":"2017-05-17T18:06:11.436Z"},{"number":"0.2.6","date":"2017-05-19T16:04:58.216Z"},{"number":"0.2.7","date":"2017-05-21T19:06:55.420Z"},{"number":"0.2.8","date":"2017-05-22T15:09:42.285Z"},{"number":"0.2.9","date":"2017-05-22T15:43:44.999Z"},{"number":"0.2.10","date":"2017-05-23T16:44:20.200Z"},{"number":"0.2.11","date":"2017-05-26T22:46:44.459Z"},{"number":"0.2.12","date":"2017-05-30T23:05:47.320Z"},{"number":"0.2.13","date":"2017-06-01T22:04:20.502Z"},{"number":"0.2.14","date":"2017-06-02T18:33:00.385Z"},{"number":"0.3.0","date":"2017-06-09T21:47:33.307Z"},{"number":"0.3.1","date":"2017-06-21T20:24:05.270Z"}],"readme":"# blobby\n\nNo, not that [Mr. Blobby](https://www.youtube.com/watch?v=NngdWbvpztk).\n\nBlobby is an HTTP Proxy for Blob storage systems (such as S3) that automatically\nshards and replicates your data. Useful for single and multi datacenter architectures,\n**blobby** scales your storage and throughput requirements by way of sharding,\nas well as enables fast local reads in multi datacenter replication setups.\nAdditionally **blobby** provides a simple CLI for analyzing your complex data\narchitectures by way of storage comparisons, repairs, stats, and more.\n\n![NPM](https://raw.githubusercontent.com/asilvas/blobby/master/docs/architecture.jpg)\n\n\n## Installation\n\nBlobby can be installed as a local dependency of your app:\n```\nnpm i blobby --save\n./node_modules/.bin/blobby\n```\n\nOr installed globally:\n```\nnpm i blobby -g\nblobby\n```\n\n\n## Basic Usage\n\nStart the HTTP Proxy Server:\n```\nblobby server\n```\n\nCopy between storage systems:\n```\nblobby copy myOldStorage myNewStorage\n```\n\nSee `help` for a full list of commands:\n```\nblobby help\n```\n\n[Full Command List](#full-command-list)\n\n\n## Options\n\nA number of configuration formats are supported, including\nJSON, [JSON5](http://json5.org/), CommonJS, and\n[Secure Configurations](#secure-configuration).\n\n| Option | Type | Default | Desc |\n| --- | --- | --- | --- |\n| config | arrayOf(string) | `[]` | One or more configuration files. If none are provided `config-env` will be used |\n| config-dir | string | `\"config\"` | Directory of configuration files |\n| config-env | string | `\"NODE_ENV\"` | Environment variable used to detect configuration |\n| config-default | string | `\"local\"` | Default configuration to use if environment is not available |\n| config-base | string | none | If specified will use this configuration as the base (defaults) config that will be deep merged |\n| config-exts | arrayOf(string) | `['.json', '.json5', '.js']` | Supported extensions to detect for with configuration files |\n| secure-config | string | none | Directory of secure configuration files |\n| secure-secret | string | none | The secret required to decrypt secure configuration files |\n| secure-file | string | none | File to load that holds the secret required to decrypt secure configuration files |\n| mode | string | `\"headers\"` | Used when comparing files. For usage see [Compare Modes](#compare-modes) |\n| retry-min | number | `1000` | Minimum timeout (in ms) for first retry, where retries are applicable |\n| retry-factor | number | `2` | Multiple in time applied to retry attempts, where retries are applicable |\n| retry-attempts | number | `3` | Maximum retry attempts before failure is reported, where retries are applicable |\n\nExample using the default `NODE_ENV` environment variable to load config data:\n\n```\nblobby server --config-dir lib/config\n```\n\n\n\n## Configuration\n\n| Name | Type | Default | Desc |\n| --- | --- | --- | --- |\n| http | HttpBindings | `{ \"default\": { \"port\": 80 } }` | Collection (hash for ease of merging) of HTTP bindings |\n| http.{id} | HttpBinding | (required) | HTTP Binding Object |\n| http.{id}.port | number | `80` | Port to bind to |\n| http.{id}.host | string | undefined | Host to bind to, or nothing to use Node.js default |\n| http.{id}.ssl | Object | (required if enabling SSL) | See [Node.js TLS Options](https://nodejs.org/api/tls.html#tls_new_tls_tlssocket_socket_options) | http.{id}.ssl.pfx | Buffer or string | none | If string will attempt to load pfx from disk |\n| http.{id}.ssl.key | Buffer or string | none | If string will attempt to load private key from disk |\n| http.{id}.ssl.cert | Buffer or string | none | If string will attempt to load certificate from disk |\n| storage | StorageBindings | (required) | Collection of storage bindings |\n| storage.{id} | StorageBinding| (required) | Storage Binding Object |\n| storage.{id}.driver | string | (required) | Module name/path to use as storage client |\n| storage.{id}.maxUploadSize | number | none | Size in bytes allowed by uploads |\n| storage.{id}.cacheControl | string | `\"public,max-age=31536000\"` | Default cache control headers to apply for GET's and PUT's if file does not provide it |\n| storage.{id}.accessControl | string | `\"public-read\"` | Default to publically readable. [Full ACL List](http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) |\n| storage.{id}.driver | string | (required) | Module name/path to use as storage client |\n| storage.{id}.dirSplit | number | false | (future) If Number, auto-split paths every N characters to make listing of directories much faster |\n| storage.{id}.auth | string | none | Required to support Uploads and Deletes, see [Secure API Operations](#secure-api-operations) |\n| storage.{id}.replicas | arrayOf(string) | `[]` | Required to support Replication, see [File Replication](#file-replication) |\n| storage.{id}.options | Object | {} | Options provided to storage driver |\n| retry | RetryOptions | (optional) | Retry options used by some HTTP Server operations |\n| retry.min | number | `500` | Minimum timeout (in ms) for first retry |\n| retry.factor | number | `2` | Multiple in time applied to retry attempts |\n| retry.retries | number | `3` | Maximum retry attempts before failure is reported |\n\n\n### Storage Drivers\n\n* [blobby-s3](https://github.com/asilvas/blobby-s3) - An S3 storage client for Blobby, powered by Knox.\n* [blobby-fs](https://github.com/asilvas/blobby-fs) - A File System storage client for Blobby.\n\n\n## Secure Configuration\n\nAn optional feature for sensitive credentials is to leverage the\nincluded [Config Shield](https://github.com/godaddy/node-config-shield)\nsupport. Any secure configuration objects will be merged into the\nparent configuration object. If `secure-config` option is provided,\nit's expected that for every configuration file, there will be a\ncorresponding secure configuration file using the same file name, but\nunder the **secure-config** directory.\n\n```\nblobby server --secure-config config/secure --secure-file config/secure/secret.txt\n```\n\nExample for creating a secure configuration:\n\n```\nnpm i config-shield -g\ncshield config/secure/local.json config/secure/secret.txt\nset storage { app1: { options: { password: 'super secret!' } } }\nsave\nexit\n```\n\nSee [Config Shield](https://github.com/godaddy/node-config-shield) for\nmore advanced usage.\n\n\n## Server\n\nStart HTTP Server using the provided [Configuration](#configuration).\n\n```\nblobby server\n```\n\n### REST API\n\n| Method | Route | Auth | Info |\n| --- | --- | --- | --- |\n| `GET` | `/{storageId}/{filePath}` | Public | Get a file from storage |\n| `HEAD` | `/{storageId}/{filePath}` | Public | Get info for file from storage |\n| `PUT` | `/{storageId}/{filePath}` | Secure | Create or overwrite file in storage |\n| `DELETE` | `/{storageId}/{filePath}` | Secure | Delete file from storage |\n| `GET` | `/{storageId}/{directoryPath}/` | Secure | Get directory contents by postfixing the path with `/` |\n| `DELETE` | `/{storageId}/{filePath}/` | Secure | Delete directory (recursively) from storage |\n\nExample Usage:\n```\ncurl -XPUT -H \"Authorization: ApiKey shhMySecret\" --data-binary \"@./some-file.jpg\" http://localhost/myStorage/some/file.jpg\ncurl -XHEAD http://localhost/myStorage/some/file.jpg\ncurl http://localhost/myStorage/some/file.jpg\ncurl -H \"Authorization: ApiKey shhMySecret\" http://localhost/myStorage/some/\ncurl -XDELETE -H \"Authorization: ApiKey shhMySecret\" http://localhost/myStorage/some/file.jpg\n```\n\nThe above examples is a perfect segway into [Secure API Operations](#secure-api-operations).\n\n\n### Secure API Operations\n\nAs indicated in [Configuration](#configuration), `storage.{id}.auth` is required to support uploads and deletes.\n\nExample Config:\n\n```\n  auth: {\n    mainAuth: {\n      driver: './lib/my-jwt-handler',\n      options: { /* options only my auth driver will understand */ }\n    }\n  },\n  storage: {\n    store1: {\n      driver: '...',\n      auth: 'mainAuth' // uploads to store1 require mainAuth\n    }\n  }\n```\n\nIf you're creating your own Authorization handler, you can export a module with the following format:\n\n```\nmodule.exports = function(req, storageId, fileKey, authConfig, cb) {\n  doSomethingAsync(function (err) => {\n    if (err) return void cb(err); // fail authorization\n\n    cb(); // authorization check passed, let them through\n  });\n}\n```\n\nYour handler can be synchronous or asynchronous, but `cb` must be invoked in either case.\n\n#### Authorization Drivers\n\n* [Authorization Header](https://github.com/asilvas/blobby-auth-header) - An HTTP Authorization client.\n\n\n### File Replication\n\nAs indicated in [Configuration](#configuration), `storage.{id}.replicas` is required to enabled\nreplication. An array of one or more replicas can be provided, consisting of the storage identifier\nand optionally the configuration if the desired storage exists in a different environment (such\nas replication across data centers).\n\nFormat is `[ConfigId::]StorageId`, where `ConfigId` only needs to be specified if from a different\nenvironment.\n\nExample of two replicas, one from same environment, other from a different environment:\n\n```\nreplicas: ['myOtherStorage', 'otherConfig::AnotherStorage']\n```\n\n***Important:*** Successful uploads (`PUT`'s) and deletes (`DELETE`'s) are only confirmed if all replica's\nhave been written to. This is to avoid data inconsistencies and race conditions (i.e. performing an\naction on an asset before it's been written in all locations). In cases where speed is more important\nthan consistency, querystring param `waitForReplicas=0` can be set. There is no way to turn off\nreplication without removing from configuration, so this option will only return success once the\nlocal storage is successful. The downside of this approach is that high availability is expected\nfor every replica, and uploads (or deletes) will fail if one of the replica's cannot be written to.\n\n\n\n## Full Command List\n\n```\nCommands:\n  checkdir <dir> <storage..>  One-Way shallow directory compare between storage\n                              bindings and/or environments\n  check <storage..>           One-Way compare files between storage bindings\n                              and/or environments\n  compare <storage..>         Compare files between storage bindings and/or\n                              environments\n  copydir <dir> <storage..>   One-way shallow directory copy between storage\n                              bindings and/or environments\n  copy <storage..>            One-way copy of files between storage bindings\n                              and/or environments\n  shard <storage> <dir>       Look up the given shard for a given storage and\n                              path\n  initialize <storage..>      Perform any initialization tasks required by the\n                              given storage (ex: pre-creating bucket shards in\n                              S3)\n  repair <storage..>          Repair files between storage bindings and/or\n                              environments\n  rmdir <dir> <storage..>     Delete files for the given directory and storage\n                              bindings and/or environments\n  server                      Start HTTP API Server\n  acl <dir> <storage..>       Set ACL's for a given directory for the given\n                              storage bindings and/or environments\n  stats <storage..>           Compute stats for storage bindings and/or\n                              environments\n```\n\n\n\n## Compare\n\nFor comparing the difference between storage bindings\nand/or environments. This is a two-way comparison. Use `check`\ninstead if you only want to do a one-way comparison.\n\n```\nblobby compare <storage..>\n```\n\nExample of comparing two bindings:\n```\nblobby compare old new\n```\n\nExample of comparing one binding across 2 datacenters:\n```\nblobby compare app --config dc1 dc2\n```\n\nExample of comparing two bindings across 2 datacenters:\n```\nblobby compare old new --config dc1 dc2\n```\n\n### Compare Modes\n\n```\nblobby compare old new --mode deep\n```\n\nAvailable modes:\n\n* `fast` - A simple check of file existence. Only recommended\n  when you're comparing stores configured for immutable data. `Size` check will\n  also be performed, if the storage driver provides it.\n* `headers` (recommended) - Similar in speed to `fast`, but requires `ETag` or `LastModified`\n  headers or comparison will fail. Should only be used between storage drivers\n  that support at least one of these headers. NOTE: S3 should only be compared\n  against other S3 storages in this mode due to their inability to overwrite these\n  headers.\n* `deep` - Performs an `ETag` check if available, otherwise falls back\n  to loading files and performing hash checks. This option can range\n  from a little slower, to much slower, depending on `ETag` availability.\n  Recommended for mutable storage comparisons where caching headers are not\n  available (ex: comparing a file system with S3 or vice versa).\n* `force` - If you want to skip comparison for any reason, this will force the\n  comparison to fail, resulting in update of the destination for all source\n  files. Also has the benefit of being the fastest option since destination does\n  not need queried.\n\n\n## Repair\n\nFor repairing the difference between storage bindings\nand/or environments. This is a two-way repair. Use `copy`\ninstead if you only want to do a one-way repair.\n\n![NPM](https://raw.githubusercontent.com/asilvas/blobby/master/docs/repair-env.jpg)\n\n```\nblobby repair <storage..>\n```\n\nExample of syncing data between old and new storage:\n```\nblobby repair old new\n```\n\nExample of syncing one storage across 2 datacenters:\n```\nblobby repair app --config dc1 dc2\n```\n\nExample of syncing two storage across 2 datacenters:\n```\nblobby repair old new --config dc1 dc2\n```\n\nFor usage of `mode`, see [Compare Modes](#compare-modes).\n\n\n## Stats\n\nQuery statistics against your storage(s).\n\n```\nblobby stats <storage..>\n```\n\nExample of querying stats for a single storage:\n```\nblobby stats old\n```\n\n\n\n## Initialize\n\nUseful one-time initialization required by some storage drivers,\nsuch as pre-creating shard buckets in S3.\n\n```\nblobby initialize <storage..>\n```\n\nExample of initializing a single storage:\n```\nblobby initialize new\n```\n\n\n\n## Shard\n\nUseful for identifying the location of a given directory for storage\ndrivers that support sharding.\n\n```\nblobby shard <storage> <dir>\n```\n\nExample:\n```\nblobby shard new 'some/path'\n```\n","created":"2017-05-02T23:25:50.130Z","modified":"2017-06-21T20:24:05.270Z","lastPublisher":{"name":"asilvas","email":"asilvas@godaddy.com"},"owners":[{"name":"asilvas","email":"asilvas@godaddy.com"}],"other":{"_attachments":{},"_from":".","_id":"blobby","_nodeVersion":"6.9.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/blobby-0.3.1.tgz_1498076645013_0.9288134686648846"},"_npmUser":{"name":"asilvas","email":"asilvas@godaddy.com"},"_npmVersion":"3.10.8","_rev":"29-ec6609a73b0c9d3686870c25977cb3ef","_shasum":"16fc22e41071d48f4b54b78ee9259e8be9efd965","author":{"name":"Aaron Silvas"},"bugs":{"url":"https://github.com/asilvas/blobby/issues"},"directories":{},"dist-tags":{"latest":"0.3.1"},"dist":{"shasum":"16fc22e41071d48f4b54b78ee9259e8be9efd965","tarball":"https://registry.npmjs.org/blobby/-/blobby-0.3.1.tgz"},"maintainers":[{"name":"asilvas","email":"asilvas@godaddy.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-21T20:24:05.270Z","created":"2017-05-02T23:25:50.130Z","0.1.0":"2017-05-02T23:25:50.130Z","0.1.1":"2017-05-03T18:52:35.492Z","0.1.2":"2017-05-03T19:23:11.529Z","0.1.3":"2017-05-03T22:14:17.948Z","0.1.4":"2017-05-03T22:40:45.900Z","0.1.5":"2017-05-04T03:03:29.830Z","0.1.6":"2017-05-04T19:35:15.318Z","0.1.7":"2017-05-04T23:53:42.952Z","0.1.8":"2017-05-07T13:57:24.877Z","0.1.9":"2017-05-07T19:05:55.311Z","0.1.10":"2017-05-07T20:21:06.832Z","0.1.11":"2017-05-07T21:02:25.680Z","0.2.0":"2017-05-09T17:18:31.738Z","0.2.1":"2017-05-09T17:42:27.094Z","0.2.2":"2017-05-09T22:00:12.980Z","0.2.3":"2017-05-12T23:23:32.292Z","0.2.4":"2017-05-17T17:52:59.378Z","0.2.5":"2017-05-17T18:06:11.436Z","0.2.6":"2017-05-19T16:04:58.216Z","0.2.7":"2017-05-21T19:06:55.420Z","0.2.8":"2017-05-22T15:09:42.285Z","0.2.9":"2017-05-22T15:43:44.999Z","0.2.10":"2017-05-23T16:44:20.200Z","0.2.11":"2017-05-26T22:46:44.459Z","0.2.12":"2017-05-30T23:05:47.320Z","0.2.13":"2017-06-01T22:04:20.502Z","0.2.14":"2017-06-02T18:33:00.385Z","0.3.0":"2017-06-09T21:47:33.307Z","0.3.1":"2017-06-21T20:24:05.270Z"}}}