{"name":"virtualhost","description":"Dispatch HTTP request to a handler depending on hostname","version":"0.0.2","homepage":"https://github.com/lmtm/node-virtualhost","repository":"https://github.com/lmtm/node-virtualhost","main":"virtualhost.js","scripts":{"test":"./node_modules/.bin/_mocha -R list -u bdd"},"dependencies":{},"devDependencies":{"chai":"~1.3.0","mocha":"~1.7.0","express":"~3.0.3","supertest":"~0.4.2"},"optionalDependencies":{},"engines":{"node":"*"},"keywords":["express","host","hostname","virtual","virtualhost","http"],"_engineSupported":true,"_defaultsLoaded":true,"versions":[{"number":"0.0.2","date":"2012-11-19T20:28:45.204Z"}],"readme":"virtualhost\n===========\n\n[![Travis CI Status](https://travis-ci.org/lmtm/node-virtualhost.png \"You Shall Pass!\")](https://travis-ci.org/#!/lmtm/node-virtualhost)\n\nMake your HTTP server hostname-aware **very simply**.\n\nYou define the handler for each server name, and that will return the final handler to be passed to your HTTP server.\n\nWorks fine with Express.\n\nInstallation\n------------\n\n`npm install virtualhost`\n\nUsage\n-----\n\n```javascript\nvar virtualhost = require('virtualhost');\nvar server = http.createServer(virtualhost(servers, catchAll));\n```\n\n* `servers` is a hash of server's configuration, each one having following options:\n  * `pattern` can be a string (hostnames will simply be compared for equality), or a regular expression (you could use `/^hello\\.(fr|com)$/i` for example to use this handler for `hello.fr` and `hello.com`, or `/\\.domain.tld$/` to match all subdomains of `domain.tld`). Think about anchors (`^` and `$`) when using regular expression as pattern.\n  * `handler` is a `function (req, res)`. Request matching pattern will simply be forwarded to this handler.\n  * `with_port` will include the port in the comparison. Default comparison ignores it, which means `pattern: \"domain.tld\" will match `domain.tld:8080` and `domain.tld:3000` the same way. If you enable this option, you **have to** include port in your pattern.\n* `catchAll` is the default handler used when no server matched hostname. It's not mandatory, and defaults to a simple 404.\n\n### Shorter usage\n\n`servers` can also be a simple hash of the form `pattern: handler`.\n\nFor example:\n\n```javascript\nvirtualhost({\n  \"one.mydomain.tld\": function (req, res) {…},\n  \"two.mydomain.tld\": function (req, res) {…}\n});\n```\n\nis strictly equivalent to\n\n```javascript\nvirtualhost({\n  \"one.mydomain.tld\": {\n    pattern: \"one.mydomain.tld\",\n    handler: function (req, res) {…}\n  },\n  \"two.mydomain.tld\": {\n    pattern: \"two.mydomain.tld\",\n    handler: function (req, res) {…}\n  }\n});\n```\n\nOf course you can mix both syntax.\n\n### Additional sugar\n\nAs a bonus, the `Request` object will be enhanced with an additional attribute `virtualhost`. You can use it in your handlers to identify context:\n\n* `req.virtualhost.hostname` is the hostname without port\n* `req.virtualhost.port` is the port\n* `req.virtualhost.match` depends of the matching result\n  * `false` if no pattern was matched\n  * `true` if a string-pattern was matched\n  * an array if the matched pattern was a `RegExp`. `match` is then the result of `String#match()`, which means you can access capturing groups. If your pattern was `/mydomain\\.(fr|com)/` then in your handler you'll be able to access `req.virtualhost.match[1]` which will contain `\"fr\"` or `\"com\"`.\n\nSample usage\n------------\n\n```javascript\n// Example of standard handler\n// This one will simply write \"handler1\" at \"sub.domain.tld/*\"\nvar handler1 = function (req, res) { res.end('handler1') };\n\n// Example of Express 3.x app\n// Good guy Express now simply returns standard handler, which makes this directly usable in virtualhost :)\n// This one will write \"handler2 (www.)\" at \"www.domain.tld/\" and \"handler2 (undefined)\" at \"domain.tld/\"\nvar handler2 = express().get('/', function (req, res) { res.end('handler2 (' + req.virtualhost.match[1] + ')' });\n\n// Example of virtualhost configuration\nvar apps = {\n  // Shortcut hostname→handler\n  sub.domain.tld: handler1,\n  // Full config with RegExp pattern\n  express: { pattern: /^(www\\.)?domain\\.tld$/, handler: handler2 }\n};\n\nhttp.createServer(virtualhost(apps)).listen();\n```\n","created":"2012-11-19T20:28:42.508Z","modified":"2012-11-19T20:28:45.204Z","lastPublisher":{"name":"naholyr","email":"naholyr@gmail.com"},"owners":[{"name":"naholyr","email":"naholyr@gmail.com"}],"other":{"_attachments":{},"_id":"virtualhost","_nodeVersion":"v0.8.10","_npmUser":{"name":"naholyr","email":"naholyr@gmail.com"},"_npmVersion":"1.1.24","_rev":"1-73e8fd3fc75e044f51d32ae728d90b4c","author":{"name":"Nicolas Chambrier","email":"naholyr@gmail.com","url":"http://naholyr.fr"},"directories":{},"dist-tags":{"latest":"0.0.2"},"dist":{"shasum":"4533a836524d54ca10d67d9123944d397bc3cd66","tarball":"http://registry.npmjs.org/virtualhost/-/virtualhost-0.0.2.tgz"},"maintainers":[{"name":"naholyr","email":"naholyr@gmail.com"}],"time":{"modified":"2012-11-19T20:28:45.204Z","created":"2012-11-19T20:28:42.508Z","0.0.2":"2012-11-19T20:28:45.204Z"}}}