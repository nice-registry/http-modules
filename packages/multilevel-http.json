{"name":"multilevel-http","version":"0.0.2","description":"Access a leveldb instance from multiple processes via HTTP","main":"index.js","scripts":{"test":"NODE_ENV=test mocha"},"repository":"https://github.com/juliangruber/multilevel-http","keywords":["leveldb","levelup","process","rpc","http"],"license":"MIT","dependencies":{"express":"~3.1.0","JSONStream":"~0.4.3","optimist":"~0.3.5","request":"~2.12.0","through":"~2.1.0","duplexer":"~0.0.2","levelup":"~0.6.1"},"devDependencies":{"should":"~1.2.1","mocha":"~1.8.1","supertest":"~0.5.1","fs.extra":"~1.2.0"},"bin":{"multilevel-http":"./bin/multilevel-http.js"},"engines":{"node":">=0.8"},"readme":"\n# multilevel-http\n\n*Access a leveldb instance from multiple processes via HTTP.*\n\nA limitation of LevelDB is that only one process is allowed access to the underlying data. **multilevel-http** exports a LevelDB instance over http.\n\n## Installation\n\n```bash\nnpm install multilevel-http\n```\n\n## API\n\nServer:\n\n```js\nvar multilevel = require('multilevel')\n// db = levelup instance or path to db\nvar server = multilevel.server(db, options)\nserver.listen(5000)\n```\n\nClient:\n\n```js\nvar multilevel = require('multilevel')\nvar db = multilevel.client('http://localhost:5000/')\n// now you have the complete levelUP api!\n// ...except for events, for now\n```\n\n## CLI\n\n```bash\n$ sudo npm install -g multilevel-http\n$ multilevel-http -p 5000 path/to.db\n```\n\n## HTTP API\n\n### Params\n\nUse get-params to pass options to LevelDB, like `?encoding=json`\n\n### GET /meta\n\nGet meta information about the DB.\n\n```js\n// GET /meta\n{\n  \"compression\" : false,\n  \"cacheSize\" : 8 * 1024 * 1024,\n  \"encoding\" : 'utf8',\n  \"keyEncoding\" : 'utf8',\n  \"valueEncoding\" : 'utf8',\n  \"path\" : path\n}\n```\n\n### GET /data/:key\n\nGet tha value stored at `:key`.\n\n```js\n// GET /data/foo\nbar\n```\n\n### PUT /data\n\nWrite many values batched.\n\n```js\n/* PUT /data [\n  { key : 'bar', value : 'baz' },\n  { key : 'foo', value : 'bar' }\n] */\n```\n\n### POST /data/:key\n\nStore data at `:key`.\n\n```js\n// POST /data/foo bar\n\"ok\"\n```\n\n### DEL /data/:key\n\nDelete data stored at `:key`.\n\n```js\n// DEL /data/foo\n\"ok\"\n```\n\n### GET /approximateSize/:from..:to\n\nGet an approximation of disk space used to store the data in the given range.\n\n```js\n// GET /approximateSize/a..z\n123\n```\n\n### GET /data\n\nGet all the data.\n\n```js\n// GET /data/12\n[\n  { key : 'bar', value : 'baz' },\n  { key : 'foo', value : 'bar' },\n  /* ... */\n]\n```\n\n### GET /range/:from..:to\n\nGet all data in the given range.\n\n```js\n// GET /range/a..c\n[ { key : 'bar', value : 'baz' } ]\n```\n\n### GET /keys\n\nGet all the keys.\n\n```js\n// GET /keys\n[ 'bar', 'foo' ]\n```\n\n### GET /keys/:from..:to\n\nGet all the keys in the given range.\n\n```js\n// GET /keys/a..c\n[ 'bar' ]\n```\n\n### GET /values\n\nGet all the values.\n\n```js\n// GET /values\n[ 'baz', 'bar' ]\n```\n\n### GET /values/:from..:to\n\nGet all the values in the given range.\n\n```js\n// GET /values/a..c\n[ 'baz' ]\n```\n\n## Server API\n\n```js\n// server\nvar multilevel = require('multilevel-http')('my.db')\nmultilevel.listen(3000)\n```\n\n### multilevel.server(path|db, meta)\n\n### server#listen(port)\n\nStart serving on the given port.\n\n### server#{db,meta}\n\nThe stored db and meta data exposed.\n\n## License\n\n(MIT)\n\nCopyright (c) 2013 Julian Gruber &lt;julian@juliangruber.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","versions":[{"number":"0.0.0","date":"2013-01-31T07:33:07.005Z"},{"number":"0.0.1","date":"2013-03-02T09:13:32.942Z"},{"number":"0.0.2","date":"2013-03-12T12:44:12.217Z"}],"created":"2013-01-31T07:33:05.056Z","modified":"2013-03-12T12:44:12.217Z","lastPublisher":{"name":"juliangruber","email":"julian@juliangruber.com"},"owners":[{"name":"juliangruber","email":"julian@juliangruber.com"}],"other":{"_attachments":{},"_from":".","_id":"multilevel-http","_npmUser":{"name":"juliangruber","email":"julian@juliangruber.com"},"_npmVersion":"1.2.14","_rev":"1-6613e1b7730ba415b54afbf9cd656b3b","author":{"name":"Julian Gruber","email":"julian@juliangruber.com"},"directories":{},"dist-tags":{"latest":"0.0.2"},"dist":{"shasum":"e3c995db94b804813446a16eaf9f9d06a0f1c315","tarball":"http://registry.npmjs.org/multilevel-http/-/multilevel-http-0.0.2.tgz"},"maintainers":[{"name":"juliangruber","email":"julian@juliangruber.com"}],"readmeFilename":"README.md","time":{"modified":"2013-03-12T12:44:12.217Z","created":"2013-01-31T07:33:05.056Z","0.0.0":"2013-01-31T07:33:07.005Z","0.0.1":"2013-03-02T09:13:32.942Z","0.0.2":"2013-03-12T12:44:12.217Z"}}}