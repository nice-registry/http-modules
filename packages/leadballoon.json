{"name":"leadballoon","version":"0.0.3","description":"Graceful failure extensions for HTTP servers","main":"index.js","scripts":{"lint":"jshint .","pretest":"npm run lint","test":"node ./test"},"engines":{"node":">=0.12"},"repository":"https://github.com/rjz/leadballoon","keywords":["graceful","server","network","failure","exception","connection","handler","manager"],"license":"MIT","devDependencies":{"jshint":"~2.9.2","tape":"~4.6.0"},"gitHead":"2c374f7aec0a8c8efe7525bfe70cac986e52039b","homepage":"https://github.com/rjz/leadballoon","versions":[{"number":"0.0.1","date":"2015-01-10T22:45:06.841Z"},{"number":"0.0.2","date":"2015-04-20T04:45:49.769Z"},{"number":"0.0.3","date":"2016-07-31T22:46:41.814Z"}],"readme":"Lead Balloon\n===================================\n\n[![Build Status](https://travis-ci.org/rjz/leadballoon.svg?branch=master)](https://travis-ci.org/rjz/leadballoon)\n\nWraps `http.Server` with graceful shutdown logic. Useful for ensuring service\nwithin fail-fast applications.\n\nWith its default configuration, a `LeadBalloon` server will close out by:\n\n  1. Emitting a `'closing'` event\n  2. Servicing all existing requests (subject to a timeout)\n  3. Sending a 502 (Bad Gateway) response to any new requests\n\nWhen the process finishes closing, this server will emit the usual `'close'`\nevent with no arguments (served closed gracefully) or an error (some connections\ntimed out).\n\nNote: in good, fail-fast fashion, unhandled exceptions in the server logic\n[remain exceptional][rjzaworski-exceptions]. No assumptions are made here about\nwhether or not they can be recovered, and no attempt is made to recover them.\n\nUsage\n-----------------------------------\n\n```js\nvar createServer = require('leadballoon').createServer;\n\nfunction handleRequest (req, res) {\n  res.statusCode = 200;\n  res.end('Hello, world');\n}\n\nvar server = createServer(handleRequest, {\n  timeout: 5000,\n});\n\nserver.listen(process.env.PORT);\n```\n\nLater, to close the server while resolving as many open connections as possible:\n\n```js\nserver.close();\n```\n\nOptions:\n\n  * `timeout` `Number` - the time (ms) to wait for connections to close before\n      forcing a hard shutdown. Default: `10000`.\n\n  * `closingHandler` `Function` - a `(req, res)` handler for requests received\n      while the server is shutting down. Default: `leadballoon.sendUnavailable`.\n\nEvents:\n\n  * `'closing'` - emitted when the server begins shutting down\n\n### Cleaning up\n\nWith the server closed, it's polite to bring the process down. This is the time\nto print any last words and exit with an appropriate status.\n\n```js\nserver.on('close', function (err) {\n  if (err) {\n    console.error('Went down hard', err);\n    process.exit(1);\n  }\n\n  process.exit(0);\n});\n```\n\n## License\n\nMIT\n\n[rjzaworski-exceptions]: https://rjzaworski.com/2015/01/javascript-async-exceptions-handling\n","created":"2015-01-10T22:45:06.841Z","modified":"2016-07-31T22:46:41.814Z","lastPublisher":{"name":"rjz","email":"rj@rjzaworski.com"},"owners":[{"name":"rjz","email":"rj@rjzaworski.com"}],"other":{"_attachments":{},"_from":".","_id":"leadballoon","_nodeVersion":"0.12.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/leadballoon-0.0.3.tgz_1470005199945_0.771328060887754"},"_npmUser":{"name":"rjz","email":"rj@rjzaworski.com"},"_npmVersion":"2.5.1","_rev":"1-a0a84f71d6265b34d863878ab5e46aa3","_shasum":"1daf49cbf596a12b865ecb0b736e1b4ec7635e4d","author":{"name":"RJ Zaworski","email":"rj@rjzaworski.com"},"bugs":{"url":"https://github.com/rjz/leadballoon/issues"},"directories":{},"dist-tags":{"latest":"0.0.3"},"dist":{"shasum":"1daf49cbf596a12b865ecb0b736e1b4ec7635e4d","tarball":"http://registry.npmjs.org/leadballoon/-/leadballoon-0.0.3.tgz"},"maintainers":[{"name":"rjz","email":"rj@rjzaworski.com"}],"readmeFilename":"README.md","time":{"modified":"2016-07-31T22:46:41.814Z","created":"2015-01-10T22:45:06.841Z","0.0.1":"2015-01-10T22:45:06.841Z","0.0.2":"2015-04-20T04:45:49.769Z","0.0.3":"2016-07-31T22:46:41.814Z"}}}