{"name":"rester-client","version":"1.0.2","description":"Library for making HTTP requuests from strings","main":"src/index.js","scripts":{"test":"test/test-runner.sh"},"repository":"https://github.com/pjdietz/rester-core","license":"MIT","devDependencies":{"chai":"^3.2.0","coveralls":"^2.11.8","istanbul":"^0.4.2","mocha":"^2.2.5","mocha-tap-reporter":"^0.1.3","sinon":"^1.16.1","sinon-chai":"^2.8.0"},"dependencies":{},"gitHead":"b47a5bf34e0a92b90fcd82f7b520fcb03079eb18","homepage":"https://github.com/pjdietz/rester-core#readme","versions":[{"number":"1.0.0","date":"2016-04-06T15:32:22.913Z"},{"number":"1.0.1","date":"2016-05-18T23:15:20.513Z"},{"number":"1.0.2","date":"2016-05-19T00:01:33.515Z"}],"readme":"# RESTer Client\n\n[![Travis](https://img.shields.io/travis/pjdietz/rester-client.svg?style=flat-square)](https://travis-ci.org/pjdietz/rester-client)\n[![Coveralls](https://img.shields.io/coveralls/pjdietz/rester-client.svg?style=flat-square)](https://coveralls.io/r/pjdietz/rester-client)\n[![GitHub license](https://img.shields.io/github/license/pjdietz/rester-client.svg?style=flat-square)](LICENSE.md)\n\nRESTer Client is a library for making HTTP requests from strings. It's the core of the [RESTer Atom package](https://github.com/pjdietz/rester-atom).\n\n## Overview\n\nUsing RESTer Client involves creating a `Client`, and then using that `Client` to generate `Transactions`. Each `Transaction` represents a single request-response cycle, including redirects.\n\n```javascript\n// Import the Client constructor.\nconst Client = require('rester-client');\n\n// Create a Client instance.\nlet client = new Client();\n\n// Use the Client to create a Transaction for a specific request.\nlet transaction = client.request(`\nPOST /cats/ HTTP/1.1\nHost: localhost:8080\nContent-type: application/json\n\n{\n    \"name\": \"Molly\",\n    \"color\": \"calico\"\n}\n`);\n\n// Add event listeners for transaction events.\ntransaction.on('end', () => {\n    // Display the last response received.\n    console.log(transaction.getResponse());\n    // Clean up when done.\n    transaction.removeAllListeners();\n    transaction = null;\n});\n\ntransaction.on('error', (err) => {\n    console.log('Oh noez! Something went wrong!');\n    // Clean up when done.\n    transaction.removeAllListeners();\n    transaction = null;\n});\n\n// Send the request.\ntransaction.send();\n```\n\n## Client\n\nThe `'rester-client'` module provides the `Client` constructor function. A `Client` instance serves as a factory for creating [`Transactions`](#transactions). To create a [`Transaction`](#transactions), pass a string to the client's `request()` method. See [Parsing](#parsing) for information on how to write requests.\n\nWhen you a create `Client` instance, you can pass an optional configuration object to tailor the client's behavior to your needs.\n\nTo create a client that will follow redirects for status codes 301, 302, and 303:\n\n```javascript\nlet client = new Client({\n    followRedirects: true,\n    redirectStatusCodes: [301, 302, 303]\n});\n```\n\n### Options\n\n| Option              | Type      | Default | Description                                                                                                     |\n|:--------------------|:----------|:--------|:----------------------------------------------------------------------------------------------------------------|\n| followRedirects     | `boolean` | `false` | When `true`, will automatically redirect responses with status codes listed in `redirectStatusCodes`.           |\n| redirectStatusCodes | `array`   | `[]`    | When `followRedirects` is `true`, will automatically redirect responses with status codes listed in this array. |\n| multilineEnd        | `string`  | `\"\"\"`   | Delimiter marking the end of a multiline form field                                                             |\n| multilineStart      | `string`  | `\"\"\"`   | Delimiter marking the start of a multiline form field                                                           |\n\n\nThese and many other settings can be overridden when parsing the request. See the [Parsing](#parsing) section for details.\n\n## Transactions\n\nA `Transaction` represents a single request-response cycle. To create a `Transaction`, pass a string representing the request to a `Client`'s `request()` method.\n\n```javascript\nlet transaction = client.request('GET http://localhost:8080/path');\n```\n\nNext, add event listeners. `'end'` and `'error'` are the most commonly used.\n\n```javascript\ntransaction.on('end', () => {\n    console.log('We received a response. Here it is:');\n    console.log(transaction.getResponse());\n    // Clean up when done.\n    transaction.removeAllListeners();\n    transaction = null;\n});\ntransaction.on('error', (err) => {\n    console.log('Oh noez! Something went wrong!');\n    // Clean up when done.\n    transaction.removeAllListeners();\n    transaction = null;\n});\n```\n\nCall `send()` to send the request.\n\n```javascript\ntransaction.send();\n```\n\n### Events\n\n| Event        | Description                                              |\n|:-------------|:---------------------------------------------------------|\n| `'request'`  | Send an outgoing request                                 |\n| `'response'` | Received an incoming response                            |\n| `'redirect'` | Sent an additional request                               |\n| `'end'`      | Received a final response                                |\n| `'error'`    | Encountered an error. The error is passed as a parameter |\n\n### Methods\n\n| Method          | Description                                               |\n|:----------------|:----------------------------------------------------------|\n| `getRequest()`  | Returns the initial request as a `string`                 |\n| `getResponse()` | Returns the most recently received response as a `string` |\n| `send()`        | Send the initial request to begin the transaction         |\n\nSee [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter) documentation for information on adding and removing event listeners.\n\n### Properties\n\n| Property      | Type     | Description                                                                       |\n|:--------------|:---------|:----------------------------------------------------------------------------------|\n| configuration | `object` | Object of configuration options propagated from the Client or set in the request. |\n| requests      | `array`  | Array of `string` requests sent.                                                  |\n| responses     | `array`  | Array of `string` responses received.                                             |\n\n## Parsing\n\nThe string you use to create a transaction can be as simple as a URI:\n\n```\nhttp://localhost:8080/path\n```\n\nOr, you can send headers and a body:\n\n```\nPUT /my-endpoint HTTP/1.1\nHost: api.my-example-site.com\nAccept: text/plain\nAccept-Charset: utf-8\nX-custom-header: whatever you want\n\nHere is the payload for the PUT request. The body is anything that follows the first empty line.\n```\n\n### The Request Line\n\nThe first non-empty, non-comment (`//` or `#`) line is the \"request line\". RESTer parses this to determine the method, URI, and protocol.\n\nYou may include the hostname in the request line, but RESTer does not require it. If omitted, be sure to include a Host header.\n\nHere are some example request lines (some with Host headers):\n\n```\nGET /my-endpoint HTTP/1.1\nHost: api.my-example-site.com\n```\n\n```\nGET /my-endpoint\nHost: api.my-example-site.com\n```\n\n```\nGET http://api.my-example-site.com/my-endpoint\n```\n\n```\nhttp://api.my-example-site.com/my-endpoint\n```\n\n\n\n### Headers\n\nRESTer parses the lines immediately following the request line up to the first empty line as headers. Use the standard field-name: field-value format.\n\n```\nGET /path HTTP/1.1\nHost: localhost:8080\nCache-control: no-cache\nIf-Modified-Since: Mon, 8 Sept 2014 13:0:0 GMT\n```\n\n### Query Parameters\n\nFor requests with many query parameters, you may want to spread your query across a number of lines. RESTer will parse any lines in the headers section that begin with `?` or `&` as query parameters. You may use `=` or `:` to separate the key from the value.\n\nThe following example requests are equivalent:\n\nAll in the URI:\n\n```\nhttp://api.my-example-site.com/?cat=molly&dog=bear\n```\n\nWith new lines:\n\n```\nhttp://api.my-example-site.com/\n?cat=molly\n&dog=bear\n```\n\nIndented, using colons, and only using `?`:\n\n```\nhttp://api.my-example-site.com/\n    ? cat: molly\n    ? dog: bear\n```\n\nPercent Encoding\n\nRESTer assumes that anything you place directly in the request line is the way you want it, but query parameters added on individual lines are assumed to be in plain text. So, values of query parameters added on individual lines will be percent encoded.\n\nThese requests are equivalent:\n\n```\nhttp://api.my-example-site.com/?item=I%20like%20spaces\n```\n\n```\nhttp://api.my-example-site.com/\n    ? item: I like spaces\n```\n\n\n\n### Comments\n\nInclude comments in your request by adding lines in the headers section that begin with `#` or `//`. RESTer will ignore these lines.\n\n```\nGET /my-endpoint HTTP/1.1\nHost: /api.my-example-site.com\n# This is a comment.\n// This is also a comment.\nCache-control: no-cache\n```\n\n### Body\n\nTo supply a message body for POST and PUT requests, add an empty line after the last header. RESTer will treat all content that follows the blank line as the request body.\n\nHere's an example of adding a new cat representation by supplying JSON:\n\n```\nPOST http://api.my-example-site.com/cats/\nContent-type: application/json\n\n{\n    \"name\": \"Molly\",\n    \"color\": \"Calico\",\n    \"nickname\": \"Mrs. Puff\"\n}\n```\n\n#### Forms\n\nTo submit a form (i.e., `application/x-www-form-urlencoded`), include the `@form` option in the header section. This option instructs RESTer to add the appropriate `Content-type` header and encode the body as a form.\n\nInclude the key-value pairs on separate lines. You may use `=` or `:` to separate the key from the value. As with query parameters, whitespace around the key and value is ignored.\n\nExamples:\n\n```\nPOST http://api.my-example-site.com/cats/\n@form\n\nname=Molly\ncolor=Calico\nnickname=Mrs. Puff\n```\n\n```\nPOST http://api.my-example-site.com/cats/\n@form\n\n      name: Molly\n     color: Calico\n  nickname: Mrs. Puff\n```\n\n#### Multiline Values\n\nUse delimiters to mark the boundaries of multiline field values. By default, the delimiters are `\"\"\"`. You may customize these providing `multilineStart` and `multilineEnd` options when calling the `Client` constructor.\n\nHere's an example of a request using mixed single- and multiline fields.\n\n```\nPOST http://api.my-example-site.com/cats/\n@form\n\nname: Molly\ncolor: Calico\nnickname: Mrs. Puff\nextra: \"\"\"{\n    \"id\": 2,\n    \"description\": \"This JSON snippet is wrapped in delimiters because it has multiple lines.\"\n}\"\"\"\n```\n\n### Options\n\nTo customize RESTer's behavior for a single transaction, include options in the header section. An option begins with `@` and may or may not include a value. For example, to instruct RESTer to follow redirects, include `@followRedirects` like this:\n\n```\nGET http://localhost:8080/path-that-redirects\n@followRedirects: true\n```\n\nBoolean `true` options can also be expressed with a shorthand syntax by including the option key without the `:` and value. This is equivalent:\n\n```\nGET http://localhost:8080/path-that-redirects\n@followRedirects\n```\n\nSome options accept strings or arrays as values. For example:\n\n```\nGET http://localhost:8080/path-that-redirects\n@followRedirects\n@redirectStatusCodes: [301, 302]\n```\n\nThe following is a list of options that RESTer expects:\n\n| Option               | Type    | Description                                                                |\n|:---------------------|:--------|:---------------------------------------------------------------------------|\n| @auth                | string  | Auth segment for the request (e.g., \"user\", \"user:password\")               |\n| @followRedirects     | boolean | Allow RESTer to automatically follow redirects                             |\n| @form                | boolean | Parse the body as a form and include the appropriate `Content-type` header |\n| @hostname            | string  | Hostname for the request (e.g., \"localhost\")                               |\n| @port                | int     | Port for the request (e.g., 8080)                                          |\n| @protocol            | string  | Protocol for the request. Must be \"http\" or \"https\"                        |\n| @redirectStatusCodes | array   | List of status codes to automatically follow redirects for                 |\n\nAll configuration options—including those provided by the Client and those parsed from the request string—are made available as the transaction's `configuration` property. This even includes unexpected options with no inherent meaning to the core RESTer module. This feature allows you to create your own options when building software that uses RESTer Client.\n\nFor example, [RESTer for Atom](https://github.com/pjdietz/rester-atom) allows the user to customize whether or not to display redirect responses in the output by including `@showRedirects` in the request.\n\n\n\n## Unit Tests\n\nRun all tests:\n\n```bash\nnpm test\n```\n\nRun a test or directory of tests:\n\n```bash\nnpm test -- [path to file or directory relative to test/tests]\n```\n\nTo run tests with code coverage, include the `-c` or `--coverage` option.\n\n```bash\nnpm test -- -c [path]\nnpm test -- --coverage [path]\n```\n\nThe code coverage report will be created at `coverage/lcov-report/index.html`.\n\n## Author\n\n**PJ Dietz**\n\n- [http://pjdietz.com](http://pjdietz.com)\n- [http://github.com/pjdietz](http://github.com/pjdietz)\n- [http://twitter.com/pjdietz](http://twitter.com/pjdietz)\n\n## Copyright and license\n\nCopyright 2016 by PJ Dietz\n\n[MIT License](LICENSE)\n","created":"2016-04-06T15:32:22.913Z","modified":"2016-05-19T00:01:33.515Z","lastPublisher":{"name":"pjdietz","email":"pjdietz@gmail.com"},"owners":[{"name":"pjdietz","email":"pjdietz@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"rester-client","_nodeVersion":"5.10.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/rester-client-1.0.2.tgz_1463616090998_0.443685962818563"},"_npmUser":{"name":"pjdietz","email":"pjdietz@gmail.com"},"_npmVersion":"3.8.3","_rev":"1-7078c2700aebfb8d274acf8670ddefa8","_shasum":"21d1defe9e33e0fde1ae6b93393471fb84eeb5ea","author":{"name":"PJ Dietz","email":"pjdietz@gmail.com"},"bugs":{"url":"https://github.com/pjdietz/rester-core/issues"},"directories":{},"dist-tags":{"latest":"1.0.2"},"dist":{"shasum":"21d1defe9e33e0fde1ae6b93393471fb84eeb5ea","tarball":"http://registry.npmjs.org/rester-client/-/rester-client-1.0.2.tgz"},"maintainers":[{"name":"pjdietz","email":"pjdietz@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-05-19T00:01:33.515Z","created":"2016-04-06T15:32:22.913Z","1.0.0":"2016-04-06T15:32:22.913Z","1.0.1":"2016-05-18T23:15:20.513Z","1.0.2":"2016-05-19T00:01:33.515Z"}}}