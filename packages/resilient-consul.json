{"name":"resilient-consul","description":"Resilient HTTP middleware for Consul service discovery and balancing","version":"0.1.7","license":"MIT","repository":"https://github.com/h2non/resilient-consul","main":"consul.js","keywords":["fault","tolerant","balance","ajax","http","https","xhr","request","client","agent","distributed","resilience","reactive","hydra","balancer","rest","fallback","consul"],"engines":{"node":">= 0.10.0"},"scripts":{"test":"standard consul.js test/consul.js && mocha --ui tdd","browser":"uglifyjs consul.js --mangle --source-map consul.min.js.map --source-map-url http://cdn.rawgit.com/h2non/consul/$VERSION/consul.min.js.map > consul.min.js"},"devDependencies":{"chai":"^1.9.1","mocha":"^1.21.3","standard":"^5.4.1","uglify-js":"^2.4.15"},"standard":{"globals":["define","suite","beforeEach","test"]},"gitHead":"d0ddc58d2dacc3a11a005bcd21b96af41f84aea1","homepage":"https://github.com/h2non/resilient-consul#readme","versions":[{"number":"0.1.0","date":"2015-05-03T01:11:07.601Z"},{"number":"0.1.1","date":"2015-05-03T01:15:30.938Z"},{"number":"0.1.2","date":"2015-05-07T19:11:25.908Z"},{"number":"0.1.3","date":"2015-10-24T15:54:48.584Z"},{"number":"0.1.4","date":"2015-11-01T15:33:44.693Z"},{"number":"0.1.5","date":"2016-01-26T14:22:06.897Z"},{"number":"0.1.6","date":"2016-01-26T14:48:00.483Z"},{"number":"0.1.7","date":"2016-02-09T11:46:33.895Z"}],"readme":"# resilient-consul  [![Build Status](https://travis-ci.org/h2non/resilient-consul.svg?branch=master)](https://travis-ci.org/h2non/resilient-consul) [![Resilient](https://img.shields.io/badge/I'm-resilient-green.svg?style=flat-square)](http://resilient-http.github.io) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com)\n\n[resilient.js](https://github.com/resilient-http/resilient.js) HTTP client \n[middleware](https://github.com/resilient-http/resilient.js#middleware-layer) for [Consul](https://www.consul.io).\n\nVia this middleware you can use Consul as compatible discovery server in Resilient HTTP clients.\nWorks with Consul HTTP API `v1` and resilient.js `+0.3`\n\n<table>\n<tr>\n<td><b>Name</b></td><td>consul</td>\n</tr>\n<tr>\n<td><b>Type</b></td><td>discovery</td>\n</tr>\n<tr>\n<td><b>Resilient</b></td><td>+0.3</td>\n</tr>\n<tr>\n<td><b>Environments</b></td><td>node.js / browsers</td>\n</tr>\n</table>\n\n## Installation\n\n### Node.js\n\n```\nnpm install resilient-consul --save\n```\n\n### Browser\n\nVia Bower:\n```\nbower install resilient-consul --save\n```\n\nVia Component:\n```\ncomponent install h2non/resilient-consul\n```\n\nOr loading the script directly:\n```html\n<script src=\"//cdn.rawgit.com/h2non/resilient-consul/0.1.6/consul.js\"></script>\n```\n\n## Usage\n\n```js\nvar Resilient = require('resilient')\nvar consul = require('resilient-consul')\n\nvar client = Resilient()\n\nclient.use(consul({\n  // App service name (required)\n  service: 'web',\n  // Service name for self discovery (optional)\n  discoveryService: 'consul',\n  // Use a custom datacenter (optional)\n  datacenter: 'ams2',\n  // Use a custom service tag (optional)\n  tag: '1.0',\n  // Consul servers pool\n  servers: [\n    'http://demo.consul.io',\n    'http://demo.consul.io'\n  ],\n  // Use Consul's health check endpoint instead of the catalog\n  // to retrieve only services with passing health checks (optional)\n  onlyHealthy: false,\n  // Use a custom mapping function (optional)\n  mapServers: function (list) {\n    // here you can filter/map the services retrieved from Consul\n    // to a list of addresses according to custom logic (optional)\n    return list.map(function (svc) { return svc.ServiceAddress + '/v1' })\n  }\n}))\n\n// Test request\nclient.get('/', function (err, res) {\n  console.log('Error:', err)\n  console.log('Response:', res)\n})\n```\n\n#### Browser usage\n\nIf you're running Resilient in the browser, you must enable CORS headers in Consul.\nTo do that you can define additional response HTTP headers in the Consul config file:\n\n```\n\"http_api_response_headers\": {\n  \"Access-Control-Allow-Origin\": \"*\"\n}\n```\n\n## Options\n\n- **service** `string` - Consul service. Required\n- **servers** `array<string>` - List of Consul servers URLs. Required\n- **discoveryService** `string` - Consul discovery service for self discovery (e.g: consul)\n- **datacenter** `string` - Custom datacenter to use. If not defined the default one will be used \n- **tag** `string` - Use a specific tag for the service\n- **onlyHealthy** `boolean` - Use Consul's health check endpoint instead of the catalog to retrieve only services with passing health checks. Default to `false`\n- **protocol** `string` - Transport URI protocol. Default to `http`\n- **mapServers** `function` - Custom function for creating the list of service addresses based on the Consul response\n\nAdditionally you can pass any of the supported Resilient \n[discovery options](https://github.com/resilient-http/resilient.js#discovery) via this middleware\n\n## License\n\nMIT - Tomas Aparicio\n","created":"2015-05-03T01:11:07.601Z","modified":"2016-02-09T11:46:33.895Z","lastPublisher":{"name":"h2non","email":"tomas@aparicio.me"},"owners":[{"name":"h2non","email":"tomas@aparicio.me"}],"other":{"_attachments":{},"_from":".","_id":"resilient-consul","_nodeVersion":"5.5.0","_npmOperationalInternal":{"host":"packages-9-west.internal.npmjs.com","tmp":"tmp/resilient-consul-0.1.7.tgz_1455018391062_0.10363568947650492"},"_npmUser":{"name":"h2non","email":"tomas@aparicio.me"},"_npmVersion":"3.3.12","_rev":"1-1e62cab129b745fd7ac20b7611323a93","_shasum":"dc4f5d835390b248e271f8357dc6fb6cb4103c92","author":{"name":"Tomas Aparicio"},"bugs":{"url":"https://github.com/h2non/resilient-consul/issues"},"directories":{},"dist-tags":{"latest":"0.1.7"},"dist":{"shasum":"dc4f5d835390b248e271f8357dc6fb6cb4103c92","tarball":"http://registry.npmjs.org/resilient-consul/-/resilient-consul-0.1.7.tgz"},"maintainers":[{"name":"h2non","email":"tomas@aparicio.me"}],"readmeFilename":"README.md","time":{"modified":"2016-02-09T11:46:33.895Z","created":"2015-05-03T01:11:07.601Z","0.1.0":"2015-05-03T01:11:07.601Z","0.1.1":"2015-05-03T01:15:30.938Z","0.1.2":"2015-05-07T19:11:25.908Z","0.1.3":"2015-10-24T15:54:48.584Z","0.1.4":"2015-11-01T15:33:44.693Z","0.1.5":"2016-01-26T14:22:06.897Z","0.1.6":"2016-01-26T14:48:00.483Z","0.1.7":"2016-02-09T11:46:33.895Z"}}}