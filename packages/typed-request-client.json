{"name":"typed-request-client","version":"6.2.4","description":"Make HTTP requests using TypedRequest and TypedResponse objects.","keywords":[],"repository":"https://github.com/uber/typed-request-client","main":"index","homepage":"https://github.com/uber/typed-request-client","dependencies":{"airlock":"^2.1.2","enchain":"0.0.1","error":"^4.1.1","glob":"^4.0.5","jayschema":"^0.3.1","jayschema-error-messages":"^1.0.2","request":"^2.44.0","uber-json-schema-filter":"^2.0.3","xtend":"^4.0.0"},"devDependencies":{"body":"^4.5.0","coveralls":"^2.10.0","format-stack":"^2.0.0","istanbul":"^0.3.13","jscs":"^1.6.2","jshint":"^2.5.0","opn":"^0.1.2","pre-commit":"0.0.5","send-data":"^3.3.3","tap-spec":"^0.1.8","tape":"^3.0.0","lint-trap":"^1.0.1"},"licenses":[{"type":"MIT","url":"http://github.com/uber/typed-request-client/raw/master/LICENSE"}],"scripts":{"test":"npm run jshint -s && npm run cover -s","fast-test":"npm run cover -s","jshint-pre-commit":"jshint --verbose $(git diff --cached --name-only --diff-filter=ACMRTUXB | grep '\\.js$')","jshint":"lint-trap","cover":"istanbul cover --report html --print detail test/index.js && istanbul check-coverage --lines=100 --branches=100","view-cover":"istanbul report html && opn ./coverage/index.html","travis":"npm run cover -s && istanbul report lcov && ((cat coverage/lcov.info | coveralls) || exit 0)"},"engine":{"node":">= 0.8.x"},"pre-commit":["jshint-pre-commit","fast-test"],"playdoh-version":"2.5.0","gitHead":"fea65cf182f868780d1449b078dd44869fc64d64","versions":[{"number":"3.0.1","date":"2014-10-27T16:52:11.176Z"},{"number":"4.0.0","date":"2014-11-20T00:18:54.670Z"},{"number":"4.0.1","date":"2015-01-16T23:43:20.823Z"},{"number":"4.0.2","date":"2015-01-20T21:10:07.556Z"},{"number":"4.0.3","date":"2015-01-29T01:08:05.249Z"},{"number":"4.1.0","date":"2015-02-11T03:33:21.590Z"},{"number":"4.1.1","date":"2015-02-12T03:39:51.408Z"},{"number":"4.1.2","date":"2015-02-18T07:00:52.019Z"},{"number":"6.0.0","date":"2015-04-02T17:52:57.085Z"},{"number":"6.1.0","date":"2015-06-18T19:05:24.132Z"},{"number":"6.2.0","date":"2016-01-11T19:34:27.906Z"},{"number":"6.2.1","date":"2016-03-30T00:45:15.721Z"},{"number":"6.2.2","date":"2016-04-19T01:41:28.539Z"},{"number":"6.2.3","date":"2017-03-04T00:51:21.875Z"},{"number":"6.2.4","date":"2017-05-17T18:16:37.270Z"}],"readme":"# typed-request-client\n\nMake HTTP requests using TypedRequest and TypedResponse objects.\n\n## Example\n\n```js\nvar TypedRequestClient = require('typed-request-client');\nvar Statsd = require('lynx');\n\nvar statsd = Statsd({\n    host: 'localhost',\n    port: 6379\n});\n\nvar request = TypedRequestClient({\n    clientName: 'my-client',\n    statsd: statsd\n});\n\nvar typedRequest = {\n    url: 'http://localhost:9000/',\n    method: 'GET',\n    headers: {},\n    body: { userId: '42' }\n};\n\nrequest(typedRequest, {\n    requestSchema: someJSONSchemaForRequest,\n    responseSchema: someJSONSchemaForResponse,\n    resource: '.read'\n}, function (err, typedResponse) {\n    // if an IO err happened then err\n\n    // typedResponse is a plain object with\n    //  - statusCode (number)\n    //  - httpVersion (string)\n    //  - headers (object)\n    //  - body (object)\n});\n```\n\n## Scope\n\nThe `typed-request-client` module will do the following for you:\n\n - Make HTTP client requests using `TypedRequest` and\n    `TypedResponse` interfaces.\n - Wrap your HTTP client request in a `Prober` using the\n    `airlock` module.\n - Validate the `TypedRequest` and `TypedResponse` as per the\n    supplied `requestSchema` and `responseSchema`.\n - Add statsd integration to your service, it will write four\n    different keys, `increment:request`, `timing:request-time`,\n    `increment:statusCode`, `timing:total-time`\n\n## Docs\n\n### `var makeReq = TypedRequestClient(opts)`\n\nTo create a TypedRequestClient you must pass a number of options.\n\nWhen you create one it will return a `makeReq` function you can call.\n\n#### `opts.clientName`\n\nYou must pass a `clientName` into the `TypedRequestClient`. This\n    will be a name used the statsd events being emitted.\n\nThis means you should pick a name you want to use for statsd.\n\n#### `opts.statsd`\n\nYou must pass in a working `statsd` client. A statsd client is\n    required since the `TypedRequestClient` must output statsd.\n\nA valid statsd client has at least two methods:\n\n - `statsd.increment(listOfKeys)`\n - `statsd.timing(listsOfKeys, numericTimeDelta)`\n\n#### `opts.request`\n\nYou can optionally pass in a different `request` function. This\n    will default to `mikeal/request` from npm if you do not pass\n    one in.\n\n#### `opts.now`\n\nYou can optionally pass in a different `now` function. This\n    will default to `Date.now()` from ES5 if you do not pass one\n    in.\n\n### `makeReq(typedRequest, options, callback)`\n\nThe function returned from `TypedRequestClient` allows you to\n    make typed requests to a server.\n\nThe `makeReq` interface is purposefully low level and kept\n    simple. You must supply all information.\n\n#### `typedRequest`\n\nThe first argument is the `typedRequest` you want to make.\n\n```jsig\ntype TypedRequest : {\n    url: String,\n    method?: \"OPTIONS\" | \"GET\" | \"HEAD\" | \"POST\" | \"PUT\" |\n        \"DELETE\" | \"TRACE\" | \"PATCH\",\n    query?: Object<String, String>,\n    headers?: Object<String, String>,\n    body?: Any\n}\n\n```\n\nA `TypedRequest` is a plain javascript object that looks similar\n    to a `HttpRequest` from node core, however it is not a stream.\n\nThe `url` property must be a valid full URI including host & port\n\nThe `method` property must be a valid HTTP method. It will\n    default to the `\"GET\"` HTTP method.\n\nThe `query` property is an optional object you can pass. It will\n    be serialized to a string using the `querystring` module\n    and correctly appended to the url you passed.\n\nIf you pass a `query` ensure that there are no querystring\n    parameters on the `url`.\n\nThe `headers` property is an optional object of headers. If you\n    pass any headers then they will be used as part of the\n    outgoing HTTP request.\n\nThe `body` property is an optional javascript object to send\n    as part of the HTTP request. If set to valid JSON then the\n    `makeReq` function will send your value as a JSON encoded\n    string as part of the outgoing HTTP request.\n\n#### `options`\n\nThe second argument is `options` and it is required.\n\n```jsig\ntype HandlerOptions : {\n    requestSchema: JSONSchema,\n    responseSchema: JSONSchema,\n    resource: String\n}\n```\n\nYou must specifiy a `requestSchema` which must be a valid\n    JSONSchema object.\n\nThis will be used to validate the `typedRequest` argument.\n\nFeel free to look at [integration tests](test/integration.js)\n    for an example of a valid requestSchema.\n\nYou must specify a `responseSchema` which must be a valid\n    JSONSchema object.\n\nThis will be used to validate the `typedResponse` argument\n    coming out of the callback from the outgoing HTTP request.\n\nYou must specify a `resource` name which must be a string and\n    will be used when emitting stats events.\n\n#### `callback(error, typedResponse)`\n\nThe `callback` to `makeReq` is the third and final argument. It\n    will get called with an `Error` or a `TypedResponse`.\n\nIf you get an `Error` then that's either an IO error or a\n    validation error.\n\nIf you get a `typedResponse` then that will look like:\n\n```jsig\ntype TypedResponse : {\n    httpVersion: String,\n    statusCode: Number,\n    headers: Object<String, String>\n    body?: Any\n}\n```\n\nThe `typedResponse` will have a `httpVersion` field that is the\n    version of HTTP used.\n\nThe `typedResponse` will have a `statusCode` field that is the\n    statusCode of response to the outgoing HTTP request.\n\nThe `typedResponse` will have a `headers` field that is an\n    object of heeaders returned by the outgoing HTTP request.\n\nThe `body` will be the HTTP body of the HTTP response.\n\n## Extending\n\nThe typed request client as exported by `typed-request-client` uses a default\nstack of configurable adapters.\nThese can be customized.\nEach of these layers is exported by various modules under `adapters` and can be\ncoposed as a pipeline as exported by `make-typed-request/adapt`.\n\n```js\nvar adapt = require('make-typed-request/adapt');\nfunction MyTypedRequestClient(options) {\n    return adapt()\n        .probing(options)\n        .statsdMeasure(options, 'requestTime')\n        .statsdReportStatusCode(options)\n        .validating(options)\n        .statsdReportRequestMade(options)\n        .statsdMeasure(options, 'totalTime')\n        .statsd(options)\n        .valueOf();\n}\n```\n\nWe use the `enchain` module to create fluent interfaces based on a collection\nof adapter methods.\nThis layer can be bypassed.\n\n```js\nvar TypedRequestClient = require('make-typed-request/make-typed-request');\nvar Validating = require('make-typed-request/adapters/validating');\nvar MyTypedRequestClient = Validating(TypedRequestClient, {});\n```\n\nAdditional client adapters can be made as functions that accept a client as\ntheir first argument and return a decorated client.\nBy convention we pass a shared `options` object through every adapter, but\nfurther arguments may be adapter instance specific.\n\n```js\nfunction MyAdapter(client, options, myArgument) {\n    return myClient;\n    function myClient(request, shared, respond) {\n        // Intercept request\n        client(request, shared, onResponse);\n        function onResponse(error, response) {\n            // Observe progress\n            if (error) { respond(error); }\n            // Intercept response\n            respond(null, response);\n        }\n    }\n}\n```\n\nYou can then create your own adapter chain vocabulary with `enchain`.\nAll of the adapters that this package provides are exported as a single object\nfrom `typed-request-client/adapters`, that you may mix into your own chains.\n\n```js\nvar enchain = require('enchain');\nvar adapt = enchain({\n    validating: require('make-typed-request/adapters').validating,\n    // etc\n    myAdapter: require('./my-adapter')\n});\nvar TypedRequestClient = require('make-typed-request/make-typed-request');\nvar options = {\n    requestSchema: someJSONSchemaForRequest,\n    responseSchema: someJSONSchemaForResponse\n};\nvar MyTypedRequestClient = adapt(TypedRequestClient)\n    .myAdapter(options, myArgument)\n    .validating(options)\n    .valueOf()\n```\n\n## Installation\n\n`npm install typed-request-client`\n\n## Tests\n\n`npm test`\n\n## Contributors\n\n - Raynos\n - Kris Kowal\n\n## MIT Licenced\n\n","created":"2014-10-27T16:52:11.176Z","modified":"2017-05-17T18:16:37.270Z","lastPublisher":{"name":"uber","email":"opensource@uber.com"},"owners":[{"name":"jwolski","email":"jeff.wolski@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"sh1mmer","email":"tom.croucher@gmail.com"},{"name":"uber","email":"opensource@uber.com"},{"name":"zhijin","email":"lizhijin1987@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"typed-request-client","_nodeVersion":"0.10.32","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/typed-request-client-6.2.4.tgz_1495044995468_0.37572975386865437"},"_npmUser":{"name":"uber","email":"opensource@uber.com"},"_npmVersion":"2.11.3","_rev":"3-bd9d1907bf2fdb85078079fac9a156e2","_shasum":"2e857ba1d74e4e54e7e20be34d64e279822b0fc0","author":{"name":"Raynos","email":"raynos2@gmail.com"},"bugs":{"url":"https://github.com/uber/typed-request-client/issues","email":"raynos2@gmail.com"},"directories":{},"dist-tags":{"latest":"6.2.4"},"dist":{"shasum":"2e857ba1d74e4e54e7e20be34d64e279822b0fc0","tarball":"https://registry.npmjs.org/typed-request-client/-/typed-request-client-6.2.4.tgz"},"maintainers":[{"name":"jwolski","email":"jeff.wolski@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"sh1mmer","email":"tom.croucher@gmail.com"},{"name":"uber","email":"opensource@uber.com"},{"name":"zhijin","email":"lizhijin1987@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-17T18:16:37.270Z","created":"2014-10-27T16:52:11.176Z","3.0.1":"2014-10-27T16:52:11.176Z","4.0.0":"2014-11-20T00:18:54.670Z","4.0.1":"2015-01-16T23:43:20.823Z","4.0.2":"2015-01-20T21:10:07.556Z","4.0.3":"2015-01-29T01:08:05.249Z","4.1.0":"2015-02-11T03:33:21.590Z","4.1.1":"2015-02-12T03:39:51.408Z","4.1.2":"2015-02-18T07:00:52.019Z","6.0.0":"2015-04-02T17:52:57.085Z","6.1.0":"2015-06-18T19:05:24.132Z","6.2.0":"2016-01-11T19:34:27.906Z","6.2.1":"2016-03-30T00:45:15.721Z","6.2.2":"2016-04-19T01:41:28.539Z","6.2.3":"2017-03-04T00:51:21.875Z","6.2.4":"2017-05-17T18:16:37.270Z"}}}