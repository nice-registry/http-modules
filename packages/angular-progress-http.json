{"name":"angular-progress-http","version":"0.5.0","description":"A thin wrapper around Http that lets  track progress of http request in Angular 2","main":"index.js","types":"index.d.ts","keywords":["angular","angular2","angular 2","ng2","http","progress","xhr","XMLHttpRequest","ajax","upload"],"license":"MIT","repository":"https://github.com/darkxahtep/angular-progress-http","peerDependencies":{"@angular/core":"^2.3.1 || ^4.0.0","@angular/http":"^2.3.1 || ^4.0.0","rxjs":"^5.0.1"},"homepage":"https://github.com/darkxahtep/angular-progress-http#readme","scripts":{},"versions":[{"number":"0.2.0","date":"2016-12-29T23:58:23.626Z"},{"number":"0.2.1","date":"2017-01-01T14:12:35.062Z"},{"number":"0.2.2","date":"2017-01-23T22:55:58.837Z"},{"number":"0.3.0","date":"2017-02-20T21:58:08.743Z"},{"number":"0.4.0","date":"2017-03-26T02:17:02.782Z"},{"number":"0.4.1","date":"2017-04-09T20:36:39.729Z"},{"number":"0.5.0","date":"2017-04-19T23:22:06.514Z"}],"readme":"# angular-progress-http\n\nA thin wrapper around Angular 2+ Http service that adds ability to work with upload/download progress\n\n### npm\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][npm-url]\n\n### build info\n[![Build Status](https://travis-ci.org/DarkXaHTeP/angular-progress-http.svg?branch=master)](https://travis-ci.org/DarkXaHTeP/angular-progress-http)\n\n## Usage\nImport HttpModule and ProgressHttpModule\n``` ts\nimport { NgModule } from \"@angular/core\";\nimport { HttpModule } from \"@angular/http\";\nimport { ProgressHttpModule } from \"angular-progress-http\";\n\n@NgModule({\n    imports: [\n        HttpModule,\n        ProgressHttpModule\n    ]\n})\nexport class AppModule {}\n```\nInject ProgressHttp into your component and you are ready to go.\nSee [API description below](#api-description) for available methods.\n``` ts\nimport {Component} from \"@angular/core\";\nimport { ProgressHttp } from \"angular-progress-http\";\n\n@Component({})\nexport class AppComponent {\n    constructor(private http: ProgressHttp) {\n        const form = new FormData();\n        form.append(\"data\", \"someValue or file\");\n\n        this.http\n            .withUploadProgressListener(progress => { console.log(`Uploading ${progress.percentage}%`); })\n            .withDownloadProgressListener(progress => { console.log(`Downloading ${progress.percentage}%`); })\n            .post(\"/fileUpload\", form)\n            .subscribe((response) => {\n                console.log(response)\n            })\n    }\n}\n```\n\n## Changelog\nv0.5.0\n* JavaScript files are included back into library after removing in 0.3.0\n* *.metadata.json files added to support Angular CLI\n* *.ts files are available from \"angular-progress-http/ts\" if needed\n\nv0.4.1\n* TypeScript warning fixed by PR [#4](https://github.com/DarkXaHTeP/angular-progress-http/pull/4)\n\nv0.4.0\n* Angular Http can now be replaced with custom Http implementation (see [Using custom HTTP implementations](#using-custom-http-implementations))\n* Test environment is set up\n* Examples are now compiled with AOT (Angular CLI app)\n* Angular 4.x.x allowed as peerDependency\n\nv0.3.0\n* Replaced .js files with .ts (resolves [#1](https://github.com/DarkXaHTeP/angular-progress-http/issues/1))\n\nv0.2.2\n\n* Added Travis CI for build and publishing to npm\n* Updated examples build\n\nv0.2.1\n\n* Readme updated with API description and examples\n\nv0.2.0\n\n* First public release\n* Contains service and ngModule for it\n* Example in \"examples\" folder\n\n## API description\n\nProgressHttp service extends Http service provided by Angular/Http which means that you get all of the Http methods including\n``` ts\nrequest(url: string | Request, options?: RequestOptionsArgs): Observable<Response>;\nget(url: string, options?: RequestOptionsArgs): Observable<Response>;\npost(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\n```\nand others.\n\nIn addition it provides two methods for handling progress:\n``` ts\nwithDownloadProgressListener(listener: (progress: Progress) => void): HttpWithDownloadProgressListener;\nwithUploadProgressListener(listener: (progress: Progress) => void): HttpWithUploadProgressListener;\n```\nThey both take callback as argument and return new instances of the service.\n\nThe interfaces returned from methods are described below:\n``` ts\ninterface HttpWithDownloadProgressListener extends Http {\n    withUploadProgressListener(listener: (progress: Progress) => void): Http;\n}\n\ninterface HttpWithUploadProgressListener extends Http {\n    withDownloadProgressListener(listener: (progress: Progress) => void): Http;\n}\n```\nTheir purpose is to make libary easier to use and add compile-time checks for method calls\n``` ts\nprogressHttp //can use http api or call withUploadProgressListener or withDownloadProgressListener\n    .withUploadProgressListener(progress => {}) //can use http api or call withDownloadProgressListener\n    .withDownloadProgressListener(progress => {}) //here and on lines below can only use http api\n    .post(\"/fileUpload\", form)\n    .subscribe((response) => {})\n```\nThis restriction is used to make sure that there are now repeating calls to add progress listeners that will overwrite previously assigned handlers and may confuse developer\n\nCalls to both methods are immutable (return new instances and do not change the internal state of the service), so you may do next things\n``` ts\nlet http1 = this.progressHttp.withUploadProgressListener(progress => { console.log(\"Uploading 1\") });\nlet http2 = this.progressHttp.withUploadProgressListener(progress => { console.log(\"Uploading 2\") });\nlet http3 = http1.withDownloadProgressListener(progress => { console.log(\"Downloading 1\") });\n```\nIn the code above http1 and http2 will have different upload listeners. http3 will have same upload listener as http1 and a download listener\n\nThis behavior may be useful when uploading multiple files simultaneously e.g.\n``` ts\nthis.files.forEach(f => {\n    const form = new FormData();\n    form.append(\"file\", f.file);\n\n    this.progressHttp\n        .withUploadProgressListener(progress => { f.percentage = progress.percentage; })\n        .post(\"/fileUpload\", form)\n        .subscribe((r) => {\n            f.uploaded = true;\n        })\n});\n```\n\n## Progress interface\nBoth upload and download progress listeners accept single argument that implements Progress interface\n``` ts\ninterface Progress {\n    event: ProgressEvent, //event emitted by XHR\n    lengthComputable: boolean, //if false percentage and total are undefined\n    percentage?: number, //percentage of work finished\n    loaded: number, //amount of data loaded in bytes\n    total?: number // amount of data total in bytes\n}\n```\n\n## How it works internally\nThe library tries to rely on Angular code as much as possible instead of reinventing the wheel.\n\nIt extends BrowserXhr class with logic that adds event listeners to XMLHttpRequest and executes progress listeners.\nOther parts that are responsible for http calls (Http, XhrConnection, XhrBackend) are used as is,\nwhich means that angular-progress-http will automatically receive fixes and new features from newer versions of angular/http\n\n## Using custom HTTP implementations\nIf you want to use custom Http service with progress you need to follow certain steps.\nLet's review them on example of [ng2-adal library](https://www.npmjs.com/package/ng2-adal) - a library for accessing APIs restricted by Azure AD.\n1. create factory class that will implement HttpFactory interface\n```ts\ninterface HttpFactory {\n    create<T extends Http>(backend: ConnectionBackend, requestOptions: RequestOptions): T;\n}\n```\nThis interface contains single method to create instances of class derived from Http.\nThe create method accepts ConnectionBackend and default RequestOptions which are always required for Http to make creation of factory easier.\n\nLet's examine AuthHttp (Http implementation from ng2-adal) constructor to understand what dependencies it has:\n```ts\nconstructor(http: Http, adalService: AdalService);\n```\nAs you can see, it needs an instance of http service and adalService to work properly.\nWith this knowledge we can now create the factory class.\n\nThe factory for ng2-adal is quite simple and will look next way:\n```ts\nimport { Injectable } from \"@angular/core\";\nimport { ConnectionBackend, RequestOptions } from \"@angular/http\";\nimport { AuthHttp, AdalService } from \"ng2-adal/core\";\nimport { HttpFactory, AngularHttpFactory } from \"angular-progress-http\";\n\n@Injectable()\nexport class AuthHttpFactory implements HttpFactory {\n  constructor(\n    private adalService: AdalService,\n    private angularHttpFactory\n  ) {}\n\n  public create(backend: ConnectionBackend, requestOptions: RequestOptions) {\n    const http = this.angularHttpFactory.create(backend, requestOptions);\n    return new AuthHttp(http, this.adalService);\n  }\n}\n\n```\n\n2. Register created factory as a provider in your application\n```ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { ProgressHttpModule, HTTP_FACTORY } from 'angular-progress-http';\nimport { AuthHttpModule } from \"ng2-adal/core\";\nimport { AuthHttpFactory } from \"./ng2-adal.http.factory.service\";\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    ProgressHttpModule,\n    AuthHttpModule\n  ],\n  providers: [\n    { provide: HTTP_FACTORY, useClass: AuthHttpFactory }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\nThat's it.\nNow each time when you will call methods of ProgressHttp it will use your custom http implementation internally and add progress listeners to it.\n\n\n## Building from sources\n1. Clone the repository to the local PC\n2. Run\n``` bash\nnpm install\nnpm run build\n```\n3. The built library can be found in \"build\" folder\n\n## Running tests\nTests are WIP. The instruction will be added after adding tests.\n\n## Running examples\n1. Make sure that you built library from sources as described [above](#building-from-sources)\n2. Navigate to examples/upload-download folder\n2. Run\n``` bash\nnpm install\nnpm start\n```\n4. Open browser on http://localhost:3000\n5. Choose some files (big size of the files will let you see the progress bar) and click upload\n6. Use throttling in Chrome dev tools to slow down network if progress jumps from 0 to 100 immediately\n\n## Сontribution\nFeel free to ask questions and post bugs/ideas in the issues, as well as send pull requests.\n\n### License: [MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/angular-progress-http.svg\n[npm-url]: https://npmjs.org/package/angular-progress-http\n[downloads-image]: https://img.shields.io/npm/dm/angular-progress-http.svg","created":"2016-12-29T23:58:23.626Z","modified":"2017-04-19T23:22:06.514Z","lastPublisher":{"name":"darkxahtep","email":"darkxahtep@gmail.com"},"owners":[{"name":"darkxahtep","email":"darkxahtep@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"angular-progress-http","_nodeVersion":"6.9.4","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/angular-progress-http-0.5.0.tgz_1492644125619_0.4768700294662267"},"_npmUser":{"name":"darkxahtep","email":"darkxahtep@gmail.com"},"_npmVersion":"3.10.10","_rev":"7-6eb8afc7d5674a7bcf4d9f6f97b0dcfd","_shasum":"49c5772a032fa4d4692248a6d43547b26da7b3f4","author":{"name":"DarkXaHTeP","email":"darkxahtep@gmail.com"},"bugs":{"url":"https://github.com/darkxahtep/angular-progress-http/issues"},"directories":{},"dist-tags":{"latest":"0.5.0"},"dist":{"shasum":"49c5772a032fa4d4692248a6d43547b26da7b3f4","tarball":"https://registry.npmjs.org/angular-progress-http/-/angular-progress-http-0.5.0.tgz"},"maintainers":[{"name":"darkxahtep","email":"darkxahtep@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-19T23:22:06.514Z","created":"2016-12-29T23:58:23.626Z","0.2.0":"2016-12-29T23:58:23.626Z","0.2.1":"2017-01-01T14:12:35.062Z","0.2.2":"2017-01-23T22:55:58.837Z","0.3.0":"2017-02-20T21:58:08.743Z","0.4.0":"2017-03-26T02:17:02.782Z","0.4.1":"2017-04-09T20:36:39.729Z","0.5.0":"2017-04-19T23:22:06.514Z"}}}