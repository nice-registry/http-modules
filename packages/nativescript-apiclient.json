{"name":"nativescript-apiclient","description":"NativeScript module for simply calling HTTP based APIs.","version":"3.0.0","nativescript":{"platforms":{"android":"3.0.0","ios":"3.0.0"}},"repository":"https://github.com/mkloubert/nativescript-apiclient","keywords":["NativeScript","API","HTTP","REST","JSON","XML"],"license":{"type":"MIT","url":"https://github.com/mkloubert/nativescript-apiclient/blob/master/LICENSE"},"homepage":"https://github.com/mkloubert/nativescript-apiclient","devDependencies":{"tns-core-modules":"^3.0.0","tns-platform-declarations":"^3.0.0","typescript":"^2.2.2"},"peerDependencies":{"tns-core-modules":"^3.0.0"},"scripts":{"postinstall":"tsc"},"versions":[{"number":"1.2.0","date":"2016-06-02T10:14:47.581Z"},{"number":"1.2.1","date":"2016-06-02T10:30:03.629Z"},{"number":"1.2.2","date":"2016-06-02T10:32:41.518Z"},{"number":"1.2.4","date":"2016-06-02T10:44:01.205Z"},{"number":"1.2.5","date":"2016-06-02T10:46:43.268Z"},{"number":"1.2.6","date":"2016-06-02T10:48:44.850Z"},{"number":"1.2.7","date":"2016-06-02T10:57:39.760Z"},{"number":"1.2.8","date":"2016-06-02T10:59:05.343Z"},{"number":"1.3.0","date":"2016-06-02T11:18:56.052Z"},{"number":"1.4.0","date":"2016-06-02T18:39:19.047Z"},{"number":"1.5.0","date":"2016-06-02T18:52:10.192Z"},{"number":"1.5.1","date":"2016-06-02T19:04:13.993Z"},{"number":"1.5.2","date":"2016-06-02T19:17:38.645Z"},{"number":"1.6.0","date":"2016-06-02T19:41:39.461Z"},{"number":"1.6.1","date":"2016-06-02T19:42:49.873Z"},{"number":"1.6.2","date":"2016-06-02T19:47:46.450Z"},{"number":"1.6.3","date":"2016-06-02T19:51:33.744Z"},{"number":"1.6.4","date":"2016-06-04T06:32:10.268Z"},{"number":"1.6.5","date":"2016-06-04T06:44:41.099Z"},{"number":"1.6.6","date":"2016-06-04T06:45:42.450Z"},{"number":"1.6.7","date":"2016-06-04T06:47:40.933Z"},{"number":"1.7.0","date":"2016-06-04T06:54:33.411Z"},{"number":"1.8.0","date":"2016-06-04T07:00:31.948Z"},{"number":"1.9.0","date":"2016-06-04T07:17:55.172Z"},{"number":"1.10.0","date":"2016-06-05T07:23:56.614Z"},{"number":"1.11.0","date":"2016-06-05T08:48:16.599Z"},{"number":"1.11.1","date":"2016-06-05T08:50:00.883Z"},{"number":"1.11.2","date":"2016-06-06T01:22:51.207Z"},{"number":"1.11.3","date":"2016-06-06T10:23:47.340Z"},{"number":"1.11.4","date":"2016-06-06T11:29:03.476Z"},{"number":"1.11.5","date":"2016-06-06T11:36:01.203Z"},{"number":"1.11.6","date":"2016-06-06T11:37:21.248Z"},{"number":"1.11.7","date":"2016-06-09T02:52:53.751Z"},{"number":"1.12.0","date":"2016-06-25T08:13:33.902Z"},{"number":"1.12.1","date":"2016-06-25T13:52:25.047Z"},{"number":"1.12.3","date":"2016-06-26T09:29:24.718Z"},{"number":"1.12.4","date":"2016-06-30T19:32:34.908Z"},{"number":"1.12.5","date":"2016-07-23T01:44:16.610Z"},{"number":"1.12.6","date":"2016-07-28T21:47:56.205Z"},{"number":"1.12.7","date":"2016-07-28T22:53:45.598Z"},{"number":"1.12.8","date":"2016-08-02T09:47:38.673Z"},{"number":"1.12.9","date":"2016-08-09T09:31:05.798Z"},{"number":"1.13.0","date":"2016-08-09T22:57:30.756Z"},{"number":"3.0.0","date":"2017-05-13T21:06:18.157Z"}],"readme":"[![npm](https://img.shields.io/npm/v/nativescript-apiclient.svg)](https://www.npmjs.com/package/nativescript-apiclient)\n[![npm](https://img.shields.io/npm/dt/nativescript-apiclient.svg?label=npm%20downloads)](https://www.npmjs.com/package/nativescript-apiclient)\n\n# NativeScript API Client\n\nA [NativeScript](https://nativescript.org/) module for simply calling HTTP based APIs.\n\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=G88PA3Q7FFSGN)\n\n## NativeScript Toolbox\n\nThis module is part of [nativescript-toolbox](https://github.com/mkloubert/nativescript-toolbox).\n\n## License\n\n[MIT license](https://raw.githubusercontent.com/mkloubert/nativescript-apiclient/master/LICENSE)\n\n## Platforms\n\n* Android\n* iOS\n\n## Installation\n\nRun\n\n```bash\ntns plugin add nativescript-apiclient\n```\n\ninside your app project to install the module.\n\n## Demo\n\nFor quick start have a look at the [plugin/index.ts](https://github.com/mkloubert/nativescript-apiclient/blob/master/plugin/index.ts) or use the \"IntelliSense\" of your IDE to learn how it works.\n\nOtherwise...\n\n## Usage\n\n### Import\n\n```typescript\nimport ApiClient = require(\"nativescript-apiclient\");\n```\n\n### Example\n\n```typescript\nimport ApiClient = require(\"nativescript-apiclient\");\nimport HTTP = require(\"http\");\n\ninterface IUser {\n    displayName?: string;\n    id?: number;\n    name?: string;\n}\n\nvar client = ApiClient.newClient({\n    baseUrl: \"https://api.example.com/users\",\n    route: \"{id}\",  \n});\n\nclient.beforeSend(function(opts: HTTP.HttpRequestOptions, tag: any) {\n                      console.log(\"Loading user: \" + tag);\n                      \n                      // prepare the request here\n                  })\n      .clientError(function(result: ApiClient.IApiClientResult) {\n                       // handle all responses with status code 400 to 499\n                   })\n      .serverError(function(result: ApiClient.IApiClientResult) {\n                       // handle all responses with status code 500 to 599\n                   })\n      .success(function(result: ApiClient.IApiClientResult) {\n                    // handle all responses with that were NOT\n                    // handled by 'clientError()' and 'serverError()'\n                    // \n                    // especially with status code less than 400 and greater than 599\n                    \n                    var user = result.getJSON<IUser>();\n               })\n      .error(function(err: ApiClient.IApiClientError) {\n                 // handle API client errors\n             })\n      .completed(function(ctx: ApiClient.IApiClientCompleteContext) {\n                     // invoked after \"result\" and \"error\" actions\n                 });\n\nvar credentials = new ApiClient.BasicAuth(\"Marcel\", \"p@ssword!\");\n\nfor (var userId = 1; userId <= 100; userId++) {\n    // start a GET request\n    // \n    // [GET]  https://api.example.com/users/{id}?ver=1.6.6.6\n    client.get({\n        authorizer: credentials,\n    \n        // request headers\n        headers: {\n            'X-MyHeader-TM': '5979',\n            'X-MyHeader-MK': '23979'\n        },\n        \n        // URL parameters\n        params: {\n            ver: '1.6.6.6'\n        },\n    \n        // route parameters\n        routeParams: {\n            id: userId.toString()  // {id}\n        },\n        \n        // global value for all callbacks \n        tag: userId\n    });\n}\n```\n\n## Routes\n\nRoutes are suffixes for a base URL.\n\nYou can define one or parameters inside that route, which are replaced when you start a request.\n\nIf you create a client like this\n\n```typescript\nvar client = ApiClient.newClient({\n    baseUrl: \"https://api.example.com/users\",\n    route: \"{id}/{resource}\",  \n});\n```\n\nand start a request like this\n\n```typescript\nclient.get({\n    routeParams: {\n        id: \"5979\",  // {id}\n        resource: \"profile\"  // {resource}\n    }\n});\n```\n\nthe client will call the URL\n\n```\n[GET]  https://api.example.com/users/5979/profile\n```\n\nParameter values can also be functions, what means that the value that is returned by that functions is used as value:\n\n```typescript\nvar getUserId = function() : string {\n    // load the user ID from somewhere\n};\n\nclient.get({\n    routeParams: {\n        id: getUserId,  // {id}\n        resource: \"profile\"  // {resource}\n    }\n});\n```\n\nA function must have the following structure:\n\n```typescript\nfunction (paramName: string, routeParams: any, match: string, formatExpr: string, funcDepth: string) : any {\n    return <THE-VALUE-TO-USE>;\n}\n```\n\n| Name | Description |\n| ---- | --------- |\n| paramName | The name of the parameter. For `{id}` this will be `id` |\n| routeParams | The list of submitted route parameters with their values. IMPORTANT: Keep sure to return strings as values! Otherwise you might have problems to convert the values to an URL part. |\n| match | The complete (unhandled) expression of the argument. |\n| formatExpr | The optional format expression of the argument. For `{id:number}` this will be `number`. |\n| funcDepth | This value is `0` at the beginning. If you return a function in that function again, this will increase until you stop to return a function. |\n\n### Formatting values\n\nFollowed by a `:` char a route parameter definition can additionally contain a \"format expression\".\n\nThese expressions can help you to parse and format parameter values.\n\nThe first step to do this is to define a so called \"format provider\" callback in a client:\n\n```typescript\nclient.addFormatProvider((ctx : ApiClient.IFormatProvider) => {\n    var toStringSafe = function() : string { \n        return ctx.value ? ctx.value.toString() : \"\";\n    };\n\n    if (ctx.expression === \"upper\") {    \n        ctx.handled = true;\n        return toStringSafe().toUpperCase();  // the new value\n    }\n    else if (ctx.expression === \"number\") {\n        var n = parseInt(toStringSafe().trim());\n        if (isNaN(n)) {\n            throw \"'\" + ctx.value + \"' is NOT a number!\";\n        }\n        \n        ctx.handled = true;\n        return n.toString();\n    }\n});\n```\n\nHere we defined the two expressions `upper` (convert to upper case chars) and `number` (keep sure to have a valid number).\n\nTo use them you can define a route like this:\n\n```\n{id:number}/{resource:upper}\n```\n\nNow if you setup your client\n\n```typescript\nvar client = ApiClient.newClient({\n    baseUrl: \"https://api.example.com/users\",\n    route: \"{id:number}/{resource:upper}\",  \n});\n```\n\nand start a request like this\n\n```typescript\nclient.get({\n    routeParams: {\n        id: \"5979\",\n        resource: \"profile\"\n    }\n});\n```\n\nthe client will call the URL\n\n```\n[GET]  https://api.example.com/users/5979/PROFILE\n```\n\nThe `ctx` object in the format provider call of `addFormatProvider()` has the following structure:\n\n```typescript\ninterface IFormatProviderContext {\n    /**\n     * Gets the format expression.\n     */\n    expression: string;\n    \n    /**\n     * Gets if the expression has been handled or not.\n     */\n    handled: boolean;\n    \n    /**\n     * Gets the underlying (unhandled) value.\n     */\n    value: any;\n}\n```\n\n## Authorization\n\nYou can submit an optional `IAuthorizer` object when you start a request:\n\n```typescript\ninterface IAuthorizer {\n    /**\n     * Prepares a HTTP request for authorization.\n     * \n     * @param {HTTP.HttpRequestOptions} reqOpts The request options.\n     */\n    prepare(reqOpts: HTTP.HttpRequestOptions);\n}\n```\n\nThe plugin provides the following implementations:\n\n### AggregateAuthorizer\n\n```typescript\nvar authorizer = new ApiClient.AggregateAuthorizer();\nauthorizer.addAuthorizers(new ApiClient.BasicAuth(\"Username\", \"Password\"),\n                          new ApiClient.BearerAuth(\"MySecretToken\"));\n```\n\n### BasicAuth\n\n```typescript\nvar authorizer = new ApiClient.BasicAuth(\"Username\", \"Password\");\n```\n\n### BearerAuth\n\n```typescript\nvar authorizer = new ApiClient.BearerAuth(\"MySecretToken\");\n```\n\n### OAuth\n\n```typescript\nvar authorizer = new ApiClient.OAuth(\"MySecretToken\");\nauthorizer.setField('oauth_field1', 'field1_value');\nauthorizer.setField('oauth_field2', 'field2_value');\n```\n\n### TwitterOAuth\n\n```typescript\nvar authorizer = new ApiClient.TwitterOAuth(\"<CONSUMER_KEY>\", \"<CONSUMER_SECRET>\",\n                                            \"<TOKEN>\", \"<TOKEN_SECRET>\");\n```\n\n## Requests\n\n### GET\n\n```typescript\n// ?TM=5979&MK=23979\nclient.get({\n    params: {\n        TM: '5979',\n        MK: '23979'\n    }\n});\n```\n\n### POST\n\n```typescript\nclient.post({\n    content: {\n        id: 5979,\n        name: \"Tanja\"\n    },\n    \n    type: ApiClient.HttpRequestType.JSON\n});\n```\n\n### PUT\n\n```typescript\nclient.put({\n    content: '<user><id>23979</id><name>Marcel</name></user>',\n    \n    type: ApiClient.HttpRequestType.XML\n});\n```\n\n### PATCH\n\n```typescript\nclient.patch({\n    content: '<user id=\"241279\"><name>Julia</name></user>',\n    \n    type: ApiClient.HttpRequestType.XML\n});\n```\n\n### DELETE\n\n```typescript\nclient.delete({\n    content: {\n        id: 221286\n    },\n    \n    type: ApiClient.HttpRequestType.JSON\n});\n```\n\n### Custom\n\n```typescript\nclient.request(\"FOO\", {\n    content: {\n        TM: 5979,\n        MK: 23979\n    },\n    \n    type: ApiClient.HttpRequestType.JSON\n});\n```\n\n## Logging\n\nIf you want to log inside your result / error callbacks, you must define one or more logger actions in a client:\n\n```typescript\nvar client = ApiClient.newClient({\n    baseUrl: \"https://example.com/users\",\n    route: \"{id}\",  \n});\n\nclient.addLogger(function(msg : ApiClient.ILogMessage) {\n    console.log(\"[\" + ApiClient.LogSource[msg.source] + \"]: \" + msg.message);\n});\n```\n\nEach action receives an object of the following type:\n\n```typescript\ninterface ILogMessage {\n    /**\n     * Gets the category.\n     */\n    category: LogCategory;\n    \n    /**\n     * Gets the message value.\n     */\n    message: any;\n    \n    /**\n     * Gets the priority.\n     */\n    priority: LogPriority;\n    \n    /**\n     * Gets the source.\n     */\n    source: LogSource;\n    \n    /**\n     * Gets the tag.\n     */\n    tag: string;\n    \n    /**\n     * Gets the timestamp.\n     */\n    time: Date;\n}\n```\n\nNow you can starts logging in your callbacks:\n\n```typescript\nclient.clientError(function(result : ApiClient.IApiClientResult) {\n                       result.warn(\"Client error: \" + result.code);\n                   })\n      .serverError(function(result : ApiClient.IApiClientResult) {\n                       result.err(\"Server error: \" + result.code);\n                   })\n      .success(function(result : ApiClient.IApiClientResult) {\n                    result.info(\"Success: \" + result.code);\n               })\n      .error(function(err : ApiClient.IApiClientError) {\n                 result.crit(\"API CLIENT ERROR!: \" + err.error);\n             })\n      .completed(function(ctx : ApiClient.IApiClientCompleteContext) {\n                     result.dbg(\"Completed action invoked.\");\n                 });\n```\n\nThe `IApiClientResult`, `IApiClientError` and `IApiClientCompleteContext` objects using the `ILogger` interface:\n\n```typescript\ninterface ILogger {\n    /**\n     * Logs an alert message.\n     * \n     * @param any msg The message value.\n     * @param {String} [tag] The optional tag value.\n     * @param {LogPriority} [priority] The optional log priority.\n     */\n    alert(msg : any, tag?: string,\n          priority?: LogPriority) : ILogger;\n    \n    /**\n     * Logs a critical message.\n     * \n     * @param any msg The message value.\n     * @param {String} [tag] The optional tag value.\n     * @param {LogPriority} [priority] The optional log priority.\n     */\n    crit(msg : any, tag?: string,\n         priority?: LogPriority) : ILogger;\n    \n    /**\n     * Logs a debug message.\n     * \n     * @param any msg The message value.\n     * @param {String} [tag] The optional tag value.\n     * @param {LogPriority} [priority] The optional log priority.\n     */\n    dbg(msg : any, tag?: string,\n        priority?: LogPriority) : ILogger;\n    \n    /**\n     * Logs an emergency message.\n     * \n     * @param any msg The message value.\n     * @param {String} [tag] The optional tag value.\n     * @param {LogPriority} [priority] The optional log priority.\n     */\n    emerg(msg : any, tag?: string,\n          priority?: LogPriority) : ILogger;\n    \n    /**\n     * Logs an error message.\n     * \n     * @param any msg The message value.\n     * @param {String} [tag] The optional tag value.\n     * @param {LogPriority} [priority] The optional log priority.\n     */\n    err(msg : any, tag?: string,\n        priority?: LogPriority) : ILogger;\n    \n    /**\n     * Logs an info message.\n     * \n     * @param any msg The message value.\n     * @param {String} [tag] The optional tag value.\n     * @param {LogPriority} [priority] The optional log priority.\n     */\n    info(msg : any, tag?: string,\n         priority?: LogPriority) : ILogger;\n    \n    /**\n     * Logs a message.\n     * \n     * @param any msg The message value.\n     * @param {String} [tag] The optional tag value.\n     * @param {LogCategory} [category] The optional log category. Default: LogCategory.Debug\n     * @param {LogPriority} [priority] The optional log priority.\n     */\n    log(msg : any, tag?: string,\n        category?: LogCategory, priority?: LogPriority) : ILogger;\n    \n    /**\n     * Logs a notice message.\n     * \n     * @param any msg The message value.\n     * @param {String} [tag] The optional tag value.\n     * @param {LogPriority} [priority] The optional log priority.\n     */\n    note(msg : any, tag?: string,\n         priority?: LogPriority) : ILogger;\n     \n    /**\n     * Logs a trace message.\n     * \n     * @param any msg The message value.\n     * @param {String} [tag] The optional tag value.\n     * @param {LogPriority} [priority] The optional log priority.\n     */\n    trace(msg : any, tag?: string,\n          priority?: LogPriority) : ILogger;\n        \n    /**\n     * Logs a warning message.\n     * \n     * @param any msg The message value.\n     * @param {String} [tag] The optional tag value.\n     * @param {LogPriority} [priority] The optional log priority.\n     */\n    warn(msg : any, tag?: string,\n         priority?: LogPriority) : ILogger;\n}\n```\n\n## URL parameters\n\nYou can befine additional parameters for the URL.\n\nIf you create a client like this\n\n```typescript\nvar client = ApiClient.newClient({\n    baseUrl: \"https://api.example.com/users\"\n});\n```\n\nand start a request like this\n\n```typescript\nclient.get({\n    params: {\n        id: '23979',\n        resource: \"profile\"\n    }\n});\n```\n\nThe client will call the URL\n\n```\n[GET]  https://api.example.com/users?id=23979&resource=profile\n```\n\nLike route parameters you can also use functions for defining URL parameters:\n\n```typescript\nvar getUserId = function() : string {\n    // load the user ID from somewhere\n};\n\nclient.get({\n    params: {\n        id: getUserId,  // {id}\n        resource: \"profile\"  // {resource}\n    }\n});\n```\n\nA function must have the following structure:\n\n```typescript\nfunction (paramName: string, index: number, funcDepth: string) : any {\n    return <THE-VALUE-TO-USE>;\n}\n```\n\n| Name | Description |\n| ---- | --------- |\n| paramName | The name of the parameter. For `{id}` this will be `id` |\n| index | The zero based index of the handled URL parameter. |\n| funcDepth | This value is `0` at the beginning. If you return a function in that function again, this will increase until you stop to return a function. |\n\nIMPORTANT: It is also recommended to use / return strings a parameter values to prevent problems when converting the values to an URL string.\n\n## Responses\n\n### Callbacks\n\n#### Simple\n\n```typescript\nclient.success(function(result : ApiClient.IApiClientResult) {\n                    // handle any response\n               });\n```\n\nThe `result` object has the following structure:\n\n```typescript\ninterface IApiClientResult extends ILogger {\n    /**\n     * Gets the underlying API client.\n     */\n    client: IApiClient;\n\n    /**\n     * Gets the HTTP response code.\n     */\n    code: number;\n    \n    /**\n     * Gets the raw content.\n     */\n    content: any;\n    \n    /**\n     * Gets the underlying (execution) context.\n     */\n    context: ApiClientResultContext;\n    \n    /**\n     * Gets the response headers.\n     */\n    headers: HTTP.Headers;\n    \n    /**\n     * Returns the content as wrapped AJAX result object.\n     * \n     * @return {IAjaxResult<TData>} The ajax result object.\n     */\n    getAjaxResult<TData>() : IAjaxResult<TData>;\n    \n    /**\n     * Returns the content as file.\n     * \n     * @param {String} [destFile] The custom path of the destination file.\n     * \n     * @return {FileSystem.File} The file.\n     */\n    getFile(destFile?: string) : FileSystem.File;\n    \n    /**\n     * Tries result the content as image source.\n     */\n    getImage(): Promise<Image.ImageSource>;\n    \n    /**\n     * Returns the content as JSON object.\n     */\n    getJSON<T>() : T;\n    \n    /**\n     * Returns the content as string.\n     */\n    getString() : string;\n    \n    /**\n     * Gets the information about the request.\n     */\n    request: IHttpRequest;\n    \n    /**\n     * Gets the raw response.\n     */\n    response: HTTP.HttpResponse;\n}\n```\n\n#### Errors\n\n```typescript\nclient.error(function(err : ApiClient.IApiClientError) {\n                 // handle an HTTP client error here\n             });\n```\n\nThe `err` object has the following structure:\n\n```typescript\ninterface IApiClientError extends ILogger {\n    /**\n     * Gets the underlying client.\n     */\n    client: IApiClient;\n    \n    /**\n     * Gets the context.\n     */\n    context: ApiClientErrorContext;\n    \n    /**\n     * Gets the error data.\n     */\n    error: any;\n    \n    /**\n     * Gets or sets if error has been handled or not.\n     */\n    handled: boolean;\n    \n    /**\n     * Gets the information about the request.\n     */\n    request: IHttpRequest;\n}\n```\n\n#### Conditional callbacks\n\nYou can define callbacks for any kind of conditions.\n\nA generic way to do this is to use the `if()` method:\n\n```javascript\nclient.if(function(result : IApiClientResult) : boolean {\n              // invoke if 'X-My-Custom-Header' is defined\n              return undefined !== result.headers[\"X-My-Custom-Header\"];\n          },\n          function(result : IApiClientResult) {\n              // handle the response\n          });\n```\n\nIf no condition matches, the callback defined by `success()` method is used.\n\nFor specific status codes you can use the `ifStatus()` method:\n\n```javascript\nclient.ifStatus((statusCode) => statusCode === 500,\n                function(result : IApiClientResult) {\n                    // handle the internal server error\n                });\n```\n\nOr shorter:\n\n```javascript\nclient.status(500,\n              function(result : IApiClientResult) {\n                  // handle the internal server error\n              });\n```\n\n##### Short hand callbacks\n\n```typescript\nclient.clientError(function(result : ApiClient.IApiClientResult) {\n                       // handle status codes between 400 and 499\n                   });\n                   \nclient.ok(function(result : ApiClient.IApiClientResult) {\n                       // handle status codes with 200, 204 or 205\n                   });\n                   \nclient.serverError(function(result : ApiClient.IApiClientResult) {\n                       // handle status codes between 500 and 599\n                   });\n```\n\nThe following methods are also supported:\n\n| Name | Description |\n| ---- | --------- |\n| badGateway | Handles a request with status code `502`.  |\n| badRequest | Handles a request with status code `400`. |\n| clientOrServerError | Handles a request with a status code between `400` and `599`. |\n| conflict | Handles a request with status code `409`. |\n| forbidden | Handles a request with status code `403`. |\n| gatewayTimeout | Handles a request with status code `504`. |\n| gone | Handles a request with status code `410`. |\n| informational | Handles a request with a status code between `100` and `199`. |\n| insufficientStorage | Handles a request with status code `507`. |\n| internalServerError | Handles a request with status code `500`. |\n| locked | Handles a request with status code `423`. |\n| methodNotAllowed | Handles a request with status code `405`. |\n| notFound | Handles a request with status code `404`. |\n| notImplemented | Handles a request with status code `501`. |\n| partialContent | Handles a request with status code `206`. |\n| payloadTooLarge | Handles a request with status code `413`. |\n| redirection | Handles a request with a status code between `300` and `399`. |\n| serviceUnavailable | Handles a request with status code `503`. |\n| succeededRequest | Handles a request with a status code between `200` and `299`. |\n| tooManyRequests | Handles a request with status code `429`. |\n| unauthorized | Handles a request with status code `401`. |\n| unsupportedMediaType | Handles a request with status code `415`. |\n| uriTooLong | Handles a request with status code `414`. |\n","starsCount":2,"created":"2016-06-02T10:14:47.581Z","modified":"2017-05-13T21:06:18.157Z","lastPublisher":{"name":"mkloubert","email":"marcel.kloubert@gmx.net"},"owners":[{"name":"mkloubert","email":"marcel.kloubert@gmx.net"}],"other":{"_attachments":{},"_from":".","_id":"nativescript-apiclient","_nodeVersion":"7.5.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/nativescript-apiclient-3.0.0.tgz_1494709576744_0.4594534959178418"},"_npmUser":{"name":"mkloubert","email":"marcel.kloubert@gmx.net"},"_npmVersion":"4.2.0","_rev":"2-287086cbe03dc167e36cce54ab9fb28d","_shasum":"355c778627ac0ceaaf79b218d7dd6247ec2a8e59","author":{"name":"Marcel Joachim Kloubert","email":"marcel.kloubert@gmx.net"},"bugs":{"url":"https://github.com/mkloubert/nativescript-apiclient/issues"},"directories":{},"dist-tags":{"latest":"3.0.0"},"dist":{"shasum":"355c778627ac0ceaaf79b218d7dd6247ec2a8e59","tarball":"https://registry.npmjs.org/nativescript-apiclient/-/nativescript-apiclient-3.0.0.tgz"},"maintainers":[{"name":"mkloubert","email":"marcel.kloubert@gmx.net"}],"readmeFilename":"README.md","time":{"modified":"2017-05-13T21:06:18.157Z","created":"2016-06-02T10:14:47.581Z","1.2.0":"2016-06-02T10:14:47.581Z","1.2.1":"2016-06-02T10:30:03.629Z","1.2.2":"2016-06-02T10:32:41.518Z","1.2.4":"2016-06-02T10:44:01.205Z","1.2.5":"2016-06-02T10:46:43.268Z","1.2.6":"2016-06-02T10:48:44.850Z","1.2.7":"2016-06-02T10:57:39.760Z","1.2.8":"2016-06-02T10:59:05.343Z","1.3.0":"2016-06-02T11:18:56.052Z","1.4.0":"2016-06-02T18:39:19.047Z","1.5.0":"2016-06-02T18:52:10.192Z","1.5.1":"2016-06-02T19:04:13.993Z","1.5.2":"2016-06-02T19:17:38.645Z","1.6.0":"2016-06-02T19:41:39.461Z","1.6.1":"2016-06-02T19:42:49.873Z","1.6.2":"2016-06-02T19:47:46.450Z","1.6.3":"2016-06-02T19:51:33.744Z","1.6.4":"2016-06-04T06:32:10.268Z","1.6.5":"2016-06-04T06:44:41.099Z","1.6.6":"2016-06-04T06:45:42.450Z","1.6.7":"2016-06-04T06:47:40.933Z","1.7.0":"2016-06-04T06:54:33.411Z","1.8.0":"2016-06-04T07:00:31.948Z","1.9.0":"2016-06-04T07:17:55.172Z","1.10.0":"2016-06-05T07:23:56.614Z","1.11.0":"2016-06-05T08:48:16.599Z","1.11.1":"2016-06-05T08:50:00.883Z","1.11.2":"2016-06-06T01:22:51.207Z","1.11.3":"2016-06-06T10:23:47.340Z","1.11.4":"2016-06-06T11:29:03.476Z","1.11.5":"2016-06-06T11:36:01.203Z","1.11.6":"2016-06-06T11:37:21.248Z","1.11.7":"2016-06-09T02:52:53.751Z","1.12.0":"2016-06-25T08:13:33.902Z","1.12.1":"2016-06-25T13:52:25.047Z","1.12.3":"2016-06-26T09:29:24.718Z","1.12.4":"2016-06-30T19:32:34.908Z","1.12.5":"2016-07-23T01:44:16.610Z","1.12.6":"2016-07-28T21:47:56.205Z","1.12.7":"2016-07-28T22:53:45.598Z","1.12.8":"2016-08-02T09:47:38.673Z","1.12.9":"2016-08-09T09:31:05.798Z","1.13.0":"2016-08-09T22:57:30.756Z","3.0.0":"2017-05-13T21:06:18.157Z"},"users":{"wenhsiaoyi":true,"fadihania":true}}}