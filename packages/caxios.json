{"name":"caxios","version":"2.1.3","description":"Consistent Axios - general purpose HTTP request library","main":"index.js","repository":"https://github.com/pawelt/caxios","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["HTTP","request","ajax","universal"],"license":"MIT","dependencies":{"axios":"^0.16.1"},"gitHead":"f5ac3aea0558aff7a88bc9094a9fd7045bc54f72","homepage":"https://github.com/pawelt/caxios#readme","versions":[{"number":"1.0.0","date":"2017-04-28T19:21:09.074Z"},{"number":"2.0.0","date":"2017-05-01T12:00:34.780Z"},{"number":"2.0.1","date":"2017-05-01T12:20:16.344Z"},{"number":"2.1.1","date":"2017-05-03T19:32:40.316Z"},{"number":"2.1.2","date":"2017-05-08T15:04:48.697Z"},{"number":"2.1.3","date":"2017-05-11T11:51:23.430Z"}],"readme":"# Caxios.\n\nGeneral purpose HTTP request library with consistent behaviour.\n\nWorks in node.js and in the browser.\n\nIt is 100% [Axios](https://github.com/mzabriskie/axios) compatible, with some extra defaults and features.\n\n\n## Installation\n\n`npm install caxios`\n\nand then\n\n```js\nconst { getJSON, postJSON } = require('caxios');\n\n// basic data fetching\ngetJSON('/api/data').then(res => console.log(res.data));\n\n// posting JSON data (for ex.: a form) and handling server-side validation\npostJSON('/api/data', { some: 'values', in: 'here' })\n    .then(res => console.log(res.data))\n    .catch(err => err.isValidation() \n        // catch stats code 422 (used for validation errors)\n        ? console.log('Validation errors:', err.response.data)\n        : console.log('Some other error', err)\n    )\n```\n\n\n## Defaults\n\n**Caxios** uses the following defaults:\n\n- request timeout = 3 seconds (by default **Axios** uses infinity)\n- `post`, `put` and `patch` methods send `Content-Type: application/json` header (by default **Axios** sends `Content-Type: application/x-www-form-urlencoded`)\n- all utility functions with with JSON suffix (`getJSON`,  `postJSON`,  `putJSON`,  `delJSON`) send `Accept: application/json` header (by default **Axios** sends `application/json, text/plain, */*` for all requests)\n\n**Caxios** does NOT modify the global `axios` instance.\n\n\n## Features\n\nWhile **Axios** is an excellent library, its default behaviour may not be ideal. **Caxios** aims to address this by introducing the following features:\n\n  - easier and consistent error handling\n  - utility functions for making requests that accept only JSON responses\n  - support for HTTP status code `422` - `Unprocessable Entity` (used for validation errors)\n  - support for malformed JSON response handling\n\nRejected request error objects are extended with additional methods:\n\n  - `isFormat()`     - true if the client expected JSON response, but server returned malformed JSON\n  - `isCancel()`     - true if the request was cancelled by the client\n  - `isNetwork()`    - true for any network error (timeout, server unavailable, CORS etc.)\n  - `isValidation()` - true if response `status` == `422` (used for validation errors)\n\nThese error types are mutually exclusive, so only one of those methods returns true for any error.\n\n\n## Examples\n\n### Send a request that accepts only `application/json` responses\n\n```js\nconst { getJSON } = require('caxios');\ngetJSON('/some/data') \n\n// Axios \naxios.get('/some/data', { headers: { 'Accept': 'application/json' } }) \n```\n\n\n### Easier cancel token passing\n\n```js\nconst { getJSON, makeCancelSource } = require('caxios');\nconst cancelSource = makeCancelSource();\ncancelSource.cancel();\n\ngetJSON('/some/data',  { cancelSource })\n    .catch(err => console.log(err.isCancel())); // true\n\n// Axios \naxios.get('/some/data', { cancelToken: cancelSource.token })\n    .catch(err => console.log(axios.isCancel(err))); // true\n```\n\n\n### Easy error handling\n\n```js\ngetJSON('http://no-such-address.com')\n    .catch(err => {\n        console.log(err.isCancel());  // false\n        console.log(err.isNetwork()); // true\n    }); \n\n// Axios \naxios.get('http://no-such-address.com')\n    .catch(err => {\n        console.log(axios.isCancel(err));                   // false\n        console.log(!axios.isCancel(err) && !err.response); // true\n    }); \n```\n\n### Consistent JSON response format error handling\n\n```js\ngetJSON('/returns/non-json-response')\n    .catch(err => {\n        console.log(err.isFormat());  // true\n        console.log(err.message);     // JSON parsing error message\n    }); \n\n// Axios swallows JSON parsing errors, so you have to\n// manually verify response format in the successful response handler\n```\n\n\n### Special case for validation errors (422 HTTP status code)\n\n```js\ngetJSON('/this/returns/422')\n     .catch(err => {\n         console.log(err.response.status); // 422\n         console.log(err.isValidation());  // true\n         console.log(err.response.data);   // validation errors passed in response body\n     });\n```\n","created":"2017-04-28T19:21:09.074Z","modified":"2017-05-11T11:51:23.430Z","lastPublisher":{"name":"pawelt","email":"﻿﻿pawelt9000@gmail.com"},"owners":[{"name":"pawelt","email":"﻿﻿pawelt9000@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"caxios","_nodeVersion":"7.9.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/caxios-2.1.3.tgz_1494503481575_0.16895157168619335"},"_npmUser":{"name":"pawelt","email":"﻿﻿pawelt9000@gmail.com"},"_npmVersion":"4.6.1","_rev":"6-4ff7f1634692dcbad49fe662f10808e4","_shasum":"97629464e93acf71c3ea083a33e2507ee6563e80","author":{"name":"Pawel Turlejski"},"bugs":{"url":"https://github.com/pawelt/caxios/issues"},"directories":{},"dist-tags":{"latest":"2.1.3"},"dist":{"shasum":"97629464e93acf71c3ea083a33e2507ee6563e80","tarball":"https://registry.npmjs.org/caxios/-/caxios-2.1.3.tgz"},"maintainers":[{"name":"pawelt","email":"﻿﻿pawelt9000@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-11T11:51:23.430Z","created":"2017-04-28T19:21:09.074Z","1.0.0":"2017-04-28T19:21:09.074Z","2.0.0":"2017-05-01T12:00:34.780Z","2.0.1":"2017-05-01T12:20:16.344Z","2.1.1":"2017-05-03T19:32:40.316Z","2.1.2":"2017-05-08T15:04:48.697Z","2.1.3":"2017-05-11T11:51:23.430Z"}}}