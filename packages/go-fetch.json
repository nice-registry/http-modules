{"name":"go-fetch","version":"3.1.1","description":"A pluggable HTTP client.","keywords":["http","https","request","response","client","fetch","get","post","plugin","middleware","promise"],"main":"./lib/Client.js","repository":"https://github.com/go-fetch-js/go-fetch","dependencies":{"is-stream":"^1.0.1","no-frills-request":"^1.1.0"},"devDependencies":{"chai":"^3.5.0","go-fetch-json":"^1.1.0","mocha":"^2.4.5","simple-server-setup":"^0.2.0","streamifier":"^0.1.1"},"scripts":{"test:unit":"mocha --require ./tests/setup.js ./lib/**/*.test.js","test:integration":"mocha --require ./tests/setup.js ./tests/**/*.test.js","test":"npm run test:unit && npm run test:integration","prepublish":"npm run test"},"license":"MIT","gitHead":"dab51ac7917238b75b9fe2f198b1027f5137fea9","homepage":"https://github.com/go-fetch-js/go-fetch#readme","versions":[{"number":"0.0.1","date":"2015-01-17T02:08:52.169Z"},{"number":"0.0.2","date":"2015-01-17T02:19:57.929Z"},{"number":"0.1.0","date":"2015-01-17T18:27:41.007Z"},{"number":"0.1.1","date":"2015-01-17T18:51:26.634Z"},{"number":"0.2.1","date":"2015-01-19T15:04:13.586Z"},{"number":"0.2.2","date":"2015-01-19T18:29:34.044Z"},{"number":"0.2.3","date":"2015-01-19T18:44:52.347Z"},{"number":"0.2.4","date":"2015-01-20T09:01:04.923Z"},{"number":"1.0.0","date":"2015-01-21T17:46:35.671Z"},{"number":"1.0.1","date":"2015-01-21T18:29:09.474Z"},{"number":"1.0.3","date":"2015-01-25T01:04:14.034Z"},{"number":"1.0.4","date":"2015-01-25T21:47:10.619Z"},{"number":"1.1.0","date":"2015-01-25T23:05:20.550Z"},{"number":"1.2.0","date":"2015-01-28T07:45:36.057Z"},{"number":"2.0.0","date":"2015-02-03T13:32:54.468Z"},{"number":"2.0.1","date":"2015-02-03T13:46:13.559Z"},{"number":"2.0.2","date":"2015-02-03T15:18:29.657Z"},{"number":"2.0.3","date":"2015-02-14T03:03:02.482Z"},{"number":"2.0.4","date":"2015-02-23T14:09:57.960Z"},{"number":"2.0.5","date":"2015-02-24T11:44:44.804Z"},{"number":"2.1.0","date":"2015-05-18T09:18:45.316Z"},{"number":"2.2.0","date":"2015-11-02T07:37:47.056Z"},{"number":"3.0.0","date":"2016-03-11T13:44:04.755Z"},{"number":"3.0.1","date":"2016-03-15T10:39:32.583Z"},{"number":"3.1.0","date":"2016-04-12T12:36:45.536Z"},{"number":"3.1.1","date":"2016-04-12T21:55:32.331Z"}],"readme":"# go-fetch\n\n[![Build Status](https://travis-ci.org/go-fetch-js/go-fetch.svg?branch=master)](https://travis-ci.org/go-fetch-js/go-fetch)\n\nA pluggable HTTP client for Node.JS.\n\n`go-fetch` boasts a simple API but supports many features through plugins.\n\n**Features:**\n\n- Support for `HTTP` and `HTTPS` protocols\n- Support for streaming\n- Pluggable API with plugins for:\n    - following redirects\n    - compression\n    - authentication\n    - working with JSON\n    - ...and lots more\n\n## Installation\n\n    npm install --save go-fetch\n\n## Usage\n    \n### GET\n    \n```javascript\n\nconst Client = require('go-fetch');\nconst json = require('go-fetch-json');\n\nnew Client()\n  .use(json())\n  .get('http://httpbin.org/get')\n    .then(res => {\n      console.log(res.toString());\n      return res.json();\n    })\n    .then(json => console.log(json))\n    .catch(err => console.error(err.stack))\n;\n\n```\n\n### POST\n\n```javascript\n\nconst Client = require('go-fetch');\nconst json = require('go-fetch-json');\n\nnew Client()\n  .use(json())\n  .post('http://httpbin.org/post', {msg: 'Go fetch!'})\n    .then(res => {\n      console.log(res.toString());\n      return res.json();\n    })\n    .then(json => console.log(json))\n    .catch(err => console.error(err.stack))\n;\n\n```\n\n## API\n\n### Client\n\nA HTTP client.\n\n\n```\nnew Client([options : object])\n```\n\nCreate a new `HTTP` client.\n\n**Options:**\n\n```\n.use(plugin : function) : Client\n```\n\nExtend the functionality with a plugin.\n\n**Parameters:**\n\n- `plugin` Required. A plugin function.\n\n**Returns:**\n\nThe client.\n\n```\n.before(middleware : function) : Client\n```\n\nExtend the functionality with a middleware function which is run before a request is sent.\n\n**Parameters:**\n\n- `middleware` Required. A middleware function.\n\n**Returns:**\n\nThe client.\n\n```\n.after(middleware : function) : Client\n```\n\nExtend the functionality with a middleware function which is run after a request is sent.\n\n**Parameters:**\n\n- `middleware` Required. A middleware function.\n\n**Returns:**\n\nThe client.\n\n```\n.get(url : string, [headers : object]) : Promise\n```\n\nSend a `HTTP` `GET` request.\n\n**Parameters:**\n\n- `url` Required. The request URL.\n- `headers` Optional. The request headers. An object containing key-value pairs.\n\n**Returns:**\n\nA `Promise`. Resolves with a `Response`. Rejects with an `Error`.\n\n```\n.post(url : string, [headers : object], [body : *]) : Promise\n```\n\nSend a `HTTP` `POST` request.\n\n**Parameters:**\n\n- `url` Required. The request URL.\n- `headers` Optional. The request headers. An object containing key-value pairs.\n- `body` Optional. The request body. May be a string or a stream.\n\n**Returns:**\n\nA `Promise`. Resolves with a `Response`. Rejects with an `Error`.\n\n```\n.put(url : string, [headers : object], [body : *]) : Promise\n```\n\nSend a `HTTP` `PUT` request.\n\n**Parameters:**\n\n- `url` Required. The request URL.\n- `headers` Optional. The request headers. An object containing key-value pairs.\n- `body` Optional. The request body. May be a string or a stream.\n\n**Returns:**\n\nA `Promise`. Resolves with a `Response`. Rejects with an `Error`.\n\n```\n.delete(url : string, [headers : object]) : Promise\n```\n\nSend a `HTTP` `DELETE` request.\n\n**Parameters:**\n\n- `url` Required. The request URL.\n- `headers` Optional. The request headers. An object containing key-value pairs.\n\n**Returns:**\n\nA `Promise`. Resolves with a `Response`. Rejects with an `Error`.\n\n```\n.request(method : string, url : string, [headers : object], [body : *]) : Promise\n```\n\nSend a `HTTP` request.\n\n**Parameters:**\n\n- `method` Required. The request method.\n- `url` Required. The request URL.\n- `headers` Optional. The request headers. An object containing key-value pairs.\n- `body` Optional. The request body. May be a string or a stream.\n\n**Returns:**\n\nA `Promise`. Resolves with a `Response`. Rejects with an `Error`.\n\n### Request\n\nA HTTP request.\n\n```\nnew Request([options : object])\n```\n\nCreate a new request.\n\n**Options:**\n\n- `method` Required. The request method.\n- `url` Required. The request URL.\n- `headers` Optional. The request headers. An object containing key-value pairs.\n- `body` Optional. The request body. May be a string or a stream.\n\n```\n.method : string\n```\n\nThe request method.\n\n```\n.url : string\n```\n\nThe request URL.\n\n```\n.headers : object\n```\n\nThe request headers. An object containing key-value pairs.\n\n```\n.body : *\n```\n\nThe request body. May be a string or a stream.\n\n### Response\n\nA HTTP response.\n\n```\nnew Response([options : object])\n```\n\nCreate a new request.\n\n**Options:**\n\n- `status` Required. The request method.\n- `url` Required. The request URL.\n- `headers` Optional. The request headers. An object containing key-value pairs.\n- `body` Optional. The request body. May be a string or a stream.\n\n```\n.status : number\n```\n\nThe response stats.\n\n```\n.reason : string\n```\n\nThe response reason.\n\n```\n.headers : object\n```\n\nThe response headers. An object containing key-value pairs.\n\n```\n.body : *\n```\n\nThe response body. May be a string or a stream. Usually a stream.\n\n```\n.text(encoding : string) : Promise\n```\n\nRead the response body into a string.\n\n**Returns:**\n\nA `Promise`. Resolves with a `string`. Rejects with an `Error`.\n\n\n## Plugins and Middleware\n\nPlugin functions are simple functions that take a client instance and do something with it. Plugin functions are called when they are `.use()`d.\n\nMiddleware functions are simple functions that take a `Request` or `Response` object and a `next()` callback as parameters, and does something with them. e.g. add helper methods to the `Request` or `Response` objects, modify the headers or body sent or retreived from the server.\n\n### Example\n\nHere's an example plugin that adds a `.error()` method to the `Response` for asserting whether an error occurred with the request.\n\n```javascript\nfunction plugin(client) {\n  client.after((res, next) => {\n    res.error = () =>\n      this.status >= 400 && this.status < 600\n    ;\n    next(null, res);\n  });\n}\n````\n\n### [prefix-url](https://www.npmjs.com/package/go-fetch-prefix-url)\n\nPrefix each request URL with another URL.\n\n### [content-type](https://www.npmjs.com/package/go-fetch-content-type)\n\nParse the Content-Type header.\n\n### [parse-body](https://www.npmjs.com/package/go-fetch-parse-body)\n\nConcatenate and parse the response stream.\n\n### [auth](https://www.npmjs.com/package/go-fetch-auth)\n\nBasic HTTP auth.\n\n### [oauth1](https://www.npmjs.com/package/go-fetch-oauth1)\n\nOAuth v1 authentication.\n\n### [follow-redirects](https://www.npmjs.com/package/go-fetch-follow-redirects)\n\nAutomatically follow redirects.\n\n### [decompress](https://www.npmjs.com/package/go-fetch-decompress)\n\nDecompress response bodies compressed with gzip.\n\n### [useragent](https://www.npmjs.com/package/go-fetch-useragent)\n\nAdd a User-Agent header to every request.\n\n## Changelog\n\n### v3.1.0\n\n- add: middleware can short-circuit the request to return a staged response\n- break: middleware can no longer be synchronous, they must call `next()` - don't think anyone else will be using sync (its a bit ambiguous) but the tests were\n\n### v3.0.0\n\nAlmost a total rewrite.\n\n- break: use promises instead of events and callbacks\n- break: use middleware instead of events for plugins\n- break: use simplified `Request` and `Response` objects\n\n### v2.0.0\n\n - moved `prefixUrl`, `contentType` and `body` plugins into their own repositories\n - changed the arguments passed to the `before` and `after` event handlers - handlers now receive a formal event object that allows propagation to be stopped and the request to be prevented\n - adding some tests\n - cleaning up documentation\n\n## To do\n\n- Moar tests\n- Plugins:\n    - Cookie Jar\n- Support for XMLHttpRequest/fetch in the browser\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2016 James Newell","created":"2015-01-17T02:08:52.169Z","modified":"2016-04-12T21:55:32.331Z","lastPublisher":{"name":"jameslnewell","email":"james@digitaledgeit.com.au"},"owners":[{"name":"jameslnewell","email":"james@digitaledgeit.com.au"}],"other":{"_attachments":{},"_from":".","_id":"go-fetch","_nodeVersion":"5.1.1","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/go-fetch-3.1.1.tgz_1460498129212_0.1448202789761126"},"_npmUser":{"name":"jameslnewell","email":"james@digitaledgeit.com.au"},"_npmVersion":"3.7.3","_rev":"1-a712f9a93a4870902e0a9ce1e6f680aa","_shasum":"ab5bd82f2b7a8debec0074bd2e823a37b24db453","bugs":{"url":"https://github.com/go-fetch-js/go-fetch/issues"},"directories":{},"dist-tags":{"latest":"3.1.1","next":"3.1.0"},"dist":{"shasum":"ab5bd82f2b7a8debec0074bd2e823a37b24db453","tarball":"http://registry.npmjs.org/go-fetch/-/go-fetch-3.1.1.tgz"},"maintainers":[{"name":"jameslnewell","email":"james@digitaledgeit.com.au"}],"readmeFilename":"README.md","time":{"modified":"2016-04-12T21:55:32.331Z","created":"2015-01-17T02:08:52.169Z","0.0.1":"2015-01-17T02:08:52.169Z","0.0.2":"2015-01-17T02:19:57.929Z","0.1.0":"2015-01-17T18:27:41.007Z","0.1.1":"2015-01-17T18:51:26.634Z","0.2.1":"2015-01-19T15:04:13.586Z","0.2.2":"2015-01-19T18:29:34.044Z","0.2.3":"2015-01-19T18:44:52.347Z","0.2.4":"2015-01-20T09:01:04.923Z","1.0.0":"2015-01-21T17:46:35.671Z","1.0.1":"2015-01-21T18:29:09.474Z","1.0.3":"2015-01-25T01:04:14.034Z","1.0.4":"2015-01-25T21:47:10.619Z","1.1.0":"2015-01-25T23:05:20.550Z","1.2.0":"2015-01-28T07:45:36.057Z","2.0.0":"2015-02-03T13:32:54.468Z","2.0.1":"2015-02-03T13:46:13.559Z","2.0.2":"2015-02-03T15:18:29.657Z","2.0.3":"2015-02-14T03:03:02.482Z","2.0.4":"2015-02-23T14:09:57.960Z","2.0.5":"2015-02-24T11:44:44.804Z","2.1.0":"2015-05-18T09:18:45.316Z","2.2.0":"2015-11-02T07:37:47.056Z","3.0.0":"2016-03-11T13:44:04.755Z","3.0.1":"2016-03-15T10:39:32.583Z","3.1.0":"2016-04-12T12:36:45.536Z","3.1.1":"2016-04-12T21:55:32.331Z"}}}