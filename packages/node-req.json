{"name":"node-req","version":"2.0.1","description":"I/O parser for nodejs http request","main":"index.js","scripts":{"lint":"standard","pretest":"npm run lint","posttest":"npm run coverage","test:local":"FORCE_COLOR=true node bin/index.js --local","test":"nyc npm run test:local","test:win":"set FORCE_COLOR=true && node bin/index.js --win","coverage":"nyc report --reporter=text-lcov | coveralls"},"keywords":["node-req","req","node-http-request","http-request"],"license":"MIT","devDependencies":{"coveralls":"^2.13.0","formidable":"^1.1.1","japa":"^1.0.3","japa-cli":"^1.0.1","nyc":"^11.0.2","pem":"^1.9.4","semver":"^5.3.0","standard":"^9.0.2","supertest":"^3.0.0"},"nyc":{"include":["src"]},"dependencies":{"accepts":"^1.3.3","fresh":"^0.5.0","parseurl":"^1.3.1","proxy-addr":"^1.1.4","qs":"^6.4.0","type-is":"^1.6.15"},"repository":"https://github.com/poppinss/node-req","homepage":"https://github.com/poppinss/node-req#readme","gitHead":"fb89e6914cd51e66f73e331009a041e6bd6f06c8","versions":[{"number":"1.0.0","date":"2015-12-29T15:41:54.762Z"},{"number":"1.0.1","date":"2015-12-31T17:10:30.102Z"},{"number":"1.0.2","date":"2016-01-26T16:22:15.935Z"},{"number":"1.0.3","date":"2016-01-29T22:58:57.005Z"},{"number":"1.0.4","date":"2016-03-24T15:56:45.109Z"},{"number":"1.0.5","date":"2016-10-02T17:25:50.575Z"},{"number":"2.0.0","date":"2017-06-09T15:02:34.211Z"},{"number":"2.0.1","date":"2017-06-12T08:27:22.609Z"}],"readme":"# Node Req\n\n> Read data of the Node.js HTTP request with no side-effects.\n\n[![NPM Version][npm-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Appveyor][appveyor-image]][appveyor-url]\n[![Coveralls][coveralls-image]][coveralls-url]\n\n<a href=\"http://i1117.photobucket.com/albums/k594/thetutlage/poppins-1_zpsg867sqyl.png\">\n<img src=\"http://i1117.photobucket.com/albums/k594/thetutlage/poppins-1_zpsg867sqyl.png\" width=\"300px\" align=\"right\" vspace=\"20px\" />\n</a>\n\n`node-req` is an i/o module for parsing and returning values out of HTTP request object using helper methods.\n\nIt is not express, neither connect. It is just an i/o module for parsing request object.\n\n## See also\n\n1. [node-res](http://npmjs.org/package/node-res)\n2. [node-cookie](http://npmjs.org/package/node-cookie)\n\n## Http Server\n\n```javascript\nvar http = require('http')\nvar nodeReq = require('node-req')\n\nhttp.createServer(function (req, res) {\n\n  // get query string from req\n  var query = nodeReq.get(req)\n\n}).listen(3000)\n\n```\n\nYes, that's all, `node-req` makes no assumption on how to add routes or handle HTTP requests. All it does it parse request object and return values out of it.\n\n## What's different from express?\n\n`express` is super cool, but it is a framework that has a lot more to offer than just parsing requests, where `node-req` is just a parser and will be an option based on your use case.\n\n## Methods\n\n### get\nParses query string from url an returns\nan object.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n| options | Object | No | Options are passed to https://www.npmjs.com/package/qs |\n\n**Returns**\nObject\n\n**Example**\n```js\nconst queryString = nodeReq.get(req)\n```\n\n----\n### method\nReturns the exact copy of `request.method`. Defined\n[here](https://nodejs.org/api/http.html#http_message_method)\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n\n**Returns**\nString\n\n**Example**\n```js\nconst method = nodeReq.method(req)\n```\n\n----\n### headers\nReturns an object of headers for a given\nrequest.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n\n**Returns**\nObject\n\n**Example**\n```js\nconst headers = nodeReq.headers(req)\n```\n\n----\n### header\nReturns header value for a given key. Also\nit will handle the inconsistencies between\n`referer` and `referrer` header.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n| key | String | Yes | &nbsp; |\n\n**Returns**\nString\n\n**Example**\n```js\nconst authHeader = nodeReq.header(req, 'Authorization')\n```\n\n----\n### fresh\nReturns the freshness of a response inside the client\ncache. If client cache has the latest response, this\nmethod will return `true`, otherwise it will return\n`false`.\n\nAlso when HTTP header `Cache-Control: no-cache` is present\nthis method will return false everytime.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n| response | Object | Yes | &nbsp; |\n\n**Returns**\nBoolean\n\n**Example**\n```js\nif (nodeReq.fresh(req, res)) {\n   res.writeHead(304)\n}\n```\n\n----\n### stale\nThis method is the opposite of the {{#crossLink \"Request/fresh\"}}{{/crossLink}} method\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n\n**Returns**\nBoolean\n\n**Example**\n```js\nif (!nodeReq.stale(req, res)) {\n   res.writeHead(304)\n}\n```\n\n----\n### ip\nReturns the most trusted ip address for the HTTP\nrequest. It will handle the use cases where your\nserver is behind a proxy.\n\nMake sure to check [proxy-addr](https://www.npmjs.com/package/proxy-addr)\nfor the available options for `trust`.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n| trust | Mixed | No | &nbsp; |\n\n**Returns**\nString\n\n**Example**\n```js\nnodeReq.ip(req, '127.0.0.1')\nnodeReq.ip(req, ['::1/128', 'fe80::/10'])\n```\n\n----\n### ips\nReturns list of all remote addresses ordered with\nmost trusted on the top of the list.\n\nMake sure to check [proxy-addr](https://www.npmjs.com/package/proxy-addr)\nfor the available options for `trust`.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n| trust | Mixed | No | &nbsp; |\n\n**Returns**\nArray\n\n**Example**\n```\nnodeReq.ips(req, '127.0.0.1')\nnodeReq.ips(req, ['::1/128', 'fe80::/10'])\n```\n\n----\n### protocol\nReturns request protocol based upon encrypted\nconnection or X-Forwaded-Proto header.\n\nMake sure to check [proxy-addr](https://www.npmjs.com/package/proxy-addr)\nfor the available options for `trust`.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n| trust | Mixed | No | &nbsp; |\n\n**Returns**\nString\n\n**Example**\n```\nconst protocol = nodeReq.protocol(req)\n```\n\n----\n### secure\nLooks for request protocol to check for\nhttps existence or returns false.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n\n**Returns**\nBoolean\n\n**Example**\n```\nconst isHttps = nodeReq.secure(req)\n```\n\n----\n### subdomains\nReturns the request subdomains as an array. Also\nit will make sure to exclude `www` from the\nsubdomains list.\n\nMake sure to check [proxy-addr](https://www.npmjs.com/package/proxy-addr)\nfor the available options for `trust`.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n| trust | Mixed | No | &nbsp; |\n| offset  | Number | No | subdomain offset |\n\n**Returns**\nArray\n\n**Example**\n```js\nconst subdomains = nodeReq.subdomains(req)\n```\n\n----\n### ajax\nDetermines whether request is an ajax request\nor not, based on X-Requested-With header.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n\n**Returns**\nBoolean\n\n**Example**\n```js\nif (nodeReq.ajax(req)) {\n   res.writeHead(200, {\"Content-type\": \"application/json\"})\n} else {\n   res.writeHead(200, {\"Content-type\": \"text/html\"})\n}\n```\n\n----\n### pjax\nTells whether request has X-Pjax\nheader or not.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n\n**Returns**\nBoolean\n\n**Example**\n```js\nif (nodeReq.pjax(req)) {\n   // return partial content\n} else {\n   // full page refresh\n}\n```\n\n----\n### hostname\nReturns the hostname of HTTP request.\n\nMake sure to check [proxy-addr](https://www.npmjs.com/package/proxy-addr)\nfor the available options for `trust`.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n| trust | Mixed | No | &nbsp; |\n\n**Returns**\nString\n\n**Example**\n```js\nconst hostname = nodeReq.hostname(request)\n```\n\n----\n### url\nReturns request url after removing the query\nstring.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n\n**Returns**\nString\n\n**Example**\n```js\nconst url = nodeReq.url(request)\n```\n\n----\n### originalUrl\nReturns the untouched url.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n\n**Returns**\nString\n\n**Example**\n```js\nconst url = nodeReq.originalUrl(request)\n```\n\n----\n### is\nTells whether request accept content of a given\ntype or not (based on **Content-type**) header.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n| keys | Mixed | Yes | &nbsp; |\n\n**Returns**\nString\n\n**Example**\n```js\n// req.headers.content-type = 'application/json'\n\nnodeReq.is(req, ['json']) // json\nnodeReq.is(req, ['json', 'html']) // json\nnodeReq.is(req, ['application/*']) // application/json\n\nnodeReq.is(req, ['html']) // '<empty string>'\n```\n\n----\n### accepts\nReturn the best possible response accepted by the\nclient. This is based on the `Accept` header.\n[Learn more about it](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept)\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n| keys | Mixed | Yes | &nbsp; |\n\n**Returns**\nString\n\n**Example**\n```js\nconst type = nodeReq.accepts(req, ['json', 'html'])\n\nswitch(type) {\n case 'json':\n   res.setHeader('Content-Type', 'application/json')\n   res.write('{\"hello\":\"world!\"}')\n   break\n\n case 'html':\n   res.setHeader('Content-Type', 'text/html')\n   res.write('<b>hello, world!</b>')\n   break\n\n default:\n   res.setHeader('Content-Type', 'text/plain')\n   res.write('hello, world!')\n}\n```\n\n----\n### types\nThis method is similar to {{#crossLink \"Request/accepts\"}}{{/crossLink}},\ninstead it will return an array of types from most to least preferred\none.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n\n**Returns**\nArray\n\n----\n### language\nReturns one of the most preferrable language.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n| accepted | Array | Yes | &nbsp; |\n\n**Returns**\nString\n\n----\n### languages\nReturns list of all accepted languages from most\nto least preferred one.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n\n**Returns**\nArray\n\n----\n### encoding\nReturns the best maching encoding\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n| accepted | Array | Yes | &nbsp; |\n\n**Returns**\nString\n\n----\n### encodings\nReturns list of all encodings from most\nto least preferred one.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n\n**Returns**\nArray\n\n----\n### charset\nReturns the best maching charset based upon\n`Accept-Charset` header.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n| accepted | Array | Yes | &nbsp; |\n\n**Returns**\nString\n\n----\n### charsets\nReturns a list of all charsets from most\nto least preferred one based upon\n`Accept-Charset` header.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n\n**Returns**\nArray\n\n----\n### hasBody\nTells whether request has body or\nnot to be read by any body parser.\n\n**Params**\n\n| Param | Type | Required | Description |\n|-----|-------|------|------|\n| request | Object | Yes | &nbsp; |\n\n**Returns**\nBoolean\n\n**Example**\n```js\nif (nodeReq.hasBody(request)) {\n   // use body parser\n}\n```\n\n----\n\n\n[appveyor-image]: https://img.shields.io/appveyor/ci/thetutlage/node-req/master.svg?style=flat-square\n\n[appveyor-url]: https://ci.appveyor.com/project/thetutlage/node-req\n\n[npm-image]: https://img.shields.io/npm/v/node-req.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/node-req\n\n[travis-image]: https://img.shields.io/travis/poppinss/node-req/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/poppinss/node-req\n\n[coveralls-image]: https://img.shields.io/coveralls/poppinss/node-req/develop.svg?style=flat-square\n\n[coveralls-url]: https://coveralls.io/github/poppinss/node-req\n","created":"2015-12-29T15:41:54.762Z","modified":"2017-06-12T08:27:22.609Z","lastPublisher":{"name":"virk","email":"virk@adonisjs.com"},"owners":[{"name":"adonisjs","email":"virk@adonisjs.com"},{"name":"amanvirk","email":"virk.officials@gmail.com"}],"other":{"_attachments":{},"_id":"node-req","_nodeVersion":"8.0.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-req-2.0.1.tgz_1497256042453_0.6535896400455385"},"_npmUser":{"name":"virk","email":"virk@adonisjs.com"},"_npmVersion":"5.0.0","_rev":"3-903364df0304c5787c6dc8759efa7d49","author":{"name":"amanvirk"},"bugs":{"url":"https://github.com/poppinss/node-req/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"2.0.1"},"dist":{"integrity":"sha512-HRdc7ZcVWx2wRK400M8iG1b4UNyMtA+IXYBaoUYsflD/kpHxiXreI0AItnjgt3myxgTEVNH70GXzEQ6gxl5eOA==","shasum":"960d1c32513886a32e346cd44a0cb015131446b3","tarball":"https://registry.npmjs.org/node-req/-/node-req-2.0.1.tgz"},"maintainers":[{"name":"adonisjs","email":"virk@adonisjs.com"},{"name":"amanvirk","email":"virk.officials@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-12T08:27:22.609Z","created":"2015-12-29T15:41:54.762Z","1.0.0":"2015-12-29T15:41:54.762Z","1.0.1":"2015-12-31T17:10:30.102Z","1.0.2":"2016-01-26T16:22:15.935Z","1.0.3":"2016-01-29T22:58:57.005Z","1.0.4":"2016-03-24T15:56:45.109Z","1.0.5":"2016-10-02T17:25:50.575Z","2.0.0":"2017-06-09T15:02:34.211Z","2.0.1":"2017-06-12T08:27:22.609Z"}}}