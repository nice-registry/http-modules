{"name":"koa-better-http-proxy","version":"0.2.2","description":"http proxy middleware for koa","engines":{"node":">=6.0.0"},"engineStrict":true,"main":"index.js","scripts":{"test":"npm -s run mocha && npm run -s lint && npm run -s jscs","test:debug":"mocha debug -R spec test --recursive","mocha":"mocha -R spec test --recursive","lint":"jshint index.js test/*.js test/**/*js lib/*js app/**/*js ","jscs":"jscs index.js test/*.js test/**/*js lib/*js app/**/*js"},"repository":"https://github.com/nsimmons/koa-better-http-proxy","types":"types.d.ts","keywords":["koa-better-http-proxy"],"license":"MIT","devDependencies":{"body-parser":"^1.17.1","chai":"^3.5.0","cookie-parser":"^1.4.3","express":"^4.15.2","jscs":"^3.0.7","jshint":"^2.9.4","koa":"^2.2.0","mocha":"^2.1.0","supertest":"^1.2.0"},"dependencies":{"es6-promise":"^3.3.1","raw-body":"^2.2.0","winston":"^2.3.1"},"gitHead":"a644fc886b1dc23ec0ed84f8328997b2dc959e2f","homepage":"https://github.com/nsimmons/koa-better-http-proxy#readme","versions":[{"number":"0.1.0","date":"2017-04-21T14:13:53.777Z"},{"number":"0.2.0","date":"2017-04-21T18:05:10.629Z"},{"number":"0.2.1","date":"2017-04-25T18:47:20.279Z"},{"number":"0.2.2","date":"2017-04-25T19:02:46.876Z"}],"readme":"# koa-better-http-proxy [![Build Status](https://travis-ci.org/nsimmons/koa-better-http-proxy.svg?branch=master)](https://travis-ci.org/nsimmons/koa-better-http-proxy) [![Downloads](https://img.shields.io/npm/dm/koa-better-http-proxy.png?style=flat-square)](https://www.npmjs.com/package/koa-better-http-proxy)\n\nKoa middleware to proxy request to another host and pass response back. Based on [express-http-proxy](https://github.com/villadora/express-http-proxy).\n\n## Install\n\n```bash\n$ npm install koa-better-http-proxy --save\n```\n\n## Usage\n```js\nproxy(host, options);\n```\n\nTo proxy URLS to the host 'www.google.com':\n\n```js\nvar proxy = require('koa-better-http-proxy');\nvar Koa = require('koa');\n\nvar app = new Koa();\napp.use(proxy('www.google.com'));\n```\n\nIf you wish to proxy only specific paths, you can use a router middleware to accomplish this. See [https://github.com/koajs/koa/wiki#routing-and-mounting](Koa routing middlewares).\n\n### Options\n\n#### port\n\nThe port to use for the proxied host.\n\n```js\napp.use(proxy('www.google.com', {\n  port: 443\n}));\n```\n\n#### headers\n\nAdditional headers to send to the proxied host.\n\n```js\napp.use(proxy('www.google.com', {\n  headers: {\n    'X-Special-Header': 'true'\n  }\n}));\n```\n\n#### preserveReqSession\n\nPass the session along to the proxied request\n\n```js\napp.use(proxy('www.google.com', {\n  preserveReqSession: true\n}));\n```\n\n#### proxyReqPathResolver (supports Promises)\n\nProvide a proxyReqPathResolver function if you'd like to\noperate on the path before issuing the proxy request.  Use a Promise for async\noperations.\n\n```js\napp.use(proxy('localhost:12345', {\n  proxyReqPathResolver: function(ctx) {\n    return require('url').parse(ctx.url).path;\n  }\n}));\n```\n\nPromise form\n\n```js\napp.use(proxy('localhost:12345', {\n  proxyReqPathResolver: function(ctx) {\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {   // do asyncness\n        resolve(fancyResults);\n      }, 200);\n    });\n  }\n}));\n```\n\n#### filter\n\nThe ```filter``` option can be used to limit what requests are proxied.  Return ```true``` to execute proxy.\n\nFor example, if you only want to proxy get request:\n\n```js\napp.use(proxy('www.google.com', {\n  filter: function(ctx) {\n     return ctx.method === 'GET';\n  }\n}));\n```\n\n#### userResDecorator (supports Promise)\n\nYou can modify the proxy's response before sending it to the client.\n\n##### exploiting references\nThe intent is that this be used to modify the proxy response data only.\n\nNote:\nThe other arguments (proxyRes, ctx) are passed by reference, so\nyou *can* currently exploit this to modify either response's headers, for\ninstance, but this is not a reliable interface. I expect to close this\nexploit in a future release, while providing an additional hook for mutating\nthe userRes before sending.\n\n##### gzip responses\n\nIf your proxy response is gzipped, this program will automatically unzip\nit before passing to your function, then zip it back up before piping it to the\nuser response.  There is currently no way to short-circuit this behavior.\n\n```js\napp.use(proxy('www.google.com', {\n  userResDecorator: function(proxyRes, proxyResData, ctx) {\n    data = JSON.parse(proxyResData.toString('utf8'));\n    data.newProperty = 'exciting data';\n    return JSON.stringify(data);\n  }\n}));\n```\n\n```js\napp.use(proxy('httpbin.org', {\n  userResDecorator: function(proxyRes, proxyResData) {\n    return new Promise(function(resolve) {\n      proxyResData.funkyMessage = 'oi io oo ii';\n      setTimeout(function() {\n        resolve(proxyResData);\n      }, 200);\n    });\n  }\n}));\n```\n\n#### limit\n\nThis sets the body size limit (default: `1mb`). If the body size is larger than the specified (or default) limit,\na `413 Request Entity Too Large`  error will be returned. See [bytes.js](https://www.npmjs.com/package/bytes) for\na list of supported formats.\n\n```js\napp.use(proxy('www.google.com', {\n  limit: '5mb'\n}));\n```\n\n#### proxyReqOptDecorator  (supports Promise form)\n\nYou can mutate the request options before sending the proxyRequest.\nproxyReqOpt represents the options argument passed to the (http|https).request\nmodule.\n\n```js\napp.use(proxy('www.google.com', {\n  proxyReqOptDecorator: function(proxyReqOpts, ctx) {\n    // you can update headers\n    proxyReqOpts.headers['content-type'] = 'text/html';\n    // you can change the method\n    proxyReqOpts.method = 'GET';\n    // you could change the path\n    proxyReqOpts.path = 'http://dev/null'\n    return proxyReqOpts;\n  }\n}));\n```\n\nYou can use a Promise for async style.\n\n```js\napp.use(proxy('www.google.com', {\n  proxyReqOptDecorator: function(proxyReqOpts, ctx) {\n    return new Promise(function(resolve, reject) {\n      proxyReqOpts.headers['content-type'] = 'text/html';\n      resolve(proxyReqOpts);\n    })\n  }\n}));\n```\n\n#### proxyReqBodyDecorator  (supports Promise form)\n\nYou can mutate the body content before sending the proxyRequest.\n\n```js\napp.use(proxy('www.google.com', {\n  proxyReqBodyDecorator: function(bodyContent, ctx) {\n    return bodyContent.split('').reverse().join('');\n  }\n}));\n```\n\nYou can use a Promise for async style.\n\n```js\napp.use(proxy('www.google.com', {\n  proxyReqBodyDecorator: function(proxyReq, ctx) {\n    return new Promise(function(resolve, reject) {\n      http.get('http://dev/null', function (err, res) {\n        if (err) { reject(err); }\n        resolve(res);\n      });\n    })\n  }\n}));\n```\n\n#### https\n\nNormally, your proxy request will be made on the same protocol as the original\nrequest.  If you'd like to force the proxy request to be https, use this\noption.\n\n```js\napp.use(proxy('www.google.com', {\n  https: true\n}));\n```\n\n#### preserveHostHdr\n\nYou can copy the host HTTP header to the proxied express server using the `preserveHostHdr` option.\n\n```js\napp.use(proxy('www.google.com', {\n  preserveHostHdr: true\n}));\n```\n\n#### parseReqBody\n\nThe ```parseReqBody``` option allows you to control parsing the request body.\nFor example, disabling body parsing is useful for large uploads where it would be inefficient\nto hold the data in memory.\n\nThis defaults to true in order to preserve legacy behavior.\n\nWhen false, no action will be taken on the body and accordingly ```req.body``` will no longer be set.\n\nNote that setting this to false overrides ```reqAsBuffer``` and ```reqBodyEncoding``` below.\n\n```js\napp.use(proxy('www.google.com', {\n  parseReqBody: false\n}));\n```\n\n#### reqAsBuffer\n\nNote: this is an experimental feature.  ymmv\n\nThe ```reqAsBuffer``` option allows you to ensure the req body is encoded as a Node\n```Buffer``` when sending a proxied request.   Any value for this is truthy.\n\nThis defaults to to false in order to preserve legacy behavior. Note that\nthe value of ```reqBodyEnconding``` is used as the encoding when coercing strings\n(and stringified JSON) to Buffer.\n\nIgnored if ```parseReqBody``` is set to false.\n\n```js\napp.use(proxy('www.google.com', {\n  reqAsBuffer: true\n}));\n```\n\n#### reqBodyEncoding\n\nEncoding used to decode request body. Defaults to ```utf-8```.\n\nUse ```null``` to preserve as Buffer when proxied request body is a Buffer. (e.g image upload)\nAccept any values supported by [raw-body](https://www.npmjs.com/package/raw-body#readme).\n\nThe same encoding is used in the userResDecorator method.\n\nIgnored if ```parseReqBody``` is set to false.\n\n```js\napp.use(proxy('httpbin.org', {\n  reqBodyEncoding: null\n}));\n```\n\n\n#### timeout\n\nBy default, node does not express a timeout on connections.\nUse timeout option to impose a specific timeout.\nTimed-out requests will respond with 504 status code and a X-Timeout-Reason header.\n\n```js\napp.use(proxy('httpbin.org', {\n  timeout: 2000  // in milliseconds, two seconds\n}));\n```\n","created":"2017-04-21T14:13:53.777Z","modified":"2017-04-25T19:02:46.876Z","lastPublisher":{"name":"nsimmons","email":"nick.simmons.514@gmail.com"},"owners":[{"name":"nsimmons","email":"nick.simmons.514@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"koa-better-http-proxy","_nodeVersion":"6.9.5","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/koa-better-http-proxy-0.2.2.tgz_1493146966619_0.6328467868734151"},"_npmUser":{"name":"nsimmons","email":"nick.simmons.514@gmail.com"},"_npmVersion":"3.10.10","_rev":"4-682e18e0446e1577ef4b62dc758b6049","_shasum":"e86e3a67435c0f953f4548a742e00c72ecdb1ab7","author":{"name":"nsimmons","email":"nick.simmons.514@gmail.com"},"bugs":{"url":"https://github.com/nsimmons/koa-better-http-proxy/issues"},"contributors":[],"directories":{},"dist-tags":{"latest":"0.2.2"},"dist":{"shasum":"e86e3a67435c0f953f4548a742e00c72ecdb1ab7","tarball":"https://registry.npmjs.org/koa-better-http-proxy/-/koa-better-http-proxy-0.2.2.tgz"},"maintainers":[{"name":"nsimmons","email":"nick.simmons.514@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-25T19:02:46.876Z","created":"2017-04-21T14:13:53.777Z","0.1.0":"2017-04-21T14:13:53.777Z","0.2.0":"2017-04-21T18:05:10.629Z","0.2.1":"2017-04-25T18:47:20.279Z","0.2.2":"2017-04-25T19:02:46.876Z"}}}