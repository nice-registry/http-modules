{"name":"rx-request-handler","version":"0.2.1","description":"An Rx based http request handler with simple middleware","main":"./src/index.js","repository":"https://github.com/JosephMoniz/rx-request-handler","scripts":{"test":"mocha --recursive"},"dependencies":{"rx":"2.*.*","rx-http-server":"0.1.*","rx-router":"0.2.*","ring-middleware":"0.1.*","existence":"1.0.*"},"devDependencies":{"mocha":"1.9.0"},"homepage":"https://github.com/JosephMoniz/rx-request-handler","versions":[{"number":"0.1.0","date":"2013-10-25T00:35:43.994Z"},{"number":"0.1.2","date":"2013-11-23T02:51:06.976Z"},{"number":"0.1.3","date":"2013-11-23T02:51:53.537Z"},{"number":"0.1.4","date":"2013-11-23T02:59:34.036Z"},{"number":"0.2.0","date":"2014-03-07T10:29:20.661Z"},{"number":"0.2.1","date":"2014-03-12T04:28:39.534Z"}],"readme":"Rx Request Handler\n==================\nThis is an Rx request handler meant to work with the rx-router module. This\nversion leverages a middleware format that was inspired by Clojure's ring\nspecification.\n\nThe previous middleware implementation was effectively a modeling of unix\npipes done with Rx. This version of middleware still leverages Rx but it\nlets you model a flow similar to a call stack. To visualize the difference\ncheck out the following ascii scribbles.\n\nPrevious pipe based middleware implementation:\n```\n     Request\n        |\n        V\n------------------      --------------     -------------------\n| Authentication | - -\\ | Controller | --\\ |     Caching     |\n| pre-middleware | - -/ |   action   | --/ | post-middleware |\n------------------      --------------     -------------------\n                                                    |\n                                                    V\n                                                 Response\n```\n\nCurrent ring spec based middleware implementation:\n```\n     Request\n        |\n        V\n------------------     --------------     --------------\n| Authentication | --> |  Caching   | --> | Controller |\n|   middleware   | <-- | middleware | <-- |   action   |\n------------------     --------------     --------------\n        |\n        V\n     Response\n```\n\nThe previous implementation forced every middleware to choose whether it was\na pre-action or post-action middleware. This creates nasty state passing\nsituations in the cases where you need to coordinate between a pre-action and\npost-action middleware.\n\nThe new ring spec based implementations allows each middleware to choose whether\nit wants to be a pre-action, post-action middleware or even both. This enables\nthe middleware to fully encapsulate all of it's state and gets rid of the need\nto attach middleware specific state to the data object flowing through the\nrequest cycle.\n\nExample\n-------\n```javascript\nvar Rx           = require(\"rx\");\nvar RxHttpServer = require(\"rx-http-server\");\nvar router       = require(\"rx-router\");\nvar handler      = require(\"rx-request-handler\");\n\nvar defaultHandler = handler(function(data) {\n    data.result = \"no match found\";\n    return Rx.Observable.fromArray([data]);\n});\n\nvar preAction = function(next) {\n    return function(data) {\n        data.result = \"[pre] \";\n        return Rx.Observable.returnValue(data).flatMap(next);\n    };\n};\n\nvar postAction = function(next) {\n    return function(data) {\n        return next(data).map(function(n) {\n            n.result += \" [post]\"\n            return n;\n        });\n    };\n};\n\nvar rootHandler = handler({\n\n    middleware: [\n        preAction,\n        postAction\n    ],\n\n    action: function(data) {\n        data.result += \"hello\";\n        return Rx.Observable.fromArray([data]);\n    }\n\n});\n\nvar regexHandler = handler(function(data) {\n    data.result = \"hello from regex\";\n    return Rx.Observable.fromArray([data]);\n});\n\nvar server = new RxHttpServer();\nvar routes = router(defaultHandler, {\n    \"GET\": [\n        [\"/\",           rootHandler],\n        [/^\\/test\\/.+/, regexHandler]\n    ]\n});\n\nserver.requests.flatMap(routes).subscribe(function(data) {\n    data.response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    data.response.end(data.result);\n});\n\nserver.listen(3000);\n```\n","starsCount":1,"created":"2013-10-25T00:35:42.783Z","modified":"2014-03-12T18:17:01.991Z","lastPublisher":{"name":"josephmoniz","email":"joseph.moniz@gmail.com"},"owners":[{"name":"josephmoniz","email":"joseph.moniz@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"rx-request-handler","_npmUser":{"name":"josephmoniz","email":"joseph.moniz@gmail.com"},"_npmVersion":"1.3.24","_rev":"1-2f18118ac0fc73171fb13e4096562e06","author":{"name":"Joseph Moniz","email":"joseph.moniz@gmail.com"},"bugs":{"url":"https://github.com/JosephMoniz/rx-request-handler/issues"},"directories":{},"dist-tags":{"latest":"0.2.1"},"dist":{"shasum":"ca4757704db1a7ac8e1a2ef1f65b371ecbffecc0","tarball":"http://registry.npmjs.org/rx-request-handler/-/rx-request-handler-0.2.1.tgz"},"maintainers":[{"name":"josephmoniz","email":"joseph.moniz@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-03-12T18:17:01.991Z","created":"2013-10-25T00:35:42.783Z","0.1.0":"2013-10-25T00:35:43.994Z","0.1.2":"2013-11-23T02:51:06.976Z","0.1.3":"2013-11-23T02:51:53.537Z","0.1.4":"2013-11-23T02:59:34.036Z","0.2.0":"2014-03-07T10:29:20.661Z","0.2.1":"2014-03-12T04:28:39.534Z"},"users":{"bitsonic":true}}}