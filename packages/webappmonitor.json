{"name":"webappmonitor","description":"Remote monitoring for HTTP applications","version":"3.2.0","dependencies":{"mongoose":"3.6.7","mongoose-lifecycle":"1.0.0","express":"3.2.0","express-partials":"0.1.1","connect-flash":"0.1.0","ejs":"0.8.3","config":"0.4.32","async":"0.1.22","socket.io":"0.9.14","semver":"1.1.0","moment":"2.1.0","nodemailer":"0.3.35","net-ping":"1.1.7","js-yaml":"2.1.0","webpagetest":"0.2.0"},"devDependencies":{"mocha":"1.7.x","should":"1.1.0"},"keywords":["WebAppMonitor","monitoring","api","check"],"repository":"https://github.com/JalalHejazi/WebAppMonitor","license":"MIT","engines":{"node":"0.10.x","npm":"1.2.x"},"scripts":{"test":"mocha test/lib/","start":"node app.js"},"homepage":"https://github.com/JalalHejazi/WebAppMonitor","main":"app.js","versions":[{"number":"3.2.0","date":"2014-08-31T12:20:04.149Z"}],"readme":"WebAppMonitor (Nodejs)\n=======================\n\nA remote monitoring WebApp using Nodejs, MongoDB, and Twitter Bootstrap.\n\n<img src=\"images/ResponseTime.png\" alt=\"\">\n\n<img src=\"images/checks.png\" alt=\"\">\n\nCredits\n-------\n\n* <a href=\"https://github.com/fzaninotto/uptime\">Francois Zaninotto (uptime)</a>\n* <a href=\"http://vimeo.com/39302164\">video shows installation </a>\n* <a href=\"http://uptimerobot.com/\">UPtimeROBOT</a>\n\n\nFeatures\n--------\n\n* Monitor thousands of websites (powered by [Node.js asynchronous programming](http://redotheweb.com/2012/01/23/nodejs-for-php-programmers-1-event-driven-programming-and-pasta.html))\n* Tweak frequency of monitoring on a per-check basis, up to the second\n* Check the presence of a pattern in the response body\n* Receive notifications whenever a check goes down\n  * On screen (powered by [socket.io](http://socket.io/))\n  * By email\n  * On the console\n  * WebHooks\n  * PUSH\n\n* Record availability statistics for further reporting (powered by [MongoDB](http://www.mongodb.org/))\n* Detailed WebAppMonitor reports with animated charts (powered by [Flotr2](http://www.humblesoftware.com/flotr2/))\n* Monitor availability, responsiveness, average response time, and total WebAppMonitor/downtime\n* Get details about failed checks (HTTP error code, etc.)\n* Group checks by tags and get reports by tag\n* Familiar web interface (powered by [Twitter Bootstrap 2.0](http://twitter.github.com/bootstrap/index.html))\n* Complete API for integration with third-party monitoring services\n* Powerful plugin system to ease extension and customization\n* Easy installation and zero administration\n\nInstalling WebAppMonitor\n-------------------------\n\n\n\nWebAppMonitor 3.2 requires Node.js 0.10 and MongoDB 2.1.\n\nTo install from GitHub, clone the repository and install dependencies using `npm`:\n\n```sh\n$ git clone git://github.com/JalalHejazi/WebAppMonitor.git\n$ cd WebAppMonitor\n$ npm install\n```\n\nLastly, start the application with:\n\n```sh\n$ nodemon\n```\n\n<img src=\"images/node_app_start.png\" alt=\"\">\n\n\n\nAdding Checks(monitors)\n-----------------------\n<img src=\"images/Edit_monitors.png\" alt=\"\">\n\nBy default, the web UI runs on port 8082, so just browse to\n\n    http://localhost:8082/\n\nAnd you're ready to begin. Create your first check by entering an URL, wait for the first ping, and you'll soon see data flowing through your charts!\n\nConfiguring\n-----------\n\nWebAppMonitor uses [node-config](https://github.com/lorenwest/node-config) to allow YAML configuration and environment support. Here is the default configuration, taken from `config/default.yaml`:\n\n```yaml\nurl:        'http://localhost:8082'\n\nmongodb:\n  server:   localhost\n  database: WebAppMonitor\n  user:     root\n  password:\n  connectionString:       # alternative to setting server, database, user and password separately\n\nmonitor:\n  name:                   origin\n  apiUrl:                 'http://localhost:8082/api' # must be accessible without a proxy\n  pollingInterval:        10000      # ten seconds\n  timeout:                5000       # five seconds\n  userAgent:              NodeWebAppMonitor/2.0 (https://github.com/JalalHejazi/WebAppMonitor)\n\nanalyzer:\n  updateInterval:         60000      # one minute\n  qosAggregationInterval: 600000     # ten minutes\n  pingHistory:            8035200000 # three months\n\nautoStartMonitor: true\n\nplugins:\n  - ./plugins/console\n  - ./plugins/patternMatcher\n  - ./plugins/httpOptions\n  # - ./plugins/email\n```\n\nTo modify this configuration, create a `development.yaml` or a `production.yaml` file in the same directory, and override just the settings you need. For instance, to run WebAppMonitor on port 80 in production, create a `production.yaml` file as follows:\n\n```yaml\nurl: 'http://myDomain.com'\n```\n\nNode that WebAppMonitor works great behind a proxy - it uses the `http_proxy` environment variable transparently.\n\n\nArchitecture & API\n-------------------\n<img src=\"images/api.png\" alt=\"\">\n\n\nWebAppMonitor is composed of two services: a webapp (in `app.js`), and a polling monitor (in `monitor.js)`. For your convenience, the two services start together when you call `node app`.\n\n<img src=\"images/model.png\" alt=\"\">\n\nHowever, heavily browsing the webapp may slow down the whole server - including the polling monitor. In other terms, using the application can influence the WebAppMonitor measurements. To avoid this effect, it is recommended to run the polling monitor in a separate process.\n\nTo that extent, set the `autoStartMonitor` setting to `false` in the `production.yaml`, and launch the monitor by hand:\n\n```sh\n$ node monitor &\n$ node app\n```\n\nYou can also run the monitor in a different server. This second server must be able to reach the API of the webapp server: set the `monitor.apiUrl` setting accordingly in the `production.yaml` file of the monitor server.\n\nMonitoring From Various Locations\n---------------------------------\n\nYou can even run several monitor servers in several datacenters to get average response time. In that case, make sure you set a different `monitor.name` setting for all monitor servers to be able to tell which server make a particular ping.\n\nUsing Plugins\n-------------\n\nPlugins can add more notification types, more poller types, new routes to the webapp, etc. WebAppMonitor currently bundles three plugins:\n\n * [`console`](https://github.com/JalalHejazi/WebAppMonitor/blob/master/plugins/console/index.js): log pings and events in the console in real time\n * [`email`](https://github.com/JalalHejazi/WebAppMonitor/blob/master/plugins/email/index.js): notify events (up, down pause) by email\n * [`patternMatcher`](https://github.com/JalalHejazi/WebAppMonitor/blob/master/plugins/patternMatcher/index.js): allow HTTP & HTTPS pollers to test the response body against a pattern\n * [`httpOptions`](https://github.com/JalalHejazi/WebAppMonitor/blob/master/plugins/httpOptions/index.js): add custom HTTP options and headers to HTTP and HTTPS checks (e.g. to allow self-signed certificate on HTTPS, custom headers, custom HTTP methods, ...)\n * [`basicAuth`](https://github.com/JalalHejazi/WebAppMonitor/blob/master/plugins/basicAuth/index.js): add HTTP Basic Access Authentication to the dashboard and API applications\n\nTo enable plugins, just add a line to the `plugins:` section of the configuration file.\nThree of the bundled plugins are already enabled by default:\n\n```yaml\n# in config/default.yaml\nplugins:\n  - ./plugins/console\n  - ./plugins/patternMatcher\n  - ./plugins/httpOptions\n  # - ./plugins/email\n  # - ./plugins/basicAuth\n```\n\nYou can override these settings in your environment configuration, for instance:\n\n```yaml\n# in config/production.yaml\n# disable the console plugin and enable the email plugin, basicAuth & webhooks\nplugins:\n    #- ./plugins/console\n  - ./plugins/patternMatcher\n  - ./plugins/httpOptions\n  - ./plugins/webhooks\n  - ./plugins/email\n  - ./plugins/basicAuth\n```\n\n\n<img src=\"images/production.png\" alt=\"\">\n\n\nWriting Plugins\n---------------\n\nA plugin is a simple Node.js module which hooks into predefined extension points. WebAppMonitor automatically requires plugin modules when starting the webapp and the monitor, and tries to call the two following functions:\n\n* `initWebApp(options)` when starting the webapp\n* `initMonitor(options)` when starting the monitor\n\nCheck the [app.js](https://github.com/JalalHejazi/WebAppMonitor/blob/master/app.js#L97) and [monitor.js](https://github.com/JalalHejazi/WebAppMonitor/blob/master/monitor.js#L8) to see a detail of the options passed to each hook. Also, check the code of existing plugins to understand how they can add new pollers, new notification types, etc.\n\nFor instance, if you had to recreate a simple version of the `console` plugin, you could write it as follows:\n\n```js\n// in plugins/console/index.js\nvar CheckEvent = require('../../models/checkEvent');\nexports.initWebapp = function() {\n  CheckEvent.on('afterInsert', function(checkEvent) {\n    checkEvent.findCheck(function(err, check) {\n      console.log(new Date() + check.name + checkEvent.isGoDown ? ' goes down' : ' goes back up');\n    });\n  });\n}\n```\nAll WebAppMonitor entities emit lifecycle events that you can listen to on the Model class. These events are `beforeInsert`, `afterInsert`, `beforeUpdate`, `afterUpdate`, `beforeSave` (called for both inserts and updates), `afterSave` (called for both inserts and updates), `beforeRemove`, and `afterRemove`. For more information about these events, check the [mongoose-lifecycle](https://github.com/fzaninotto/mongoose-lifecycle) plugin.\n\nAPI\n---------------\n\nAll API requests should be prefixed with `api`.\nThe API response always uses the `application/json` mimetype.\nAPI requests do not require authentication.\n\nExample of a valid API request:\n\n`GET http://example.com/api/checks`\n\nExample for a valid API request using curl :\n\n`curl -i -H \"Accept: application/json\" -X PUT -d \"name=example\" -d \"url=http://mysite.com\" -d \"interval=120\" http://example.com/api/checks`\n\n### Status codes\n\nThe API is designed to return different status codes :\n\n* `200 Ok` : The request was successful, the resource(s) itself is returned as JSON\n* `400 Bad Request` : An attribute of the API request is invalid or missing (e.g. the url of a check is missing)\n* `404 Not Found` : A resource could not be accessed (e.g. a check ID could not be found)\n* `500 Server Error` : Something went wrong on the server side (e.g. a check could not be saved in database)\n\n### CRUD routes\n\n#### `GET /checks`\n\nReturn a list of all checks\n\n#### `GET /checks/needingPoll`\n\nReturn a list of checks that need a poll (i.e. not paused, plus new or last tested > interval set between tests)\n\n#### `GET /checks/:id`\n\nReturn a single check\n\nParameter :\n\n* `id` : (required) Id of the check\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004`\n\n#### `GET /checks/:id/pause`\n\nToggle the status (isPaused) of a check\n\nParameter :\n\n* `id` : (required) Id of the check\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004/pause`\n\n#### `PUT /check/:id/test`\n\nUpdates the last checked date for a check. Used to avoid double check when a target is slow.\nReturn the number of affected records in the database (1 or 0).\n\nParameter :\n\n* `id` : (required) Id of the check\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004/test`\n\n#### `GET /pings`\n\nReturn a list of all pings\n\nParameters :\n\n* `?page=1` : (optional) Paginate results by 50\n* `?check=:id` : (optional) Return only the pings for a given check\n\nEx: `http://localhost:8082/api/pings?check=527a25bdc9de6e0000000004`\n\n#### `GET /pings/events`\n\nReturn a list of events (CheckEvent) aggregated by day, limited to the latest week, and to 100 results\n\n#### `POST /pings`\n\nCreate a ping for a check, if the check exists and is not already polled\n\nParameters :\n\n* `checkId` : (required) Id of the check\n* `status` : (required)  Status\n* `timestamp` : (optional) Date of polling\n* `time` : (required) Response time\n* `name` : (optional) Monitor name\n* `error` : (optional)\n* `details` : (optional)\n\n#### `GET /tags`\n\nReturn list of all tags\n\n#### `GET /tags/:name`\n\nReturn a single tag\n\nParameter :\n\n* `name` : (required) name of the tag\n\nEx: `http://localhost:8082/tags/good`\n\n#### `PUT /checks`\n\nCreate a new check and return it\n\nParameters :\n\n* `url` : (required) Url of the check\n* `name` : (optional) Name of the check - if empty, url will be set as check name\n* `interval` : (optional) Interval of polling\n* `maxTime` : (optional) Slow threshold\n* `isPaused` : (optional) Status of polling\n* `alertTreshold` : (optional) set the threshold of failed pings that will create an alert\n* `tags` : (optional) list of tags (comma-separated values)\n* `type` : (optional) type of check (auto|http|https|udp)\n\n#### `POST /checks/:id`\n\nUpdate a check and return it\n\nParameters :\n\n* `id` : (required) Id of the check\n* `url` : (optional) Url of the check\n* `name` : (optional) Name of the check - if empty, url will be set as check name\n* `interval` : (optional) Interval of polling\n* `maxTime` : (optional) Slow threshold\n* `isPaused` : (optional) Status of polling\n* `alertTreshold` : (optional) set the threshold of failed pings that will create an alert\n* `tags` : (optional) list of tags (comma-separated values)\n* `type` : (optional) type of check - values : `auto`|`http`|`https`|`udp`\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004`\n\n#### `DELETE /checks/:id`\n\nDelete a check\n\nParameters :\n\n* `id` : (required) Id of the check\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004`\n\n### Statistics routes\n\n#### `GET /checks/:id/stat/:period/:timestamp`\n\nReturn check stats for a period\n\nParameters :\n\n   * `id` : (required) Id of the check\n   * `period` : (required) Period - values :  `hour`|`day`|`month`|`year`\n   * `timestamp` : (required) Start date (timestamp)\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004/stat/day/1383260400000`\n\n#### `GET /checks/:id/stats/:type`\n\nReturn check stats for a period\n\nParameters :\n\n* `id` : (required) Id of the check\n* `type` : (required) Period - values :  `hour`|`day`|`month`|`year`\n* `?begin=` : (required) Start date (timestamp)\n* `?end=` : (required) End date (timestamp)\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004/stats/month?begin=1383260400000&end=1385852399999`\n\n#### `GET /tags/:name/checks/:period/:timestamp`\n\nReturn tag stats for a period, joined by checks\n\nParameters :\n\n* `name` : (required) Name of the tag\n* `period` : (required) Period - values :  `hour`|`day`|`month`|`year`\n* `timestamp` : (required) Start date (timestamp)\n\nEx: `http://localhost:8082/api/tags/good/checks/month/1384816432099`\n\n#### `GET /tags/:name/stat/:period/:timestamp`\n\nReturn tag stats for a period\n\nParameters :\n\n* `name` : (required) Name of the tag\n* `period` : (required) Period - values :  `hour`|`day`|`month`|`year`\n* `timestamp` : (required) Start date (timestamp)\n\nEx: `http://localhost:8082/api/tags/good/stat/month/1383260400000`\n\n#### `GET /tags/:name/stats/:type`\n\nReturn tag stats for a period\n\nParameters :\n\n* `name` : (required) Name of the tag\n* `type` : (required) Period - values :  `day`|`month`|`year`\n* `?begin=` : (required) Start date (timestamp)\n* `?end=` : (required) End date (timestamp)\n\nEx: `http://localhost:8082/api/tags/good/stats/month?begin=1383260400000&end=1385852399999`\n\n### Event routes\n\n#### `GET /checks/:id/events`\n\nReturn the list of all events for the check\n\nParameter :\n\n* `id` : (required) Id of the check\n\nEx: `http://localhost:8082/api/checks/527a25bdc9de6e0000000004/events`\n\n#### `GET /tags/:name/events`\n\nReturn the list of all events associated to the tag\n\nParameter :\n\n* `name` : (required) Name of the tag\n* `?begin=` : (optional) Start date (timestamp)\n* `?end=` : (optional) End date (timestamp)\n\nEx: `http://localhost:8082/api/tags/good/events?begin=1383260400000&end=1385852399999`\n\nLicense\n-------\n\nThe WebAppMonitor code is free to use and distribute, under the [MIT license](https://raw.github.com/JalalHejazi/WebAppMonitor/master/LICENSE).\n\nWebAppMonitor uses third-party libraries:\n\n* [NodeJS](http://nodejs.org/), licensed under the [MIT License](https://github.com/joyent/node/blob/master/LICENSE#L5-22),\n* [Socket.io](http://socket.io/), licensed under the [MIT License](https://github.com/LearnBoost/socket.io/blob/master/Readme.md),\n* [MongooseJS](http://mongoosejs.com/), licensed under the [MIT License](https://github.com/LearnBoost/mongoose/blob/master/README.md),\n* [jQuery](http://jquery.com/), licensed under the [MIT License](http://jquery.org/license),\n* [TwitterBootstrap](http://twitter.github.com/bootstrap/), licensed under the [Apache License v2.0](http://www.apache.org/licenses/LICENSE-2.0),\n* [Flotr2](http://www.humblesoftware.com/flotr2/), licensed under the [MIT License](https://github.com/HumbleSoftware/Flotr2/blob/master/LICENSE).\n* [Favicon](http://www.alexpeattie.com/projects/justvector_icons/), distributed under the [Free Art License](http://artlibre.org/licence/lal/en).\n\n\nTODO\n----\n\n* Account for scheduled maintenance (and provide two QoS calculations: with and without scheduled maintenance)\n* Allow for JavaScript execution in the monitored resources by using a headless browser (probably zombie.js)\n* Unit tests\n* Twitter Bootstrap 3.0 RWD\n\n\n","created":"2014-08-31T12:20:04.149Z","modified":"2014-08-31T12:20:04.149Z","lastPublisher":{"name":"jalalhejazi","email":"jalal.hejazi@gmail.com"},"owners":[{"name":"jalalhejazi","email":"jalal.hejazi@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"webappmonitor","_npmUser":{"name":"jalalhejazi","email":"jalal.hejazi@gmail.com"},"_npmVersion":"1.4.9","_rev":"1-198c1d7d99035e99923db3c4134287ff","_shasum":"361b2fc8f498f97618d4acb4032109705819f678","author":{"name":"Jalal Hejazi"},"bugs":{"url":"https://github.com/JalalHejazi/WebAppMonitor/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"3.2.0"},"dist":{"shasum":"361b2fc8f498f97618d4acb4032109705819f678","tarball":"http://registry.npmjs.org/webappmonitor/-/webappmonitor-3.2.0.tgz"},"maintainers":[{"name":"jalalhejazi","email":"jalal.hejazi@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-08-31T12:20:04.149Z","created":"2014-08-31T12:20:04.149Z","3.2.0":"2014-08-31T12:20:04.149Z"}}}