{"name":"http-handler","version":"0.0.4","description":"Minimalist handling for http requests.  Where non-file urls are handled by index.js in relative folder, and resource files are streamed from resources directory.","homepage":"https://github.com/willmark/http-handler","repository":"https://github.com/willmark/http-handler","scripts":{"test":"node test.js"},"engine":{"node":"0"},"dependencies":{"optimist":"~0.6.0"},"devDependencies":{"grunt":"~0.4.2","grunt-preprocess":"~3.0.1","grunt-contrib-uglify":"~0.2.7","grunt-contrib-jshint":"~0.7.2","grunt-contrib-nodeunit":"~0.2.2"},"keywords":["http","minimal http request handling","http server","http handling"],"versions":[{"number":"0.0.2","date":"2014-02-04T12:57:28.937Z"},{"number":"0.0.4","date":"2014-02-12T18:13:42.034Z"}],"readme":"http-handler\n============\n\n> Stability - 2 Unstable\n\nA bare bones http handler for incoming server requests\nfrom http.createServer(function (req, res) {});\n\nThe handler splits the request into two basic types.\nEither the request is handled as a file resource, or\na module directory (see http://nodejs.org/api/modules.html).\nThe init() function takes an object with the base directories\nfor resources and response modules.  These should be different\ndirectories to avoid the possiblity of piping a server-side\nscript file to the client.  See init() API description below.\n\nThe handler first looks for a file resource matching the url path\n(ignoring any query strings).  Then, it looks for a matching\nmodule handler.\n\nA response module handler can be an index.js within the pathname\nof the request url.  For example, if the request url\nis /css/style.css, and there is a file resource located\nin <resources directory>/css/style.css, the default behavior\nis to pipe the file resource contents to the response.\nOr, if there is a directory named <responses directory>/css/style.css/\ncontaining index.js, that directory is loaded as a module\nresource, and is expected to handle the incoming request.\nAn example index.js module resource might look like this:\n\n<pre><code>\n/**\n * Default style.css handler\n */\nmodule.exports = function (req, res) {\n    res.writeHead(200, {\n        \"Content-Type\": \"text/plain\"\n    });\n    res.write(\"body{ background-color:#d0e4fe; }\");\n    res.end();\n};\n</code></pre>\n\nIf neither a resource exists, nor a module, there is a default \n<http-handler root directory>/responses/404/index.js\nwhere responds with a generic 404 message.  The parent module\ncan create a similar 404 module to respond with a specific 404 message,\nor create a <parent resources directory>/resources/404 file to respond\nwith a static message.\n \n## API\n\n````\n//install\nnpm install http-handler\n\n//usage\nhandler = require('http-handler');\nhandler.init([{\n    responses: <directory path to response handlers>,\n    resources: <directory path to resources (ex. images, videos, static html)>\n}]);\n\nhandler.respond(req, res, callback);\n\n/**\n * Initialize the module with two base directory paths identified in config object.\n * config {\n *   responses: <Base directory location for node module handlers>\n *   resources: <Base directory location for static file resources (ie. images, video, css)>\n * }\n */\ninit: function(config) \n\n/**\n * Respond to http request \n * req - http request http.IncomingMessage\n * res - http response http.ServerResponse\n * callback - Callback function(statusCode, err)\n *    statusCode - http status response sent to client\n *    err - Any internal Error encountered such as an exeption thrown in response module\n */\nrespond: function(req, res, callback)\n\nexample:\n\nhandler = require('./index').init({\n    resources: './parentresources',\n    responses: './parentresponses'\n});\n\nserver = http.createServer(function(req, res) {\n    handler.respond(req, res, function (statusCode, err) {\n        switch (statusCode) {\n            case 200:\n                console.log('Completed request successfully: ' + req.url);\n                break;\n            case 403:\n                console.warn('Forbidden: ' + req.url);\n                break;\n            case 404:\n                console.warn('URL not found: ' + req.url);\n                break;\n            case 500:\n                console.warn('500 error: ' + err);\n                break;\n            default:\n                console.error('Unknown status: ' + statusCode);\n                console.error('Unknown error: ' + err);\n                break;\n        }\n    });\n});\n\n````\n","created":"2014-02-04T12:55:06.664Z","modified":"2014-02-12T18:13:42.034Z","lastPublisher":{"name":"willmark","email":"mark@togglebit.org"},"owners":[{"name":"willmark","email":"mark@togglebit.org"}],"other":{"_attachments":{},"_from":".","_id":"http-handler","_npmUser":{"name":"willmark","email":"mark@togglebit.org"},"_npmVersion":"1.3.14","_rev":"1-1776a690ac5ad600fce00a9f6f5dc11b","author":{"name":"Mark Williams","email":"mark@togglebit.org","url":"http://togglebit.org/"},"bugs":{"url":"https://github.com/willmark/http-handler/issues"},"directories":{},"dist-tags":{"latest":"0.0.4"},"dist":{"shasum":"23498b4bd1bcde9b84239008bf0d1b5edf24b037","tarball":"http://registry.npmjs.org/http-handler/-/http-handler-0.0.4.tgz"},"maintainers":[{"name":"willmark","email":"mark@togglebit.org"}],"readmeFilename":"README.md","time":{"modified":"2014-02-12T18:13:42.034Z","created":"2014-02-04T12:55:06.664Z","0.0.2":"2014-02-04T12:57:28.937Z","0.0.4":"2014-02-12T18:13:42.034Z"}}}