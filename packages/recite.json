{"name":"recite","version":"0.4.0","description":"An object oriented HTTP library","main":"index.js","browser":"./browser.js","scripts":{"test":"mocha --recursive","cover":"istanbul cover _mocha -- --recursive","publish-coverage":"codeclimate < coverage/lcov.info","release":"gulp release"},"repository":"https://github.com/justinhoward/recite","keywords":["http","https","ajax","xmlhttprequest","oo","object-oriented"],"license":"MIT","devDependencies":{"browserify":"^11.0.1","chai":"^1.10.0","codeclimate-test-reporter":"0.0.4","es6-promise":"^2.0.1","gulp":"^3.9.0","gulp-bump":"^0.3.1","gulp-gzip":"^1.2.0","gulp-rename":"^1.2.2","gulp-streamify":"^1.0.0","gulp-tar":"^1.4.0","gulp-uglify":"^1.3.0","gulp-zip":"^3.0.2","istanbul":"^0.3.6","jscs":"^2.1.1","jshint":"^2.8.0","mocha":"^2.0.1","vinyl-source-stream":"^1.1.0"},"dependencies":{"form-data":"^1.0.0-rc3","hoopla":"^0.1.1","inherits":"^2.0.1"},"gitHead":"dd4e8d6edaee24189bc15b69f9b4fe2a328cf819","homepage":"https://github.com/justinhoward/recite#readme","versions":[{"number":"0.0.1","date":"2014-12-29T02:58:21.284Z"},{"number":"0.1.0","date":"2015-02-26T03:43:52.856Z"},{"number":"0.1.1","date":"2015-02-26T05:53:15.411Z"},{"number":"0.1.2","date":"2015-02-27T22:25:15.389Z"},{"number":"0.2.0","date":"2015-08-26T22:23:32.587Z"},{"number":"0.2.1","date":"2015-08-28T03:19:08.575Z"},{"number":"0.2.2","date":"2015-08-28T03:54:39.007Z"},{"number":"0.2.3","date":"2015-08-28T04:17:18.996Z"},{"number":"0.2.4","date":"2015-10-26T21:57:18.006Z"},{"number":"0.2.5","date":"2015-12-11T16:30:33.423Z"},{"number":"0.3.1","date":"2015-12-16T19:50:19.173Z"},{"number":"0.4.0","date":"2016-01-04T18:21:57.233Z"}],"readme":"# Recite [![npm version](https://badge.fury.io/js/recite.svg)](http://badge.fury.io/js/recite)\n##### An object oriented HTTP library for javascript\n\n[![Build Status](https://travis-ci.org/justinhoward/recite.svg)](https://travis-ci.org/justinhoward/recite)\n[![Code Climate](https://codeclimate.com/github/justinhoward/recite/badges/gpa.svg)](https://codeclimate.com/github/justinhoward/recite)\n[![Test Coverage](https://codeclimate.com/github/justinhoward/recite/badges/coverage.svg)](https://codeclimate.com/github/justinhoward/recite)\n\n## Installation\n\nUse npm to install recite in your project.\n\n```bash\nnpm install --save recite\n```\n\nThen require it with\n\n```javascript\nvar Http = require('recite');\n```\n\n### Browserify\n\nRecite is compatible with [browserify](http://browserify.org/) for use in the browser.\nFor sake of size, the `NodeDriver` is not included in the browserify bundle. If you wish to use it,\nyou can require it explicitly with:\n\n```javascript\nvar NodeDriver = require('recite/src/drivers/NodeDriver');\n```\n\n### Configuring Promise\n\nRecite requires a promise library. By default it uses global.Promise (window.Promise in the browser)\nbut if you're using recite in node (< 0.12) or older browsers, you'll need to set it manually.\nTo set it, just set `Http.Promise`.\n\n```javascript\nHttp.Promise = require('es6-promise').Promise;\n```\n\nIn node < 0.12, Recite is tested against the [es6-promise](https://github.com/jakearchibald/es6-promise) module.\n\n## Getting Started\n\nFirst, create a new instance of Http\n\n```javascript\nvar http = new Http();\n```\n\nNow we're going to use our `Http` instance to create a `GET` request.\n\n```javascript\nvar request = http.get('/api/post/3');\n```\n\nSo far, we've just created a request object. It hasn't been sent yet. Now we'll send it.\n\n```javascript\nrequest.send(function(response) {\n    console.log(response.getContents());\n});\n```\n\nWe called the `send()` method on the request object. This submits the request to our driver (we'll learn about those later). When the response comes back, our callback function will be called\nwith a response object. Here we're simply logging the contents of that response to the console.\n\n## Creating Requests\n\nThe Http `request()` method creates a new `Request` object (see below). It takes the following arguments:\n\n - `method (string)`: The HTTP request method (GET, POST, etc.)\n - `url (string)`: The url to send the request to\n - `contents (mixed)`: Optional. The body of the request\n - `headers (object)`: Optional. An object of header name/value pairs\n\n```javascript\nvar request = http.request('POST', 'http://www.example.com/api/person', personData, {\n    'content-type': 'application/json'\n});\n```\n\n### GET\n\nThe Http `get()` method is a helper method for creating GET requests.\nIt works like the `request()` method, but it sets the HTTP method and automatically\nencodes url attributes. It takes the arguments:\n\n - `url (string)`: The url to send the request to\n - `attributes (object)`: Optional. GET attributes to append the the url\n - `headers (object)`: Optional. An object of header name/value pairs\n\n```javascript\nvar request = http.get('http://www.example.com/api/person', {\n    id: 123\n});\n```\n\nThis will result in a GET request to `http://www.example.com/api/person?id=123`.\n\n### POST\n\nThe `Http.post` method is a helper method for creating POST requests.\nIt works like the `request()` method, but it sets the HTTP method to POST.\nIt takes the arguments:\n\n - `url (string)`: The url to send the request to\n - `contents (mixed)`: Optional. The body of the request\n - `headers (object)`: Optional. An object of header name/value pairs\n\n## Sending Requests\n\n### With Http\n\nCreating a request is the first step, but it doesn't do anything unless you send it.\nThe Http `send()` method does this step.\n\n```javascript\nvar request = http.get('http://www.example.com');\nhttp.send(request, function(response) {\n    // handle successful response here\n}, function(response) {\n    // handle failure here\n});\n```\n\nThe `send()` method accepts two callbacks, the first is called if our request is\nsuccessful. The second is called if the request fails. Both the callbacks are passed\na `Response` object (see below).\n\n### Promises\n\nAlthough you can pass callbacks to the `send()` method as illustrated above,\nyou can also use promises to handle responses. Let's redo our example from\nabove, but using a promise instead.\n\n```javascript\nvar request = http.get('http://www.example.com');\nhttp.send(request).then(function(response) {\n    // handle successful response here\n}, function(response) {\n    // handle failure here\n});\n```\n\nWe called the `send()` method on the request object. This returns a promise.'\nPromises have a `then` method that gets called when our response comes back from\nthe driver. The promise is resolved (or rejected) with a Response object.\n\nIf you're not familiar with promises, you may not see the benefit of using\nthem from this example. Just use whichever technique you prefer. The examples\nbelow will use promises rather than passing callbacks.\n\n### With Request\n\nThe `Request` object has a `send()` method as well. This is simply a shortcut to\navoid having to send requests in two steps.\n\n```javascript\nhttp.get('http://www.example.com').send().then(function(response) {\n    // handle response here\n});\n```\n\nAs with `Http.send()`, `Request.send()` can also take resolve and reject\ncallbacks.\n\n### Unsuccessful Requests\n\nIf a request is unsuccessful (it has a non-200 response code). The promise will be rejected instead of resolved. You can handle this with the second argument to `Promise.then`.\n\n```javascript\nhttp.get('http://www.example.com').send().then(function(response) {\n    console.log('Request successful');\n},\nfunction(response) {\n    console.log('Request failed with code ' + response.getStatus());\n});\n```\n\n## The Request Object\n\nThe objects returned from `request()` (and `get()`/`post()`) are instances of `Http.Request`.\nYou can manually create a new `Request` object using the constructor.\nThe arguments for the constructor are the same as the arguments for `Http.request`.\n\n```javascript\nvar request = new Http.Request('GET', 'http://example.com', contents, headers);\nhttp.send(request);\n```\n\n`Request` objects have several methods:\n\n - `getMethod`/`setMethod`: gets/sets the HTTP method\n - `getUrl`/`setUrl`: gets/sets the request URL\n - `getContents`/`setContents`: gets/sets the request body content\n - `getHeaders`/`setHeaders`: gets/sets the `Headers` object (see `Headers` below)\n - `send`: sends the request and returns a Promise\n - `setHttp`: sets the `Http` instance to send with\n\n```javascript\nvar request = new Http.Request('GET', 'http://example.com', contents, headers);\nvar method = request.getMethod(); // 'GET'\nrequest.setUrl('http://example.com/something_else');\n```\n\nNote the `send()` method. As explained above, this is a shortcut to avoid having to save the\nrequest in a variable before sending it. However to use it, the `setHttp` method must be called\nfirst to set the instance of `Http` you want to send the request. This is done\nautomatically if you use one of the `Http` request methods instead of creating a `Request`\nobject manually. If you manually instantiate a request, its usually easier to use the `Http.send` method\ninstead of the `Request.send` method.\n\n```javascript\nvar http = new Http();\nvar request = new Http.Request('GET', 'http://example.com', contents, headers);\n\n// You can either set the http instance\nrequest.setHttp(http);\nrequest.send();\n\n// or just use Http.send()\nhttp.send(request);\n```\n\n## The Response Object\nAs mentioned, the `send()` method returns a `Promise` object. This promise resolves to a `Response` object. This object is similar to the `Request` object with some differences.\n\nThe constructor takes the following arguments:\n\n - `request`: the request object this is a response to\n - `status`: the HTTP status code\n - `contents`: the response body\n - `headers`: an object of response header name/value pairs\n\nMethods:\n\n - `getRequest`: gets the `Request` object for this response\n - `getStatus`/`setStatus`: gets/sets the HTTP response status code\n - `getContents`/`setContents`: gets/sets the response body content\n - `getHeaders`/`setHeaders`: gets/sets the `Headers` object (see \"The Headers Object\" below)\n - `isSuccessful`: Checks if the response status code is in the 200 range\n\n```javascript\nhttp.get('http://www.example.com').send().then(function(response) {\n    var request = response.getRequest();\n    var contents = response.getContents();\n});\n```\n\n## The Headers Object\nThe `Headers` class is used by `Request` and `Response`. To get the object, call the `getHeaders` method.\n\n```javascript\nvar headers = request.getHeaders();\n```\n\n`Headers` objects have the following methods:\n\n - `get(name)`: Gets the value for the given header. Returns `undefined` if the header is not set.\n - `set(name, value)`: Sets the value for the given header name.\n - `all()`: Returns a plain object of header name/value pairs.\n - `clear()`: Empties the headers.\n - `setObject(object)`: Adds all the given name/value pairs in `object`. Does not clear existing headers.\n - `getContentType`: Gets the content-type of the message if it is set.\n\nHeader case is always maintained when stored, but the `get` method searches case-insensitively.\nThis means you don't have to worry about case when using the `get` method, but the object returned\nfrom `all()` will have its keys in the case you specified.\n\nA `Headers` instance can also be created manually with the constructor and passed in anywhere that accepts a headers argument. The constructor takes a single argument, a plain object of header name/value pairs.\n\n```javascript\nvar headers = new Headers({\n    'Content-type': 'application/json'\n});\nvar request = http.get('http://example.com/api/person', {id: 123}, headers);\n```\n\n## Events\nThe `Http` instance has two events:\n\n- `http.request`: Fired when a request is sent\n- `http.response`: Fired when a response is returned\n\nTo subscribe to these events, you must get the dispatcher object:\n\n```javascript\nvar dispatcher = http.getDispatcher();\n```\n\nThe dispatcher is an instance of [Hoopla](https://github.com/justinhoward/hoopla). You can subscribe to an event with the `addListener` method. See the Hoopla documentation for more details.\n\nThe event objects are instances of `Hoopla.Event` with the addition of methods to get/set the request or response object.\n\n### http.request\n\nThis event allows listeners to handle and modify requests before they are sent to the driver. The event object is a `Hoopla.Event` instance with the addition of two methods:\n\n - `getRequest`: Gets the request object\n - `setRequest`: Overrides the request object to be sent\n\n```javascript\ndispatcher.addListener('http.request', function(event) {\n    var json = JSON.stringify(event.getRequest().getContents());\n    event.getRequest().setContents(json);\n});\n```\n\nThis handler converts all request contents to JSON before sending them. At a basic level, this is how the JsonExtension works (see Extensions below).\n\n### http.response\n\nThis event allows listeners to handle and modify responses before they get passed back to the caller. The event object is a `Hoopla.Event` instance with the addition of two methods:\n\n - `getResponse`: Gets the response object\n - `setResponse`: Overrides the response object to be returned\n\n```javascript\ndispatcher.addListener('http.response', function(event) {\n    if (!event.getResponse().isSuccessful()) {\n        console.error('An HTTP request failed');\n    }\n});\n```\n\n### Setting the dispatcher\n\nBy default, `Http` constructs a dispatcher object for you. However, if you are using recite as part of a larger application, you may want to use your own dispatcher. You can construct your `Http` instance with a custom version of the dispatcher by specifying it as a second argument.\n\n```javascript\nvar dispatcher = new Hoopla();\n\n// The first argument is the driver. Read about those below\nvar http = new Http(null, dispatcher);\n```\n\n## Drivers\n\nDrivers are the back-end of Recite. They do the actual communication over HTTP.\nRecite can use different drivers depending on your environment or preference.\n\nDrivers can be set by passing them as the first argument when constructing your\nHttp instance.\n\n### The default driver\n\nYou may have noticed that we didn't pass any drivers to the Http constructor in\nsome of the examples above. That is because Recite tries to automatically\nchoose the best driver for your environment. In the browser, that is the\nXmlHttpRequestDriver. In node, it's the NodeDriver. If that is right for\nyour use-case, you never need to construct a driver manually.\n\n### XmlHttpRequestDriver\n\nThis driver is for use in browsers and sends requests with AJAX. To use it simply create\nan instance of `Http.drivers.XmlHttpRequestDriver`.\n\n```javascript\nvar driver = new Http.drivers.XmlHttpRequestDriver();\nvar http = new Http(driver);\n```\n\nThat's it! Now your requests will be sent with AJAX.\n\n### NodeHttpDriver\n\nThis driver uses the built-in `http` and `https` modules in node.js.\n\n```javascript\nvar driver = new Http.drivers.NodeDriver();\nvar http = new Http(driver);\n```\n\n### Custom Drivers\n\nRecite is implementation agnostic. That means the back-end can use any HTTP library you want.\n`XmlHttpRequestDriver` and `NodeDriver` are provided, however if you use a different library,\nit is easy to hook into Recite. All you have to do is implement the `send(request, callback)` method.\n\nRecite will call your driver's `send` method when the user calls `Http.send`.\nThe driver `send` method takes two arguments. The first, `request`, is the `Request` object to be sent.\nThe second is a callback that you need to call when your driver gets a response. The callback takes\na `Response` instance as an argument.\n\nHere, we construct a very simple driver that always returns a successful response.\n\n```javascript\nvar driver = {\n    send: function(request, callback) {\n        var response = new Response(request, 200);\n        callback(response);\n    };\n}\nvar http = new Http(driver);\n```\n\nWe could also use a constructor function and a prototype to do the same thing.\n\n```javascript\nfunction OkDriver() {}\n\nOkDriver.prototype.send = function(request, callback) {\n    var response = new Response(request, 200);\n    callback(response);\n};\n\nvar http = new Http(new OkDriver());\n```\n\n## Extensions\n\nYou can extend Recite's functionality by adding extensions. To add an extension, use the\n`Http.addExtension` method.\n\n```javascript\nvar jsonExtension = new Http.extensions.JsonExtension();\nhttp.addExtension(jsonExtension);\n```\n\n### JsonExtension\n\nThe built-in `JsonExtension` adds shortcuts for sending JSON requests. If the `content-type` of a request or response is `application/json`, the body of the request will be converted to/from JSON automatically.\n\n```javascript\nhttp.post('http://example.com/api/person', {name: 'Justin'}, {\n    'content-type': 'application/json'\n}).send().then(function(response) {\n    console.log('Id is ' + response.getContents().id);\n});\n```\n\nThat's a bit wordy, so the extension also adds the `getJson`, `postJson`, and `requestJson` methods for you. These\nset the 'content-type' and 'accepts' headers of your request to 'application/json'. Let's use the\n`postJson` method to send the above request.\n\n```javascript\nhttp.postJson('http://example.com/api/person', {name: 'Justin'}).send().then(function(response) {\n    console.log('Id is ' + response.getContents().id);\n});\n```\n\n### FormExtension\n\nThe `FormExtension` adds `multipart/form-data` encoding. If the `content-type`\nof a request is set, the body of the request will be automatically encoded.\n\n```javascript\nhttp.post('http://example.com/api/person', {name: 'Justin'}, {\n  'content-type': 'multipart/form-data'\n}).send();\n```\n\nAlso, like `JsonExtension`, there are shortcuts for `postForm` and\n`requestForm`.\n\n```javascript\nhttp.postForm('http://example.com/api/person', {name: 'Justin'}).send();\nhttp.requestForm('PUT', 'http://example.com/api/person/1', {name: 'Justin Howard'}).send();\n```\n\nYou can also build a `FormData` instance manually and send that. In the browser,\nuse the native `FormData` class, in node, use the `form-data` npm package.\n\n```javascript\n// If you're in node, require the form-data package\n// In the browser FormData is available globally\nvar FormData = require('form-data');\n\nvar form = new FormData();\nform.append('name', 'Justin');\nhttp.postForm('http://example.com/api/person', form).send();\n```\n\n### UrlPrefixExtension\n\nThe `UrlPrefixExtension` simply allows you to prefix all request URLs with a given string.\nYou could use this to prepend your domain name or application path to your API requests to\navoid duplicating it throughout your application.\n\n```javascript\nvar http = new Http();\nhttp.addExtension(new UrlPrefixExtension('http://example.com'));\n\nhttp.get('/api/person').send();\n// this sends a request to http://example.com/api/person\n```\n\n### Custom Extensions\n\nIt's easy to create your own extensions. Extensions only require one method,\nthe `register(http)` method. We're going to implement an extension that logs unsuccessful\nrequests.\n\n```javascript\nvar logExtension = {\n    register: function(http) {\n        http.getDispatcher().addListener('http.response', function(event) {\n            if (!event.isSuccessful()) {\n                console.log('Unsuccessful request');\n            }\n        });\n    }\n};\nhttp.addExtension(logExtension);\n```\n\nWe can also use a constructor function and prototype to do the same thing.\n\n```javascript\nfunction LogExtension() {}\n\nLogExtension.prototype.register = function(http) {\n    http.getDispatcher().addListener('http.response', function(event) {\n        if (!event.isSuccessful()) {\n            console.log('Unsuccessful request');\n        }\n    });\n};\nhttp.addExtension(new LogExtension());\n```\nCheck out the built-in `JsonExtension` for a more complete example.\n","created":"2014-12-29T02:58:21.284Z","modified":"2016-01-04T18:21:57.233Z","lastPublisher":{"name":"jmhoward","email":"jmhoward0@gmail.com"},"owners":[{"name":"jmhoward","email":"jmhoward0@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"recite","_nodeVersion":"4.2.4","_npmUser":{"name":"jmhoward","email":"jmhoward0@gmail.com"},"_npmVersion":"2.14.12","_rev":"1-bbb676e449c8a4065a7b0217966591d3","_shasum":"41435f3e10ded31bd3cc6b02afc25b58713d4290","author":{"name":"Justin Howard","email":"jmhoward0@gmail.com"},"bugs":{"url":"https://github.com/justinhoward/recite/issues"},"directories":{},"dist-tags":{"latest":"0.4.0"},"dist":{"shasum":"41435f3e10ded31bd3cc6b02afc25b58713d4290","tarball":"http://registry.npmjs.org/recite/-/recite-0.4.0.tgz"},"maintainers":[{"name":"jmhoward","email":"jmhoward0@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-01-04T18:21:57.233Z","created":"2014-12-29T02:58:21.284Z","0.0.1":"2014-12-29T02:58:21.284Z","0.1.0":"2015-02-26T03:43:52.856Z","0.1.1":"2015-02-26T05:53:15.411Z","0.1.2":"2015-02-27T22:25:15.389Z","0.2.0":"2015-08-26T22:23:32.587Z","0.2.1":"2015-08-28T03:19:08.575Z","0.2.2":"2015-08-28T03:54:39.007Z","0.2.3":"2015-08-28T04:17:18.996Z","0.2.4":"2015-10-26T21:57:18.006Z","0.2.5":"2015-12-11T16:30:33.423Z","0.3.1":"2015-12-16T19:50:19.173Z","0.4.0":"2016-01-04T18:21:57.233Z"}}}