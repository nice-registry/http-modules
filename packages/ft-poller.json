{"name":"ft-poller","version":"2.9.3","repository":"https://github.com/Financial-Times/ft-poller","license":"MIT","description":"An http client to periodically fetch and cache data from web services","main":"./src/server.js","dependencies":{"isomorphic-fetch":"^2.0.0","n-eager-fetch":"^2.0.0"},"devDependencies":{"@financial-times/n-gage":"^1.1.7","chai":"^3.3.0","eslint":"^2.9.0","lintspaces-cli":"^0.1.1","mocha":"^2.3.3","nock":"^2.13.0","npm-prepublish":"^1.2.2","sinon":"^1.10.3","timer-shim":"^0.3.0"},"config":{"pre-git":{"pre-commit":["secret-squirrel"]}},"scripts":{"commit":"commit-wizard"},"homepage":"https://github.com/Financial-Times/ft-poller#readme","versions":[{"number":"0.0.1","date":"2014-07-28T09:59:18.308Z"},{"number":"0.0.2","date":"2014-07-28T10:12:05.308Z"},{"number":"0.0.3","date":"2014-07-28T10:37:42.410Z"},{"number":"0.0.4","date":"2014-08-26T16:14:40.425Z"},{"number":"2.0.3","date":"2015-08-28T12:51:09.802Z"},{"number":"2.1.0","date":"2015-09-28T16:25:35.566Z"},{"number":"2.1.1","date":"2015-09-29T10:09:55.019Z"},{"number":"2.2.0","date":"2015-10-26T14:30:56.677Z"},{"number":"2.3.0","date":"2015-11-05T09:34:29.189Z"},{"number":"2.3.1","date":"2015-11-05T12:17:13.572Z"},{"number":"2.3.2","date":"2015-11-18T12:46:25.419Z"},{"number":"2.4.0","date":"2015-12-01T10:03:42.143Z"},{"number":"2.5.0","date":"2015-12-01T10:05:05.432Z"},{"number":"2.6.0","date":"2015-12-01T10:26:24.581Z"},{"number":"2.7.0","date":"2016-09-21T14:30:11.721Z"},{"number":"2.8.0","date":"2016-09-28T09:13:52.066Z"},{"number":"2.8.1","date":"2016-10-21T08:46:27.239Z"},{"number":"2.8.5","date":"2016-12-12T14:09:39.684Z"},{"number":"2.8.6","date":"2016-12-15T10:16:44.905Z"},{"number":"2.9.0","date":"2016-12-19T11:39:16.076Z"},{"number":"2.9.1","date":"2017-02-27T17:28:07.670Z"},{"number":"2.9.2","date":"2017-04-21T14:36:09.747Z"},{"number":"2.9.3","date":"2017-05-30T08:15:10.768Z"}],"readme":"\nScheduled, asynchronous JSON fetching for Node.js applications. [Background](#background);\n\n### installation\n\n```\nnpm install ft-poller\n```\n\n### API\nYou can create an instance of Poller like so,\n\n```\nvar Poller = require('ft-poller');\nvar p = new Poller(config);\n```\n\nWhere `config` is an object with the following properties\n\n* `url` [required]: Url to fetch data from\n* `defaultData` [recommended]: Data to return if the poller is yet to make a successful request. Typically this will be an empty object of the same type/structure as a successful response e.g. if a successful response would give you an array of users then set `defaultData: []`\n* `options` [optional]: options object to pass to isomorphic-fetch. If optiosn is not defined or doesn't contain a `timeout` property, request timeout will be set to 4000ms by default. If `retry` is specified then n-eager-fetch is used to send the request instead of fetch\n* `refreshInterval` [default: 60000]: Number of milliseconds to wait between request for data\n* `autostart` [default: false]: Whether to start the poller automatically when the instance is created\n* `parseData` [optional]: function to post-process the data returned by the request. Should return the post-processed data e.g\n```\nparseData: function (data) {\n    return data.rows;\n}\n```\n\n`parseData` can be any function you like and there's nothing to stop you using it to mutate any other variables in scope.\n\n\n#### methods\n\n* `start()` - Starts the poller. If passed an object `{ initialRequest: true }` it will send its first request immediately, otherwise it will wait until `config.refreshInterval` milliseconds. Returns a promise for the result of the first request (if `initialRequest` is true), or an empty resolved Promise otherwise\n\n* `stop()` - Stops polling\n\n* `getData()` - Returns the last set of data retrieved from the server (post-processed if `parseData` function exists)\n\n#### Events\n\n* `error` - emits an error whenever a request returns with an error\n* `ok` - emits the response whenever a request returns successfully\n\n\n### Background\n\nThe classic request cycle for a web application follows a call from a client\nto the server, which in turn makes one or more further requests to some\nunderlying service(s).\n\n                                    +---> Web service 1 --> Data\n                                    |\n    Client ---> Presentation tier --|---> Web service 2 --> Data\n                                    |\n                                    +---> Web service 3 --> Data\n\nOnce the data has been retrieved the response makes its way back through the\nvarious layers to the client.\n\nThis causes two problems.\n\nFirstly, your response is dependent on the slowest service to respond. If every\nrequest is hanging around waiting for 'the slow one' your performance is pegged\nto the worst performing part of your application.\n\nSecondly, by far the slowest thing in this type of architecture is the\nround-trip between the presentation tier and the service(s). The more of these\nopen connections you have hanging around, waiting to close, the greater the\nburden you place on your server.\n\n#### Async\n\nOften though, and this is especially true of News sites, the data doesn't\nchange radically from second to second so this round trip is wasted effort.\n\nIt's much more efficient for each presentation tier server to periodically\nfetch the data it needs (or listen for a message to signal when new content is\navailable), stash it in memory, then use that to service any incoming requests.\n\nThis suits a [microservice\narchitecture](http://martinfowler.com/articles/microservices.html), where many\ndiscrete modules, APIs etc. need to be assembled by a presentation tier before\nbeing rendered out to the client (as HTML, JSON etc.).\n\nThis pattern (of asynchronous fetching) allows the presentation tier to focus on\nbuilding a response from existing data (in memory) and sending it back out the\nfront door as quickly as possible.\n","created":"2014-07-28T09:59:18.308Z","modified":"2017-05-30T08:15:10.768Z","lastPublisher":{"name":"financial-times","email":"strategic.products@ft.com"},"owners":[{"name":"commuterjoy","email":"matt@commuterjoy.co.uk"},{"name":"financial-times","email":"strategic.products@ft.com"}],"other":{"_attachments":{},"_from":".","_id":"ft-poller","_nodeVersion":"4.7.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ft-poller-2.9.3.tgz_1496132109879_0.9565702076070011"},"_npmUser":{"name":"financial-times","email":"strategic.products@ft.com"},"_npmVersion":"2.15.11","_rev":"8-9d1f9cf319dfabbce953ed4223b638e1","_shasum":"a01fdc646ad15630f67607625124afe1d8c86218","bugs":{"url":"https://github.com/Financial-Times/ft-poller/issues"},"directories":{"lib":"./lib"},"dist-tags":{"latest":"2.9.3"},"dist":{"shasum":"a01fdc646ad15630f67607625124afe1d8c86218","tarball":"https://registry.npmjs.org/ft-poller/-/ft-poller-2.9.3.tgz"},"maintainers":[{"name":"commuterjoy","email":"matt@commuterjoy.co.uk"},{"name":"financial-times","email":"strategic.products@ft.com"}],"readmeFilename":"README.md","time":{"modified":"2017-05-30T08:15:10.768Z","created":"2014-07-28T09:59:18.308Z","0.0.1":"2014-07-28T09:59:18.308Z","0.0.2":"2014-07-28T10:12:05.308Z","0.0.3":"2014-07-28T10:37:42.410Z","0.0.4":"2014-08-26T16:14:40.425Z","2.0.3":"2015-08-28T12:51:09.802Z","2.1.0":"2015-09-28T16:25:35.566Z","2.1.1":"2015-09-29T10:09:55.019Z","2.2.0":"2015-10-26T14:30:56.677Z","2.3.0":"2015-11-05T09:34:29.189Z","2.3.1":"2015-11-05T12:17:13.572Z","2.3.2":"2015-11-18T12:46:25.419Z","2.4.0":"2015-12-01T10:03:42.143Z","2.5.0":"2015-12-01T10:05:05.432Z","2.6.0":"2015-12-01T10:26:24.581Z","2.7.0":"2016-09-21T14:30:11.721Z","2.8.0":"2016-09-28T09:13:52.066Z","2.8.1":"2016-10-21T08:46:27.239Z","2.8.5":"2016-12-12T14:09:39.684Z","2.8.6":"2016-12-15T10:16:44.905Z","2.9.0":"2016-12-19T11:39:16.076Z","2.9.1":"2017-02-27T17:28:07.670Z","2.9.2":"2017-04-21T14:36:09.747Z","2.9.3":"2017-05-30T08:15:10.768Z"}}}