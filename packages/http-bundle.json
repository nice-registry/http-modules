{"name":"http-bundle","version":"1.0.0","description":"Generic http handler for generated bundles","main":"index.js","scripts":{"test":"mocha test.js"},"repository":"https://github.com/conradz/http-bundle","keywords":["bundle","http","handler","middleware","bundling"],"license":"BSD","homepage":"https://github.com/conradz/http-bundle","devDependencies":{"mocha":"^1.21.3","request":"^2.39.0"},"dependencies":{"p-promise":"^0.4.6"},"gitHead":"4ea790a299946bfa3650df439ccc09c90b2a2d1f","versions":[{"number":"1.0.0","date":"2014-08-06T02:11:54.723Z"}],"readme":"# http-bundle\n\n[![Build Status](http://img.shields.io/travis/conradz/http-bundle.svg)](https://travis-ci.org/conradz/http-bundle)\n[![NPM](http://img.shields.io/npm/v/http-bundle.svg)](https://npmjs.org/package/http-bundle)\n\nGeneric node.js HTTP handler for generated bundles\n\nThis is great for serving browserify bundles, generated css, or any other\ncontent that is generated infrequently. It automatically gzips the result and\nimplements ETag caching.\n\n## example\n\n```js\nvar bundle = require('http-bundle');\nvar http = require('http');\n\nvar b = bundle({\n    compile: compile,\n    type: 'text/css'\n});\n\nvar server = http.createServer(b);\nserver.listen(8000);\n\nfunction compile(cb) {\n    // usually a more elaborate compilation process\n    cb(null, '.css { content: \"some css\"; }');\n}\n```\n\n## api\n\n```\nhttp-bundle(opts)\n```\n\nReturns an HTTP handler function that serves the bundle when requested. The\nreturned function can be used as Express/Connect middleware or as a normal HTTP\nserver handler function.\n\nThe `compile` function is required to be specified in the `opts` object. It\nwill be called as `compile(opts, callback)` to generate the bundle the first\ntime it is requested. The `opts` object is the same as the `opts` passed to the\n`http-bundle` function.\n\nInside the `compile` function you can call `this.invalidate()` to force the\nbundle to be recompiled the next time it is requested. Usually you want to save\nthis function and call it later (for example from a file watcher).\n\n### options\n\n * `compile`: The function that will be called when the bundle is first\n   requested. It must call the callback with an optional error and the result.\n * `type`: (optional) A string specifying the `Content-Type` to set on the\n   result.\n","created":"2014-08-06T02:11:54.723Z","modified":"2014-08-06T02:11:54.723Z","lastPublisher":{"name":"conradz","email":"me@conradz.com"},"owners":[{"name":"conradz","email":"me@conradz.com"}],"other":{"_attachments":{},"_from":".","_id":"http-bundle","_npmUser":{"name":"conradz","email":"me@conradz.com"},"_npmVersion":"1.4.23","_rev":"1-255bb05720c7adcf0139de229b96e3ed","_shasum":"9c0bc5277de67d1ce1ae098d73e1a0e61feb3fcc","author":{"name":"Conrad Zimmerman","email":"me@conradz.com"},"bugs":{"url":"https://github.com/conradz/http-bundle/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"9c0bc5277de67d1ce1ae098d73e1a0e61feb3fcc","tarball":"http://registry.npmjs.org/http-bundle/-/http-bundle-1.0.0.tgz"},"maintainers":[{"name":"conradz","email":"me@conradz.com"}],"readmeFilename":"README.md","time":{"modified":"2014-08-06T02:11:54.723Z","created":"2014-08-06T02:11:54.723Z","1.0.0":"2014-08-06T02:11:54.723Z"}}}