{"name":"chain-request","version":"0.0.7","description":"A simple chainable, readable object with the intense to make speaking HTTP sane.","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/lotterfriends/chain-request","keywords":["chain","request","chain of responsibility","patter","http","https","fileupload","post","get","put","request"],"license":"MIT","homepage":"https://github.com/lotterfriends/chain-request#readme","dependencies":{"mime":"^1.3.4","querystring":"^0.2.0"},"gitHead":"6930bb6080bfa34d4e6429f29a4654c663aa66a8","versions":[{"number":"0.0.1","date":"2015-10-05T09:29:55.275Z"},{"number":"0.0.2","date":"2015-10-05T11:46:51.815Z"},{"number":"0.0.3","date":"2015-10-05T12:06:50.606Z"},{"number":"0.0.4","date":"2015-10-05T12:07:59.118Z"},{"number":"0.0.5","date":"2015-10-05T12:43:43.288Z"},{"number":"0.0.6","date":"2015-10-07T09:01:35.185Z"},{"number":"0.0.7","date":"2015-10-08T15:51:01.806Z"}],"readme":"# chain-request\nA simple chainable, readable object with the intense to make speaking HTTP sane.\n\n## Installation\n```bash\n> npm install --save chain-request\n```\n\n## Usage\nJust include the module and name it, e.g.:\n```javascript\nvar request = require('chain-request');\n```\n\n## Examples\n\nUse the google REST-API\n```javascript\nnew request()\n\t.get('http://ajax.googleapis.com/ajax/services/search/web')\n\t.expects(request.CONTENT_TYPE.JSON)\n\t.data({\n\t\tv: '1.0',\n\t\tq: 'test'\n\t})\n\t.send(function(data) {\n\t\tdata.responseData.results.forEach(function(result) {\n\t\t\tconsole.log(result);\n\t\t});\n\t});\n```\n\nUpload a file with authorization Header\n```javascript\nnew request()\n\t.post('https://build.phonegap.com/api/v1/apps')\n\t.expects(request.CONTENT_TYPE.JSON)\n\t.addAuthorizationHeader('Basic: a2Vrc2U6a3VjaGVu')\n\t.data('app.zip')\n\t.sendMultipart()\n\t.send(function(result) {\n\t\tconsole.log(result);\n\t})\n```\nGet a specific jira task\n```javascript\nnew request()\n\t.get('https://my-jira.tld/rest/api/2/issue/FOO-39')\n\t.expects(request.CONTENT_TYPE.JSON)\n\t.addAuthorizationHeader('Basic: a2Vrc2U6a3VjaGVu')\n\t.send(function(result) {\n\t\tconsole.log(result);\n\t})\n```\n\n## API\n\n### Functions\n<dl>\n<dt><a href=\"#Request\">Request([debug])</a></dt>\n<dd><p>A simple chainable, readable object with the intense to make speaking HTTP sane.</p>\n</dd>\n<dt><a href=\"#get\">get()</a> ⇒ <code>object</code></dt>\n<dd><p>Make a get request</p>\n</dd>\n<dt><a href=\"#put\">put()</a> ⇒ <code>object</code></dt>\n<dd><p>make a put request</p>\n</dd>\n<dt><a href=\"#post\">post()</a> ⇒ <code>object</code></dt>\n<dd><p>make a post request</p>\n</dd>\n<dt><a href=\"#patch\">patch()</a> ⇒ <code>object</code></dt>\n<dd><p>make a patch request</p>\n</dd>\n<dt><a href=\"#delete\">delete()</a> ⇒ <code>object</code></dt>\n<dd><p>make a delete request</p>\n</dd>\n<dt><a href=\"#options\">options()</a> ⇒ <code>object</code></dt>\n<dd><p>make a options request</p>\n</dd>\n<dt><a href=\"#head\">head()</a> ⇒ <code>object</code></dt>\n<dd><p>make a head request</p>\n</dd>\n<dt><a href=\"#data\">data(data)</a> ⇒ <code>object</code></dt>\n<dd><p>set the data for the request</p>\n</dd>\n<dt><a href=\"#addHeader\">addHeader(key, value)</a> ⇒ <code>object</code></dt>\n<dd><p>add a header</p>\n</dd>\n<dt><a href=\"#allowUnauthorized\">allowUnauthorized()</a> ⇒ <code>object</code></dt>\n<dd><p>Don&#39;t verifie against the list of supplied CAs.</p>\n</dd>\n<dt><a href=\"#addAuthorizationHeader\">addAuthorizationHeader(authStr)</a> ⇒ <code>object</code></dt>\n<dd><p>set a authorization header</p>\n</dd>\n<dt><a href=\"#setSendContentType\">setSendContentType(contentType)</a> ⇒ <code>object</code></dt>\n<dd><p>set which type of format you want to send, default ist json</p>\n</dd>\n<dt><a href=\"#sendsPlain\">sendsPlain()</a> ⇒ <code>object</code></dt>\n<dd><p>function to send plain text to the server only make sense with post or put</p>\n</dd>\n<dt><a href=\"#sendMultipart\">sendMultipart()</a> ⇒ <code>object</code></dt>\n<dd><p>defines a multipart request for files, used with post() and data(filename)</p>\n</dd>\n<dt><a href=\"#setBufferSize\">setBufferSize(bufferSize)</a> ⇒ <code>object</code></dt>\n<dd><p>set the buffer size for a multipart request default is 4 * 1024</p>\n</dd>\n<dt><a href=\"#setEncoding\">setEncoding(encoding)</a> ⇒ <code>object</code></dt>\n<dd><p>set the response encoding, default is utf-8</p>\n</dd>\n<dt><a href=\"#expects\">expects(type)</a> ⇒ <code>object</code></dt>\n<dd><p>set the format for the send callback, default is json</p>\n</dd>\n<dt><a href=\"#send\">send([callback])</a> ⇒ <code>object</code></dt>\n<dd><p>perform the previously created request</p>\n</dd>\n</dl>\n<a name=\"Request\"></a>\n### Request([debug])\nA simple chainable, readable object with the intense to make speaking HTTP sane.\n\n**Kind**: global function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [debug] | <code>boolean</code> | <code>false</code> | enable debugging with true |\n\n<a name=\"get\"></a>\n### get() ⇒ <code>object</code>\nmake a get request\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n<a name=\"put\"></a>\n### put() ⇒ <code>object</code>\nmake a put request\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n<a name=\"post\"></a>\n### post() ⇒ <code>object</code>\nmake a post request\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n<a name=\"patch\"></a>\n### patch() ⇒ <code>object</code>\nmake a patch request\n\n<a name=\"delete\"></a>\n### delete() ⇒ <code>object</code>\nmake a delete request\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n<a name=\"options\"></a>\n### options() ⇒ <code>object</code>\nmake a options request\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n<a name=\"head\"></a>\n### head() ⇒ <code>object</code>\nmake a head request\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n<a name=\"data\"></a>\n### data(data) ⇒ <code>object</code>\nset the data for the request\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| data | <code>object</code> | data as json object |\n\n<a name=\"addHeader\"></a>\n### addHeader(key, value) ⇒ <code>object</code>\nadd a header\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| key | <code>string</code> | header key |\n| value | <code>string</code> | value of the header entry |\n\n<a name=\"allowUnauthorized\"></a>\n### allowUnauthorized() ⇒ <code>object</code>\nDon't verifie against the list of supplied CAs.\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n<a name=\"addAuthorizationHeader\"></a>\n### addAuthorizationHeader(authStr) ⇒ <code>object</code>\nset a authorization header\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| authStr | <code>string</code> | authirization string |\n\n<a name=\"setSendContentType\"></a>\n### setSendContentType(contentType) ⇒ <code>object</code>\nset which type of format you want to send, default ist json\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| contentType | <code>object</code> | a valid content type |\n\n<a name=\"sendsPlain\"></a>\n### sendsPlain() ⇒ <code>object</code>\nfunction to send plain text to the server only make sense with post or put\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n<a name=\"sendMultipart\"></a>\n### sendMultipart() ⇒ <code>object</code>\ndefines a multipart request for files, used with post() and data(filename)\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n<a name=\"setBufferSize\"></a>\n### setBufferSize(bufferSize) ⇒ <code>object</code>\nset the buffer size for a multipart request default is 4 * 1024\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| bufferSize | <code>number</code> | size in byte |\n\n<a name=\"setEncoding\"></a>\n### setEncoding(encoding) ⇒ <code>object</code>\nset the response encoding, default is utf-8\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| encoding | <code>string</code> | a valid encoding |\n\n<a name=\"expects\"></a>\n### expects(type) ⇒ <code>object</code>\nset the format for the send callback, default is json\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| type | <code>string</code> | a valid content type |\n\n<a name=\"send\"></a>\n### send([callback]) ⇒ <code>object</code>\nperform the previously created request\n\n**Kind**: global function  \n**Returns**: <code>object</code> - self  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [callback] | <code>function</code> | function called when the request is ready |\n\n","created":"2015-10-05T09:29:55.275Z","modified":"2015-10-08T15:51:01.806Z","lastPublisher":{"name":"lotterfriends","email":"npm@lotterfriends.net"},"owners":[{"name":"lotterfriends","email":"npm@lotterfriends.net"}],"other":{"_attachments":{},"_from":".","_id":"chain-request","_nodeVersion":"0.12.3","_npmUser":{"name":"lotterfriends","email":"npm@lotterfriends.net"},"_npmVersion":"3.2.2","_rev":"1-892a4fe1e296c44f70ccd3cf3476e847","_shasum":"e5ac3a86249ba01f0d9cdf9831d13f0921787877","author":{"name":"André Tarnowsky","email":"andre@tarnowsky.de","url":"http://lotterfriends.net"},"bugs":{"url":"https://github.com/lotterfriends/chain-request/issues"},"directories":{},"dist-tags":{"latest":"0.0.7"},"dist":{"shasum":"e5ac3a86249ba01f0d9cdf9831d13f0921787877","tarball":"http://registry.npmjs.org/chain-request/-/chain-request-0.0.7.tgz"},"maintainers":[{"name":"lotterfriends","email":"npm@lotterfriends.net"}],"readmeFilename":"README.md","time":{"modified":"2015-10-08T15:51:01.806Z","created":"2015-10-05T09:29:55.275Z","0.0.1":"2015-10-05T09:29:55.275Z","0.0.2":"2015-10-05T11:46:51.815Z","0.0.3":"2015-10-05T12:06:50.606Z","0.0.4":"2015-10-05T12:07:59.118Z","0.0.5":"2015-10-05T12:43:43.288Z","0.0.6":"2015-10-07T09:01:35.185Z","0.0.7":"2015-10-08T15:51:01.806Z"}}}