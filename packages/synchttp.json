{"name":"synchttp","version":"0.1.0","description":"Synchronous Node.js HTTP for API testing/scripting/automation","keywords":["synchronous","http","api","testing","scripting","automation"],"repository":"https://github.com/cyrus-and/synchttp","dependencies":{"fibers":"1.0.x","ws":"0.4.x"},"devDependencies":{"mocha":"*"},"scripts":{"test":"make test"},"homepage":"https://github.com/cyrus-and/synchttp","versions":[{"number":"0.0.1","date":"2014-06-30T19:58:24.366Z"},{"number":"0.1.0","date":"2014-07-03T14:56:49.440Z"}],"readme":"synchttp\n========\n\nSynchronous Node.js HTTP for API testing/scripting/automation.\n\nInstallation\n------------\n\n    npm install synchttp\n\nSample API usage\n----------------\n\n### Top 10 \"interestingness\" photos from Flickr\n\nThis snippet fetches a list of 10 images from Flickr and dump: title, owned and\nURL. An additional request is performed to fetch the user name.\n\n```javascript\nvar synchttp = require(synchttp);\nvar API_KEY = '<YOUR APP KEY>;\n\nsynchttp(function (sh) {\n    var response = sh\n        .secure(true)\n        .host('api.flickr.com')\n        .path('/services/rest/')\n        .query({\n            'api_key': API_KEY,\n            'method': 'flickr.interestingness.getList',\n            'format': 'json',\n            'nojsoncallback': 1,\n            'per_page': 10\n        }).get();\n    response.photos.photo.forEach(function (photo) {\n        var user = sh.query({\n            'api_key': API_KEY,\n            'method': 'flickr.people.getInfo',\n            'format': 'json',\n            'nojsoncallback': 1,\n            'user_id': photo.owner\n        }).get();\n        console.log(\n            '\"%s\" by \"%s\"\\n[https://www.flickr.com/photos/%s/%s]\\n',\n            photo.title,\n            user.person.username._content,\n            photo.owner,\n            photo.id\n        );\n    });\n});\n```\n\n### Blog API\n\nAssume you have a dummy API for your blog that allows you to create a post and\nthen to add some tags:\n\n    POST /api/posts/               # title, body\n    POST /api/posts/:post_id/tags/ # label\n    GET  /api/posts/:post_id\n\nIn the following snippet, the id of the new post is used to add the tags and to\nfinally fetch the whole post resource.\n\n```javascript\nvar synchttp = require('synchttp');\n\nsynchttp(function (sh) {\n    var response = sh.path('/api/posts/').post({\n        'title': 'Awesome post',\n        'body': 'Lorem ipsum...'\n    });\n\n    // the path is kept across the following requests...\n    sh.path('/api/posts/' + response.id + '/tags/');\n    ['nodejs', 'javascript', 'sh'].forEach(function (tag) {\n        // ... so only the body is needed here!\n        sh.post({\n            'label': tag\n        });\n    });\n\n    var post = sh.path('/api/posts/' + response.id).get();\n    console.log(JSON.stringify(post, null, 4));\n});\n```\n\nThis would result in something like:\n\n```json\n{\n    \"_id\": \"53b1ab76b2029860505e2c18\",\n    \"title\": \"Awesome post\",\n    \"body\": \"Lorem ipsum...\",\n    \"tags\": [\n        {\n            \"_id\": \"53b1ab76b2029860505e2c19\",\n            \"label\": \"nodejs\"\n        },\n        {\n            \"_id\": \"53b1ab76b2029860505e2c1a\",\n            \"label\": \"javascript\"\n        },\n        {\n            \"_id\": \"53b1ab76b2029860505e2c1b\",\n            \"label\": \"http\"\n        }\n    ]\n}\n```\n\nAPI\n---\n\n### Content types\n\nDefine how raw incoming/outgoing data should be parsed/formatted.\n\nActually supported:\n\n - `application/json` or `json`;\n - `application/x-www-form-urlencoded` or `urlencoded`.\n\n### module(callback)\n\nSingle entry point of this module, it runs `callback` in a synchronous\nenvironment.\n\n`callback` takes an object of type `Synchttp`.\n\n### Class: Synchttp\n\nThis object is used to issue HTTP commands to the server, and it maintains a set\nof connection parameters so there is no need to repeat parameters that do not\nchange in every request.\n\n```javascript\nsynchttp(function (sh) {\n    sh.host('example.com');\n    sh.path('/foo').get(); // GET http://example.com/foo\n    sh.path('/bar').get(); // GET http://example.com/bar\n    sh.path('/baz').get(); // GET http://example.com/baz\n});\n```\n\nParameters are set by calling method on this object, a sort of builder pattern\ncan be used. Only the final actions (`get`, `post`, etc.) actually perform the\ncommunication:\n\n```javascript\nsynchttp(function (sh) {\n    sh.host('example.com').port(1337).path('/foo/bar/baz').post({\n        'name': 'value'\n    });\n});\n```\n\nParameters come with a default value, if the corresponding method is called\nwithout arguments then the default value is restored:\n\n```javascript\nsynchttp(function (sh) {\n    sh.host('example.com').get(); // GET http://example.com/\n    sh.host().get(); // GET http://localhost/\n});\n```\n\n#### Connection parameters\n\n##### userAgent([userAgent])\n\nDefault `synchttp/<version>`.\n\nDefine the `User-Agent` to be send along with the HTTP requests.\n\n##### httpContentType([contentType])\n\nDefault `application/json`.\n\nDefine the content type to be used when sending messages to the server. For\nincoming messages instead the `Content-Type` header is used.\n\n##### wsContentType([contentType])\n\nDefault `application/json`.\n\nDefine the content type to be used when sending/receiving messages to/from the\nserver.\n\n##### host([host])\n\nDefault `localhost`.\n\nDefine the host to be reached.\n\n##### secure([secure])\n\nDefault `false`.\n\nDefine whether a secure connection should be used or not..\n\n##### port([port])\n\nDefault `80` or `443` according to the `secure` parameter.\n\nDefine the host port to be reached.\n\n##### path([path])\n\nDefault `/`.\n\nDefine the path component of the URL to query.\n\n##### query([query])\n\nDefault `{}`.\n\nDefine the key-value pairs to be used as query string.\n\n##### headers([headers])\n\nDefault `{}`.\n\nDefine the key-value pairs to be used as HTTP headers.\n\n##### auth([auth])\n\nDefault `undefined` (no authentication).\n\nDefine the basic HTTP authentication to use.\n\n#### HTTP Actions\n\nThese methods return the received payload as a JavaScript object according to\nthe `Content-Type` returned by the server (if possible). An exception of type\n`Error` is thrown in case of errors.\n\n##### get()\n\nPerform an HTTP `GET`.\n\n##### post(message)\n\nPerform an HTTP `POST`.\n\n##### put(message)\n\nPerform an HTTP `PUT`.\n\n##### delete()\n\nPerform an HTTP `DELETE`.\n\n#### WebSocket actions\n\nSend and receive messages through WebSockets; messages are properly\nparsed/formatted according to the value of the `wsContentType` parameter.\n\n##### ws()\n\nTry to establish a WebSocket to the server. A new WebSocket is created whenever\nthis method is called with a different resulting URL (according to the\nconnection parameters).\n\n##### send(message)\n\nSend a message through the WebSocket.\n\n##### receive()\n\nReceive a message from the WebSocket.\n","created":"2014-06-30T19:58:24.366Z","modified":"2014-07-03T14:56:49.440Z","lastPublisher":{"name":"cyrus-and","email":"cyrus.and@gmail.com"},"owners":[{"name":"cyrus-and","email":"cyrus.and@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"synchttp","_npmUser":{"name":"cyrus-and","email":"cyrus.and@gmail.com"},"_npmVersion":"1.4.9","_rev":"1-ee7c5f5f819f6481e741ad00a9b4dd3f","_shasum":"5b49a93dcca71dcb4e2e92e2820f6a6f161f08f8","author":{"name":"Andrea Cardaci","email":"cyrus.and@gmail.com"},"bugs":{"url":"http://github.com/cyrus-and/synchttp/issues"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"5b49a93dcca71dcb4e2e92e2820f6a6f161f08f8","tarball":"http://registry.npmjs.org/synchttp/-/synchttp-0.1.0.tgz"},"maintainers":[{"name":"cyrus-and","email":"cyrus.and@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-07-03T14:56:49.440Z","created":"2014-06-30T19:58:24.366Z","0.0.1":"2014-06-30T19:58:24.366Z","0.1.0":"2014-07-03T14:56:49.440Z"}}}