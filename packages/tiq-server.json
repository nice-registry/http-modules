{"name":"tiq-server","version":"0.0.1","description":"HTTP API server for tiq","main":"index.js","repository":"https://github.com/imiric/tiq-server","bin":{"tiq-server":"./index.js"},"keywords":["tiq","tag","bookmark","http","api","server"],"scripts":{"test":"./node_modules/.bin/mocha","coverage":"./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha -- --ui bdd"},"license":"MIT","homepage":"https://github.com/imiric/tiq-server","dependencies":{"lodash":"~2.4.1","hapi":"~4.1.3","tiq-db":"0.0.2","pg":"~3.1.0","docker-links":"~1.0.1"},"devDependencies":{"mocha":"~1.18.2","chai":"~1.9.1","a":"~0.4.3","istanbul":"~0.2.10","bluebird":"~1.2.4","lodash":"~2.4.1"},"versions":[{"number":"0.0.1","date":"2014-05-18T17:54:30.912Z"}],"readme":"tiq-server\n==========\n\nThis is an HTTP API server for [tiq](https://github.com/imiric/tiq).\n\nIt's essentially an HTTP interface to interacting with `tiq` data stored in\nPostgreSQL using [tiq-db](https://github.com/imiric/tiq-db).\n\n\nSetup\n-----\n\n### Docker\n\nClone this repo and run:\n\n```\n$ make build\n```\n\nThis will download and setup three [Docker](https://www.docker.io/) containers\nwith Ubuntu 14.04: one for PostgeSQL, one for nginx and one for tiq-server.\n\nTo start the servers run:\n```\n$ make\n```\n... which will make tiq-server (proxied behind nginx) available on\nhttp://localhost:8000/.\n\nIf you wish to change the port, run:\n\n```\n$ make PORT=<number>\n```\n\nYou can stop all containers with `make stop`.\n\n\n### Manual\n\nThis is more complicated, but essentially `npm install -g tiq-server`, install\nPostgreSQL (and optionally nginx), and configure and start everything manually.\n\nSave yourself the trouble, and just use Docker. :)\n\n\nUsage\n-----\n\nThe API accepts and returns only JSON encoded data.\n\nHere's how you add some tags to some text:\n\n```\nPOST / HTTP/1.1\nContent-Type: application/json\n\n{\"tokens\":[\"This too shall pass.\"],\"tags\":[\"quotes\",\"inspiring\"]}\n```\n\nTo tag some URLs:\n\n```\nPOST / HTTP/1.1\nContent-Type: application/json\n\n{\"tokens\":[\"http://duckduckgo.com/\"],tags\":[\"url\",\"search\",\"awesome\"]}\n```\n\n```\nPOST / HTTP/1.1\nContent-Type: application/json\n\n{\"tokens\":[\"http://www.bing.com/\"],\"tags\":[\"url\",\"search\",\"microsoft\"]}\n```\n\n```\nPOST / HTTP/1.1\nContent-Type: application/json\n\n{\"tokens\":[\"http://www.reddit.com/\"],\"tags\":[\"url\",\"timewaster\",\"funny\"]}\n```\n\nThen, to recall stuff tagged with `search`:\n```\nGET /?tags=search HTTP/1.1\n```\n->\n```\n{\"status\":\"success\",\"data\":[\"http://duckduckgo.com/\", \"http://www.bing.com/\"]}\n```\n\n... or both `search` and `awesome`:\n```\nGET /?tags=search&tags=awesome HTTP/1.1\n```\n->\n```\n{\"status\":\"success\",\"data\":[\"http://duckduckgo.com/\"]}\n```\n\nOr to get the tags associated with a token:\n```\nGET /?tags=http://duckduckgo.com/ HTTP/1.1\n```\n->\n```\n{\"status\":\"success\",\"data\":[\"url\",\"search\",\"awesome\"]}\n```\n\nNote that the string MAY be encoded (e.g. `/?tags=http%3A%2F%2Fduckduckgo.com%2F`),\nwhich should return the same result.\n\n\nYou can also tag multiple things at once:\n```\nPOST / HTTP/1.1\nContent-Type: application/json\n\n{\"tokens\":[\"http://www.engadget.com/\",\"http://www.theverge.com/\"],\"tags\":[\"url\",\"tech\"]}\n```\n\nDoing the reverse is equivalent to the above:\n```\nPOST / HTTP/1.1\nContent-Type: application/json\n\n{\"tags\":[\"http://www.engadget.com/\",\"http://www.theverge.com/\"],\"tokens\":[\"url\",\"tech\"]}\n```\n\n\nBy default, the `public` namespace is used if none is specified. But you can\nuse any other namespace you want to partition the data. For example:\n```\nPOST /john HTTP/1.1\nContent-Type: application/json\n\n{\"tokens\":\"http://myprivateblog.com/\",\"tags\":[\"url\",\"blog\"]}\n```\n\nNow to get things tagged with `url` under the `john` namespace:\n```\nGET /john?tags=url HTTP/1.1\n```\n->\n```\n{\"status\":\"success\",\"data\":[\"http://myprivateblog.com/\"]}\n```\n\n\nConfiguration\n-------------\n\nThe configuration file by default is expected in `$XDG_CONFIG_HOME/tiq-server/config.json`\n(where `$XDG_CONFIG_HOME` is `$HOME/.config`).\n\nHere are the options you can set in the configuration file:\n\n- `port`: The port the server will listen on. [default: `8000`]\n- `database.client`: The RDBMS client to use. One of `\"sqlite3\"`, `\"pg\"` or `\"mysql\"`.\n  [default: `\"pg\"`]\n- `database.connection.host`: Host name or IP address to connect to. [default: `\"localhost\"`]\n- `database.connection.port`: Port to connect to. [default: `5432`]\n- `database.connection.user`: Username used to connect to the host. [default: `null`]\n- `database.connection.password`: Password used to connect to the host. [default: `null`]\n- `database.connection.database`: Database name to use. [default: `\"tiq\"`]\n\nEssentially, everything under `database` is what [tiq-db](https://github.com/imiric/tiq-db)\nexpects.\n\nYou can also change some of these at runtime using environment variables that\nfollow [Docker linking naming conventions](http://docs.docker.io/use/working_with_links_names/):\n\n- `host`: `$DB_PORT_<NUM>_TCP_ADDR`\n- `port`: `$DB_PORT_<NUM>_TCP_PORT`\n- `user`: `$DB_ENV_USER`\n- `password`: `$DB_ENV_PASSWORD`\n\nLicense\n-------\n\n[MIT](LICENSE)\n","created":"2014-05-18T17:52:44.826Z","modified":"2014-05-18T17:54:30.912Z","lastPublisher":{"name":"imiric","email":"imiric@gmail.com"},"owners":[{"name":"imiric","email":"imiric@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"tiq-server","_npmUser":{"name":"imiric","email":"imiric@gmail.com"},"_npmVersion":"1.3.10","_rev":"1-9b3f1d3d4e9da9f5c535bd9fa389bb07","author":{"name":"Ivan MiriÄ‡","email":"imiric@gmail.com"},"bugs":{"url":"https://github.com/imiric/tiq-server/issues"},"directories":{},"dist-tags":{"latest":"0.0.1"},"dist":{"shasum":"2da635fc31c37420bfc58d04b794708191719544","tarball":"http://registry.npmjs.org/tiq-server/-/tiq-server-0.0.1.tgz"},"maintainers":[{"name":"imiric","email":"imiric@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-05-18T17:54:30.912Z","created":"2014-05-18T17:52:44.826Z","0.0.1":"2014-05-18T17:54:30.912Z"}}}