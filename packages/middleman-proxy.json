{"name":"middleman-proxy","version":"0.1.2","description":"HTTP Proxy with content caching.","keywords":["forward proxy","proxy cache","api cache","caching","proxy","http","api"],"homepage":"https://github.com/nickpisacane/middleman","engines":{"node":">=0.10.0"},"license":"MIT","repository":"https://github.com/nickpisacane/middleman","main":"index.js","dependencies":{"bluebird":"^2.10.2","bytes":"^2.1.0","lodash.omit":"^3.1.0","lru-cache":"^2.7.0","object-assign":"^4.0.1","object-sizeof":"^1.0.6","request":"^2.64.0","url-join":"0.0.1"},"devDependencies":{"coveralls":"^2.11.4","express":"^4.13.3","istanbul":"^0.3.22","mocha":"^2.3.3","should":"^7.1.0","standard":"^7.1.2","supertest":"^1.1.0"},"scripts":{"test":"standard lib && ./node_modules/.bin/_mocha -R spec test/*_test.js","test-ci":"istanbul cover ./node_modules/.bin/_mocha -- -R landing ./test/*_test.js"},"gitHead":"79b64531b89dcce247c3eb46c73fd13f1c597eba","versions":[{"number":"0.0.1","date":"2015-10-19T04:02:40.631Z"},{"number":"0.0.2","date":"2015-10-20T03:32:36.866Z"},{"number":"0.0.3","date":"2015-10-20T04:15:19.888Z"},{"number":"0.0.4","date":"2015-10-20T04:38:19.734Z"},{"number":"0.0.5","date":"2015-10-20T04:50:58.612Z"},{"number":"0.0.6","date":"2015-10-20T17:55:00.671Z"},{"number":"0.0.7","date":"2015-10-22T21:25:45.331Z"},{"number":"0.0.8","date":"2015-10-23T04:23:46.547Z"},{"number":"0.1.0","date":"2015-10-29T22:00:58.168Z"},{"number":"0.1.1","date":"2015-11-02T03:48:19.010Z"},{"number":"0.1.2","date":"2016-06-25T01:56:32.005Z"}],"readme":"# Middleman\n  [![Travis][travis-image]][travis-url]\n  [![Coveralls][coveralls-image]][coveralls-url]\n\n\n  [![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\nHTTP proxy with content caching.\n* [Installation](#installation)\n* [Usage](#usage)\n* [Caching](#caching)\n* [Store Implementations](#store-implementations)\n* [Implemeting a Store](#implementing-a-store)\n* [Examples](#examples)\n* [API](#api)\n\n## Installation\n```sh\n$ npm install --save middleman-proxy\n```\n## Usage\n```js\nconst Middleman = require('middleman-proxy')\n\nconst proxy = new Middleman({\n  target: 'http://some.api.com',\n  maxAge: 3600000,\n  maxSize: '1MB'\n})\n  .createKey((req, url) => `${req.method}:${req.session.id}:${url.path}`)\n  .listen(3000, () => {\n    console.log('Proxing \"http://some.api.com\" on port 3000')\n  })\n```\n\n### Caching\nBy default, Middleman's cache is a Least-Recently-Used managed, in-memory cache,\nbut it can just as easily work with any persistent store.\n\nThe Cache really manages an index of \"keys\" that are associated with \"entries\" in the\nstore. The keys also contain the size in bytes of the associated entry, which allows\nthe LRU work properly. Basically, when a key is evicted, a call is\nmade to the store to deleted that entry. This allows the LRU to work even with\nout-of-memory stores. See [Implementing a Store](#implementing-a-store) for more\ndetails.\n\n### Store Implementations\n* [middleman-redis-store](https://github.com/nickpisacane/middleman-redis-store) A Redis based implementation.\n\n### Implementing a Store\nThe \"store\" is really just an interface, and a simple one at that.\n* Store#get(key)\n  -- returns a `Promise`, resolves the cache value if it exists, and `null` if not.\n* Store#set(key, value)\n  -- returns a `Promise`, resolves `value`\n* Store#del(key)\n  -- returns a `Promise`, resolves `true`\n\nMore than that, it's perfectly fine to resolve JSON strings; Middleman will\nautomatically take care of parsing.\n\n### Motivation\nRecently, I have been working on a project that depended upon a very\nslow api; up to 40+ seconds in some instances. Due to circumstances, a standalone\nproxy was not an option. While making a hand-rolled solution, I thought it would be useful to have an in-application caching proxy solution for small apps. So I made Middleman!\n\n## Examples\n\n#### Middleware\n```js\nconst Middleman = require('middleman-proxy')\nconst app = require('express')()\n\nconst proxy = new Middleman({\n  target: 'http://some.api.com'\n})\n\napp.use(proxy.handler())\n\n// OR\napp.use((req, res) => {\n  // do some stuff ...\n  proxy.http(req, res)  \n});\n\napp.get('/nameSpace', (req, res) => {\n  proxy.http(req, res, {\n    stripPrefix: '/nameSpace',\n    basePath: '/someBasePath'\n  })\n\n  // GET /nameSpace/path?foo=bar#baz\n  // => (Proxy) GET http://some.api.com/someBasePath/path?foo=bar#baz\n})\n\n// OR\napp.get('/nameSpace', proxy.handler({\n  stripPrefix: '/nameSpace',\n  basePath: '/someBasePath'\n}))\n```\n\n#### Request Headers\n```js\nconst Middleman = require('middleman-proxy')\nconst proxy = new Middleman({\n  target: 'http://some.api.com',\n  setHeaders: {\n    'X-API-Key': `${API_KEY}`,\n    'Authorization': `Bearer ${getAccessToken()}`\n  }\n})\n  .listen(3000)\n```\n\n### Ignoring Response Headers\n```js\nconst Middleman = require('middleman-proxy')\nconst proxy = new Middleman({\n  target: 'http://some.api.com',\n  ignoreHeaders: [\n    'X-Some-Header'\n  ]\n})\n```\n\n### Request Events\n```js\nconst Middleman = require('middleman-proxy')\nconst proxy = new Middleman({\n  target: 'http://some.api.com'\n})\n  .on('request', (req, res) => {\n    // For every request\n    res.setHeader('X-Always', 'true')\n  })\n  .on('proxy request', (req, res) => {\n    // For requests being proxied\n    res.setHeader('X-Proxied', 'true')\n  })\n  .on('cache request', (req, res) => {\n    // For requests with cached responses\n    res.setHeader('X-Cached', 'true')\n  })\n```\n\n## API\n#### Middleman([options])\n* target (String) URI of proxied host\n* setHeaders (Object) Headers to be sent with the request, when proxied. *Default* `{}`\n* ignoreHeaders (Array) Headers to be omitted from the proxy. *Default* `[]`\n* cacheMethods (String|Array<String>) HTTP Methods that should be cached for,\n  does not cache for any omited. *Default* `'any'`\n* maxAge (Number) The max age for cache entries, *Default* `Infinity`\n* maxSize (Number|String) The number (in bytes) for the maximum size of the cache.\n  *Default* `Infinity`. Note: If it is a string, it is parsed by the `bytes` library, hence\n  values like `'1KB'` or `'13MB'` are perfectly acceptable.\n* lru (Boolean) Use LRU to manage cache, *Default* `true`\n* store (Store) Custom store, *Default* `MemoryStore`. See\n [Implementing a Store](#implementing-a-store) for more details.\n* followRedirect (Boolean) Follow redirects from proxied host, *Defualt* `true`.\n* bypass (Function) A function that takes one argument: `res` (instance of http.IncomingMessage)\n  which is a response from the proxied host, and returns a boolean; `true` and the response is\n  *not* cached, `false` and the response is cached. *Default* `() => true`.\n* createKey (Function) A function that takes two arguments: `req` (http.IncomingMessage)\n  and `url` (Object) and returns a `key` for the cache entry. *Default*\n  `(req, url) => req.method + ':' + url.path`\n* httpError (Function) A function that handles http requests when there was an error\n  with the proxy or the store. *Default* 500 Response.\n\n#### Middleman#http(req, res, options)\n* req (http.IncomingMessage) request\n* res (http.ServerResponse) response\n* options (Object)\n* options.stripPrefix (String) Strip prefix from url. *Default* `''`\n* options.basePath (String) Append incoming url to this path\n(which is appended to the target), AFTER striping the prefix given. *Default* `''`\nHandles a \"request\" event.\n```js\nconst proxy = new Middleman({target: 'http://some.api.com'})\n// ...\nproxy.http(req, res, {\n  stripPrefix: '/namespace',\n  basePath: '/someBasePath'\n})\n// GET /namespace/path?foo=bar#baz => http://some.api.com/someBasePath/path?foo=bar#baz\n```\n\n#### Middleman#handler(options)\nReturns Middleman#http() bound with the instances context. See Middleman#http.\n\n\n#### Middleman#listen(port, [callback])\nPopulates the instances `server` property with an instance of `http.Server`, and\nbinds to the `port`.\n```js\ninstance.listen(3000, () => {\n  console.log('Middleman instance is now serving on port 3000')\n})\n```\n\n#### Middleman#createKey(fn)\n* fn (Function) See constructor option `createKey`\n```js\ninstance\n  .createKey((req, url) => {\n    return `${req.method}:${req.session.id}:${url.path}`\n  })\n  .listen(3000)\n```\n\n#### Middleman#bypass(fn)\n* fn (Function) See constructor option `bypass`\n```js\ninstance\n  .bypass((res) => {\n    if (res.statusCode < 300) {\n      return false // this response is cached\n    } else {\n      return true // not caching this one\n    }\n  })\n  .listen(3000)\n```\n\n#### Middleman#httpError(fn)\n* fn (Function) See constructor options `httpError`\n```js\ninstance\n  .httpError((req, res) => {\n    res.statusCode = 500\n    res.end('Whoops! Something blew up...')\n  })\n  .listen(3000)\n```\n\n### Licence\n\nMIT\n\n[travis-image]: https://travis-ci.org/nickpisacane/middleman.svg?branch=master\n[travis-url]: https://travis-ci.org/nickpisacane/middleman\n[coveralls-image]: https://coveralls.io/repos/nickpisacane/middleman/badge.svg?branch=master&service=github\n[coveralls-url]: https://coveralls.io/github/nickpisacane/middleman?branch=master\n","created":"2015-10-19T04:02:40.631Z","modified":"2016-06-25T01:56:32.005Z","lastPublisher":{"name":"nindaff","email":"pisacanen@gmail.com"},"owners":[{"name":"nindaff","email":"pisacanen@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"middleman-proxy","_nodeVersion":"6.2.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/middleman-proxy-0.1.2.tgz_1466819788207_0.7752650373149663"},"_npmUser":{"name":"nindaff","email":"pisacanen@gmail.com"},"_npmVersion":"3.8.9","_rev":"1-23aeea7d4586d94ff0058cd83c088864","_shasum":"477f21656e30fac01ab07da9c7d9c76f0d497402","author":{"name":"Nick Pisacane","email":"pisacanen@gmail.com"},"bugs":{"url":"https://github.com/nickpisacane/middleman/issues"},"directories":{},"dist-tags":{"latest":"0.1.2"},"dist":{"shasum":"477f21656e30fac01ab07da9c7d9c76f0d497402","tarball":"http://registry.npmjs.org/middleman-proxy/-/middleman-proxy-0.1.2.tgz"},"maintainers":[{"name":"nindaff","email":"pisacanen@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-06-25T01:56:32.005Z","created":"2015-10-19T04:02:40.631Z","0.0.1":"2015-10-19T04:02:40.631Z","0.0.2":"2015-10-20T03:32:36.866Z","0.0.3":"2015-10-20T04:15:19.888Z","0.0.4":"2015-10-20T04:38:19.734Z","0.0.5":"2015-10-20T04:50:58.612Z","0.0.6":"2015-10-20T17:55:00.671Z","0.0.7":"2015-10-22T21:25:45.331Z","0.0.8":"2015-10-23T04:23:46.547Z","0.1.0":"2015-10-29T22:00:58.168Z","0.1.1":"2015-11-02T03:48:19.010Z","0.1.2":"2016-06-25T01:56:32.005Z"}}}