{"name":"hydra-http","version":"1.0.4","description":"A full Hydra REST API error collection","main":"lib/index.js","scripts":{"test":"node ./tests/*.spec.js"},"repository":"https://github.com/viztastic/hydra-http","keywords":["rest","errors","api","hydra","json-ld","jsonld","http","status","codes","http status"],"license":"ISC","homepage":"https://github.com/viztastic/hydra-http","devDependencies":{"assert":"1.3.0"},"gitHead":"1bd80271baa195abcb941e4dc6b941d3636af15e","versions":[{"number":"1.0.0","date":"2016-01-15T08:48:10.712Z"},{"number":"1.0.1","date":"2016-01-15T11:02:32.514Z"},{"number":"1.0.2","date":"2016-01-15T12:09:14.305Z"},{"number":"1.0.3","date":"2016-01-15T13:22:11.260Z"},{"number":"1.0.4","date":"2016-01-15T16:00:32.011Z"}],"readme":"**Hydra-HTTP**\r\n# HTTP Status Code Handler \r\n\r\n## Overview\r\n\r\n### The Problem:\r\nHTTP Status Codes are often sent in a way that is meaningless to the application, much less the end-user. \r\n\r\n### How Hydra HTTP Solves this:\r\nThis library helps you send semantic HTTP Status Codes back to the user, allowing you to populate a status response with a ``title`` , ``description`` , custom ``statusCode`` and a recommended ``next`` link for the application/user to continue past the error.\r\n\r\nTo achieve this, we implement the [JSON-LD](http://json-ld.org/) with [Hydra](http://www.hydra-cg.com/) [vocabulary](http://www.hydra-cg.com/spec/latest/core/#hydra-at-a-glance) to create meaningful HTTP status responses.\r\n\r\nThe guide and examples below provides a template to begin with.\r\n\r\n## Installation\r\n```\r\n    npm install hydra-http --save\r\n```\r\n\r\nThe ``--save`` tag is optional, this will save the module to your package.json\r\n\r\n## Example\r\n```javascript\r\nvar express     = require('express');\r\nvar app         = express();\r\nvar hydra_http  = require('hydra-http');\r\n\r\n    app.get('/', function (req, res, next) {\r\n        \r\n        next(new hydra_http.NotFound());\r\n        \r\n    });\r\n\r\n    app.get('/hi', function (req, res, next) {\r\n    \r\n        var options = {\r\n            title: \"Oops, nothing to see here.\",\r\n            description: \"Try another day?\",\r\n            next: \"/users/\",\r\n            prev: req.url\r\n        };\r\n        \r\n        next(new hydra_http.NotFound(options));\r\n    });\r\n\r\napp.use(function(err, req, res, next) {\r\n    \r\n    /** \r\n    * We catch the error generated by the middleware in this block, \r\n    * we reference err.statusCode[0] as it contains the default RFC compliant error code and \r\n    * is also the default in the absence of a user supplied one.\r\n    **/\r\n    res.status(err.statusCode[0] || 500).json(err); \r\n});\r\n\r\nvar server = app.listen(3000, function () {\r\n  console.log('Example app listening at port 3000');\r\n});\r\n```\r\n\r\n## Custom Errors\r\n\r\n```javascript\r\n    hydra_http.CustomError(options);\r\n```\r\n## Optional Parameters:\r\n\r\n* **title**[optional]: Title error. Defaults to [RFC7231](http://tools.ietf.org/html/rfc7231) title if non supplied.\r\n* **statusCode**[optional]: The HTTP Status number to return, multiple status Codes can be provided in addition to the default one. This allows to augment standard HTTP Status Codes (e.g. 403, with a custom, application-specific status code).\r\n* **description**[optional]: A detailed description of the error to provide the user with more context.\r\n* **type**[optional]: A JSON-LD/hydra property allowing you to specify the type of this status code (e.g. type = \"Error\"). See Hydra's [documentaiton](http://www.hydra-cg.com/spec/latest/core/#description-of-http-status-codes-and-errors) for more information.\r\n* **next**[optional]: The next logical place for the user to navigate to.  See [hydra:next](http://www.hydra-cg.com/spec/latest/core/#hydra:next)\r\n* **previous**[optional]: URL leading to this error. See [hydra:previous](http://www.hydra-cg.com/spec/latest/core/#hydra:previous)\r\n* **id**[optional]: Becomes the @id of the JSON-LD payload.\r\n\r\nAn example of the options in action could be:\r\n\r\n```javascript\r\n\r\n     next(new hydra_http.NotFound({\r\n      \r\n      title: \"Nothing to see here.\"\r\n      description: \"Oops, nothing is at this location, try again later?\",\r\n      type: \"Error\",\r\n      next: \"/api/users/\",\r\n      previous: \"/api/users/non-existant-user\"  \r\n         \r\n     }));\r\n\r\n```\r\n\r\n## Errors\r\n\r\nAll of the classes below have all parameters set up by default, based on [RFC7231](http://tools.ietf.org/html/rfc7231). \r\nBut you can override the `title` and augment `statusCode` to fit your for personal needs.\r\n\r\nAll examples assume:\r\n\r\n```javascript\r\nvar hydra_http = require('hydra-http');\r\n```\r\n\r\n### 400 Bad Request\r\n```javascript\r\nhydra_http.BadRequest(options);\r\n```\r\n\r\n### 401 Unauthorized\r\n```javascript\r\nhydra_http.Unauthorized(options);\r\n```\r\n\r\n### 402 Payment Required\r\n```javascript\r\nhydra_http.PaymentRequired(options);\r\n```\r\n\r\n### 403 Forbidden\r\n```javascript\r\nhydra_http.Forbidden(options);\r\n```\r\n\r\n### 404 Not Found\r\n```javascript\r\nhydra_http.NotFound(options);\r\n```\r\n\r\n### 405 Method Not Allowed\r\n```javascript\r\nhydra_http.MethodNotAllowed(options);\r\n```\r\n\r\n### 406 Not Acceptable\r\n```javascript\r\nhydra_http.NotAcceptable(options);\r\n```\r\n\r\n### 407 Proxy Authentication Required\r\n```javascript\r\nhydra_http.ProxyAuthenticationRequired(options);\r\n```\r\n\r\n### 408 Request Timeout\r\n```javascript\r\nhydra_http.RequestTimeout(options);\r\n```\r\n\r\n### 409 Conflict\r\n```javascript\r\nhydra_http.Conflict(options);\r\n```\r\n\r\n### 410 Gone\r\n```javascript\r\nhydra_http.Gone(options);\r\n```\r\n\r\n### 422 Unprocessable Entity\r\n```javascript\r\nhydra_http.UnprocessableEntity(options);\r\n```\r\n\r\n### 424 Failed Dependency\r\n```javascript\r\nhydra_http.FailedDependency(options);\r\n```\r\n\r\n### 500 Internal Server Error\r\n```javascript\r\nhydra_http.InternalServerError(options);\r\n```\r\n\r\n### 501 Not Implemented\r\n```javascript\r\nhydra_http.NotImplemented(options);\r\n```\r\n\r\n### 502 Bad Gateway\r\n```javascript\r\nhydra_http.BadGateway(options);\r\n```\r\n\r\n### 503 Service Unavailable\r\n```javascript\r\nhydra_http.ServiceUnavailable(options);\r\n```\r\n\r\n### 504 Gateway Timeout\r\n```javascript\r\nhydra_http.GatewayTimeout(options);\r\n```\r\n\r\n### 505 HTTP Version Not Supported\r\n```javascript\r\nhydra_http.HttpVersionNotSupported(options);\r\n```\r\n\r\n### 511 Network Authentication Required\r\n```javascript\r\nhydra_http.NetworkAuthenticationRequired(options);\r\n```\r\n\r\n## TODO\r\n* Implement more Error Classes\r\n* Option to override the statusCode (e.g. replace a 401 with 40001), rather than simply augment it (e.g. currently providing a statusCode paramater adds another statusCode to the array e.g. [401,400001]).\r\n\r\n## Acknowledgements\r\n<sub>This is a JSON-LD/Hydra adaptation of [Throw.js](https://github.com/kbariotis/throw.js)</sub>","starsCount":1,"created":"2016-01-15T08:48:10.712Z","modified":"2016-01-15T16:00:32.011Z","lastPublisher":{"name":"viztastic","email":"platform6@gmail.com"},"owners":[{"name":"viztastic","email":"platform6@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"hydra-http","_nodeVersion":"4.2.1","_npmUser":{"name":"viztastic","email":"platform6@gmail.com"},"_npmVersion":"3.3.10","_rev":"1-6a321e5c9c3e92edfba37dbbe591b214","_shasum":"ea11ea2f330e51642e4f6f26af289445b8ff82ea","author":{"name":"Viztastic","email":"platform6@gmail.com"},"bugs":{"url":"https://github.com/viztastic/hydra-http/issues"},"directories":{},"dist-tags":{"latest":"1.0.4"},"dist":{"shasum":"ea11ea2f330e51642e4f6f26af289445b8ff82ea","tarball":"http://registry.npmjs.org/hydra-http/-/hydra-http-1.0.4.tgz"},"maintainers":[{"name":"viztastic","email":"platform6@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-01-15T16:00:32.011Z","created":"2016-01-15T08:48:10.712Z","1.0.0":"2016-01-15T08:48:10.712Z","1.0.1":"2016-01-15T11:02:32.514Z","1.0.2":"2016-01-15T12:09:14.305Z","1.0.3":"2016-01-15T13:22:11.260Z","1.0.4":"2016-01-15T16:00:32.011Z"},"users":{"viztastic":true}}}