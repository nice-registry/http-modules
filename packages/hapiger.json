{"name":"hapiger","version":"0.0.12","description":"Hapi.js HTTP wrapper for Good Enough Recommendation engine (GER)","url":"https://github.com/grahamjenson/hapiger","main":"index.coffee","keywords":["hapiger","recommendations"],"repository":"https://github.com/grahamjenson/hapiger","bin":{"hapiger":"./bin/hapiger"},"license":"MIT","dependencies":{"hapi":"10.4.1","joi":"6.9.0","boom":"2.9.0","good":"6.4.0","good-console":"5.1.0","bluebird":"2.10.2","coffee-script":"1.9.3","chalk":"0.5.1","underscore":"1.7.0","commander":"2.6.0","ger":"0.0.98","ger_rethinkdb_esm":"0.0.05","moment":"2.9.0"},"devDependencies":{"mocha":"2.3.3","chai":"3.3.0","request":"2.65.0"},"scripts":{"build":"coffee -c lib/*.coffee hapi_ger.coffee","test":"mocha"},"gitHead":"a1ee20ee9974136a5ed4a4cf0cf7ebdc5f54acf3","homepage":"https://github.com/grahamjenson/hapiger","versions":[{"number":"0.0.1","date":"2015-02-05T05:52:30.441Z"},{"number":"0.0.2","date":"2015-02-07T22:35:44.113Z"},{"number":"0.0.11","date":"2015-10-12T15:54:27.000Z"},{"number":"0.0.12","date":"2015-10-12T16:07:29.367Z"}],"readme":"# HapiGER\n\n<img src=\"./assets/hapiger300x200.png\" align=\"right\" alt=\"HapiGER logo\" />\n\nProviding good recommendations can create greater user engagement and directly provide value by recommending items the customer might additionally like. However, many applications don't provide recommendations to users because of the difficulty in implementing a custom engine or the pain of using an off-the-shelf engine.\n\n**HapiGER** is a recommendations service that uses the [Good Enough Recommendations (**GER**)](https://www.npmjs.com/package/ger), a scalable, simple recommendations engine, and the [Hapi.js](http://hapijs.org) framework. It has been developed to be easy to integrate, easy to use and very scalable.\n\n[Project Site](http://www.hapiger.com)\n\n## Quick Start Guide\n\n<br/>\n***\n#### Install HapiGER\n\nInstall with `npm`\n\n```bash\nnpm install -g hapiger\n```\n\n<br/>\n***\n\n#### Start HapiGER\n\nBy default it will start with an in-memory event store (events are not persisted)\n\n```bash\nhapiger\n```\n\n*There are also PostgreSQL and RethinkDB event stores for persistence and scaling*\n\n<br/>\n***\n\n#### Create a Namespace\n\nA Namespace is a bucket where all the events are put:\n\n```bash\ncurl -X POST 'http://localhost:3456/namespaces' -d'{\n    \"namespace\": \"movies\"\n  }'\n```\n\n<br/>\n***\n\n#### Create some Events\n\nAn event occurs when a person actions something, e.g. `Alice` `view`s `Harry Potter`:\n\n```bash\ncurl -X POST 'http://localhost:3456/events' -d '{\n    \"events\": [\n    {\n      \"namespace\": \"movies\",\n      \"person\":    \"Alice\",\n      \"action\":    \"view\",\n      \"thing\":     \"Harry Potter\"\n    }\n  ]\n}'\n```\n\nThen, `Bob` also `view`s `Harry Potter` (now `Bob` has similar viewing habits to `Alice`)\n\n```bash\ncurl -X POST 'http://localhost:3456/events' -d '{\n    \"events\": [\n    {\n      \"namespace\": \"movies\",\n      \"person\":    \"Bob\",\n      \"action\":    \"view\",\n      \"thing\":     \"Harry Potter\"\n    }\n  ]\n}'\n```\n\nWhen a person actions and thing, it serves two purposes in HapiGER:\n\n1. It is used to measure a persons similarity to other people\n2. It can be a recommendation of that thing\n\nFor example, when `Bob` `buy`s `LOTR`\n\n```bash\ncurl -X POST 'http://localhost:3456/events' -d '{\n    \"events\": [\n    {\n      \"namespace\":  \"movies\",\n      \"person\":     \"Bob\",\n      \"action\":     \"buy\",\n      \"thing\":      \"LOTR\",\n      \"expires_at\": \"2016-10-12\"\n    }\n  ]\n}'\n```\n\nThis is an action that can be used to find similar people **AND** it can be seen as `Bob` recommending  `LOTR`. For an event to be a recommendation as well it must have an expiration date set with `expires_at`, which is how long the recommendation will be available for.\n\n<br/>\n***\n\n#### Recommendations\n\nWhat books should `Alice` `buy`?\n\n```bash\ncurl -X POST 'http://localhost:3456/recommendations' -d '{\n    \"namespace\": \"movies\",\n    \"person\": \"Alice\",\n    \"configuration\": {\n      \"actions\" : {\"view\": 5, \"buy\": 10}\n    }\n}'\n```\n\n```\n{\n  \"recommendations\": [\n    {\n      \"thing\": \"LOTR\",\n      \"weight\": 0.44721359549996,\n      \"last_actioned_at\": \"2015-10-12T17:04:14+01:00\",\n      \"last_expires_at\": \"2016-10-12T01:00:00+01:00\",\n      \"people\": [\n        \"Bob\"\n      ]\n    }\n  ],\n  \"neighbourhood\": {\n    \"Bob\": 0.44721359549996,\n    \"Alice\": 1\n  },\n  \"confidence\": 0.00036398962692384\n}\n```\n\n`Alice` should buy `The Hobbit` as it was recommended by `Bob` with a weight of about `0.2`.\n\nThe `configuration` defines many variables that can be used to customise the search for recommendations. The object is directly passed to GER and the available variables are listed in the [GER Documentation](https://github.com/grahamjenson/ger).\n\n*The `confidence` of these recommendations is pretty low because there are not many events in the system*\n\n<br/>\n***\n\n#### How HapiGER Works (the Quick Version)\n\nThe HapiGER API calculates recommendations for `Alice` to `buy` by:\n\n1. Finding people (neighbors) that are like `Alice` by looking at her past events\n2. Calculating the similarities between `Alice` and her neighbors\n3. Looking at the recent `things` that those similar people recommended\n4. Weight those recommendations using the similarity of the people\n\n<br/>\n***\n\n#### Event Stores\n\nThe \"in-memory\" memory event store is the default, this will not scale well or persist event so is not recommended for production.\n\nThe **recommended** event store is **PostgreSQL**, which can be used with:\n\n```\nhapiger --es pg --esoptions '{\n    \"connection\":\"postgres://localhost/hapiger\"\n  }'\n```\n\n*Options are passed to [knex](http://knexjs.org/).*\n\nHapiGER also supports a [RethinkDB](http://rethinkdb.com/) event store:\n\n```\nhapiger --es rethinkdb --esoptions '{\n    \"host\":\"127.0.0.1\",\n    \"port\": 28015,\n    \"db\":\"hapiger\"\n  }'\n```\n\n*Options passed to [rethinkdbdash](https://github.com/neumino/rethinkdbdash).*\n\n<br/>\n***\n\n#### Compacting the Event Store\n\nThe event store needs to be regularly maintained by removing old, outdated, or superfluous events; this is called **compacting**\n\n```\ncurl -X POST 'http://localhost:3456/compact' -d '{\n  \"namespace\": \"movies\"\n}'\n```\n\n\n<br/>\n***\n\n#### Namespaces\n\nIn addition to creating namespaces, you can also list and destroy them:\n\n```\ncurl -X GET 'http://localhost:3456/namespaces'\n```\n\nTo delete a namespace (**and all its events!**):\n\n```\ncurl -X DELETE 'http://localhost:3456/namespaces/movies'\n```\n\n\n<br/>\n***\n\n## Changelog\n\n12/10/15 -- Updated README, new version of GER\n8/02/15 -- Updated readme and bumped version\n","created":"2015-02-05T05:52:30.441Z","modified":"2015-10-12T16:07:29.367Z","lastPublisher":{"name":"grahamjenson","email":"grahamjenson@maori.geek.nz"},"owners":[{"name":"grahamjenson","email":"grahamjenson@maori.geek.nz"}],"other":{"_attachments":{},"_from":".","_id":"hapiger","_nodeVersion":"0.12.2","_npmUser":{"name":"grahamjenson","email":"grahamjenson@maori.geek.nz"},"_npmVersion":"2.7.3","_rev":"1-78bc80a7fd5c1b2f741152535701bf71","_shasum":"10f738c2026793deaac71ed58e275280866042f4","author":{"name":"Graham Jenson","email":"grahamjenson@maori.geek.nz","url":"http://www.maori.geek.nz/"},"bugs":{"url":"https://github.com/grahamjenson/hapiger/issues"},"directories":{},"dist-tags":{"latest":"0.0.12"},"dist":{"shasum":"10f738c2026793deaac71ed58e275280866042f4","tarball":"http://registry.npmjs.org/hapiger/-/hapiger-0.0.12.tgz"},"maintainers":[{"name":"grahamjenson","email":"grahamjenson@maori.geek.nz"}],"readmeFilename":"README.md","time":{"modified":"2015-10-12T16:07:29.367Z","created":"2015-02-05T05:52:30.441Z","0.0.1":"2015-02-05T05:52:30.441Z","0.0.2":"2015-02-07T22:35:44.113Z","0.0.11":"2015-10-12T15:54:27.000Z","0.0.12":"2015-10-12T16:07:29.367Z"}}}