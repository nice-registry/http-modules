{"name":"waka-flocka-frame","version":"1.0.4","description":"a fast http framework","main":"index.js","scripts":{"test":"./node_modules/mocha/bin/mocha test"},"repository":"https://github.com/pnwlady/401-http-framework","keywords":["http","server","put","post","get","patch","router"],"license":"MIT","homepage":"https://github.com/pnwlady/401-http-framework#readme","devDependencies":{"chai":"^3.5.0","chai-http":"^2.0.1","gulp":"^3.9.1","gulp-eslint":"^2.0.0","gulp-mocha":"^2.2.0","mocha":"^2.4.5"},"gitHead":"8508e38edc2713148d45641c3a2a9769ef0e1f57","versions":[{"number":"1.0.1","date":"2016-04-18T17:19:34.150Z"},{"number":"1.0.2","date":"2016-04-18T17:27:35.982Z"},{"number":"1.0.3","date":"2016-04-18T17:53:58.640Z"},{"number":"1.0.4","date":"2016-04-19T19:13:30.129Z"}],"readme":"# waka-flocka-frame\n\n<h2>Waka Flocka Frame HTTP Framework</h2>\n\nA simple http framework to take mundane out of the mundane. Quickly create a basic http server with essential router functions by typing just a few lines of code.\n\n<h2>Features</h2>\n<ul>\n <li>HTTP Server</li>\n <li>REST request, response</li>\n <li>GET</li>\n <li>POST</li>\n <li>PUT</li>\n <li>PATCH</li>\n <li>DELETE</li>\n <li>Automatic Content-Type Detection for Headers</li>\n</ul>\n\n<h2>Installation</h2>\n---------------------\n<h2>Initialize your local repository</h2>\n  ```\n  npm init\n  ```\n\n<h2>Install WFF</h2>\n```\nnpm install --save waka-flocka-frame\n```\n\n<h2>Then require ('waka-flocka-frame') in your project.</h2>\n\n```var wff = require('waka-flocka-frame');```\n\n--------------------\n<h2>Code to quickly set up a http server</h2>\n```\nvar wff = require('waka-flocka-frame');\n\nwff.server.listen([optional port number]);\n```\nLeaving out the port number will invoke the default port 3000.\n\n<h2>Code to quickly set up a simple route.</h2>\n```\nwff.router.get('/home', 'a text string');\n```\nThis will return 'a text string' at the '/home' route.<br>\nSyntax:\n ```\n wff.router.get( '[your route]', '[a text string]');\n ```\nIf you want a response other than plain text you MUST use a callback\nand response.writeHead.\n```\nwff.router.get('/home', function(req, res){\n    res.writeHead(200, {'Content-Type': 'application/json'});\n    res.write(JSON.stringify({\"msg\": \"my message\"}));\n    res.end();\n  });\n```\n<h2>Code to quickly set up a static route.</h2>\n```\nwff.router.getStatic('someFolder/someText.txt', '/test');\n```\nThis will return the contents of the 'someText.txt' file at the '/test' route.<br>\nSyntax:\n```\nwff.router.getStatic('[your file path]', '[your route]');\n```\nParameters are a path to a resource and a route.\n\nNOTE:<i>You may get an error if you add a leading '/' to your file path statement.</i>\n\n<h2>Code to quickly set up a POST route without a callback.</h2>\n```\nwff.router.post('/myBlog');\n```\nThis will allow you to use a REST client (i.e. 'cURL', 'Postman') to post JSON content to the '/myBlog' route.<br>\nSyntax:\n```\nwff.router.post('[url you are posting to]');\n```\nParameter is the route you are posting to.\n\n<h2>Example of a POST route with an optional callback.</h2>\n```\nwff.router.post('/postUrl', function(req, res) {\n  res.writeHead(200, { 'Content-Type': 'application/json' });\n   req.on('data', (data) => {\n     var path = 'data/' + Date() + '.json';\n     res.write(data);\n     fs.writeFile(path, data, (err) => {\n       if (err) return 'Error';\n       console.log(Date() + ' file saved.');\n       return res.end();\n     });\n   });\n});\n```\nLicense\nThe MIT License (MIT)\n\nCopyright (c) 2016 Heidi Laursen, Tim Forman, Ali Forman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n```\n","created":"2016-04-18T17:19:34.150Z","modified":"2016-04-19T19:13:30.129Z","lastPublisher":{"name":"timforman","email":"timothywforman@gmail.com"},"owners":[{"name":"timforman","email":"timothywforman@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"waka-flocka-frame","_nodeVersion":"4.2.3","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/waka-flocka-frame-1.0.4.tgz_1461093208795_0.3645972735248506"},"_npmUser":{"name":"timforman","email":"timothywforman@gmail.com"},"_npmVersion":"2.14.7","_rev":"1-84a826ca1861ff430e229b08cd941495","_shasum":"3b4f291047a3452de0635db34a464d19284bfc7f","author":{"name":"Heidi Laursen"},"bugs":{"url":"https://github.com/pnwlady/401-http-framework/issues"},"contributors":[{"name":"Tim Forman"},{"name":"Ali Forman"}],"directories":{"test":"test"},"dist-tags":{"latest":"1.0.4"},"dist":{"shasum":"3b4f291047a3452de0635db34a464d19284bfc7f","tarball":"http://registry.npmjs.org/waka-flocka-frame/-/waka-flocka-frame-1.0.4.tgz"},"maintainers":[{"name":"timforman","email":"timothywforman@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-04-19T19:13:30.129Z","created":"2016-04-18T17:19:34.150Z","1.0.1":"2016-04-18T17:19:34.150Z","1.0.2":"2016-04-18T17:27:35.982Z","1.0.3":"2016-04-18T17:53:58.640Z","1.0.4":"2016-04-19T19:13:30.129Z"}}}