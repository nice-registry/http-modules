{"name":"http-authentication","description":"Digest authentication for HTTP communication.","keywords":["http","authentication","basic","digest"],"version":"1.1.5","license":"Apache-2.0","main":"index.js","engines":{"node":">=0.10"},"repository":"https://github.com/tdecaluwe/http-authentication","files":["*.js","examples/*.js","examples/node_modules/http-authentication.js"],"dependencies":{},"gitHead":"e9165903397876367f01c8db0d5de51cdfba0a9d","homepage":"https://github.com/tdecaluwe/http-authentication#readme","scripts":{},"versions":[{"number":"1.1.2","date":"2017-06-07T14:41:52.860Z"},{"number":"1.1.3","date":"2017-06-07T14:49:02.156Z"},{"number":"1.1.4","date":"2017-06-07T14:52:44.449Z"},{"number":"1.1.5","date":"2017-06-16T14:20:49.318Z"}],"readme":"# http-authentication\n\nHTTP Basic and Digest authentication. Setting up Digest authentication\nwith protection against replay attacks can be as easy as:\n\n```javascript\nvar express = require('express');\nvar authentication = require('http-authentication');\n\nvar app = express();\n\nvar users = {\n  'John': { password: 'password' }\n};\n\napp.use(authentication(function (user, done) {\n  done(null, users[user] && users[user].password);\n}).connect());\n\napp.get('/', function (req, res) {\n  res.end('Successfully authenticated!');\n});\n\napp.listen(3000);\n```\n\n## Configuration\n\nThe module provides an authenticator object creation function which can be\ncalled as follows:\n\n```javascript\nvar auth = require('http-authentication');\n\nvar authenticator = auth([options,] callback);\n```\n\nThe `options` argument is optional and can be used to configure the\nauthenticator object. It should be an object containing any of the parameters\nbelow.\n\nOption    | Type     | Possible values\n--------: | :------: | :--------------\n`method`  | `String` | Either `'basic'` or `'digest'`, default value is `'digest'`.\n`timeout` | `Number` | A timeout can be specified for digest authentication and should be a positive integer value. It specifies the time in seconds after which a nonce provided by the server can no longer be used for authentication. If this value is set to zero, the nonces will never expire.\n\nThese authenticator objects cannot be used directly but can be used to create\nlisteners or middlewares through methods defined on the authenticator object:\n\nMethod     | Return value type           | Possible values\n---------: | :-------------------------: | :--------------\n`listener` | `Function (req, res)`       | A general purpose listener accepting a request/response pair.\n`connect`  | `Function (req, res, next)` | A connect middleware.\n`passport` | `Authenticator`             | An object that is compatible with `passport.Strategy`.\n\nFor usage examples see the section on middlewares.\n\nTwo alternative constructors are provided for the basic and digest method\nrespectively. They can be called as follows:\n\n```javascript\nvar auth = require('http-authentication');\n\nvar authenticator = auth.basic(callback);\nvar authenticator = auth.digest([options,] callback);\n```\n\n## Replay protection\n\nProtection against replay attacks is provided by the `ReplayDetector` class and\nis included with each middleware. This class also handles expiration of server\nprovided nonces. It only keeps track of non-expired nonces, expired nonces are\nautomatically discarded.\n\n## Middleware\n\nMiddleware can be created for various frameworks. They can optionally be\nconfigured using any of the parameters below:\n\nOption   | Type     | Possible values\n-------: | :------: | :--------------\n`realm`  | `String` | The name of the realm to be used for authentication.\n\n### `http.Server`\n\n```javascript\nvar auth = require('http-authentication');\n\nvar authenticator = auth(options, callback);\n\n// Authenticate another listener.\nvar privateListener = authenticator.listener([options,] listener);\n\nhttp.createServer(privateListener);\n```\n\n### Express\n\n```javascript\nvar auth = require('http-authentication');\n\nvar authenticator = auth(options, callback);\n\n// Obtain a connect middleware.\nvar connect = authenticator.connect([options]);\n\napp.use(connect);\n```\n\n### Passport\n\n```javascript\nvar auth = require('http-authentication');\n\nvar authenticator = auth(options, callback);\n\n// Obtain a passport strategy. Options can be passed to\n// passport itself.\nvar strategy = authenticator.strategy();\n\npassport.use(strategy);\n```\n","created":"2017-06-07T14:41:52.860Z","modified":"2017-06-16T14:20:49.318Z","lastPublisher":{"name":"tdecaluwe","email":"decaluwe.t@gmail.com"},"owners":[{"name":"tdecaluwe","email":"decaluwe.t@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-authentication","_nodeVersion":"6.11.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/http-authentication-1.1.5.tgz_1497622848398_0.8183967338409275"},"_npmUser":{"name":"tdecaluwe","email":"decaluwe.t@gmail.com"},"_npmVersion":"3.10.10","_rev":"4-0e61109d8a2130fbedc1f8ce67536246","_shasum":"a60e614f0d757ac393930463a9cb0188e404aa4f","author":{"name":"Tom De Caluw√©","email":"decaluwe.t@gmail.com"},"bugs":{"url":"https://github.com/tdecaluwe/http-authentication/issues"},"directories":{},"dist-tags":{"latest":"1.1.5"},"dist":{"shasum":"a60e614f0d757ac393930463a9cb0188e404aa4f","tarball":"https://registry.npmjs.org/http-authentication/-/http-authentication-1.1.5.tgz"},"maintainers":[{"name":"tdecaluwe","email":"decaluwe.t@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-16T14:20:49.318Z","created":"2017-06-07T14:41:52.860Z","1.1.2":"2017-06-07T14:41:52.860Z","1.1.3":"2017-06-07T14:49:02.156Z","1.1.4":"2017-06-07T14:52:44.449Z","1.1.5":"2017-06-16T14:20:49.318Z"}}}