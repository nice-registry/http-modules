{"name":"jsdoc-http-plugin","version":"0.2.3","description":"Plugin to add HTTP Route tags for documenting HTTP endpoints","main":"index.js","scripts":{"test":"echo 'boo on me I have no tests.'","clean":"rm -rf ./out/*;","example1":"rm -rf ./out/*; ./node_modules/.bin/jsdoc -c ./examples/jsdoc.conf --readme ./examples/README.md; true"},"keywords":["jsdoc","documentation","express","restful","rest","route","plugin"],"engines":{"node":">=4.6.2"},"repository":"https://github.com/vmarchaud/jsdoc-http-plugin","publishConfig":{"registry":"https://registry.npmjs.org/"},"license":"MIT","dependencies":{"jsdoc":"^3.4.3"},"peerDependencies":{"jsdoc":"^3.4.3"},"gitHead":"5d94d718eb21de1d32de181696efa31e66fb2072","homepage":"https://github.com/vmarchaud/jsdoc-http-plugin#readme","versions":[{"number":"0.1.0","date":"2017-05-26T12:49:01.451Z"},{"number":"0.2.0","date":"2017-05-26T13:34:15.865Z"},{"number":"0.2.1","date":"2017-05-28T10:13:07.198Z"},{"number":"0.2.2","date":"2017-05-28T10:25:32.947Z"},{"number":"0.2.3","date":"2017-06-02T15:04:11.613Z"}],"readme":"# This is a fork\n\nThis project is a fork of https://github.com/bvanderlaan/jsdoc-route-plugin\nCurrently, bvanderlaan doesn't seems to be available to maintain the project so i'll continue here.\n\n# JsDoc HTTP Plugin\n\nThis is a plugin for [JsDoc](http://usejsdoc.org/) which is a tool to generate HTML documentation from comment blocks.\nJsDoc will scan your code files looking for comment blocks then generate a nicely formated HTML document.\n\nJsDoc supports a number of tags to help document a number of things such as each parameter in a function or what the function will return.\nThese tags are picked up by JsDoc and used when generating the HTML documentation; for example function parameters are shown in a table.\n\nThis plugin adds custom tags to JsDoc that work with the default document template. The custom tags are meant to help document HTTP endpoints.\n\n\n## How to install\n\nFirst you need to install JsDoc\n```\nnpm install jsdoc --save-dev\n```\n\nThen you need to install the JsDoc Route Plugin\n\n```\nnpm install jsdoc-http-plugin --save-dev\n```\n\nNext you need to tell [JsDoc](http://usejsdoc.org/) to enable the plugin.\n\nYou can do this by adding a `jsdoc.conf` file and telling [JsDoc](http://usejsdoc.org/) to use it when you run it.\n\n**Example jsdoc.conf**\n```\n{\n    \"tags\": {\n        \"allowUnknownTags\": true,\n        \"dictionaries\": [\"jsdoc\",\"closure\"]\n    },\n    \"source\": {\n        \"include\": [ \".\" ],\n        \"exclude\": [ \"node_modules\" ],\n        \"includePattern\": \".+\\\\.js(doc|x)?$\",\n        \"excludePattern\": \"(^|\\\\/|\\\\\\\\)_\"\n    },\n    \"plugins\": [\"jsdoc-http-plugin\"],\n    \"templates\": {\n        \"cleverLinks\": false,\n        \"monospaceLinks\": false\n    },\n    \"opts\": {\n      \"recurse\": true\n    }\n}\n```\n\nNow run [JsDoc](http://usejsdoc.org/) with the `--config` flag.\n```\njsdoc --config jsdoc.conf\n```\n\n## Example\n\nIf you want to see an example of this plugin in action run the `npm run example1` command.\nThat will run [JsDoc](http://usejsdoc.org/) against a sample Express app located in `examples` and produce HTML documentation in the `out` folder.\nTo view the documentation open `out/index.html` in a browser.\n\n## What are the new Tags\n\nThe new tags are all about documenting Express routes.\nFind a list of them and how they are to be used below.\n\n## @path\n\nBecause JsDoc does not know about routes we need to decorate the route documentation with the `@name` tag to make JsDoc think you are documenting a member of the given module.\nThis will add an entry under the **Members** section in the HTML document; however, if we used only the `@name` tag to describe the route verb and path it might look a bit odd as it would show up like this:\n> *(inner)* POST /v1/files\n\nTo make documenting a route a bit nicer I suggest using the `@name` tag to define a common name for the route, such as File Upload, and the `@path` tag to define the verb and route path.\nUsing the `@path` tag will also change the method attribute from *(inner)* to *(path)*.\n\n```\n/**\n * Upload a file.\n *\n * @name File Upload\n * @path {POST} /v1/file\n */\nserver.post({\n  url: '/v1/file',\n}, (req, res, next) => {...}\n```\n\nThe `@path` tag will add a table showing the HTTP verb (i.e. POST, PUT, DEL, GET), and the route path (i.e. /v1/files) for the route you are documenting just under the friendly name of the route above the details section.\n\nOnly one `@path` tag is expected per endpoint document.\n\n## @auth\n\nThe `@auth` tag allows you to state what authentication a route requires.\n\n```\n/**\n * Upload a file.\n *\n * @name File Upload\n * @path {POST} /v1/file\n * @auth This route requires HTTP Basic Authentication. If authentication fails it will return a 401 error.\n */\nserver.post({\n  url: '/v1/file',\n}, (req, res, next) => {...}\n```\n\nIt will result in a new sub-heading called **Authentication** with whatever text you provided to the tag beneath it.\n\nOnly one `@auth` tag is expected per endpoint document.\n\n## @header\n\nThe `@header` allows you to document any parameters which are passed via the header of the HTTP request.\n\nWith this tag you need to provide the name and a description. The name is the first word of the text following the tag.\n* `@header MyName And this part is the description`\n\nYou can also optionally provide a type for the parameter.\n* `@header {String} MyName And this part is the description`\n\n```\n/**\n * Upload a file.\n *\n * @name File Upload\n * @path {POST} /v1/file\n * @header authorization is the identification information for the request\n * @header {String} user-id is the unique User Id to assign to the file\n */\nserver.post({\n  url: '/v1/file',\n}, (req, res, next) => {...}\n```\n\nThe above would add a table under the route description that lists all the header parameters.\nYou can use the `@header` tag as many times as you have parameters in your request header you whish to document.\n\n\n## @body\n\nThe `@body` allows you to document any parameters which are passed via the body of the HTTP request.\n\nWith this tag you need to provide the name and a description. The name is the first word of the text following the tag.\n* `@body MyName And this part is the description`\n\nYou can also optionally provide a type for the parameter.\n* `@body {String} MyName And this part is the description`\n\nYou can also specify that the parameter is optional by placing the name within square brackets.\n* `@body {String} [MyName] And this part is the description`\n\nLastly you can define a default value for the parameter. The idea is to document the value which will be used if the parameter is not provided.\n* `@body {String} [MyName=Phillip] And this part is the description`\n\n\n```\n/**\n * Upload a file.\n *\n * @name File Upload\n * @path {POST} /v1/file\n * @body {String} userId is the unique identifier for the user we are uploading the file to.\n * @body {Boolean} [sync=false] when true the route will be synchronous otherwise the route\n * is asynchronous.\n */\nserver.post({\n  url: '/v1/file',\n}, (req, res, next) => {...}\n```\n\nThe above would add a table under the route description that lists all the body parameters.\n\nYou can use the `@bodyparam` tag as many times as you have parameters in your request body you whish to document.\n\n## @params\n\nThe `@params` allows you to document any parameters which make up part of the route path.\n\nWith this tag you need to provide the name and a description. The name is the first word of the text following the tag.\n* `@params MyName And this part is the description`\n\nYou can also optionally provide a type for the parameter.\n* `@params {String} MyName And this part is the description`\n\n```\n/**\n * Download a file.\n *\n * @name Download File\n * @path {GET} /v1/files/:fileId\n * @params {String} :fileId is the unique identifier for the file to download.\n */\nserver.get({\n  url: '/v1/files/:fileId',\n}, (req, res, next) => {...}\n```\n\nThe above would add a table under the route description that lists all the route parameters.\n\nYou can use the `@params` tag as many times as you have parameters in your route path.\n\n## @query\n\nThe `@query` allows you to document any parameters which are passed via HTTP request url.\n\nWith this tag you need to provide the name and a description. The name is the first word of the text following the tag.\n* `@query MyName And this part is the description`\n\nYou can also optionally provide a type for the parameter.\n* `@query {String} MyName And this part is the description`\n\nYou can also specify that the parameter is optional by placing the name within square brackets.\n* `@query {String} [MyName] And this part is the description`\n\nLastly you can define a default value for the parameter. The idea is to document the value which will be used if the parameter is not provided.\n* `@query {String} [MyName=Phillip] And this part is the description`\n\n\n```\n/**\n * Download files.\n *\n * @name Download Files\n * @path {GET} /v1/files\n * @query {String} [fileType] will limit the download to just these file types.\n */\nserver.get({\n  url: '/v1/files',\n}, (req, res, next) => {...}\n```\n\nThe above would add a table under the route description that lists all the query parameters.\n\nYou can use the `@query` tag as many times as you have parameters in your request url you whish to document.\n\n## @response\n\nThe `@response` allows you to document the response that your route will make\n\nWith this tag you need to provide the name and a description. The name is the first word of the text following the tag.\n* `@response MyName And this part is the description`\n\nYou can also optionally provide a type for the parameter.\n* `@response {String} MyName And this part is the description`\n\nYou can also specify that the response is optional by placing the name within square brackets.\n* `@response {String} [MyName] And this part is the description`\n\nLastly you can define a default value for the parameter.\n* `@response {String} [MyName=Phillip] And this part is the description`\n\n\n```\n/**\n * Download files.\n *\n * @name Download Files\n * @path {GET} /v1/files\n * @response {Object} metadata\n * @response {String} metadata.name\n * @response {String} metadata.limk\n */\nserver.get({\n  url: '/v1/files',\n}, (req, res, next) => {...}\n```\n\nThe above would add a table under the route description that lists that the route answer with a json document containing the `name` and `link` key.\n\nYou can use the `@response` tag as many times as you have parameters in your response you whish to document.\n\n\n## @code\n\nThe `@code` allows you to document the http response code that your route will make\n\nWith this tag you need to provide the number like this\n* `@code {200} and then you document why this code is happening`\n\n```\n/**\n * Download files.\n *\n * @name Download Files\n * @path {GET} /v1/files\n * @code {200} if the request is sucesfull\n * @code {500} if the request fail because the database isn't accesible \n * @response {Object} metadata\n * @response {String} metadata.name\n * @response {String} metadata.limk\n */\nserver.get({\n  url: '/v1/files',\n}, (req, res, next) => {...}\n```\n\nThe above would add a table under the route description that lists that the route answer with a json document containing the `name` and `link` key.\n\nYou can use the `@response` tag as many times as you have parameters in your response you whish to document.\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at https://github.com/vmarchaud/jsdoc-http-plugin. This project is intended to be a safe, welcoming space for\ncollaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.\n\n## License\n\nThe library is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).","created":"2017-05-26T12:49:01.451Z","modified":"2017-06-02T15:04:11.613Z","lastPublisher":{"name":"vmarchaud","email":"contact@vmarchaud.fr"},"owners":[{"name":"vmarchaud","email":"contact@vmarchaud.fr"}],"other":{"_attachments":{},"_id":"jsdoc-http-plugin","_nodeVersion":"8.0.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-http-plugin-0.2.3.tgz_1496415850569_0.5946469688788056"},"_npmUser":{"name":"vmarchaud","email":"contact@vmarchaud.fr"},"_npmVersion":"5.0.1","_rev":"5-176921f5fc6974b2c1af8a3c94898275","author":{"name":"Brad van der Laan"},"bugs":{"url":"https://github.com/vmarchaud/jsdoc-http-plugin/issues"},"directories":{},"dist-tags":{"latest":"0.2.3"},"dist":{"integrity":"sha512-pcDqJpE8ajibMv9OvRBZTBa1MaqaLi/F5ljHKHb2yF4P5I2+ToddnS9QBvQ5RomXydvZspJSet53OMqqvs9cDg==","shasum":"69647ed85c84ec14a4564dae04446b2bc171899c","tarball":"https://registry.npmjs.org/jsdoc-http-plugin/-/jsdoc-http-plugin-0.2.3.tgz"},"maintainers":[{"name":"vmarchaud","email":"contact@vmarchaud.fr"}],"readmeFilename":"README.md","time":{"modified":"2017-06-02T15:04:11.613Z","created":"2017-05-26T12:49:01.451Z","0.1.0":"2017-05-26T12:49:01.451Z","0.2.0":"2017-05-26T13:34:15.865Z","0.2.1":"2017-05-28T10:13:07.198Z","0.2.2":"2017-05-28T10:25:32.947Z","0.2.3":"2017-06-02T15:04:11.613Z"}}}