{"name":"ask","version":"1.5.0","description":"A simple, chainable way to construct HTTP requests in Node or the browser","main":"index.js","scripts":{"test":"npm run lint && npm run build && npm run test-server","test-server":"echo '\nTesting Server:\n' && mocha test/server/**/*.js --reporter spec","test-browser":"echo '\nTesting Angular:\n\n' && ./node_modules/karma/bin/karma start karma.conf.js","lint":"jshint index.js lib/","build":"build/standalone.js"},"repository":"https://github.com/divshot/ask","keywords":["request","xhr","ajax","browserify","http"],"license":"MIT","homepage":"https://github.com/divshot/ask","devDependencies":{"browserify":"^6.0.3","chai":"^1.9.2","jshint":"^2.5.6","minify":"^1.0.3","mkdirp":"^0.5.0","mocha":"^2.0.1","mocksy":"^0.1.7","testling":"^1.7.1"},"dependencies":{"as-array":"^1.0.0","deap":"^1.0.0","httpify":"^1.0.0","join-path":"^1.0.0","mix-into":"^0.4.0","promise":"^6.0.0","slasher":"^1.1.0","tiny-emitter":"^1.0.0"},"gitHead":"60eadb979a74af863287e603b821de25ef9bcaad","versions":[{"number":"0.0.1","date":"2011-05-14T21:34:31.781Z"},{"number":"0.1.0","date":"2011-12-15T07:20:32.489Z"},{"number":"1.1.0","date":"2014-11-06T19:47:17.024Z"},{"number":"1.2.0","date":"2014-11-24T22:42:02.803Z"},{"number":"1.3.0","date":"2014-11-24T23:31:39.917Z"},{"number":"1.4.0","date":"2015-01-22T19:13:51.732Z"},{"number":"1.4.1","date":"2015-02-11T15:24:11.858Z"},{"number":"1.5.0","date":"2015-02-24T20:55:38.266Z"}],"readme":"# ask\n\nA simple, chainable way to construct HTTP requests in Node or the browser.\n\n**Usage Environments:**\n\n* [Node]()\n* [Browser Standalone]()\n\n## Install\n\nBower\n\n```\nbower install ask --save\n```\n\nNPM\n\n```\nnpm install ask --save\n```\n\n## Usage\n\n### Include in App\n\nStandalone\n\n```html\n<script src=\"/bower_components/ask/dist/ask.js\"></script>\n```\n\nNodejs/Browserify\n\n```js\nvar ask = require('ask');\n```\n\n### How to Build Requests\n\nSimple `GET` request\n\n```js\nvar request = ask({\n  origin: '', /* default origin */\n  headers: {/* set default headers */},\n  xhrOptions: {/* default xhr options */\n});\n\n// Settings for all endpoints\nrequest\n  .origin('http://api.example.com')\n  .header('Authorzation', 'Bearer 1234')\n  .xhrOption('withCredentials', true);\n\n// Create an endpoint and customize with endpoint-specific settings\n// Returns a function to execute later\nvar getUserFriends = request\n  .get('users', 123, 'friends')\n  .query('page', 1)\n  .query('limit', 10);\n\n// Request to '/users/123/friends'\ngetUserFriends().then(function (res) {\n  var users = res.body;\n}, function (err) {\n  // err.body\n});\n```\n\nSimple `POST` request\n\n```js\nvar request = ask();\n\nrequest.origin('http://api.example.com');\n\nvar createUser = request.post('users');\n\n// Send body data with request\ncreateUser({\n  name: 'example',\n  email: 'something@aol.com'\n}).then(function (res) {\n\t// Success!\n});\n\n```\n\n## API\n\n(Coming soon)\n\n## Mocking HTTP Requests\n\nA useful feature with Ask is the ability to intercept http/xhr requests and provide custom response attributes, such as statusCode, headers, etc. This is is very helpful when testing code that uses the Ask module.\n\nBefore building a request:\n\n```js\nvar ask = require('ask');\nvar request = ask();\n\nrequest\n  .when('GET', '/some/path')\n  .respond('custom response')\n  .status(201)\n  .header('content-type', 'text/html');\n\nvar somePath = request.get('some', 'path');\n\nsomePath().then(function (res) {\n\t\n});\n```\n\n### Mocking API\n\n#### when(method, path)\n\nSet up the http mocking interceptor. Returns an object mocking helper methods\n\n* `method` - GET, POST, PUT, DELETE, etc.\n* `path` - the relative path to intercept\n\n#### respond(body)\n\nSet the response body text for the mocked request\n\n* `body` - the data to set the response to\n\n#### status(code)\n\nSet the status code of the mocked response. Any code that is greater than or equal to 400 will cause the request promise to be rejected.\n\n* `code` - a number, 200, 201, etc., that sets the statusCode of the response\n\n#### header(name, value)\n\nSet individual headers for the response. If no value is provided, the current header value is returned.\n\n* `name` - the name of the header (case-insensitive)\n* `value` - the value of the header\n\n## Build\n\nBuilds standalone version\n\n```\nnpm install\nnpm run build\n```\n\n## Run Tests\n\n```\nnpm install\nnpm test\n```","starsCount":1,"created":"2011-05-14T21:34:31.330Z","modified":"2015-02-24T20:55:38.266Z","lastPublisher":{"name":"scottcorgan","email":"scottcorgan@gmail.com"},"owners":[{"name":"scottcorgan","email":"scottcorgan@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"ask","_nodeVersion":"0.10.36","_npmUser":{"name":"scottcorgan","email":"scottcorgan@gmail.com"},"_npmVersion":"2.4.1","_rev":"1-f71d48275769c7ad407a97cb19ba82aa","_shasum":"6f10939a6b5a5f59a5348ee3fba6319fe0595988","author":{"name":"Divshot"},"bugs":{"url":"https://github.com/divshot/ask/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"1.5.0"},"dist":{"shasum":"6f10939a6b5a5f59a5348ee3fba6319fe0595988","tarball":"http://registry.npmjs.org/ask/-/ask-1.5.0.tgz"},"maintainers":[{"name":"scottcorgan","email":"scottcorgan@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-02-24T20:55:38.266Z","created":"2011-05-14T21:34:31.330Z","0.0.1":"2011-05-14T21:34:31.781Z","0.1.0":"2011-12-15T07:20:32.489Z","1.1.0":"2014-11-06T19:47:17.024Z","1.2.0":"2014-11-24T22:42:02.803Z","1.3.0":"2014-11-24T23:31:39.917Z","1.4.0":"2015-01-22T19:13:51.732Z","1.4.1":"2015-02-11T15:24:11.858Z","1.5.0":"2015-02-24T20:55:38.266Z"},"users":{"iamveen":true}}}