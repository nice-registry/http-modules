{"name":"echoecho","description":"Simple testing echo responses to HTTP requests","version":"0.1.10","devDependencies":{"vows":"*","yui-lint":"~0.1.1","jshint":"~0.9.0","istanbul":"~0.2.7"},"scripts":{"pretest":"jshint --config ./node_modules/yui-lint/jshint.json ./lib/*.js","test":"istanbul cover --print both -- vows --spec ./tests/*.js"},"main":"./lib/echo.js","keywords":["echo","http","testing","responses"],"license":"BSD-3-Clause","repository":"https://github.com/davglass/echoecho","gitHead":"d45cbb78e6c31ca6357871e0d65c9700c9be1949","homepage":"https://github.com/davglass/echoecho#readme","versions":[{"number":"0.0.1","date":"2012-09-09T23:52:25.355Z"},{"number":"0.0.2","date":"2012-09-10T00:01:03.470Z"},{"number":"0.0.3","date":"2012-09-11T16:05:05.018Z"},{"number":"0.0.4","date":"2012-09-11T18:11:01.025Z"},{"number":"0.0.5","date":"2012-09-13T13:49:48.403Z"},{"number":"0.0.6","date":"2012-10-11T19:55:43.101Z"},{"number":"0.0.7","date":"2012-10-12T20:31:25.392Z"},{"number":"0.1.0","date":"2012-11-01T18:04:58.923Z"},{"number":"0.1.1","date":"2012-12-19T21:35:09.831Z"},{"number":"0.1.2","date":"2013-01-03T17:39:15.427Z"},{"number":"0.1.3","date":"2013-01-07T19:43:09.215Z"},{"number":"0.1.4","date":"2013-03-08T23:17:30.832Z"},{"number":"0.1.5","date":"2013-04-03T17:00:33.444Z"},{"number":"0.1.6","date":"2013-04-09T22:04:32.702Z"},{"number":"0.1.7","date":"2013-04-22T13:38:36.068Z"},{"number":"0.1.8","date":"2014-03-31T14:40:55.071Z"},{"number":"0.1.9","date":"2014-05-12T13:04:09.425Z"},{"number":"0.1.10","date":"2015-06-03T13:32:00.303Z"}],"readme":"EchoEcho\n========\n\nSimple server reponse echoer to help when testing.\n\nThe idea of `echoecho` is to provide a relative URL listener\nfor any node `http` object and have it return a predictable\nresponse.\n\nInstall\n-------\n\n    npm i echoecho\n\n\nBuild Status\n------------\n\n[![Travis Build Status](https://secure.travis-ci.org/davglass/echoecho.png?branch=master)](http://travis-ci.org/davglass/echoecho)\n\n[Code Coverage Report](http://davglass.github.com/echoecho/)\n\nDefault Routes\n--------------\n\n* `get` - GET Request\n* `post` - POST Request with data\n* `put` - PUT with data\n* `delete` - DELETE with data\n* `status` - Special status route `echo/status/403` returns a `403`, all `http.STATUS_CODES` supported\n* `delay` - Special delay route `echo/delay/2` returns a 200 delayed by 2 seconds.\n* `json` - Send query parameters or POST parameters and get them back as JSON\n* `jsonp` - Send query parameters or POST parameters and get them back as JSON (pass a GET param of `callback=[yourcallback]`\n\nDelayed Responses\n-----------------\n\nYou can delay an `echoecho` request with the `delay` route followed by a value\nin seconds (e.g., `/delay/3`) or a range in seconds (e.g., `/delay/1-3`). Given\na range, the response will be delayed by a random period of time within the\nrange.\n\nYou can also delay any route by prepending the delay route (e.g.,\n`/delay/2/get`, `/delay/1-2/json?response={\"hello\":\"world\"}`, etc).\n\nCustomized Responses\n--------------------\n\nYou can customize the response content for any route (except for `status`)\nby specifying either a `response` or `file` query parameter.\n\nThe `response` query parameter lets you specify the custom response in the URL,\nwhereas the `file` query parameter will attempt to read a file on the server.\n\nThe above ways of specifying custom responses will also work with any delayed\nroute.\n\nUsing in Your Server\n--------------------\n\n__I recommend using it with Express/Connect to get a properly parsed body for POST/PUT requests__\n\nThere are 3 things you need to do inside the Node server providing these tests:\n\n* Tell `echoecho` your relative paths to scan\n* Check to see if `echoecho` can repond to a request\n* Have `echoecho` serve the request\n\nIn addition, when serving requests, you can specify an optional directory\nroot within which `echoecho` can find the files to serve for customized\nresponses by providing an object containing a `dirroot`\nkey as the third argument to `serve`.\n\nHere's a simple example, assuming your tests serve from `/build/tests/mine/index.html`\n\n```js\n//Prepping once\n//Tell echoecho to serve from these base paths\nechoecho.paths([\n    '/build/tests/mine/index.html' //echoecho will serve from /build/tests/mine/\n]);\n\n//From inside your request handler, like http.createServer or express.createServer\n\nif (echoecho.handle(req.url)) { //Can echoecho respond to this?\n    echoecho.serve(req, res); //Pass in the request and response objects and echoecho will take it from here\n} else {\n    //throw your 404\n}\n```\n\nInstantiate an EchoEcho object:\n\n```\nvar ee = new echoecho.EchoEcho({\n    paths: [] //base paths\n});\n\n//Like above\nee.handle();\nee.serve();\n\n```\n\nHandling all requests with /echo/ in the URL:\n\n```\n\nvar ee = new require('echoecho').EchoEcho({\n    all: true\n});\n\n//Like above\nee.handle();\nee.serve();\n```\n\nHandling all requests and serving from a different root:\n\n```\n\nvar ee = new require('echoecho').EchoEcho({\n    all: true\n});\n\n// Can echoecho respond to this?\nif (echoecho.handle(req.url)) {\n    // Pass in the request and response objects and echoecho will take it from here.\n    // Specify the optional configuration for dirroot to use an alternate\n    // base before the requested file.\n    echoecho.serve(req, res, {\n        dirroot: '/path/to/intended/root'\n    });\n} else {\n    // throw your 404.\n}\n```\n\nUsing in Your Tests\n-------------------\n\nNow that your server is accepting `echoecho` responses, you can start using them in your HTML tests like this:\n\nFrom index.html you can use relative URL's that start with `echo` and then contain your route.\n\n* `echo/status/200`\n* `echo/status/500`\n* `echo/get?foo=bar&good=bad`\n* `echo/post`\n\nThat's it, `echoecho` should return what it was given\n\nExtending\n---------\n\n`echoecho` has an internal \"scheme\" that you can add methods to inside your personal server.\n\n`echoecho.scheme` contains an Object liternal of paths as keys and function handlers as values.\n\n```\n\nechoecho.scheme.get = function(req, res) { ... };\n\n```\n\nRight now, these are the route in the echo router: `echo/ROUTE/etc`, I may end up added regex support for this\nbut for the inital version I didn't need them.\n","starsCount":1,"created":"2012-09-09T23:52:24.237Z","modified":"2016-01-05T20:27:39.476Z","lastPublisher":{"name":"davglass","email":"davglass@gmail.com"},"owners":[{"name":"davglass","email":"davglass@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"echoecho","_nodeVersion":"0.12.4","_npmUser":{"name":"davglass","email":"davglass@gmail.com"},"_npmVersion":"2.10.1","_rev":"1-ec6cac3b9101d8e26701d27271d42fc4","_shasum":"4a68dc6eb567c2db13f7ae6bcc9d70d52139564d","author":{"name":"Dav Glass","email":"davglass@gmail.com"},"bugs":{"url":"http://github.com/davglass/echoecho/issues"},"directories":{},"dist-tags":{"latest":"0.1.10"},"dist":{"shasum":"4a68dc6eb567c2db13f7ae6bcc9d70d52139564d","tarball":"http://registry.npmjs.org/echoecho/-/echoecho-0.1.10.tgz"},"maintainers":[{"name":"davglass","email":"davglass@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-01-05T20:27:39.476Z","created":"2012-09-09T23:52:24.237Z","0.0.1":"2012-09-09T23:52:25.355Z","0.0.2":"2012-09-10T00:01:03.470Z","0.0.3":"2012-09-11T16:05:05.018Z","0.0.4":"2012-09-11T18:11:01.025Z","0.0.5":"2012-09-13T13:49:48.403Z","0.0.6":"2012-10-11T19:55:43.101Z","0.0.7":"2012-10-12T20:31:25.392Z","0.1.0":"2012-11-01T18:04:58.923Z","0.1.1":"2012-12-19T21:35:09.831Z","0.1.2":"2013-01-03T17:39:15.427Z","0.1.3":"2013-01-07T19:43:09.215Z","0.1.4":"2013-03-08T23:17:30.832Z","0.1.5":"2013-04-03T17:00:33.444Z","0.1.6":"2013-04-09T22:04:32.702Z","0.1.7":"2013-04-22T13:38:36.068Z","0.1.8":"2014-03-31T14:40:55.071Z","0.1.9":"2014-05-12T13:04:09.425Z","0.1.10":"2015-06-03T13:32:00.303Z"},"users":{"davglass":true}}}