{"name":"ngx-http-test","version":"1.3.1","description":"Angular Http test helper","main":"index.js","module":"index.js","scripts":{"cleanup":"rimraf src/*.js src/*.map index.js index.js.map","deploy":"np --skip-cleanup","generate":"npm run cleanup && npm run transpile","transpile":"tsc","test":"karma start","test-watch":"karma start --no-single-run --auto-watch"},"keywords":["angular","http","testing"],"repository":"https://github.com/blacksonic/ngx-http-test","dependencies":{},"peerDependencies":{"@angular/core":"^2.0.0 || >=4.0.0","@angular/http":"^2.0.0 || >=4.0.0"},"devDependencies":{"@angular/common":"~4.0.1","@angular/compiler":"~4.0.1","@angular/core":"~4.0.1","@angular/http":"~4.0.1","@angular/platform-browser":"~4.0.1","@angular/platform-browser-dynamic":"~4.0.1","@types/jasmine":"~2.5.47","@types/node":"~7.0.12","awesome-typescript-loader":"~3.1.2","core-js":"~2.4.1","jasmine-core":"~2.5.2","karma":"~1.5.0","karma-jasmine":"~1.1.0","karma-phantomjs-launcher":"~1.0.4","karma-sourcemap-loader":"~0.3.7","karma-webpack":"~2.0.3","np":"~2.13.1","rimraf":"~2.6.1","rxjs":"~5.2.0","typescript":"~2.2.2","webpack":"~2.3.2","zone.js":"~0.8.5"},"license":"ISC","gitHead":"ac244c178e74c5d6c1536356d1bef05d40fcfaeb","homepage":"https://github.com/blacksonic/ngx-http-test#readme","versions":[{"number":"1.0.0","date":"2016-12-21T18:26:52.364Z"},{"number":"1.2.0","date":"2016-12-29T21:38:47.528Z"},{"number":"1.3.1","date":"2017-04-03T07:13:36.052Z"}],"readme":"# ngx-http-test\n[![Build Status](https://travis-ci.org/blacksonic/ngx-http-test.svg?branch=master)](https://travis-ci.org/blacksonic/ngx-http-test)\n[![Dependency Status](https://david-dm.org/blacksonic/ngx-http-test.svg)](https://david-dm.org/blacksonic/ngx-http-test)\n[![devDependency Status](https://david-dm.org/blacksonic/ngx-http-test/dev-status.svg)](https://david-dm.org/blacksonic/ngx-http-test?type=dev)\n[![peerDependency Status](https://david-dm.org/blacksonic/ngx-http-test/peer-status.svg)](https://david-dm.org/blacksonic/ngx-http-test?type=peer)\n\nMakes testing Http calls in Angular 2 as easy as were in AngularJS.\n\n### Installation\n\n```bash\nnpm install ngx-http-test --save-dev\n```\n\n### Usage\n\n```typescript\n// First add it as a provider\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    providers: [\n      ...\n      FakeBackend.getProviders()\n    ]\n  });\n});\n\n// Get the instance of it\nbeforeEach(inject([..., FakeBackend], (..., fakeBackend: FakeBackend) => {\n  backend = fakeBackend;\n}));\n\n// Use it in a test case\nit('should call fake endpoint', (done) => {\n  backend.expectGET('users/blacksonic').respond({ username: 'blacksonic' });\n  \n  subject.getProfile('blacksonic').subscribe((response) => {\n    expect(response).toEqual({ username: 'blacksonic' });\n    done();\n  });\n})\n```\n\nIt is possible to specify every detail of the response.\n\n```typescript\n// can be object, it will be json stringified if not a string\nlet responseBody = { username: 'blacksonic' };\nlet responseStatus = 200;\nlet responseHeaders = { 'Content-Type': 'application/json' };\n\nbackend\n  .expectGET('users/blacksonic')\n  .respond(responseBody, responseStatus, responseHeaders);\n```\n\nIt is not necessary to give the response, in that case the backend will respond with 200 empty response.\n\nAlso the expected url can be given as a regular expression instead of a string.\n\nFor requests outside of GET the request body can be also specified.\n\n```typescript\nbackend.expectPost(\n  'usernamepassword/login', // url\n  { username: 'blacksonic', password: 'secret' }, // payload\n  { 'Content-Type': 'application/json' } // headers\n).respond(responseForm);\n```\n\nConvenience methods available for different kind of requests: \n```expectGet```, ```expectPost```, ```expectDelete```, ```expectPut```, ```expectPatch```, ```expectHead```, ```expectOptions```.\n\nAfter the tests run it is possible to check for outstanding connections or expectations that are not addressed.\n\n```typescript\nafterEach(() => {\n  backend.verifyNoPendingRequests();\n  backend.verifyNoPendingExpectations();\n});\n```\n\nBy default expectations get verified instantly, but this can be switched off and do the verification by hand.\n\n```typescript\nit('should call fake endpoint', (done) => {\n  backend.setAutoRespond(false);\n  backend.expectGET('users/blacksonic').respond({ username: 'blacksonic' });\n  \n  subject.getProfile('blacksonic').subscribe((response) => {\n    expect(response).toEqual({ username: 'blacksonic' });\n    done();\n  });\n  \n  backend.flush();\n})\n```\n\nThe ```flush``` method resolves all pending connections. It can also be resolved one by one with the ```flushNext``` method.\n","created":"2016-12-21T18:26:52.364Z","modified":"2017-04-03T07:13:36.052Z","lastPublisher":{"name":"blacksonic","email":"soos.gabor86@gmail.com"},"owners":[{"name":"blacksonic","email":"soos.gabor86@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"ngx-http-test","_nodeVersion":"6.7.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/ngx-http-test-1.3.1.tgz_1491203615477_0.8304427270777524"},"_npmUser":{"name":"blacksonic","email":"soos.gabor86@gmail.com"},"_npmVersion":"3.10.3","_rev":"3-98e8b44456bf2ab1f9bb7cc7f61378fc","_shasum":"f3aee2fb911c6cab845307ec15661b8ffcb68e17","author":{"name":"blacksonic","email":"soos.gabor86@gmail.com"},"bugs":{"url":"https://github.com/blacksonic/ngx-http-test/issues"},"directories":{},"dist-tags":{"latest":"1.3.1"},"dist":{"shasum":"f3aee2fb911c6cab845307ec15661b8ffcb68e17","tarball":"https://registry.npmjs.org/ngx-http-test/-/ngx-http-test-1.3.1.tgz"},"maintainers":[{"name":"blacksonic","email":"soos.gabor86@gmail.com"}],"readmeFilename":"readme.md","time":{"modified":"2017-04-03T07:13:36.052Z","created":"2016-12-21T18:26:52.364Z","1.0.0":"2016-12-21T18:26:52.364Z","1.2.0":"2016-12-29T21:38:47.528Z","1.3.1":"2017-04-03T07:13:36.052Z"}}}