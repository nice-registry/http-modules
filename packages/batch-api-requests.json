{"name":"batch-api-requests","version":"0.0.1","description":"Nodejs Client and Express module for handling batch HTTP requests.","main":"lib/index.js","scripts":{"test":"NODE_ENV=test mocha --recursive"},"repository":"https://github.com/enigmamarketing/batch-api-requests","keywords":["batch","api","express","middleware"],"license":"Apache 2.0","homepage":"https://github.com/enigmamarketing/batch-api-requests#readme","dependencies":{"common-errors":"^0.5.3","express":"^4.0.0","merge":"1.2.0","q":"^1.4.1","request":"^2.65.0"},"devDependencies":{"mocha":"^2.3.3"},"gitHead":"13c6dff46c783e0e55f5ba546c20ea076636d45c","versions":[{"number":"0.0.1","date":"2015-10-14T15:35:09.425Z"}],"readme":"# batch-api-requests\n\nModule for doing parallel JSON HTTP requests with a single, persistent connection. The module includes both a Node.js client and Express 4 server middleware.\n\nIt's loosely based on the implementation described in the [oData Specification](http://www.odata.org/documentation/odata-version-3-0/batch-processing/) and [Google Batch Requests](https://cloud.google.com/storage/docs/json_api/v1/how-tos/batch?hl=en). \n\n## Client\n\nBasic usage:\n\n```\nvar batchClient = require('batch-api-requests').client,\n\tbatchConnection = batchClient.connect({\n\t\turl: 'https://api.someserver.com/batch',\n\t\theaders: {\n\t\t\tAuthorization: 'Bearer {{someToken}}''\n\t\t}\n\t}),\n\titems = [// an array of request objects\n\t\t{\n            method: 'POST',\n            path: '/test1',\n            body: {\n\t\t\t\tname: 'John'\n        \t}\n        }, {\n            method: 'POST',\n            path: '/test1',\n            body: {\n\t\t\t\tname: 'Peter'\n        \t}\n        }\n\t];\n\t\n\t// sending all items\n\titems.forEach(function (item) {\n\t\tbatchConnection.send(item, function (error, body, response) {\n            // handle item response...\n            //\n            // body: String\n\t\t\t// response: {\n\t\t\t//      statusCode: Number,\n\t\t\t//      statusMessage: String,\n\t\t\t//      headers: {}, \n\t\t\t// }\n        });\n\t});\n\n\tbatchConnection.close();\n```\n**Remember to call the close method**\n\nThe last items may not be sent until you close the connection. \n\nOnce the connection has been set as closed all consequent send calls will return an error and no message will be sent.\n\nThe connection may be unexpectedly dropped by the remote server. In that case some of the pending requests will be ignored and errors will be returned. There is the chance that the request has already been sent and processed by the remote server but we didn't receive the response due to the dropped connection. Any following send command will re-open the connection.\n\nThe callback on the send method is optional;\n\n## Server\n\nThe middleware will act as a proxy, issuing an HTTP request for each one of the batched requests.\n\nBasic usage:\n\n```\nvar batchMiddleware = require('batch-api-requests').server,\n\texpress = require('express'),\n \tapp = express(),\n \toptions = {};// check available options and it's default values\n\napp.use('/batch', batchMiddleware(options));\n```\n\n### options.logger\nA logger object with the following methods:\n\n- error\n- info\n- warn\n\nIf no logger is provided console will be used.\n\nSetting it as false will disable any reporting.\n\n### options.parallelLimit\ndefault value: 10\n\nMaximum parallel requests that will be performed by the middleware, for each connection. This allows us to control the stress on the application servers. \n\n### options.retries\ndefault value: 0\n\nSetting this value will force a number of re-tries. All internal errors will be logged but only the last one will be returned to the client.\n\n### options.protocol\nThe protocol to be used. By default 'https'. \n\n### options.timeout\nDefault value 5000. \n\nThis is the timeout for the proxied request, not the batch connection. Each batch request will be performed internally on the server/datacenter, so a small timeout is acceptable.\n\n","created":"2015-10-14T15:35:09.425Z","modified":"2015-10-14T15:35:47.312Z","lastPublisher":{"name":"relvao","email":"relvao@gmail.com"},"owners":[{"name":"enigma-marketing","email":"admin@enigma-marketing.co.uk"},{"name":"relvao","email":"relvao@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"batch-api-requests","_npmUser":{"name":"relvao","email":"relvao@gmail.com"},"_npmVersion":"1.4.28","_rev":"1-17ff0d64c23fcd03ca0502424916154f","_shasum":"82e7ecbbefed85cda9fef8111bd706799287cf12","author":{"name":"Enigma Marketing"},"bugs":{"url":"https://github.com/enigmamarketing/batch-api-requests/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"0.0.1"},"dist":{"shasum":"82e7ecbbefed85cda9fef8111bd706799287cf12","tarball":"http://registry.npmjs.org/batch-api-requests/-/batch-api-requests-0.0.1.tgz"},"maintainers":[{"name":"enigma-marketing","email":"admin@enigma-marketing.co.uk"},{"name":"relvao","email":"relvao@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-10-14T15:35:47.312Z","created":"2015-10-14T15:35:09.425Z","0.0.1":"2015-10-14T15:35:09.425Z"}}}