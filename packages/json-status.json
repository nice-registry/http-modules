{"name":"json-status","description":"A connect-compatible middleware for status responses on JSON HTTP APIs","keywords":["json","status","error","api","rest","http","hypermedia"],"version":"0.5.4","scripts":{"test":"make test-coveralls"},"dependencies":{},"devDependencies":{"coveralls":"2.10.0","jshint":"2.4.4","istanbul":"0.2.7","request":"2.19.0","mocha-lcov-reporter":"0.0.1","mocha":"1.8.1","connect":"2.7.11","should":"1.1.0"},"engines":{"node":">=0.8.14","npm":"1.1.65"},"main":"index.js","repository":"https://github.com/cainus/json-status","license":"BSD","gitHead":"9eea16035c4246fb8fcd822f81a33c5b68322db7","homepage":"https://github.com/cainus/json-status#readme","versions":[{"number":"0.0.1","date":"2013-06-09T18:07:16.828Z"},{"number":"0.0.2","date":"2013-06-09T18:17:46.426Z"},{"number":"0.1.0","date":"2013-06-10T05:19:45.882Z"},{"number":"0.2.0","date":"2013-07-14T23:19:06.859Z"},{"number":"0.2.1","date":"2014-03-10T23:26:45.583Z"},{"number":"0.2.2","date":"2014-03-10T23:50:29.067Z"},{"number":"0.2.3","date":"2014-03-24T23:35:17.560Z"},{"number":"0.2.4","date":"2014-03-28T19:06:03.261Z"},{"number":"0.3.0","date":"2014-04-01T03:01:36.338Z"},{"number":"0.4.0","date":"2014-04-24T18:48:50.521Z"},{"number":"0.5.0","date":"2014-06-09T06:43:46.587Z"},{"number":"0.5.1","date":"2014-07-05T18:41:57.343Z"},{"number":"0.5.2","date":"2014-07-10T23:01:14.728Z"},{"number":"0.5.3","date":"2015-10-09T00:58:02.633Z"},{"number":"0.5.4","date":"2016-08-13T20:00:39.219Z"}],"readme":"# Json-Status\n[![Build\nStatus](https://secure.travis-ci.org/cainus/json-status.png?branch=master)](http://travis-ci.org/cainus/json-status)\n[![Coverage Status](https://coveralls.io/repos/cainus/json-status/badge.png?branch=master)](https://coveralls.io/r/cainus/json-status)\n[![NPM version](https://badge.fury.io/js/json-status.png)](http://badge.fury.io/js/json-status)\n\nJson-status is a node.js library that makes JSON status and error messages simpler and more consistent.\n\n## Simple example:\nIf you use the middleware, you'll be able to give consistent json responses for all kinds of different HTTP status code scenarios:\n\neg This code:\n```javascript\n  res.status.notFound(\"couldn't find that object\");\n```\n\n...will respond with a json string like so:\n```javascript\n  {\n    error : {\n      type : 404,\n      message : \"Not found\",\n      detail : \"couldn't find that object\"\n    }\n  }\n```\n\n\n\n##Installation\n```\nnpm install json-status --save\n```\n\n##Setup as connect middleware\n```javascript\n  var JsonStatus = require('json-status');\n  var connect = require('connect');\n  var server = connect.createServer();\n  var statusMiddleware = JsonStatus.connectMiddleware({ \n    onError : function(data){\n      console.log(\"error: \", data.type, data.message, data.detail);\n    }\n  });\n  server.use(statusMiddleware);\n  server.use(function(req, res){\n    res.status.internalServerError(\"fake error!\");  // this will respond with a 500\n  });\n```\n\n##No frills setup\n```javascript\n  var JsonStatus = require('json-status');\n  var http = require('http');\n  http.createServer(function (req, res) {\n    new JsonStatus(req, res).internalServerError(\"fake error too!\");\n  }).listen(1337, '127.0.0.1');\n\n```\n\n## General Usage\nTo understand what the HTTP status codes mean, please refer to <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</a>.\n\n\n## JsonStatus.connectMiddleware(options) \nThis method takes an `options` object and returns a connect-compatible middleware, ready to be `use()`ed in a connect/express application.\n\nExample:\n\n```javascript\n  var statusMiddleware = JsonStatus.connectMiddleware({ \n    namespace : \"status\"\n    quiet500 : true\n    onError : function(data){\n      console.log(\"error: \", data.type, data.message, data.detail);\n    }\n  });\n  server.use(statusMiddleware);\n```\n\nThe options object is actually optional, as are all its properties.\nYou can modify how the middleware behaves through these properties\nthough:\n\n**namespace** (string) : dictate the name that will be used to add json-status to a response object.\n\neg, if you do this:\n\n```javascript\n  var statusMiddleware = JsonStatus.connectMiddleware({ \n    namespace : \"blah\"\n  });\n```\n\nThe json-status object will be usable in a request handler like this:\n```javascript\n  res.blah.internalServerError(\"something bad happened\");\n```\n\nThe default value is \"status\".\n\n**quiet500** (boolean): turn on 'quiet500' mode, meaning that the details of a 500 error will be suppressed.\n\neg, for this code:\n```javascript\n  res.status.internalServerError(\"something bad happened\");\n```\n\nThe response will be this if quiet500 is true:\n```javascript\n  {\n    error : {\n      type : 500,\n      message : \"Internal Server Error\"\n    }\n  }\n\n```\nThe response will be this if quiet500 is unset or false:\n```javascript\n  {\n    error : {\n      type : 500,\n      message : \"Internal Server Error\",\n      detail : \"something bad happened\"\n    }\n  }\n\n```\nThe `quiet500` mode is nice on production systems where you don't necessarily want your users to know exactly what went wrong on an internal server error, but you still want to provide the details for logging purposes.\n\n**onError** (function):  pass a callback that takes an error object as its only parameter in order to have that callback called on every 4xx or 5xx status code.  The error object will have `req`, `res`, `type`, `message`, and `detail` parameters on it.  This is really useful for logging and/or metrics.\n\n## Methods\n\nThese methods generally set the HTTP status and end the response, so in general you should not expect to write more to the response after these. If a response body makes sense, it will generally be written automatically. For clarity, it's recommended that when you call \none of these functions, you call it with `return` in front of it. Here's an example:\n\n```javascript\nserver.route('/', {  GET : function(req, res){\n                              return res.status.redirect('/someOtherUrl');\n                            }});\n```\n\nHere are the functions that it makes available in your method handler:\n\n\n###Redirect scenarios\n####res.status.created(redirectUrl, [responseJsonObject]);\nThis method is used for HTTP STATUS 201 scenarios when the server has just created a resource successfully so that the server can tell the client where to find it. It sets the status to 201 and sets the 'Location' header to the redirectUrl.  An optional second parameter can additionally be sent to be stringified as the response body.\n\n####res.status.movedPermanently(redirectUrl);\nThis method is used for HTTP STATUS 301 scenarios where a resource has been permanently moved somewhere else so the server can tell the client where to find it. It sets the status to 301 and sets the 'Location' header to the redirectUrl.\n\n####res.status.redirect(redirectUrl);\nThis is just an alias of movedPermanently()\n\n###Success responses\n\n\"200 OK\" statuses are the default, so you don't need to specify those explicitly.\n\n201 Created statuses are described in the redirect section above.\n\n\n####res.status.accepted();\n\nUsed to indicate that a response has been accepted, but not yet processed, this response will emit a \"202 Accepted\" status.\n\n####res.status.noContent();\nUsed to indicate that a request was successful, but there's no body to return (for example, a successful DELETE).  This response will emit a \"204 No Content\" status.\n\n####res.status.resetContent();\n\nUsed to indicate that a request was sucessful so a related UI (usually a form) should clear its content.  This response will emit a \"205 Reset Content\" status.\n\n\n###Error Scenarios\nAll of the error scenarios are handled similarly and attempt to show a response body that indicates the error that occurred as well. The status code will be set on the response as well as in that response body.\n\nAll of these methods additionally take a single parameter where additional detail information can be added. For example:\n\n```javascript\nserver.route('/', {  GET : function(req, res){\n                              return res.status.internalServerError('The server is on fire.');\n                            }});\n```\n\nOutput:\n```javascript\n{\"type\":500,\"message\":\"Internal Server Error\",\"detail\":\"The server is on fire\"}\n```\n\n###Error response methods:\n\n####res.status.badRequest([detail])\n```javascript\n{\"type\":400,\"message\":\"Bad Request\"}\n```\n\n####res.status.unauthenticated([detail])\n```javascript\n{\"type\":401,\"message\":\"Unauthenticated\"}\n```\n\n####res.status.forbidden([detail])\n```javascript\n{\"type\":403,\"message\":\"Forbidden\"}\n```\n\n####res.status.notFound([detail])\n```javascript\n{\"type\":404,\"message\":\"Not Found\"}\n```\n\n####res.status.methodNotAllowed([detail])\n```javascript\n{\"type\":405,\"message\":\"Method Not Allowed\"}\n```\n\n####res.status.notAcceptable([detail])\n```javascript\n{\"type\":406,\"message\":\"Not Acceptable\"}\n```\n\n####res.status.conflict([detail])\n```javascript\n{\"type\":409,\"message\":\"Conflict\"}\n```\n\n####res.status.gone([detail])\n```javascript\n{\"type\":410,\"message\":\"Gone\"}\n```\n\n####res.status.lengthRequired([detail])\n```javascript\n{\"type\":411,\"message\":\"Length Required\"}\n```\n\n####res.status.preconditionFailed([detail])\n```javascript\n{\"type\":412,\"message\":\"Precondition Failed\"}\n```\n\n####res.status.requestEntityTooLarge([detail])\n```javascript\n{\"type\":413,\"message\":\"'Request Entity Too Large\"}\n```\n\n####res.status.requestUriTooLong([detail])\n```javascript\n{\"type\":414,\"message\":\"Request URI Too Long\"}\n```\n\n####res.status.unsupportedMediaType([detail])\n```javascript\n{\"type\":415,\"message\":\"Unsupported Media Type\"}\n```\n\n####res.status.unprocessableEntity([detail])\n```javascript\n{\"type\":422,\"message\":\"'Unprocessable Entity\"}\n```\n\n####res.status.tooManyRequests([detail])\n```javascript\n{\"type\":429,\"message\":\"Too Many Requests\"}\n```\n\n####res.status.internalServerError([detail])\n```javascript\n{\"type\":500,\"message\":\"Internal Server Error\"}\n```\n\n####res.status.notImplemented([detail])\n```javascript\n{\"type\":501,\"message\":\"Not Implemented\"}\n```\n\n####res.status.badGateway([detail])\n```javascript\n{\"type\":502,\"message\":\"Bad Gateway\"}\n```\n\n####res.status.serviceUnavailable([detail])\n```javascript\n{\"type\":503,\"message\":\"Service Unavailable\"}\n```\n\n####res.status.gatewayTimeout([detail])\n```javascript\n{\"type\":504,\"message\":\"Gateway Timeout\"}\n```\n\n","created":"2013-06-09T18:07:15.661Z","modified":"2017-06-14T23:09:18.632Z","lastPublisher":{"name":"cainus","email":"gregg@caines.ca"},"owners":[{"email":"jet@classdojo.com","name":"jetzhou"},{"email":"gregg@caines.ca","name":"cainus"}],"other":{"_attachments":{},"_from":".","_id":"json-status","_nodeVersion":"6.2.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/json-status-0.5.4.tgz_1471118438958_0.9658538184594363"},"_npmUser":{"name":"cainus","email":"gregg@caines.ca"},"_npmVersion":"3.9.5","_rev":"2-fd3bee6b008002db6caaf1b3c3cb9991","_shasum":"a857d2787f698087e2996843d8fb575329963aa8","author":{"name":"Gregg Caines"},"bugs":{"url":"https://github.com/cainus/json-status/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"0.5.4"},"dist":{"shasum":"a857d2787f698087e2996843d8fb575329963aa8","tarball":"http://registry.npmjs.org/json-status/-/json-status-0.5.4.tgz"},"maintainers":[{"email":"jet@classdojo.com","name":"jetzhou"},{"email":"gregg@caines.ca","name":"cainus"}],"readmeFilename":"README.md","time":{"modified":"2017-06-14T23:09:18.632Z","created":"2013-06-09T18:07:15.661Z","0.0.1":"2013-06-09T18:07:16.828Z","0.0.2":"2013-06-09T18:17:46.426Z","0.1.0":"2013-06-10T05:19:45.882Z","0.2.0":"2013-07-14T23:19:06.859Z","0.2.1":"2014-03-10T23:26:45.583Z","0.2.2":"2014-03-10T23:50:29.067Z","0.2.3":"2014-03-24T23:35:17.560Z","0.2.4":"2014-03-28T19:06:03.261Z","0.3.0":"2014-04-01T03:01:36.338Z","0.4.0":"2014-04-24T18:48:50.521Z","0.5.0":"2014-06-09T06:43:46.587Z","0.5.1":"2014-07-05T18:41:57.343Z","0.5.2":"2014-07-10T23:01:14.728Z","0.5.3":"2015-10-09T00:58:02.633Z","0.5.4":"2016-08-13T20:00:39.219Z"}}}