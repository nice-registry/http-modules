{"name":"maileron","description":"Server that receives SMTP and serves mail up as JSON via HTTP","version":"0.0.1","repository":"https://github.com/agnoster/maileron","keywords":["email","testing","smtp","json","rest"],"bin":{"maileron":"./bin/maileron"},"dependencies":{"restify":"~1.4.4","optimist":"~0.3.4","simplesmtp":"~0.1.20","mailparser":"~0.2.27"},"devDependencies":{"should":"~1.1.0","mocha":"~1.4.0","pony":"0.0.2","request":"~2.10.0"},"engines":{"node":">=0.6.0"},"scripts":{"test":"./node_modules/.bin/mocha -R tap"},"license":"MIT","readme":"# Maileron [![build status](https://secure.travis-ci.org/agnoster/maileron.png?branch=master)](http://travis-ci.org/agnoster/maileron)\n\nSMTP ==> HTTP REST JSON API\n\n## wtf\n\nStand-alone server for receiving email via SMTP and providing access to it via\nan HTTP REST JSON API. Useful for automated testing that requires receiving\nemail and doing stuff with it. I wanted to be able to test things like the\n\"forgot password\" flow, or \"email confirmation\", from automated tests.\n\nCurrently has no persistence or notification. It just receives mail, serves up\na mailbox as a JSON array, and lets you clear a mailbox with `DELETE`. That's\nit.\n\n## status\n\nPrototype. Not ready for production use, but could be used for basic testing\npurposes.\n\n## install\n\n    npm install -g maileron\n\n## setup\n\n    sudo maileron\n\nThe `sudo` is required to listen to ports 25 and 80 for SMTP and HTTP,\nrespectively. Without sudo, maileron will run on ports 9025 and 9080, which means it\nwould only work with specially-configured mail clients.\n\nNow, point your MX record for a domain (in my case, `pat.agnoster.net`) to the\nserver running maileron (which for me is also `pat.agnoster.net`).\n\n## use\n\nSend an email to `example@pat.agnoster.net`, for instance:\n\n```\nMAIL example@pat.agnoster.net\nSubject: Hello World\n\nHow are you?\n```\n\nThen hit the webserver (in this example, `pat.agnoster.net`) and check it out\n(some values elided for clarity):\n\n```\nGET /inbox/example\n```\n\n```\n200 OK\nContent-type: application/json\n\n[\n  {\n    \"text\": \"How are you?\",\n    \"headers\": { ... },\n    \"subject\": \"Hello World\",\n    \"from\": [\n      {\n        \"address\": \"i@agnoster.net\",\n        \"name\": \"Isaac Wolkerstorfer\"\n      }\n    ],\n    \"to\": \"example\",\n    \"envelope\": {\n      \"from\": \"agnoster@gmail.com\",\n      \"to\": [\"example@pat.agnoster.net\"],\n      \"date\": \"2012-08-23T17:50:20.013Z\"\n    }\n  },\n  ...\n]\n```\n\nThat's really all there is to it. You can `DELETE` a mailbox to clear it.\n\n## ideas\n\n    GET test.example.com/inbox/example.user.1/?limit=1&timeout=60\n\nWait for the next mail to come into this mailbox. This means you can easily do\na `DELETE`, perform an action that should trigger an email, then issue a `GET\n?limit&timeout` to wait for the email to show up.\n\n## license = MIT\n","versions":[{"number":"0.0.1","date":"2012-08-23T21:19:49.235Z"}],"created":"2012-08-23T21:19:47.602Z","modified":"2012-08-23T21:19:49.235Z","owners":[{"name":"agnoster","email":"agnoster@gmail.com"}],"other":{"_attachments":{},"_id":"maileron","_rev":"1-09d51ddb205e9d0f1a1b22db0fb00c1f","author":{"name":"Isaac Wolkerstorfer","email":"i@agnoster.net","url":"http://agnoster.net"},"directories":{},"dist-tags":{"latest":"0.0.1"},"dist":{"shasum":"9bb22c1185f3d3fd85090a2ecdec66f70581f26d","tarball":"http://registry.npmjs.org/maileron/-/maileron-0.0.1.tgz"},"maintainers":[{"name":"agnoster","email":"agnoster@gmail.com"}],"time":{"modified":"2012-08-23T21:19:49.235Z","created":"2012-08-23T21:19:47.602Z","0.0.1":"2012-08-23T21:19:49.235Z"}}}