{"name":"mock-http-server","version":"0.1.0","description":"Controllable HTTP Server Mock for your functional tests","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/spreaker/node-mock-http-server","license":"MIT","homepage":"https://github.com/spreaker/node-mock-http-server","dependencies":{"connect":"^3.4.0","multiparty":"^4.1.2","underscore":"^1.8.3"},"gitHead":"65b74944d9a302c2e7f2e14fea2a1c91ee58d093","versions":[{"number":"0.0.1","date":"2015-11-27T10:48:41.399Z"},{"number":"0.0.2","date":"2015-11-27T10:55:05.676Z"},{"number":"0.0.3","date":"2015-12-01T17:31:42.158Z"},{"number":"0.0.4","date":"2016-02-04T16:16:36.810Z"},{"number":"0.1.0","date":"2017-02-03T16:29:44.060Z"}],"readme":"# Node.js HTTP Server Mock\n\nMockable HTTP Server your functional tests.\n\n`npm install mock-http-server`\n\n\n### Full working example\n\n```js\nvar ServerMock = require(\"mock-http-server\");\n\ndescribe('Test', function() {\n\n    // Run an HTTP server on localhost:9000\n    var server = new ServerMock({ host: \"localhost\", port: 9000 });\n\n    beforeEach(function(done) {\n        server.start(done);\n    });\n\n    afterEach(function(done) {\n        server.stop(done);\n    });\n\n    it('should do something', function(done) {\n        server.on({\n            method: 'GET',\n            path: '/resource',\n            reply: {\n                status:  200,\n                headers: { \"content-type\": \"application/json\" },\n                body:    JSON.stringify({ hello: \"world\" })\n            }\n        });\n\n        // Now the server mock will handle a GET http://localhost:9000/resource\n        // and will reply with 200 `{\"hello\": \"world\"}`\n        done();\n    });\n});\n```\n\n\n### Methods\n\n#### Constructor\n\n`new ServerMock(httpConfig, httpsConfig)` instance a new mockable HTTP/HTTPS Server. If `httpConfig` is defined, creates an HTTP server, while if `httpsConfig` is defined, creates an HTTPS server. They can be both defined.\n\nExample:\n```js\nvar server = new ServerMock({\n    host: \"localhost\",\n    port: 80\n}, {\n    host: \"localhost\",\n    port: 443,\n    key: fs.readFileSync(\"private-key.pem\"),\n    cert: fs.readFileSync(\"certificate.pem\")\n});\n```\n\n\n#### `start(callback)`\n\nStarts the server and invokes the callback once ready to accept connections.\n\nExample:\n```js\nbeforeEach(function(done) {\n    server.start(done);\n});\n```\n\n\n#### `stop(callback)`\n\nStops the server and invokes the callback all resources have been released.\n\nExample:\n```js\nafterEach(function(done) {\n    server.stop(done);\n});\n```\n\n#### `on(options)`\n\nDefines a request handler. Multiple calls to `on()` can be chained together.\n\n| Option          | Default                                  | Description |\n| --------------- | ---------------------------------------- | ----------- |\n| `method`        | `GET`                                    | HTTP method to match. Can be `*` to match any method. |\n| `path`          |                                          | HTTP request path to match. |\n| `filter`        |                                          | The value is a filter function `fn(request)`: if it returns `true` the handler gets executed. |\n| `reply.status`  | `200`                                    | HTTP response status code. Can be a `number` or a synchronous function `fn(request)` that returns the response status code. |\n| `reply.headers` | `{ \"content-type\": \"application/json\" }` | HTTP response headers. `content-length` is managed by the server implementation. |\n| `reply.body`    | empty string                             | HTTP response body. Can be a `string`, a synchronous function `fn(request)` that returns the body, or an asynchronous function `fn(request, reply)` that send the response body invoking `reply(body)`. |\n| `delay`         | 0                                        | Delays the response by X milliseconds. |\n\n\nExample:\n```js\nserver.on({\n    method: 'GET',\n    path: '/resource',\n    reply: {\n        status:  200,\n        headers: { \"content-type\": \"application/json\" },\n        body:    JSON.stringify({ hello: \"world\" })\n    }\n});\n```\n\nor:\n```js\nserver.on({\n    method: '*',\n    path: '/resource',\n    reply: {\n        status:  200,\n        headers: { \"content-type\": \"application/json\" },\n        body:    function(req) {\n            return req.method === \"GET\" ? JSON.stringify({ action: \"read\" }) : JSON.stringify({ action: \"edit\" });\n        }\n    }\n});\n```\n\nor:\n```js\nserver.on({\n    method: '*',\n    path: '/resource',\n    reply: {\n        status:  200,\n        headers: { \"content-type\": \"application/json\" },\n        body:    function(req, reply) {\n            setTimeout(function() {\n                reply(req.method === \"GET\" ? JSON.stringify({ action: \"read\" }) : JSON.stringify({ action: \"edit\" }));\n            }, 100);\n        }\n    }\n});\n```\n\n\n#### `requests(filter)`\n\nReturns an array containing all requests received. If `filter` is defined, it allows to filter requests by `method` and/or `path`.\n\n| Filter          | Description |\n| --------------- | ----------- |\n| `method`        | Filter requests by method. |\n| `path`          | Filter requests by path. |\n\nExample:\n```js\n// Returns all requests\nserver.requests();\n\n// Returns all GET requests\nserver.requests({ method: \"GET\" });\n\n// Returns all GET requests to /resource\nserver.requests({ method: \"GET\", path: \"/resource\" });\n```\n\n\n### License\n\nMIT\n","starsCount":1,"created":"2015-11-27T10:48:41.399Z","modified":"2017-02-27T19:11:45.084Z","lastPublisher":{"name":"spreaker","email":"dev@spreaker.com"},"owners":[{"name":"pracucci","email":"marco@pracucci.com"},{"name":"spreaker","email":"dev@spreaker.com"}],"other":{"_attachments":{},"_from":".","_id":"mock-http-server","_nodeVersion":"6.9.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/mock-http-server-0.1.0.tgz_1486139382032_0.32857430446892977"},"_npmUser":{"name":"spreaker","email":"dev@spreaker.com"},"_npmVersion":"3.10.9","_rev":"3-36eb11868a5e0ffd0791cb8584316dbb","_shasum":"30581206bd58e8890c6ed56c2c25b27b88461128","author":{"name":"Marco Pracucci","email":"marco@pracucci.com"},"bugs":{"url":"https://github.com/spreaker/node-mock-http-server/issues"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"30581206bd58e8890c6ed56c2c25b27b88461128","tarball":"https://registry.npmjs.org/mock-http-server/-/mock-http-server-0.1.0.tgz"},"maintainers":[{"name":"pracucci","email":"marco@pracucci.com"},{"name":"spreaker","email":"dev@spreaker.com"}],"readmeFilename":"README.md","time":{"modified":"2017-02-27T19:11:45.084Z","created":"2015-11-27T10:48:41.399Z","0.0.1":"2015-11-27T10:48:41.399Z","0.0.2":"2015-11-27T10:55:05.676Z","0.0.3":"2015-12-01T17:31:42.158Z","0.0.4":"2016-02-04T16:16:36.810Z","0.1.0":"2017-02-03T16:29:44.060Z"},"users":{"detj":true}}}