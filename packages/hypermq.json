{"name":"hypermq","description":"Message-oriented HTTP service inspired by axon and zeromq.","version":"0.0.6","main":"index.js","homepage":"https://github.com/kurunt/hypermq","dependencies":{"preview":">0.1.0","amp-message":"~0.1.1","amp":"~0.3.1"},"devDependencies":{},"repository":"https://github.com/kurunt/hypermq","engines":{"node":">=0.8.0"},"license":"MIT","keywords":["zmq","0mq","zeromq","axon","amp"],"gitHead":"437f5022bdc7b316b04000b6bf586dd9c3b0d872","scripts":{},"versions":[{"number":"0.0.1","date":"2014-07-04T08:01:17.637Z"},{"number":"0.0.2","date":"2014-07-05T22:38:59.109Z"},{"number":"0.0.3","date":"2014-07-09T06:33:53.137Z"},{"number":"0.0.4","date":"2014-07-29T05:09:31.334Z"},{"number":"0.0.5","date":"2014-07-30T01:37:31.106Z"},{"number":"0.0.6","date":"2014-10-04T01:47:48.455Z"}],"readme":"# HyperMQ [![Build Status](https://api.travis-ci.org/kurunt/hypermq.png)](https://travis-ci.org/kurunt/hypermq)\n\n## !!! DEPRECIATED !!! [SecureMQ](https://github.com/kurunt/securemq) has now replaced HyperMQ.\n\nMessage-oriented HTTP service inspired by axon and zeromq.  \n\nUnlike [axon](https://www.npmjs.org/package/axon), hypermq uses HTTP for transport rather than plain TCP, this allows hypermq to have:\n\n  - encryption (SSL/TLS).\n  - authentication (Basic).\n  - firewall friendliness (single port).  \n\nIf you do not require any of these three features then [axon](https://www.npmjs.org/package/axon) is recommend.  \n\nThis is __not__ a 'web browser' solution, to do that you could add socket.io on top of hypermq.  \n\n## Installation\n\nFrom your terminal, requires [node.js](http://nodejs.org/).\n\n```\nnpm install hypermq\n```\n\n## Events\n\n  - `closed` when peer closes.\n  - `error` (err) when an un-handled socket error occurs.\n  - `reconnect attempt` when a reconnection attempt is made.\n  - `connected` (any url queries sent as object) when connected to the peer, or a peer connection is accepted.\n  - `queued` (msg) when a message is enqueued, can use to save unsent messages.\n  - `flushed` (total messages) queued when messages are flushed on connection.\n  - `message` (msg) the message received by peer.\n\n## Patterns\n\n  - push / pull\n  - pub / sub\n  - chit / chat\n  \n## Examples\n\nSee `examples` folder. To print debugging info use the _--preview_ argument when running the app, for example:\n\n```\nnode examples/pushpull/push.js --preview\n```\n\n## Push / Pull Example\n\n`push`s distribute messages round-robin:\n\n```js\nvar hypermq = require('hypermq');\n\nvar options = {\n  hostname: '127.0.0.1',\n  port: 3443,\n  secure: true,\n  key: __dirname + '/key.pem',\n  cert: __dirname + '/cert.pem',\n  apikey: 'za91j2bk72f483ap62x' \n};\nvar service = hypermq.bind(options);\n\nvar myService = new service('myService', 'push');\nconsole.log('myService:push server started');\n\nsetInterval(function(){\n  myService.send('hello');\n}, 100);\n```\nReceiver of `push` messages:\n\n```js\nvar hypermq = require('hypermq');\n\nvar options = { \n  hostname: '127.0.0.1', \n  port: 3443, \n  secure: true, \n  rejectUnauthorized: false,\n  apikey: 'za91j2bk72f483ap62x' \n};\nvar service = hypermq.connect(options);\n\nvar myService = new service('myService', 'pull');\n\nmyService.on('message', function(msg){\n  console.log(msg.toString());\n});\n```\n\n## Chit / Chat Example\n\n`chit`s is bi-directional, broadcast to all `chat` peers and can receive messages back:\n\n```js\nvar hypermq = require('hypermq');\n\nvar options = {\n  hostname: '127.0.0.1',\n  port: 3443,\n  secure: true,\n  key: __dirname + '/key.pem',\n  cert: __dirname + '/cert.pem',\n  apikey: 'za91j2bk72f483ap62x' \n};\nvar service = hypermq.bind(options);\n\nvar myService = new service('myService', 'chit');\nconsole.log('myService:chit server started');\n\nmyService.on('message', function(msg){\n  console.log(msg.toString());\n});\n\nsetInterval(function(){\n  myService.send('hello chat');\n}, 100);\n```\n\n`chat`s is bi-directional, can receive and send messages to `chit`:\n\n```js\nvar hypermq = require('hypermq');\n\nvar options = { \n  hostname: '127.0.0.1', \n  port: 3443, \n  secure: true, \n  rejectUnauthorized: false,\n  apikey: 'za91j2bk72f483ap62x' \n};\nvar service = hypermq.connect(options);\n\nvar myService = new service('myService', 'chat');\n\nmyService.on('message', function(msg){\n  console.log(msg.toString());\n});\n\nsetInterval(function(){\n  myService.send('hello chit');\n}, 1000);\n```\n\n## Message Protocol\n\nhypermq has two message protocols for you to choose from; [AMP](https://github.com/visionmedia/node-amp) protocol, with [node-amp-message](https://github.com/visionmedia/node-amp-message), the second protocol available is [Line Delimited JSON](http://en.wikipedia.org/wiki/Line_Delimited_JSON).  \n\nhypermq uses AMP by default as it is fastest and most flexible. AMP allows you to apply any message codec, such as: json, msgpack, or to use javascript/node.js objects: buffer (binary), strings. Line Delimited JSON is useful for connecting `peer`s written in different languages.  \n\nExample sending javascript/node.js mixed object with the AMP protocol.\n\n```js\nmyService.send( {hello: 'world', x: 101, fab: true, image: new Buffer('binary image data')} );\n```\nSet message protocol options `amp`, `ldjson`:\n```js\n{\n  protocol: 'amp'   // (default), or: 'ldjson' for Line Deineated JSON.\n}\n```\n\n## Performance\n\nYou can benchmark hypermq. With `secure` set to true will be slower as messages are encrypted.  \n\nBenchmark without `batching`:\n```\nmake bench\n```\nBenchmark with `batching`:\n```\nmake benchbatch\n```\n### Results\n\nSending a `200` byte sized `batched` `unsecure` message, on my laptop (dual-core i7), I get around __183,546__ messages per second:\n\n```\n  [2208 ops/s] [10001]\n\n      min: 2,208 ops/s\n     mean: 2,211 ops/s\n   median: 2,230 ops/s\n    total: 11,057 ops in 5s\n  through: 0.42 mb/s\n\n------------------------------\n   events: 917,731\n       id: 23,388\n     mean: 183,546 ops/s.\n------------------------------\n```\n\n## License\n\nChoose either: [MIT](http://opensource.org/licenses/MIT) or [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0).\n\n","starsCount":1,"created":"2014-07-04T08:01:17.637Z","modified":"2014-10-04T01:47:48.455Z","lastPublisher":{"name":"kurunt","email":"mark@kurunt.com"},"owners":[{"name":"kurunt","email":"mark@kurunt.com"}],"other":{"_attachments":{},"_from":".","_id":"hypermq","_npmUser":{"name":"kurunt","email":"mark@kurunt.com"},"_npmVersion":"1.4.21","_rev":"1-f9cfe853f036a250f3fbb74cebc9bf58","_shasum":"894ac92a43cabcb635eb463f13ab078d0f3b4af3","author":{"name":"Mark W. B. Ashcroft","email":"mark@kurunt.com","url":"http://kurunt.com"},"bugs":{"url":"http://github.com/kurunt/hypermq/issues","email":"mail@kurunt.com"},"contributors":[{"name":"Mark W. B. Ashcroft","email":"mark@kurunt.com"}],"directories":{},"dist-tags":{"latest":"0.0.6"},"dist":{"shasum":"894ac92a43cabcb635eb463f13ab078d0f3b4af3","tarball":"http://registry.npmjs.org/hypermq/-/hypermq-0.0.6.tgz"},"maintainers":[{"name":"kurunt","email":"mark@kurunt.com"}],"readmeFilename":"README.md","time":{"modified":"2014-10-04T01:47:48.455Z","created":"2014-07-04T08:01:17.637Z","0.0.1":"2014-07-04T08:01:17.637Z","0.0.2":"2014-07-05T22:38:59.109Z","0.0.3":"2014-07-09T06:33:53.137Z","0.0.4":"2014-07-29T05:09:31.334Z","0.0.5":"2014-07-30T01:37:31.106Z","0.0.6":"2014-10-04T01:47:48.455Z"},"users":{"kurunt":true}}}