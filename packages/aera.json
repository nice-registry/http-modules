{"name":"aera","version":"1.1.4","description":"A super-simple functional HTTP library.","tags":["http","es6","esnext","library"],"main":"index.js","scripts":{"test":"istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage","cover":"istanbul cover mocha","coveralls":"npm test","html":"nyc --reporter=html --reporter=text mocha"},"repository":"https://github.com/danielkov/aera","license":"MIT","dependencies":{"path-to-regexp":"^1.7.0"},"devDependencies":{"coveralls":"^2.13.0","mocha":"^3.2.0","mocha-lcov-reporter":"^1.3.0","istanbul":"^0.4.5","nyc":"^10.2.0","supertest":"^3.0.0"},"gitHead":"9f1eee8d4a1f3a665af427538f98d0a454dd0686","homepage":"https://github.com/danielkov/aera#readme","versions":[{"number":"0.1.1","date":"2017-03-31T11:16:39.322Z"},{"number":"0.1.2","date":"2017-03-31T12:11:44.648Z"},{"number":"0.1.3","date":"2017-03-31T12:49:25.816Z"},{"number":"0.1.5","date":"2017-03-31T14:12:48.604Z"},{"number":"0.1.6","date":"2017-03-31T14:25:14.116Z"},{"number":"1.0.0","date":"2017-04-01T22:07:49.591Z"},{"number":"1.1.0","date":"2017-04-03T09:33:10.237Z"},{"number":"1.1.1","date":"2017-04-03T10:12:02.456Z"},{"number":"1.1.2","date":"2017-04-03T11:23:56.184Z"},{"number":"1.1.3","date":"2017-04-03T13:00:13.025Z"},{"number":"1.1.4","date":"2017-04-05T10:57:49.942Z"}],"readme":"# Aera\r\nA Super-Simple HTTP Server library that makes use of functional programming paradigms, but stays unopinionated about how you handle your requests and responses.\r\n___\r\n\r\n[![Build Status](https://travis-ci.org/danielkov/aera.svg?branch=master)](https://travis-ci.org/danielkov/aera) [![Coverage Status](https://coveralls.io/repos/github/danielkov/aera/badge.svg?branch=development)](https://coveralls.io/github/danielkov/aera?branch=development) [![Dependencies](https://david-dm.org/danielkov/aera.svg)](https://david-dm.org/danielkov/aera) [![devDependencies Status](https://david-dm.org/danielkov/aera/dev-status.svg)](https://david-dm.org/danielkov/aera?type=dev) [![npm](https://img.shields.io/npm/v/aera.svg?style=flat-square)](https://npmjs.com/package/aera)\r\n\r\n```js\r\nconst Aera = require('aera')\r\n\r\nconst app = new Aera()\r\napp.get('/', () => 'Hello, World!')\r\n```\r\n\r\nSee [the change log](changelog.md) for changes in this version!\r\n\r\n## Basic usage\r\n\r\nInstall and add to your dependencies with the following line:\r\n\r\n```sh\r\nnpm install --save aera\r\n```\r\n\r\nBelow you can see a `Hello, World!` example, which is possibly the tiniest web application you can create.\r\n\r\n```js\r\nconst Aera = require('aera')\r\nconst server = new Aera() // Default port is 3000\r\n\r\nserver.get('/', () => 'Hello, World!')\r\n```\r\n\r\nIn Aera, you can pass a single function to a path handler and the return value of that function will be reflected in the response. Aera will attempt to make a few guesses, based on the content you provide, for example, if you return an object, it will be stringified and sent with the Content-Type: `application/json`.\r\n\r\nHere are the types of return values you can pass to Aera at the moment:\r\n\r\n  - String\r\n  - Number\r\n  - Promise\r\n  - Object\r\n  - Readable Stream\r\n  - ... more to come\r\n\r\nYou can implement a static file server in a single line!\r\n\r\n```js\r\nserver.get('/:file', ({ params }) => fs.createReadStream(`./my/folder/${params.file}`))\r\n```\r\n\r\nYou can execute any function that returns any of the supported values and return the value of that, for example: template functions.\r\n\r\n```js\r\nserver.get('/template', () => myTemplateFunction({name: 'Daniel', status: 'Awesome'}))\r\n```\r\n\r\nCRUD in a single line...\r\n\r\n```js\r\nserver.get('/api/pets/:name', ({ params }) => db.find({ name: params.name })) // given that your db implementation returns a promise.\r\n```\r\n\r\nYou can also play around with the data and then use it:\r\n\r\n```js\r\nserver.get('/users/:id', ({ params }) => db.find({ _id: params.id }).then(formatUser).then(renderTemplate))\r\n```\r\n\r\nSimple request body echo server:\r\n\r\n```js\r\nserver.post('/echo', (req) => req)\r\n```\r\n\r\nCreating Web Apps should be simple and fun.\r\n\r\n## Exceptions and error handling\r\n\r\nAera tries to handle your exceptions for you, but it is completely fine if you want to have your own custom messages for exceptions. You can specify them in the options parameter of the `Aera()` constructor.\r\n\r\n```js\r\nconst server = new Aera({port: 3000, notFoundException: 'Not the droids you are looking for. Sorry.'})\r\n```\r\n\r\nOf course if you wanted to make this nice, you can pass it a template function instead. That would also as long as it returns a valid string value.\r\n\r\n```js\r\nconst server = new Aera({port: 3000, notFoundException: myNotFoundTemplate()})\r\n```\r\n\r\nCurrently the following errors will be returned by Aera by default:\r\n\r\n  - `notFoundException` status: 404, body: `Not found.` - returned when no path matches the request url.\r\n  - `fileNotFoundException` status: 404, body: `File not found.` - returned when a stream is passed in and it errors.\r\n  - `internalServerErrorException` status: 500, body: `Internal server error.` - returned when the handler has an uncaught exception.\r\n  - `methodNotAllowedException` status: 405, body: `Method not allowed.` - returned when no handlers are available for the method of the path.\r\n\r\n## Request and Response\r\n\r\nIn Aera, the `request` and `response` parameters are actually the native Node JS HTTP request and response objects. If you know how to use native HTTP, you'll know how to use Aera. Read up on the HTTP docs, [here](https://nodejs.org/api/http.html), or look for a guide in the guides folder.\r\n\r\n## Running tests\r\n\r\nYou can run tests with the following line:\r\n\r\n```sh\r\nnpm test\r\n```\r\n\r\nA little advice: in most use cases you can write tests for your application logic, without even involving Aera. This is because Aera encourages the concept of simple functional programming over side-effect-based middleware writing. Create your handlers, run tests on them and then plug them into Aera to see your content appear on your website or service.\r\n\r\n## Future\r\n\r\nThe API is not yet evolved fully, however in the not so far future I'm looking into making it more friendly and easier in production use-cases as well.\r\n\r\n## Contribution\r\n\r\nI welcome contribution to this project in any form. If you'd like to work with me to improve anything (performance, features), feel free to submit an issue and create a PR.\r\n\r\nCurrently I am looking into ways to efficiently create hooks for certain events that happen, like `pre-routing`, `post-handler`, etc... This may be useful for authentication, normalization, header checks and so on. This will probably get released in the next major version `1.0.0`.\r\n","created":"2017-03-31T11:16:39.322Z","modified":"2017-04-05T10:57:49.942Z","lastPublisher":{"name":"danielkov","email":"kovacsemod@gmail.com"},"owners":[{"name":"danielkov","email":"kovacsemod@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"aera","_nodeVersion":"7.7.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/aera-1.1.4.tgz_1491389867990_0.23364734882488847"},"_npmUser":{"name":"danielkov","email":"kovacsemod@gmail.com"},"_npmVersion":"4.4.4","_rev":"11-3c73617ff33d4a0c61c46ab06bbf2616","_shasum":"7202fc7238a5c52f4cb6482e4e223ce2ee49863b","author":{"name":"Daniel Kovacs","email":"kovacsemod@gmail.com"},"bugs":{"url":"https://github.com/danielkov/aera/issues"},"directories":{},"dist-tags":{"latest":"1.1.4"},"dist":{"shasum":"7202fc7238a5c52f4cb6482e4e223ce2ee49863b","tarball":"https://registry.npmjs.org/aera/-/aera-1.1.4.tgz"},"maintainers":[{"name":"danielkov","email":"kovacsemod@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-05T10:57:49.942Z","created":"2017-03-31T11:16:39.322Z","0.1.1":"2017-03-31T11:16:39.322Z","0.1.2":"2017-03-31T12:11:44.648Z","0.1.3":"2017-03-31T12:49:25.816Z","0.1.5":"2017-03-31T14:12:48.604Z","0.1.6":"2017-03-31T14:25:14.116Z","1.0.0":"2017-04-01T22:07:49.591Z","1.1.0":"2017-04-03T09:33:10.237Z","1.1.1":"2017-04-03T10:12:02.456Z","1.1.2":"2017-04-03T11:23:56.184Z","1.1.3":"2017-04-03T13:00:13.025Z","1.1.4":"2017-04-05T10:57:49.942Z"}}}