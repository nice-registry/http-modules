{"name":"impostor","version":"0.5.1","description":"HTTP server with runtime-configurable routing","main":"./impostor.js","repository":"https://github.com/MakerStudios/impostor","scripts":{"test":"mocha test/test.js"},"bin":{"impostor":"./impostor.js"},"devDependencies":{"async":"*","mocha":"*","needle":"*"},"gitHead":"bcf6274bd62cccada6926a600408774f971a9eca","homepage":"https://github.com/MakerStudios/impostor#readme","versions":[{"number":"0.3.0","date":"2014-11-20T17:01:42.270Z"},{"number":"0.3.1","date":"2015-10-08T19:34:43.586Z"},{"number":"0.4.0","date":"2016-02-01T22:44:10.189Z"},{"number":"0.5.0","date":"2016-02-19T17:22:19.898Z"},{"number":"0.5.1","date":"2016-03-08T00:00:09.886Z"}],"readme":"## impostor\n\n`impostor` is a standalone node.js HTTP server which is programmable at runtime. The URLs to serve, and the data to be served, are configurable on-the-fly. This is particularly useful for black-box testing of your application, in conjunction with a library like [`parrot.js`](https://github.com/MakerStudios/parrot.js) which can redirect all of your application's outbound HTTP/S traffic to an `impostor` server. Test scenario #1 may need `GET /data` to respond with a 403 while test scenario #2 expects actual data from the same request. `impostor` makes this possible without any reliance on external state (e.g. in third party services).\n\n## How to use it\n\n`impostor` is run by invoking\n\n```bash\n$ npm install impostor\n$ ./node_modules/.bin/impostor.js 1234\n```\n\nwhere `1234` is the port the `impostor` server should listen on. The module can also be installed globally with `npm install -g`.\n\nAfterwards, it is controlled by sending HTTP requests to the running server (`localhost:1234` in the example above). There are only two commands:\n\n### 1. `POST /__clean__`\n\nWith no payload, returns `impostor` to a clean slate (erases all routes).\n\nOptionally, specify both of the following in order to erase response(s) for a specific route:\n\n* `Method` string (HTTP verb), e.g. `GET`. This is case-insensitive.\n* `Path` string, e.g. `/path/to/resource`. This does not include querystring.\n\n\n\n### 2. `POST /__set__`\n\nThe `__set__` command is used to create a route for `impostor` to serve. This command expects a JSON payload, an object with the following properties:\n\n* `Method` required string (HTTP verb), e.g. `GET`. This is case-insensitive.\n* `Path` required string, e.g. `/path/to/resource`. This does not include querystring.\n* `Parameter` optional string, name of querystring/body parameter on which to filter requests.\n* `Value` optional. If `Parameter` is specified, the request parameter is matched against Value.\n* `Header` optional string, name of header on which to filter requests.\n* `HeaderValue` optional. If `Header` is specified, the request is only matched if the relevant header contains (case-insensitive) `HeaderValue` as a substring.\n* `BodyRegExp` optional string. If provided, a request will only match if its body matches `new RegExp(BodyRegExp)`.\n* `Response` required object\n\t* `Status` optional integer (default `200`).\n\t* `Text` optional string, a plaintext response body to send back.\n\t* `BodyBase64` optional string, a base64-encoded string response to send back.\n\t\t* One of `Text` or `BodyBase64` should be specified. `BodyBase64` takes precedence if both exist.\n\t* `Headers` optional object.\n\nAfter this call is made, a route is created which will respond, as instructed, to the described request. For instance, if `Method = GET`, `Path = /a/b/c` and `Response.Text = welcome`, then a subsequent `GET /a/b/c` directed at the `impostor` server will return the text `welcome`.\n\nOnce a route has been created with `/__set__`, it remains there until `/__clean__` is called (or the `impostor` server is killed). In particular, it does not go away after serving one request.\n\nIf the `impostor` server receives a request to which it hasn't been programmed to respond, it will serve a status code `404` with `Content-Type: application/json` and body `{}`.\n\n#### `Parameter` matching\n\nIn the case that an intercepted request's body is successfully parsed into a javascript object, you can walk the object's hierarchy by passing a `.`-delimited (period-delimited) path for the `Parameter` option. In other words, if your intercepted request's body looks like\n\n```javascript\n{\n\t\"abc\":\n\t{\n\t\t\"def\":\n\t\t{\n\t\t\t\"ghi\": 123\n\t\t}\n\t},\n\t\"jkl\": 456\n}\n```\n\nthen a `Parameter` option of `abc.def.ghi` will match a value of `123`. There is currently no support for traversing arrays.\n\n#### Request parsing\n\nIf an intercepted request has a `content-type` header of `application/x-www-form-urlencoded`, then it will be parsed using the native node.js `querystring::parse`. For a request with any other `content-type` value, an attempt will be made to parse the body as JSON.\n\n\n\n## Examples\n\nSetup for a typical black-box test scenario would involve invoking `/__clean__` and then hitting `/__set__` once for each external resource required for the test to execute.\n\n```bash\n# Set up the impostor server on port 1234\n$ ./impostor.js 1234\n```\n\nIn another terminal:\n\n```bash\n# Haven't set up a matcher, so this gets the fallback 404 response.\n$ curl http://localhost:1234/test\n{}\n\n# Set up /test to respond with \"welcome!\"\n$ curl http://localhost:1234/__set__ \\\n\t--header \"Content-Type: application/json\" \\\n\t--data '{\"Method\":\"GET\",\"Path\":\"/test\",\"Response\":{\"Text\":\"welcome!\"}}'\n\n# Try again\n$ curl http://localhost:1234/test\nwelcome!\n\n# Clean up\n$ curl http://localhost:1234/__clean__ --request POST\n$ curl http://localhost:1234/test\n{}\n```\n\nDifferentiate between querystring parameters:\n\n```bash\n# /user?id=1 should return { \"name\": \"alice\" }\n$ curl http://localhost:1234/__set__ \\\n\t--header \"Content-Type: application/json\" \\\n\t--data '{\"Method\":\"GET\",\"Path\":\"/user\",\"Parameter\":\"id\",\"Value\":1,\"Response\":{\"Text\":\"{\\\"name\\\":\\\"alice\\\"}\",\"Headers\":{\"Content-Type\":\"application/json\"}}}'\n\n# /user?id=2 should return { \"name\": \"bob\" }\n$ curl http://localhost:1234/__set__ \\\n\t--header \"Content-Type: application/json\" \\\n\t--data '{\"Method\":\"GET\",\"Path\":\"/user\",\"Parameter\":\"id\",\"Value\":2,\"Response\":{\"Text\":\"{\\\"name\\\":\\\"bob\\\"}\",\"Headers\":{\"Content-Type\":\"application/json\"}}}'\n\n\n$ curl http://localhost:1234/user?id=1\n{\"name\":\"alice\"}\n\n$ curl http://localhost:1234/user?id=2\n{\"name\":\"bob\"}\n```\n\nDifferentiate between body parameters in the same way:\n\n```bash\n# POST /user { \"username\": \"alice\" } should return { \"id\": 101 }\n$ curl http://localhost:1234/__set__ \\\n\t--header \"Content-Type: application/json\" \\\n\t--data '{\"Method\":\"POST\",\"Path\":\"/user\",\"Parameter\":\"username\",\"Value\":\"alice\",\"Response\":{\"Text\":\"{\\\"id\\\":101}\",\"Headers\":{\"Content-Type\":\"application/json\"}}}'\n\n# POST /user { \"username\": \"bob\" } should return { \"id\": 102 }\n$ curl http://localhost:1234/__set__ \\\n\t--header \"Content-Type: application/json\" \\\n\t--data '{\"Method\":\"POST\",\"Path\":\"/user\",\"Parameter\":\"username\",\"Value\":\"bob\",\"Response\":{\"Text\":\"{\\\"id\\\":102}\",\"Headers\":{\"Content-Type\":\"application/json\"}}}'\n\n$ curl http://localhost:1234/user --request POST --data '{\"username\":\"alice\"}' --header \"Content-Type: application/json\"\n{\"id\":101}\n\n$ curl http://localhost:1234/user --request POST --data '{\"username\":\"bob\"}' --header \"Content-Type: application/json\"\n{\"id\":102}\n\n$ curl http://localhost:1234/user --request POST --data '{\"username\":\"abcd\"}' --header \"Content-Type: application/json\"\n{}\n```\n\nQuerystring parameters and body parameters are both filtered in the same way (demonstrated above). If there are identically named parameters in the querystring and body, the querystring value will take precedence.\n\n","created":"2014-11-20T17:01:42.270Z","modified":"2016-03-08T00:00:09.886Z","lastPublisher":{"name":"makerstudios","email":"tech-3rdparty+npm@makerstudios.com"},"owners":[{"name":"makerstudios","email":"tech-3rdparty+npm@makerstudios.com"}],"other":{"_attachments":{},"_from":".","_id":"impostor","_nodeVersion":"0.12.9","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/impostor-0.5.1.tgz_1457395206221_0.6783534418791533"},"_npmUser":{"name":"makerstudios","email":"tech-3rdparty+npm@makerstudios.com"},"_npmVersion":"2.14.14","_rev":"1-b2ba17c6b9c859bd517e7934663499ae","_shasum":"7dfdf2bed172aec8cfd81b6399fd2377cefadeb7","bugs":{"url":"https://github.com/MakerStudios/impostor/issues"},"directories":{},"dist-tags":{"latest":"0.5.1"},"dist":{"shasum":"7dfdf2bed172aec8cfd81b6399fd2377cefadeb7","tarball":"http://registry.npmjs.org/impostor/-/impostor-0.5.1.tgz"},"maintainers":[{"name":"makerstudios","email":"tech-3rdparty+npm@makerstudios.com"}],"readmeFilename":"README.md","time":{"modified":"2016-03-08T00:00:09.886Z","created":"2014-11-20T17:01:42.270Z","0.3.0":"2014-11-20T17:01:42.270Z","0.3.1":"2015-10-08T19:34:43.586Z","0.4.0":"2016-02-01T22:44:10.189Z","0.5.0":"2016-02-19T17:22:19.898Z","0.5.1":"2016-03-08T00:00:09.886Z"}}}