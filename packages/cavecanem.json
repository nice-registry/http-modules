{"name":"cavecanem","version":"0.1.1","description":"A Node.JS HTTP BA","main":"index.js","repository":"https://github.com/francomalatacca/cavecanem","keywords":["authentication","basic","http"],"license":"MIT","scripts":{"test":"grunt test"},"devDependencies":{"grunt":"0.4.x","grunt-cli":"0.1.13","grunt-contrib-watch":"~0.2.0","grunt-contrib-jshint":"~0.4.3","grunt-contrib-uglify":"~0.9.1","grunt-mocha-cli":"~1.0.2","expect.js":"~0.2.0"},"gitHead":"769fa8e1d716e62be55cfc2b5c58403530d1785c","homepage":"https://github.com/francomalatacca/cavecanem#readme","versions":[{"number":"0.0.1","date":"2015-08-11T22:12:45.133Z"},{"number":"0.0.2","date":"2015-08-11T23:21:07.230Z"},{"number":"0.0.3","date":"2015-08-12T06:40:50.082Z"},{"number":"0.1.0","date":"2017-06-18T12:43:42.666Z"},{"number":"0.1.1","date":"2017-06-18T15:55:42.574Z"}],"readme":"# CaveCanem\n> [Beware the dog!](https://en.wiktionary.org/wiki/cave_canem) A Node.JS HTTP _Basic Authentication_ library\n\n[![Build Status](https://travis-ci.org/francomalatacca/cavecanem.svg?branch=master)](https://travis-ci.org/francomalatacca/cavecanem)\n\n## HTTP Basic authentication (BA)\n\nHTTP Basic authentication (BA) implementation is the simplest technique \nfor enforcing access controls to web resources because it doesn't require cookies, \nsession identifier and login pages. Rather, HTTP Basic authentication uses static, \nstandard fields in the HTTP header which means that no handshakes have to be done in anticipation.\n[Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication)\n\n## CaveCanem Installation\n\n```js\n$ npm install cavecanem\n```\n\n## Getting started\n\n### Example with Express.js\n\n```js\nvar auth = require('cavecanem')\n```\n\n_cavecanem_ includes a configuration object `cc` passed through the _req_ object.\nThe `cc` can specify a function named `checkCredentials` for testing the credentials\nagainst hardcoded values in the simplest case or stored in a database.\n\nThe way to intercept the _req_ object and to add the `cc` object can be done in different way but \nthe following is a good and simple approach:\n\n```js\napp.use(function (req, res, next) {\n  req.authentication = {\n    checkCredentials: function(credentials){\n      return (credentials.username === \"canem\" && credentials.password === \"cave\");\n    }\n  };\n  next();\n});\n```\n\nyou can use the `auth` variable as a middleware for the routing of yours _protected resource_\n\n```js\napp.use('/users', auth, protected_resource);\n```\n\nthe function called by the route will receive the `res` object which will include `authentication` object with a code, a description and in case username and password.\n\n|code|description|username|password|\n|---|---|---|---|\n|200|successfully authenticated|yes|yes|\n|401|The username or password are wrong|no|no|\n|400|Wrong authorization header is provided|no|no|\n|500|Description of the error|no|no|\n\nThe end function needs to use this information to send back the correct status to the client.\n\n\n#### Test with cURL\n\nA simple way to test the the request to a _protected_resource_\n```\ncurl -v --header \"authorization: Basic Y2FuZW06Y2F2ZQ==\" http://localhost:3000/protected_resource\n```\n\n## How it works\n\nGet the basic auth credentials from the given request. \nThe sender will add the `Authorization` header within the request. \nSuppose the username is `canem` and the password is `cave` then the Authorization\nheader will results `Basic Y2FuZW06Y2F2ZQ==`. This header is parsed and \nan object with `username` and `password` is returned in a successful scenario.\n\n## License\n\n[MIT License](http://opensource.org/licenses/MIT)\n[npm-url]: https://npmjs.org/package/cavecanem\n\n","created":"2015-08-11T22:12:45.133Z","modified":"2017-06-18T15:55:42.574Z","lastPublisher":{"name":"francomalatacca","email":"fraunix@gmail.com"},"owners":[{"name":"francomalatacca","email":"fraunix@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"cavecanem","_nodeVersion":"7.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cavecanem-0.1.1.tgz_1497801341600_0.7245830448810011"},"_npmUser":{"name":"francomalatacca","email":"fraunix@gmail.com"},"_npmVersion":"4.2.0","_rev":"3-0500500336fa1f3a83db75967140de62","_shasum":"784a1842c0c30f208b462b5521e03f8ae4b89884","author":{"name":"Franco Malatacca","email":"francomalatacca@gmail.com"},"bugs":{"url":"https://github.com/francomalatacca/cavecanem/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"0.1.1"},"dist":{"shasum":"784a1842c0c30f208b462b5521e03f8ae4b89884","tarball":"https://registry.npmjs.org/cavecanem/-/cavecanem-0.1.1.tgz"},"maintainers":[{"name":"francomalatacca","email":"fraunix@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-18T15:55:42.574Z","created":"2015-08-11T22:12:45.133Z","0.0.1":"2015-08-11T22:12:45.133Z","0.0.2":"2015-08-11T23:21:07.230Z","0.0.3":"2015-08-12T06:40:50.082Z","0.1.0":"2017-06-18T12:43:42.666Z","0.1.1":"2017-06-18T15:55:42.574Z"}}}