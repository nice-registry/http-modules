{"name":"middle-man","version":"0.1.0","description":"A scriptable HTTP proxy, designed for use in UI tests for web applications.","main":"src/middle-man","dependencies":{"bluebird":"^2.9.6","http-proxy":"^1.8.1","path-to-regexp":"^1.0.3"},"devDependencies":{"chai":"^1.10.0","jscs":"^1.11.0","jscs-jsdoc":"^0.4.4","jshint":"^2.6.0","mocha":"^2.1.0"},"scripts":{"lint":"jshint src test","style":"jscs src test","test":"npm run lint && npm run style && npm run test-unit","test-unit":"mocha --ui tdd test/setup test/middle-man"},"repository":"https://github.com/jugglinmike/middle-man","keywords":["proxy","server"],"license":"MIT","homepage":"https://github.com/jugglinmike/middle-man","gitHead":"3d5ddeefbddfe5c69f1f8401a43c8ac72b3b41a3","versions":[{"number":"0.1.0","date":"2015-05-29T18:50:20.506Z"}],"readme":"# MiddeMan\n\nA scriptable HTTP proxy, designed for use in UI tests for web applications.\n\n[![Build Status](https://travis-ci.org/jugglinmike/middle-man.svg?branch=master)](https://travis-ci.org/jugglinmike/middle-man)\n\nRich web applications often interact with external services by making HTTP\nrequests. Testing applications like this can be difficult for a number of\nreasons:\n\n- **Servers may be unavailable** due to service outages, maintenance, or\n  local unavailability of network connection\n- **Responses may be slow**, further increasing the time required to execute UI\n  tests\n- **Requests may be throttled**. This introduces artificial limits on the\n  application's test schedule\n- **Requests may have side effects**, so automated tests may exhibit different\n  behavior during repeated execution\n- **Secure operations may require sensitive credentials**, necessitating the\n  creation of shared \"dummy\" accounts and management of shared, semi-private\n  credentials\n\nMiddleMan is a tool intended to be used as an intermediary between UI tests for\nweb applications and the external services with which they interact. Through a\nsimple, [Express](http://expressjs.com/)-inspired API, test writers can control\nexactly how web requests are handled in the context of the current-running UI\ntests.\n\n## Usage\n\n**Initialization** This tool is intended for use in\n[Selenium](http://seleniumhq.org/)-powered UI tests, but it is completely\nagnostic of test framework and Selenium binding.\n\n```js\nvar createSeleniumBinding = require('your-favorite-selenium-binding');\nvar startTests = require('your-favorite-testing-framework');\n\nvar MiddleMan = require('middle-man');\nvar middleMan = new MiddleMan();\nvar mmPort = 8003;\n\nmiddleMan.listen(mmPort)\n  .then(function() {\n    return createSeleniumBinding({\n      server: 'http://localhost:4444/wd/hub',\n      capabilities = {\n        browserName: 'firefox',\n        proxy: {\n          proxyType: 'manual',\n          httpProxy: 'localhost:' + mmPort\n        }\n      }\n    });\n  }).then(function() {\n    startTests();\n  });\n```\n\n**Generic request handlers** In some cases, you may want to unilaterally\nreact to certain types of requests. The `on` method allows you to register\ncode to modify every request/response pairs that match some criteria:\n\n```js\n/**\n * Set the CORS flag to ensure that requests are not subject to any same-origin\n * policy for the duration of the tests.\n */\nfunction handleCors(req, res, next) {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n\n  // If your handler specifies a third parameter, it will be provided with a\n  // function that *must* be invoked before the request is passed through.\n  next();\n}\n\n// Bind to all HTTP verbs and all URL paths\nmiddleMan.on('*', /.*/, handleCors);\n```\n\nIn some cases, you may be able to handle the HTTP request yourself (instead of\nallowing it to \"pass through\"). The second parameter is [a Node.js response\nobject](https://nodejs.org/api/http.html#http_class_http_serverresponse), and\nwhen it is closed, the proxy will not issue it to the web (nor invoke any\nadditional request handlers).\n\n```js\nfunction handleCorsPreflight(req, res) {\n  res.setHeader(\n    'Access-Control-Allow-Headers',\n    'authorization, authorization, content-type'\n  );\n  res.setHeader(\n    'Access-Control-Allow-Methods', 'GET,HEAD,PUT,PATCH,POST,DELETE'\n  );\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Vary', 'Origin');\n\n  // No need for the `next` parameter here--we don't need the request to pass\n  // through.\n  res.end('');\n}\n\n// Bind to OPTIONS requests for all URL paths\nmiddleMan.on('OPTIONS', /.*/, handleCorsPreflight);\n```\n\n**Scripting specific responses** In the course of a UI test, your script\nprobably causes the application to issue web requests. This tool allows you to\nprogramatically control the response behavior:\n\n```js\ntest('awesome test', function() {\n  var hasDeleted = false;\n  function handleDelete(req, res) {\n    hasDeleted = true;\n    res.end();\n  }\n  function handlePost(req, res) {\n    assert(hasDeleted, 'Deletes old utilization before creating new one.');\n    res.end(JSON.stringify({ utilizations: { id: 99 } }));\n  }\n\n  // This pattern allows you to verify that the requests are actually made--\n  // the test will time out if the Promises returned by `MiddleMan#once` are\n  // not resolved.\n  Promise.all([\n      middleMan.once('DELETE', '/v1/utilizations/99', handleDelete),\n      middleMan.once('POST', '/v1/utilizations', handlePost),\n      driver.editUtilization({\n        name: 'Jerry Seinfeld',\n        day: 'thursday',\n        type: 'Vacation'\n      })\n    ]).then(function() {\n      testDone();\n    });\n});\n```\n\n## API Documentation\n\nThe API is defined within the source code itself using\n[JSDoc](http://usejsdoc.org/) formatting.\n\n## License\n\nCopyright (c) 2015 Mike Pennisi  \nLicensed under the MIT Expat license.\n","created":"2015-05-29T18:50:20.506Z","modified":"2015-05-29T18:50:20.506Z","lastPublisher":{"name":"jugglinmike","email":"mike@mikepennisi.com"},"owners":[{"name":"jugglinmike","email":"mike@mikepennisi.com"}],"other":{"_attachments":{},"_from":".","_id":"middle-man","_nodeVersion":"0.12.0","_npmUser":{"name":"jugglinmike","email":"mike@mikepennisi.com"},"_npmVersion":"2.6.0","_rev":"1-8a4a34200644930bca07868f2abeebf6","_shasum":"299bdf3e6ebcafc97f5d4719802dfa8e33185dfb","author":{"name":"Mike Pennisi"},"bugs":{"url":"https://github.com/jugglinmike/middle-man/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"299bdf3e6ebcafc97f5d4719802dfa8e33185dfb","tarball":"http://registry.npmjs.org/middle-man/-/middle-man-0.1.0.tgz"},"maintainers":[{"name":"jugglinmike","email":"mike@mikepennisi.com"}],"readmeFilename":"readme.md","time":{"modified":"2015-05-29T18:50:20.506Z","created":"2015-05-29T18:50:20.506Z","0.1.0":"2015-05-29T18:50:20.506Z"}}}