{"name":"uberfetch","version":"1.0.1","description":"A thin layer over [fetch](https://github.com/github/fetch) which makes JSON the default, and turns HTTP errors into Promise rejections.","main":"uberfetch.js","scripts":{"watch":"mocha --watch","test":"mocha"},"license":"MIT","dependencies":{"object.assign":"^4.0.1","standard-error":"^1.1.0"},"devDependencies":{"fetch-mock":"^1.5.2","mocha":"^2.3.2","node-fetch":"^1.3.2"},"gitHead":"cff575033cc8e25723bef806e9bb9983684a60e6","versions":[{"number":"0.1.0","date":"2015-09-21T05:14:23.717Z"},{"number":"0.2.0","date":"2015-09-22T00:00:57.253Z"},{"number":"0.2.1","date":"2015-09-22T01:00:25.737Z"},{"number":"0.3.0","date":"2015-09-23T03:43:30.901Z"},{"number":"0.4.0","date":"2015-09-25T00:49:39.225Z"},{"number":"1.0.0","date":"2015-10-07T00:54:57.821Z"},{"number":"1.0.1","date":"2015-10-14T22:27:14.466Z"}],"readme":"# uberfetch\nA thin layer over [fetch](https://github.com/github/fetch) which makes JSON the default, and turns HTTP errors into Promise rejections.\n\n```js\nimport uberfetch from 'uberfetch';\n```\n\n### get JSON\n```js\nuberfetch('/cats/10')\n  .then(res => /* do stuff */);\n```\n\nwhich is equivalent to:\n\n```js\nfunction rejectOnRequestError(res) {\n  if (res.ok) return res;\n  return Promise.reject(new RequestError(res));\n}\n\nfetch('/cats/10', {\n  credentials: 'same-origin',\n  headers: {\n    'accept': 'application/json'\n  }\n})\n  .then(rejectOnRequestError)\n  .then(res => /* do stuff */);\n```\n\n### post JSON\n```js\nlet updatedCat = {id: 10, name: 'Keith'};\n\nuberfetch.post('/cats/10', {body: updatedCat});\n```\n\nwhich is equivalent to:\n\n```js\nlet updatedCat = {id: 10, name: 'Keith'};\n\nfetch('/cats/10', {\n  method: 'post',\n  body: JSON.stringify(updatedCat),\n  credentials: 'same-origin',\n  headers: {\n    'content-type': 'application/json'\n    'accept': 'application/json'\n  }\n})\n  .then(rejectOnRequestError);\n```\n\n### get HTML\n```js\n// get some html\nuberfetch('/cats/10', {accept: 'html'})\n  .then(res => /* do stuff */);\n```\n\nwhich is equivalent to:\n\n```js\nfetch('/cats/10', {\n  credentials: 'same-origin',\n  headers: {\n    'accept': 'text/html'\n  }\n})\n  .then(rejectOnRequestError)\n  .then(res => /* do stuff */);\n```\n\n### catch typed errors\n\n```js\nlet cat = {id: 10, name: 'Keith'};\n\nuberfetch.post('/cats/10', {body: cat})\n  .then(res => res.json())\n  .then(body => FlashMessage.show(`${body.name} saved`))\n  .catch(err => {\n    if (err instanceof uberfetch.RequestError) {\n      if (err.status == 422) {\n        return err.response.json()\n          .then(body => \n            AlertModal.show(`Validation failed: ${body.validationErrors}`)\n          );\n      }\n    }\n    return Promise.reject(err);\n  });\n```\n\nOr with ES7 `async/await`\n\n```js\nasync function() {\n  let cat = {id: 10, name: 'Keith'};\n\n  try {\n    let response = await uberfetch.post('/cats/10', {body: cat})\n    let body = await response.json();\n    FlashMessage.show(`${body.name} saved`);\n  } catch (err) {\n    if (err instanceof uberfetch.RequestError) {\n      if (err.status == 422) {\n        let body = err.response.json()\n        AlertModal.show(`Validation failed: ${body.validationErrors}`);\n        return;\n      }\n    }\n    return Promise.reject(err);\n  }\n}\n```\n\n## API\n\nUse `uberfetch(url, opts)` exactly as you would `fetch(url, opts)`, with the \nfollowing additional opts which can be provided in the opts object:\n\n- `accept: string` shorthand for setting an accept header, which takes \n  either a mime type, or a convenient short name like `form`, `html`, `text` etc.\n- `contentType: string` shorthand for setting an content-type header, \n  which takes either a mime type, or a convenient short name like `form`, \n  `html`, `text` etc.\n- `body: any` works like the normal `fetch` body field, except that known \n  content-types will be automatically serialized. When `body` is present, the\n  default http method becomes POST.\n\nIn addition to the `uberfetch()` function, the following convenience helpers are\navailable:\n\n- `uberfetch.get()` automatically sets `method: 'get'`\n- `uberfetch.post()` automatically sets `method: 'post'`\n- `uberfetch.put()` automatically sets `method: 'put'`\n- `uberfetch.patch()` automatically sets `method: 'patch'`\n- `uberfetch.delete()` automatically sets `method: 'delete'`\n\n","created":"2015-09-21T05:14:23.717Z","modified":"2016-04-07T22:31:13.182Z","lastPublisher":{"name":"jsdf","email":"james@jsdf.co"},"owners":[{"name":"cultureamp","email":"developers@cultureamp.com"},{"name":"jsdf","email":"james@jsdf.co"}],"other":{"_attachments":{},"_from":".","_id":"uberfetch","_nodeVersion":"3.0.0","_npmUser":{"name":"jsdf","email":"james@jsdf.co"},"_npmVersion":"2.13.3","_rev":"1-59bebed370b323b33379cfdc368db46e","_shasum":"2e2e46517bd9db3761fbbe734b663503859a0462","author":{"name":"James Friend","email":"james@jsdf.co"},"directories":{},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"2e2e46517bd9db3761fbbe734b663503859a0462","tarball":"http://registry.npmjs.org/uberfetch/-/uberfetch-1.0.1.tgz"},"maintainers":[{"name":"cultureamp","email":"developers@cultureamp.com"},{"name":"jsdf","email":"james@jsdf.co"}],"readmeFilename":"README.md","time":{"modified":"2016-04-07T22:31:13.182Z","created":"2015-09-21T05:14:23.717Z","0.1.0":"2015-09-21T05:14:23.717Z","0.2.0":"2015-09-22T00:00:57.253Z","0.2.1":"2015-09-22T01:00:25.737Z","0.3.0":"2015-09-23T03:43:30.901Z","0.4.0":"2015-09-25T00:49:39.225Z","1.0.0":"2015-10-07T00:54:57.821Z","1.0.1":"2015-10-14T22:27:14.466Z"}}}