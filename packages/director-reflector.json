{"name":"director-reflector","version":"0.1.0","repository":"https://github.com/flatiron/director-reflector","main":"./lib/director-reflector","dependencies":{"request":"2.10.x","utile":"0.1.x","traverse":"0.6.1"},"scripts":{"test":"vows tests/*.* --spec"},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"readme":"# Director-Reflector\n\nReflects [request](https://github.com/mikeal/request) based HTTP client API wrappers from [Director](http://github.com/flatiron/director) routers. Requires **no** additional configuration and is compatible with any existing `Director.Router` instance.\n\n# Explanation\n\nDirector-Reflector removes the process of writing boilerplate client code for communicating with HTTP [Director](http://github.com/flatiron/director) routers. Director-Reflector uses <a href=\"http://en.wikipedia.org/wiki/Reflection_(computer_programming)\">reflection</a> to reflect an API client which maps all remote routes to a local object.\n\nThrough the removal of writing boilerplate HTTP API client REST mappings for remote [Director](http://github.com/flatiron/director) routers, Director-Reflector creates a robust, standardized, and re-usable HTTP API client.\n\n**Note**: Director-Reflector makes the least amount of assumptions possible about your application. The API client wrapper it reflects is designed to be **as minimalistic as possible**. The default client will cover **all** routes in any Director routing map out of the box, but you are encouraged to extend the reflected base client with your own personal sugar-syntax. \n\n\n## Default API Client Mappings\n\n**If only one verb is bound to the route, the route name becomes the method name.**\n\n```\nrouter.get('/foo')                          =>  client.foo()\nrouter.post('/bar')                         =>  client.bar()\n```\n\n**If multiple verbs are bound to the route, each verb becomes a method with a restful name.**\n\n```\nrouter.get('/moo')                          =>  client.moo.get()\nrouter.post('/moo')                         =>  client.moo.create()\nrouter.delete('/moo')                       =>  client.moo.destroy()\nrouter.put('/moo')                          =>  client.moo.save()\n```\n\n**If route parameters are used ( such as an id ), they become the last method's first argument.**\n\n```\nrouter.post('/albums/:albumid')             =>  client.albums.create('ill-communication', { artist: \"beastie boys\" })\nrouter.get('/albums/:albumid')              =>  client.albums.get('ill-communication')\n```\n\n**If multiple route parameters are used, the parameters curry as arguments in the last method from left-to-right.**\n\n```\nrouter.post('/albums/:albumid/songs/:id')   =>  client.albums.songs.create('ill-communication', 'root-down', data)\nrouter.get('/albums/:albumid/songs/:id')    =>  client.albums.songs.get('ill-communication', 'root-down')\n```\n\n**Nested routing scopes follow the same rules.**\n\n```\nrouter.path('/users', function(){             \n this.path('/:id', function(){               \n   this.post(n);                           => client.users.create('bob', data)\n   this.get(n);                            => client.users.get('bob')\n   this.delete(n);                         => client.users.destroy('bob')\n   this.put(n);                            => client.users.save('bob', data)\n   this.path('/dongles/:id', function(){\n     this.post(n);                         => client.users.dongles.create('bob', 'the-dongle', data)\n     this.get(n);                          => client.users.dongles('bob', 'the-dongle');\n })\n});\n```\n\n# Installation\n\n     npm install director-reflector\n\n# Usage\n\n### Creating a Director router\n\n```js\n\nvar director = require('director'),\n    router   = new director.http.Router();\n\nrouter.get('/foo', function(){\n  this.res.end('hello');\n});\n\n```\n### Creating a new API client from a Director router\n\n\n```js\n\nvar dr = require('director-reflector'),\n\nvar client = dr.createClient(router);\n\nclient.foo(function(err, res, body){\n  console.log(body);\n})\n```\n\n### Making your Director router portable\n\nIn most cases, it's *not* going to be feasible to expose the entire Router instance to the client.\n\nHave no fear! [Director](http://github.com/flatiron/director) routing maps can safety be serialized without exposing any protected logic.\n\n**Run the following code to export a portable ( and safe ) routing map as JSON:**\n\n```js\nvar str    = dr.toJSON(router);\n\n// Somewhere else, where `router` instance is not available\ndr.createClient(JSON.parse(str));\n\n```\n\nHere is an example of [an exported routing map](https://github.com/flatiron/director-reflector/blob/master/examples/exported-router.json).\n\n# TODO\n\n - Add ability for built-in authorization strategies. \n - Add `nconf` based config management\n - Add more tests\n","description":"Reflects [request](https://github.com/mikeal/request) based HTTP client API wrappers from [Director](http://github.com/flatiron/director) routers. Requires **no** additional configuration and is compatible with any existing `Director.Router` instance.","versions":[{"number":"0.1.0","date":"2012-08-19T02:25:14.094Z"}],"created":"2012-08-19T02:25:12.026Z","modified":"2012-08-19T02:25:14.094Z","owners":[{"name":"marak","email":"marak.squires@gmail.com"}],"other":{"_attachments":{},"_id":"director-reflector","_rev":"1-a32624f1db423474533770b14401d939","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"5b4b0512624797345c0404a76aafe8cb4f83cb5e","tarball":"http://registry.npmjs.org/director-reflector/-/director-reflector-0.1.0.tgz"},"maintainers":[{"name":"marak","email":"marak.squires@gmail.com"}],"time":{"modified":"2012-08-19T02:25:14.094Z","created":"2012-08-19T02:25:12.026Z","0.1.0":"2012-08-19T02:25:14.094Z"}}}