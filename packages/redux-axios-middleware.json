{"name":"redux-axios-middleware","version":"4.0.0","description":"Redux middleware for fetching data with axios HTTP client","main":"dist/bundle.js","scripts":{"prepublish":"npm run lint && npm run build","build":"webpack","lint":"eslint -c .eslintrc src","test":"mocha --compilers js:babel-register --require ./test/test_helper.js","test:watch":"npm run test -- --watch"},"repository":"https://github.com/svrcekmichal/redux-axios-middleware","license":"MIT","homepage":"https://github.com/svrcekmichal/redux-axios-middleware","peerDependencies":{"axios":">= 0.13"},"devDependencies":{"axios":"^0.13.1","axios-mock-adapter":"^1.3.1","babel-cli":"^6.5.1","babel-eslint":"^6.0.2","babel-loader":"^6.2.10","babel-preset-latest":"^6.22.0","babel-preset-stage-1":"^6.22.0","chai":"^3.5.0","chai-shallow-deep-equal":"^1.4.0","eslint":"^2.4.0","eslint-config-airbnb":"^6.0.2","eslint-plugin-import":"^1.0.0-beta.0","eslint-plugin-react":"^4.0.0","estraverse-fb":"^1.3.1","mocha":"^2.4.5","redux":"^3.5.2","redux-mock-store":"^1.0.3","sinon":"^1.17.4","webpack":"^2.2.1"},"gitHead":"0b26197f492e7f22e22c63dfb8ac9a8ca824ff33","versions":[{"number":"0.0.1","date":"2016-02-08T13:46:18.646Z"},{"number":"0.0.2","date":"2016-02-08T13:59:01.143Z"},{"number":"0.1.0","date":"2016-02-09T14:46:42.306Z"},{"number":"0.2.0","date":"2016-02-20T11:22:07.846Z"},{"number":"0.3.0-rc.1","date":"2016-03-29T11:52:13.913Z"},{"number":"0.4.0","date":"2016-04-05T13:42:09.615Z"},{"number":"0.4.1","date":"2016-04-25T06:03:33.377Z"},{"number":"1.0.0-rc.0","date":"2016-05-13T05:58:36.740Z"},{"number":"1.0.0-rc.1","date":"2016-05-23T09:10:33.574Z"},{"number":"1.0.0","date":"2016-05-31T07:59:12.325Z"},{"number":"1.1.0","date":"2016-06-01T05:35:39.715Z"},{"number":"1.2.0","date":"2016-06-07T12:43:33.800Z"},{"number":"1.3.0","date":"2016-06-14T07:12:52.654Z"},{"number":"1.3.1","date":"2016-08-10T12:56:38.930Z"},{"number":"2.0.0","date":"2016-08-10T13:03:07.752Z"},{"number":"3.0.0","date":"2016-09-08T17:35:43.634Z"},{"number":"3.1.1","date":"2017-02-17T07:55:26.813Z"},{"number":"3.1.2","date":"2017-02-21T03:55:07.584Z"},{"number":"4.0.0","date":"2017-03-15T05:20:46.418Z"}],"readme":"# redux-axios-middleware\n\n[![npm version](https://badge.fury.io/js/redux-axios-middleware.svg)](https://badge.fury.io/js/redux-axios-middleware)\n\n\nRedux middleware for fetching data with axios HTTP client\n\n## Installation\n\n```bash\nnpm i -S redux-axios-middleware\n```\n\n> You can also use in browser via `<script src=\"https://unpkg.com/redux-axios-middleware/dist/bundle.js\"></script>`, \nthe package will be available under namespace `ReduxAxiosMiddleware`\n\n## How to use?\n\n### Use middleware\n\nBy default you only need to import middleware from package and add it to redux middlewares and execute it with first argument being with axios instance. second optional argument are middleware options for customizing\n\n```js\nimport {createStore, applyMiddleware} from 'redux';\nimport axios from 'axios';\nimport axiosMiddleware from 'redux-axios-middleware';\n\nconst client = axios.create({ //all axios can be used, shown in axios documentation\n  baseURL:'http://localhost:8080/api',\n  responseType: 'json'\n});\n\nlet store = createStore(\n  reducers, //custom reducers\n  applyMiddleware(\n    //all middlewares\n    ...\n    axiosMiddleware(client), //second parameter options can optionally contain onSuccess, onError, onComplete, successSuffix, errorSuffix\n    ...\n  )\n)\n```\n\n### Dispatch action\n\nEvery action which have `payload.request` defined will be handled by middleware. There are two possible type definitions.\n\n- use `action.type` with string name\n- action with type will be dispatched on start, and then followed by type suffixed with underscore and\n- success suffix on success, or error suffix on error\n\ndefaults: success suffix = \"_SUCCESS\" error suffix = \"_FAIL\"\n\n```javascript\nexport function loadCategories() {\n  return {\n    type: 'LOAD',\n    payload: {\n      request:{\n        url:'/categories'\n      }\n    }\n  }\n}\n```\n\n- use `action.types` with array of types `[REQUEST,SUCCESS,FAILURE]`\n- `REQUEST` will be dispatched on start, then `SUCCESS` or `FAILURE` after request result\n\n```javascript\nexport function loadCategories() {\n  return {\n    types: ['LOAD','AWESOME','OH_NO'],\n    payload: {\n      request:{\n        url:'/categories'\n      }\n    }\n  }\n}\n```\n\nActions that are handled by this middleware return a promise.  This gives you the ability to chain actions.  A good example of this might be a form.  In the form you might dispatch an actions to store the form values.  The normal flow of the action into the reducers would not be altered but you can chain a then/catch onto the initial dispatch.\n\n```javascript\nthis.props.saveForm(formData)\n  .then(() => {\n    // router the user away\n    this.context.router.push(\"/my/home/page\")\n  })\n  .catch((response) => {\n    //handle form errors\n  })\n```\n\nAnother example might be a set of actions that you want dispatched together.\n\n```javascript\nPromise.all([\n  dispatch(foo()),\n  dispatch(bar()),\n  dispatch(bam()),\n  dispatch(boom())\n\n]).then(() => {\n  dispatch(\n    loginSuccess(\n      token\n    )\n  )\n})\n```\n\n### Request complete\n\nAfter request complete, middleware will dispatch new action,\n\n#### on success\n\n```javascript\n{\n  type: 'AWESOME', //success type\n  payload: { ... } //axios response object with data status headers etc.\n  meta: {\n    previousAction: { ... } //action which triggered request\n  }\n}\n```\n\n#### on error\n\nError action is same as success action with one difference, there's no key `payload`, but now there's `error`;\n\n```js\n{\n    type:'OH_NO',\n    error: { ... }, //axios error object with message, code, config and response fields\n    meta: {\n      previousAction: { ... } //action which triggered request\n    }\n}\n```\n\n#### if axios failed fatally, default error action with status `0` will be dispatched.\n\n```js\n{\n    type:'OH_NO',\n    error: {\n      status: 0,\n      ... //rest of axios error response object\n    },\n    meta: {\n      previousAction: { ... } //action which triggered request\n    }\n}\n```\n\n### Multiple clients\n\nIf you are using more than one different APIs, you can define those clients and put them to middleware. All you have to change is import of middleware, which is passed to redux createStore function and defined those clients.\n\n```\nimport { multiClientMiddleware } from 'redux-axios-middleware';\ncreateStore(\n ...\n multiClientMiddleware(\n   clients, // described below\n   options // optional, this will be used for all middleware if not overriden by upper options layer\n )\n)\n```\n\n`clients` object should be map of\n\n```\n{\n  client: axiosInstance, // instance of axios client created by axios.create(...)\n  options: {} //optional key for passing specific client options\n}\n```\n\nFor example:\n\n```\n{\n  default: {\n    client: axios.create({\n       baseURL:'http://localhost:8080/api',\n       responseType: 'json'\n    })\n  },\n  googleMaps: {\n    client: axios.create({\n        baseURL:'https://maps.googleapis.com/maps/api',\n        responseType: 'json'\n    })\n  }\n}\n```\n\nNow in every dispatched action you can define client used:\n\n```javascript\nexport function loadCategories() {\n  return {\n    type: 'LOAD',\n    payload: {\n      client: 'default', //here you can define client used\n      request:{\n        url:'/categories'\n      }\n    }\n  }\n}\n```\n\nIf you don't define client, default value will be used. You can change default client name in middleware options.\n\n### Middleware options\n\nOptions can be changed on multiple levels. They are merged in following direction:\n\n```\ndefault middleware values < middleware config < client config < action config\n```\n\nAll values except interceptors are overriden, interceptors are merged in same order. Some values are changeable only on certain level (can be seen in change level column).\n\nLegend: `M` - middleware config `C` - client config `A` - action config\n\nkey                          | type                                 | default value                                             | change level | description\n---------------------------- | ------------------------------------ | --------------------------------------------------------- | ------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nsuccessSuffix                | string                               | SUCCESS                                                   | `M` `C` `A`  | default suffix added to success action, for example `{type:\"READ\"}` will be `{type:\"READ_SUCCESS\"}`\nerrorSuffix                  | string                               | FAIL                                                      | `M` `C` `A`  | same as above\nonSuccess                    | function                             | described above                                           | `M` `C` `A`  | function called if axios resolve with success\nonError                      | function                             | described above                                           | `M` `C` `A`  | function called if axios resolve with error\nonComplete                   | function                             | described above                                           | `M` `C` `A`  | function called after axios resolve\nreturnRejectedPromiseOnError | bool                                 | false                                                     | `M` `C` `A`  | if `true`, axios onError handler will return `Promise.reject(newAction)` instead of `newAction`\nisAxiosRequest               | function                             | function check if action contain `action.payload.request` | `M`          | check if action is axios request, this is connected to `getRequestConfig`\ngetRequestConfig             | function                             | return content of `action.payload.request`                | `M` `C` `A`  | if `isAxiosRequest` returns true, this function get axios request config from action\ngetClientName                | function                             | returns `action.payload.client` OR `'default'`            | `M` `C` `A`  | attempts to resolve used client name or use defaultClientName\ndefaultClientName            | every possible object key type       | `'default'`                                               | `M`          | key which define client used if `getClienName` returned false value\ngetRequestOptions            | function                             | return `action.payload.options`                           | `M` `C`      | returns options object from action to override some values\ninterceptors                 | object `{request: [], response: []}` |                                                           | `M` `C`      | You can pass axios request and response interceptors. Take care, first argument of interceptor is different from default axios interceptor, first received argument is object with `getState`, `dispatch` and `getAction` keys\n\n## License\n\nThis project is licensed under the MIT license, Copyright (c) 2016 Michal Svrček. For more information see `LICENSE.md`.\n\n## Acknowledgements\n\n[Dan Abramov](https://github.com/gaearon) for Redux [Matt Zabriskie](https://github.com/mzabriskie) for [Axios](https://github.com/mzabriskie/axios). A Promise based HTTP client for the browser and node.js\n","starsCount":3,"created":"2016-02-08T13:46:18.646Z","modified":"2017-03-16T06:29:23.848Z","lastPublisher":{"name":"nmaves","email":"nathan.maves@gmail.com"},"owners":[{"name":"nmaves","email":"nathan.maves@gmail.com"},{"name":"svrcekmichal","email":"svrcekmichal@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"redux-axios-middleware","_nodeVersion":"7.7.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/redux-axios-middleware-4.0.0.tgz_1489555243924_0.5380388998892158"},"_npmUser":{"name":"nmaves","email":"nathan.maves@gmail.com"},"_npmVersion":"4.1.2","_rev":"7-7eb229be55c9ff92b22cb90c0dc33b64","_shasum":"81951c3d9adce6f83ef892fd1568571cebe4a336","author":{"name":"Michal Svrcek","email":"svrcekmichal@gmail.com"},"bugs":{"url":"https://github.com/svrcekmichal/redux-axios-middleware/issues"},"directories":{},"dist-tags":{"latest":"4.0.0"},"dist":{"shasum":"81951c3d9adce6f83ef892fd1568571cebe4a336","tarball":"https://registry.npmjs.org/redux-axios-middleware/-/redux-axios-middleware-4.0.0.tgz"},"maintainers":[{"name":"nmaves","email":"nathan.maves@gmail.com"},{"name":"svrcekmichal","email":"svrcekmichal@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-16T06:29:23.848Z","created":"2016-02-08T13:46:18.646Z","0.0.1":"2016-02-08T13:46:18.646Z","0.0.2":"2016-02-08T13:59:01.143Z","0.1.0":"2016-02-09T14:46:42.306Z","0.2.0":"2016-02-20T11:22:07.846Z","0.3.0-rc.1":"2016-03-29T11:52:13.913Z","0.4.0":"2016-04-05T13:42:09.615Z","0.4.1":"2016-04-25T06:03:33.377Z","1.0.0-rc.0":"2016-05-13T05:58:36.740Z","1.0.0-rc.1":"2016-05-23T09:10:33.574Z","1.0.0":"2016-05-31T07:59:12.325Z","1.1.0":"2016-06-01T05:35:39.715Z","1.2.0":"2016-06-07T12:43:33.800Z","1.3.0":"2016-06-14T07:12:52.654Z","1.3.1":"2016-08-10T12:56:38.930Z","2.0.0":"2016-08-10T13:03:07.752Z","3.0.0":"2016-09-08T17:35:43.634Z","3.1.1":"2017-02-17T07:55:26.813Z","3.1.2":"2017-02-21T03:55:07.584Z","4.0.0":"2017-03-15T05:20:46.418Z"},"users":{"svrcekmichal":true,"nekifirus":true,"shakakira":true}}}