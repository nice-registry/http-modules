{"name":"response","version":"0.18.0","description":"Streaming and mutation API for HTTP responses.","main":"index.js","dependencies":{"mime":"~1.2.11","bl":"~0.7.0","caseless":"^0.3.0","best-encoding":"^0.1.1"},"devDependencies":{"queuelib":"^0.3.6","request":"~2.34.0","tape":"~2.10.2"},"scripts":{"test":"tape tests/*.js"},"repository":"https://github.com/mikeal/response","keywords":["http","response","request"],"license":"Apache2","homepage":"https://github.com/mikeal/response","gitHead":"a4bc88ef5fb57570a7230f09912576513895b0df","versions":[{"number":"0.1.0","date":"2014-03-13T19:09:13.507Z"},{"number":"0.10.0","date":"2014-03-13T20:58:08.353Z"},{"number":"0.11.0","date":"2014-03-13T20:58:35.236Z"},{"number":"0.12.0","date":"2014-03-19T04:03:40.192Z"},{"number":"0.13.0","date":"2014-03-19T05:23:39.772Z"},{"number":"0.14.0","date":"2014-04-14T22:43:49.865Z"},{"number":"0.15.0","date":"2015-07-25T23:21:01.697Z"},{"number":"0.16.0","date":"2015-07-25T23:21:25.844Z"},{"number":"0.17.0","date":"2015-07-25T23:24:31.861Z"},{"number":"0.18.0","date":"2015-07-27T17:00:03.346Z"}],"readme":"## Quick Example\n\n    response.json({result:'error',missing_keys:['email']}).status(400).pipe(res)\n    \n    // headers are { 'content-type': 'application/json',\n    // date: 'Mon, 12 May 2014 12:57:31 GMT',\n    // connection: 'keep-alive',\n    // 'transfer-encoding': 'chunked' } \n    // statusCode is 400 \n    // body is { result: 'error', missing_keys: [ 'email' ] }\n \n\n## Response\n\nThe basic idea is to build [request](https://github.com/mikeal/request) for HTTP Responses.\n\nThis whole package is still beta.\n\n### files\n\n```javascript\nvar server = http.createServer(function (req, res) {\n  var f = fs.createReadStream('file.js')\n  if (req.url === '/test.js') return f.pipe(response()).pipe(res)\n})\n```\n\nWhen pipeing files to `response` it will lookup the mime type and set the propert content-type header for whatever file extension you send it.\n\n### html, json, txt\n\n```javascript\nvar server = http.createServer(function (req, res) {\n  if (req.url === '/') return response.html('<html>Hello World</html>').pipe(res)\n  if (req.url === '/sitemap.html') {\n    var f = fs.createReadStream('sitemap')\n    return f.pipe(response.html()).pipe(res)\n  }\n  if (req.url === '/something.json') return response.json({test:1}).pipe(res)\n  if (req.url === '/something.txt') return response.txt('some test').pipe(res)\n})\n```\n\n### .error(err[, statusCode])\n\n```javascript\nr.error(new Error('Uh Oh!')).pipe(res)\n```\n\n```javascript\nr.error(555).pipe(res)\n```\n\n```javascript\nr.error(new Error('Uh Oh!'), 501).pipe(res)\n```\n\nIn addition, errors emitted on the stream piped to `response` will be passed through the same API and are accesssible in `views`.\n\n## gzip and deflate compression\n\nThe `compress` and `gzip` keys in an options object are used for compression.\n\n```javascript\nvar server = http.createServer(function (req, res) {\n  var f = fs.createReadStream('file.js')\n  if (req.url === '/file.js') return f.pipe(response({compress:req})).pipe(res)\n})\n```\n\nYou can pass an HTTP Request object and the best compression, if any, will be chosen for you. Alternatively you can pass `\"gzip\"` or `\"deflate\"` to forcce compression of the response stream.\n\nThis compression option is compatible with every other feature in `response` and will work whether you do file streaming, html, json, or even using views. When passing a view, string or buffer to `response` the second argument is used as the options object.\n\n```javascript\nvar server = http.createServer(function (req, res) {\n  if (req.url === '/') return response.html('<html>Nope</html>', {compress:req}).pipe(res)\n})\n```\n\n## status codes and headers\n\n`response` also has an extended version of node core's HTTP Response API.\n\nAll headers setting and checking is done caseless while preserving the original casing when first set. This way you never accidentally send two of the same header but can still support broken clients that check for specific caseing.\n\n#### .statusCode\n\nSet the statusCode property to send the HTTP status code. This is a non-destructive way to send the status code.\n\n```javascript\nvar r = response()\nr.statusCode = 500\nr.html('<html>Error</html>')\n```\n\n#### .setHeader(key, value[, clobber=true])\n\nDefaults to clobbering (overwritting) existing values but when disabled will concatenate values.\n\n```javascript\nr.setHeader('X-Blah', 'somehost.com')\n```\n\n#### .setHeader(headers)\n\nSet multiple headers by passing an object.\n\n```javascript\nr.setHeader({'x-blah': 'somehost', 'x-blah2': 'anotherhost.com'})\n```\n\n#### .getHeader(key)\n\nYou can retreive a header by its key, use this method instead of directly accessing the headers object to avoid caseing constraints.\n\n```javascript\nr.getHeader('content-type')\n```\n\n#### .hasHeader(key)\n\nCheck if a header is already set. If one is set the header key will be returned (which is important because it may have different caseing).\n\n```javascript\nr.hasHeader('content-type')\n```\n\n### views (very experimental)\n\n```javascript\nfunction view (e, data, cb) {\n  if (e) return cb(e)\n  cb(null, '<html>' + data + '</html>')\n}\n\nvar server = http.createServer(function (req, res) {\n  var r = response(view)\n  r.pipe(res)\n  if (req.url === '/test1') return r.html('test')\n})\n```\n\nThis is how you would easily support something like a template system. TODO: example.\n\n### Credits\n\nMad props to @marak who handed over the \"response\" package in npm that he registered way back in the day.\n","starsCount":2,"created":"2014-03-13T19:09:13.507Z","modified":"2015-07-27T17:00:03.346Z","lastPublisher":{"name":"mikeal","email":"mikeal.rogers@gmail.com"},"owners":[{"name":"mikeal","email":"mikeal.rogers@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"response","_nodeVersion":"2.4.0","_npmUser":{"name":"mikeal","email":"mikeal.rogers@gmail.com"},"_npmVersion":"2.13.0","_rev":"1-31ef692fb160d86377d24a307132caf1","_shasum":"a1009f271733f233582de0a95fb4cbaa5ea8b206","author":{"name":"Mikeal Rogers","email":"mikeal.rogers@gmail.com"},"bugs":{"url":"https://github.com/mikeal/response/issues"},"directories":{"test":"tests"},"dist-tags":{"latest":"0.18.0"},"dist":{"shasum":"a1009f271733f233582de0a95fb4cbaa5ea8b206","tarball":"http://registry.npmjs.org/response/-/response-0.18.0.tgz"},"maintainers":[{"name":"mikeal","email":"mikeal.rogers@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-07-27T17:00:03.346Z","created":"2014-03-13T19:09:13.507Z","0.1.0":"2014-03-13T19:09:13.507Z","0.10.0":"2014-03-13T20:58:08.353Z","0.11.0":"2014-03-13T20:58:35.236Z","0.12.0":"2014-03-19T04:03:40.192Z","0.13.0":"2014-03-19T05:23:39.772Z","0.14.0":"2014-04-14T22:43:49.865Z","0.15.0":"2015-07-25T23:21:01.697Z","0.16.0":"2015-07-25T23:21:25.844Z","0.17.0":"2015-07-25T23:24:31.861Z","0.18.0":"2015-07-27T17:00:03.346Z"},"users":{"kankungyip":true,"toby_reynold":true}}}