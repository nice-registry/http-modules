{"name":"overalls","version":"1.0.4","description":"Decorate HTTP requests with path parameters","main":"index.js","scripts":{"test":"make test"},"repository":"https://github.com/FilWisher/overalls","keywords":["path","parameters","route","http","router"],"license":"MIT","homepage":"https://github.com/FilWisher/overalls","devDependencies":{"istanbul":"^0.3.13","tap-spec":"^2.2.2","tape":"^3.5.0"},"gitHead":"4e5855b04db45458a3dc0e9679d8cdfff47fd58d","versions":[{"number":"1.0.0","date":"2015-04-02T15:58:29.113Z"},{"number":"1.0.1","date":"2015-04-04T14:30:51.606Z"},{"number":"1.0.2","date":"2015-04-04T15:09:35.814Z"},{"number":"1.0.3","date":"2015-04-04T16:29:21.488Z"},{"number":"1.0.4","date":"2015-04-04T16:31:08.410Z"}],"readme":"# overalls\n\n[![Code Climate](https://codeclimate.com/github/FilWisher/overalls/badges/gpa.svg)](https://codeclimate.com/github/FilWisher/overalls) [![Test Coverage](https://codeclimate.com/github/FilWisher/overalls/badges/coverage.svg)](https://codeclimate.com/github/FilWisher/overalls)\n\nA small routing tool to decorate HTTP requests with path parameters\n\n\n\n##### use:\n```js\nvar http = require(\"http\");\nvar overalls = require(\"overalls\");\n\n// parameters are between {curlybraces}\nvar routes = [\"GET /\", \"GET /dogs/{dog}\", \"GET /cats/{cat}\"];\n\n// overalls is configured with an array of keys\n// (or object with paths as keys) i.e { \"GET /\": function (req, res) {...} }\nvar decorate = overalls(routes);\n\nvar server = http.createServer(function (req, res) {\n\n  //decorate adds request parameters from the matching path to req.params\n  decorate(req);\n\n  res.writeHead(200, {\"Content-Type\": \"text/plain\"});\n\n  if(req.params) {\n    if (req.params.dog) {\n      res.write(\"dogs: \" + req.params.dog);\n    } else if (req.params.cat) {\n      res.write(\"cat: \" + req.params.cat);\n    }\n\n  } else {\n    res.write(\"no params\");\n  }\n  res.end();\n\n});\n\nserver.listen(4444);\n\nconsole.log(\"listening on 4444\");\n```\n(Also look at /examples for more examples)\n\n\n## api\n\noveralls exposes a single function:\n\n### overalls(routes)\n\n ```routes``` - an array (or object) of paths.\n e.g:\n ```\n var routes = [\"GET /\", \"GET /articles/{article}\", \"GET /issues/{issue}\"];\n ```\n or\n ```\n var routes = {\n   \"GET /\": function (req, res) {...},\n   \"GET /articles/{article}\": function (req, res) {...}\n }\n ```\n\n```returns``` - a decorate function with the signature:```decorate(req)```\n\n### decorate(req)\n\n```req``` - a HTTP request object (although this will work with any object with method and url properties.\n\nCalling decorate on the request object will attempt to match the request path to a path from routes. If there is a matching path, ```req``` will be decorated with a ```params``` property.\n\nThe ```params``` property will contain the parameter names as keys.\n\nFor example, if decorate() matches the route ``` \"GET /articles/{article}\" ``` with a GET request to ```\"/articles/13\"```, the request object will look like this:\n```\n{\n  path: \"GET /articles/13\",\n  params: {\n    article: \"13\"\n  },\n  ...\n}\n```\n\n## license\n\nMIT\n","created":"2015-04-02T15:58:29.113Z","modified":"2015-04-04T16:31:08.410Z","lastPublisher":{"name":"filwisher","email":"williamfisher@hotmail.co.uk"},"owners":[{"name":"filwisher","email":"williamfisher@hotmail.co.uk"}],"other":{"_attachments":{},"_from":".","_id":"overalls","_npmUser":{"name":"filwisher","email":"williamfisher@hotmail.co.uk"},"_npmVersion":"1.4.28","_rev":"1-111c98774698c3fdb1cf65def5686c8a","_shasum":"ca44248f2237638d08cbbd50a0362cba01d421a7","author":{"name":"William Fisher"},"bugs":{"url":"https://github.com/FilWisher/overalls/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"1.0.4"},"dist":{"shasum":"ca44248f2237638d08cbbd50a0362cba01d421a7","tarball":"http://registry.npmjs.org/overalls/-/overalls-1.0.4.tgz"},"maintainers":[{"name":"filwisher","email":"williamfisher@hotmail.co.uk"}],"readmeFilename":"README.md","time":{"modified":"2015-04-04T16:31:08.410Z","created":"2015-04-02T15:58:29.113Z","1.0.0":"2015-04-02T15:58:29.113Z","1.0.1":"2015-04-04T14:30:51.606Z","1.0.2":"2015-04-04T15:09:35.814Z","1.0.3":"2015-04-04T16:29:21.488Z","1.0.4":"2015-04-04T16:31:08.410Z"}}}