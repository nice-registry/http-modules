{"name":"light-http","version":"1.4.9","description":"A really light library for HTTP request.","main":"index.js","files":["package.json","index.js","lib.js","lightHttp.js","lightHttp.min.js","lightHttp-simple.min.js","lightHttp-simple.js"],"scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["http","https","get","post","request"],"license":"MIT","dependencies":{"mime":"^1.3.4","q":"^1.4.1","underscore":"^1.8.3"},"devDependencies":{"jshint":"^2.8.0"},"gitHead":"5ac957f6e7ff4cc64a1818198322d5c56d3547ce","versions":[{"number":"1.0.0","date":"2015-09-17T03:11:07.237Z"},{"number":"1.1.0","date":"2015-10-08T04:45:57.708Z"},{"number":"1.2.0","date":"2015-11-08T13:48:03.869Z"},{"number":"1.3.0","date":"2016-01-10T15:54:33.227Z"},{"number":"1.3.1","date":"2016-01-12T17:29:57.059Z"},{"number":"1.3.2","date":"2016-01-22T15:08:14.122Z"},{"number":"1.3.3","date":"2016-01-22T15:15:56.130Z"},{"number":"1.3.4","date":"2016-01-22T17:27:33.885Z"},{"number":"1.3.5","date":"2016-01-22T18:12:32.383Z"},{"number":"1.3.6","date":"2016-01-24T15:56:09.287Z"},{"number":"1.3.7","date":"2016-01-24T16:15:03.320Z"},{"number":"1.3.8","date":"2016-08-13T07:45:07.329Z"},{"number":"1.3.9","date":"2016-08-13T09:01:03.158Z"},{"number":"1.3.10","date":"2016-08-13T18:00:30.384Z"},{"number":"1.4.0","date":"2016-08-14T06:36:56.220Z"},{"number":"1.4.1","date":"2016-08-14T06:50:40.979Z"},{"number":"1.4.2","date":"2016-08-14T07:17:48.848Z"},{"number":"1.4.3","date":"2016-08-20T12:54:14.619Z"},{"number":"1.4.4","date":"2016-09-03T16:57:06.623Z"},{"number":"1.4.5","date":"2016-09-03T17:10:27.217Z"},{"number":"1.4.6","date":"2016-09-03T17:32:02.184Z"},{"number":"1.4.7","date":"2016-09-04T08:09:26.883Z"},{"number":"1.4.8","date":"2016-12-07T05:01:23.149Z"},{"number":"1.4.9","date":"2016-12-07T05:11:48.141Z"}],"readme":"\nLight-http is a very light library it could easily make a http & https request, also support asynchronous and synchonrous at the same time.\n\nYou can use this library on server side Node.js  and client side JavaScript.\n\n\n[[light-http NPM] (https://www.npmjs.com/package/light-http)]\n[[English Document] ( http://puritys.github.io/lightHttp/dest/en/index.html)]\n[[中文文件] (http://puritys.github.io/lightHttp/dest/tw/index.html)]\n\n\nTravis CI status: [![Unit testing](https://travis-ci.org/puritys/lightHttp.png?branch=master)](https://travis-ci.org/puritys/lightHttp)[![Coverage Status](https://coveralls.io/repos/github/puritys/lightHttp/badge.svg?branch=master)](https://coveralls.io/github/puritys/lightHttp?branch=master)\n\n\nLet's try it !\n\n\n## How to install light http on server side \nnpm install -g light-http\n\n## Example \n\n### Asynchronous \n\n    var http = require('light-http');\n    var header = {\"user-agent\": \"Mozilla/5.0 xx\"};\n    var url = \"https://www.google.com.tw\";\n    \n    // Method GET\n    http.get(url, {\"key\":\"value\"}, header, function(response) {\n        var html = response;\n        var respHeaders = http.getResponseHeaders();\n        console.log(respHeaders['set-cookie']);\n    });\n    \n    // Method POST\n    http.post(url, {\"key\":\"value\"}, header, function(content, err, respObj) {\n        if (!err) {\n            console.log(\"Response content = \", content);\n            console.log(\"Response header = \", respObj.headers);\n            console.log(\"Response binary data = \", respObj.binary);\n        }\n        \n    });\n\n\n### Synchronous - Using Promise\n\n\n    var http = require('light-http');\n    var header = {\"user-agent\": \"Mozilla/5.0 xx\"};\n    var url = \"https://www.google.com.tw\";\n    \n    // Method GET\n    http.get(url, {\"key\":\"value\"}, header)\n    .then(function(response) {\n        ...\n    }, function (err) {...});\n    \n    // Method POST\n    http.post(url, {\"key\":\"value\"}, header)\n    .then(function(response) {\n        ...\n    }, function (err) {...});\n\n\n\n### Upload file\n\n\n    var http = require('light-http');\n    var header = {\"user-agent\": \"Mozilla/5.0 xx\"};\n    var url = \"https://www.google.com.tw\";\n    \n    http.addFile(\"fileData\", \"/var/www/file.txt\");\n    http.addFile(\"fileData2\", \"/var/www/file2.txt\");\n    http.addFileContent(\"fileData3\", \"file3.txt\", \"The file content\");\n    \n    http.post(baseUrl + \"/xxx.php\", {\"age\":\"13\"}, header, function(response) {\n        var resp = JSON.parse(response);\n    });\n\n\n### Make a Raw HTTP request\n\n    var http = require('light-http');\n    var host = \"www.google.com.tw\";\n    var port = 80;\n    var path = \"/\";\n    var cookie = 'SID=; HSID=; SSID=jjj; APISID=;';\n    var msg = [\n    \"GET \" + path + \" HTTP/1.1\",\n    \"host: \" + host,\n    \"cookie: \" + cookie,\n    \"\\r\\n\"].join(\"\\r\\n\");\n\n    http.rawRequest(host, port, msg)\n        .then(function (resp) {\n            console.log(resp);\n        });\n\n    //http.rawRequest(host, port, msg, function (resp) {\n    //    console.log(resp);\n    //});\n\n\n### Make a Raw HTTPS request (ssl)\n\nYou have two ways to indicate this library to use https protocol\n\n1. Set the port to be \"443:ssl\".\n2. Add https:// before the value of host.\n\n### Example\n\n    var http = require('light-http');\n    var host = \"www.google.com.tw\";\n    var url = \"https://\" + host;\n    var port = 443; // or port = \"443:ssl\"\n    var path = \"/\";\n    var cookie = 'SID=; HSID=; SSID=jjj; APISID=;';\n    var msg = [\n    \"GET \" + path + \" HTTP/1.1\",\n    \"host: \" + host,\n    \"cookie: \" + cookie,\n    \"\\r\\n\"].join(\"\\r\\n\");\n    \n    http.rawRequest(url, port, msg)\n    .then(function (resp) {\n        console.log(resp);\n    });\n\n\n\nUsing lightHttp library on client side browser\n=================================\n\nlightHttp library also support any browser in the world to quickly and easily make a ajax, pjax, jsonp.\n\nThere are two minified JavaScript files with lightHttp function  you can use.\n\nOne is the \"lightHttp.min.js\", this file include the promise functions. The flaw of this file is it need 24 KB.\n\nAnother one is the \"lightHttp-simple.min.js\", this file do not include the promise function so it's file size has only 5 KB.\n\nAJAX (GET)\n----------\n\n    <html>\n    <script src=\"lightHttp.min.js\"></script>\n    <script>\n    var http = new window.lightHttp();\n    http.ajax(\"test.html\", {\"count\": 20}, function (content) {\n        console.log(content);\n    });\n    </script>\n    </html>\n\nAJAX (GET) Promise\n----------\n\n    <html>\n    <script src=\"lightHttp.min.js\"></script>\n    <script>\n    var http = new window.lightHttp();\n    http.ajax(\"test.html\", {\"count\": 20})\n        .then(function (content) {\n            console.log(content);\n        });\n    </script>\n    </html>\n\nAJAX (POST)\n----------\n\n    <html>\n    <script src=\"lightHttp.min.js\"></script>\n    <script>\n    var http = new window.lightHttp();\n    http.ajaxPost(\"test.php\", {\"count\": 20}, function (content) {\n        console.log(content);\n    });\n    </script>\n    </html>\n\nJSONP\n------\n\n    <html>\n    <script src=\"lightHttp.min.js\"></script>\n    <script>\n    var http = new window.lightHttp();\n    http.jsonp(\"testJsonp.php\", {\"test\":1}, function (resp) {\n        console.log(resp);\n    });\n\n    </script>\n    </html>\n\nAJAX (Upload file)\n----------\n\n    <html>\n    <script src=\"lightHttp.min.js\"></script>\n    <input type=\"file\" id=\"fileInput\" />\n    <script>\n    var http = new window.lightHttp();\n    http.addFile(\"fileData\", document.getElementById(\"fileInput\"));\n    http.ajaxPost(\"test.php\", {\"count\": 20}, function (content) {\n        console.log(content);\n    });\n    </script>\n    </html>\n\n\n.\n\n","starsCount":1,"created":"2015-09-17T03:11:07.237Z","modified":"2016-12-07T05:11:48.141Z","lastPublisher":{"name":"puritys","email":"pipi00000@gmail.com"},"owners":[{"name":"puritys","email":"pipi00000@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"light-http","_nodeVersion":"5.12.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/light-http-1.4.9.tgz_1481087505930_0.38251428096555173"},"_npmUser":{"name":"puritys","email":"pipi00000@gmail.com"},"_npmVersion":"2.11.1","_rev":"3-e8cf19226425a249f6cb065a5d45935a","_shasum":"3a464ed21328a012f550c4a1e7fb21ecfe703048","author":{"name":"puritys"},"directories":{},"dist-tags":{"latest":"1.4.9"},"dist":{"shasum":"3a464ed21328a012f550c4a1e7fb21ecfe703048","tarball":"http://registry.npmjs.org/light-http/-/light-http-1.4.9.tgz"},"maintainers":[{"name":"puritys","email":"pipi00000@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-12-07T05:11:48.141Z","created":"2015-09-17T03:11:07.237Z","1.0.0":"2015-09-17T03:11:07.237Z","1.1.0":"2015-10-08T04:45:57.708Z","1.2.0":"2015-11-08T13:48:03.869Z","1.3.0":"2016-01-10T15:54:33.227Z","1.3.1":"2016-01-12T17:29:57.059Z","1.3.2":"2016-01-22T15:08:14.122Z","1.3.3":"2016-01-22T15:15:56.130Z","1.3.4":"2016-01-22T17:27:33.885Z","1.3.5":"2016-01-22T18:12:32.383Z","1.3.6":"2016-01-24T15:56:09.287Z","1.3.7":"2016-01-24T16:15:03.320Z","1.3.8":"2016-08-13T07:45:07.329Z","1.3.9":"2016-08-13T09:01:03.158Z","1.3.10":"2016-08-13T18:00:30.384Z","1.4.0":"2016-08-14T06:36:56.220Z","1.4.1":"2016-08-14T06:50:40.979Z","1.4.2":"2016-08-14T07:17:48.848Z","1.4.3":"2016-08-20T12:54:14.619Z","1.4.4":"2016-09-03T16:57:06.623Z","1.4.5":"2016-09-03T17:10:27.217Z","1.4.6":"2016-09-03T17:32:02.184Z","1.4.7":"2016-09-04T08:09:26.883Z","1.4.8":"2016-12-07T05:01:23.149Z","1.4.9":"2016-12-07T05:11:48.141Z"},"users":{"marlongrape":true}}}