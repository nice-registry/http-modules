{"name":"yahc","description":"Yet Another Http Client","version":"2.0.1","keywords":["client","http","rest","api","restful","request","webservice"],"license":"Apache-2.0","scripts":{"test":"node_modules/jasmine/bin/jasmine.js JASMINE_CONFIG_PATH=test/jasmine.json"},"engines":{"node":">= 6.0.0"},"repository":"https://github.com/NickNaso/yahc","homepage":"http://www.nacios.it/","dependencies":{"co":"^4.6.0","co-request":"^1.0.0","fs-extra":"^0.30.0","underscore":"^1.8.3"},"devDependencies":{"body-parser":"^1.15.2","express":"^4.14.0","formidable":"^1.0.17","jasmine":"^2.5.2"},"files":["LICENSE","README.md","CHANGELOG.md","index.js","lib/"],"gitHead":"7056d88a883cd31e6d4c8dfae0011ec25466d5df","versions":[{"number":"1.0.0","date":"2016-09-29T14:55:36.705Z"},{"number":"2.0.0","date":"2016-10-03T02:03:15.121Z"},{"number":"2.0.1","date":"2016-10-05T11:21:22.487Z"}],"readme":"# yahc\n\nYet Another Http Client\n\n**Yet Another Http Client** is a small client side HTTP request library. The\npurpose is to permit to make http requests with simplicity.\n\n## Installation\n\nIf you want use **yahc** you have to install it. There are two methods to do\nthat:\n\nIn your package.json add the following item:\n\n```json\n\"yahc\": \"version\"\n```\n\nthen digit:\n\n```console\nnpm install\n```\n\n**Example**:\n\n```json\n\"yahc\": \"*\" for the latest version\n\"yahc\": \"1.0.0\" for the version 1.0.0\n```\n\n**OR**\n\nlaunch this command:\n\n```console\nnpm install yahc --save\n```\n\n## Simple  use\n\nTo start using **yahc** you have to import it in you project. To make a HTTP\nrequest use one of its methods **.get()**, **.post()**, **put()** or\n**delete()**. You can understand that only GET, POST, PUT, DELETE HTTP VERBS are\npermitted.\n\n#### Example\n\n```javascript\n'use strict';\n\nconst HttpClient = require('yahc');\n\nHttpClient.get({\n  url: \"YOUR URL\",\n  headers: {},\n  qs: {},\n  encType: HttpClient.ENC_TYPES.X_WWW_FORM_URLENCODED,\n  isJson: false,\n  timeout: HttpClient.DEFAULT_TIMEOUT\n})\n.then((response) => {\n  // Do something with response\n  console.log(response);\n})\n.catch((err) => {\n  // Do something with error response\n  console.error(err);\n});\n```\n\n## Headers\n\nEvery method of **yahc** allows you to set the request's header. In particular\nevery method take in input an objet parameter **headers** that is an object with\na **key - value** representation of the request's header.\n\n#### Example:\n\n```javascript\n'use strict';\n\nconst HttpClient = require('yahc');\n\nHttpClient.get({\n  url: \"YOUR URL\",\n  // HERE YOUR KEY VALUE PAIRS FOR headers\n  headers: {\n    Authorization: \"Basic \"+ \"myUsername:myPassword\".toString('base64')\n  },\n  qs: {},\n  encType: HttpClient.ENC_TYPES.X_WWW_FORM_URLENCODED,\n  isJson: false,\n  timeout: HttpClient.DEFAULT_TIMEOUT\n})\n.then((response) => {\n  // Do something with response\n  console.log(response);\n})\n.catch((err) => {\n  // Do something with error response\n  console.error(err);\n});\n```\n\n## encType\n\nEvery method of **yahc** has an encType parameter which represent the encoding\ntype used by **yahc** to send data to the server. In general there are two\npossible choices for **encType**:\n\n* application/x-www-form-urlencoded - GET - POST - PUT - DELETE\n* multipart/form-data - POST - PUT\n\nThe library exposes these values using constants, so you can set it using these\nconstants as in the example reported below:\n\n#### Example\n\n```javascript\n'use strict';\n\nconst HttpClient = require('yahc');\n\n// get application/x-www-form-urlencoded\nlet urlencode = HttpClient.ENC_TYPES.X_WWW_FORM_URLENCODED;\n\n// get multipart/form-data\nlet formdata = HttpClient.ENC_TYPES.MULTIPART_FORM_DATA;\n\n// use urlencode or formdata to make request using yahc\nHttpClient.get({\n  url: \"YOUR URL\",\n  headers: {},\n  qs: {},\n  encType: urlencode,\n  isJson: false,\n  timeout: HttpClient.DEFAULT_TIMEOUT\n})\n.then((response) => {\n  // Do something with response\n  console.log(response);\n})\n.catch((err) => {\n  // Do something with error response\n  console.error(err);\n});\n```\n\n## Timeout\n\nSometimes the server for which you make a request could not be available so\nafter some time you get a timeout error from the server stating it's not able\nto give you a valid response after the specified time. Default timeout parameter\nis set to 15000 ms, but you're free to change that value. **yahc** exposes the\nvalue of default timeout through the constant **DEFAULT_TIMEOUT**. Remember that\nthe value of timeout for the request must be expressed in milliseconds (ms).\n\n#### Example\n\n```javascript\n'use strict';\n\nconst HttpClient = require('yahc');\n\n// get default timeout\nlet timeout = HttpClient.DEFAULT_TIMEOUT;\n\n// you can set your preferred timeout in ms\ntimeout = 5000;\n\n// use timeout to  make request using yahc\nHttpClient.get({\n  url: \"YOUR URL\",\n  headers: {},\n  qs: {},\n  encType: urlencode,\n  isJson: false,\n  timeout: timeout\n})\n.then((response) => {\n  // Do something with response\n  console.log(response);\n})\n.catch((err) => {\n  // Do something with error response\n  console.error(err);\n});\n```\n\n## Querystring\n\nEvery method of **yahc** allows you to set querystring of the request. In\nparticular, every method take in input an objet parameter **qs** that is an\nobject with a **key - value** representation of the querystring for the request.\n\n#### Example\n\n```javascript\n'use strict';\n\nconst HttpClient = require('yahc');\n\nHttpClient.get({\n  url: \"YOUR URL\",\n  headers: {},\n  // HERE YOUR KEY VALUE PAIRS FOR quesrystring\n  qs: {\n    q: \"yahc\"\n  },\n  encType: HttpClient.ENC_TYPES.X_WWW_FORM_URLENCODED,\n  isJson: false,\n  timeout: HttpClient.DEFAULT_TIMEOUT\n})\n.then((response) => {\n  // Do something with response\n  console.log(response);\n})\n.catch((err) => {\n  // Do something with error response\n  console.error(err);\n});\n```\n\n## isJson\n\nThe parameter **isJson** is common for all methods of **yahc** and if set to\ntrue the value \"Content-type: application/json\" will be added to the request's\nheader and the server response's body will be parsed as JSON.\n\n## Response\n\nWhen making request you obtain a response from the server. Tha response returns\nthe requested resource or an error. **yahc** structures the object response in\nthree parts:\n\n* **haders** - Contains the headers of the server response\n* **body** - Contains the body of the server response\n* **statusCode** - Represent the HTTP status code for the server response\n\n#### Example\n\n```javascript\n'use strict';\n\nconst HttpClient = require('yahc');\n\n// get default timeout\nlet timeout = HttpClient.DEFAULT_TIMEOUT;\n\n// you can set your preferred timeout in ms\ntimeout = 5000;\n\n// use timeout to  make request using yahc\nHttpClient.get({\n  url: \"YOUR URL\",\n  headers: {},\n  qs: {},\n  encType: urlencode,\n  isJson: true,\n  timeout: timeout\n})\n.then((response) => {\n  // Do something with response\n  console.log(response);\n  // OUTPUT:\n  /*\n  {\n    headers: {\n      'x-powered-by': 'Express',\n      'content-type': 'application/json; charset=utf-8',\n      'content-length': '53',\n      etag: 'W/\"35-qoJ3nLnfyzCPwauBZcdTpQ\"',\n      date: 'Mon, 03 Oct 2016 00:54:28 GMT',\n      connection: 'close'\n    },\n    body: { message: 'Come up to meet you, tell you I\\'m sorry' },\n    statusCode: 200\n  }\n  */\n})\n.catch((err) => {\n  // Do something with error response\n  console.error(err);\n});\n```\n\nIf the server response contains one of the HTTP error (for more info see:\n[HTTP ERRORS](https://www.npmjs.com/package/error-types)) **yahc** throws a\nResponseError as an object that represents the error and internally contains the\nserver response.\n\n#### Example\n\n```javascript\n'use strict';\n\nconst HttpClient = require('yahc');\n\n// get default timeout\nlet timeout = HttpClient.DEFAULT_TIMEOUT;\n\n// you can set your preferred timeout in ms\ntimeout = 5000;\n\n// use timeout to  make request using yahc\nHttpClient.get({\n  url: \"YOUR URL\",\n  headers: {},\n  qs: {},\n  encType: urlencode,\n  isJson: true,\n  timeout: timeout\n})\n.then((response) => {\n  // Do something with response\n  console.log(response);\n})\n.catch((err) => {\n  // Do something with error response\n  console.error(err.response);\n  console.error(err.message);\n  // OUTPUT:\n  /*\n  {\n    headers: {\n      'x-powered-by': 'Express',\n      'content-type': 'application/json; charset=utf-8',\n      'content-length': '53',\n      etag: 'W/\"35-qoJ3nLnfyzCPwauBZcdTpQ\"',\n      date: 'Mon, 03 Oct 2016 00:54:28 GMT',\n      connection: 'close'\n    },\n    body: { message: 'Come up to meet you, tell you I\\'m sorry' },\n    statusCode: 200\n  }\n  */\n});\n```\n\n## Make request\n\n**Yet Another Http Client** allows to make HTTP requests with simplicity. The\nsupported HTTP verbs are:\n\n* **GET** - .get() method\n* **POST** - .post() method\n* **PUT** - .put() method\n* **DELETE** - .delete() method\n\n## GET\n\nHTTP GET request is very simple with **yahc**, you just need to call the method\n**get** and set the following parameters:\n\n* **url** - Represents the url / uri of the requested resource.\n* **headers** - Headers for the request. Object that contains key-value for the headers.\n* **qs** - Querystring for the reuqest. Object that contains key-value for the querystring.\n* **encType** - Encoding for the request. Only  application/x-www-form-urlencoded is allowed for get request.\n* **isJson** - true / false. If set to true, the value \"Content-type: application/json\" will be added to the request header and the server body response will be parsed as JSON.\n* **timeout** - Number of milliseconds, after that the client returns a timeout error.\n\n#### Example \n\n```javascript\n'use strict';\n\nconst HttpClient = require('yahc');\n\n// use timeout to  make request using yahc\nHttpClient.get({\n  url: \"YOUR URL\",\n  headers: {\n    Authorization: \"Basic \"+ \"myUsername:myPassword\".toString('base64')\n  },\n  qs: {\n    q: \"http client\"\n  },\n  encType: HttpClient.X_WWW_FORM_URLENCODED,\n  isJson: true,\n  timeout: 7000\n})\n.then((response) => {\n  // Do something with response\n  console.log(response);\n})\n.catch((err) => {\n  // Do something with error response\n  console.error(err);\n});\n```\n\n## POST e PUT\n\nHTTP POST or PUT requests are very simple with **yahc**, you just need to call\nthe method **post** or **put** and set the following parameters:\n\n* **url** - Represents the url / uri of the requested resource.\n* **headers** - Headers for the request. Object that contains key-value for the headers.\n* **qs** - Querystring for the reuqest. Object that contains key-value for the querystring.\n* **encType** - Encoding for the request.\n* **isJson** - true / false. If set to true, the value \"Content-type: application/json\" will be added to the request header and the server body response will be parsed as JSON.\n* **body** - The body for the http request. It's an object that contains key-value for the body.\n* **timeout** - Number of milliseconds, after that the client returns a timeout error.\n\n#### Example \n\n```javascript\n'use strict';\n\nconst HttpClient = require('yahc');\n\n// use timeout to  make request using yahc\nHttpClient.post({\n  url: \"YOUR URL\",\n  headers: {\n    Authorization: \"Basic \"+ \"myUsername:myPassword\".toString('base64')\n  },\n  qs: {\n    q: \"http client\"\n  },\n  encType: HttpClient.X_WWW_FORM_URLENCODED,\n  isJson: true,\n  timeout: 7000,\n  body: {\n    ping: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  }\n})\n.then((response) => {\n  // Do something with response\n  console.log(response);\n})\n.catch((err) => {\n  // Do something with error response\n  console.error(err);\n});\n```\n\n## POST e PUT (Upload file)\n\nIn case you want to upload one or more file you need to call **post** or **put**\nmethod with encType set to multipart/form-data and the parameter **files** that\nrepresents an array of files or file representations that you want to upload on\nthe server. Post and put parameters in case of upload:\n\n* **url** - Represents the url / uri of the requested resource.\n* **headers** - Headers for the request. Object that contain key-value for the headers.\n* **qs** - Querystring for the reuqest. Object that contains key-value for the querystring.\n* **encType** - Encoding for the request. In case of file upload it has to be set to multpart/form-data.\n* **isJson** - true / false. If set to true, the value \"Content-type: application/json\" will be added to the request header and the server body response will be parsed as JSON.\n* **body** - The body for the HTTP request. It's an object that contains key-value for the body.\n* **timeout** - Number of milliseconds, after that the client returns a timeout error.\n* **files** - This parameter represents the list of file you want to upload. It is an array and its element must be a Buffer, a Readable stream or an object with this form {name: \"myFieldName\", file: \"Buffer or Readable stream}.\n\n#### Example\n\n```javascript\nlet myBody = {\n  name: \"yahc\",\n  description: \"Yet Another Http Client\",\n  version: \"1.0.0\"\n};\nlet uploadFile = fs.createReadStream(__dirname +'YOUR PATH');\nHttpClient.post({\n  url: \"YOUR URL\",\n  headers: {},\n  qs: {},\n  encType: HttpClient.ENC_TYPES.MULTIPART_FORM_DATA,\n  isJson: true,\n  body: myBody,\n  timeout: HttpClient.DEFAULT_TIMEOUT,\n  files: [uploadFile, uploadFile, {name: \"myFile\", file: uploadFile}]\n})\n.then((response) => {\n  // Do something with response\n  console.log(response);\n})\n.catch((err) => {\n  // Do something with error response\n  console.error(err);\n});\n```\n\n## DELETE\n\nHTTP DELETE request is very simple with **yahc**, you just need to call the\nmethod **delete** and set the following parameters:\n\n* **url** - Represents the url / uri of the requested resource.\n* **headers** - Headers for the request. Object that contains key-value for the headers.\n* **qs** - Querystring for the reuqest. Object that contains key-value for the querystring.\n* **encType** - Encoding for the request. Only  application/x-www-form-urlencoded is allowed for get request.\n* **isJson** - true / false. If set to true, the value \"Content-type: application/json\" will be added to the request header and the server body response will be parsed as JSON.\n* **body** - The body for the HTTP request. It's an object that contains key-value for the body.\n* **timeout** - Number of milliseconds after that the client returns a timeout error.\n\n#### Example \n\n```javascript\n'use strict';\n\nconst HttpClient = require('yahc');\n\n// use timeout to  make request using yahc\nHttpClient.delete({\n  url: \"YOUR URL\",\n  headers: {\n    Authorization: \"Basic \"+ \"myUsername:myPassword\".toString('base64')\n  },\n  qs: {\n    q: \"http client\"\n  },\n  encType: HttpClient.X_WWW_FORM_URLENCODED,\n  isJson: true,\n  body: {\n    ping: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  }\n  timeout: 7000\n})\n.then((response) => {\n  // Do something with response\n  console.log(response);\n})\n.catch((err) => {\n  // Do something with error response\n  console.error(err);\n});\n```","starsCount":2,"created":"2016-09-29T14:55:36.705Z","modified":"2016-10-24T21:14:52.335Z","lastPublisher":{"name":"nicknaso","email":"nicoladelgobbo@gmail.com"},"owners":[{"name":"mauro-d","email":"mauro.doganieri@gmail.com"},{"name":"nicknaso","email":"nicoladelgobbo@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"yahc","_nodeVersion":"6.7.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/yahc-2.0.1.tgz_1475666480337_0.45095197949558496"},"_npmUser":{"name":"nicknaso","email":"nicoladelgobbo@gmail.com"},"_npmVersion":"3.10.3","_rev":"2-c55a8a88fb7d372e9cac793a5b05b17c","_shasum":"733a2f1a4fbfd6048dc39be09886faf0c5028663","bugs":{"url":"https://github.com/NickNaso/yahc/issues"},"contributors":[{"name":"Nicola Del Gobbo","email":"nicoladelgobbo@gmail.com"},{"name":"Mauro Doganieri","email":"mauro.doganieri@gmail.com"}],"directories":{},"dist-tags":{"latest":"2.0.1"},"dist":{"shasum":"733a2f1a4fbfd6048dc39be09886faf0c5028663","tarball":"http://registry.npmjs.org/yahc/-/yahc-2.0.1.tgz"},"maintainers":[{"name":"mauro-d","email":"mauro.doganieri@gmail.com"},{"name":"nicknaso","email":"nicoladelgobbo@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-10-24T21:14:52.335Z","created":"2016-09-29T14:55:36.705Z","1.0.0":"2016-09-29T14:55:36.705Z","2.0.0":"2016-10-03T02:03:15.121Z","2.0.1":"2016-10-05T11:21:22.487Z"},"users":{"nicknaso":true,"mauro-d":true}}}