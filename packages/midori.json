{"name":"midori","version":"0.3.5","license":"CC0-1.0","repository":"https://github.com/metalabdesign/midori","main":"index.js","scripts":{"prepublish":"babel -d . ./src --source-maps true","test":"npm run lint && npm run spec","spec":"NODE_ENV=test ./node_modules/.bin/_mocha -r test/helpers/chai.js -r adana-dump --compilers js:babel-core/register -R spec --recursive test/spec","lint":"eslint ."},"dependencies":{"chalk":"^1.1.3","compression":"^1.6.2","cookies":"^0.6.2","http-proxy":"^1.15.2","lodash":"^4.17.0","morgan":"^1.7.0","negotiator":"^0.6.1","node-uuid":"^1.4.7","on-finished":"^2.3.0","on-headers":"^1.0.1","parseurl":"^1.3.1","path-to-regexp":"^1.7.0","qs":"^6.3.0","send":"^0.14.1","useragent":"^2.1.9"},"devDependencies":{"adana-cli":"^0.1.1","adana-dump":"^0.1.0","adana-format-lcov":"^0.1.1","babel-cli":"^6.3.17","babel-core":"^6.3.26","babel-preset-metalab":"^0.1.4","bl":"^1.0.1","chai":"^3.4.1","chai-http":"^1.0.0","eslint":"^1.10.3","eslint-config-metalab":"^1.0.0-rc.4","eslint-plugin-filenames":"^0.2.0","eslint-plugin-import":"^0.11.0","eslint-plugin-react":"^3.11.2","mocha":"^2.3.4","sinon":"^1.17.2","sinon-chai":"^2.8.0"},"gitHead":"00b7e1606d3a72c0314a6a7924ab132080b9b808","description":"Minimalist, composable http apps for [http]/[express]/[hapi].","homepage":"https://github.com/metalabdesign/midori#readme","versions":[{"number":"0.3.3","date":"2016-11-14T09:46:20.240Z"},{"number":"0.3.4","date":"2016-11-14T09:58:40.480Z"},{"number":"0.3.5","date":"2017-01-17T04:54:23.618Z"}],"readme":"# midori\n\nMinimalist, composable http apps for [http]/[express]/[hapi].\n\n![build status](http://img.shields.io/travis/metalabdesign/midori/master.svg?style=flat)\n![coverage](http://img.shields.io/coveralls/metalabdesign/midori/master.svg?style=flat)\n![license](http://img.shields.io/npm/l/midori.svg?style=flat)\n![version](http://img.shields.io/npm/v/midori.svg?style=flat)\n![downloads](http://img.shields.io/npm/dm/midori.svg?style=flat)\n\n## Usage\n\nInstall `midori` and add it to your `package.json` file:\n\n```sh\nnpm install --save midori\n```\n\nThese middleware components are NOT the same as express middleware; they are conceptually designed in a manner more similar to redux stores. Every middleware is an object with properties corresponding to events on an `http.Server` object; e.g. `request`, `error`, `upgrade`, etc. Each middleware function takes an existing middleware object and composes it.\n\nFor example, adding a `req.message` field:\n\n```javascript\nfunction addMessage(message) {\n  // Take in the existing middleware here\n  return (middleware) => {\n    const { request } = middleware;\n    // Return a new middleware here.\n    return {\n      ...middleware,\n      request(req, res) {\n        req.message = message;\n        // Composition!\n        request(req, res);\n      },\n    };\n  };\n}\n\n// Create the composed middleware.\nconst app = addMessage('hello')({\n  // Your \"base\" middleware.\n  request(req, res) {\n    res.statusCode = 200;\n    res.end(`Message: ${req.message}`);\n  }\n});\n\n// Create the server and use the appropriate methods on the middleware object.\nconst server = http.createServer();\nserver.on('request', app.request);\nserver.listen();\n```\n\nIn that sense http middleware is even less opinionated than [express] middleware. It is merely a composition mechanism for a previously non-composable set of functions (http server events).\n\n### With `http`\n\n```javascript\nimport http from 'http';\nimport connect from 'midori/connect';\nimport empty from 'midori/empty';\n\nconst server = http.createServer();\nconst createApp = empty;\nconst app = createApp({\n  request(req, res) {\n    res.statusCode = 200;\n    res.end(`Hello ${req.id}`);\n  },\n  error(err) {\n    console.log('GOT ERROR', err);\n  },\n});\n\nconnect(app, server).listen(8080);\n```\n\n### With `express`\n\n```javascript\nimport express from 'express';\nimport connector from 'midori-express';\nimport empty from 'midori/empty';\n\nconst createMiddleware = empty();\nconst app = express();\n\napp.use(connector(createMiddleware));\napp.listen(8080);\n```\n\n### With `hapi`\n\n```javascript\nimport {Server} from 'hapi';\nimport connector from 'midori-hapi';\nimport empty from 'midori/empty';\n\nconst createMiddleware = empty();\nconst server = new Server();\n\nserver.connection({port: 8080});\nserver.ext(connector(createMiddleware));\nserver.start();\n```\n\n[midori-hapi]: https://github.com/metalabdesign/midori-hapi\n[midori-express]: https://github.com/metalabdesign/midori-express\n[http]: https://nodejs.org/api/http.html\n[hapi]: http://hapijs.com/\n[express]: http://expressjs.com/\n[react]: https://facebook.github.io/react/\n[redux]: https://github.com/rackt/redux\n[webpack]: https://webpack.github.io/\n","created":"2016-11-14T09:46:20.240Z","modified":"2017-01-17T04:54:23.618Z","lastPublisher":{"name":"izaakschroeder","email":"izaak.schroeder@gmail.com"},"owners":[{"name":"izaakschroeder","email":"izaak.schroeder@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"midori","_nodeVersion":"6.3.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/midori-0.3.5.tgz_1484628861827_0.2535731354728341"},"_npmUser":{"name":"izaakschroeder","email":"izaak.schroeder@gmail.com"},"_npmVersion":"3.10.3","_rev":"3-58258ea36d9be2e8722dbf264b5cca7b","_shasum":"1086aa08b372c543b0556365c632f7be1d566f17","author":{"name":"Izaak Schroeder","email":"izaak.schroeder@gmail.com"},"bugs":{"url":"https://github.com/metalabdesign/midori/issues"},"directories":{},"dist-tags":{"latest":"0.3.5"},"dist":{"shasum":"1086aa08b372c543b0556365c632f7be1d566f17","tarball":"https://registry.npmjs.org/midori/-/midori-0.3.5.tgz"},"maintainers":[{"name":"izaakschroeder","email":"izaak.schroeder@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-01-17T04:54:23.618Z","created":"2016-11-14T09:46:20.240Z","0.3.3":"2016-11-14T09:46:20.240Z","0.3.4":"2016-11-14T09:58:40.480Z","0.3.5":"2017-01-17T04:54:23.618Z"}}}