{"name":"passport-http-jwt-bearer","version":"0.1.3","description":"HTTP JWT Bearer authentication strategy for Passport.","main":"./lib","scripts":{"test":"mocha --reporter spec --require test/bootstrap/node"},"keywords":["oauth2","passport","jwt","jsonwebtoken"],"license":{"type":"MIT","url":"http://www.opensource.org/licenses/MIT"},"dependencies":{"jsonwebtoken":"^5.0","passport-http-bearer":"^1.0.1"},"devDependencies":{"chai":"^2.2","chai-passport-strategy":"^0.2","mocha":"^2.0"},"repository":"https://github.com/Pheromone/passport-http-jwt-bearer","gitHead":"b7ff2f549e884b8e1d27bf4375600eceeaaad9f9","homepage":"https://github.com/Pheromone/passport-http-jwt-bearer","versions":[{"number":"0.1.0","date":"2014-12-10T19:02:55.167Z"},{"number":"0.1.1","date":"2014-12-10T19:33:07.197Z"},{"number":"0.1.2","date":"2015-04-01T12:43:26.275Z"},{"number":"0.1.3","date":"2015-04-12T15:13:57.467Z"}],"readme":"# passport-http-jwt-bearer\n\n[![Build Status](https://travis-ci.org/FloeDesignTechnologies/passport-http-jwt-bearer.svg?branch=master)](https://travis-ci.org/FloeDesignTechnologies/passport-http-jwt-bearer) [![Dependency Status](https://david-dm.org/FloeDesignTechnologies/passport-http-jwt-bearer.svg)](https://david-dm.org/FloeDesignTechnologies/passport-http-jwt-bearer) [![devDependency Status](https://david-dm.org/FloeDesignTechnologies/passport-http-jwt-bearer/dev-status.svg)](https://david-dm.org/FloeDesignTechnologies/passport-http-jwt-bearer#info=devDependencies)\n\nJSON Web Token (JWT) Bearer Token for OAuth 2.0 user authentication strategy\nfor Passport, using [HTTP Bearer authentication](https://www.npmjs.org/package/passport-http-bearer)\nand [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken).\n\nThis module lets you authenticate requests containing a JSON Web Token (JWT)\nencoded and signed OAuth2 access token, in your Node.js applications.\n\nBearer tokens are typically used protect API endpoints, and are often issued\nusing OAuth 2.0.\n\nJSON Web Toke (JWT) is a compact, URL-safe means of representing claims to be\ntransferred between two parties.  The claims in a JWT are encoded as a\nJavaScript Object Notation (JSON) object that is used as the payload of a JSON\nWeb Signature (JWS) structure or as the plaintext of a JSON Web Encryption\n(JWE) structure, enabling the claims to be digitally signed or MACed and/or\nencrypted.\n\nThis authentication strategy extend the [HTTP Bearer authentication](https://www.npmjs.org/package/passport-http-bearer)\nto add verification of the JWT token. The verification of the token includes\nsignature, expiration, issuer and audience validations.\n\nBy plugging into Passport, bearer token support can be easily and unobtrusively\nintegrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-http-jwt-bearer\n\n## Usage\n\n#### Configure Strategy\n\nThe HTTP JWT Bearer authentication strategy authenticates users using a bearer\ntoken.  The strategy requires a secret (when using HMAC) or a PEM encoded\npublic key (when using RSA or ECDSA) to validate the signature of the token.\nAnd a `verify` callback, which accepts that token and calls `done` providing a\nuser.  Optional `info` can be passed, typically including associated scope,\nwhich will be set by Passport at `req.authInfo` to be used by later middleware\nfor authorization and access control.\n\n    var JwtBearerStrategy require('passport-http-bearer')\n\n     passport.use(new JwtBearerStrategy(\n       secretOrPublicKey,\n       function(token, done) {\n         User.findById(token.sub, function (err, user) {\n           if (err) { return done(err); }\n           if (!user) { return done(null, false); }\n           return done(null, user, token);\n         });\n       }\n     ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'jwt-bearer'` strategy, to\nauthenticate requests.  Requests containing bearer tokens do not require\nsession support, so the `session` option can be set to `false`.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/profile', \n      passport.authenticate('jwt-bearer', { session: false }),\n      function(req, res) {\n        res.json(req.user);\n      });\n\n#### Issuing Tokens\n\nBearer tokens are typically issued using OAuth 2.0. [OAuth2orize](https://github.com/jaredhanson/oauth2orize)\nis a toolkit for implementing OAuth 2.0 servers and issuing bearer tokens.  Once\nissued, this module can be used to authenticate tokens as described above.\n\nWhen issuing a JWT Token, the token is signed using either a secret shared with\nconsumers, or a private key. [jsonwebtoken](https://github.com/auth0/node-jsonwebtoken)\nis a toolkit that can be used to produce JWT Token.\n\n## Related Modules\n\n- [OAuth2orize](https://github.com/jaredhanson/oauth2orize) â€” OAuth 2.0 authorization server toolkit\n- [jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) - JSON Web Token implementation\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## Credits\n\n  - [Pierre Buyle](https://github.com/pbuyle)\n  - [Jared Hanson](https://github.com/jaredhanson), author and maintainer of passport and passport-http-bearer.\n  - [Matias Woloski](https://github.com/woloski), author and maintainer of jsonwebtoken.\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n","starsCount":3,"created":"2014-12-10T19:02:55.167Z","modified":"2015-04-12T15:13:57.467Z","lastPublisher":{"name":"pbuyle","email":"pierre@buyle.org"},"owners":[{"name":"pbuyle","email":"pierre@buyle.org"}],"other":{"_attachments":{},"_from":".","_id":"passport-http-jwt-bearer","_npmUser":{"name":"pbuyle","email":"pierre@buyle.org"},"_npmVersion":"2.0.0","_rev":"1-4394932002fe6f0e10486b599e224957","_shasum":"4b2e8bdc05d2d24b031a0746110e60207a73787d","author":"","bugs":{"url":"http://github.com/Pheromone/passport-http-jwt-bearer/issues"},"directories":{},"dist-tags":{"latest":"0.1.3"},"dist":{"shasum":"4b2e8bdc05d2d24b031a0746110e60207a73787d","tarball":"http://registry.npmjs.org/passport-http-jwt-bearer/-/passport-http-jwt-bearer-0.1.3.tgz"},"maintainers":[{"name":"pbuyle","email":"pierre@buyle.org"}],"readmeFilename":"README.md","time":{"modified":"2015-04-12T15:13:57.467Z","created":"2014-12-10T19:02:55.167Z","0.1.0":"2014-12-10T19:02:55.167Z","0.1.1":"2014-12-10T19:33:07.197Z","0.1.2":"2015-04-01T12:43:26.275Z","0.1.3":"2015-04-12T15:13:57.467Z"},"users":{"edin-m":true,"n370":true,"cabbiepete":true}}}