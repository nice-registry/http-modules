{"name":"request-plus","version":"1.0.1","description":"advanced promisified http client with retries, EventEmitter, cache-manager, prom-client and logging","main":"src/index.js","scripts":{"test":"./node_modules/jasme/run.js"},"license":"WTFPL","repository":"https://github.com/disjunction/node-request-plus","keywords":["request","promise","retry","cache-manager","prometheus","prom-client","event emitter","logging"],"peerDependencies":{"request":">= 2.34"},"devDependencies":{"cache-manager":"^2.3.0","coveralls":"^2.11.11","eslint":"^3.0.1","istanbul":"^0.4.4","jasme":"^5.2.0","nock":"^9.0.2","prom-client":"^6.3.0","request":"2.75.0","rewire":"^2.5.2"},"dependencies":{"request-promise-native":"^1.0.0"},"gitHead":"8c8006e03175b99c13f8c6909548c213ffe55095","homepage":"https://github.com/disjunction/node-request-plus#readme","versions":[{"number":"0.0.1","date":"2016-07-17T15:10:27.059Z"},{"number":"0.0.2","date":"2016-07-24T23:29:07.605Z"},{"number":"0.0.3","date":"2016-07-26T21:00:07.721Z"},{"number":"0.0.4","date":"2016-08-02T22:23:53.928Z"},{"number":"0.0.5","date":"2016-10-11T08:01:58.375Z"},{"number":"1.0.0","date":"2016-12-27T23:20:29.410Z"},{"number":"1.0.1","date":"2017-01-10T13:20:16.696Z"}],"readme":"[![build status](https://api.travis-ci.org/disjunction/node-request-plus.png)](https://travis-ci.org/disjunction/node-request-plus)\n[![Coverage Status](https://coveralls.io/repos/github/disjunction/node-request-plus/badge.svg?branch=master&bust=1)](https://coveralls.io/github/disjunction/node-request-plus?branch=master)\n\n# request-plus\n\nIf you like `request` and/or `request-promise`, then you are good to go with this add-on!\n\nIt is a set of wrappers around [request-promise-native](https://www.npmjs.com/package/request-promise-native) module, adding the following features (all are optional and mostly independent):\n\n* [EventEmitter integration](#event-wrapper) - you can set a generic listener for any fired/successful/failed request\n* [automatic retry for particular failures](#retry-wrapper)\n* [caching results](#cache-wrapper) using [cache-manager](https://www.npmjs.com/package/cache-manager)\n* [exporting Prometheus monitoring metrics](#prometheus-wrapper) using [prom-client](https://www.npmjs.com/package/prom-client)\n* [simple built-in logging](#log-wrapper) based on events\n\n... and you can [add your own wrappers](#adding-custom-wrapper) too!\n\nThe only depency is `request-promise-native`, which has `request` as a peer dependecy. So you can flexibly use whatever `request` version you like.\n\n## Basic Example\n```\nnpm install request request-plus\n```\n\n```javascript\nconst request = require('request-promise')({\n  event: true,\n  retry: true,\n  log: true,\n});\n\nrequest('http://example.com/some/api')\n  .then(body => { console.log('response was: ' + body)})\n  .catch(error => { /*...*/ });\n```\n\n## Advanced Example\n\nLet's say we want to get JSON data from some resource, which fails sometimes and is in general quite slow. So we want to cache its results and do retries if it fails with a timeout or typical server errors. To implement caching we need to install additionally `cache-manager`\n\n```\nnpm install request request-plus cache-manager --save\n```\n\n```javascript\n// setup a cache object\nconst cacheManager = require('cache-manager');\nconst cache = cacheManager.caching({\n  store: 'memory',\n  max: 500 // keep maximum 500 different URL responses\n});\n\nconst rp = require('request-plus');\n\n// create a concrete wrapper\n// you have can multiple in one project with different settings\nconst request = rp({\n  // use retry wrapper\n  retry: {\n    attempts: 3\n  },\n\n  // use cache wrapper\n  cache: {\n    cache: cache,\n    cacheOptions: {\n      ttl: 3600 * 4 // 4 hours\n    }\n  }\n});\n\n// you can use all the options available in basic request module\nrequest({\n  uri: \"http://some.service/providing/data\",\n  json: true\n})\n  .then(data => {\n    // we get here if we got a 200 response within 3 retries\n  })\n  .catch(error => {\n    // well get here if the URL failed with 4xx errors,\n    // or 3 retry attempts failed\n  });\n```\n\n## Wrappers\n\nThe wrappers can be specified in options when creating a new requestPlus wrapper (simple way), or you can add them one by one (advanced)\n\nWhen specified in options, the wrappers will be added in a particular (common sense) order, namely: `event`, `retry`, `cache`, `prom`, `log`. Another limitation here: you can have only one wrapper of each type.\n\nSample:\n```javascript\nconst rp = require('request-plus');\nconst request = rp({\n  event: true,\n  retry: true,\n  prom: {\n    metric: myMetric\n  }\n});\n```\nWhen adding one by one you have full control of the order,\nand you may add wrappers of the same type.\n\n```javascript\nconst rp = require('request-plus');\nconst request = rp()\n  .plus.wrap('prom', {\n    metric: rawRequestHistogram\n  })\n  .plus.wrap('retry')\n  .plus.wrap('prom', {\n    metric: retriedRequestHistogram\n  });\n```\n\n### Defaults Wrapper\n\nSets default options for requests. You can use it for headers\nor if you know all your requets expect json.\n\n```javascript\nconst request = require('request-plus')({\n  defaults: {\n    headers: {\n      'User-Agent': 'My request-plus client'\n    },\n    json: true\n  }\n});\n\n// this will send a request with json:true preset\n// and with the custom User-Agent header\nrequest('http://some.service.com/products')\n  .then(data => {\n    if (data.product.length) {\n      /* ... */\n    }\n  });\n```\n\n### Event Wrapper\n\nThis wrapper adds `emitter` to the `.plus` container\nand fires basic events for each request going through:\n\n* `request` - on start of the request\n* `error` - on error\n* `response` - on successful response\n\n```javascript\nconst request = require('request-plus')({event: true});\n\n// always output failed http requests to std error\n// together with used request param\n// independent of promise chains/catch clauses\nrequest.plus.emitter.on('error', (uri, error) => {\n  console.error('http request failed %j', uri);\n})\nrequest('http://..soooo...bad...')\n.catch(() => {\n  console.log(\"something happen, i don't know what\");\n})\n```\n\nAll events have `uri` (which can be a string or options object)\nas the first parameter. Other parameters depend on the event -\nsee source code to see additional params provided for each event\n\n### Retry Wrapper\n\nParams (all optional):\n* **attempts** = 3 - number of attempt before giving up\n* **delay** = 500(ms) - delay between retries. You can provide a closure and calculate it to make a progressive delay, e.g. `attempt => 500 * attempt * attempt`\n* **filterError** - closure defining whether a retry should be done. By default it returns `true` for a timeout and `statusCode` in `[500, 502, 503, 504]`\n\n```javascript\nconst rp = require('request-plus');\nconst request = rp({\n  retry: {\n    attempts: 5,\n    delay: 1500,\n\n    // retry all errors\n    filterErrors: error =>\n      error.message === 'Error: ETIMEDOUT'\n      || error.statusCode >= 400\n  }\n});\n```\n\nIf there is an `event` wrapper initialised, then it will additionally fire events: `retryRequest`, `retryError`, `retrySuccess` providing the current attempt counter.\n\n### Cache Wrapper\n\nShould be used together with a third-party module: [cache-manager](https://www.npmjs.com/package/cache-manager)\n\nParams:\n* **cache** (required) - an instance of cache for `cache-manager` module\n* **cacheOptions** - options used for `set()`\n* **getKey** - closure generating string cache key for given request options. By default for string param - the full URI is used as key, for an object a hash is additionally generated and added to the URI (see below)\n* **hash** - hash function for default **getKey** behavior. By default it generates a key using a very cheap algorithm, but with a significant collision probability\n\n```javascript\nconst rp = require('request-plus');\nconst cacheManager = require('cache-manager');\nconst memeoryCache = cacheManager.caching({store: 'memory'});\nconst crypto = require('crypto');\nconst request = rp({\n  cache: {\n    cache: memeoryCache,\n    hash: str => crypto.createHash('md5').update(str).digest(\"hex\")\n  }\n});\n```\nIf there is an `event` wrapper initialised, then it will additionally fire events: `cacheRequest` and `cacheMiss`. You can use those to gather stats and calculate cache hits as `count(hits) = count(cacheRequests) - count(cacheMisses)`.\n\n### Prometheus Wrapper\n\nShould be used together with a third-party module: [prom-client](https://www.npmjs.com/package/prom-client)\n\nThe wrapper takes a prometheus metric and uses it to monitor both successful and error responses. It supports all basic metric types assuming that `Counter` just counts responses and `Gauge`, `Histogram` and `Summary` measure latency.\n\nIf the metric has `status_code` label, then it will be automatically set for each request.\n\nIf this wrapper doesn't meet your needs, you can add your own measurements using `event` wrapper (see above).\n\nParams:\n * **metric** - and instance of prom-client metric\n * **labels** - an object with labels or a closure generating labels on the fly\n\n```javascript\nconst promClient = require('prom-client');\nconst testHistogram = new promClient.Histogram(\n  'test_histogram',\n  'help of test_histogram',\n  ['status_code', 'nature']\n  {buckets: [0.1, 1]}\n);\nconst request = require('request-plus')({\n  prom: {\n    metric: testHistogram,\n    labels: error => {\n      if (!error) {\n        return {nature: 'success'};\n      }\n      return error.respose.statusCode === 418\n        ? {nature: 'teapot'}\n        : {}\n    }\n  }\n});\n```\n\n### Log Wrapper\n\nJust outputs some some of the events to stdout/stderr. Thus it **requires event wrapper**.\n\nThe main intention of this plugin is just to give a simple way to switch on logging when debugging. Though with some effort you can use it also in production for logging particular events\n\nParams:\n * **prefix** - overrides the function used to generate the prefix preceding the log information. By default it's: ```eventName => '[' + eventName + ']'```\n * **loggers** - overrides the default console log/error/warn. See source / unit tests for more details\n * **events** - overrides behaviour for provided events. For each event you can provide either logger name ('info', 'warn', 'error') or a function. Additionally to event parameters this function gets `eventName` as the first parameter.\n\n```javascript\nconst rp = require('request-plus');\nconst request = rp({\n  event: true,\n  log: {\n    events: {\n      fail: 'error',\n      retryFail: (eventName, uri, attempt, error) => {\n        console.error('failed despite retries: %j, on %d attempt', uri, attempt);\n      }\n    }\n  }\n});\n```\n\n### Adding custom wrapper\n\n```javascript\nfunction myWrapper(requester) {\n  return function(uri, requestOptions, callback) {\n    if (requester.plus.emitter) {\n      requester.plus.emitter.emit('myEvent', 'hello from me');\n    }\n    console.log('the uri is %j', uri);\n    return requester(uri, requestOptions, callback);\n  };\n}\n\nconst request = require('request-plus')()\n  .plus.wrap('event')\n  .plus.wrap(myWrapper);\n```\n","created":"2016-07-17T15:10:27.059Z","modified":"2017-01-10T13:20:16.696Z","lastPublisher":{"name":"disjunction","email":"or@pluseq.com"},"owners":[{"name":"disjunction","email":"or@pluseq.com"}],"other":{"_attachments":{},"_from":".","_id":"request-plus","_nodeVersion":"6.4.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/request-plus-1.0.1.tgz_1484054414448_0.6847931686788797"},"_npmUser":{"name":"disjunction","email":"or@pluseq.com"},"_npmVersion":"3.10.3","_rev":"3-c021279e62230e8055b50040c959bb04","_shasum":"00d94c2517a8839a9db4fdcf0aaf16a0fdf49e0b","author":{"name":"Konstantin Pogorelov","email":"or@pluseq.com"},"bugs":{"url":"https://github.com/disjunction/node-request-plus/issues"},"directories":{},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"00d94c2517a8839a9db4fdcf0aaf16a0fdf49e0b","tarball":"https://registry.npmjs.org/request-plus/-/request-plus-1.0.1.tgz"},"maintainers":[{"name":"disjunction","email":"or@pluseq.com"}],"readmeFilename":"README.md","time":{"modified":"2017-01-10T13:20:16.696Z","created":"2016-07-17T15:10:27.059Z","0.0.1":"2016-07-17T15:10:27.059Z","0.0.2":"2016-07-24T23:29:07.605Z","0.0.3":"2016-07-26T21:00:07.721Z","0.0.4":"2016-08-02T22:23:53.928Z","0.0.5":"2016-10-11T08:01:58.375Z","1.0.0":"2016-12-27T23:20:29.410Z","1.0.1":"2017-01-10T13:20:16.696Z"}}}