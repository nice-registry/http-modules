{"name":"http-config-cache","version":"1.0.2","description":"Cache a remote config! Supports JSON.","main":"lib/index.js","scripts":{"build":"babel src -d lib","test":"npm run build && ./node_modules/.bin/mocha --reporter spec --timeout 25000","lint":"eslint src/"},"repository":"https://github.com/Restocks/http-config-cache","license":"MIT","homepage":"https://github.com/Restocks/http-config-cache#readme","devDependencies":{"babel-cli":"^6.18.0","babel-preset-es2015":"^6.18.0","eslint":"^3.8.1","eslint-config-airbnb-base":"^9.0.0","eslint-plugin-import":"^2.0.1","mocha":"^3.1.2"},"dependencies":{"request":"^2.76.0","timed-cache":"^1.0.5"},"gitHead":"762a316043b768bdd30e741c6ecf3087c9d67bc9","versions":[{"number":"1.0.0","date":"2016-10-26T19:23:55.701Z"},{"number":"1.0.1","date":"2016-10-26T19:31:45.390Z"},{"number":"1.0.2","date":"2016-10-31T23:12:12.196Z"}],"readme":"# http-config-cache\nCaches JSON configs. Meant for long running processes with configs that update more often than environment variables would.\n\n## Installation \n\n`npm install http-config-cache`\n\n## Usage\n\nReally simple. Simply include the module and pass it a URL to some JSON. It will then return a promise that returns the config as an object.\n\n\n### Basic:\n\n```js\nconst configCache = require('http-config-cache');\nconst configUrl = 'https://raw.githubusercontent.com/Restocks/http-config-cache/master/static/test.json';\n\nconfigCache(configUrl).then((data) => {\n  console.log(data);\n}).catch((err) => {\n  console.log(err);\n});\n```\n\n### While specifying a cache expiry:\n\nBy default all objects expire every 10 minutes before they're fetched again. You can change that by passing a `time` variable to the function. `time` is a number in milliseconds.\n\n```js\n// 5 second expiry\nconfigCache(configUrl, 5000).then((data) => {\n  console.log(data);\n}).catch((err) => {\n  console.log(err);\n});\n```\n\n### While forcing a network request\n\nThere's also another option to force a network request and ignore the cache entirely. Here's an example of doing that while respecting the standard cache interval.\n\n```js\nconfigCache(configUrl, null, true).then((data) => {\n  console.log(data);\n}).catch((err) => {\n  console.log(err);\n});\n```\n\n## Development scripts\n\nWe follow the [airbnb JS style guide](https://github.com/airbnb/javascript). Tests will fail if you don't. While developing locally, be sure to run `npm run lint` to lint your code to this standard.\n\n`npm run test` also runs the tests for the repo.\n\n## License\n\nMIT (c) Restocks, Inc 2016.\n","created":"2016-10-26T19:23:55.701Z","modified":"2016-10-31T23:12:12.196Z","lastPublisher":{"name":"lukemiles","email":"luke@lukemil.es"},"owners":[{"name":"lukemiles","email":"luke@lukemil.es"}],"other":{"_attachments":{},"_from":".","_id":"http-config-cache","_nodeVersion":"6.9.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/http-config-cache-1.0.2.tgz_1477955531972_0.9324746078345925"},"_npmUser":{"name":"lukemiles","email":"luke@lukemil.es"},"_npmVersion":"3.10.8","_rev":"3-053f41a370e7acf62502d6096ee48f90","_shasum":"afbd4482cef159151ba50cd87369c2510b8888b3","author":{"name":"Restocks, Inc."},"bugs":{"url":"https://github.com/Restocks/http-config-cache/issues"},"directories":{},"dist-tags":{"latest":"1.0.2"},"dist":{"shasum":"afbd4482cef159151ba50cd87369c2510b8888b3","tarball":"http://registry.npmjs.org/http-config-cache/-/http-config-cache-1.0.2.tgz"},"maintainers":[{"name":"lukemiles","email":"luke@lukemil.es"}],"readmeFilename":"README.md","time":{"modified":"2016-10-31T23:12:12.196Z","created":"2016-10-26T19:23:55.701Z","1.0.0":"2016-10-26T19:23:55.701Z","1.0.1":"2016-10-26T19:31:45.390Z","1.0.2":"2016-10-31T23:12:12.196Z"}}}