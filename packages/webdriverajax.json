{"name":"webdriverajax","version":"2.0.0","description":"Capture and assert HTTP ajax calls in webdriver.io ðŸ•¸","main":"index.js","scripts":{"test":"wdio"},"repository":"https://github.com/chmanie/webdriverajax","keywords":["selenium","webdriver","webdriverio","webdriverjs","ajax","http","test","testing"],"license":"MIT","homepage":"https://github.com/chmanie/webdriverajax#readme","devDependencies":{"eslint":"^3.19.0","mocha":"^3.2.0","node-static":"^0.7.9","object-assign":"^4.1.1","selenium-standalone":"^6.2.0","wdio-mocha-framework":"^0.5.9","wdio-sauce-service":"^0.3.1","webdriverio":"^4.6.2"},"gitHead":"d4c0c2ad0ad19c8656610f163e6b68cabbcdb9d3","versions":[{"number":"1.0.0","date":"2015-10-31T22:52:07.934Z"},{"number":"1.0.1","date":"2015-10-31T23:08:41.819Z"},{"number":"1.0.2","date":"2015-10-31T23:18:17.706Z"},{"number":"1.0.3","date":"2016-01-27T08:33:13.815Z"},{"number":"1.1.0","date":"2016-02-05T09:32:32.386Z"},{"number":"1.1.1","date":"2017-04-17T18:52:32.167Z"},{"number":"2.0.0","date":"2017-04-17T23:09:01.388Z"}],"readme":"# webdriverajax\n\n[![Build Status](https://travis-ci.org/chmanie/webdriverajax.svg?branch=master)](https://travis-ci.org/chmanie/webdriverajax) [![Join the chat at https://gitter.im/chmanie/webdriverajax](https://badges.gitter.im/chmanie/webdriverajax.svg)](https://gitter.im/chmanie/webdriverajax?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\nCapture and assert HTTP ajax calls in [webdriver.io](http://webdriver.io/)\n\nThis is a plugin for [webdriver.io](http://webdriver.io/). If you don't know it yet, check it out, it's pretty cool.\n\nAlthough selenium and webdriver are used for e2e and especially UI testing, you might want to assess HTTP requests done by your client code (e.g. when you don't have immediate UI feedback, like in metrics or tracking calls). With webdriverajax you can intercept ajax HTTP calls initiated by some user action (e.g. a button press, etc.) and make assertions about the request and corresponding resposes later.\n\nThere's one catch though: you can't intercept HTTP calls that are initiated on page load (like in most SPAs), as it requires some setup work that can only be done after the page is loaded (due to limitations in selenium). **That means you can just capture requests that were initiated inside a test.** If you're fine with that, this plugin might be for you, so read on.\n\n## Prerequisites\n\n* webdriver.io **v4.x**.\n\n**Heads up! If you're still using webdriver.io v3, please use the v1.x branch of this plugin!**\n\n## Installation\n\nUse [yarn](https://yarnpkg.com):\n\n```\nyarn add webdriverajax -D\n```\n\n[npm](https://npmjs.org) works as well:\n\n```\nnpm install webdriverajax -D\n```\n\n## Usage\n\n#### Using with `wdio`\n\nIf you use the integrated [test-runner](http://webdriver.io/guide/testrunner/gettingstarted.html) (`wdio`) it's as easy as adding webdriverajax to your `wdio.conf.js`:\n\n```javascript\nplugins: {\n  webdriverajax: {}\n}\n```\n\nand you're all set.\n\nOnce initialized, some related functions are added to your browser command chain (see [API](#api)).\n\n## Quickstart\n\nExample usage:\n\n```javascript\nbrowser.url('http://foo.bar');\nbrowser.setupInterceptor(); // capture ajax calls\nbrowser.expectRequest('GET', '/api/foo', 200); // expect GET request to /api/foo with 200 statusCode\nbrowser.expectRequest('POST', '/api/foo', 400); // expect POST request to /api/foo with 400 statusCode\nbrowser.expectRequest('GET', /\\/api\\/foo/, 200); // can validate a URL with regex, too\nbrowser.click('#button'); // button that initiates ajax request\nbrowser.pause(1000); // maybe wait a bit until request is finished\nbrowser.assertRequests(); // validate the requests\n```\n\nGet details about requests:\n\n```javascript\nbrowser.url('http://foo.bar')\nbrowser.setupInterceptor();\nbrowser.click('#button')\nbrowser.pause(1000);\n\nvar request = browser.getRequest(0);\nassert.equal(request.method, 'GET');\nassert.equal(request.response.headers['content-length'], '42');\n```\n\n## Supported browsers\n\nIt should work with somewhat newer versions of all browsers.\n\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/webdriverajax.svg)](https://saucelabs.com/u/webdriverajax)\n\n## API\n\n### browser.setupInterceptor()\n\nCaptures ajax calls in the browser. You always have to call the setup function in order to assess requests later.\n\n### browser.expectRequest(method, url, statusCode)\n\nMake expectations about the ajax requests that are going to be initiated during the test. Can (and should) be chained. The order of the expectations should map to the order of the requests being made.\n\n* `method` (`String`): http method that is expected. Can be anything `xhr.open()` accepts as first argument.\n* `url` (`String`|`RegExp`): exact URL that is called in the request as a string or RegExp to match\n* `statusCode` (`Number`): expected status code of the response\n\n### browser.assertRequests()\n\nCall this method when all expected ajax requests are finished. It compares the expectations to the actual requests made and asserts the following:\n\n- Count of the requests that were made\n- The order of the requests\n- The method, the URL and the statusCode should match for every request made\n\n### browser.getRequest(index)\n\nTo make more sophisticated assertions about a specific request you can get details for a specific request after it is finished. You have to provide the index of the request you want to access in the order the requests were initiated (starting with 0).\n\n* `index` (`Number`): number of the request you want to access\n\n**Returns** `request` object:\n\n* `request.url`: requested URL\n* `request.method`: used HTTP method\n* `request.response.headers`: response http headers as JS object\n* `request.response.body`: response body (will be parsed as JSON if possible)\n* `request.response.statusCode`: response status code\n\n### browser.getRequests()\n\nGet all captured requests as an array.\n\n**Returns** array of `request` objects.\n\n## Running the tests\n\nA compatible browser (Firefox, Chrome) has to be installed. Also install selenium standalone via:\n\n```shell\nnode_modules/.bin/selenium-standalone install\n```\n\nthen\n\n```shell\nyarn test # npm test works as well :)\n```\n\n## Contributing\n\nI'm happy for every contribution. Just open an issue or directly file a PR.\n\n## License\n\nMIT\n","created":"2015-10-31T22:52:07.934Z","modified":"2017-04-17T23:09:01.388Z","lastPublisher":{"name":"chmanie","email":"chmanie@gmail.com"},"owners":[{"name":"chmanie","email":"chmanie@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"webdriverajax","_nodeVersion":"6.9.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/webdriverajax-2.0.0.tgz_1492470539512_0.49111080868169665"},"_npmUser":{"name":"chmanie","email":"chmanie@gmail.com"},"_npmVersion":"3.10.9","_rev":"3-2f454fc5958e9594876e8b6c8b62efbd","_shasum":"1e27c9fb4c2ae73eab074f2ab774ba161ce7070c","author":{"name":"Christian Maniewski","email":"chmanie@fastmail.com"},"bugs":{"url":"https://github.com/chmanie/webdriverajax/issues"},"directories":{},"dist-tags":{"latest":"2.0.0"},"dist":{"shasum":"1e27c9fb4c2ae73eab074f2ab774ba161ce7070c","tarball":"https://registry.npmjs.org/webdriverajax/-/webdriverajax-2.0.0.tgz"},"maintainers":[{"name":"chmanie","email":"chmanie@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-17T23:09:01.388Z","created":"2015-10-31T22:52:07.934Z","1.0.0":"2015-10-31T22:52:07.934Z","1.0.1":"2015-10-31T23:08:41.819Z","1.0.2":"2015-10-31T23:18:17.706Z","1.0.3":"2016-01-27T08:33:13.815Z","1.1.0":"2016-02-05T09:32:32.386Z","1.1.1":"2017-04-17T18:52:32.167Z","2.0.0":"2017-04-17T23:09:01.388Z"}}}