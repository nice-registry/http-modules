{"name":"grenache-nodejs-http","version":"0.1.5","private":false,"description":"Granache Node.js HTTP implementation","keywords":["grenache","kademlia","nodejs","micro-services"],"dependencies":{"async":"~2.4.0","debug":"~2.2.0","grenache-nodejs-base":"^0.2.0","lodash":"~4.17.4","uuid":"~3.0.1"},"main":"index.js","devDependencies":{"mocha":"^3.4.2","standard":"^10.0.2"},"scripts":{"test":"npm run lint && npm run unit","lint":"standard","unit":"mocha -R spec"},"license":"MIT","repository":"https://github.com/bitfinexcom/grenache-nodejs-http","gitHead":"fc5739381164806ca9d49961076f62e971968a78","homepage":"https://github.com/bitfinexcom/grenache-nodejs-http#readme","versions":[{"number":"0.0.6","date":"2017-01-30T15:40:53.219Z"},{"number":"0.0.7","date":"2017-01-30T15:44:34.564Z"},{"number":"0.0.8","date":"2017-01-31T13:10:09.100Z"},{"number":"0.0.9","date":"2017-02-01T19:48:11.276Z"},{"number":"0.0.10","date":"2017-04-18T21:57:44.636Z"},{"number":"0.0.11","date":"2017-04-19T14:54:40.218Z"},{"number":"0.0.12","date":"2017-04-19T14:56:33.514Z"},{"number":"0.0.14","date":"2017-04-20T14:38:46.584Z"},{"number":"0.0.15","date":"2017-04-22T07:46:25.188Z"},{"number":"0.0.16","date":"2017-04-22T07:59:19.189Z"},{"number":"0.0.17","date":"2017-04-24T10:55:42.726Z"},{"number":"0.0.18","date":"2017-04-25T12:25:57.968Z"},{"number":"0.0.19","date":"2017-04-27T13:49:49.615Z"},{"number":"0.0.20","date":"2017-04-29T16:26:27.910Z"},{"number":"0.0.23","date":"2017-05-02T20:47:56.362Z"},{"number":"0.0.24","date":"2017-05-05T13:46:11.415Z"},{"number":"0.0.26","date":"2017-05-09T20:15:58.923Z"},{"number":"0.0.27","date":"2017-05-11T17:54:16.849Z"},{"number":"0.0.28","date":"2017-05-11T18:49:46.742Z"},{"number":"0.0.29","date":"2017-05-12T16:03:21.082Z"},{"number":"0.0.30","date":"2017-05-12T16:59:24.653Z"},{"number":"0.0.31","date":"2017-05-14T09:39:11.129Z"},{"number":"0.1.0","date":"2017-05-15T19:46:29.602Z"},{"number":"0.1.1","date":"2017-05-15T19:57:17.188Z"},{"number":"0.1.2","date":"2017-05-18T19:50:35.878Z"},{"number":"0.1.3","date":"2017-05-19T13:17:11.845Z"},{"number":"0.1.4","date":"2017-05-29T18:47:30.570Z"},{"number":"0.1.5","date":"2017-06-13T10:55:29.752Z"}],"readme":"# [Grenache](https://github.com/bitfinexcom/grenache) Node.JS HTTP implementation\n\n<img src=\"logo.png\" width=\"15%\" />\n\nGrenache is a micro-framework for connecting microservices. Its simple and optimized for performance.\n\nInternally, Grenache uses Distributed Hash Tables (DHT, known from Bittorrent) for Peer to Peer connections. You can find more details how Grenche internally works at the [Main Project Homepage](https://github.com/bitfinexcom/grenache)\n\n - [Setup](#setup)\n - [Examples](#examples)\n - [API](#api)\n\n## Setup\n\n### Install\n```\nnpm install --save grenache-nodejs-ws\n```\n\n### Other Requirements\n\nInstall `Grenache Grape`: https://github.com/bitfinexcom/grenache-grape:\n\n```bash\nnpm i -g grenache-grape\n```\n\n```\n// Start 2 Grapes\ngrape --dp 20001 --aph 30001 --bn '127.0.0.1:20002'\ngrape --dp 20002 --aph 40001 --bn '127.0.0.1:20001'\n```\n\n### Examples\n\n#### RPC Server / Client\n\nThis RPC Server example announces a service called `rpc_test`\non the overlay network. When a request from a client is received,\nit replies with `world`. It receives the payload `hello` from the\nclient.\n\nThe client sends `hello` and receives `world` from the server.\n\nInternally the DHT is asked for the IP of the server and then the\nrequest is done as Peer-to-Peer request via websockets.\n\n**Grape:**\n\n```bash\ngrape --dp 20001 --aph 30002 --bn '127.0.0.1:20002'\ngrape --dp 20002 --aph 40002 --bn '127.0.0.1:20001'\n```\n\n**Server:**\n\n```js\nconst link = new Link({\n  grape: 'http://127.0.0.1:30001'\n})\nlink.start()\n\nconst peer = new PeerRPCServer(link, {})\npeer.init()\n\nconst service = peer.transport('server')\nservice.listen(_.random(1000) + 1024)\n\nsetInterval(function () {\n  link.announce('rpc_test', service.port, {})\n}, 1000)\n\nservice.on('request', (rid, key, payload, handler) => {\n  console.log(payload) // hello\n  handler.reply(null, 'world')\n})\n```\n\n**Client:**\n\n```js\nconst link = new Link({\n  grape: 'http://127.0.0.1:30001'\n})\nlink.start()\n\nconst peer = new PeerRPCClient(link, {})\npeer.init()\n\npeer.request('rpc_test', 'hello', { timeout: 10000 }, (err, data) => {\n  if (err) {\n    console.error(err)\n    process.exit(-1)\n  }\n  console.log(data) // world\n})\n```\n\n[Code Server](https://github.com/bitfinexcom/grenache-nodejs-http/tree/master/examples/rpc_server.js)\n[Code Client](https://github.com/bitfinexcom/grenache-nodejs-http/tree/master/examples/rpc_client.js)\n\n## API\n\n### Class: Link\n\n#### new Link(options)\n\n - `options` &lt;Object&gt; Options for the link\n    - `grape` &lt;String&gt; Address of the Grenache Grape instance. Communication is done via HTTP.\n    - `requestTimeout` &lt;Number&gt; Default timeout for requests to Grape,\n    - `pingTimeout` &lt;Number&gt; Ping connection timeout to Grape (triggers reconnect attempt),\n    - `lruMaxSizeLookup` &lt;Number&gt; Maximum size of the cache,\n        checked by applying the length function to all values\n        in the cache\n    - `lruMaxAgeLookup` &lt;Number&gt; Maximum cache age in ms.\n\n#### link.start()\n\nSets up a connection to the DHT. Emits a `connect` event on\nsuccessful connection.\n\n#### link.stop()\n\nStops the connection to the DHT. Emits a `disconnect` event on\nsuccessful disconnection.\n\n#### link.announce(name)\n\n  - name &lt;String&gt; Name of the service, used to find the service\n    from other peers\n\nUsed to announce a service, e.g. a [RPC Server](#class-peerrpcserver).\n\n#### link.put(options)\n\n  - `options`\n    - `v`: &lt;String&gt; value to store\n  - `callback` &lt;function&gt;\n\nPuts a value into the DHT.\n[Example](https://github.com/bitfinexcom/grenache-nodejs-http/tree/master/examples/put_get.js).\n\n#### link.get(hash, callback)\n\n  - `hash` &lt;String&gt; Hash used for lookup\n  - `callback` &lt;function&gt;\n\nRetrieves a stored value from the DHT via a `hash` &lt;String&gt;.\nCallback returns `err` &lt;Object&gt; and data &lt;Object&gt;.\n[Example](https://github.com/bitfinexcom/grenache-nodejs-http/tree/master/examples/put_get.js).\n\n\n### Class: PeerRPCServer\n\n#### Event: 'request'\n\nEmitted when a request from a RPC client is received.\n\n  - `rid` unique request id\n  - `key` name of the service\n  - `payload` Payload sent by client\n  - `handler` Handler object, used to reply to a client.\n\n```js\nservice.on('request', (rid, key, payload, handler) => {\n  handler.reply(null, 'world')\n})\n```\n\n#### new PeerRPCServer(link, [options])\n\n - `link` &lt;Object&gt; Instance of a [Link Class](#new-linkoptions)\n - `options` &lt;Object&gt;\n   - secure: &lt;Object&gt; TLS options\n     - `key` &lt;Buffer&gt;\n     - `cert` &lt;Buffer&gt;\n     - `ca` &lt;Buffer&gt;\n     - `requestCert` &lt;Boolean&gt;\n     - `rejectUnauthorized` &lt;Boolean&gt;\n\nCreates a new instance of a `PeerRPCServer`, which connects to the DHT\nusing the passed `link`.\n\n#### peer.init()\n\nSets the peer active. Must get called before we get a transport\nto set up a server.\n\n#### peer.transport('server')\n\nMust get called after the peer is active. Sets peer into server-\nmode.\n\n#### peer.listen(port)\n\nLets the `PeerRPCServer` listen on the desired `port`. The port is\nstored in the DHT.\n\n#### peer.port\n\nPort of the server (set by `listen(port)`).\n\n#### Example\n\nThis RPC Server example announces a service called `rpc_test`\non the overlay network. When a request from a client is received,\nit replies with `world`. It receives the payload `hello` from the\nclient.\n\nThe client sends `hello` and receives `world` from the server.\n\nInternally the DHT is asked for the IP of the server and then the\nrequest is done as Peer-to-Peer request via websockets.\n\n**Server:**\n\n```js\nconst link = new Link({\n  grape: 'http://127.0.0.1:30001'\n})\nlink.start()\n\nconst peer = new PeerRPCServer(link, {})\npeer.init()\n\nconst service = peer.transport('server')\nservice.listen(_.random(1000) + 1024)\n\nsetInterval(function () {\n  link.announce('rpc_test', service.port, {})\n}, 1000)\n\nservice.on('request', (rid, key, payload, handler) => {\n  console.log(payload) // hello\n  handler.reply(null, 'world')\n})\n```\n\n**Client:**\n\n```js\nconst link = new Link({\n  grape: 'http://127.0.0.1:30001'\n})\nlink.start()\n\nconst peer = new PeerRPCClient(link, {})\npeer.init()\n\npeer.request('rpc_test', 'hello', { timeout: 10000 }, (err, data) => {\n  if (err) {\n    console.error(err)\n    process.exit(-1)\n  }\n  console.log(data) // world\n})\n```\n\n[Server](https://github.com/bitfinexcom/grenache-nodejs-http/tree/master/examples/rpc_server.js)\n[Client](https://github.com/bitfinexcom/grenache-nodejs-http/tree/master/examples/rpc_client.js)\n\n\n### Class: PeerRPCClient\n\n#### new PeerRPCClient(link, [options])\n\n - `link` &lt;Object&gt; Instance of a [Link Class](#new-linkoptions)\n - `options` &lt;Object&gt;\n   - `maxActiveKeyDests` &lt;Number&gt;\n   - `maxActiveDestTransports` &lt;Number&gt;\n   - `secure`: &lt;Object&gt; TLS options\n     - `key` &lt;Buffer&gt;\n     - `cert` &lt;Buffer&gt;\n     - `ca` &lt;Buffer&gt;\n     - `rejectUnauthorized` &lt;Boolean&gt;\n\n\nCreates a new instance of a `PeerRPCClient`, which connects to the DHT\nusing the passed `link`.\n\nA PeerRPCClient can communicate with multiple Servers and map work items over them.\nWith `maxActiveKeyDests` you can limit the maximum amount of destinations.\nAdditionally, you can limit the amount of transports with `maxActiveDestTransports`.\n\n#### peer.init()\n\nSets the peer active. Must get called before we start to make requests.\n\n#### peer.map(name, payload, [options], callback)\n  - `name` &lt;String&gt; Name of the service to address\n  - `payload` &lt;String&gt; Payload to send\n  - `options` &lt;Object&gt; Options for the request\n    - `timeout` &lt;Number&gt; timeout in ms\n    - `limit` &lt;Number&gt; maximum requests per available worker\n  - `callback` &lt;function&gt;\n\nMaps a number of requests over the amount of registered workers / PeerRPCServers.\n[Example](https://github.com/bitfinexcom/grenache-nodejs-http/tree/master/examples/rpc_client_map.js).\n\n\n#### peer.request(name, payload, [options], callback)\n  - `name` &lt;String&gt; Name of the service to address\n  - `payload` &lt;String&gt; Payload to send\n  - `options` &lt;Object&gt; Options for the request\n    - `timeout` &lt;Number&gt; timeout in ms\n  - `callback` &lt;function&gt;\n\nSends a single request to a RPC server/worker.\n[Example](https://github.com/bitfinexcom/grenache-nodejs-http/tree/master/examples/rpc_client.js).\n","created":"2017-01-30T15:40:53.219Z","modified":"2017-06-13T10:55:29.752Z","lastPublisher":{"name":"bitfinex","email":"paolo@bitfinex.com"},"owners":[{"name":"bitfinex","email":"paolo@bitfinex.com"}],"other":{"_attachments":{},"_from":".","_id":"grenache-nodejs-http","_nodeVersion":"7.10.0","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/grenache-nodejs-http-0.1.5.tgz_1497351328575_0.48944433545693755"},"_npmUser":{"name":"bitfinex","email":"paolo@bitfinex.com"},"_npmVersion":"4.2.0","_rev":"28-48ca90683e6a6ccfca8cb10fa2fb3307","_shasum":"4d14ff2731543c3d2f743da93d0b6348b5f8e2dc","author":{"name":"prdn","email":"paolo@bitfinex.com","url":"https://bitfinex.com/"},"bugs":{"url":"https://github.com/bitfinexcom/grenache-nodejs-http/issues"},"directories":{},"dist-tags":{"latest":"0.1.5"},"dist":{"shasum":"4d14ff2731543c3d2f743da93d0b6348b5f8e2dc","tarball":"https://registry.npmjs.org/grenache-nodejs-http/-/grenache-nodejs-http-0.1.5.tgz"},"maintainers":[{"name":"bitfinex","email":"paolo@bitfinex.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-13T10:55:29.752Z","created":"2017-01-30T15:40:53.219Z","0.0.6":"2017-01-30T15:40:53.219Z","0.0.7":"2017-01-30T15:44:34.564Z","0.0.8":"2017-01-31T13:10:09.100Z","0.0.9":"2017-02-01T19:48:11.276Z","0.0.10":"2017-04-18T21:57:44.636Z","0.0.11":"2017-04-19T14:54:40.218Z","0.0.12":"2017-04-19T14:56:33.514Z","0.0.14":"2017-04-20T14:38:46.584Z","0.0.15":"2017-04-22T07:46:25.188Z","0.0.16":"2017-04-22T07:59:19.189Z","0.0.17":"2017-04-24T10:55:42.726Z","0.0.18":"2017-04-25T12:25:57.968Z","0.0.19":"2017-04-27T13:49:49.615Z","0.0.20":"2017-04-29T16:26:27.910Z","0.0.23":"2017-05-02T20:47:56.362Z","0.0.24":"2017-05-05T13:46:11.415Z","0.0.26":"2017-05-09T20:15:58.923Z","0.0.27":"2017-05-11T17:54:16.849Z","0.0.28":"2017-05-11T18:49:46.742Z","0.0.29":"2017-05-12T16:03:21.082Z","0.0.30":"2017-05-12T16:59:24.653Z","0.0.31":"2017-05-14T09:39:11.129Z","0.1.0":"2017-05-15T19:46:29.602Z","0.1.1":"2017-05-15T19:57:17.188Z","0.1.2":"2017-05-18T19:50:35.878Z","0.1.3":"2017-05-19T13:17:11.845Z","0.1.4":"2017-05-29T18:47:30.570Z","0.1.5":"2017-06-13T10:55:29.752Z"}}}