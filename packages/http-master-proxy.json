{"name":"http-master-proxy","version":"0.2.0","description":"use etcd to proxy mutable HTTP traffic to an elected master in a cluster","main":"index.js","scripts":{"test":"node test.js"},"repository":"https://github.com/binocarlos/http-master-proxy","keywords":["etcd","cluster","http","proxy","master","leader","election"],"license":"MIT","homepage":"https://github.com/binocarlos/http-master-proxy","devDependencies":{"async":"^0.9.0","concat-stream":"^1.4.6","etcdjs":"^1.1.1","locked":"^2.1.0","tape":"^2.14.0"},"dependencies":{"hyperprox":"^1.0.0"},"gitHead":"05c519506cdac64ab7e9e6ffc7c89e867b2c8615","versions":[{"number":"0.1.1","date":"2014-08-05T23:04:37.573Z"},{"number":"0.1.2","date":"2014-08-05T23:08:17.486Z"},{"number":"0.1.3","date":"2014-08-06T14:17:27.292Z"},{"number":"0.2.0","date":"2014-08-06T21:48:20.254Z"}],"readme":"http-master-proxy\n-----------------\n\nproxy mutable HTTP traffic to an elected master\n\nuseful if you have a HTTP api where writes must be sent to an elected master but reads can be served from any node in the cluster\n\n## install\n\n```\n$ npm install http-master-proxy\n```\n\n## usage\nCreate a [locked](https://github.com/binocarlos/locked) node so we have a consensus on the leader\n\nThen make a function which will proxy POST,PUT and DELETE requests onto the elected master\n\n```js\nvar http = require(\"http\")\nvar locked = require(\"locked\")\nvar masterProxy = require('http-master-proxy')\n\nvar serverid = process.env.NODEID\nvar serveraddress = '127.0.0.1:' + process.env.NODEPORT\n\n// create a locker passing etcd connection details\nvar locker = locked('127.0.0.1:4001,127.0.0.1:4002')\n\n// create a lock with a value that is the address for our HTTP server\nvar node = locker({\n\tid:serverid,\n\tpath:'/myservice',\n\tvalue:serveraddress,\n\tttl:10\n})\n\nvar proxy = masterProxy(function(){\n\n\t// return if the current server is the leader\n\treturn node.isSelected()\n\n},function(){\n\n\t// return the address of the current leader\n\treturn node.value()\n\t\n})\n\nvar server = http.createServer(proxy(function(req, res){\n\t\n\tif(req.url=='/api/v1/leader'){\n\t\tres.end(node.id() + \"\\n\")\n\t\treturn\n\t}\n\n\tif(req.method=='GET'){\n\t\tres.end('get ' + serverid + \"\\n\")\n\t}\n\telse{\n\t\tres.end('post ' + serverid + \"\\n\")\n\t}\n}))\n\nnode.start()\nserver.listen(process.env.NODEPORT)\n```\n\nIf we ran 3 copies of the server above:\n\n```bash\n$ NODEID=node1 NODEPORT=8080 node example.js\n$ NODEID=node2 NODEPORT=8081 node example.js\n$ NODEID=node3 NODEPORT=8082 node example.js\n```\n\nWe can see that the server we hit will handle the request:\n\n```bash\n$ curl -L http://127.0.0.1:8080/api/v1/blog\nget node1\n$ curl -L http://127.0.0.1:8081/api/v1/blog\nget node2\n$ curl -L http://127.0.0.1:8082/api/v1/blog\nget node3\n```\n\nLets see which server is currently elected as master:\n\n```bash\n$ curl -L http://127.0.0.1:8082/api/v1/leader\nnode2\n```\n\nThen we should expect node2 to handle all POST requests across the whole cluster:\n\n```bash\n$ curl -L http://127.0.0.1:8080/api/v1/blog -XPOST -d value=bar\npost node2\n$ curl -L http://127.0.0.1:8081/api/v1/blog -XPOST -d value=bar\npost node2\n$ curl -L http://127.0.0.1:8082/api/v1/blog -XPOST -d value=bar\npost node2\n```\n\n## api\n\n### `var proxy = electedhttp(leaderfn, addressfn)`\n\nCreate a proxy function that will proxy POST, PUT and DELETE requests\n\n`leaderfn` is a function that returns a boolean as to whether this node is the current master\n\n`addressfn` is a function that returns the address of the current master\n\n### `var handler = proxy(function handle(req, res){})`\n\nReturn a handler function that will be proxied to the master for POST,PUT and DELETE requests\n\n```js\nvar server = http.createServer(proxy(function(req, res){\n\t\n\t// if not GET request then this will be the master\n\t\n}))\n```\n\n## license\n\nMIT","created":"2014-08-05T23:04:37.573Z","modified":"2014-08-06T21:48:20.254Z","lastPublisher":{"name":"binocarlos","email":"kaiyadavenport@gmail.com"},"owners":[{"name":"binocarlos","email":"kaiyadavenport@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-master-proxy","_npmUser":{"name":"binocarlos","email":"kaiyadavenport@gmail.com"},"_npmVersion":"1.4.14","_rev":"1-d1cbfb4c7b389271f4dbad874c1224b9","_shasum":"5120e259d42da0cefb4f379e4c2dc858966cbd85","author":{"name":"Kai Davenport"},"bugs":{"url":"https://github.com/binocarlos/http-master-proxy/issues"},"directories":{},"dist-tags":{"latest":"0.2.0"},"dist":{"shasum":"5120e259d42da0cefb4f379e4c2dc858966cbd85","tarball":"http://registry.npmjs.org/http-master-proxy/-/http-master-proxy-0.2.0.tgz"},"maintainers":[{"name":"binocarlos","email":"kaiyadavenport@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-08-06T21:48:20.254Z","created":"2014-08-05T23:04:37.573Z","0.1.1":"2014-08-05T23:04:37.573Z","0.1.2":"2014-08-05T23:08:17.486Z","0.1.3":"2014-08-06T14:17:27.292Z","0.2.0":"2014-08-06T21:48:20.254Z"}}}