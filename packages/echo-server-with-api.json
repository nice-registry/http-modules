{"name":"echo-server-with-api","version":"1.0.3","description":"a simple http echo server","main":"index.js","dependencies":{"body-parser":"^1.15.2","cookie":"^0.3.1","deasync":"^0.1.8","express":"^4.14.0"},"devDependencies":{"@types/chai":"^3.4.34","@types/node":"^6.0.45","@types/should":"^8.1.30","chai":"^3.5.0","mocha":"^3.1.2","request":"^2.75.0"},"scripts":{"test":"mocha test/**/*.spec.js","watch":"mocha -w test/**/*.spec.js"},"license":"MIT","gitHead":"63dd8e4ae94273eded8c843329c9a50375d00afd","versions":[{"number":"1.0.0","date":"2016-10-22T14:36:58.656Z"},{"number":"1.0.1","date":"2016-10-22T14:55:58.036Z"},{"number":"1.0.2","date":"2016-10-22T15:28:11.369Z"},{"number":"1.0.3","date":"2016-10-22T22:52:46.309Z"}],"readme":"[![Build Status](https://travis-ci.org/ujc/echo-server-with-api.svg?branch=master)](https://travis-ci.org/ujc/echo-server-with-api)\n\n# echo-server-with-api\na simple http echo server that can be started and stopped programmatically through an API to help testing http clients\n\n* all http requests are answered with a `200` OK status code, and a JSON representation of the request data as the body of the request (echo)\n\n* add `?status=xxx` to the request url to have the server respond with `xxx` as the http-status-code (you still get the echo as the response body)\n\n* add `?timeout` to tell the server to time-out your request (useful for testing how your http client handles server timeouts)\n\n* unlike node's built-in http server, this echo server also closes **all** active connections (Keep-Alive) when calling `.stop()`, so the server really stops - instead of just \"stops accepting new connections while keeping active connections alive\"\n\n* meant as an easy-to-use test server for http clients, with **Mocha** in mind (start \\ stop the server from within mocha)\n\n* supports query-string, cookies, form \\ JSON payload, and more\n\n* also provides a synchronous start \\ stop API\n\n\n\n---\n## Install\n```\nnpm install echo-server\n```\n\n\n---\n## Usage\n```javascript\nconst echoServer = require('echo-server');\n\n// before your tests\nechoServer.start(() => {\n    console.log('serving echo @ ' + echoServer.location);\n});\n\n//\n// test your http client by sending requests\n// to the echo-server and running assertions on\n// the resulting \"echo\" to make sure your client\n// sends the expected HTTP requests, and properly\n// handles the various response codes, timeouts, and payloads\n//\n\n\n// after your tests you can gracefully close the server\nechoServer.stop((err) => {\n    if (err) {\n        console.log('boo..'); // this should never happen\n    }\n\n    console.log('echo server stopped');\n});\n```\n\n\n---\n## Example of an Echo-Response\n**POST** http://localhost:54606/foo/bar?my=query\n**PAYLOAD** qwe=asd\n```javascript\n{\n    clientIP: '127.0.0.1',\n    url     : '/foo/bar',\n    method  : 'post',\n    protocol: 'http',\n\n    query   : {\n        my: 'query'\n    },\n\n    cookies : {},\n\n    headers : {\n        'content-type'  : 'application/x-www-form-urlencoded',\n        'content-length': '7',\n        host            : 'localhost:54606',\n        connection      : 'close'\n    },\n\n    body: {\n        qwe: 'asd' }\n    }\n```\n\n\n\n---\n## API\n`start([callback])`\n\nstarts the echo server. if a `callback` is used it will run once the server is up and running (listening for incoming requests)\n\n\n`startSync()`\n\nstarts the echo server **synchronously**.\nthis is just a convenience method if you need a sync API instead of using async patterns (callbacks \\ promises \\ other)\n\n`stop([callback])`\n\nstops the echo server. if a `callback` is used it will run once the server has fully stopped (all active connections were destroyed and new connections cannot be made)\n\n\n`stopSync()`\n\nlike `stop()`, just **synchronously**\n\n`location`\n\nthe url where the server can be reached. normally this is something like `http://localhost:1234`.\nwhen the server is not running, this is an empty string\n\n`isListening`\n\na boolean. `true` when the server is running. `false` otherwise\n\n\n---\n## Test\n```\nnpm run test\n```\n\n\n---\n## Related\n* [iisaacs/server-destroy](https://github.com/isaacs/server-destroy) --> original work for really closing the http server\n\n\n","starsCount":1,"created":"2016-10-22T14:36:58.656Z","modified":"2016-10-24T02:59:37.682Z","lastPublisher":{"name":"ujc","email":"uri@kungfoo.bar"},"owners":[{"name":"ujc","email":"uri@kungfoo.bar"}],"other":{"_attachments":{},"_from":".","_id":"echo-server-with-api","_nodeVersion":"6.8.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/echo-server-with-api-1.0.3.tgz_1477176765054_0.6555637468118221"},"_npmUser":{"name":"ujc","email":"uri@kungfoo.bar"},"_npmVersion":"3.10.8","_rev":"5-a34a9de3397d2d3527e6c94aaa5176d7","_shasum":"86d4ead20291a47fde2c6c91a71c416fe9eda0bd","author":{"name":"Uri Chandler","url":"https://blog.kungfoo.bar/"},"directories":{},"dist-tags":{"latest":"1.0.3"},"dist":{"shasum":"86d4ead20291a47fde2c6c91a71c416fe9eda0bd","tarball":"http://registry.npmjs.org/echo-server-with-api/-/echo-server-with-api-1.0.3.tgz"},"maintainers":[{"name":"ujc","email":"uri@kungfoo.bar"}],"readmeFilename":"README.md","time":{"modified":"2016-10-24T02:59:37.682Z","created":"2016-10-22T14:36:58.656Z","1.0.0":"2016-10-22T14:36:58.656Z","1.0.1":"2016-10-22T14:55:58.036Z","1.0.2":"2016-10-22T15:28:11.369Z","1.0.3":"2016-10-22T22:52:46.309Z"},"users":{"brianyang":true}}}