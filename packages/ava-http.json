{"name":"ava-http","version":"0.2.1","description":"Async HTTP request wrapper","license":"MIT","repository":"https://github.com/lukeed/ava-http","main":"dist/index.js","files":["dist/index.js"],"scripts":{"compile":"babel -d dist/ src/","major":"npm version major && npm publish","minor":"npm version minor && npm publish","patch":"npm version patch && npm publish","prepublish":"npm run compile && npm run test","postpublish":"git push origin master --follow-tags","test":"xo && ava"},"keywords":["test","runner","ava","concurrent","parallel","fast","assert","assertion","futuristic","promise","promises","generator","yield","async","await","function","browser","http"],"dependencies":{"object-assign":"^4.0.1","request-promise":"^2.0.0"},"devDependencies":{"ava":"^0.11.0","babel-plugin-module-alias":"1.1.1","babel-plugin-syntax-async-functions":"6.3.13","babel-plugin-transform-async-to-generator":"6.4.6","babel-plugin-transform-runtime":"6.4.3","babel-preset-es2015":"6.3.13","babel-runtime":"6.3.19","babel-cli":"6.4.5","micro":"^1.0.3","xo":"*"},"ava":{"files":["test/index.js"],"failFast":true,"verbose":true},"xo":{"ignores":["dist/index.js"]},"gitHead":"89438dbfe2b432f1417f0c2a90d0c10da0408980","homepage":"https://github.com/lukeed/ava-http#readme","versions":[{"number":"0.1.0","date":"2016-02-05T02:09:56.361Z"},{"number":"0.1.1","date":"2016-02-05T05:08:47.041Z"},{"number":"0.1.2","date":"2016-02-05T05:12:08.831Z"},{"number":"0.2.0","date":"2016-02-05T18:04:55.693Z"},{"number":"0.2.1","date":"2016-02-05T18:53:11.667Z"}],"readme":"# AVA-http\n> Async HTTP requests.\n\nAVA-http is a wrapper around the [Request-Promise](https://github.com/request/request-promise) library, making\nit simpler to initiate HTTP requests.\n\nIt was made for succint API testing within [AVA](https://github.com/sindresorhus/ava), but it can be used anywhere.\n\n## Installation\n```\nnpm install --save-dev ava-http\n```\n\n## Usage\n\nThe generic HTTP methods are included: [`get`, `post`, `put`, `delete`].\n\nEach of these, used within the context of an AVA test, will return a `Promise` that can be `await`ed, `yield`ed, or `then`/`catch`'d.\n\nErroneous responses will always return the *full* `Response` object and should be caught with `.catch()`.\n\nSuccessful responses will return the `payload` (aka, `response.body`) by default.\nIf you would also like the full `Response` object, exchange your `method` for `methodResponse`:\n\n* `http.get` ==> `http.getResponse`\n* `http.post` ==> `http.postResponse`\n* `http.put` ==> `http.putResponse`\n* `http.del` ==> `http.delResponse`\n\n## API\n### get(url[, options])\n\n> `url`: `string`\n\n> `options`: `object`\n\n**Returns:** `Promise`\n\nOn resolve success, returns `payload`. On error, returns full `Response` object.\n\n### getResponse(url[, options])\n\n> `url`: `string`\n\n> `options`: `object`\n\n**Returns:** `Promise`\n\nAlways returns full `Response` object.\n\n### post(url[, options])\n\n> `url`: `string`\n\n> `options`: `object`\n\n**Returns:** `Promise`\n\nOn resolve success, returns `payload`. On error, returns full `Response` object.\n\n### postResponse(url[, options])\n\n> `url`: `string`\n\n> `options`: `object`\n\n**Returns:** `Promise`\n\nAlways returns full `Response` object.\n\n### put(url[, options])\n\n> `url`: `string`\n\n> `options`: `object`\n\n**Returns:** `Promise`\n\nOn resolve success, returns `payload`. On error, returns full `Response` object.\n\n### putResponse(url[, options])\n\n> `url`: `string`\n\n> `options`: `object`\n\n**Returns:** `Promise`\n\nAlways returns full `Response` object.\n\n### del(url[, options])\n\n> `url`: `string`\n\n> `options`: `object`\n\n**Returns:** `Promise`\n\nOn resolve success, returns `payload`. On error, returns full `Response` object.\n\n### delResponse(url[, options])\n\n> `url`: `string`\n\n> `options`: `object`\n\n**Returns:** `Promise`\n\nAlways returns full `Response` object.\n\n## Options\n### form\n\n> Type: `object`\n\n> Default: `{}`\n\nAn object of `key:value` pairs of formdata that will be urlencoded before reaching the server.\n\nThe request's `headers` will automatically include `'content-type': 'application/x-www-form-urlencoded'`.\n\nThis simulates sending an HTML form via normal means.\n\n### body\n\n> Type: `object`\n\n> Default: `{}`\n\nThe payload data to be sent to the server. Leave `json` as `true` to automatically stringify as JSON.\n\n### headers\n\n> Type: `object`\n\n> Default: `{}`\n\nThe request headers to send.\n\n### params\n\n> Type: `object`\n\n> Default: `{}`\n\nAn alias of `qs`.\n\n### qs\n\n> Type: `object`\n\n> Default: `{}`\n\nThe query string to append to the URL. See [this example](#passing-query-string-parameters).\n\n### json\n\n> Type: `boolean`\n\n> Default: `true`\n\nWhether or not the response body should be parsed as JSON.\n\n### transform\n\n> Type: `function`\n\n> Default: `null`\n\nTransform the response into a custom value with which the promise is resolved. See [here](https://github.com/request/request-promise#the-transform-function) for info.\n\n\n## AVA\n\n### Setup\nYou must have AVA installed already.\n\n```js\nimport test from 'ava';\nimport http from 'ava-http';\n\ntest('foo should succeed', t => {\n\tconst res = await http.get('http://localhost/posts');\n\tt.true(typeof res === 'object'); // json object by default\n\tt.same(res, {expected: 'output'}); // deepEqual comparison\n});\n\ntest('bar should error', t => {\n\thttp.post('http://localhost/posts').catch(err => {\n\t\tt.is(err.statusCode, 400);\n\t\tt.same(err.response.body, {error: 'message'});\n\t});\n});\n```\n\n### Examples\n#### Thennables\n```js\ntest('thennable', async t => {\n\thttp.get('http://localhost').then(res => {\n\t\tt.same(res, {expected: 'output'});\n\t});\n});\n```\n\n#### Async Support\n```js\ntest('async/await', async t => {\n\tt.same(await http.get('http://localhost'), {expected: 'output'});\n});\n```\n\n#### Generator Support\n```js\ntest('generator/yield', function * (t) {\n\tt.same(yield http.get('http://localhost'), {expected: 'output'});\n});\n```\n\n#### Response Headers\nBy default, successful responses will only yield their payloads. If you need/want to test a status code, for example, this will suffice:\n\n```js\ntest('response headers', async t => {\n\tconst res = await http.getResponse('http://localhost');\n\tconsole.log('these are the headers: ', res.headers);\n\tt.is(res.statusCode, 200);\n});\n```\n\n#### Expecting Errors\n\nIn order to successfully expect and catch a Response Error, the test must be asserted witin the Promise's `.catch()`.\n\nFor more information, please check out Request-Promise's [excellent documentation on the Promise API](https://github.com/request/request-promise#api-in-detail).\n\n```js\ntest('404 error is thrown', async t => {\n\thttp.get('http://localhost').catch(err => t.is(err.statusCode, 404));\n});\n```\n\n#### Posting JSON\n```js\ntest('post json object', async t => {\n\tconst body = {some: 'data'};\n\tt.same(await http.post('http://localhost', {body}), {expected: 'output'});\n});\n\n// or, to also assert a statusCode...\ntest('post json object, assert status', async t => {\n\tconst body = {some: 'data'};\n\tconst res = await http.postResponse('http://localhost', {body});\n\tt.is(res.statusCode, 201);\n\tt.same(res.response.body, {expected: 'output'});\n});\n```\n\n#### Posting as a HTML Form\nAll data within the `form` object will be `urlencoded`, just as any normal `<form>` would!\n\n```js\ntest('post like a form', async t => {\n\tconst form = {some: 'data'}; // will be urlencoded\n\tt.same(await http.post('http://localhost', {form}), {expected: 'output'});\n});\n```\n\n#### Updating an Item\n```js\ntest('update an item', async t => {\n\tconst body = {some: 'data'};\n\tt.same(await http.put('http://localhost/items/2', {body}), {expected: 'output'});\n});\n```\n\n#### Deleting an Item\n```js\ntest('delete an item', async t => {\n\tconst res = await http.delResponse('http://localhost/items/2');\n\tt.is(res.statusCode, 200);\n});\n\n// expecting an error...\ntest('delete is unauthorized', async t => {\n\thttp.del('http://localhost/items/2').catch(err => t.is(err.statusCode, 401));\n});\n```\n\n#### Pass an Authorization Token (eg, JWT)\n```js\ntest('delete is authorized with token', async t => {\n\tconst headers = {\n        'Authorization': 'Bearer 1234567890'\n\t};\n\tt.same(await http.del('http://localhost/items/2', {headers}), {expected: 'output'});\n});\n```\n\n#### Passing Query String Parameters\n```js\ntest('get item with parameters', async t => {\n\tconst params = {\n\t\ttoken: 'xxxxx xxxxx' // -> uri + '?token=xxxxx%20xxxxx'\n\t};\n\tt.same(await http.get('http://localhost', {params}), {expected: 'output'});\n});\n```\n\n## TODOs\n- [ ] Define a complete Micro test server, with routing\n- [ ] Start-up test server on `test.before()`\n- [ ] Cleanup/Remove all `const url = await ...` within tests\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<img src=\"https://cdn.rawgit.com/sindresorhus/ava/fe1cea1ca3d2c8518c0cc39ec8be592beab90558/media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t<br>\n\t<br>\n</div>\n\n## License\nMIT Â© [Luke Edwards](https://lukeed.com) et [al](https://github.com/lukeed/ava-http/graphs/contributors)\n","created":"2016-02-05T02:09:56.361Z","modified":"2016-02-05T18:53:11.667Z","lastPublisher":{"name":"lukeed","email":"luke@lukeed.com"},"owners":[{"name":"lukeed","email":"luke@lukeed.com"}],"other":{"_attachments":{},"_from":".","_id":"ava-http","_nodeVersion":"4.2.6","_npmOperationalInternal":{"host":"packages-9-west.internal.npmjs.com","tmp":"tmp/ava-http-0.2.1.tgz_1454698391093_0.17910179332830012"},"_npmUser":{"name":"lukeed","email":"luke@lukeed.com"},"_npmVersion":"2.14.12","_rev":"1-a2851fda7d75bdbe4ee123ac21383bb0","_shasum":"f7b6a35e5a622d8d55cbb177aa46115886d86906","author":{"name":"Luke Edwards","email":"luke.edwards05@gmail.com","url":"https://lukeed.com"},"bugs":{"url":"https://github.com/lukeed/ava-http/issues"},"directories":{},"dist-tags":{"latest":"0.2.1"},"dist":{"shasum":"f7b6a35e5a622d8d55cbb177aa46115886d86906","tarball":"http://registry.npmjs.org/ava-http/-/ava-http-0.2.1.tgz"},"maintainers":[{"name":"lukeed","email":"luke@lukeed.com"}],"readmeFilename":"readme.md","time":{"modified":"2016-02-05T18:53:11.667Z","created":"2016-02-05T02:09:56.361Z","0.1.0":"2016-02-05T02:09:56.361Z","0.1.1":"2016-02-05T05:08:47.041Z","0.1.2":"2016-02-05T05:12:08.831Z","0.2.0":"2016-02-05T18:04:55.693Z","0.2.1":"2016-02-05T18:53:11.667Z"}}}