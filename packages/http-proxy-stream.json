{"name":"http-proxy-stream","version":"1.0.3","engines":{"node":">=6.1.0"},"description":"a proxy tool by request which damn convenient with stream pipe","main":"dist/index.js","files":["dist","lib","README.md"],"dependencies":{"content-type":"^1.0.2","mime-types":"~2.1.7","raw-body":"^2.2.0","request":"^2.74.0"},"devDependencies":{"babel":"^6.5.2","babel-cli":"^6.8.0","babel-preset-es2015":"^6.6.0","istanbul":"^0.4.3","mocha":"^2.4.5","nodemon":"^1.9.2"},"scripts":{"prepublish":"babel lib -d dist && TEST_DIR=dist npm run mocha","test":"nodemon --exec npm run mocha","mocha":"istanbul cover node_modules/.bin/_mocha --use_strict","debug-test":"npm run mocha -- debug"},"repository":"https://github.com/wenshin/proxy-request","keywords":["proxy","request","node proxy","node request","node stream pipe","pipe","stream"],"license":"MIT","homepage":"https://github.com/wenshin/http-proxy-stream#readme","gitHead":"3df5aa1f5cb58dc8a074ec66ca2d6ee526f5edcc","versions":[{"number":"1.0.0","date":"2017-02-06T08:53:41.149Z"},{"number":"1.0.1","date":"2017-02-07T07:40:53.293Z"},{"number":"1.0.2","date":"2017-02-08T05:46:15.593Z"},{"number":"1.0.3","date":"2017-02-17T02:58:04.502Z"}],"readme":"# http-proxy-stream\n\na proxy tool which damn convenient with stream pipe. also with 90+% test coverage. inspired by [request](https://github.com/request/request)\n\n## features\n\n* pipe http proxy\n* modify response before pipe to destination stream\n* cache request data and response data for later usage\n\n# Install\n\n    npm i --save http-proxy-stream\n\n# API\n\n### proxy(request, [options, response])\n\n- **request**: `http.IncomingMessage` instance or other instance of request.\n- **options**: `Object`, all options of http.request.\n- **options.url**: `String`, the target url with protocal and search part. like http://www.google.com?search=foo\n- **options.modifyResponse**: `Function(response)`, `Optional`, modify response before pipe to destination stream. accept one argument which is the body of response. the `this` keyword is reference of `request.Request` instance. the return value will be the new content of response.\n- **options.skipModifyResponse**: `Function(response)`, return true will skip modifyResponse.\n- **options.onResponse**: `Function(response)`, call once when http.ClientRequest emit 'response' event.\n- **options.cache**: `Boolean|Function(response)`, default false, if true will cache resopnse data for later usage. if function will call with response as first argument, return true will cache response.\n- **response**: `Optional`, writable stream, like http.ServerResponse instance.\n- **Return**: `Promise`\n\n### proxy.mime\n\n#### proxy.mime.isText(mimeType)\nthe miem type mean the http body is text which need deconding with charset\n\n#### proxy.mime.isJSON(mimeType)\n`true` the content can been json stringified, `false` otherwise.\n\n\n#### proxyReturn.contentType\na object parsed from http header 'content-type' field which like `{type: 'text/plain', charset: 'utf-8', parameters: {}}`\n\n#### proxyReturn.contentEncoding\nthen value of 'Content-Encoding' header\n\n\n# Usage\n\n### Normal Proxy\n\n```javascript\nconst proxy = require('http-proxy-stream');\nconst http = require('http');\n\n// http useage\nhttp.createServer((req, res) => {\n  proxy(req, {\n    url: `http://www.google.com${req.url}`,\n    onResponse() {\n      // A chance to rewrite response headers before pipe\n      response.headers.test = 'test';\n    }\n  }, res);\n}).listen(8000);\n\nhttp.createServer((req, res) => {\n  proxy(req, {\n    url: `http://www.google.com${req.url}`,\n    onResponse() {\n      // A chance to rewrite response headers before pipe\n      response.headers.test = 'test';\n    }\n  })\n    .then(resp => resp.pipe(res))\n    .catch(err => {\n      res.writeHead(500);\n      res.end(err)\n    });\n}).listen(8000);\n\n// koa middleware\nfunction* koaProxy(next) {\n  this.body = yield proxy(this.req, {\n    url: `http://www.google.com${this.req.url}`,\n    onResponse(response) {\n      response.headers.test = 'test';\n    }\n  });\n}\n```\n\n### Modify Reponse Before Pipe\n\nSome times we want modify the response of the backend services. you can define a function as `options.modifyResponse`.\n\n```javascript\nconst proxy = require('http-proxy-stream');\nconst http = require('http');\n\n// http useage\nhttp.createServer((req, res) => {\n  proxy(req, {\n    url: `http://www.google.com${req.url}`,\n    onResponse(response) {\n      response.headers.test = 'test';\n    },\n    modifyResponse(response) {\n      // change headers\n      response.headers['content-type'] = 'application/json; charset: utf8';\n      // use new content, can be string, buffer, null, undefined or object;\n      response.body = {content: body};\n    }\n  }, res);\n}).listen(8000);\n```\n\n### Skip Modify Reponse\nmodify response will cause unzip and charset decode, some response like downloading big file is bad performance. we can use `options.skipModifyResponse` to skip it;\n\n```javascript\nconst proxy = require('http-proxy-stream');\nconst http = require('http');\n\n// http useage\nhttp.createServer((req, res) => {\n  proxy(req, {\n    url: `http://www.google.com${req.url}`,\n    onResponse(response) {\n      response.headers.test = 'test';\n    },\n    skipModifyResponse(response) {\n      return proxy.mime.isText(response.contentType.type);\n    },\n    modifyResponse(response) {\n      // change headers\n      response.headers['content-type'] = 'application/json; charset: utf8';\n      // use new content, can be string, buffer, null, undefined or object;\n      response.body = {content: body};\n    }\n  }, res);\n}).listen(8000);\n```\n\n### Get Data After Pipe\nfor debug reason, you may want log the response status or monitor the content.\nbut if we read content everytime that may be negative to performance.\nso we can use `options.cache` for a chance to read data after http reponse finished.\noptions.cache can be a function or boolean, default is false.\nlet's see a example.\n\n```javascript\nhttp.createServer((req, res) => {\n  proxy(req, {\n    url: `http://www.google.com${req.url}`,\n    cache(response) {\n      // only when the content is text type, cache the data\n      return proxy.isText(response.contentType.type);\n    }\n  }, res)\n    .then(resp => {\n      res.on('finish', () => {\n        resp.resetReadable();\n        let responseChunks = [];\n        resp.on('data', (chunk) => {\n          responseChunks.push(chunk);\n        });\n        resp.on('end', (chunk) => {\n          chunk && responseChunks.push(chunk);\n        });\n\n        resp.reqCacheStream.resetReadable();\n        let requestChunks = [];\n        resp.reqCacheStream.on('data', (chunk) => {\n          requestChunks.push(chunk);\n        });\n        resp.reqCacheStream.on('end', (chunk) => {\n          chunk && requestChunks.push(chunk);\n        });\n      });\n    });\n}).listen(8000);\n```\n\n\n### Auto Redirect\nautoSameOriginRedirect\n\n\n# Develop\n\n    $> npm i\n    $> npm test\n    $> npm publish\n\n# Release Note\n\nv1.0.3 2017-02-16\n    * catch inner error\n\nv1.0.2 2017-02-07\n    * refactor readBody method of read-content.js\n\nv1.0.1 2017-02-07\n\n    * CacheStream add clearCahce method\n    * tiny fix\n    * README update\n\nv1.0.0 2017-02-06\n\n    * new api and new lib name\n\nv0.1.3 2016-09-22\n\n    * catch some errors and reject them\n\nv0.1.2 2016-09-17\n\n    * modifyResponse can set response.body to object, null and undefined.\n\nv0.1.1 2016-09-17\n\n    * fix some bugs in koa flow.\n\nv0.1.0 2016-09-12\n\n    * first version\n","created":"2017-02-06T08:53:41.149Z","modified":"2017-02-17T02:58:04.502Z","lastPublisher":{"name":"yuanwen","email":"wenshin2011@gmail.com"},"owners":[{"name":"yuanwen","email":"wenshin2011@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-proxy-stream","_nodeVersion":"6.2.2","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/http-proxy-stream-1.0.3.tgz_1487300282690_0.5840468222741038"},"_npmUser":{"name":"yuanwen","email":"wenshin2011@gmail.com"},"_npmVersion":"3.9.5","_rev":"4-c556754db0f8f952671f989b797cf644","_shasum":"7a8071916ea4944aeae52f3be4e245c04826b249","author":{"name":"Yuanwen"},"bugs":{"url":"https://github.com/wenshin/http-proxy-stream/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"1.0.3"},"dist":{"shasum":"7a8071916ea4944aeae52f3be4e245c04826b249","tarball":"https://registry.npmjs.org/http-proxy-stream/-/http-proxy-stream-1.0.3.tgz"},"maintainers":[{"name":"yuanwen","email":"wenshin2011@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-02-17T02:58:04.502Z","created":"2017-02-06T08:53:41.149Z","1.0.0":"2017-02-06T08:53:41.149Z","1.0.1":"2017-02-07T07:40:53.293Z","1.0.2":"2017-02-08T05:46:15.593Z","1.0.3":"2017-02-17T02:58:04.502Z"}}}