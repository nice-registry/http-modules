{"name":"forwarder-http","version":"2.0.2","description":"A simple and configurable HTTP forwarder: streams incomming requests to a list of target servers","repository":"https://github.com/radiofrance/node-forwarder-http","keywords":["http","https","request","forward","utility","util","load-balancing","proxy"],"main":"index.js","engines":{"node":">=6.0.0"},"dependencies":{"eventemitter3":"^2.0.2"},"devDependencies":{"chai":"^3.5.0","eslint":"^3.16.1","eslint-plugin-node":"^4.1.0","mocha":"^3.2.0"},"scripts":{"test":"eslint lib test index.js && mocha"},"license":"CECILL-B","homepage":"https://github.com/radiofrance/node-forwarder-http#readme","gitHead":"eca73f310b95f5b41398d0a71d36d5a38dc1c915","versions":[{"number":"1.2.0","date":"2017-03-20T13:26:06.613Z"},{"number":"2.0.0","date":"2017-05-02T06:36:16.164Z"},{"number":"2.0.1","date":"2017-05-02T09:25:36.984Z"},{"number":"2.0.2","date":"2017-05-02T14:07:45.264Z"}],"readme":"# Forwarder HTTP\n\n[![Build\nStatus](https://travis-ci.org/radiofrance/node-forwarder-http.svg?branch=master)](https://travis-ci.org/radiofrance/node-forwarder-http)\n\n```forwarder-http``` is a HTTP/HTTPS forwarder. On each request it :\n\n- Replies to the sender immediately with a ```200``` (unless you configure it\notherwise)\n- Forwards the request to all configured target servers\n- Can be configured to retry requests to specific targets, on error or 5xx response\n\nIt is meant to be simple, pluggable via Events, and totally configurable.\n\nIt currently supports only ```node >=6.x.x```.\n\n## Our use case at @RadioFrance\n\nWe built this library because we needed a tiny-footprint tool to dispatch\nincomming production data to different development environments. As with any distributed system,\nrequests sometimes fail so the forwarder should retry all requests on the production env, at least.\n\n## How-to\n\nAn example is worth a thousand words:\n\n```javascript\nconst Forwarder = require('forwarder-http')\n\nconst server = new Forwarder({\n  // The servers to forward the request to\n  targets: [\n    'http://target-nb-1.com', // use default target configs\n    {                         // Overwrite some of the default configs\n      url: 'http://target-nb-2.com',\n      headers: {\n        'my-nb1-header': 'my-nb1-val'\n      },\n      retry: {\n        maxRetries: 3\n      }\n    }\n  ],\n\n  // Add a header to the request before forwarding\n  targetHeaders: {'token': 'some-complicated-hash'},\n\n  // Define the forwarder response statusCode (default: 200)\n  responseStatusCode: 204\n})\n```\n\nYou'll more detailed examples in the [Examples\ndirectory](https://github.com/radiofrance/node-forwarder-http/blob/master/examples)\n\n## Options\n\nThe `Forwarder` constructor supports a few options, meant to give the user total\ncontrol on how each request and response is handler:\n\n- **https**: _bool_. Create a HTTPS Forwarder server (Default ```false```)\n- **https**: _object_. Options to pass to the _https.createServer_ constructor.\nRequired when using https.\n- **timeout**: _int_. Timeout on requests to targets. (Default: null)\n- **targets**: _array_. A list of target URLs or target objects to forward requests to. See\n[the examples](https://github.com/radiofrance/node-http-forwarder/blob/master/examples).\n- **targetHeaders**: _object_. Headers to add to the forwarded request\n(Default: empty).\n- **targetOpts**: _object_. Options to pass to the http/https request constructor. See [the example](https://github.com/radiofrance/node-forwarder-http/blob/master/examples/using-https) and [all the options](https://nodejs.org/api/https.html#https_https_request_options_callback)\n- **targetRetry** _object_. Retry options for all targets, with one or more of the following properties:\n    - **maxRetries**: _int_, default 0. Maximum number or retries the forwarder will perform.\n    - **delay**: _int_, default 300 (ms). Time slot for exponential backoff retry intervals\n    (cf. [Wikipedia Exponential Backoff](https://en.wikipedia.org/wiki/Exponential_backoff))\n    - **retryOnInternalError**: _bool_, default false. Should the forwarder also retry if the targets respond with a 5xx status code ?\n- **responseStatusCode**: _int_. Status code the forward server will use when responding to requests (Default: 200)\n- **responseBody**: _string_. Body the forward server will use when responding to requests (Default: 'OK')\n- **responseHeaders**: _object_. Headers the forward server will use when responding to requests (Default: empty)\n\n### Target configuration objects\n\nThe forwarder options accept the targets array to contain many items in one the following forms :\n\n- string in the form ```http://somehost:12345```\n\n- an object like:\n\n```\n{\n    url: 'https://somehost:12345',\n    opts: {\n        key: 'mykey',\n        cert: 'my cert',\n        rejectUnauthorized: false\n    },\n    headers: {\n        someHeader: 'someVal'\n    },\n    retry: {\n        maxRetries: 2\n    }\n}\n\n```\n\nThe options passed in the object will overwrite the default forwarder options.\n\n## Events\n\nThe ```forwarder-http``` library allows you to hook into most of the lifecycle to the\nforwarding process, and change all the requests and responses along the way.\n\n- **request** ```(incommingMessage, response)```: The resquest event from the\nhttp/https forward server. If you call ```response.end()``` in a callback, the\nrequest will not be forwarded.\n- **response** ```(incommingMessage, response)```: Called just before the\nforwarder responds to the client.\n- **requestError** ```(error, incommingMessage)```: error when handling the\nrequest in the forwarder\n- **forwardRequest** ```(options, incommingMessage)```: allows you to change the forwarded\nrequest before it is sent. The first argument is the options array passed on to the\n[http.request](https://nodejs.org/api/http.html#http_http_request_options_callback) and [https.request](https://nodejs.org/api/https.html#https_https_request_options_callback)\nconstructors, after all the config headers and options avec been applied. If you set ```options.cancel = true``` it\nwill cancel the forwarding of the current request to the current target. Check out the examples for ... well ...\nexamples on this.\n- **forwardResponse** ```(request, incommingMessage, willRetry)```: allows you to act on individual target responses. The ```willRetry``` option indicates if a retry will be performed by the forwarder (in the case of\n5xx responses).\n\n- **forwardRequestError** ```(error, request, willRetry)```: error when forwarding a request to specific targets.\n\nSee [the example on how to use the events](https://github.com/radiofrance/node-forwarder-http/blob/master/examples/using-events.js).\n\n## Acknoledgments\n\n- **[node-http-proxy](https://github.com/nodejitsu/node-http-proxy)**: our library started as a forked and simplified version of this library. ```node-http-proxy``` also does proxying, which we do not, also supports versions of node older that 6.0.0, which we do not. But only handles a single forward target server, which didn't solve our problem. We ended up re-writing the whole thing. Anyway, many thanks to the folks at [nodejitsu](https://nodejitsu.com/) for this great pice of code.\n\n","created":"2017-03-20T13:26:06.613Z","modified":"2017-05-02T14:07:45.264Z","lastPublisher":{"name":"radiofrance","email":"opensource@radiofrance.fr"},"owners":[{"name":"radiofrance","email":"opensource@radiofrance.fr"}],"other":{"_attachments":{},"_from":".","_id":"forwarder-http","_nodeVersion":"6.9.5","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/forwarder-http-2.0.2.tgz_1493734064578_0.6890651248395443"},"_npmUser":{"name":"radiofrance","email":"opensource@radiofrance.fr"},"_npmVersion":"3.10.10","_rev":"5-8c5a25ee04a6426e9a9c46d99166a6be","_shasum":"47e291fccfe48acad0ea58b2e179c340d1bc60dd","author":{"name":"Radio France","email":"opensource@radiofrance.com"},"bugs":{"url":"https://github.com/radiofrance/node-forwarder-http/issues"},"contributors":[{"name":"Rodolfo Ripado","email":"ggaspaio@gmail.com"}],"directories":{"example":"examples","test":"test"},"dist-tags":{"latest":"2.0.2"},"dist":{"shasum":"47e291fccfe48acad0ea58b2e179c340d1bc60dd","tarball":"https://registry.npmjs.org/forwarder-http/-/forwarder-http-2.0.2.tgz"},"maintainers":[{"name":"radiofrance","email":"opensource@radiofrance.fr"}],"readmeFilename":"README.md","time":{"modified":"2017-05-02T14:07:45.264Z","created":"2017-03-20T13:26:06.613Z","1.2.0":"2017-03-20T13:26:06.613Z","2.0.0":"2017-05-02T06:36:16.164Z","2.0.1":"2017-05-02T09:25:36.984Z","2.0.2":"2017-05-02T14:07:45.264Z"}}}