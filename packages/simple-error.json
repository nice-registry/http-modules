{"name":"simple-error","version":"1.2.1","description":"Node.js module that lets you define and use errors consistently across your APIs and apps. Simple. HTTP friendly.","main":"index.js","scripts":{"test":"tape tests/*"},"keywords":["error","exception"],"repository":"https://github.com/iljoo/simple-error","license":"MIT","devDependencies":{"tape":"^2.10.2"},"gitHead":"34050a2ad4f62d9c352ae0d94e4a81e8a56c5b02","homepage":"https://github.com/iljoo/simple-error","versions":[{"number":"0.1.0","date":"2014-03-10T13:23:33.165Z"},{"number":"0.1.1","date":"2014-04-08T08:53:08.406Z"},{"number":"0.1.2","date":"2014-04-22T15:15:37.982Z"},{"number":"0.1.3","date":"2014-05-02T12:25:12.550Z"},{"number":"0.2.0","date":"2014-05-05T12:40:40.344Z"},{"number":"0.3.0","date":"2014-06-04T20:05:03.681Z"},{"number":"1.0.0","date":"2014-09-15T09:10:05.058Z"},{"number":"1.0.1","date":"2014-10-01T08:47:32.639Z"},{"number":"1.0.2","date":"2014-10-06T06:59:30.919Z"},{"number":"1.0.3","date":"2014-10-08T09:14:44.984Z"},{"number":"1.0.4","date":"2014-10-09T09:04:25.546Z"},{"number":"1.1.0","date":"2014-10-09T11:52:20.876Z"},{"number":"1.1.1","date":"2014-10-09T12:15:31.394Z"},{"number":"1.1.2","date":"2014-10-30T09:08:01.900Z"},{"number":"1.2.0","date":"2014-11-11T08:28:41.684Z"},{"number":"1.2.1","date":"2014-12-31T15:06:11.606Z"}],"readme":"# simple-error\n\nNode.js module that lets you define and use errors consistently across your APIs and apps. Simple. HTTP friendly.\n\n## Example usage\n\n``` js\nvar assert = require('assert');\nvar SimpleError = require('.');\n\nvar MyError = SimpleError.define('MyError');\nvar myError = new MyError('boom');\n\nassert.ok(myerror instanceof MyError); // true\nassert.ok(myerror instanceof Error); // true\nassert.equal(myError.message, 'boom'); // true\n\nvar ApiError = SimpleError.define('ApiError', {\n  code: 100,\n  statusCode: 500,\n  methods: {\n    badCall: function () {\n      return 'Bad call: ' + this.message;\n    }\n  }\n});\n\nvar err = new ApiError('NO!');\n\nassert.equal(err.type, 'ApiError'); // true\nassert.equal(err.name, 'ApiError'); // true\nassert.equal(err.code, 100);        // true\nassert.equal(err.statusCode, 500);  // true\n\nconsole.log(err.toJSON());\n// {\"success\":false,\"message\":\"NO!\",\"statusCode\":400,\"code\":101}\n\nconsole.log(err.badCall()); // Bad call: NO!\n\nassert.ok(err instanceof Error); // true\nassert.ok(err instanceof ApiError); // true\n\nvar util = require('util');\n\n// Warning! Does not work with node.js util.isError method\nutil.isError(err); // false\n\n// Sub errors\nvar BadRequestError = ApiError.define('BadRequestError', {\n  code: 102,\n  statusCode: 400,\n  message: 'Bad request',\n  methods: {\n    hello: function () {\n      return 'well, hello!';\n    }\n  }\n});\n\nvar bad = new BadRequestError();\n\nassert.ok(bad instanceof Error);           // true\nassert.ok(bad instanceof ApiError);        // true\nassert.ok(bad instanceof BadRequestError); // true\n\nbad.hello(); // well, hello!\n\n// inherited from ApiError\nbad.badCall(); // Bad call: Bad request\n\n// Wrapping unknown exceptions\nvar e = new Error('oops');\nvar wrappedError = BadRequestError.wrap(e);\n\nassert.ok(wrappedError instanceof ApiError);        // true\nassert.ok(wrappedError instanceof BadRequestError); // true\nassert.equal(wrappedError.inner, e);                // true\n\nconsole.log(wrappedError.toJSON());\n// {\"success\":false,\"message\":\"oops\",\"statusCode\":400,\"code\":102}\n\n// Custom error consctructor if needed\nvar BasicError = SimpleError.define('BasicError', {\n   code: 1234,\n   statusCode: 400,\n   message: 'Error with custom constructor',\n   ctor: function (errorCode, links) {\n     this.errorCode = errorCode;\n     this.links = links;\n   }\n});\n\nvar links = ['http://www.npmjs.org', 'http://www.google.com'];\nvar err = new BasicError(101, links);\n\n```\n\n## Error definition defaults and options\n\nThere are some \"sensible\" defaults when it comes to defining your errors.\n\n### code (any value)\nMeant to be used as an internal code for other apps or APIs. Default is `0`.\n\n### statusCode (integer)\nHTTP error status code. Default is `500`.\n\n### message (string)\nMessage format string. Called by node's util.format for interpolation if needed. Default is `Unknown`.\n\n### exclude (array[string])\nProperties to exclude when calling `friendly` method. For example: `exclude: ['code', 'foo', 'bar', 'baz']`.\nProperties that are always excluded are `['isError', 'type', 'name']`\n\n### showStack (boolean)\nWhen set to true stacktrace is included in `toJSON` call. Default is `false`\n\n### ctor (function)\nIf supplied will be used in new error construction as a constructor. See tests.\n\n### methods (dict of functions)\nIf supplied all the methods will be copied to prototype and thus available on all instances of that\nerror type. See tests.\n\n## Instance methods\n\n### friendly()\nReturns a frendly error object with properties excluded defined in exclude\noption\n\n## Class methods\n\n### .wrap(err)\nTakes an error and returns an new instance of error with passed in error set as\n`.inner` property and all other properties copied over to new instance.\n\n\n## License\n\nMIT\n","created":"2014-03-10T13:23:33.165Z","modified":"2014-12-31T15:06:11.606Z","lastPublisher":{"name":"iljoo","email":"ilia.mikhailov@gmail.com"},"owners":[{"name":"iljoo","email":"ilia.mikhailov@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"simple-error","_npmUser":{"name":"iljoo","email":"ilia.mikhailov@gmail.com"},"_npmVersion":"1.4.28","_rev":"1-1e7f33a1a4b5c2bb8a24deb7b9102e23","_shasum":"13d20cad5c6826e8205a4293bceec3402d4bf968","author":{"name":"Ilia Mikhailov","email":"ilia.mikhailov@gmail.com"},"bugs":{"url":"https://github.com/iljoo/simple-error/issues"},"directories":{},"dist-tags":{"latest":"1.2.1"},"dist":{"shasum":"13d20cad5c6826e8205a4293bceec3402d4bf968","tarball":"http://registry.npmjs.org/simple-error/-/simple-error-1.2.1.tgz"},"maintainers":[{"name":"iljoo","email":"ilia.mikhailov@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-12-31T15:06:11.606Z","created":"2014-03-10T13:23:33.165Z","0.1.0":"2014-03-10T13:23:33.165Z","0.1.1":"2014-04-08T08:53:08.406Z","0.1.2":"2014-04-22T15:15:37.982Z","0.1.3":"2014-05-02T12:25:12.550Z","0.2.0":"2014-05-05T12:40:40.344Z","0.3.0":"2014-06-04T20:05:03.681Z","1.0.0":"2014-09-15T09:10:05.058Z","1.0.1":"2014-10-01T08:47:32.639Z","1.0.2":"2014-10-06T06:59:30.919Z","1.0.3":"2014-10-08T09:14:44.984Z","1.0.4":"2014-10-09T09:04:25.546Z","1.1.0":"2014-10-09T11:52:20.876Z","1.1.1":"2014-10-09T12:15:31.394Z","1.1.2":"2014-10-30T09:08:01.900Z","1.2.0":"2014-11-11T08:28:41.684Z","1.2.1":"2014-12-31T15:06:11.606Z"}}}