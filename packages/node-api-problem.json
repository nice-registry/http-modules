{"name":"node-api-problem","version":"1.0.0","description":"Http Api Problem Utility","homepage":"https://github.com/eoko/node-api-problem#readme","files":["lib"],"main":"lib/apiProblem.js","keywords":[],"devDependencies":{"chai":"^3.5.0","eslint":"^2.11.1","eslint-config-airbnb":"^9.0.1","eslint-config-xo-space":"^0.13.0","eslint-plugin-import":"^1.8.1","eslint-plugin-jsx-a11y":"^1.2.3","eslint-plugin-react":"^5.1.1","gulp":"^3.9.0","gulp-coveralls":"^0.1.0","gulp-eslint":"^2.0.0","gulp-exclude-gitignore":"^1.0.0","gulp-istanbul":"^0.10.3","gulp-line-ending-corrector":"^1.0.1","gulp-mocha":"^2.0.0","gulp-nsp":"^2.1.0","gulp-plumber":"^1.0.0"},"repository":"https://github.com/eoko/node-api-problem","scripts":{"prepublish":"gulp prepublish","test":"gulp"},"license":"MIT","dependencies":{"http-status":"^0.2.3","lodash":"^4.13.1"},"gitHead":"2dbe820d2a2808009be2168be759294128ab9f90","versions":[{"number":"0.0.0","date":"2016-06-02T20:31:56.326Z"},{"number":"1.0.0","date":"2016-06-02T23:35:29.193Z"}],"readme":"# node-api-problem [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][daviddm-image]][daviddm-url] [![Coverage percentage][coveralls-image]][coveralls-url]\n> Http Api Problem Utility\n\n## Installation\n\n```sh\n$ npm install --save node-api-problem\n```\n\n## Why use Api Problem\n\nWhen you developed some Rest Api, you commonly have to return error. Api Problem (following the #rfc7807)\ndefined a way to carry machine-readable details of errors in a HTTP response to avoid the need to define new error\nresponse formats for HTTP APIs.\n\nApi Problem should be compliant with the #rfc7807. The main definition of an Api Problem\nis defined in the #rfc7807 like that :\n\n```\n\nA problem details object can have the following members:\n\n   o  \"type\" (string) - A URI reference [RFC3986] that identifies the\n      problem type.  This specification encourages that, when\n      dereferenced, it provide human-readable documentation for the\n      problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When\n      this member is not present, its value is assumed to be\n      \"about:blank\".\n\n   o  \"title\" (string) - A short, human-readable summary of the problem\n      type.  It SHOULD NOT change from occurrence to occurrence of the\n      problem, except for purposes of localization (e.g., using\n      proactive content negotiation; see [RFC7231], Section 3.4).\n\n   o  \"status\" (number) - The HTTP status code ([RFC7231], Section 6)\n      generated by the origin server for this occurrence of the problem.\n\n   o  \"detail\" (string) - A human-readable explanation specific to this\n      occurrence of the problem.\n\n   o  \"instance\" (string) - A URI reference that identifies the specific\n      occurrence of the problem.  It may or may not yield further\n      information if dereferenced.\n```\n\nThe #rfc precise another important point :\n\n```\nProblem type definitions MAY extend the problem details object with additional members.\n```\n\nIf you use Api Problem, you will able to create custom Api Problem and precise\nany members you need and transform the \"MAY\" to a \"MUST\". This can be very\nuseful if you have to reuse the same Api Problem in different circumstances.\n\nOne of the other interesting point of Api Problem is that it extend the\n`Error` object that let you the ability to have a full documented error\nif you need.\n\n## Limitation\n\nThe `instance` parameter is not yet implemented.\n\n## Usage\n\n```js\nvar ApiProblem = require('node-api-problem');\n\nvar Issue12Problem = new ApiProblem('http://api.acme.com/kb/issues/12','Error documented by issue 12');\n```\n\n\n### Create an Api Problem on the Fly\n\n```js\nvar Issue12Problem = new ApiProblem('http://api.acme.com/kb/issues/12','Error documented by issue 12');\n\n// or simply\n\nvar Issue12Problem = new ApiProblem('http://api.acme.com/kb/issues/12');\n```\n\nWhen you create an Api Problem on the fly, you will create internally a new Problem Type. This can be check easily :\n\n```js\nvar Issue12Problem = new ApiProblem('http://api.acme.com/kb/issues/12','Error documented by issue 12');\nApiProblem.lookupProblemType('http://api.acme.com/kb/issues/12'); // true\n```\n\n### Use a pre-registered HTTP Api Problem\n\n```js\nvar GoneProblem = ApiProblem.GONE;\n```\n\n### Create a Custom Api Problem\n\n```js\nvar IssueApiProblem = ApiProblem.create();\nvar Issue12Problem = new IssueApiProblem('http://api.acme.com/kb/issues/12');\n```\n\nThe creation of Custom Api Problem is very useful because you can add custom variable\nin a specific namespace without denatured the root Api Problem.\n\n```js\nvar CustomApiProblem = ApiProblem.create();\n\nvar ValidationProblem = function(validation) {\n  if(validation === 12) {\n    validation = 42;\n  }\n  return new CustomApiProblem('http://api.acme.com/doc/validations', {'validation' : validation});\n};\n\nvar validationIssue = new ValidationProblem(12);\necho validationIssue.validation; // 42\n```\n\n### Add Custom Type to Api Problem\nPre-registered Type is good. We planned in the future the ability to lock the creation of Problem Type on the fly.\n\n```js\nApiProblem.registerProblemType('http://api.acme.com/kb/issues/12','Error documented by issue 12');\nApiProblem.lookupProblemType('http://api.acme.com/kb/issues/12'); // true\n```\n\n### Throw an Api Problem\nApiProblem inherit from Error, you can easily throw a rich Api Problem using `throw` :\n\n```js\ntry {\n    throw ApiProblem.GONE;\n} catch (e) {\n    e instanceOf ApiProblem; //true\n    e instanceOf Error; //true\n}\n```\n\n### Cast Api Problem\nAn Api Problem can be cast to string :\n\n```js\nString(ApiProblem.GONE); // \"HTTP-Problem: [410] Gone > http://www.iana.org/assignments/http-status-codes#410\"\n```\n\nAn Api Problem can either be cast to a JSON string :\n\n```js\nJSON.stringify(ApiProblem.GONE); // {\\\"type\\\":\\\"http://www.iana.org/assignments/http-status-codes#410\\\",\\\"title\\\":\\\"Gone\\\",\\\"status\\\":410}\n```\n\n### Use Api Problem in a middleware\n\n```js\nfunction apiProblemMiddleware(err,req,res,next) {\n  if (err instanceof ApiProblem) {\n    err.send(res);\n  } else {\n    next();\n  }\n}\n```\n\n## License\n\nMIT Â© [Romain DARY &lt;romain.dary@eoko.fr&gt; http://eoko.fr](http://eoko.fr)\n\n\n[npm-image]: https://badge.fury.io/js/node-api-problem.svg\n[npm-url]: https://npmjs.org/package/node-api-problem\n[travis-image]: https://travis-ci.org/eoko/node-api-problem.svg?branch=master\n[travis-url]: https://travis-ci.org/eoko/node-api-problem\n[daviddm-image]: https://david-dm.org/eoko/node-api-problem.svg?theme=shields.io\n[daviddm-url]: https://david-dm.org/eoko/node-api-problem\n[coveralls-image]: https://coveralls.io/repos/eoko/node-api-problem/badge.svg\n[coveralls-url]: https://coveralls.io/r/eoko/node-api-problem\n","created":"2016-06-02T20:31:56.326Z","modified":"2016-06-02T23:35:29.193Z","lastPublisher":{"name":"iam-merlin","email":"romain.dary@eoko.fr"},"owners":[{"name":"iam-merlin","email":"romain.dary@eoko.fr"}],"other":{"_attachments":{},"_from":".","_id":"node-api-problem","_nodeVersion":"6.2.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/node-api-problem-1.0.0.tgz_1464910527804_0.9954638192430139"},"_npmUser":{"name":"iam-merlin","email":"romain.dary@eoko.fr"},"_npmVersion":"3.8.9","_rev":"1-7bdbe8fac66ea5c629803a9d725e8de5","_shasum":"ba8b232ff7259518ae107231da2dbc4224657dbd","author":{"name":"Romain DARY","email":"romain.dary@eoko.fr","url":"http://eoko.fr"},"bugs":{"url":"https://github.com/eoko/node-api-problem/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"ba8b232ff7259518ae107231da2dbc4224657dbd","tarball":"http://registry.npmjs.org/node-api-problem/-/node-api-problem-1.0.0.tgz"},"maintainers":[{"name":"iam-merlin","email":"romain.dary@eoko.fr"}],"readmeFilename":"README.md","time":{"modified":"2016-06-02T23:35:29.193Z","created":"2016-06-02T20:31:56.326Z","0.0.0":"2016-06-02T20:31:56.326Z","1.0.0":"2016-06-02T23:35:29.193Z"}}}