{"name":"header-override","version":"1.0.0","description":"Override HTTP headers","main":"index.js","scripts":{"test":"tape test/index.js"},"repository":{"type":"git","url":"git+https://bitbucket.org/voiceboxer/header-override.git"},"keywords":["middleware","express","header","override","overwrite","http"],"license":"MIT","homepage":"https://bitbucket.org/voiceboxer/header-override#readme","devDependencies":{"body-parser":"^1.14.1","express":"^4.13.3","supertest":"^1.1.0","tape":"^4.2.1"},"gitHead":"cedaba15e5c8306760b8dc340532117101b6daf1","versions":[{"number":"1.0.0","date":"2015-10-14T07:43:13.748Z"}],"readme":"# header-override\n\nExpress middleware for overwritting headers using the request query or body. Useful when dealing with clients that don't allow setting request headers directly, for example older IE browsers that support the `XDomainRequest` API.\n\n\tnpm install header-override\n\n# Usage\n\nThe middleware will add any additional header to `req.headers`, overwritting already specified headers.\n\n```javascript\nvar headerOverride = require('header-override');\nvar express = require('express');\n\nvar app = express();\n\napp.use(headerOverride());\n```\n\nBy default the module looks for additional headers in the query (with the `headers` key).\n\nAn example using `XDomainRequest`.\n\n```javascript\nvar xdr = new XDomainRequest();\n\nxdr.open('POST', '/?headers={\"Content-Type\":\"application/json\",\"Authorization\":\"token\"}');\nxdr.send(JSON.stringify({ json: true }));\n```\n\nThis will set the `Content-Type` header on the server to `application/json`, and the `Authorization` header to `token`. Headers can be encoded as JSON, or when using `express` that supports nested objects, it's possible to include the headers using brackets.\n\n\tPOST /?headers[Content-Type]=application/json&headers[Authorization]=token\n\nIt's also possible to specify how to retrieve additional headers. Passing a string as first argument to the module will use that string as query parameter name. The module also accepts a function which is expected to return the additional headers.\n\n```javascript\napp.use(headerOverride('additionalHeaders')); // Look for headers in req.query.additionalHeaders\napp.use(headerOverride(function(req, res) {\n\treturn req.body.headers;\n}));\n```\n\nUse the `allow` option to whitelist which headers may be overwritten.\n\n```javascript\napp.use(headerOverride(null, { allow: ['Content-Type', 'Authorization'] }));\napp.use(headerOverride(null, {\n\tallow: function(req, res, header) {\n\t\treturn header === 'content-type';\n\t}\n}));\n```\n","created":"2015-10-14T07:43:13.748Z","modified":"2015-10-14T07:43:56.148Z","lastPublisher":{"name":"kapetan","email":"mirza.kapetanovic@gmail.com"},"owners":[{"name":"kapetan","email":"mirza.kapetanovic@gmail.com"},{"name":"kasperkronborg","email":"npm@kronborg.info"}],"other":{"_attachments":{},"_from":".","_id":"header-override","_nodeVersion":"0.12.3","_npmUser":{"name":"kapetan","email":"mirza.kapetanovic@gmail.com"},"_npmVersion":"2.9.1","_rev":"1-1d091cde1f3a35085633bfbe204edca6","_shasum":"a85164341b68038763859882013011b5783a8f80","directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"a85164341b68038763859882013011b5783a8f80","tarball":"http://registry.npmjs.org/header-override/-/header-override-1.0.0.tgz"},"maintainers":[{"name":"kapetan","email":"mirza.kapetanovic@gmail.com"},{"name":"kasperkronborg","email":"npm@kronborg.info"}],"readmeFilename":"README.md","time":{"modified":"2015-10-14T07:43:56.148Z","created":"2015-10-14T07:43:13.748Z","1.0.0":"2015-10-14T07:43:13.748Z"}}}