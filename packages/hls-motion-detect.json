{"name":"hls-motion-detect","version":"1.0.1","description":"Motion detection based on Apple HTTP Live Stream","main":"index.js","scripts":{"test":"echo \"Error: no test specified! Configure in package.json\" && exit 1"},"repository":"https://github.com/tan-tan-kanarek/hls-motion-detect","keywords":["node.js","motion","detect","hls","video"],"license":"MIT","dependencies":{"bluebird":"^3.5.0","dateformat":"^2.0.0","express":"^4.15.3","kaltura-client":"^1.0.6","socket.io":"^2.0.1","tortoise":"^1.0.1"},"gitHead":"999cc1c5e993b9425d725ce523ccd8558de294ba","homepage":"https://github.com/tan-tan-kanarek/hls-motion-detect#readme","versions":[{"number":"1.0.0","date":"2017-05-29T13:36:10.001Z"},{"number":"1.0.1","date":"2017-06-07T09:36:36.001Z"}],"readme":"\r\n\r\n# Motion Detection Server\r\nWatch Apple HTTP Live Stream (HLS) and record to disc mp4 files containing the captured motions.\r\n\r\n\r\n## Usage\r\n\r\n```javascript\r\nconst motion = require('hls-motion-detect');\r\n\r\nlet detectServer = new motion.DetectServer({\r\n\tffmpegPath: 'ffmpeg', \r\n\tffprobePath: 'ffprobe', \r\n\trecordingsPath: './recorded'\r\n})\r\n.listen(1336)\r\n.on('source-added', (source) => {\r\n\tconsole.log(`New Source added [${source.systemName}] URL [${source.sourceURL}]`);\r\n\t\r\n\tsource\r\n\t.on('start', (filepath) => {\r\n\t\tconsole.log(`Source [${source.systemName}] started`);\r\n\t})\r\n\t.on('stop', () => {\r\n\t\tconsole.log(`Source [${source.systemName}] stopped`);\r\n\t})\r\n\t.on('record-start', (filepath) => {\r\n\t\tconsole.log(`Source [${source.systemName}] started recording: ${filepath}`);\r\n\t})\r\n\t.on('record-stop', (filepath) => {\r\n\t\tconsole.log(`Source [${source.systemName}] stopped recording`);\r\n\t});\r\n})\r\n.on('source-removed', (systemName) => {\r\n\tconsole.log(`Source removed [${systemName}]`);\r\n});\r\n```\r\n\r\n### REST API\r\nYou can controll the detect server using REST API:\r\n```javascript\r\nlet apiServer = new motion.ApiServer(detectServer)\r\n.listen(1337)\r\n.on('listen', (port) => {\r\n\tconsole.log(`REST API server running at port ${port}`);\r\n}).\r\non('debug', (msg) => {\r\n\tconsole.log(msg);\r\n}).\r\non('error', (msg) => {\r\n\tconsole.error(msg);\r\n});\r\n```\r\nAPI enables add, delete, start and stop.\r\n\r\n*http://localhost:1337/source/add*\r\n```javascript\r\n{\r\n\t\"systemName\": \"test\",\r\n\t\"name\": \"test\",\r\n\t\"sourceURL\": \"http://myLiveServer/live/myStream/index.m3u8\"\r\n}\r\n```\r\n\r\n*http://localhost:1337/source/delete*\r\n```javascript\r\n{\r\n\t\"systemName\": \"test\"\r\n}\r\n```\r\n\r\n*http://localhost:1337/source/start*\r\n```javascript\r\n{\r\n\t\"systemName\": \"test\",\r\n\t\"interval\": 3, // in seconds, if not specified default is one second.\r\n\t\"x\": 100, // not supported yet, defaults to 0.\r\n\t\"y\": 100, // not supported yet, defaults to 0.\r\n\t\"width\": 100, // not supported yet, defaults to 0.\r\n\t\"height\": 100, // not supported yet, defaults to 0.\r\n\t\"threshold\": 30, // (between 1 and 50) defaults to 35, use higher value to increase sensitivity and lower value to decrease sensitivity.\r\n\t\"maxIdleTime\": 60 // time to wait since last segment detected to raise idle event (Used by RabbitMQ to remove the source).\r\n}\r\n```\r\n\r\n*http://localhost:1337/source/stop*\r\n```javascript\r\n{\r\n\t\"systemName\": \"test\"\r\n}\r\n```\r\n\r\n\r\n### Web UI\r\nYou can controll the detect server using web UI:\r\n```javascript\r\nlet webServer = new motion.WebServer(detectServer)\r\n.listen({\r\n\tport: 3888,\r\n\tpath: './lib/plugins/web-server/web', // you can change that static path to your own web folder\r\n})\r\n.on('listen', (port) => {\r\n\tconsole.log(`Web server running at port ${port}`);\r\n});\r\n```\r\n\r\n### RabbitMQ Messages\r\nYou add sources through RabbitMQ:\r\n```javascript\r\nlet rabbitServer = new motion.RabbitServer(detectServer)\r\n.on('listen', () => {\r\n\tconsole.log('Rabbit-MQ server running');\r\n}).\r\non('error', (msg) => {\r\n\tconsole.error(msg);\r\n})\r\n.listen({\r\n//\tauth: 'guest:guest',\r\n\thost: 'localhost',\r\n//\tport: 5672,\r\n\tqueue: 'stream-queue'\r\n});\r\n```\r\nRabbitMQ plugins supports only adding new source, once the source is idle it will be removed automatically.\r\n\r\n\r\n### Kaltura Integration\r\nKaltura plugin will automatically upload recorded files to your Kaltura account.\r\n```javascript\r\nlet kaltura = new Kaltura(detectServer, {\r\n\tpartnerId: 123, // replace with your Kaltura account id\r\n\tsecret: 'your secret here'\r\n})\r\n.on('error', (msg) => {\r\n\tconsole.error(msg);\r\n})\r\n.on('entry-created', (entry) => {\r\n\tconsole.log(`New entry [${entry.id}] uploaded`);\r\n});\r\n```\r\n\r\n\r\n### Tools\r\n\r\nTo test Rabbit-MQ message, use utils/addRabbitMessage.js","created":"2017-05-29T13:36:10.001Z","modified":"2017-06-07T09:36:36.001Z","lastPublisher":{"name":"tan-tan","email":"johnathan.kanarek@gmail.com"},"owners":[{"name":"tan-tan","email":"johnathan.kanarek@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"hls-motion-detect","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hls-motion-detect-1.0.1.tgz_1496828195047_0.6051072527188808"},"_npmUser":{"name":"tan-tan","email":"johnathan.kanarek@gmail.com"},"_npmVersion":"3.10.8","_rev":"2-b27381902b8c02dee186ae4d85188473","_shasum":"a460e00def6e5db8ea4509df052cc516cbda8e07","author":{"name":"tan-tan"},"bugs":{"url":"https://github.com/tan-tan-kanarek/hls-motion-detect/issues"},"directories":{},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"a460e00def6e5db8ea4509df052cc516cbda8e07","tarball":"https://registry.npmjs.org/hls-motion-detect/-/hls-motion-detect-1.0.1.tgz"},"maintainers":[{"name":"tan-tan","email":"johnathan.kanarek@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-07T09:36:36.001Z","created":"2017-05-29T13:36:10.001Z","1.0.0":"2017-05-29T13:36:10.001Z","1.0.1":"2017-06-07T09:36:36.001Z"}}}