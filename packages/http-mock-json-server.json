{"name":"http-mock-json-server","version":"0.2.2","description":"Create the HTTP server is used to generate mock json using mockjs","main":"dist/mock.js","bin":{"http-mock":"bin/http-mock"},"engines":{"node":">= 4.1.0"},"scripts":{"test":"echo \"Error: no test specified\" && exit 1","prepublish":"gulp build"},"repository":"https://github.com/hbxeagle/http-mock-json-server","keywords":["http","mock","json","server","fake","mockJSON","mockjs","node","api"],"license":"MIT","homepage":"https://github.com/hbxeagle/http-mock-json-server#readme","dependencies":{"async":"^2.0.0-rc.5","chalk":"^0.5.1","commander":"^2.9.0","deep-assign":"^2.0.0","mime":"^1.3.4","minimatch":"^3.0.2","replace-ext":"0.0.1","text-table":"^0.2.0","thread-sleep":"^2.0.0","canvas":"^1.4.0"},"optionalDependencies":{"canvas":"^1.4.0"},"devDependencies":{"babel-preset-es2015":"^6.1.18","chai":"^3.5.0","del":"^2.1.0","gulp":"^3.6.0","gulp-babel":"^6.1.0","gulp-if":"^2.0.0","gulp-ignore":"^2.0.1","gulp-load-plugins":"^0.7.0","gulp-order":"^1.1.1","gulp-plumber":"^1.0.1","gulp-util":"^3.0.1","mocha":"^3.2.0","nodegit":"^0.1.4"},"gitHead":"93b0bf1bb76baa80af42d5d257ce176f1ed9d56d","versions":[{"number":"0.1.0-beta1","date":"2016-08-17T09:38:12.541Z"},{"number":"0.1.0-beta2","date":"2016-08-18T09:12:57.926Z"},{"number":"0.1.0","date":"2016-08-19T02:21:22.218Z"},{"number":"0.1.1","date":"2016-08-19T02:29:30.355Z"},{"number":"0.1.2","date":"2016-09-05T07:05:49.087Z"},{"number":"0.1.3","date":"2016-09-26T02:33:05.177Z"},{"number":"0.1.4","date":"2016-11-02T08:32:40.392Z"},{"number":"0.2.0","date":"2016-12-16T07:24:58.462Z"},{"number":"0.2.1","date":"2016-12-22T03:08:09.607Z"},{"number":"0.2.2","date":"2017-03-14T03:59:21.334Z"}],"readme":"# http-mock-json-server\n\n## 概述 Overview\n***json数据接口模拟服务***\n\n##\n>使用node搭建了一个模拟服务端api的服务，根据mockJSON的规则，生成随机数据，同时可以通过修改配置文件`mock.json`动态配置返回数据，请求状态（502，404等），以及请求延时。。生成随机数据的核心是[Mockjs](http://mockjs.com)，但是其调用方式为在页面中引入mock.js的方式拦截Ajax，不太符合本人的需求，所以做了node server封装，同时加入proxy功能，可以只拦截部分配置的接口，未配置的接口可以根据配置转发给源服务器。具体mockJSON的规则可以参考[Mockjs](http://mockjs.com)中的文档。\n\n\n### 安装环境 Requirements\n* node 4.1.0+\n\n### 安装 node-canvas\n\n**注意** node-canvas 为可选依赖，安装过程中如果此模块报错不影响使用。如果不安装 node-canvas 则 `@dataImage` 不可用。\n\n#### Mac\n1. 安装 brew\n2. brew install pkg-config cairo libpng jpeg giflib\n\n#### Windows\n1. 安装 Microsoft Visual C++ 2010 or later 下载安装免费的 Visual Studio [Community](https://go.microsoft.com/fwlink/?LinkId=532606&clcid=0x409) 或 [Express](https://go.microsoft.com/fwlink/?LinkId=615464&clcid=0x409) 即可。`安装的时候注意勾选 C++ 支持`\n2. 安装 [Python 2.7.x for Windows](http://www.python.org/getit)\n3. 安装 `npm install -g node-gyp`\n4. 下载 GTK 2 [Win32](http://ftp.gnome.org/pub/GNOME/binaries/win32/gtk+/2.24/gtk+-bundle_2.24.10-20120208_win32.zip) 或 [Win64](http://ftp.gnome.org/pub/GNOME/binaries/win64/gtk+/2.22/gtk+-bundle_2.22.1-20101229_win64.zip)，解压到 c:/GTK\n5. 安装 [libjpeg-turbo SDK for Visual C++](http://sourceforge.net/projects/libjpeg-turbo/) 默认安装\n\n> 参考 https://github.com/Automattic/node-canvas/wiki/Installation---Windows\n\n### 安装/更新 Install/Update\n\n`npm install -g http-mock-json-server`\n\n### 命令 Commands\n\n`http-mock`\n\n#### -p --prot 设置模拟数据服务的监听端口\n>注意修改nginx的对应proxy的端口\n\n`http-mock --prot=7072`\n\n#### -c --config 设置mock配置文件\n\n`http-mock -c \"mock.proxy.json\"`\n`http-mock --config=\"mock.proxy.json\"`\n\n#### --log 显示GET、POST请求参数\n\n`http-mock --log`\n\n##### 运行目录：\n\n`mock模板文件目录，mock.json所在目录。`\n\n##### 功能简介：\n\n`根据mock.json文件中的配置，匹配请求路径和mock模板文件直接的关系。如果不配置此文件，则安装请求路径加 .mock 后缀的方式查找mock模板文件。`\n\n##### mock.json：\n\n```json\n{\n  \"host\": \"http://api.example.com/\",\n  \"ip\":\"\",\n  \"port\":\"\",\n  \"mock\":[{\n    \"pathname\":\"/test\",\n    \"tpl\":\"test.mock\",\n    \"statusCode\": 200,\n    \"delay\": 5000\n  }, {\n    \"pathname\":\"/test/deep/path\",\n    \"tpl\":\"test2.mock\"\n  }, {\n    \"pathname\":\"/rest/path/{arg1}/{arg2}-{arg3}\",\n    \"tpl\":\"rest.mock\"\n  }, {\n    \"pathname\":\"/rest/{method}/{arg1}/{arg2}-{arg3}\",\n    \"apiKey\":\"method=list\",\n    \"tpl\":\"rest.list.mock\"\n  }, {\n    \"pathname\":\"/rest\",\n    \"apiKey\":\"method=list\",\n    \"tpl\":\"rest.method.list.mock\"\n  }]\n}\n```\n\n##### 支持REST风格\n\n使用`{参数名}`的方式如：/rest/{method}/{arg1}/{arg2}-{arg3}\n\n##### 支持使用请求参数（GET、POST、REST）区分不同的接口\n\n`\"apiKey\":\"参数名=参数值\"`如：\"apiKey\":\"method=list\"\n\n##### 参数说明：\n```\nhost：需要代理的域名，非必填\nip：需要代理的域名的ip，非必填，如果不填，相当于放弃proxy到源服务器。\nport：需要代理的域名的端口，非必填\nmock：请求路径和模板的匹配关系。\n  pathname：请求路径\n  apiKey: 请求参数（或rest中的参数）作为 key ，区分接口。使用等号分隔：参数名=参数值\n  tpl：mockJSON模板文件\n  statusCode：http请求返回码，默认如果模板正常则是200。\n  delay：http请求延时\n```\n\n##### test.mock\n\n```\n{\n  \"string|1-10\": \"★\",\n  \"string|3\": \"★★★\",\n  \"number1|+1\": 202,\n  \"number2|1-100\": 100,\n  \"number3|1-100.1-10\": 1,\n  \"number4|123.1-10\": 1,\n  \"number5|123.10\": 1.123\n}\n```\n\n##### 在mockjs的基础上扩展对GET、POST请求参数，以及REST风格参数的支持\n>1、不支持多媒体类型上传数据；2、使用方括号包含参数名，如：@GET['id']；3、如果为key，必须使用双引号将请括起来如：\"get\": \"@GET['id']\"\n\n```\n{\n  \"get\": \"@GET['id']\",\n  \"post|3\": \"@POST['user']\",\n  \"number1|+@GET['idstep']\": 202,\n  \"number2|1-100\": \"@REST['number2']\",\n  \"number3|1-100.1-10\": 1,\n  \"number4|123.1-10\": 1,\n  \"number5|123.10\": 1.123\n}\n```\n\nmock文件示例1：pageIndex、pageSize分页\n\n```\n{\n  \"errorCode\":0,\n  \"message\":\"success\",\n  \"data|@GET['pageSize']\":[{\n    \"pageIndex\":\"@GET['pageIndex']\",\n    \"pageSize\":\"@GET['pageSize']\",\n    \"index|+1\":1,\n    \"id\": function(){\n      return (this.pageIndex - 1) * this.pageSize + this.index;\n    },\n    \"content\":\"@cparagraph(2)\"\n  }],\n  \"total\": 83,\n  \"pageIndex\":\"@GET['pageIndex']\",\n  \"pageSize\":\"@GET['pageSize']\",\n  \"totalPageCount\": function(){\n    return Math.ceil(this.total / this.pageSize);\n  },\n  \"more\": function(){\n    return this.totalPageCount - this.pageIndex > 0;\n  }\n}\n```\n?pageIndex=2&pageSize=3 输出\n\n```json\n{\n  errorCode: 0,\n  message: \"success\",\n  data: [\n    {\n      pageIndex: \"2\",\n      pageSize: \"3\",\n      index: 1,\n      content: \"始属拉型文们表区外最必比将气或所。办联毛受料但平党马市想群片统技必问。\",\n      id: 4\n    },\n    {\n      pageIndex: \"2\",\n      pageSize: \"3\",\n      index: 2,\n      content: \"年采质性带必安技反书化度或者省专集结。每厂响无局空养更机那精其节。\",\n      id: 5\n    },\n    {\n      pageIndex: \"2\",\n      pageSize: \"3\",\n      index: 3,\n      content: \"三决通商志验空从五质给手己。但间温向准你青交保果决器区已候老酸须。\",\n      id: 6\n    }\n  ],\n  total: 83,\n  pageIndex: \"2\",\n  pageSize: \"3\",\n  totalPageCount: 28,\n  more: true\n}\n```\n\n\nmock文件示例2：start、length分页\n\n```\n{\n  \"errorCode\":0,\n  \"message\":\"success\",\n  \"data|@GET['length']\":[{\n    \"start\":\"@GET['start']\",\n    \"length\":\"@GET['length']\",\n    \"index|+1\":1,\n    \"id\": function(){\n      return +this.start - 1 + this.index;\n    },\n    \"content\":\"@cparagraph(2)\"\n  }],\n  \"total\": 83,\n  \"start\":\"@GET['start']\",\n  \"length\":\"@GET['length']\",\n  \"more\": function(){\n    return this.total - this.start - this.length > 0;\n  }\n}\n```\n\n/test?start=70&length=5 输出\n\n```json\n{\n  errorCode: 0,\n  message: \"success\",\n  data: [\n    {\n      start: \"71\",\n      length: \"3\",\n      index: 1,\n      content: \"任须住形些速社主新变经属国公话做细。指马达省步国信所子体安路已走格。\",\n      id: 71\n    },\n    {\n      start: \"71\",\n      length: \"3\",\n      index: 2,\n      content: \"二即适权世花同想真近月计观精条等。全别毛叫统属维两过完观天些为验队除。\",\n      id: 72\n    },\n    {\n      start: \"71\",\n      length: \"3\",\n      index: 3,\n      content: \"路必些型眼然其工社维克通当意。取斯走全维市作断内极之干因车政。\",\n      id: 73\n    }\n  ],\n  total: 83,\n  start: \"71\",\n  length: \"3\",\n  more: true\n}\n```\n\n##### host\n\n`127.0.0.1 api.example.com`\n\n##### nginx conf 配置\n\n```\nserver {\n    listen 80;\n    server_name api.example.com;\n    charset utf-8;\n    autoindex       on;\n    autoindex_exact_size    on;\n    index index.html;\n\n    location ~ / {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-NginX-Proxy true;\n      proxy_set_header x-request-filename $request_filename;\n      proxy_set_header Host             $host;\n      proxy_pass http://127.0.0.1:7071;\n      proxy_redirect off;\n    }\n}\n```","starsCount":1,"created":"2016-08-17T09:38:12.541Z","modified":"2017-04-21T01:41:45.056Z","lastPublisher":{"name":"hbxeagle","email":"hbxeagle@gmail.com"},"owners":[{"name":"hbxeagle","email":"hbxeagle@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-mock-json-server","_nodeVersion":"6.10.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/http-mock-json-server-0.2.2.tgz_1489463961109_0.1908009764738381"},"_npmUser":{"name":"hbxeagle","email":"hbxeagle@gmail.com"},"_npmVersion":"3.10.10","_rev":"6-87b82be52cd6c40889640eddbf9f231b","_shasum":"904b168aaeed6af529388a1d068aee4630d1888a","author":{"name":"hbxeagle"},"bugs":{"url":"https://github.com/hbxeagle/http-mock-json-server/issues"},"directories":{},"dist-tags":{"latest":"0.2.2"},"dist":{"shasum":"904b168aaeed6af529388a1d068aee4630d1888a","tarball":"https://registry.npmjs.org/http-mock-json-server/-/http-mock-json-server-0.2.2.tgz"},"maintainers":[{"name":"hbxeagle","email":"hbxeagle@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-21T01:41:45.056Z","created":"2016-08-17T09:38:12.541Z","0.1.0-beta1":"2016-08-17T09:38:12.541Z","0.1.0-beta2":"2016-08-18T09:12:57.926Z","0.1.0":"2016-08-19T02:21:22.218Z","0.1.1":"2016-08-19T02:29:30.355Z","0.1.2":"2016-09-05T07:05:49.087Z","0.1.3":"2016-09-26T02:33:05.177Z","0.1.4":"2016-11-02T08:32:40.392Z","0.2.0":"2016-12-16T07:24:58.462Z","0.2.1":"2016-12-22T03:08:09.607Z","0.2.2":"2017-03-14T03:59:21.334Z"},"users":{"sternelee":true}}}