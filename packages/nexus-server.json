{"name":"nexus-server","description":"Simple remote file storage server over HTTP","version":"0.0.1-alpha2","license":"MIT","keywords":["storage","file","remote","streams"],"repository":"https://github.com/MichielvdVelde/nexus-server","dependencies":{"debug":"^2.6.3"},"gitHead":"30046bad985ceaf938f0cd14f827d2fc1295a19b","homepage":"https://github.com/MichielvdVelde/nexus-server#readme","scripts":{},"versions":[{"number":"0.0.1-alpha","date":"2017-04-09T21:00:29.516Z"},{"number":"0.0.1-alpha2","date":"2017-04-20T17:04:02.885Z"}],"readme":"# Nexus\r\n\r\n[![Standard - JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\r\n\r\nNexus is a simple remote file storage server over HTTP. Easily create, read and update\r\nfiles remotely, using only HTTP. With an easy to use HTTP API and [node.js client](http://github.com/MichielvdVelde/nexus-client-http),\r\nit's fast to set up and use.\r\n\r\n> Nexus is currently **an alpha version**. Use at your own risk.\r\n\r\n> **Important**: The version you see here MAY NOT be the one currently published\r\n> on npm! To check the latest published version, [look at the package on npm](https://www.npmjs.com/package/nexus-server).\r\n\r\nDocumentation is sparse at the moment, I will write some more later. In the mean\r\ntime take a look at the source code if you're interested.\r\n\r\n## Features\r\n\r\n* Simple to use HTTP API\r\n  * To download a file, simply make a request: `GET /my/resource.json`\r\n  * To upload a file, make another simple request: `PUT /my/resource.json` (`POST` works too)\r\n* The given path is the resource path\r\n  * Extensions are optional, but a resource will **always** be a file\r\n  * E.g. `/resource`, `/resource.json`, `/dir/subdir/another/resource`\r\n* Support for **read** (r), **write** (w) and **append** (a) modes (may depend on the store used)\r\n* Abstracts file handling, making it possible to use multiple types of stores\r\n\r\n## Roadmap\r\n\r\n**Soon**\r\n\r\n* Support partial content and `Range` headers\r\n\r\n**Longer**\r\n\r\n* Support for authentication\r\n* Maybe look into making core functionality transport-independent\r\n  * WebSocket support would make a nice addition\r\n  * Vanilla TCP might be fun too\r\n\r\n## Install\r\n\r\n```\r\nnpm install nexus-server\r\n```\r\n\r\n## Stores\r\n\r\nIn order to get Nexus running, you need a store. As the name suggests, a store is\r\nwhere your files will be... stored. Nexus abstracts file handling, providing a\r\nlot of flexibility in what storage back-ends to use.\r\n\r\nBy default Nexus comes bundled with `FileStore`, a store which uses the local file\r\nsystem to store resources. Because the store is so important, you'll have to set\r\none manually.\r\n\r\nIt's simple to make your own store, as they use streams. Any object which has the\r\nmethods `createReadStream(resource, mode)` and `createWriteStream(resource, mode)`\r\nand which return a Promise that resolves in the appropriate stream will work fine.\r\nFor an example, see [FileStore.js](./lib/FileStore.js).\r\n\r\n## Setting up a server\r\n\r\nA few lines of code say more than a thousand words.\r\n\r\n```js\r\nconst path = require('path')\r\nconst Nexus = require('nexus-server')\r\n\r\nconst server = new Nexus.Server({\r\n  // FileStore requires an absolute path!\r\n  store: new Nexus.FileStore(path.resolve(process.cwd(), './resources'))\r\n})\r\n\r\nserver.listen().then(() => {\r\n  // Get the address from the underlying http.Server\r\n  const address = server.server.address()\r\n  console.log(`server listening on ${address.address}:${address.port}`)\r\n}).catch(err => {\r\n  console.error(`error starting server: ${err.message}`)\r\n})\r\n```\r\n\r\n### Enabling SSL\r\n\r\nBy setting `options.secure` to `true` and providing the appropriate keys and/or\r\ncertificates in the options object, HTTPS will be enabled and your connection\r\nwill be secure.\r\n\r\nNote that Nexus uses `http.Server`, so all options that can be provided to\r\n`https.createServer([options])` will be valid for use.\r\n\r\n```js\r\nconst server = new Nexus.Server({\r\n  secure: true,\r\n  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\r\n  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')\r\n})\r\n```\r\n\r\n[![Standard - JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\r\n\r\n## License\r\n\r\nCopyright 2017 [Michiel van der Velde](http://www.michielvdvelde.nl).\r\n\r\nThis software is licensed under the [MIT License](LICENSE).\r\n","created":"2017-04-09T21:00:29.516Z","modified":"2017-04-20T17:04:02.885Z","lastPublisher":{"name":"michielvdvelde","email":"michiel@michielvdvelde.nl"},"owners":[{"name":"michielvdvelde","email":"michiel@michielvdvelde.nl"}],"other":{"_attachments":{},"_from":".","_id":"nexus-server","_nodeVersion":"7.1.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/nexus-server-0.0.1-alpha2.tgz_1492707840729_0.42048204923048615"},"_npmUser":{"name":"michielvdvelde","email":"michiel@michielvdvelde.nl"},"_npmVersion":"3.10.9","_rev":"2-6b0d0c5add7ca2b7a7e88b1353da0ddc","_shasum":"6bda39b50dfe1d5252f24942719c74ee5338e4a7","author":{"name":"Michiel van der Velde","email":"michiel@michielvdvelde.nl"},"bugs":{"url":"https://github.com/MichielvdVelde/nexus-server/issues"},"directories":{},"dist-tags":{"latest":"0.0.1-alpha2"},"dist":{"shasum":"6bda39b50dfe1d5252f24942719c74ee5338e4a7","tarball":"https://registry.npmjs.org/nexus-server/-/nexus-server-0.0.1-alpha2.tgz"},"maintainers":[{"name":"michielvdvelde","email":"michiel@michielvdvelde.nl"}],"readmeFilename":"README.md","time":{"modified":"2017-04-20T17:04:02.885Z","created":"2017-04-09T21:00:29.516Z","0.0.1-alpha":"2017-04-09T21:00:29.516Z","0.0.1-alpha2":"2017-04-20T17:04:02.885Z"}}}