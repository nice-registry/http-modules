{"name":"express-http-proxy-preintercept","version":"0.9.1","description":"http proxy middleware for express","engines":{"node":">=4.0.0"},"engineStrict":true,"main":"index.js","scripts":{"test":"npm -s run mocha && npm run -s lint && npm run -s jscs","test:debug":"mocha debug -R spec test/*.js","mocha":"mocha -R spec test/*.js","lint":"jshint index.js test/*.js","jscs":"jscs index.js test/*.js"},"repository":"https://github.com/villadora/express-http-proxy","keywords":["express-http-proxy"],"license":"MIT","devDependencies":{"body-parser":"^1.15.2","express":"^4.3.1","jscs":"^3.0.7","jshint":"^2.5.5","mocha":"^2.1.0","supertest":"^1.2.0"},"dependencies":{"es6-promise":"^3.2.1","raw-body":"^2.1.7"},"gitHead":"639568f74d7f75a1aedbd658216ddb66de926f6e","homepage":"https://github.com/villadora/express-http-proxy#readme","versions":[{"number":"0.9.1","date":"2017-02-13T19:25:16.632Z"}],"readme":"# express-http-proxy [![NPM version](https://badge.fury.io/js/express-http-proxy.svg)](http://badge.fury.io/js/express-http-proxy) [![Build Status](https://travis-ci.org/villadora/express-http-proxy.svg?branch=master)](https://travis-ci.org/villadora/express-http-proxy) [![Dependency Status](https://gemnasium.com/villadora/express-http-proxy.svg)](https://gemnasium.com/villadora/express-http-proxy)\n\nExpress proxy middleware to forward request to another host and pass response back\n\n## Install\n\n```bash\n$ npm install express-http-proxy --save\n```\n\n## Usage\n```js\nproxy(host, options);\n```\n\nTo proxy URLS starting with '/proxy' to the host 'www.google.com':\n\n```js\nvar proxy = require('express-http-proxy');\n\nvar app = require('express')();\n\napp.use('/proxy', proxy('www.google.com'));\n```\n\n### Options\n\n\n\n#### forwardPath\n\nThe ```forwardPath``` option allows you to modify the path prior to proxying the request.\n\n```js\nvar proxy = require('express-http-proxy');\n\nvar app = require('express')();\n\napp.use('/proxy', proxy('www.google.com', {\n  forwardPath: function(req, res) {\n    return require('url').parse(req.url).path;\n  }\n}));\n```\n#### forwardPathAsync\n\nThe ```forwardPathAsync``` options allows you to modify the path asyncronously prior to proxying the request, using Promises.\n\n```js\napp.use(proxy('httpbin.org', {\n  forwardPathAsync: function() {\n    return new Promise(function(resolve, reject) {\n      // ...\n      // eventually\n      resolve( /* your resolved eorwardPath as string */ )\n    });\n  }\n}));\n```\n\n#### filter\nThe ```filter``` option can be used to limit what requests are proxied. For example, if you only want to proxy get request\n\n```js\napp.use('/proxy', proxy('www.google.com', {\n  filter: function(req, res) {\n     return req.method == 'GET';\n  },\n  forwardPath: function(req, res) {\n    return require('url').parse(req.url).path;\n  }\n}));\n```\n\n#### intercept\nYou can intercept the response before sending it back to the client.\n\n```js\napp.use('/proxy', proxy('www.google.com', {\n  intercept: function(rsp, data, req, res, callback) {\n    // rsp - original response from the target\n    data = JSON.parse(data.toString('utf8'));\n    callback(null, JSON.stringify(data));\n  }\n}));\n```\n\n#### preIntercept\nSimilar to `intercept`, but is executed before the request was actually sent.\n\nCan be used to modify headers, while `intercept` stage is too late for this.\n\n```js\napp.use('/proxy', proxy('www.google.com', {\n  preIntercept: function(res) {\n    var cookie = res.headers['set-cookie'];\n    if (cookie) {\n      // Make HTTPS -> HTTP proxying work correctly.\n      if (Array.isArray(cookie)) {\n        res.headers['set-cookie'] = cookie.map(function(item) {\n          item.replace('secure; ', '');\n        });\n      }\n      delete res.headers['strict-ransport-security'];\n    }\n  }\n}));\n```\n\n#### decorateRequest\n\nYou can change the request options before it is sent to the target.\n\n```js\napp.use('/proxy', proxy('www.google.com', {\n  decorateRequest: function(proxyReq, originalReq) {\n    // you can update headers\n    proxyReq.headers['Content-Type'] = 'text/html';\n    // you can change the method\n    proxyReq.method = 'GET';\n    // you can munge the bodyContent.\n    proxyReq.bodyContent = proxyReq.bodyContent.replace(/losing/, 'winning!');\n    return proxyReq;\n  }\n}));\n\n```\n\n#### preserveHostHdr\n\nYou can copy the host HTTP header to the proxied express server using the `preserveHostHdr` option.\n\n```\napp.use('/proxy', proxy('www.google.com', {\n  preserveHostHdr: true\n}));\n```\n#### reqAsBuffer\n\nNote: this is an experimental feature.  ymmv\n\nThe ```reqAsBuffer``` option allows you to ensure the req body is encoded as a Node\n```Buffer``` when sending a proxied request.   Any value for this is truthy.\n\nThis defaults to to false in order to preserve legacy behavior. Note that\nthe value of ```reqBodyEnconding``` is used as the encoding when coercing strings\n(and stringified JSON) to Buffer.\n\n```js\napp.use('/proxy', proxy('www.google.com', {\n  reqAsBuffer: true\n}));\n```\n\n#### reqBodyEncoding\n\nEncoding used to decode request body. Defaults to ```utf-8```.\n\nUse ```null``` to preserve as Buffer when proxied request body is a Buffer. (e.g image upload)\nAccept any values supported by [raw-body](https://www.npmjs.com/package/raw-body#readme).\n\nThe same encoding is used in the intercept method.\n\n```\napp.use('/post', proxy('httpbin.org', {\n  reqBodyEncoding: null\n}));\n```\n\n\n#### timeout\n\nBy default, node does not express a timeout on connections.   Use timeout option to impose a specific timeout.    Timed-out requests will respond with 504 status code and a X-Timeout-Reason header.\n\n```js\napp.use('/', proxy('httpbin.org', {\n  timeout: 2000  // in milliseconds, two seconds\n}));\n```\n\n\n## Questions\n\n### Q: Can it support https proxy?\n\nThe library will use https if the provided path has 'https://' or ':443'.   You can use decorateRequest to ammend any auth or challenge headers required to succeed https.\n\n\nHere is an older answer about using the https-proxy-agent package.   It may be useful if the included functionality in ```http-express-proxy``` does not solve your use case.\n\nA:  Yes, you can use the 'https-proxy-agent' package. Something like this:\n\n```js\nvar corporateProxyServer = process.env.HTTP_PROXY || process.env.http_proxy || process.env.HTTPS_PROXY || process.env.https_proxy;\n\nif (corporateProxyServer) {\n  corporateProxyAgent = new HttpsProxyAgent(corporateProxyServer);\n}\n```\n\nThen inside the decorateRequest method, add the agent to the request:\n\n```js\n  req.agent = corporateProxyAgent;\n```\n\n## Release Notes\n\n| Release | Notes |\n| --- | --- |\n| 0.9.1 | Documentation updates.  Set 'Accept-Encoding' header to match bodyEncoding. |\n| 0.9.0 | Better handling for request body when body is JSON. |\n| 0.8.0 | Features:  add forwardPathAsync option <br />Updates:  modernize dependencies <br />Fixes: Exceptions parsing proxied response causes error: Can't set headers after they are sent. (#111) <br />If client request aborts, proxied request is aborted too (#107) |\n| 0.7.4 | Move jscs to devDependencies to avoid conflict with nsp. |\n| 0.7.3 | Adds a timeout option.   Code organization and small bug fixes. |\n| 0.7.2 | Collecting many minor documentation and test improvements. |\n| 0.4.0 | Signature of `intercept` callback changed from `function(data, req, res, callback)` to `function(rsp, data, req, res, callback)` where `rsp` is the original response from the target |\n\n## Licence\n\nMIT\n<!-- do not want to make nodeinit to complicated, you can edit this whenever you want. -->\n","created":"2017-02-13T19:25:16.632Z","modified":"2017-02-13T19:25:16.632Z","lastPublisher":{"name":"paulmillr","email":"paul@paulmillr.com"},"owners":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"other":{"_attachments":{},"_from":".","_id":"express-http-proxy-preintercept","_nodeVersion":"7.5.0","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/express-http-proxy-preintercept-0.9.1.tgz_1487013915800_0.12900205235928297"},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"_npmVersion":"4.1.2","_rev":"1-30e857a70d6d5ce5fc82dbb8fe6b24a4","_shasum":"dc5c94adf697bc01cb8be871d432110be6072e7f","author":{"name":"villadora","email":"jky239@gmail.com"},"bugs":{"url":"https://github.com/villadora/express-http-proxy/issues"},"contributors":[{"name":"Liam Bennett"},{"name":"eldereal","url":"https://github.com/eldereal"},{"name":"Saulius Menkevičius","url":"https://github.com/razzmatazz"},{"name":"Jérémy Lal","email":"kapouer@melix.org"},{"name":"Wei Gao","email":"jky239@gmail.com"},{"name":"Nik Krimm","url":"https://github.com/monkpow"}],"directories":{},"dist-tags":{"latest":"0.9.1"},"dist":{"shasum":"dc5c94adf697bc01cb8be871d432110be6072e7f","tarball":"https://registry.npmjs.org/express-http-proxy-preintercept/-/express-http-proxy-preintercept-0.9.1.tgz"},"maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"readmeFilename":"README.md","time":{"modified":"2017-02-13T19:25:16.632Z","created":"2017-02-13T19:25:16.632Z","0.9.1":"2017-02-13T19:25:16.632Z"}}}