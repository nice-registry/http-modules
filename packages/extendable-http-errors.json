{"name":"extendable-http-errors","version":"1.1.4","description":"Extendable http error for node server using es2015, covers most HTTP default errors and allow extending them for custom errors.","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["http","error","errors","custom","creator","factory","http-error","http-errors"],"license":"MIT","dependencies":{"lodash-uuid":"0.0.3"},"repository":"https://github.com/joni7777/extendable-http-errors","gitHead":"5110d691d2318b86644522b66758df2056fcf043","homepage":"https://github.com/joni7777/extendable-http-errors#readme","_resolved":"file:extendable-http-errors","versions":[{"number":"1.0.0","date":"2016-11-28T09:40:14.751Z"},{"number":"1.0.1","date":"2016-11-28T09:41:51.873Z"},{"number":"1.0.2","date":"2016-11-28T09:44:17.388Z"},{"number":"1.0.3","date":"2016-11-28T11:51:42.867Z"},{"number":"1.0.4","date":"2016-11-28T11:54:15.582Z"},{"number":"1.0.5","date":"2016-11-28T13:29:36.750Z"},{"number":"1.0.7-cd","date":"2016-11-28T15:15:33.583Z"},{"number":"1.0.7","date":"2016-11-28T15:15:48.564Z"},{"number":"1.1.0","date":"2016-12-04T14:21:13.505Z"},{"number":"1.1.1","date":"2016-12-06T08:13:36.753Z"},{"number":"1.1.2","date":"2016-12-09T17:42:07.420Z"},{"number":"1.1.3","date":"2016-12-09T17:47:45.268Z"},{"number":"1.1.4","date":"2016-12-15T08:40:55.032Z"}],"readme":"#Extendable Http Errors\n\n[![Version npm](https://img.shields.io/npm/v/extendable-http-errors.svg?style=flat-square)](https://www.npmjs.com/package/extendable-http-errors)\n\n[![NPM](https://nodei.co/npm/extendable-http-errors.png?downloads=true&downloadRank=true)](https://nodei.co/npm/extendable-http-errors/)\n\n##Introduction\n\n> Error creator for creating custom made and common HTTP errors for node application.\n> Each http error contains the http status.\n> The user can define the error code for the application to identify.\n\n##Implemented Http Errors\n* BadRequestError\n* ForbiddenError\n* ImATeapot\n* InternalServerError\n* NotFoundError\n* NotImplementedError\n* ServiceUnAvailable\n* UnauthorizedError\n\n##Installation\n\n> npm install extendable-http-errors --save\n\n##Code Samples\n\n* [Use specific http error](#use-specific-http-error)\n* [Make all errors global](#make-all-errors-global)\n* [Custom Http Error](#custom-http-error)\n* [Convert error to object to send to the client](#convert-error-to-object-to-send-to-the-client)\n* [Convert error to object](#convert-error-to-object)\n* [Wrap if not wrapped unknown error](#wrap-if-not-wrapped-unknown-error)\n\n###Use specific http error:\n```\nconst httpErrors = require('extendable-http-errors').httpErrors;\n\n//No need to change status it got the default type of http error status\nfunction (req, res, next) {    \n    let errMsg = \"Error Route Not Found\";\n    let section = \"Routes\";\n    let code = 9404; //error code for the client to identify the error\n    let params = {url: req.url};\n    \n    let err = new httpErrors.NotFoundError(errMsg, section, code, params);\n    next(err);\n}\n\n```\n\n[Back to top](#code-samples)\n\n###Make all errors global\n``` \nrequire('extendable-http-errors').initGlobalErrors();\n\nconsole.log(new InternalServerError(\"Internal Server Error\", \"Core\", 9500)); \n```\n\n```\nInternalServerError: Interl Server Error\n  at /Users/Username/WebstormProjects/Project/app.js:12:15\n  at Layer.handle [as handle_request] (/Users/Username/WebstormProjects/Project/node_modules/express/lib/router/layer.js:95:5)\n  at next (/Users/Username/WebstormProjects/Project/node_modules/express/lib/router/route.js:131:13)\n  at Route.dispatch (/Users/Username/WebstormProjects/Project/node_modules/express/lib/router/route.js:112:3)\n  at Layer.handle [as handle_request] (/Users/Username/WebstormProjects/Project/node_modules/express/lib/router/layer.js:95:5)\n  at /Users/Username/WebstormProjects/Project/node_modules/express/lib/router/index.js:277:22\n  at Function.process_params (/Users/Username/WebstormProjects/Project/node_modules/express/lib/router/index.js:330:12)\n  at next (/Users/Username/WebstormProjects/Project/node_modules/express/lib/router/index.js:271:10)\n  at expressInit (/Users/Username/WebstormProjects/Project/node_modules/express/lib/middleware/init.js:33:5)\ncode: 9500,\nsection: 'Core',\nuuid: '8a77fc8b-601c-4fbb-89df-570ced4fa42b'\n```\n[Back to top](#code-samples)\n\n###Custom http error\n> Before changing the 'this',\n> need to call the super method so the new extended error could be changed.\n\n```\nconst extendableHttpErrors = require('extendable-http-errors');\n\nclass BadLoginRequest extends extendableHttpErrors.httpErrors.BadRequestError {\n    constructor(msg, section, code, reason){\n        reason = reason.toUpperCase();\n        super(msg, section, code, {reason: reason});\n    }\n}\n\nconst customErrors = {\n    BadLoginRequest\n};\n\nextendableHttpErrors.initGlobalErrors(customErrors);\n\nconsole.log(new BadLoginRequest(\"Bad Login Request!\", \"SpecialLogin\", 9876, \"User is not special enough\"));\n```\n[Back to top](#code-samples)\n\n###Convert error to object to send to the client\n```\nconst extendableHttpErrors = require('extendable-http-errors');\n\nconst app = express();\nconst customErrors = {\n    CustomError: require('./errors/custom-error')\n};\n\nextendableHttpErrors.initGlobalErrors(customErrors);\n\napp.use(extendableHttpErrors.prettifyErrorMiddleware);\n\napp.get('/', function (req, res, next) {\n    let err = new CustomError(\"Custom Error!!\", \"Custom\", 9876, \"User is not custom enough\");\n    next(err);\n});\n\n//Error Handler\napp.use(function (err, req, res, next) {\n    res.status(err.status).json(err);\n});\n```\n[Back to top](#code-samples)\n\n###Convert error to object\n```\nconst extendableHttpErrors = require('extendable-http-errors');\n\nconst app = express();\nconst customErrors = {\n    CustomError: require('./errors/custom-error')\n};\n\nextendableHttpErrors.initGlobalErrors(customErrors);\n\napp.get('/', function (req, res, next) {\n    let err = new CustomError(\"Custom Error!!\", \"Custom\", 9876, \"User is not custom enough\");\n    next(err);\n});\n\n//Error Handler\napp.use(function (err, req, res, next) {\n    err = extendableHttpErrors.prettifyErrorFunction(err);\n    res.status(err.status).json(err);\n});\n```\n\n###Wrap if not wrapped unknown error\n> If the error is already created from the extendable-http-errors it will return it self,\n> otherwise it will create new extendable-http-errors Error with the message of the new error.\n\n```\nconst extendableHttpErrors = require('extendable-http-errors');\n\nconst app = express();\nconst customErrors = {\n    CustomError: require('./errors/custom-error')\n};\n\nextendableHttpErrors.initGlobalErrors(customErrors);\n\napp.use(extendableHttpErrors.prettifyErrorMiddleware);\n\napp.get('/', function (req, res, next) {\n    let err = new CustomError(\"Custom Error!!\", \"Custom\", 9876, \"User is not custom enough\");\n    next(err);\n});\n\n//Error Handler\napp.use(function (err, req, res, next) {\n    //If error is already created from the extendable-errors,\n    //it will throw it self otherwise it will wrap it with bad request error.\n    res.status(err.status).json(BadRequestError.wrapIfNotWrapped(err)); \n});\n```\n[Back to top](#code-samples)","starsCount":1,"created":"2016-11-28T09:40:14.751Z","modified":"2016-12-15T08:40:55.032Z","lastPublisher":{"name":"joni7777","email":"jonathan_erel@adsap.co"},"owners":[{"name":"joni7777","email":"jonathan_erel@adsap.co"}],"other":{"_attachments":{},"_from":"extendable-http-errors","_id":"extendable-http-errors","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/extendable-http-errors-1.1.4.tgz_1481791253259_0.08239544625394046"},"_npmUser":{"name":"joni7777","email":"jonathan_erel@adsap.co"},"_npmVersion":"3.10.8","_rev":"14-c1959fe24149a9ac42440f5f6d80784b","_shasum":"5f9ae4f8eeaeb2aaeb0c1a9989b21f99508d8773","author":{"name":"Jonathan Erel"},"bugs":{"url":"https://github.com/joni7777/extendable-http-errors/issues"},"directories":{},"dist-tags":{"latest":"1.1.4"},"dist":{"shasum":"5f9ae4f8eeaeb2aaeb0c1a9989b21f99508d8773","tarball":"http://registry.npmjs.org/extendable-http-errors/-/extendable-http-errors-1.1.4.tgz"},"maintainers":[{"name":"joni7777","email":"jonathan_erel@adsap.co"}],"readmeFilename":"README.md","time":{"modified":"2016-12-15T08:40:55.032Z","created":"2016-11-28T09:40:14.751Z","1.0.0":"2016-11-28T09:40:14.751Z","1.0.1":"2016-11-28T09:41:51.873Z","1.0.2":"2016-11-28T09:44:17.388Z","1.0.3":"2016-11-28T11:51:42.867Z","1.0.4":"2016-11-28T11:54:15.582Z","1.0.5":"2016-11-28T13:29:36.750Z","1.0.7-cd":"2016-11-28T15:15:33.583Z","1.0.7":"2016-11-28T15:15:48.564Z","1.1.0":"2016-12-04T14:21:13.505Z","1.1.1":"2016-12-06T08:13:36.753Z","1.1.2":"2016-12-09T17:42:07.420Z","1.1.3":"2016-12-09T17:47:45.268Z","1.1.4":"2016-12-15T08:40:55.032Z"},"users":{"joni7777":true}}}