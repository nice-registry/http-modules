{"name":"literapi","version":"0.3.2","description":"Literate testing for HTTP APIs using markdown","keywords":["testing","test","api","rest","http","documentation","docs","literate"],"homepage":"https://github.com/agnoster/literapi","main":"./lib/index.js","repository":"https://github.com/agnoster/literapi","bin":{"literapi":"./bin/literapi"},"preferGlobal":true,"scripts":{"test":"make tap"},"dependencies":{"mocha":"~1.6.0","request":"~2.10","markdownstream":"0.0.3","jsonexp":"0.0.3","debug":"~0.7.0","async":"~0.1.22","underscore":"~1.4.2","optimist":"~0.3.5","hacktrace":"0.0.1"},"devDependencies":{"express":"~3.0","should":"~1.2.0","gently":"~0.9.2"},"engines":{"node":">0.6.0","npm":"1.1.x"},"readme":"# LiterAPI\n\nLiterAPI is a tool for defining, documenting, and testing an API by simply writing example API calls in a markdown document. It is currently intended only for testing APIs that return JSON, and are described in a Markdown file.\n\nIn essence, you write a couple examples in your doc/spec and - *BAM* - LiterAPI turns those into executable tests.\n\n## Installation\n\n    npm install -g literapi\n\n(If you don't have [npm], you really should.)\n\n## Usage\n\n    literapi [API root URI] [testfile1] [testfile2] ...\n\n## Example\n\nIf you had the file `example.md`:\n\n    # Todo API\n\n    ## Listing tasks\n\n        GET /tasks/\n\n    Returns an empty list:\n\n        200 OK\n        Content-Type: application/json\n\n        []\n\nExecuting it like this:\n\n    literapi http://api.example.com/v1/ example.md\n\nWould give the output:\n\n    GET /tasks/\n    ✓ 200 OK\n    ✓ content-type: application/json\n    ✓ []\n    \n    ✓ OK » 3 honored (0.112s)\n\n## Goals\n\n* **Be readable** - LiterAPI should guide people to make specs that can be read easily by people unfamiliar with the project, so they quickly know how to use the API. Much like Markdown itself, a LiterAPI spec document should be readable without running it through anything else\n\n* **Be fast** - Running tests isn't the funnest thing. Making it fast - which means running tests asynchronously - is the best way to make it fun to use\n\n* **Be easy** - While of course documentation is essential, it should be easy to write LiterAPI specs without thinking too much about the syntax. To that end, it hews as close to standard HTTP and other conventions from programming as possible.\n\n## Format\n\nThe format is simple: You write a markdown file. Any code block that begins something like `VERB /path` will be considered a request, and any code block that begins with a 3-digit numeric code will be considered a response.\n\n### Request format\n\nA request looks like this:\n\n    VERB /path/to/resource\n    Request-Header: ...\n\n    POST DATA GOES HERE\n\nThe HTTP request will be sent basically as-is, with the exception of `Host` and `Content-Length` headers, which will be calculated automatically.\n\n### Response format\n\nA response looks like this:\n\n    CODE Status Message\n    Required-Response-Header: ...\n\n    { \"data\": \"is all JSON-encoded\" }\n\nAcceptance criteria:\n\n  * The CODE *must* match the CODE of the response\n  * Any header defined *must* appear in the response, but additional headers *may* be returned. The order is free.\n  * The data returned will be JSON-decoded and compared with the expected response. The objects must be identical. If no expected response data is given, the response body must be blank.\n\n## Advanced Format\n\nSometimes, literally matching the response just isn't powerful enough. For this reason, there are some extra tools that LiterAPI gives you.\n\n### Variables\n\nAny uppercase text enclosed in square brackets (such as `[USER_ID]` or `[AUTH_TOKEN]`) is considered a *variable*. Since LiterAPI is declarative, all instances of a variable must match. Here's an example:\n\n    We post a new status update:\n\n        POST /status/\n\n        { \"text\": \"Hello World\" }\n\n    It gets a new ID assigned by the server:\n\n        201 Created\n\n        { \"id\": [STATUS_ID], \"text\": \"Hello World\" }\n\n    Then, when we ask for the status by id\n\n        GET /status/[STATUS_ID]\n\n    We get it back:\n\n        200 OK\n\n        { \"id\": [STATUS_ID], \"text\": \"Hello World\" }\n\nIn this example, the `[STATUS_ID]` will get set in the first server response, by simply matching whatever it sees there. This could be an integer, a string, or even an array or an object. From that moment on, the variable is *bound* - it cannot change for any reason. Thus, in the second test, if the `id` field of the response did not match what we got on creation, an error would be found.\n\nVariables may also be used in the path, and can be captured and inserted into headers:\n\n    We sign in:\n\n        POST /login\n\n        { \"email\": \"foobar@example.com\", \"password\": \"Fsy58qffAFt3498\" }\n\n    And get back an authentication token\n\n        200 OK\n        X-Auth-Token: [AUTH]\n\n    Which we can pass back to the server\n\n        GET /secret/resource\n        X-Auth-Token: [AUTH]\n\n    to get access to privileged content\n\n        200 OK\n\n        { \"privacy\": \"top_secret\", ... }\n\nThis last response brings us to our next topic: globs\n\n### Globs\n\nLiterAPI supports two kinds of globs: `*`, which matches any JSON value, and `...`, which matches any set of key-value pairs.\n\nThe `*` glob is useful if you care that a value is there, but not what it is. It can be thought of as a variable that does not capture any value. For example, you might write:\n\n    GET /status/1\n\n    200 OK\n\n    { \"id\": 1, \"text\": \"This entry was inserted previously\", \"created_at\": * }\n\nIn this instance, the response value would be required to have an `id` of 1, a `text` of \"This entry was inserted previously\", and a `created_at` field - however, the `created_at` field could be any value at all: a string, a number, a boolean, even an array or an object. If any of those fields were missing, we would get an error - but we would *also* get an error if any fields were returned that were not shown here.\n\nThe `...` glob is useful for just the case where we want to ensure certain fields are set, but there may be other fields we don't care to enumerate. Caution should, however, be exercised - part of the value of LiterAPI specs is that a reader can have a good impression of the full extent of the API, and thus, even if the testing of particular fields is not necessary, being strict will both ensure greater understandability of the markdown *and* additional protection from unforseen consequences if the API changes in any way.\n\nExample usage:\n\n    { \"id\": [USER_ID], \"name\": \"Joe Schmoe\", ... }\n\nThe `...` glob may also be used at the beginning or end of an array, such as:\n\n    { \"stream\": [\"first post!!!1\", \"second post\", ...] }\n\n## Contributing\n\nLiterAPI is licensed under an MIT License. Contributions and bug reports are welcome, please use Github for those purposes.\n\n### License\n\nCopyright (C) 2012 by Isaac Wolkerstorfer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n[npm]: http://npmjs.org/ \"Node Package Manager\"\n","versions":[{"number":"0.0.10","date":"2012-08-07T12:56:52.683Z"},{"number":"0.0.11","date":"2012-08-07T12:59:32.015Z"},{"number":"0.1.0","date":"2012-08-08T10:06:17.182Z"},{"number":"0.1.1","date":"2012-08-10T13:24:37.409Z"},{"number":"0.1.2","date":"2012-08-29T14:42:45.915Z"},{"number":"0.1.3","date":"2012-10-08T14:15:17.145Z"},{"number":"0.2.0","date":"2012-10-09T12:26:23.485Z"},{"number":"0.2.1","date":"2012-10-09T13:54:17.796Z"},{"number":"0.3.0","date":"2012-10-17T12:47:16.691Z"},{"number":"0.3.1","date":"2012-10-18T10:02:16.453Z"},{"number":"0.3.2","date":"2012-10-18T14:16:50.552Z"}],"starsCount":1,"created":"2012-08-07T12:56:50.723Z","modified":"2017-02-03T19:59:41.157Z","owners":[{"name":"agnoster","email":"agnoster@gmail.com"}],"other":{"_attachments":{},"_id":"literapi","_rev":"2-3283677544079113f3f96737d11007ac","author":{"name":"Isaac Wolkerstorfer","email":"agnoster@gmail.com"},"directories":{},"dist-tags":{"latest":"0.3.2"},"dist":{"shasum":"969ef5be2d9b942521aa97598bf80341cda09395","tarball":"http://registry.npmjs.org/literapi/-/literapi-0.3.2.tgz"},"maintainers":[{"name":"agnoster","email":"agnoster@gmail.com"}],"time":{"modified":"2017-02-03T19:59:41.157Z","created":"2012-08-07T12:56:50.723Z","0.0.10":"2012-08-07T12:56:52.683Z","0.0.11":"2012-08-07T12:59:32.015Z","0.1.0":"2012-08-08T10:06:17.182Z","0.1.1":"2012-08-10T13:24:37.409Z","0.1.2":"2012-08-29T14:42:45.915Z","0.1.3":"2012-10-08T14:15:17.145Z","0.2.0":"2012-10-09T12:26:23.485Z","0.2.1":"2012-10-09T13:54:17.796Z","0.3.0":"2012-10-17T12:47:16.691Z","0.3.1":"2012-10-18T10:02:16.453Z","0.3.2":"2012-10-18T14:16:50.552Z"},"users":{"pje":true}}}