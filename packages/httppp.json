{"name":"httppp","version":"0.2.1","description":"Deal with only the bits of HTTP you care about. Let the streams flow.","main":"index.js","engines":{"node":"~0.8.0 | ~0.10.0"},"repository":"https://github.com/deoxxa/httppp","keywords":["http","partial","raw","parse","stream","socket","data","proxy","header"],"license":"BSD","dependencies":{"readable-stream":"~1.0.2"},"readme":"HTTPPP\n======\n\nHyperText Transfer Protocol Partial Parser\n\nOverview\n--------\n\nHTTPPP lets you parse only the bits of HTTP that you really need. It is designed\nspecifically to aid in the creation of proxies that need to be fast and support\narbitrary HTTP-like protocols. It doesn't mess with the actual data being pushed\nthrough the connection, so it trivially supports websockets and other extensions\nthat rely on upgrade functionality or similar.\n\nInstallation\n------------\n\nAvailable via [npm](http://npmjs.org/):\n\n> $ npm install httppp\n\nOr via git:\n\n> $ git clone git://github.com/deoxxa/httppp.git node_modules/httppp\n\nAPI\n---\n\n**Parser constructor**\n\nConstructs a new httppp Parser object, optionally supplying some configuration\ninformation as an object.\n\n```javascript\nnew httppp.Parser(options);\n```\n\n```javascript\n// basic instantiation\nvar parser = new httppp.Parser();\n\n// instantiation with options\nvar parser = new httppp.Parser({maximumHeaderBytes: 4096});\n```\n\nArguments\n\n* _options_ - an object specifying configuration parameters. The only available\n  parameter right now is `maximumHeaderBytes`, which controls how many bytes the\n  parser will try to read before it gives up and emits an error saying that the\n  headers were too long.\n\n**#headers**\n\nThe \"headers\" event is emitted when httppp has decided that it's parsed all the\nheaders that are going to arrive. Note that this is only emitted once per\nconnection, with the implication of that being that you won't know about\npipelined requests.\n\nThe payload for the event is an array containing, in order, the request method,\nthe path being requested, and an object containing headers. The object's keys\nare the header names, and the values are arrays containing the values collected\nfor that header. The values are arrays because multiple headers with the same\nname may be sent (for example cookies).\n\n```javascript\nparser.on(\"headers\", onHeaders);\n```\n\n```javascript\nparser.on(\"headers\", function onHeaders(info) {\n  // \"GET\" or similar\n  console.log(info[0]);\n\n  // \"/\" or something\n  console.log(info[1]);\n\n  // {host: [\"127.0.0.1\"], cookie: [\"a=b\", \"c=d\"]}\n  console.log(info[2]);\n});\n```\n\nExample\n-------\n\nYou might want to look at [example.js](https://github.com/deoxxa/httppp/blob/master/example.js)\nas well.\n\n```javascript\nvar net = require(\"net\"),\n    http = require(\"http\"),\n    httppp = require(\"httppp\");\n\nvar server1_port = null,\n    server2_port = null;\n\nvar proxy = net.createServer(function(socket) {\n  var parser = new httppp.Parser();\n\n  socket.pipe(parser);\n\n  parser.on(\"error\", function() {\n    socket.end();\n  });\n\n  parser.on(\"headers\", function(info) {\n    console.log(new Date(), \"proxy headers\", info[0], info[1]);\n\n    var host = (info[2].host && info[2].host.length) ? info[2].host[0] : null;\n\n    // remove port from host header\n    if (host) {\n      host = host.split(\":\").shift();\n    }\n\n    switch (host) {\n      case \"localhost\": parser.pipe(net.connect({port: server1_port})).pipe(socket); break;\n      case \"127.0.0.1\": parser.pipe(net.connect({port: server2_port})).pipe(socket); break;\n      default: socket.end(); break;\n    }\n  });\n});\n\nproxy.listen(3000, function() {\n  console.log(\"listening on port\", this.address().port);\n});\n\nvar server1 = http.createServer(function(req, res) {\n  console.log(new Date(), \"http[1] request\", req.url);\n\n  res.end(\"hello there from server 1!\");\n});\n\nserver1.listen(function() {\n  server1_port = this.address().port;\n});\n\nvar server2 = http.createServer(function(req, res) {\n  console.log(new Date(), \"http[2] request\", req.url);\n\n  res.end(\"hello there from server 2!\");\n});\n\nserver2.listen(function() {\n  server2_port = this.address().port;\n});\n```\n\nLicense\n-------\n\n3-clause BSD. A copy is included with the source.\n\nContact\n-------\n\n* GitHub ([deoxxa](http://github.com/deoxxa))\n* Twitter ([@deoxxa](http://twitter.com/deoxxa))\n* ADN ([@deoxxa](https://alpha.app.net/deoxxa))\n* Email ([deoxxa@fknsrs.biz](mailto:deoxxa@fknsrs.biz))\n","versions":[{"number":"0.0.1","date":"2013-05-12T09:59:04.836Z"},{"number":"0.1.1","date":"2013-05-15T10:13:45.503Z"},{"number":"0.1.2","date":"2013-05-15T10:35:06.311Z"},{"number":"0.2.1","date":"2013-05-19T03:06:28.235Z"}],"created":"2013-05-12T09:58:27.189Z","modified":"2013-05-19T03:06:28.235Z","lastPublisher":{"name":"deoxxa","email":"deoxxa@fknsrs.biz"},"owners":[{"name":"deoxxa","email":"deoxxa@fknsrs.biz"}],"other":{"_attachments":{},"_from":".","_id":"httppp","_npmUser":{"name":"deoxxa","email":"deoxxa@fknsrs.biz"},"_npmVersion":"1.2.15","_rev":"1-8640bbbd4a8f47703db9743969754f63","author":{"name":"Conrad Pankoff","email":"deoxxa@fknsrs.biz","url":"http://www.fknsrs.biz/"},"directories":{},"dist-tags":{"latest":"0.2.1"},"dist":{"shasum":"93bc71ca2fdacc8eb091247f43f5d0301ef5b6a9","tarball":"http://registry.npmjs.org/httppp/-/httppp-0.2.1.tgz"},"maintainers":[{"name":"deoxxa","email":"deoxxa@fknsrs.biz"}],"readmeFilename":"README.md","time":{"modified":"2013-05-19T03:06:28.235Z","created":"2013-05-12T09:58:27.189Z","0.0.1":"2013-05-12T09:59:04.836Z","0.1.1":"2013-05-15T10:13:45.503Z","0.1.2":"2013-05-15T10:35:06.311Z","0.2.1":"2013-05-19T03:06:28.235Z"}}}