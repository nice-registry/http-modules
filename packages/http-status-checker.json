{"name":"http-status-checker","version":"1.0.2","description":"HTTP status checker used in conjunction with AWS ELB to overcome 1 endpoint check limit","main":"index.js","bin":{"hsc":"bin/hsc"},"scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"license":"ISC","dependencies":{"minimist":"^1.2.0","request":"^2.55.0","virgilio":"^0.12.5","virgilio-http":"^0.8.1"},"homepage":"https://github.com/ninjatux/http-status-checker/issues","gitHead":"3281c9586e4a38700a4145a876c543a70da72774","readme":"## HSC\n\n**hsc** (http-status-checker) is a command line utility used to perform multiple HTTP status checks on remote endpoints. It is a perfect fit if you need to host multiple HTTP server on the same EC2 instance behind an Elastic Load Balancer which unfortunately allow status checks on a single HTTP interface.\n\n#### Usage\n\n**hsc** supports accepts options passed as environment variables or as command line arguments. The short list of options is:\n\n* *p* - *env.PORT*, in which port running the *hsc* server (*default 9090*)\n* *e* - *env.ENDPOINTS*, comma separated list of endpoints to perform checks against\n\nInstall **hsc** globally with `npm i -g http-status-checker`\n\n**hsc** to actually check the status of the endpoints monitored you can perform a *GET* request to `http://your_ip:HSC_PORT/`, if everything looks good **hsc** will simply answer with `HTTP 200 \"OK\"`, otherwise with an `HTTP 500` containiung in the body a JSON object indicating which endpoint failed the check and which one looks good, eg:\n\n```\n{\n    http://google.com: \"OK\",\n    http://www.yahoo.com: \"OK\",\n    http://foobarservice.com: \"getaddrinfo ENOTFOUND foobarservice.com foobarservice.com:80\"\n}\n```\n\nUsage example:\n\n* `hsc -p 9091 -e http://google.com,http://yahoo.com`\n\n##### Note\n\nLogs are printed in JSON suing [bunyan](https://github.com/trentm/node-bunyan), if you want you can pipe them through the bunyan command line tool to read them better.\n","versions":[{"number":"1.0.0","date":"2016-03-10T11:21:00.436Z"},{"number":"1.0.1","date":"2016-03-10T11:28:02.503Z"},{"number":"1.0.2","date":"2016-03-10T11:30:44.248Z"}],"created":"2016-03-10T11:21:00.436Z","modified":"2016-03-10T11:30:44.248Z","lastPublisher":{"name":"ninjatux","email":"valerio.barrila@gmail.com"},"owners":[{"name":"ninjatux","email":"valerio.barrila@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-status-checker","_nodeVersion":"4.2.2","_npmOperationalInternal":{"host":"packages-13-west.internal.npmjs.com","tmp":"tmp/http-status-checker-1.0.2.tgz_1457609442084_0.32138687814585865"},"_npmUser":{"name":"ninjatux","email":"valerio.barrila@gmail.com"},"_npmVersion":"3.8.0","_rev":"1-0c148c4c4a7a1dcc8c84de10d4c21954","_shasum":"41022228634dfda61184be683cf48a38b9553eca","author":{"name":"Valerio Barrila"},"bugs":{"url":"https://github.com/ninjatux/http-status-checker/issues"},"directories":{},"dist-tags":{"latest":"1.0.2"},"dist":{"shasum":"41022228634dfda61184be683cf48a38b9553eca","tarball":"http://registry.npmjs.org/http-status-checker/-/http-status-checker-1.0.2.tgz"},"maintainers":[{"name":"ninjatux","email":"valerio.barrila@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-03-10T11:30:44.248Z","created":"2016-03-10T11:21:00.436Z","1.0.0":"2016-03-10T11:21:00.436Z","1.0.1":"2016-03-10T11:28:02.503Z","1.0.2":"2016-03-10T11:30:44.248Z"}}}