{"name":"http-port-guard","version":"1.0.0","description":"Wrap an HTTP server 'start' function in asynchronous checks for port availability.","main":"src/index.js","scripts":{"lint":"jshint src test","test":"npm run lint && npm run test-unit","test-unit":"node test/test"},"license":"MIT","devDependencies":{"jshint":"^2.8.0","sinon":"^1.17.1","tape":"^4.2.1"},"gitHead":"5ed4db52be58549a4134bea2e87fbad86b88ceb2","versions":[{"number":"1.0.0","date":"2015-10-07T19:15:43.651Z"}],"readme":"# Node.js HTTP Port Guard\n\nWrap a server \"start\" function in asynchronous checks for port availability.\nFail if the port is already in use prior to function execution or if the port\ndoes not become utilized after execution.\n\nThe only reliable way to determine if a server process has started successfully\nis to poll the port it has been assigned. If this port is already in use\\*, the\nchild process will fail to start, but the current process will consider the\noperation a success. This invalidates the `kill` function created by this\nmodule and will likely lead to errors during test cleanup.\n\n\\* This condition will most commonly be caused by a zombie server instance\n   erroneously created in some prior test run.\n\n## API\n\nThis module exposes a single function that accepts two arguments: the desired\nport and a function that is expected to bind to that port (the actual binding\nmay take place in another process). This function should return a `kill`\ncallback function that kills the server\n\n```js\nvar portGuard = require('http-port-guard');\n\nportGuard(8000, function() {\n  var app = startMyApp();\n\n  return app.destroy;\n}).then(function(kill) {\n  console.log('Application is now available on port 8000!');\n\n  console.log('Now destroying application.');\n  kill();\n});\n```\n\nIf the second argument is an object, it will be interpreted as an \"options\"\nobject, and the following properties will be honored:\n\n- `host` - {string} - Host name of the server to poll. Defaults to 'localhost'\n- `retryPeriod` - {string} - number of milliseconds to wait between port polling\n  operations; defaults to 100\n- `retryCount` - {string} - number of polling failures to tolerate before\n  considering the operation a failure; defaults to 100\n- `Promise` - {Function} - Promise A/+ constructor; defaults to\n  globally-defined Promise\n\nThe function resutns a Promise that is rejected if the port is already in use\nor if requests to the specified port fail after startup. It is resolved with\nthe `kill` callback function provided by `startFn`.\n\n## License\n\nCopyright (c) 2015 Mike Pennisi  \nLicensed under the MIT license.\n","created":"2015-10-07T19:15:43.651Z","modified":"2015-10-07T19:15:43.651Z","lastPublisher":{"name":"jugglinmike","email":"mike@mikepennisi.com"},"owners":[{"name":"jugglinmike","email":"mike@mikepennisi.com"}],"other":{"_attachments":{},"_from":".","_id":"http-port-guard","_nodeVersion":"4.1.0","_npmUser":{"name":"jugglinmike","email":"mike@mikepennisi.com"},"_npmVersion":"2.14.3","_rev":"1-68c9cdd7ca73b7aa44a8ab326193e080","_shasum":"ca07fa1e572b6fe06857e1766fe67ba6c9860f78","author":{"name":"Mike Pennisi"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"ca07fa1e572b6fe06857e1766fe67ba6c9860f78","tarball":"http://registry.npmjs.org/http-port-guard/-/http-port-guard-1.0.0.tgz"},"maintainers":[{"name":"jugglinmike","email":"mike@mikepennisi.com"}],"readmeFilename":"README.md","time":{"modified":"2015-10-07T19:15:43.651Z","created":"2015-10-07T19:15:43.651Z","1.0.0":"2015-10-07T19:15:43.651Z"}}}