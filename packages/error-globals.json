{"name":"error-globals","version":"0.0.2","description":"Exposes custom Errors with HTTP and logging support to the Global scope","main":"index.js","scripts":{"test":"make test","test-cov":"make test-cov","test-coveralls":"make test-coveralls"},"keywords":["error","http","errors","status","code","cause","verror"],"devDependencies":{"mocha":"1.20.1","chai":"1.9.1","istanbul":"^0.3.5","jscover":"^0.2.4","coveralls":"^2.11.2","mocha-lcov-reporter":"0.0.1","supertest":"0.13.0"},"license":"MIT","dependencies":{"extsprintf":"^1.2.1"},"gitHead":"cb6b60edfef5760f7a6ac7250035f84fc1817bfa","versions":[{"number":"0.0.1","date":"2014-12-14T23:08:54.723Z"},{"number":"0.0.2","date":"2014-12-14T23:30:25.562Z"}],"readme":"error-globals [![NPM version](https://img.shields.io/npm/v/error-globals.svg)](https://img.shields.io/npm/v/error-globals.svg) [![Build Status](https://travis-ci.org/vladaspasic/error-globals.svg?branch=master)](https://travis-ci.org/vladaspasic/error-globals) [![Coverage Status](https://img.shields.io/coveralls/vladaspasic/error-globals.svg)](https://coveralls.io/r/vladaspasic/error-globals?branch=master)\n=============\n\nThis module comes with a whole list of various HTTP Errors that can be exposed to the global scope if needed. Each can be thrown with a cause Error, so you can easily stack errors as you catch them.\n\n## Usage\n\n```javascirpt\nvar errors = require('error-globals');\n\nvar typeError = new TypeError('Bad type');\n\nthrow new errors.InternalServerError(typeError, 'An error occured.');\n\nInternal Server Error: An error occured.: Bad type\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:906:3\n\n```\n\nIf you want to send a JSON response to the server you can call `toJSON` method on the Error.\n\nFor `typeError` we would get something like this:\n\n```javascirpt\n{ name: 'TypeError',\n  message: 'Bad type',\n  statusCode: 500,\n  logLevel: 'error',\n  stack: \n   [{ name: 'Module._compile',\n       filename: 'module.js',\n       line: 456,\n       column: 26 },\n     { name: 'Object.Module._extensions..js',\n       filename: 'module.js',\n       line: 474,\n       column: 10 },\n     { name: 'Module.load',\n       filename: 'module.js',\n       line: 356,\n       column: 32 },\n     { name: 'Function.Module._load',\n       filename: 'module.js',\n       line: 312,\n       column: 12 },\n     { name: 'Function.Module.runMain',\n       filename: 'module.js',\n       line: 497,\n       column: 10 },\n     { name: 'startup', filename: 'node.js', line: 119, column: 16 },\n     { name: undefined, filename: 'node.js', line: 906, column: 3 } ],\n  cause: undefined\n}\n```\n\nAnd for `internalServerError` we would get something like this:\n\n```javascirpt\nname: 'Internal Server Error',\n  message: 'An error occured.: Bad type',\n  statusCode: 500,\n  logLevel: 'error',\n  stack: \n   [{ name: 'Module._compile',\n       filename: 'module.js',\n       line: 456,\n       column: 26 },\n     { name: 'Object.Module._extensions..js',\n       filename: 'module.js',\n       line: 474,\n       column: 10 },\n     { name: 'Module.load',\n       filename: 'module.js',\n       line: 356,\n       column: 32 },\n     { name: 'Function.Module._load',\n       filename: 'module.js',\n       line: 312,\n       column: 12 },\n     { name: 'Function.Module.runMain',\n       filename: 'module.js',\n       line: 497,\n       column: 10 },\n     { name: 'startup', filename: 'node.js', line: 119, column: 16 },\n     { name: undefined, filename: 'node.js', line: 906, column: 3 } ],\n  cause: \n   { name: 'TypeError',\n     message: 'Bad type',\n     statusCode: 500,\n     logLevel: 'error',\n     stack: ...\n     cause: undefined\n  }\n}\n\n```\n\nYou can also format your Error messages, like so:\n\n```javascirpt\nvar dbUrl = 'some/db/url';\nvar typeError = new errors.DatabaseError('Could not connect to `%s`.', dbUrl);\n\ntypeError.message; // ->'Could not connect to `some/db/url`.'\n```\n\nFor more information what these custom Errors contain, please read the documentation below.\n\n## API\n\n#### expose()\n\nType: ```Function```\n\nA method that exposes all Errors to the Global scope.\n\n```javascirpt\nvar errors = require('error-globals');\n\n// This will throw an exception, as there is no NotFoundError variable\nvar error = new NotFoundError('I was not found');\n\nerrors.expose();\n\n// Now it is exposed, and can be used\nvar error = new NotFoundError('I was not found');\n```\n\n#### create(name, *prototype)\n\nType: ```Function```\n\nname: `String`\n\nprototype: `Object`\n\nA method that creates a new Error with a defined name and prototypes, such as `statusCode`, `logLevel`,  `init` or any other custom property you want it to have.\n\n```javascirpt\nvar errors = require('error-globals');\n\nvar MyCustomError = errors.create('MyCustomError', {\n  statusCode: 412,\n  logLevel: 'debug',\n  foo: 'bar',\n  init: function(message) {\n    console.log('Initialized: ' + message);\n  },\n  myCustomFunction: function() {\n    return this.name;\n  }\n});\n\nvar error = new MyCustomError('Ooops'); // -> 'Initialized: MyCustomError'\n\nerror.statusCode; // -> 412\nerror.logLevel; // -> 'debug'\nerror.foo; // -> 'bar'\nerror.myCustomFunction(); // -> 'MyCustomError'\nerror instanceof Error; // -> true\n\n```\n\n### Error API documentation\n\n#### cause()\n\nType: ```Function```\n\nReturns: ```Error```\n\nA method that returns a cause of the Error.\n\n```javascirpt\n\nvar myError = new Error(new TypeError(\"An error occurred\"));\n\nmyError.cause() --> 'TypeError: An error occured'\n\n```\n\n#### stackTrace()\n\nType: ```Function```\n\nReturns: ```String```\n\nCreates a stack trace for the Error. It uses the Error.stack to build it. If the Error had a cause, the same method will be invoked on it. This way you would get the whole stack trace what happend in your application.\n\n```javascirpt\n\nvar myError = new Error();\n\nmyError.stackTrace();\n\nError: An error occurred\n    at methodName (/your.file.js:13:9);\n    at methodName (/your.file.js:23:16);\n    at Context.<anonymous> (/your.other.file.js:50:19);\n\n```\n\n```javascirpt\n\nvar myError = new Error(new TypeError(\"An error occurred\"), \"Error cought\");\n\nmyError.stackTrace();\n\nError: Error cought\n    at methodName (/your.file.js:13:9);\n    at methodName (/your.file.js:23:16);\n    at Context.<anonymous> (/your.other.file.js:50:19);\nCaused by: TypeError: An error occurred\n    at methodName (/your.file.js:42:12);\n    at methodName (/your.file.js:24:22);\n\n```\n\n#### printStackTrace()\n\nType: ```Function```\n\nPrints the stack trace to sdterr.\n\n#### init()\n\nType: ```Function```\n\nInvoked by the constructor, usefull to do custom argument handling for the Error. This is a private function and it should not be invoked manually.\n\n#### toJSON()\n\nType: ```Function```\n\nReturns: ```Object```\n\nA method that returns a json representation of the Error.\n\n```javascirpt\n\nvar myError = new Error(\"An error occurred\");\n\nmyError.toJSON();\n\n{ name: 'Error',\n  message: 'An error occurred',\n  statusCode: 500,\n  logLevel: 'error',\n  stack:  [ \n   { name: 'someFunctionName',\n     filename: 'location/of/the/file',\n     line: 91,\n     column: 9\n   },\n   { \n    name: 'Context.<anonymous>',\n    filename: 'location/of/the/file',\n    line: 28,\n    column: 10\n   }\n}\n```\n\nThe output above is produced only when you not are running the application in `production` mode. When running in `production` mode, `logLevel` and `stack` properties are ommited from the output.\n\n#### toString()\n\nType: ```Function```\n\nReturns: ```String```\n\nReturns a to String representation of the Error in the format of Error.name: Error.message\n\n```javascirpt\n\nvar myError = new Error(\"An error occurred\");\n\nmyError.toString() -> 'Error: An error occurred'\n\n```\n\n#### loggerLevel\n\nType: ```Property```\n\nReturns: ```String```\n\nA logger level for the Error\n\n#### Error.statusCode\n\nType: ```Property```\n\nReturns: ```Number```\n\nHTTP status code for the Error\n\n### Predefined Errors\n\nThis module comes with a predefined set of custom errors. All Errors have a `statusCode` and `loggerLevel` properties,\nso we could easily set the status code of the response, and log the Error apropriatelly.\n\nHere is a list of all defined Errors in the module:\n\n- TypeError\n  - statusCode: 500\n  - loggerLevel: error\n- EvalError\n  - statusCode: 500\n  - loggerLevel: error\n- InternalError\n  - statusCode: 500\n  - loggerLevel: error\n- RangeError\n  - statusCode: 500\n  - loggerLevel: error\n- ReferenceError\n  - statusCode: 500\n  - loggerLevel: error\n- SyntaxError\n  - statusCode: 500\n  - loggerLevel: error\n- UriError\n  - statusCode: 500\n  - loggerLevel: error\n- RuntimeError\n  - statusCode: 500\n  - loggerLevel: error\n- IllegalState\n  - statusCode: 500\n  - loggerLevel: error\n- DatabaseError\n  - statusCode: 500\n  - loggerLevel: error\n- WorkerError\n  - statusCode: 500\n  - loggerLevel: error\n- ValidationError\n  - statusCode: 500\n  - loggerLevel: warn\n\nAnd a list off all HTTP Status errors, for instance if you wish to throw `Bad Request` error status response, the coresponding error class will be `BadRequestError` that will have a `400` status code and `warn` as a logger level. Maybe you wish to send `Not Implemented` error, then the class will be `NotImplementedError` with a `501` status and `error` as a logger level.\n\n## Licence\n\n[MIT](https://github.com/vladaspasic/error-globals/blob/master/LICENSE)\n","created":"2014-12-14T23:08:54.723Z","modified":"2014-12-14T23:30:25.562Z","lastPublisher":{"name":"vspasic","email":"vladimir.spasic.86@gmail.com"},"owners":[{"name":"vspasic","email":"vladimir.spasic.86@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"error-globals","_nodeVersion":"0.10.32","_npmUser":{"name":"vspasic","email":"vladimir.spasic.86@gmail.com"},"_npmVersion":"2.1.10","_rev":"1-74a364991f310107348f1fb4eb5b45cf","_shasum":"a9f7aca6d0a897776bae93b4d982ecdac7b782cd","author":{"name":"Vladimir Spasic"},"directories":{},"dist-tags":{"latest":"0.0.2"},"dist":{"shasum":"a9f7aca6d0a897776bae93b4d982ecdac7b782cd","tarball":"http://registry.npmjs.org/error-globals/-/error-globals-0.0.2.tgz"},"maintainers":[{"name":"vspasic","email":"vladimir.spasic.86@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-12-14T23:30:25.562Z","created":"2014-12-14T23:08:54.723Z","0.0.1":"2014-12-14T23:08:54.723Z","0.0.2":"2014-12-14T23:30:25.562Z"}}}