{"name":"mock-http","version":"0.0.10","description":"mock http request response","main":"index.js","engines":{"node":">=0.8.0"},"scripts":{"test":"mocha","lint":"eslint '*.js' '**/*.js'","cover":"istanbul cover _mocha --report lcov --report text -- -R dot --check-leaks test/*.mocha.js","doc":"jsdox -o doc index.js lib/*.js"},"repository":{"type":"git","url":"github.com/commenthol/mock-http"},"keywords":["mock","http","request","response","stream"],"license":"MIT","homepage":"https://github.com/commenthol/mock-http","dependencies":{"mergee":"~0.2.4","streamss-shim":"~0.0.2"},"devDependencies":{"connect-chain-if":"~0.0.3","mocha":"*","streamss":"~0.2.5"},"eslintConfig":{"extends":"standard","plugins":["standard"],"rules":{}},"gitHead":"799fb42279053e402493e79faaee06d3f444604b","versions":[{"number":"0.0.1","date":"2014-12-30T10:54:32.365Z"},{"number":"0.0.2","date":"2014-12-30T11:06:47.342Z"},{"number":"0.0.3","date":"2015-01-17T07:56:41.302Z"},{"number":"0.0.4","date":"2015-03-22T07:05:32.339Z"},{"number":"0.0.5","date":"2015-04-15T20:15:21.112Z"},{"number":"0.0.6","date":"2015-06-29T19:20:49.792Z"},{"number":"0.0.7","date":"2015-06-29T19:43:07.253Z"},{"number":"0.0.8","date":"2015-12-15T22:07:25.803Z"},{"number":"0.0.9","date":"2015-12-15T22:19:25.107Z"},{"number":"0.0.10","date":"2017-01-20T20:24:44.495Z"}],"readme":"# mock-http\n\n![NPM version](https://badge.fury.io/js/mock-http.svg)\n[![Build Status](https://secure.travis-ci.org/commenthol/mock-http.svg?branch=master)](https://travis-ci.org/commenthol/mock-http)\n\n> Mock http request response\n\nThis module provides a mock to the server side request and response classes without the need of creating a socket.\nThe full API as documented on <http://nodejs.org/api/http.html> is supported.\n\nAll methods can be used to mock a client requests on the server as well as server responses such allowing to unit-test e.g. connect middleware.\n\n\n## Table of Contents\n\n<!-- !toc (minlevel=2 omit=\"Table of Contents\") -->\n\n* [Request](#request)\n* [Response](#response)\n* [Usage](#usage)\n* [Documentation](#documentation)\n* [Contribution and License Agreement](#contribution-and-license-agreement)\n* [License](#license)\n\n<!-- toc! -->\n\n## Request\n\nMock implementation of Class [http.IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage)\n\nIt behaves like the class, apart from really handling a socket. I.e. it implements the Readable Stream Class as well.\nAll methods can be used to mock a client request on the server such allowing to unit-test e.g. connect middleware\n\n\n## Response\n\nMock implementation of Class [http.ServerResponse](http://nodejs.org/api/http.html#http_class_http_serverresponse)\n\nIt behaves like the class, apart from really handling a socket. I.e. it implements the Writable Stream Class as well.\nAll methods can be used to mock a server response such allowing to unit-test e.g. connect middleware\n\nStates are stored in the interal object `Response._internal` and can be queried from your unit-tests\n\n    _internal: {\n      headers: {},            // {Object}  Response headers\n      trailers: {},           // {Object}  Trailing Response headers\n      buffer: new Buffer(''), // {Buffer}  Internal buffer represents response body\n      timedout: false,        // {Boolean} If true than `Response.setTimeout` was called.\n      ended: false,           // {Boolean} If true than `Response.end` was called.\n    }\n\n## Usage\n\nThis is a unit-test using mocha which illustrates the usage. The example can be found in [./test/index.mocha.js](./test/index.mocha.js)\n\n```javascript\ndescribe('example', function(){\n    // a middleware function under test\n    var middleware = function(req, res, next) {\n        var regex = /^(?:\\/test)(\\/.*|$)/;\n        req.params = '';\n\n        req.on('data', function(data){\n            req.params += data; // a simple body parser\n        });\n        req.on('end', function(){\n            if (regex.test(req.url)) {\n                req.url = req.url.replace(regex, '$1') || '/';\n                res.writeHead(200, { 'Cache-Control': 'max-age=300'});\n                res.write('this is a test');\n                res.end();\n            }\n            else {\n                next && next();\n            }\n        });\n    };\n    it('shall respond with a 200', function(done){\n        var req = new mock.Request({\n                    url: '/test',\n                    method: 'POST',\n                    buffer: new Buffer('name=mock&version=first')\n                });\n        var res = new mock.Response({\n                onEnd: function() {\n                    // the test ends here\n                    assert.equal(req.url, '/');\n                    assert.equal(req.params, 'name=mock&version=first');\n                    assert.equal(res.statusCode, 200);\n                    assert.equal(res.headersSent, true);\n                    assert.equal(res.getHeader('Cache-Control'), 'max-age=300');\n                    assert.equal(res.hasEnded(), true);\n                    done();\n                }\n            });\n        middleware(req, res, function(){\n            assert.equal('test never', 'reaches here');\n        });\n    });\n    it('shall call next middleware', function(done){\n        var req = new mock.Request({\n                    url: '/other',\n                    method: 'POST',\n                    buffer: new Buffer('name=mock&version=first')\n                });\n        var res = new mock.Response({\n                onEnd: function() {\n                    assert.equal('test never', 'reaches here');\n                }\n            });\n        middleware(req, res, function(){\n            // the test ends here\n            assert.equal(req.url, '/other');\n            assert.equal(res.headersSent, false);\n            assert.equal(res.hasEnded(), false);\n            done();\n        });\n    });\n});\n```\n\n## Documentation\n\nDocumentation can be found in [./doc](./doc/index.html).\n\n\n## Contribution and License Agreement\n\nIf you contribute code to this project, you are implicitly allowing your code\nto be distributed under the MIT license. You are also implicitly verifying that\nall code is your original work.\n\n* `npm test` - runs the tests\n* `npm run lint` - runs jshint for linting\n* `npm run doc` - generates the docs in ./doc - requires `npm i -g jsdoc`\n\n## License\n\nCopyright (c) 2014-2015, Commenthol. (MIT License)\n\nSee [LICENSE][] for more info.\n\n[LICENSE]: ./LICENSE\n","created":"2014-12-30T10:54:32.365Z","modified":"2017-01-20T20:24:44.495Z","lastPublisher":{"name":"commenthol","email":"commenthol@gmail.com"},"owners":[{"name":"commenthol","email":"commenthol@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"mock-http","_nodeVersion":"7.4.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/mock-http-0.0.10.tgz_1484943882516_0.14616207662038505"},"_npmUser":{"name":"commenthol","email":"commenthol@gmail.com"},"_npmVersion":"4.0.5","_rev":"2-cd4d401daece09b7bbf75a4188cf6c02","_shasum":"ed8cee23a52382e3eea416f295e901481755466f","author":{"name":"commenthol","email":"commenthol@gmail.com"},"bugs":{"url":"https://github.com/commenthol/mock-http/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"0.0.10"},"dist":{"shasum":"ed8cee23a52382e3eea416f295e901481755466f","tarball":"https://registry.npmjs.org/mock-http/-/mock-http-0.0.10.tgz"},"maintainers":[{"name":"commenthol","email":"commenthol@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-01-20T20:24:44.495Z","created":"2014-12-30T10:54:32.365Z","0.0.1":"2014-12-30T10:54:32.365Z","0.0.2":"2014-12-30T11:06:47.342Z","0.0.3":"2015-01-17T07:56:41.302Z","0.0.4":"2015-03-22T07:05:32.339Z","0.0.5":"2015-04-15T20:15:21.112Z","0.0.6":"2015-06-29T19:20:49.792Z","0.0.7":"2015-06-29T19:43:07.253Z","0.0.8":"2015-12-15T22:07:25.803Z","0.0.9":"2015-12-15T22:19:25.107Z","0.0.10":"2017-01-20T20:24:44.495Z"}}}