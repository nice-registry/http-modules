{"name":"request-http-cache","version":"1.0.1","description":"HTTP Caching extension for request-extensible","main":"lib/index.js","scripts":{"test":"mocha test --timeout 10000"},"repository":"https://github.com/gitterHQ/request-http-cache","keywords":["HTTP","Request","ETag","request-extensible","caching"],"license":"MIT","homepage":"https://github.com/gitterHQ/request-http-cache","devDependencies":{"coveralls":"^2.11.2","gulp":"^3.8.11","gulp-spawn-mocha":"^2.0.1","mocha":"^2.1.0","nock":"^0.59.1","request":"^2.53.0","request-http-cache-protobuf-serializer":"^0.1.1","request-http-cache-snappy-compressor":"^0.1.1","sinon":"^1.13.0","speedy":"^0.1.1"},"dependencies":{"debug":"^2.1.2","json-buffer":"^2.0.11","lodash":"^3.3.1","lru-cache":"^2.5.0","redis":"^0.12.1","wreck":"^5.2.0"},"gitHead":"2098018e070ab9c77e84c700fe3e69becfd3f384","readme":"# request-http-cache\n\n[![Build Status](https://travis-ci.org/gitterHQ/request-http-cache.svg?branch=master)](https://travis-ci.org/gitterHQ/request-http-cache) [![Coverage Status](https://coveralls.io/repos/gitterHQ/request-http-cache/badge.svg)](https://coveralls.io/r/gitterHQ/request-http-cache)\n\nA [request](https://github.com/request/request) \"middleware\" for caching HTTP responses in-memory or in Redis. Built for\nGitter's communications with GitHub as part of [Tentacles](https://github.com/gitterHQ/tentacles),\nalthough it's intended as a general purpose HTTP caching module that should work\nwith any request HTTP client.\n\n```\nnpm install request-http-cache\n```\n\n## About\n\nThis module is intended for use with [request-extensible](https://github.com/suprememoocow/request-extensible).\n\nIt is designed to honor the HTTP caching semantics used by the GitHub API and use\nConditional Requests, using ETags, for stale responses while correctly handling Vary headers.\n\n## Using\n\n### Using with an in-memory Backend\n\n```javascript\nvar requestExt = require('request-extensible');\nvar RequestHttpCache = require('request-http-cache');\n\nvar httpRequestCache = new RequestHttpCache({\n  max: 1024*1024 // Maximum cache size (1mb) defaults to 512Kb\n});\n\nvar request = requestExt({\n  extensions: [\n    httpRequestCache.extension\n  ]\n});\n\n// Now use request as you would request/request\nrequest({ url: 'https://api.github.com/users/suprememoocow' }, function(err, response, body) {\n\n});\n```\n\n### Using with a Redis Backend\n\nWhen using with a Redis backend, it's highly recommended to use `maxmemory` and\n`maxmemory-policy` configurations to ensure that the Redis memory usage doesn't\ngrow out of control.\n\n```javascript\nvar requestExt = require('request-extensible');\nvar RequestHttpCache = require('request-http-cache');\n\nvar httpRequestCache = new RequestHttpCache({\n  backend: 'redis',\n  redis: {\n    host: \"localhost\",\n    port: 6379\n  },\n  redisClient: redisClient, // Or you can pass in your Redis client\n  ttl: 86400                // Maximum cached response time\n});\n\nvar request = requestExt({\n  extensions: [\n    httpRequestCache.extension\n  ]\n});\n\n// Now use request as you would request/request\nrequest({ url: 'https://api.github.com/users/suprememoocow' }, function(err, response, body) {\n\n});\n```\n\n# Under the Hood\n\nWhen a new outgoing request is made, the Vary headers for the URL endpoint are\nlooked up in the cache.\n\n### Outgoing\n\n * If the Vary headers for the endpoint are not known (ie, the URL has not been cached),\n   the request proceeds as normal.\n * If the Vary headers are available, a SHA1 hash of the URL plus the requested headers\n   specified by the Vary is generated. Although the chance of a hash entry collision is rare,\n   the library does deal with this situation and treats it as a cache miss.\n * The Etag and Expiry headers for the previous cached response are looked up using the\n   hash.\n * If the response has not yet expired, it is returned immediately.\n * If the response has expired, the request is issued with a `If-None-Match` header\n\n### Incoming\n * If the response is in error or a 500 status code, the cached response is used.\n * If the response is a 304, indicating that the data is still fresh, the cached response is used\n * Otherwise the response is cached and the Vary headers for the URL endpoint are stored\n   the response is returned to the caller.  \n\n# Support for snappy compression and/or protobuf serialization\n\nSnappy compression and protobuf serialization of cached data is supported. However\nin tests, it is generally slower than JSON and no compression, so it's disabled\nby default.\n\nTo enable it, use one of both of the `serializer` and/or `compressor` options:\n```js\nvar httpRequestCache = new RequestHttpCache({\n  backend: 'redis',\n  serializer: require('request-http-cache-protobuf-serializer'),\n  compressor: require('request-http-cache-snappy-compressor')\n});\n```\n\nYou will need to require the respective modules as these are no longer shipped\nwith `request-http-cache`.\n\n# TODO\n\n * Support for `If-Modified-Since` conditional responses (currently only uses ETags)\n * Better handling of `Cache-Control` headers\n * Better handling of `Expires` headers (currently only uses `Cache-Control`'s `max-age`)\n\nPull requests welcome.\n\n# Authors\n\nBuilt by [@suprememoocow](https://twitter.com/suprememoocow) and the team at [Gitter](https://gitter.im).\n\n# Licence\n\n```\nLicense\nThe MIT License (MIT)\n\nCopyright (c) 2015, Troupe Technology Limited\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n","versions":[{"number":"1.0.0","date":"2015-03-09T13:18:25.006Z"},{"number":"0.1.0","date":"2015-03-09T13:19:29.483Z"},{"number":"0.3.0","date":"2015-03-17T20:04:42.290Z"},{"number":"0.3.1","date":"2015-03-17T20:40:07.761Z"},{"number":"0.3.2","date":"2015-03-17T22:19:12.767Z"},{"number":"1.0.1","date":"2015-11-18T13:09:15.197Z"}],"starsCount":2,"created":"2015-03-09T13:18:25.006Z","modified":"2017-03-10T01:53:53.803Z","lastPublisher":{"name":"suprememoocow","email":"andrewn@datatribe.net"},"owners":[{"name":"suprememoocow","email":"andrewn@datatribe.net"}],"other":{"_attachments":{},"_from":".","_id":"request-http-cache","_nodeVersion":"0.10.33","_npmUser":{"name":"suprememoocow","email":"andrewn@datatribe.net"},"_npmVersion":"2.12.0","_rev":"2-297b656f026a715aac948700556b5778","_shasum":"a16c971f416e7048b5c9ef1444cc2a03b0268e2f","author":{"name":"Andrew Newdigate","email":"andrewn@datatribe.net","url":"http://about.me/andrewnewdigate"},"bugs":{"url":"https://github.com/gitterHQ/request-http-cache/issues"},"directories":{},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"a16c971f416e7048b5c9ef1444cc2a03b0268e2f","tarball":"http://registry.npmjs.org/request-http-cache/-/request-http-cache-1.0.1.tgz"},"maintainers":[{"name":"suprememoocow","email":"andrewn@datatribe.net"}],"readmeFilename":"README.md","time":{"modified":"2017-03-10T01:53:53.803Z","created":"2015-03-09T13:18:25.006Z","1.0.0":"2015-03-09T13:18:25.006Z","0.1.0":"2015-03-09T13:19:29.483Z","0.3.0":"2015-03-17T20:04:42.290Z","0.3.1":"2015-03-17T20:40:07.761Z","0.3.2":"2015-03-17T22:19:12.767Z","1.0.1":"2015-11-18T13:09:15.197Z"},"users":{"klipsil":true,"vchouhan":true}}}