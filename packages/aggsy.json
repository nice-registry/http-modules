{"name":"aggsy","version":"1.2.0","description":"Aggregation language for easy use in http query strings","main":"index.js","scripts":{"test":"standard && node test.js"},"repository":"https://github.com/reminyborg/aggsy","keywords":["aggregation","language","query","string","http"],"license":"MIT","devDependencies":{"async-series":"0.0.1","beautify-benchmark":"^0.2.4","benchmark":"^2.1.0","standard":"^6.0.6","tape":"^4.4.0"},"dependencies":{"balanced-match":"^0.3.0","debug":"^2.2.0"},"gitHead":"bf5cbb43a9f253bf7e05684e9e2764bb9e171b7e","homepage":"https://github.com/reminyborg/aggsy#readme","versions":[{"number":"0.0.1","date":"2016-02-19T01:57:04.847Z"},{"number":"0.1.0","date":"2016-02-19T09:08:19.292Z"},{"number":"0.1.1","date":"2016-02-19T09:45:30.195Z"},{"number":"0.2.0","date":"2016-02-23T07:36:30.112Z"},{"number":"0.3.0","date":"2016-02-23T11:07:12.978Z"},{"number":"0.4.0","date":"2016-02-23T12:11:02.989Z"},{"number":"1.0.0","date":"2016-02-24T23:21:53.683Z"},{"number":"1.1.0","date":"2016-02-25T23:22:26.779Z"},{"number":"1.2.0","date":"2016-02-29T20:17:25.667Z"}],"readme":"# Aggsy\n\nAggsy is a aggregation language/module for easy use in http query strings\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\n## Installation\n\nYou need npm installed:\n\n```sh\n$ npm install aggsy\n```\n\n## Example\n\n```javascript\nvar aggsy = require('aggsy')\n\nvar cars = [\n  { model: 'volvo', make: 'v50', km: 100 },\n  { model: 'tesla', make: 's', km: 200 },\n  { model: 'tesla', make: 's', km: 120 },\n  { model: 'tesla', make: 'x', km: 10 }\n]\n\naggsy('model(distance: _sum(km), reports: _count())', cars)\n\n// Gives:\n{\n  tesla: { 'reports': 2, 'distance': 330 },\n  volvo: { 'reports': 1, 'distance': 100 }\n}\n```\n\n*To aggregate on nested groups*\n```javascript\naggsy('model(make(count: _count()), count: _count())', cars)\n\n// Gives:\n{\n  tesla: {\n    's': { 'count': 2 },\n    'x': { 'count': 1 },\n    'count': 3\n  },\n  volvo: {\n    'v50': { 'count': 1 },\n    'count': 1\n  }\n}\n\n```\n\n## Aggsy(query[, data, options])\n\nWhen run with an aggsy query and array of objects the aggregated results is returned.\n\nWhen run with only an query will return an [aggregate function](#advanced use)\n\nFollowing options are available:\n* `reducers` - optional list of [custom reducers](#custom reducers)\n* `missing` - (default: `false`)  grouping name to put items where grouping property does not exits\n\n## Query language\n\n### Grouping\n\nGiven a structure\n```javascript\n{ model: 'volvo', details: { make: 'v50' }, km: 100 }\n```\nTo group on `model` use `model()``\n```javascript\n{ volvo: [/* items with model: volvo */] }\n```\nTo group on `make` use dot notation `details.make()``\n```javascript\n{ v50: [/* items with details.make: v50 */] }\n```\n\nIf no reducers or nested groups are defined within a group ex: `model()` all the items are returned in the groups\n\n### Reducers\n\n#### Sum\n**_sum(property)**\n*Int*\n\n#### Count\n**_count()**\n*Int*\n\n#### Min\n**_min(property)**\n*Int*\n\n#### Max\n**_max(property)**\n*Int*\n\n#### First\n**_first(property)**\n\n#### Last\n**_last(property)**\n\n#### Has\n**_has(property)**\n*Bool*\n\n#### Average / Mean\n**_avg(property)**\n*{ value: 0, count: 0 }*\n\n#### Standard deviation\n**_stdev(property)**\n*{ value: 0, variance: 0, average: 0, count: 0 }*\n\n### Naming reducers\n\nIf only supplied with `_sum(km)` the result would be `{ '_sum(km)': 100 }`\n\nReducers can be named with the convention `distance: _sum(km)` the result then would be `{ 'distance': 100 }`\n\n### Custom reducers\n\nYou can add a list of custom reducers to the aggsy `options` object.\n\nA reducer function behaves like javascript [reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)\nbut only the `previousValue` and `currentValue` is supplied to the reducer function.\nIf you want to define an `initialValue` it must be added as a function property.\n\n```javascript\nfunction _myownsum (prev, curr) { return prev + curr }\n_myownsum.initialValue = 0\nvar options = { reducers: { '_myowsum': _myowsum } }\n\naggsy('_myownsum(km)', data, options)\n// or\nvar aggregate = aggsy('_myownsum(km)', options)\n```\n\n## Advanced use\nIf you call aggsy with only the query parameter it returns an aggregate function.\nThis can be used in flexible ways.\n\nThe aggregate function takes a mutable object and one item as parameters\n\n```javascript\nvar result = {}\nvar aggregate = aggsy(query)\n\narray.forEach(function (item) {\n  aggregate(result, item)\n})\n\n// result will be the aggregated result\n```\n\nOr on *Streams*\n\n```javascript\nvar result = {}\nvar aggregate = aggsy(query)\n\nstream.on('data', function (item) {\n  aggregate(result, item)\n})\nstream.on('end', function () { console.log(result)} )\n```\n\nLicense\n----\n\nMIT\n","created":"2016-02-19T01:57:04.847Z","modified":"2016-02-29T20:17:25.667Z","lastPublisher":{"name":"reminyborg","email":"remi@nyborg.priv.no"},"owners":[{"name":"reminyborg","email":"remi@nyborg.priv.no"}],"other":{"_attachments":{},"_from":".","_id":"aggsy","_nodeVersion":"5.5.0","_npmOperationalInternal":{"host":"packages-6-west.internal.npmjs.com","tmp":"tmp/aggsy-1.2.0.tgz_1456777042474_0.37823494151234627"},"_npmUser":{"name":"reminyborg","email":"remi@nyborg.priv.no"},"_npmVersion":"3.7.5","_rev":"1-5f52ad7e2c63a24ab9655c0c628cc667","_shasum":"8972e463f9cf57a680578270d89281e9827c1677","author":{"name":"Remi Nyborg","email":"remi@nyborg.priv.no","url":"http://reminyborg.com"},"bugs":{"url":"https://github.com/reminyborg/aggsy/issues"},"directories":{},"dist-tags":{"latest":"1.2.0"},"dist":{"shasum":"8972e463f9cf57a680578270d89281e9827c1677","tarball":"http://registry.npmjs.org/aggsy/-/aggsy-1.2.0.tgz"},"maintainers":[{"name":"reminyborg","email":"remi@nyborg.priv.no"}],"readmeFilename":"README.md","time":{"modified":"2016-02-29T20:17:25.667Z","created":"2016-02-19T01:57:04.847Z","0.0.1":"2016-02-19T01:57:04.847Z","0.1.0":"2016-02-19T09:08:19.292Z","0.1.1":"2016-02-19T09:45:30.195Z","0.2.0":"2016-02-23T07:36:30.112Z","0.3.0":"2016-02-23T11:07:12.978Z","0.4.0":"2016-02-23T12:11:02.989Z","1.0.0":"2016-02-24T23:21:53.683Z","1.1.0":"2016-02-25T23:22:26.779Z","1.2.0":"2016-02-29T20:17:25.667Z"}}}