{"name":"idealist","version":"0.1.0-alpha","description":"Functional HTTP micro-framework","main":"index.js","repository":"https://github.com/Avaq/idealist","scripts":{"check-security":"nsp check","check-version":"node scripts/check-version 5.0.0","clean":"rimraf npm-debug.log coverage","lint":"eslint lib test","post-merge":"npm run check-version && npm install && npm dedupe && npm run check-security && npm outdated --long","pre-push":"npm test","setup":"npm run post-merge && cp scripts/hooks/* .git/hooks && git config push.followTags true","test":"npm run check-version && npm run clean && npm run lint && npm run test:unit && npm run test:coverage","test:unit":"node --harmony-destructuring ./node_modules/.bin/_mocha --ui bdd --reporter spec --check-leaks --full-trace","test:coverage":"node --harmony-destructuring node_modules/.bin/istanbul cover --report html ./node_modules/.bin/_mocha -- --ui bdd --reporter dot --bail --check-leaks && codecov"},"homepage":"https://github.com/Avaq/Idealist","license":"MIT","engines":{"node":"^5.0.0"},"files":["index.js","lib"],"keywords":[],"dependencies":{"fantasy-states":"^0.2.1","fluture":"^0.6.5","freeky":"0.0.1","sanctuary":"^0.9.1"},"devDependencies":{"chai":"^3.4.0","codecov":"^1.0.1","eslint":"^2.2.0","istanbul":"^0.4.2","jsverify":"^0.7.1","mocha":"^2.3.3","nsp":"^2.2.0","ramda":"^0.20.1","rimraf":"^2.4.3"},"gitHead":"d8572a5d4c9a0a8def6f6ce640d42804d7103dca","versions":[{"number":"0.0.1","date":"2016-04-08T10:23:02.364Z"},{"number":"0.1.0-alpha","date":"2016-04-09T08:28:41.512Z"}],"readme":"# Idealist\n\nFunctional HTTP micro-framework.\n\n## Usage\n\n```js\n//Import dependencies.\nconst App = require('idealist');\nconst R = require('ramda');\n\n//Import some Free Moands we'd like to use.\nconst FreeState = require('freeky/state');\n\n//Some lenses to work with the Response structure.\nconst headers = R.lensProp('headers');\nconst body = R.lensProp('body');\nconst status = R.lensProp('status');\n\n//Create an empty App.\nconst app = App.empty()\n\n//We can just map over the monad and use the \"headers\" lens to modify the response headers\n.use(R.map(R.over(headers, R.assoc('X-Powered-By', 'Monads'))))\n\n//We can install our own interpreter, which must return a StateFuture.\n.install(FreeState, m => App.StateFuture(state => {\n  const x = m.run(state);\n  return App.Future.of({_0: x[0], _1: x[1]});\n}))\n\n//And now we can use it!\n.use(next => FreeState.get.chain(state => {\n  console.log('The request URL is', state.req.url);\n  console.log('The database config is', state.config.db);\n  return next; //chain the \"next\" monad\n}))\n\n//We can plain ignore the input Monad and return our own. This is like not calling \"next\"\n.use(_ => App.Free.of({status: 200, body: 'wut?', headers: {}}))\n\n//Set the status and body by using lenses\n.use(R.map(R.pipe(\n  R.set(status, 200),\n  R.set(body, 'Secret sauce!')\n)));\n\n//The returned app instance is also \"middleware\".\n//Note that we must first \"concat\" to join the interpreters of both apps.\nconst actualApp = App.empty().concat(app).use(app);\n\n//All we're doing is chaining over Free Monads, so we could write our middleware like:\nconst middleware = next => Monad.do(function*(){\n  const {req} = yield FreeState.get;\n  console.log('Request to ', req.url, 'started at ', Date.now())\n  const res = yield next;\n  console.log('Request finished at', Date.now())\n  return res;\n}, Free.of);\n\n//Middleware are pure compsable functions which compose in reverse, so we could:\nactualApp.use(pipe(middleware, middleware, middleware));\n\n//Mounts an app on the specified port. The third argument will appear on the\n//request state as \"config\".\nApp.mount(actualApp, 3000, {\n  db: 'mydb://username:password@localhost:1337/db'\n});\n```\n","created":"2016-04-08T10:23:02.364Z","modified":"2016-11-24T16:53:15.556Z","lastPublisher":{"name":"avaq","email":"aldwin.vlasblom@gmail.com"},"owners":[{"name":"avaq","email":"aldwin.vlasblom@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"idealist","_nodeVersion":"5.10.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/idealist-0.1.0-alpha.tgz_1460190520558_0.4987360055092722"},"_npmUser":{"name":"avaq","email":"aldwin.vlasblom@gmail.com"},"_npmVersion":"3.8.3","_rev":"2-ad483e78399bb34174b425111984f91d","_shasum":"aea13fa54b3705912b5ccf272a6c0d4aa96b299e","author":{"name":"Aldwin Vlasblom","email":"aldwin.vlasblom@gmail.com","url":"https://github.com/Avaq"},"bugs":{"url":"https://github.com/Avaq/Idealist/issues"},"directories":{},"dist-tags":{"latest":"0.1.0-alpha"},"dist":{"shasum":"aea13fa54b3705912b5ccf272a6c0d4aa96b299e","tarball":"http://registry.npmjs.org/idealist/-/idealist-0.1.0-alpha.tgz"},"maintainers":[{"name":"avaq","email":"aldwin.vlasblom@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-24T16:53:15.556Z","created":"2016-04-08T10:23:02.364Z","0.0.1":"2016-04-08T10:23:02.364Z","0.1.0-alpha":"2016-04-09T08:28:41.512Z"}}}