{"name":"digit-fetchy","version":"1.0.0","description":"Simple HTTP package using the new Fetch API.","main":"src/http.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/vjrngn/fetchy","keywords":["http","fetch","ajax","get","post"],"license":"MIT","gitHead":"07e7311b2f0f9d14fae72ded12c0fe82e46e091a","versions":[{"number":"0.0.1","date":"2016-06-27T14:59:59.442Z"},{"number":"0.0.2","date":"2016-06-28T12:19:53.411Z"},{"number":"0.0.3","date":"2016-06-30T05:25:01.037Z"},{"number":"0.0.4","date":"2016-06-30T05:50:49.639Z"},{"number":"1.0.0","date":"2016-06-30T06:26:34.213Z"}],"readme":"# Fetchy\nSimple HTTP package using the new Fetch API.\n\n**All responses default to JSON unless specified otherwise**\n\n# Installation\n\n## GITHUB\n\n\tgit clone https://github.com/vjrngn/fetchy/\n\n## NPM\n\n\tnpm install 'digit-fetchy'\n\n# Usage\nIn any file :\n\n\tvar http = require('digit-fetchy');\n\n## GET request\n\n*Simple GET request with default headers*\n\n\t  http.get('some/url/here.com')\n\t    .then(response => {\n\t      console.log(response);\n\t    })\n\t    .catch(errors => {\n\t      console.log(errors)\n\t    });\n\n*GET request with custom headers*\n\n\t  let headers = {\n\t    'Accept': 'application/json',\n\t    'x-custom-header': 'foo'\n\t  };\n\n\t  http.get('some/url/here.com', headers)\n\t    .then(response => {\n\t      // json response here.\n\t    })\n\t    .catch(errors => {\n\t      // any errors here\n\t    });\n\n## POST request\n\n*Simple POST request with default headers*\n\n\t  let data = {\n\t    name: 'John',\n\t    password: 'foobar'\n\t  };\n\n\t  http.post('some/url/here.com', data)\n\t    .then(response => {\n\t      // json response here\n\t    })\n\t    .catch(errors => {\n\t      // any errors here\n\t    });\n\n*POST request with custom headers*\n\n\t  let data = {\n\t    name: 'John',\n\t    password: 'foobar'\n\t  };\n\n\t  let headers = {\n\t    'x-foo': 'bar'\n\t  };\n\n\t  http.post('some/url/here.com', data, headers)\n\t    .then(response => {\n\t      // json response here\n\t    })\n\t    .catch(errors => {\n\t      // any errors here\n\t    });\n\n## PUT request\n\n        let data = {\n\t    name: 'John',\n\t    password: 'foobar'\n\t  };\n\n\t  let headers = {\n\t    'x-foo': 'bar'\n\t  };\n\n\t  http.put('some/url/here.com', data, headers)\n\t    .then(response => {\n\t      // json response here\n\t    })\n\t    .catch(errors => {\n\t      // any errors here\n\t    });\n\n\n### Request Options\n\n| Request Options | Description                                                                                                                                                                                                                             | Values                                                                                |\n|-----------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------|\n| mode            | The mode contains the mode of the request (e.g., cors, no-cors, cors-with-forced-preflight, same-origin.) This is used to determine if cross-origin requests lead to valid responses, and which properties of the response are readable | **same-origin**,  **no-cors**, **cors** (default)                                     |\n| credentials     | Indicates whether the user agent (browser) should send cookies from the other domain in the case of cross-origin requests. This is similar to XHRâ€™s withCredentials flag, but with three available values (instead of two).             | **omit**,  **same-origin**,  **include** (default)                                    |\n| cache           | Indicates the cache mode of the request.                                                                                                                                                                                                | **default** (default),    **no-store** ,  **reload**,  **no-cache**,  **force-cache** |\n","created":"2016-06-27T14:59:59.442Z","modified":"2016-06-30T06:26:34.213Z","lastPublisher":{"name":"vijay.rangan","email":"vijay.rangan@gmail.com"},"owners":[{"name":"vijay.rangan","email":"vijay.rangan@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"digit-fetchy","_nodeVersion":"6.0.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/digit-fetchy-1.0.0.tgz_1467267991142_0.7055319219361991"},"_npmUser":{"name":"vijay.rangan","email":"vijay.rangan@gmail.com"},"_npmVersion":"3.9.0","_rev":"1-b3dfeaf21164d7757fa912bebb8daefc","_shasum":"2604cca81a0f5f52e31165949fe96e86c8863c2e","author":{"name":"Vijay Rangan"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"2604cca81a0f5f52e31165949fe96e86c8863c2e","tarball":"http://registry.npmjs.org/digit-fetchy/-/digit-fetchy-1.0.0.tgz"},"maintainers":[{"name":"vijay.rangan","email":"vijay.rangan@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-06-30T06:26:34.213Z","created":"2016-06-27T14:59:59.442Z","0.0.1":"2016-06-27T14:59:59.442Z","0.0.2":"2016-06-28T12:19:53.411Z","0.0.3":"2016-06-30T05:25:01.037Z","0.0.4":"2016-06-30T05:50:49.639Z","1.0.0":"2016-06-30T06:26:34.213Z"}}}