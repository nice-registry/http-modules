{"name":"express-script-injector","version":"0.0.2","description":"Express Middleware that injects external javascript files in script tags, saving you from an additional http request!","main":"index.js","keywords":["express","script","tag","injection","injector","inject","middleware"],"license":"MIT","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/MattMcFarland/express-script-injector","homepage":"https://github.com/MattMcFarland/express-script-injector","gitHead":"b240a6708ed69e6a56c012ad7ecc82a954bc12bb","versions":[{"number":"0.0.1","date":"2015-06-17T20:25:54.327Z"},{"number":"0.0.2","date":"2015-06-17T20:34:25.192Z"}],"readme":"This middleware was created to directly inject javascript files into `<script>` tags via templates rendered from the [Express JS](http://expressjs.com/) framework.\n\n## Installation\n\n```sh\nnpm install express-script-injector --save\n```\n\n## Usage\n\n\n```js\n\nvar injector = require('express-script-injector');\n\nvar options = {\n    path: __dirname + '/scripts' // **required** path to your scripts folder (default: undefined)\n    debug: false // *optional* Enable debugging to console  (default: false)\n    script: 'index.js' //  *optional* Script to inject  (default: index.js)\n    enableCache: false //  *optional* Cache previously loaded scripts to RAM  (default: false)\n    useRoute: false //  *optional* If set to true, it will attempt to match the root route and load a script with the same name. (default: false)\n}\n\napp.use(injector(options));\n\n// OR\n\nrouter.use(injector(options));\n```\n\nThe injector middleware will then expose the content of a js file inside req._script, so that you can render it with a template (see example below)\n\n\n## Example\n\nThis example shows how it might be used with an express application using handlebars templating.\n\n```js\n\nvar express  = require('express'),\n    exphbs   = require('express-handlebars'),\n    injector = require('express-script-injector');\n\nvar app = express();\n\n// Apply the injector middleware (note: it could also just be added to a router instead)\napp.use(injector({path: __dirname + '/scripts', script: 'main.js'}));\n\napp.engine('handlebars', exphbs({defaultLayout: 'main'}));\napp.set('view engine', 'handlebars');\n\napp.get('/', function (req, res) {\n\n    // middleware exposes the content of the js file in req._script\n    res.render('home', {injectedScript: req._script});\n\n});\n\napp.listen(3000);\n\n```\n\nThen somewhere in your home.hbs file:\n\n```html\n{{{injectedScript}}}\n```\n\n## Router Example\n\n```js\n\nvar\n    router  = require('express').Router(),\n    inject = require('express-script-injector');\n\nrouter.use(inject({path: __dirname + '/../scripts'}));\n\nrouter.get('*', function(req, res, next) {\n    try {\n        res.render('index', {script: req._script});\n    } catch(e) {\n        next(e);\n    }\n});\n\nmodule.exports = router;\n```\n\n\n\n> This outputs the js in a `<script>` tag with the id of \"injector-\" + the file name\n\n## Options\n\n<table>\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Description</th>\n            <th>Default</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>path(required!)</td>\n            <td>path to your scripts folder</td>\n            <td>undefined</td>\n        </tr>\n        <tr>\n            <td>debug</td>\n            <td>Enable debugging to console</td>\n            <td>false</td>\n        </tr>\n        <tr>\n            <td>script</td>\n            <td>file to inject</td>\n            <td>index.js</td>\n        </tr>\n        <tr>\n            <td>enableCache</td>\n            <td>Cache previously loaded scripts to RAM</td>\n            <td>false</td>\n        </tr>\n        <tr>\n            <td>useRoute</td>\n            <td>Experimental: If set to true, it will attempt to match the root route and load a script with the same name.  If it does not find a file, it \"falls back\" load the script option.</td>\n            <td>false</td>\n        </tr>\n    </tbody>\n</table>","created":"2015-06-17T20:25:54.327Z","modified":"2015-06-17T20:34:25.192Z","lastPublisher":{"name":"mattmcfarland","email":"contact@mattmcfarland.com"},"owners":[{"name":"mattmcfarland","email":"contact@mattmcfarland.com"}],"other":{"_attachments":{},"_from":".","_id":"express-script-injector","_npmUser":{"name":"mattmcfarland","email":"contact@mattmcfarland.com"},"_npmVersion":"1.4.28","_rev":"1-6e1f57e53abf859a21e5f00286b15bb4","_shasum":"ed92e18ab2ced7365ea5764a47ae4299650a6212","author":{"name":"Matt McFarland"},"bugs":{"url":"https://github.com/MattMcFarland/express-script-injector/issues"},"directories":{},"dist-tags":{"latest":"0.0.2"},"dist":{"shasum":"ed92e18ab2ced7365ea5764a47ae4299650a6212","tarball":"http://registry.npmjs.org/express-script-injector/-/express-script-injector-0.0.2.tgz"},"maintainers":[{"name":"mattmcfarland","email":"contact@mattmcfarland.com"}],"readmeFilename":"README.md","time":{"modified":"2015-06-17T20:34:25.192Z","created":"2015-06-17T20:25:54.327Z","0.0.1":"2015-06-17T20:25:54.327Z","0.0.2":"2015-06-17T20:34:25.192Z"}}}