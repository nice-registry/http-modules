{"name":"http-route","version":"1.1.0","description":"HTTP routing with a nestable functional style","main":"index.js","scripts":{"test":"node test"},"repository":"https://github.com/parshap/http-route","keywords":["http","route","connect","request","router"],"license":"Public Domain","dependencies":{"connect":"~2.8.0","underscore":"~1.4.4"},"devDependencies":{"tape":"~1.0.4","concat-stream":"~1.0.0"},"gitHead":"7c66a89f71f493e75553211db238c5a5f320bcf6","homepage":"https://github.com/parshap/http-route","versions":[{"number":"0.3.3","date":"2013-10-15T08:04:25.726Z"},{"number":"1.0.0","date":"2014-09-27T21:38:16.172Z"},{"number":"1.1.0","date":"2014-09-27T21:38:22.766Z"}],"readme":"# http-route\n\nHTTP routing with a nestable functional style.\n\nThis module exports a function that wraps a given *http handler*\nand returns a new *http handler* that is only executed if the given\n*condition* is met.\n\n## Usage\n\n```js\nvar route = require(\"http-route\");\nvar compose = require(\"http-compose\");\nvar createServer = require(\"http\").createServer;\n\ncreateServer(compose([\n  route(isWrite, checkCSRF),\n  route(\"/hello\", compose([\n    route(\"GET /:name\", sendHello),\n    route(\"GET /\", sendDefaultHello),\n  ]),\n]).listen(8080);\n\nfunction isWrite(req) {\n  return [\"PUT\", \"POST\", \"DELETE\"].indexOf(req.method) !== -1;\n}\n\nfunction checkCSRF(req, res, callback) {\n  if (req.headers[\"x-csrf-token\"] !== \"magic\") {\n    res.statusCode = 400;\n    res.end(\"Invalid request\");\n    return;\n  }\n  callback();\n}\n\nfunction sendHello(req, res) {\n  res.end(\"hello, \" + req.params.name);\n}\n\nfunction sendDefaultHello(req, res) {\n  res.end(\"hello world\");\n}\n```\n\n### Conditions\n\nConditions are functions that determine if a request\nmatches the route or not. A condition function can contain any arbitrary\nlogic, as long as it synchronously returns a truthy or falsey value.\n\nThere are also higher-order conditions, such as strings, that get\n\"compiled\" down to a condition function. For example, the string\n`\"GET /hello\"` is equivalent to the following condition function:\n\n```js\nfunction(req) {\n  return req.method === \"GET\" && req.url === \"/hello\";\n}\n```\n\nCondition functions can also modify the state of the current request.\nFor example, condition functions can modify `req.url` so that nested\nroutes can match only the remaining part of the URL. They can also parse\nout parameters from the URL and populate something like `req.params`.\n\n#### Functions\n\nAny arbitrary function with a return value that will determine if the\nroute matches or not. The function receives the current request\nas a parameter.\n\n#### Strings\n\nStrings can contain a method, a url, or both.\n\n##### Methods\n`\"GET\"` will match GET requests.\n\n##### URLs\n`\"/foo\"` will match requests that *begin* with `\"/foo\"`. URLs can\ncontain named parameters in the same way as the [express router][] and\nwill populate `req.params`. The current `req.url` will be modified to\nremove the matched part of the URL so that nested routers can match on\nthe remaining unmatched part of the URL. The original full URL is saved\nin `req.originalUrl`.\n\n[express router]: https://github.com/expressjs/urlrouter\n\n##### Both\n`\"POST /bar\"` will match POST requests to the exact url `\"/bar\"`.\n\n#### Objects\n\n * **path**: The request path must match the given path exactly\n * **mount**: The request path must begin with the given path and will be\n   \"mounted\" under the given path (`req.url` will be adjusted to reflect\n   this)\n * **method**: The request method must match the given method\n\n#### Arrays\n\nAn array of conditions will be composed into a single condition\nand match only if all conditions match.\n\n### HTTP Handlers\n\nHTTP handlers are functions that handle http requests. These are the\nsame type of functions passed to\n`require(\"http\").createServer`.\n\n### Composing HTTP Handlers\n\nThe *http-compose* module (**not yet written**) can be used to compose\nmultiple http handlers into a single handler. A third callback parameter\nwill be passed to composed functions to allow passing control to the\nnext handler in the chain.\n\n## API\n\n### `route(condition, handler)`\n\nCreates an http handler function that will only be called if the given\ncondition matches.\n\n## Installation\n\n```\nnpm install http-route\n```\n","created":"2013-10-15T08:04:22.378Z","modified":"2017-05-22T17:22:56.765Z","lastPublisher":{"name":"parshap","email":"parshap+npm@gmail.com"},"owners":[{"email":"parshap+npm@gmail.com","name":"parshap"}],"other":{"_attachments":{},"_from":".","_id":"http-route","_npmUser":{"name":"parshap","email":"parshap+npm@gmail.com"},"_npmVersion":"1.4.28","_rev":"2-4a59d55a297bd20f71ab6129e7f1c48a","_shasum":"f00e394ab2683c3ef69f9d39a61f62d464d0c6c3","author":{"name":"Parsha Pourkhomami"},"bugs":{"url":"https://github.com/parshap/http-route/issues"},"directories":{},"dist-tags":{"latest":"1.1.0"},"dist":{"shasum":"f00e394ab2683c3ef69f9d39a61f62d464d0c6c3","tarball":"http://registry.npmjs.org/http-route/-/http-route-1.1.0.tgz"},"maintainers":[{"email":"parshap+npm@gmail.com","name":"parshap"}],"readmeFilename":"README.md","time":{"modified":"2017-05-22T17:22:56.765Z","created":"2013-10-15T08:04:22.378Z","0.3.3":"2013-10-15T08:04:25.726Z","1.0.0":"2014-09-27T21:38:16.172Z","1.1.0":"2014-09-27T21:38:22.766Z"}}}