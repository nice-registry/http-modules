{"name":"armrest","description":"A high-level HTTP / REST client for Node","version":"4.3.0","main":"./lib/","scripts":{"test":"node_modules/nodeunit/bin/nodeunit tests"},"devDependencies":{"nodeunit":"0.9.0","grunt":"0.4.5","grunt-contrib-jshint":"0.10.0","grunt-contrib-nodeunit":"0.4.0"},"dependencies":{"request":"2.38.0","log4js":"0.6.16","lodash":"2.4.1"},"repository":"https://github.com/shutterstock/armrest","homepage":"https://github.com/shutterstock/armrest","versions":[{"number":"1.0.0","date":"2013-01-06T19:03:50.133Z"},{"number":"1.0.1","date":"2013-01-07T16:43:14.144Z"},{"number":"2.0.2","date":"2013-09-04T22:46:37.314Z"},{"number":"2.1.0","date":"2013-09-09T22:19:20.761Z"},{"number":"2.1.1","date":"2013-10-29T16:19:55.010Z"},{"number":"2.1.2","date":"2013-10-29T21:14:43.823Z"},{"number":"2.2.0","date":"2014-02-04T16:24:43.015Z"},{"number":"2.2.1","date":"2014-04-02T20:19:13.015Z"},{"number":"2.2.2","date":"2014-04-02T20:38:16.680Z"},{"number":"2.3.0","date":"2014-04-07T13:23:21.718Z"},{"number":"2.3.1","date":"2014-05-05T18:34:31.770Z"},{"number":"2.3.2","date":"2014-05-06T21:15:27.427Z"},{"number":"3.0.0","date":"2014-05-20T16:48:46.662Z"},{"number":"3.0.1","date":"2014-06-11T20:13:59.342Z"},{"number":"4.0.0","date":"2014-06-24T21:28:50.654Z"},{"number":"4.1.0","date":"2014-07-08T21:19:09.772Z"},{"number":"4.2.0","date":"2014-07-15T20:41:09.088Z"},{"number":"4.2.1","date":"2014-07-23T14:25:15.373Z"},{"number":"4.2.2","date":"2014-09-29T21:43:15.286Z"},{"number":"4.3.0","date":"2015-01-14T17:45:18.269Z"}],"readme":"# Armrest\n\nA high-level HTTP / REST services client for Node.\n\n## Example\n\nSet up a client and issue a GET request:\n\n```javascript\nvar armrest = require('armrest');\nvar github = armrest.client('http://api.github.com');\n\ngithub.get({\n\turl: '/orgs/:organization',\n\tparams: { organization: 'shutterstock' },\n\tsuccess: function(organization) {\n\t\t// do something\n\t}\n});\n```\n\n## Installation\n\nInstall with npm:\n```\n$ npm install armrest\n```\n\n## Instantiating a REST Client\n\nThe `armrest.client()` factory takes two forms: send the base URL as a string if that will get you going, or send an object with parameters below for more flexibility.\n\n##### base\n\nThe base URL, including any or all of the scheme, hostname, port, and path.  This option overrides `scheme`, `hostname` and `port`.\n\n##### protocol\n\nThe scheme part of the base URL if `base` is not specified, either `http` or `https`.  Defaults to `http`.  Aliased as `scheme` as well for compatibility.\n\n##### host\n\nThe host part of the base URL (`hostname`:`port`) if `base` is not specified.\n\n##### hostname\n\nThe hostname part of the base URL if `base` is not specified.\n\n##### port\n\nThe port part of the base URL if `base` is not specified.\n\n##### timeout\n\nNumber of milliseconds to wait first for establishing the socket connection and sending the request, and then again for receiving the response.\n\n##### serializer\n\nOptional parameter, an object specifying a `contentType`, and functions to `serialize` and `deserialize` request and response bodies.\n\n##### logger\n\nInstance of some logger that implements `debug()`, `info()`, `warn()`, and `error()`.\n\n##### logLevel\n\nString indicating criticality of messages to log; one of `debug`, `info`, `warn`, or `error`.\n\n## Methods\n\n### get(), post(), put(), patch(), delete(), head()\n\nMake an HTTP request to the service, given the parameters below.\n\n##### url\n\nThe path component of the URL.  URLs may have sinatra-style interpolation tokens to be filled in by values from params.\n\n##### params\n\nParamaters to be sent with the request.  For HEAD, GET and DELETE requests these will be sent as query string parameters.  For other HTTP methods, parameters will be serialized according to the serialization scheme associated with the client, and sent in the body of the request.\n\n##### success\n\nCallback to be executed upon success, with the deserialized response as the first parameter, followed by the full response object.\n\n##### error\n\nCallback to be executed upon failure, with the error as the first parameter, followed by the full response object.\n\n##### complete\n\nCallback to be executed upon completion, whether the request failed or succeeded, with the error as the first parameter, followed by the full response object, and finally the deserialized response.\n\n###### Additional parameters are passed through to [request](https://github.com/mikeal/request#requestoptions-callback).\n\n## Working with Many Backend Services\n\nWhen you're working with a number of services at once, use the following alternate interface to configure clients and get easy access for later use.\n\n### configure(name, options)\n\nA class method to register backend services.  Send a name for the service, and options expected by the constructor, as detailed above.\n\n```javascript\nvar armrest = require('armrest');\n\narmrest.configure('github', {\n\tbase: 'http://api.github.com',\n\ttimeout: 5000\n});\n\narmrest.configure('metacpan', {\n\tbase: 'http://api.metacpan.org',\n\ttimeout: 5000\n});\n\n```\n\nLater from elsewhere, load in the module and interact with services by name.\n\n```javascript\nvar armrest = require('armrest');\n\narmrest.github.get(...);\narmrest.metacpan.get(...);\n```\n\n## Working with Many Client Instances\n\nWhen you're working with a number of client instances and you want them to have the same default behavior, use the following method.\n\n### setDefaults(options)\n\n```javascript\nvar armrest = require('armrest');\n\narmrest.setDefaults({\n\ttimeout: 10000\n});\n```\n\nThis will set the default timeout for any request to 10000 milliseconds.  To clear the default behaviors, use:\n\n```javascript\narmrest.clearDefaults();\n```\n\n## Authors\n\nThis library was developed by David Chester and Zubin Tiku at [Shutterstock](http://www.shutterstock.com)\n\n\n## License\n\nCopyright (C) 2012-2013 by Shutterstock Images, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","starsCount":3,"created":"2013-01-06T19:03:48.889Z","modified":"2015-01-14T17:45:18.269Z","lastPublisher":{"name":"rubikzube","email":"rubikzube@gmail.com"},"owners":[{"name":"dchester","email":"david@shutterstock.com"},{"name":"rubikzube","email":"rubikzube@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"armrest","_npmUser":{"name":"rubikzube","email":"rubikzube@gmail.com"},"_npmVersion":"1.3.24","_rev":"1-c4cd5af6f6c97e291fc017ba69346c23","author":{"name":"David Chester","email":"dchester@shutterstock.com"},"bugs":{"url":"https://github.com/shutterstock/armrest/issues"},"directories":{},"dist-tags":{"latest":"4.3.0"},"dist":{"shasum":"3ef0f3434c158c6c6d10fceb59bedee41ca6bde7","tarball":"http://registry.npmjs.org/armrest/-/armrest-4.3.0.tgz"},"maintainers":[{"name":"dchester","email":"david@shutterstock.com"},{"name":"rubikzube","email":"rubikzube@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-01-14T17:45:18.269Z","created":"2013-01-06T19:03:48.889Z","1.0.0":"2013-01-06T19:03:50.133Z","1.0.1":"2013-01-07T16:43:14.144Z","2.0.2":"2013-09-04T22:46:37.314Z","2.1.0":"2013-09-09T22:19:20.761Z","2.1.1":"2013-10-29T16:19:55.010Z","2.1.2":"2013-10-29T21:14:43.823Z","2.2.0":"2014-02-04T16:24:43.015Z","2.2.1":"2014-04-02T20:19:13.015Z","2.2.2":"2014-04-02T20:38:16.680Z","2.3.0":"2014-04-07T13:23:21.718Z","2.3.1":"2014-05-05T18:34:31.770Z","2.3.2":"2014-05-06T21:15:27.427Z","3.0.0":"2014-05-20T16:48:46.662Z","3.0.1":"2014-06-11T20:13:59.342Z","4.0.0":"2014-06-24T21:28:50.654Z","4.1.0":"2014-07-08T21:19:09.772Z","4.2.0":"2014-07-15T20:41:09.088Z","4.2.1":"2014-07-23T14:25:15.373Z","4.2.2":"2014-09-29T21:43:15.286Z","4.3.0":"2015-01-14T17:45:18.269Z"},"users":{"dfenster":true,"aw":true,"vkajjam":true}}}