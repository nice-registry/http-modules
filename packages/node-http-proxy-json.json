{"name":"node-http-proxy-json","version":"0.1.3","description":"for node-http-proxy transform the response json from the proxied server.","main":"index.js","scripts":{"test":"mocha -R spec ./test/*.js"},"repository":"https://github.com/langjt/node-http-proxy-json","keywords":["http-proxy","streaming","json"],"license":"MIT","homepage":"https://github.com/langjt/node-http-proxy-json#readme","dependencies":{"bufferhelper":"^0.2.1","concat-stream":"^1.5.1"},"devDependencies":{"chai":"^3.5.0","http-proxy":"^1.13.3","mocha":"^2.5.3"},"gitHead":"476cabd6a846edff6b8c4c71c940a38015d4440b","versions":[{"number":"0.1.0","date":"2016-06-04T14:42:53.604Z"},{"number":"0.1.1","date":"2016-06-04T15:45:14.585Z"},{"number":"0.1.2","date":"2016-09-11T11:26:51.959Z"},{"number":"0.1.3","date":"2016-09-27T06:30:23.462Z"}],"readme":"# node-http-proxy-json [![Build Status](https://travis-ci.org/langjt/node-http-proxy-json.svg?branch=master)](https://travis-ci.org/langjt/node-http-proxy-json)\n  for [node-http-proxy](https://github.com/nodejitsu/node-http-proxy) transform the response json from the proxied server.\n\n## Installation\n\n```  \nnpm install node-http-proxy-json\n```\n\n## Motivation\n  When using [node-http-proxy](https://github.com/nodejitsu/node-http-proxy) need to modify the response. If your proxy server returns HTML/XML document, you can try [Harmon](https://github.com/No9/harmon).\n  But sometimes the proxy server only returns the JSON. For example, call API from the server. Usually the server will compress the data.\n  So before using this repository, confirm your server compression format, currently only supports **gzip**„ÄÅ**deflate** and **uncompressed**.\n  If you need other compression formats, please create a new Issue, and I will try to achieve it as much as possible.\n\n## Use Cases\n\n#### Simulation server using gzip compression\n\n```\nvar zlib = require('zlib');\nvar http = require('http');\nvar httpProxy = require('http-proxy');\nvar modifyResponse = require('../');\n\n// Create a proxy server\nvar proxy = httpProxy.createProxyServer({\n    target: 'http://localhost:5001'\n});\n\n// Listen for the `proxyRes` event on `proxy`.\nproxy.on('proxyRes', function (proxyRes, req, res) {\n    modifyResponse(res, proxyRes.headers['content-encoding'], function (body) {\n        if (body) {\n            // modify some information\n            body.age = 2;\n            delete body.version;\n        }\n        return body;\n    });\n});\n\n// Create your server and then proxies the request\nvar server = http.createServer(function (req, res) {\n    proxy.web(req, res);\n}).listen(5000);\n\n// Create your target server\nvar targetServer = http.createServer(function (req, res) {\n\n    // Create gzipped content\n    var gzip = zlib.Gzip();\n    var _write = res.write;\n    var _end = res.end;\n\n    gzip.on('data', function (buf) {\n        _write.call(res, buf);\n    });\n    gzip.on('end', function () {\n        _end.call(res);\n    });\n\n    res.write = function (data) {\n        gzip.write(data);\n    };\n    res.end = function () {\n        gzip.end();\n    };\n\n    res.writeHead(200, {'Content-Type': 'application/json', 'Content-Encoding': 'gzip'});\n    res.write(JSON.stringify({name: 'node-http-proxy-json', age: 1, version: '1.0.0'}));\n    res.end();\n}).listen(5001);\n```\n\n#### Simulation server using deflate compression\n\n```\nvar zlib = require('zlib');\nvar http = require('http');\nvar httpProxy = require('http-proxy');\nvar modifyResponse = require('../');\n\n// Create a proxy server\nvar proxy = httpProxy.createProxyServer({\n    target: 'http://localhost:5001'\n});\n\n// Listen for the `proxyRes` event on `proxy`.\nproxy.on('proxyRes', function (proxyRes, req, res) {\n    modifyResponse(res, proxyRes.headers['content-encoding'], function (body) {\n        if (body) {\n            // modify some information\n            body.age = 2;\n            delete body.version;\n        }\n        return body;\n    });\n});\n\n// Create your server and then proxies the request\nvar server = http.createServer(function (req, res) {\n    proxy.web(req, res);\n}).listen(5000);\n\n// Create your target server\nvar targetServer = http.createServer(function (req, res) {\n\n    // Create deflated content\n    var deflate = zlib.Deflate();\n    var _write = res.write;\n    var _end = res.end;\n\n    deflate.on('data', function (buf) {\n        _write.call(res, buf);\n    });\n    deflate.on('end', function () {\n        _end.call(res);\n    });\n\n    res.write = function (data) {\n        deflate.write(data);\n    };\n    res.end = function () {\n        deflate.end();\n    };\n\n    res.writeHead(200, {'Content-Type': 'application/json', 'Content-Encoding': 'deflate'});\n    res.write(JSON.stringify({name: 'node-http-proxy-json', age: 1, version: '1.0.0'}));\n    res.end();\n}).listen(5001);\n```\n\n#### Server does not enable compression\n\n```\nvar http = require('http');\nvar httpProxy = require('http-proxy');\nvar modifyResponse = require('../');\n\n// Create a proxy server\nvar proxy = httpProxy.createProxyServer({\n    target: 'http://localhost:5001'\n});\n\n// Listen for the `proxyRes` event on `proxy`.\nproxy.on('proxyRes', function (proxyRes, req, res) {\n    modifyResponse(res, proxyRes.headers['content-encoding'], function (body) {\n        if (body) {\n            // modify some information\n            body.age = 2;\n            delete body.version;\n        }\n        return body;\n    });\n});\n\n// Create your server and then proxies the request\nvar server = http.createServer(function (req, res) {\n    proxy.web(req, res);\n}).listen(5000);\n\n// Create your target server\nvar targetServer = http.createServer(function (req, res) {\n    res.writeHead(200, {'Content-Type': 'application/json', 'Content-Encoding': 'deflate'});\n    res.write(JSON.stringify({name: 'node-http-proxy-json', age: 1, version: '1.0.0'}));\n    res.end();\n}).listen(5001);\n```\n\n## Tests\n\n  To run the test suite, first install the dependencies, then run `npm test`:\n\n```bash\n$ npm install\n$ npm test\n```\n\n## License\n\n  [MIT](http://opensource.org/licenses/MIT)","created":"2016-06-04T14:42:53.604Z","modified":"2016-09-27T06:30:23.462Z","lastPublisher":{"name":"xianfalang","email":"xianfalang@gmail.com"},"owners":[{"name":"xianfalang","email":"xianfalang@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"node-http-proxy-json","_nodeVersion":"5.6.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/node-http-proxy-json-0.1.3.tgz_1474957820952_0.758200952783227"},"_npmUser":{"name":"xianfalang","email":"xianfalang@gmail.com"},"_npmVersion":"3.6.0","_rev":"1-19c6745c5a0c7a3d435059d91e952771","_shasum":"ecfe2332cfc84905ffe999dbce34036797ac5138","author":{"name":"XianFa Lang","email":"xianfalang@gmail.com","url":"http://www.cnblogs.com/langjt"},"bugs":{"url":"https://github.com/langjt/node-http-proxy-json/issues"},"directories":{},"dist-tags":{"latest":"0.1.3"},"dist":{"shasum":"ecfe2332cfc84905ffe999dbce34036797ac5138","tarball":"http://registry.npmjs.org/node-http-proxy-json/-/node-http-proxy-json-0.1.3.tgz"},"maintainers":[{"name":"xianfalang","email":"xianfalang@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-09-27T06:30:23.462Z","created":"2016-06-04T14:42:53.604Z","0.1.0":"2016-06-04T14:42:53.604Z","0.1.1":"2016-06-04T15:45:14.585Z","0.1.2":"2016-09-11T11:26:51.959Z","0.1.3":"2016-09-27T06:30:23.462Z"}}}