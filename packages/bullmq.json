{"name":"bullmq","version":"0.0.1","description":"api http proxy + throttling/ratelimiting + message/job queue based on nodejs bull","main":"app.js","scripts":{"test":"node test/test.js"},"repository":"https://github.com/coderofsalvation/bullmq","dependencies":{"http-proxy":"~1.1.2","limiter":"~1.0.5","syslogger":"~0.1.0","amqp":"~0.2.0","bull":"~0.1.6"},"keywords":["http","proxy","throttling","message/job","queue","based","on","nodejs","bull"],"license":"BSD","homepage":"https://github.com/coderofsalvation/bullmq","devDependencies":{},"versions":[{"number":"0.0.1","date":"2015-04-04T19:44:34.201Z"}],"readme":"bullmq\n======\n<img alt=\"\" src=\"doc/bullmq.png\"/>\n\na httpproxythrottlingmessagejobqueuedomainrouter.\n\n### What is it?\n\nIts a enormous pillow to put in front of your webserver.\nPrevent server/application-panic by limiting and rerouting webrequests to different areas/servers.\n\n### Isnt there already software for this?\n\nThere are many enterprise-ish packages out there, but I wanted something deadsimple to configure.\nNext to that AMQP-support (not finished) will be able to scale out to big servicebusses like RabbitMQ e.g.\n\n### Concept\n\nHere's a sequencediagram (because sequencediagrams are cool :) hope it makes sense though)\n\n<img src=\"doc/seqdiagram1.png\"/>\n\n### A simple configuration\n\nLets have a look at the conf.d/myproject.js file:\n\n    exports.proxy = function(config){  \n      config[\"localhost:8080\"]        = [\"http://127.0.0.1:80\"];\n      config[\"mydomain.org:8080\"]     = [\"http://127.0.0.1:80\"];\n      config[\"www.mydomain.org:8080\"] = [\"http://127.0.0.1:80\"];\n      config[\"ws.mydomain.org:8080\"]  = [\"http://127.0.0.1:8111\"];\n      return config;\n    }\n\nAbove are domainredirects: localhost on 8080 will redirect to port 80. Other domains can \nbe entered (for example ws. for websocket traffic).\nMultiple arrayvalues will result in random round-robin behaviour (quickndirty scalable).\n    \n    exports.limiters = function(config){\n      config[\"localhost:8080\"]     = { unit: \"minute\", rate:90 };  // 90 requests per minute \n      config[\"localhost:8080/foo\"] = { unit: \"minute\", rate:20 };  // overrides 90 with 20 \n      return config;\n    }\n\nAbove you can limit per domain and/or url. The units are: day,hour,minute,second.\nThis is handy to ensure your projects will not overload your server.\nFor example, one could setup 3 subdomains for api-calls: \n\n* `freemium.api.com` \n* `basic.api.com` \n* `premium.api.com`\n* \nJust set different rates for these subdomains, and bullmq will reply to clients like so when rate are exceeded:\n\n    {succes:false, code: 429, msg:\"Too Many Requests - your IP is being rate limited\",data:{}}\n\nAnd now for workers:\n\n    exports.queue = function(config){  \n      config[\"localhost:8080\"]    = {\n        \"/foo\": { \n          queue: \"/request_web\",       // put '/foo' in queue 'request_web'\n          timeout: 500                 // generate timeout if no redis subscribers respond within 500 milliseconds\n        }      \n      };\n      return config;\n    }\n   \nHere you can queue a request for later processing using nodejs bull (b2b apis/messaging/long running tasks).\nIf a redis- or amqp-subscriber does snot respond with a 'completed'-event to the task, bullmq will reply:\n\n    {succes:false, code: 104, msg:\"server could not handle your request in time\",data:{}}\n\nIf a subscriber *does* respond within the timeout-timeframe, it can respond with a \"queued\", \"processing\" or \"ok\" reply.\nExample: user wants to encode 4 video's, clients are firing hundreds of push requests to the databases etc.\n\n\n### Syslog\n\nlogging can be directed to stdout and/or syslog.\nHere's some syslog output :\n\n    May  9 10:01:41 bullmq [26639]: ACCEPT => www.yourdomain/tpl/front/gfx/search_black.png from 94.214.179.213 (bucket:232.06\n    May  9 10:01:41 bullmq [26639]: ACCEPT => www.yourdomain/lib/flop/site/tpl/gfx/terminal.empty.gif from 94.214.179.213 (buc\n    May  9 10:01:45 bullmq [26639]: ACCEPT => www.yourdomain/js/?hash=MjAxMS0wNi90dHlyZWNvcmQtMTMwODMxODg4Mw== from 65.49.68.1\n    May  9 10:01:45 bullmq [26639]: ACCEPT => www.yourdomain/js/?hash=MjAxMS0wNi90dHlyZWNvcmQtMTMwNjk2NjA2NQ== from 65.49.2.17\n    May  9 10:01:48 bullmq [26639]: ACCEPT => www.yourdomain/lib/flop/js/gfx/flop.button.white.png from 65.49.68.165 (bucket:2\n    May  9 10:01:48 bullmq [26639]: ACCEPT => www.yourdomain/lib/flop/js/gfx/flop.skin.gif from 65.49.2.175 (bucket:227.572666\n    May  9 10:01:50 bullmq [26639]: ACCEPT => www.yourdomain/r/MjAxMy0xMC90dHlyZWNvcmR0dHktMTM4MTU3NjE5Nnw4MHgyNA== from 157.5\n    May  9 10:02:10 bullmq [26639]: ACCEPT => www.yourdomain/ from 94.214.179.213 (bucket:227.02533333333335)\n    May  9 10:02:11 bullmq [26639]: ACCEPT => www.yourdomain/lib/core/functions.js from 94.214.179.213 (bucket:226.07126666666\n\nNOTE: the bucket number is how much requests are possible for that url before rate-limiting kicks in.\n","starsCount":1,"created":"2015-04-04T19:44:34.201Z","modified":"2015-04-04T19:44:34.201Z","lastPublisher":{"name":"coderofsalvation","email":"info@leon.vankammen.eu"},"owners":[{"name":"coderofsalvation","email":"info@leon.vankammen.eu"}],"other":{"_attachments":{},"_from":".","_id":"bullmq","_npmUser":{"name":"coderofsalvation","email":"info@leon.vankammen.eu"},"_npmVersion":"1.4.3","_rev":"1-c0ddc73217e63004f9e2f1ef49e012b8","author":{"name":"Coder of Salvation"},"bugs":{"url":"https://github.com/coderofsalvation/bullmq/issues"},"directories":{"doc":"doc","test":"test"},"dist-tags":{"latest":"0.0.1"},"dist":{"shasum":"1a47f5229ead318b30d9fcf405a9293e35c6b14e","tarball":"http://registry.npmjs.org/bullmq/-/bullmq-0.0.1.tgz"},"maintainers":[{"name":"coderofsalvation","email":"info@leon.vankammen.eu"}],"readmeFilename":"README.md","time":{"modified":"2015-04-04T19:44:34.201Z","created":"2015-04-04T19:44:34.201Z","0.0.1":"2015-04-04T19:44:34.201Z"},"users":{"goliatone":true}}}