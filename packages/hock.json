{"name":"hock","description":"A mocking server for HTTP requests","version":"1.3.2","repository":"https://github.com/mmalecki/hock","keywords":["mock","http","test"],"devDependencies":{"mocha":"^2.1.0","request":"2.20.x","should":"^5.0.1","should-http":"0.0.2"},"main":"./lib/hock","scripts":{"test":"make test"},"engines":{"node":">=0.8.x"},"dependencies":{"deep-equal":"0.2.1"},"gitHead":"d632a61ec13cde8120700c4f9b9a60097549aeed","homepage":"https://github.com/mmalecki/hock#readme","versions":[{"number":"0.1.0","date":"2013-05-01T00:01:42.627Z"},{"number":"0.1.1","date":"2013-05-02T23:27:11.998Z"},{"number":"0.1.2","date":"2013-05-02T23:37:44.809Z"},{"number":"0.2.0","date":"2013-06-13T12:48:10.897Z"},{"number":"0.2.1","date":"2013-12-10T15:36:27.882Z"},{"number":"0.2.2","date":"2014-01-07T04:18:04.297Z"},{"number":"0.2.3","date":"2014-01-13T18:33:26.336Z"},{"number":"0.2.4","date":"2014-01-14T01:14:52.311Z"},{"number":"0.2.5","date":"2014-03-13T17:51:06.208Z"},{"number":"1.0.0","date":"2014-09-08T14:53:00.229Z"},{"number":"1.1.0","date":"2014-12-27T15:52:23.912Z"},{"number":"1.2.0","date":"2015-01-23T15:49:18.310Z"},{"number":"1.3.0","date":"2016-03-18T16:47:18.444Z"},{"number":"1.3.1","date":"2016-03-18T21:32:40.043Z"},{"number":"1.3.2","date":"2016-08-23T00:54:49.759Z"}],"readme":"# hock [![Build Status](https://secure.travis-ci.org/mmalecki/hock.png?branch=master)](http://travis-ci.org/mmalecki/hock) [![Join the chat at https://gitter.im/mmalecki/hock](https://badges.gitter.im/mmalecki/hock.svg)](https://gitter.im/mmalecki/hock?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nAn HTTP mocking server based on [Nock](https://github.com/flatiron/nock).\n\n## Overview\n\nHock is an HTTP mocking server with an API designed to closely match that of Nock. The key difference between Nock and Hock is that nock works by overriding `http.clientRequest`, allowing requests to be intercepted before they go over the wire.\n\nHock is designed as a fully functioning HTTP service. You enqueue requests and responses in a similar fashion to Nock:\n\n```Javascript\n\n    var http = require('http'),\n        hock = require('hock'),\n        request = require('request');\n\n    var mock = hock.createHock();\n    mock\n        .get('/some/url')\n        .reply(200, 'Hello!');\n\n    var server = http.createServer(mock.handler);\n    server.listen(1337, function () {\n        request('http://localhost:' + 1337 + '/some/url', function(err, res, body) {\n           console.log(body);\n        });\n    });\n\n```\n\n## HTTP Methods\n\nHock supports the 5 primary HTTP methods at this time:\n\n* GET\n* POST\n* PUT\n* PATCH\n* DELETE\n* HEAD\n* COPY\n\n```Javascript\n    // Returns a hock Request object\n    var req = hockServer.get(url, requestHeaders);\n```\n\n```Javascript\n    // Returns a hock Request object\n    var req = hockServer.delete(url, requestHeaders);\n```\n\n```Javascript\n    // Returns a hock Request object\n    var req = hockServer.post(url, body, requestHeaders);\n```\n\n```Javascript\n    // Returns a hock Request object\n    var req = hockServer.put(url, body, requestHeaders);\n```\n\n```Javascript\n    // Returns a hock Request object\n    var req = hockServer.head(url, requestHeaders);\n```\n\n## Request Object\n\nAll of these methods return an instance of a `Request`, a hock object which contains all of the state for a mocked request. To define the response and enqueue into the `hockServer`, call either `reply` or `replyWithFile` on the `Request` object:\n\n```Javascript\n    // returns the current hockServer instance\n    req.reply(statusCode, body, responseHeaders);\n```\n\n```Javascript\n    // returns the current hockServer instance\n    req.replyWithFile(statusCode, filePath, responseHeaders);\n```\n\nYou can optionally send a ReadableStream with reply, for example testing with large responses without having to use a file on disk:\n\n```Javascript\n    // returns the current hockServer instance\n    req.reply(statusCode, new RandomStream(10000), responseHeaders);\n```\n\n## Multiple matching requests\n\nYou can optionally tell hock to match multiple requests for the same route:\n\n```Javascript\n    hockServer.put('/path/one', {\n        foo: 1,\n        bar: {\n            baz: true\n            biz: 'asdf1234'\n        }\n    })\n    .min(4)\n    .max(10)\n    .reply(202, {\n        status: 'OK'\n    })\n```\n\nCall `many` if you need to handle at least one, possibly\nmany requests:\n\n```Javascript\n    hockServer.put('/path/one', {\n        foo: 1,\n        bar: {\n            baz: true\n            biz: 'asdf1234'\n        }\n    })\n    .many() // min 1, max Unlimited\n    .reply(202, {\n        status: 'OK'\n    })\n```\n\nProvide custom min and max options to `many`:\n\n```Javascript\n    hockServer.put('/path/one', {\n        foo: 1,\n        bar: {\n            baz: true\n            biz: 'asdf1234'\n        }\n    })\n    .many({\n        min: 4,\n        max: 10\n    })\n    .reply(202, {\n        status: 'OK'\n    })\n```\n\nSet infinite number of requests with `max(Infinity)`:\n\n```Javascript\n    hockServer.put('/path/one', {\n        foo: 1,\n        bar: {\n            baz: true\n            biz: 'asdf1234'\n        }\n    })\n    .max(Infinity)\n    .reply(202, {\n        status: 'OK'\n    })\n```\n\nIf you don't care how many or how few requests are served, you can use `any`:\n\n```Javascript\n    hockServer.put('/path/one', {\n        foo: 1,\n        bar: {\n            baz: true\n            biz: 'asdf1234'\n        }\n    })\n    .any() // equivalent to min(0), max(Infinity)\n    .reply(202, {\n        status: 'OK'\n    })\n```\n### hockServer.done() with many\n\n`hockServer.done()` will verify the number of requests fits within the\nminimum and maximum constraints specified by `min`, `max`, `many` or `any`:\n\n```js\nhockServer.get('/').min(2)\nrequest.get('/', function() {\n  hockServer.done(function(err) {\n    console.error(err) // error, only made one request\n  })\n})\n```\n\nIf the number of requests doesn't verify and you don't supply a callback\nto `hockServer.done()` it will throw!\n\n## Chaining requests\n\nAs the `reply` and `replyWithFile` methods return the current hockServer, you can chain them together:\n\n```Javascript\n\n    hockServer.put('/path/one', {\n        foo: 1,\n        bar: {\n            baz: true\n            biz: 'asdf1234'\n        }\n    })\n    .reply(202, {\n        status: 'OK'\n    })\n    .get('/my/file/should/be/here')\n    .replyWithFile(200, __dirname + '/foo.jpg');\n\n```\n\n## Matching requests\n\nWhen a request comes in, hock iterates through the queue in a First-in-first-out approach, so long as the request matches. The criteria for matching is based on the method and the url, and additionally the request body if the request is a `PUT`, `PATCH`, or `POST`. If you specify request headers, they will also be matched against before sending the response.\n\n## Path filtering\n\nYou can filter paths using regex or a custom function, this is useful for things like timestamps that get appended to urls from clients.\n\n```Javascript\n\n    hockServer\n        .filteringPathRegEx(/timestamp=[^&]*/g, 'timestamp=123')\n        .get('/url?timestamp=123')\n        .reply(200, 'Hi!');\n\n```\n\n```Javascript\n\n    hockServer\n        .filteringPath(function (p) {\n            return '/url?timestamp=XXX';\n        })\n        .get('/url?timestamp=XXX')\n        .reply(200, 'Hi!');\n\n```\n","starsCount":4,"created":"2013-05-01T00:01:39.336Z","modified":"2017-06-11T22:49:35.059Z","lastPublisher":{"name":"mmalecki","email":"me@mmalecki.com"},"owners":[{"email":"ken.perkins@rackspace.com","name":"kperkins"},{"email":"me@mmalecki.com","name":"mmalecki"}],"other":{"_attachments":{},"_from":".","_id":"hock","_nodeVersion":"5.9.1","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/hock-1.3.2.tgz_1471913687833_0.46008646581321955"},"_npmUser":{"name":"mmalecki","email":"me@mmalecki.com"},"_npmVersion":"3.10.6","_rev":"3-262c5984ff5fec82779bba29cddca91d","_shasum":"6ed3e8be42b466798118d12150aa80e8d6ef2219","author":{"name":"Maciej Ma≈Çecki","email":"me@mmalecki.com"},"bugs":{"url":"https://github.com/mmalecki/hock/issues"},"contributors":[{"name":"Ken Perkins","email":"ken.perkins@rackspace.com"}],"directories":{},"dist-tags":{"latest":"1.3.2"},"dist":{"shasum":"6ed3e8be42b466798118d12150aa80e8d6ef2219","tarball":"http://registry.npmjs.org/hock/-/hock-1.3.2.tgz"},"maintainers":[{"email":"ken.perkins@rackspace.com","name":"kperkins"},{"email":"me@mmalecki.com","name":"mmalecki"}],"readmeFilename":"README.md","time":{"modified":"2017-06-11T22:49:35.059Z","created":"2013-05-01T00:01:39.336Z","0.1.0":"2013-05-01T00:01:42.627Z","0.1.1":"2013-05-02T23:27:11.998Z","0.1.2":"2013-05-02T23:37:44.809Z","0.2.0":"2013-06-13T12:48:10.897Z","0.2.1":"2013-12-10T15:36:27.882Z","0.2.2":"2014-01-07T04:18:04.297Z","0.2.3":"2014-01-13T18:33:26.336Z","0.2.4":"2014-01-14T01:14:52.311Z","0.2.5":"2014-03-13T17:51:06.208Z","1.0.0":"2014-09-08T14:53:00.229Z","1.1.0":"2014-12-27T15:52:23.912Z","1.2.0":"2015-01-23T15:49:18.310Z","1.3.0":"2016-03-18T16:47:18.444Z","1.3.1":"2016-03-18T21:32:40.043Z","1.3.2":"2016-08-23T00:54:49.759Z"},"users":{"edin-m":true,"arikon":true,"ceejbot":true,"detj":true}}}