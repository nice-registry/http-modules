{"name":"sea-d45-framework","version":"0.1.0","description":"a library for creating http servers","main":"index.js","scripts":{"test":"./node_modules/mocha/bin/mocha test"},"repository":"https://github.com/adam-james/framework","keywords":["http","sead45"],"license":"MIT","homepage":"https://github.com/adam-james/framework#readme","devDependencies":{"chai":"^3.4.1","mocha":"^2.3.3"},"gitHead":"c13074c1283a4bd3ef0b8992829458be2016c0d8","versions":[{"number":"0.1.0","date":"2015-11-09T19:01:10.710Z"}],"readme":"Framework is a package for making http routing easier. It currently has full functionality for http server creation, get requests, and handling http, css, and plain text responses.\n\nlib/router.js is responsible for keeping track of the routes once they are created. The module exports a constructor function, which will create a new router object. The router object has a property .routes, which contains the following:\n\n'GET': {},\n'POST': {},\n'PUT': {},\n'PATCH': {},\n'DELETE': {}\n\nEach of these empty objects will store the routing information for that call.\n\nThe router has a method for each type of call that will add a route to the object. For example:\n\nRouter.prototype.get = function(route, cb) {\n  this.routes['GET'][route] = cb;\n};\n\nThe router also has a 404 method, which will return the status 404 and write 'not found' to the client.\n\nRouter.prototype.route is a function which is called when the http server runs its listener function. It takes two parameters, req and res, which are fed to it by the server. The function:\n\nRouter.prototype.route = function(req, res) {\n  (this.routes[req.method][req.url] || this.fourOhFour)(req, res);\n};\n\nThis looks up the callback function stored in the routes object for whatever request is being made. If the route does not exist, the function runs the 404 method.\n\nIn lib/app.js, an http server is created with the App.prototype.listen method.\n\nApp.prototype.listen = function(port) {\n\n  var server = http.createServer(function(req, res) {\n    router.route(req, res);\n  });\n\n  server.listen(port, function() {\n    console.log('server running on port ' + port);\n  });\n};\n\nOnce the server is created on the user-specified port, it will print to the console that the server is up and running. When a request is made, the request listener function calls router.route. router.route checks if there is a route with that url for that request method, and if it exists it returns the callback function defined by the call to router.get (or the equivalent method for the other types of requests).\n\nIn app.js, there is a function App.prototype.makeRoute. makeRoute takes three parameters, a route, a request method, and the desired response data. It uses the request method (reqMethod) to call the corresponding function on the router object and define a callback function for when the request is made.\n\nThe callback function currently works with GET requests but could be expanded to handle each type of request. Currently this module automatically checks if the response is going to be of content-type 'text/html' or 'text/css', and if not it will default to 'text/plain'. It then writes a status of 200 and the content type to the header, and writes the response data to the client. If the response data is a path to an HTML or CSS file, makeRoute will read the file and pass it into res.write.\n\nThis module only has full support for HTML, CSS, and plain text but could easily be expanded to support many types of content and different requests.\n\nWhen when creating a new instance of the framework, you may specify a public folder for serving static files:\n\nvar app = new Framework(__dirname + '/public');\n\nTo send responses, you can use the app.sendRes functionality:\n\napp.sendRes(req, res, message);\n\nIf a message is entered, the message is sent as the response.\n\nIf no message is entered, the file corresponding to the url is found in the public folder and sent as a response. Example:\n\nvar app = new Framework(__dirname + '/public');\n\napp.get('/index.html', function(req, res) { <br>\n  app.sendRes(req, res); <br>\n  // sends file 'index.html' from public folder <br>\n});\n\nAn example usage of the framework:\n\nvar Framework = require('sea-d45-framework'); <br>\nvar app = new Framework(__dirname + '/public');\n\n// set get route for '/' <br>\napp.get('/', function(req, res) { <br>\n    // your code goes here <br>\n});\n\n// set post route for '/greet' <br>\napp.post('/greet', function(req, res) { <br>\n    // your code goes here <br>\n});\n\n// set route for get request to '/index' <br>\n// will send file from path specified in third argument <br>\napp.makeRoute('/index', 'get', 'public/index.html');\n\n// start server listening on port 3000 <br>\napp.listen(3000);\n\nThis project makes use of sea-d45-router: https://github.com/codefellows/sea-d45-router.\n","created":"2015-11-09T19:01:10.710Z","modified":"2015-11-09T19:01:10.710Z","lastPublisher":{"name":"adam-james","email":"adam.j.sulewski@gmail.com"},"owners":[{"name":"adam-james","email":"adam.j.sulewski@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"sea-d45-framework","_nodeVersion":"0.12.7","_npmUser":{"name":"adam-james","email":"adam.j.sulewski@gmail.com"},"_npmVersion":"2.11.3","_rev":"1-df8e1c20a4b8cca4848ee88fb5280c3e","_shasum":"919450295aad72838f12f73ff52c164b057a4827","author":{"name":"adamsulewski17@yahoo.com"},"bugs":{"url":"https://github.com/adam-james/framework/issues"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"919450295aad72838f12f73ff52c164b057a4827","tarball":"http://registry.npmjs.org/sea-d45-framework/-/sea-d45-framework-0.1.0.tgz"},"maintainers":[{"name":"adam-james","email":"adam.j.sulewski@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-11-09T19:01:10.710Z","created":"2015-11-09T19:01:10.710Z","0.1.0":"2015-11-09T19:01:10.710Z"}}}