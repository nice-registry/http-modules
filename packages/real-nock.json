{"name":"real-nock","version":"1.0.1","description":"Create stub HTTP servers that you can modify on the fly","license":"MIT","repository":"https://github.com/TabDigital/real-nock","main":"src/index.js","scripts":{"test":"mocha"},"dependencies":{"http-proxy":"^1.7.3","nock":"^1.1.0"},"devDependencies":{"mocha":"~2.0.1","coffee-script":"~1.8.0","unirest":"~0.3.2","should":"~4.3.1","should-http":"0.0.2","async":"~0.9.0"},"homepage":"https://github.com/TabDigital/real-nock","versions":[{"number":"1.0.0","date":"2014-12-16T07:06:50.298Z"},{"number":"1.0.1","date":"2015-03-12T04:17:08.032Z"}],"readme":"# real-nock\n\n> Create stubbed HTTP servers that you can modify on the fly.\n\n[![NPM](http://img.shields.io/npm/v/real-nock.svg?style=flat)](https://npmjs.org/package/real-nock)\n[![License](http://img.shields.io/npm/l/real-nock.svg?style=flat)](https://github.com/TabDigital/real-nock)\n\n[![Build Status](http://img.shields.io/travis/TabDigital/real-nock.svg?style=flat)](http://travis-ci.org/TabDigital/real-nock)\n[![Dependencies](http://img.shields.io/david/TabDigital/real-nock.svg?style=flat)](https://david-dm.org/TabDigital/real-nock)\n[![Dev dependencies](http://img.shields.io/david/dev/TabDigital/real-nock.svg?style=flat)](https://david-dm.org/TabDigital/real-nock)\n\n## Sample usage\n\nSay you have a program that queries a backend system, and multiplies its response by 2.\nYou might want to do some **black-box** testing, spinning up an actual HTTP server\nso see how it reacts.\n\n```coffee\nStub = require 'real-nock'\n\ndescribe 'my program', ->\n\n  backend = new Stub(port: 6789)\n\n  before (done) -> backend.start(done)\n  after  (done) -> backend.stop(done)\n  beforeEach    -> backend.reset()\n\n  it 'multiplies the backend response by 2', (done) ->\n    backend.stub.get('/value').reply(200, value: 4)\n    program.multiply (err, val) ->\n      val.should.eql 8\n      done()\n\n  it 'also works for large numbers', (done) ->\n    backend.stub.get('/value').reply(200, value: 10000)\n    program.multiply (err, val) ->\n      val.should.eql 20000\n      done()\n\n  it 'fails gracefully when the backend is slow', (done) ->\n    backend.stub.get('/value').delayConnection(1000).reply('slow')\n    program.multiply (err, val) ->\n      err.message.should.eql 'Failed to call backend'\n      done()\n```\n\n## Why black-box testing?\n\nIn many cases, mocking outbound HTTP calls is a great option.\nHowever, sometimes you might need to rely on a real backend server:\n\n- if you want to test the actual HTTP connection\n- if you want to write tests that are completely independant of the implementation\n- if the program you're testing isn't written in Node\n\n## That's great, what type of stubs can I set up?\n\n`real-nock` uses [nock](https://github.com/pgte/nock) behind the scenes,\nso you should refer to their documentation for all possible operations.\nFor example:\n\n```coffee\n# reply with hello world after 1 second\nbackend.stub\n  .get('/')\n  .delayConnection(1000)\n  .reply(200, 'Hello world')\n\n# reply with the contents of a file\n# if the request payload matches\nbackend.stub\n  .post('/users', name: 'Bob')\n  .replyWithFile(200, __dirname + '/bob.json');\n```\n\nNote that stubs are consumed as soon as they are called.\nAny subsequent call will be considered an *unknown* route,\nand trigger the default behaviour (see below).\n\nThis allows you to define two stubs in series,\nand get the corresponding responses in that order:\n\n```coffee\nbackend.stub.get('/message').reply(200, 'hello')\nbackend.stub.get('/message').reply(200, 'goodbye')\n```\n\nYou can also configure them to apply more than once:\n\n```coffee\nbackend.stub\n  .get('/value')\n  .times(5)\n  .reply(200, 'hello world')\n```\n\n## Default behaviour\n\nBy default, the HTTP server will ignore any route that wasn't stubbed explicitly,\nor where the stub has been consumed. The corresponding request will get `ETIMEDOUT`.\n\nYou can also configure the following:\n\n```coffee\n# default behaviour (ETIMEDOUT)\nnew Stub(port: 6789, default: 'timeout')\n\n# request will get ECONNRESET\nnew Stub(port: 6789, default: 'reset')\n\n# request will get a custom status code\nnew Stub(port: 6789, default: 404)\n\n# apply a custom (req, res) function\nnew Stub(port: 6789, default: myHandler)\n```\n\nThis behaviour can be changed at runtime by setting the `default` property.\n\n```coffee\nbackend.default = 'reset'\n```\n\n## Troubleshooting\n\nFor debugging, you can log most events on the stub server to `stdout`.\n\n```coffee\nbackend = new Stub(port: 9000, debug: true)\n```\n\nwhich prints\n\n```\n[localhost:8001] Starting\n[localhost:8001] Started\n[localhost:8001] GET /users/1 (not stubbed)\n[localhost:8001] GET /users/2 (HTTP 200)\n[localhost:8001] Stopping\n[localhost:8001] Stopped\n```\n","starsCount":1,"created":"2014-12-16T07:06:50.298Z","modified":"2015-03-12T04:17:08.032Z","lastPublisher":{"name":"tabdigital","email":"npm@tabdigital.com.au"},"owners":[{"name":"tabdigital","email":"npm@tabdigital.com.au"}],"other":{"_attachments":{},"_from":".","_id":"real-nock","_npmUser":{"name":"tabdigital","email":"npm@tabdigital.com.au"},"_npmVersion":"1.3.24","_rev":"1-b8b347c61acc1bbaab1c928b3a410937","author":{"name":"Tabcorp Digital Team"},"bugs":{"url":"https://github.com/TabDigital/real-nock/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"b14c6db6c0267c2ff7f3703023e8aaaab5d06aa1","tarball":"http://registry.npmjs.org/real-nock/-/real-nock-1.0.1.tgz"},"maintainers":[{"name":"tabdigital","email":"npm@tabdigital.com.au"}],"readmeFilename":"README.md","time":{"modified":"2015-03-12T04:17:08.032Z","created":"2014-12-16T07:06:50.298Z","1.0.0":"2014-12-16T07:06:50.298Z","1.0.1":"2015-03-12T04:17:08.032Z"},"users":{"arikon":true}}}