{"name":"paged-http-stream","version":"1.0.1","description":"Turn a paged http request into a stream of pages.","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"license":"BSD","dependencies":{"concat-stream":"^1.5.0","debug":"^2.2.0","event-stream":"^3.3.1","got":"^4.2.0"},"gitHead":"cf8869fa438e871bf0bd9d1adaae63d8bd311224","versions":[{"number":"1.0.0","date":"2015-09-25T23:07:01.573Z"},{"number":"1.0.1","date":"2015-09-27T17:33:41.253Z"}],"readme":"# paged-http-stream\n\nTurn a paged http request into a stream of pages. Focuses on simplicity and modularity. Doesn't try to assume anything. You must implement a 'next' function that returns the next request based upon the previous one.\n\n```\nnpm install paged-http-stream\n```\n\n## API\n\n### `var pages = pager(opts, next)`\n\nOptions:\n\n`method`: defaults to GET\n\n`uri`: the url to query. includes query string.\n\n... and anything else that can be passed to a typical node.js http request (uses [got](http://npmjs.org/got))\n\n### `next = function (data)`\n\nYou need to implement the `next` function, which be able to interpret the data from the previous request, passed in as an argument, into a new request.\n\n## Example\n\nFor example, [figshare](http://figshare.com) returns each of their search pages like this:\n```json\n{\n  \"items_found\" : 91,\n  \"page_nr\": 1,\n  \"items\": []\n}\n```\n\nSo, I can write a function `next` that takes the `page_nr` and adds one, and then returns `null` when the items list is empty:\n```js\nfunction next (data) {\n  // data will be JSON parsed already.\n  if (data.error) throw new Error(data.error)\n  if (data.items && data.items.length === 0) return null // we are done here\n  var query = {\n    search_for: 'this is my query',\n    page: parseInt(data.page_nr + 1) || 1 // get the next page\n  }\n  return getOpts(query)\n}\n\nfunction getOpts (query) {\n  return {\n    method: 'GET',\n    uri: 'http://api.figshare.com/v1/articles/search?' + qs.stringify(query)\n  }\n}\n```\n\nThen, pass to the pager:\n```js\nvar pageStream = pager(startingOpts, next)\n```\n\nYou can then get access to each page like this (as JSON):\n```js\npageStream.on('data', funciton (page) {\n  console.log(page.items)\n})\n```\n\n## As seen in\n\n[figshare-search](http://github.com/karissa/figshare-search)\n\n## TODO\n\n* timeout, or wait time between requests\n","created":"2015-09-25T23:07:01.573Z","modified":"2015-09-27T17:33:41.253Z","lastPublisher":{"name":"karissa","email":"krmckelv@gmail.com"},"owners":[{"name":"karissa","email":"krmckelv@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"paged-http-stream","_nodeVersion":"0.12.7","_npmUser":{"name":"karissa","email":"krmckelv@gmail.com"},"_npmVersion":"2.11.3","_rev":"1-f5f08d8a821c8db37ddf2a70a0930074","_shasum":"bb2416b3a5fb60b221f667ea6ec7859cc154e9aa","author":{"name":"Karissa McKelvey","email":"karissa@karissamck.com","url":"http://karissamck.com/"},"directories":{},"dist-tags":{"latest":"1.0.1"},"dist":{"shasum":"bb2416b3a5fb60b221f667ea6ec7859cc154e9aa","tarball":"http://registry.npmjs.org/paged-http-stream/-/paged-http-stream-1.0.1.tgz"},"maintainers":[{"name":"karissa","email":"krmckelv@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-09-27T17:33:41.253Z","created":"2015-09-25T23:07:01.573Z","1.0.0":"2015-09-25T23:07:01.573Z","1.0.1":"2015-09-27T17:33:41.253Z"}}}