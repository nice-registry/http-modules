{"name":"angular-httpshooter","version":"1.1.1","description":"An angular js factory which shoots http calls asynchronously.","main":"angular-httpshooter.min.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/siddarthvader/angular-httpshooter","keywords":["loader","httploader","spinners","blockUI","angular","async","http","calls"],"license":"MIT","homepage":"https://github.com/siddarthvader/angular-httpshooter#readme","gitHead":"8d5c9fcdb68dbddda78d2e129302b21d424164a7","versions":[{"number":"1.0.0","date":"2017-01-06T12:35:37.959Z"},{"number":"1.0.1","date":"2017-01-08T07:45:54.600Z"},{"number":"1.1.0","date":"2017-01-08T11:20:21.191Z"},{"number":"1.1.1","date":"2017-03-08T16:44:46.540Z"}],"readme":"# Angular-httpshooter\n> A factory written in angular 1.0+ which makes/shoots all http calls collectively asynchronously.\n\nAngular-httpshooter makes all your api calls asynchronous, idea behind it to make the connection between server and client single threaded, it means shooting only one call at a point of time and wait for the response from server to launch the next call.\n\n> It blocks duplicate calls on the basis or either `url` or `data`, you can configure it according to your need.\n\nIt is based on `promise` chaining, it maintains a `queue` and push every call into it and then treat them on the basis of `FIFO`. it makes a promise for every `http` call and `reject`/`resolve` promise on the basis of response from server;\n\n> Angular-httpshooter is here to provide enhanced support to maintain ACID property of DB.\n\nAlmost all new databases handle it on their level and serialize read/write calls using lock-based protocols and other measures, but it is always preferred that client handles the concurrency on its level.\n\n>> NOTE: it will only matches the calls which are yet to take place, past calls are removed from queue as soon as the server returns response.\n\n\n> ![Example network panel](http://i.imgur.com/7i9FSkZ.png)\n\n\n\n## Features\n\n* One api/server call in action at one point of time.\n* it blocks duplicate server calls which generally happens when user press some button twice, read options for more details.\n* 'timeout' defines the max-time wait limit, it server does not respond before timeout limit, it rejects the promise and you will get 599 status in error block.\n* it releases two events on $rootScope `HTTP_CALL_STARTED` and `HTTP_CALL_STOPPED`, also sends config objects with events, you can catch this event and do many things. e.g. show loader or block UI from interaction.\n\n\n## Use Angular-httpshooter in your webapp\n\ninstall using npm\n```bash\nnpm install angular-httpshooter --save\n```\n\ninstall using bower\n```bash\nbower install angular-httpshooter media-all --save\n```\n\nclone the git repo\n\n```bash\ngit clone https://github.com/siddarthvader/angular-httpshooter.github\n```\n\nOnce you have downloded the package you will have to inject the dependency in your angular app.\n\nIn your Module\n````bash\n    app.module('angularApp',['angular-httpshooter']);\n````\n\nIn your Controller\n````bash\n    app.controller('appCtrl',['$httpshooter',function($httpshooter){\n\n        $httpshooter.queue({\n            method:'POST',\n            url:'http://example.com/postData',\n            data:data,\n            headers:headers \n        },timeout).then(function(data){\n            // if server returns success response\n            console.log(data);// will be main response returned from server, stripped of all other data\n        },function(data){\n            // if server returns error response\n        })\n\n    }]);\n````\n\nYes it is as simple as this.\n\n\n\n## Options\n\nHere are defaults values and possible values that can be passed to the factory for further processing.\n\n````bash\n| Property  |        Acceptable options       | Default options |\n|-----------|---------------------------------|-----------------|\n|  Method   |  get,post,delete,head,put,patch |        none     |\n|  url      |            <string>             |        none     |\n|  data     |            <object>             |        none     |\n|  headers  |            <object>             |        none     |\n|  timeout  |       time in miliseconds       |     36000ms     |\n\n````\n\n## Events\n \n\n ````bash\n       $rootScope.$on('HTTP_CALL_STARTED', function (event,data) {\n            console.log(data.url)  // url of http call in action\n            console.log(data.data) // data of http call\n            console.log(data.headers) // headers of http call\n\n            // basically you get whole config object in here, including a promise\n            // you can start a loader here, or freeze UI or can do anything\n        });\n\n        $rootScope.$on('HTTP_CALL_STOPPED', function (event,data) {\n            // same data as above event\n\n            // you can stop a loader here, or enable submit button or anything else\n        });\n\n\n ````\n\n\n## Customization\n\nHere are the default values of params used in factory, you can configure them, like this:\n\n````bash\napp.config(function(shootConfig) {\n  angular.extend(shootConfig, {\n     defaultTimeOut:36000 // miliseconds\n     blockDuplicateCalls: true,\n     compareDuplicateParam:{\n        url:true,\n        data:false\n    }\n  });\n})\n````\n\n* **defaultTimeOut** : default value 36000ms, you can change it if you want to.\n\n* **blockDuplicateCalls** : default value `true`, change if you want to allow all calls to reach server.\n\n* **compareDuplicateParam.url** : default value `true`, if `true` factory matches the calls on the basis of  `url` string.\n\n* **compareDuplicateParam.data** : default value `false`, if `true` factory matches the calls on the basis on `data` object\n\n\n## Licence\n\nMIT\n\n### Feel free to fork or report issues, I am here to help. \\m/","created":"2017-01-06T12:35:37.959Z","modified":"2017-03-08T16:44:46.540Z","lastPublisher":{"name":"siddarthvader","email":"siddharthjn93@gmail.com"},"owners":[{"name":"siddarthvader","email":"siddharthjn93@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"angular-httpshooter","_nodeVersion":"5.6.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/angular-httpshooter-1.1.1.tgz_1488991484442_0.4433066819328815"},"_npmUser":{"name":"siddarthvader","email":"siddharthjn93@gmail.com"},"_npmVersion":"3.10.5","_rev":"4-67da062bba6906fc5aaf0f10ea33a164","_shasum":"b529b51ea339daec5d946e2285f494239199fe2a","author":{"name":"siddarthvader","url":"siddharthjn93@gmail.com"},"bugs":{"url":"https://github.com/siddarthvader/angular-httpshooter/issues"},"directories":{},"dist-tags":{"latest":"1.1.1"},"dist":{"shasum":"b529b51ea339daec5d946e2285f494239199fe2a","tarball":"https://registry.npmjs.org/angular-httpshooter/-/angular-httpshooter-1.1.1.tgz"},"maintainers":[{"name":"siddarthvader","email":"siddharthjn93@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-08T16:44:46.540Z","created":"2017-01-06T12:35:37.959Z","1.0.0":"2017-01-06T12:35:37.959Z","1.0.1":"2017-01-08T07:45:54.600Z","1.1.0":"2017-01-08T11:20:21.191Z","1.1.1":"2017-03-08T16:44:46.540Z"}}}