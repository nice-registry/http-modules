{"name":"async-http","version":"0.1.2","description":"Asynchronous HTTP request API","license":"Apache-2.0","keywords":["async","promise","http","httpclient","httprequest","httpresponse"],"main":"bin/index.js","typings":"package.d.ts","scripts":{"test":"jake runtests"},"dependencies":{"async-promise":"*","xmlhttprequest":"*"},"devDependencies":{"jake-tsc":"file:..\\jake-tsc","source-map-support":"^0.2.10","typescript":"1.5.0-alpha"},"repository":"https://github.com/rbuckton/asyncjs","homepage":"https://github.com/rbuckton/asyncjs","versions":[{"number":"0.1.0","date":"2015-05-01T00:17:56.089Z"},{"number":"0.1.1","date":"2015-05-01T00:32:07.120Z"},{"number":"0.1.2","date":"2015-05-01T23:02:08.305Z"}],"readme":"# async-http #\r\n\r\nAsynchronous HTTP request API\r\n\r\n# Examples\r\n\r\n```ts\r\nimport { Promise } from 'async-promise';\r\nimport { HttpClient } from 'async-http';\r\n\r\nlet client = new HttpClient(\"https://api.github.com/\");\r\nclient.getAsJsonAsync(\"/repos/Microsoft/TypeScript/commits/a46a6106a8f01131ef208fa51fe69b3d06574507\").then(response => {\r\n\tconsole.log(response.commit.message);\r\n});\r\n```\r\n\r\n# API\r\n```ts\r\ndeclare module \"async-http\" {\r\n    import { Promise, CancellationToken } from 'async-promise';\r\n    export type JsonReplacer = any[] | ((key: string, value: any) => string);\r\n    /**\r\n     * A Uri\r\n     */\r\n    export class Uri {\r\n        static SCHEME_HTTP: string;\r\n        static SCHEME_HTTPS: string;\r\n        /**\r\n         * The protocol for the Uri (e.g. 'http:')\r\n         */\r\n        protocol: string;\r\n        /**\r\n         * The hostname for the Uri\r\n         */\r\n        hostname: string;\r\n        /**\r\n         * The port number for the Uri\r\n         */\r\n        port: number;\r\n        /**\r\n         * The path name for the Uri\r\n         */\r\n        pathname: string;\r\n        /**\r\n         * The search portion of the path, also known as the querystring\r\n         */\r\n        search: string;\r\n        /**\r\n         * The fragment portion of the path\r\n         */\r\n        hash: string;\r\n        /**\r\n         * A value indicating whether the Url is an absolute url\r\n         */\r\n        absolute: boolean;\r\n        /**\r\n         * Creates a new Uri by parsing a string\r\n         * @param uri {String} The uri string to parse\r\n         */\r\n        constructor(uri: string);\r\n        /**\r\n         * Creates a new Uri by combining a base Uri and a relative Uri\r\n         * @param baseUri The base uri\r\n         * @param uri The relative uri\r\n         */\r\n        constructor(baseUri: string | Uri, uri: string | Uri);\r\n        /**\r\n         * Gets the origin of the Uri\r\n         */\r\n        origin: string;\r\n        /**\r\n         * Gets the host for the uri, including the hostname and port\r\n         */\r\n        host: string;\r\n        /**\r\n         * Gets the scheme for the uri (e.g. 'http://'')\r\n         */\r\n        scheme: string;\r\n        /**\r\n         * Tests whether the provided uri has the same origin as this uri\r\n         * @param uri The uri to compare against\r\n         * @returns True if the uri's have the same origin; otherwise, false\r\n         */\r\n        isSameOrigin(uri: string | Uri): boolean;\r\n        /**\r\n         * Gets the string representation of the Uri\r\n         * @param format {String} A format specifier.\r\n         * @returns {String} The string content of the Uri\r\n         */\r\n        toString(format?: string): string;\r\n        /**\r\n         * Parses the provided uri string\r\n         * @param uri {String} The uri string to parse\r\n         * @returns {Uri} The parsed uri\r\n         */\r\n        static parse(uri: string): Uri;\r\n        /**\r\n         * Combines two uris\r\n         * @param baseUri The base uri\r\n         * @param uri The relative uri\r\n         * @returns The combined uri\r\n         */\r\n        static combine(baseUri: string | Uri, uri: string | Uri): Uri;\r\n    }\r\n    export module QueryString {\r\n        interface QueryStringMap {\r\n            [key: string]: string | number | boolean | (string | number | boolean)[];\r\n        }\r\n        function stringify(obj: any): string;\r\n        function parse(text: string): QueryStringMap;\r\n    }\r\n    /**\r\n     * An HTTP request for an HttpClient\r\n     */\r\n    export class HttpRequest {\r\n        private _headers;\r\n        /**\r\n         * The body of the request\r\n         */\r\n        content: HttpContent;\r\n        /**\r\n         * The HTTP method for the request\r\n         */\r\n        method: string;\r\n        /**\r\n         * The url for the request\r\n         */\r\n        url: Uri;\r\n        /**\r\n         * Creates an HTTP request for an HttpClient\r\n         * @param method The HTTP method for the request\r\n         * @param url The url for the request\r\n         */\r\n        constructor(method?: string, url?: string | Uri);\r\n        headers: HttpHeaders;\r\n    }\r\n    export interface HttpHeaders {\r\n        \"Content-Length\"?: string;\r\n        \"Content-Type\"?: string;\r\n        \"Accepts\"?: string;\r\n        \"User-Agent\"?: string;\r\n        [header: string]: string;\r\n    }\r\n    /**\r\n     * A response from an HttpClient\r\n     */\r\n    export class HttpResponse {\r\n        private _headers;\r\n        request: HttpRequest;\r\n        statusCode: number;\r\n        statusText: string;\r\n        content: HttpContent;\r\n        constructor(statusCode?: number);\r\n        headers: HttpHeaders;\r\n    }\r\n    /**\r\n     * A client for HTTP requests\r\n     */\r\n    export class HttpClient {\r\n        private _headers;\r\n        private _cts;\r\n        private _closed;\r\n        /**\r\n         * The base url for the client\r\n         */\r\n        baseUrl: Uri;\r\n        /**\r\n         * A value indicating whether cookies should be sent to a cross-origin request\r\n         */\r\n        withCredentials: boolean;\r\n        /**\r\n         * The number of milliseconds to wait before the request should time out\r\n         */\r\n        timeout: number;\r\n        /**\r\n         * The username for the request\r\n         */\r\n        username: string;\r\n        /**\r\n         * The password for the request\r\n         */\r\n        password: string;\r\n        /**\r\n         * Creates a client for HTTP requests\r\n         * @param baseUrl The base url for the client\r\n         */\r\n        constructor(baseUrl?: string | Uri);\r\n        headers: HttpHeaders;\r\n        /**\r\n         * Closes the client and cancels all pending requests\r\n         */\r\n        close(): void;\r\n        /**\r\n         * Gets the response text from the requested url\r\n         * @param url The url for the request\r\n         * @returns A future result for the string\r\n         */\r\n        getStringAsync(url: string | Uri): Promise<string>;\r\n        /**\r\n         * Gets the response from issuing an HTTP GET to the requested url\r\n         * @param url The url for the request\r\n         * @param token A token that can be used to cancel the request\r\n         * @returns A future result for the response\r\n         */\r\n        getAsync(url: string | Uri, token?: CancellationToken): Promise<HttpResponse>;\r\n        /**\r\n         * Gets the response from issuing an HTTP POST to the requested url\r\n         * @param url The url for the request\r\n         * @param body The body of the request\r\n         * @param token A token that can be used to cancel the request\r\n         * @returns A future result for the response\r\n         */\r\n        postAsync(url: string | Uri, body: HttpContent, token?: CancellationToken): Promise<HttpResponse>;\r\n        /**\r\n         * Gets the response from issuing an HTTP POST of a JSON serialized value to the requested url\r\n         * @param url The url for the request\r\n         * @param value The value to serialize\r\n         * @param jsonReplacer An array or callback used to replace values during serialization\r\n         * @param token A token that can be used to cancel the request\r\n         * @returns A future result for the response\r\n         */\r\n        postJsonAsync(url: string | Uri, value: any, jsonReplacer?: any[] | ((key: string, value: any) => string), token?: CancellationToken): Promise<HttpResponse>;\r\n        /**\r\n         * Gets the response from issuing an HTTP PUT to the requested url\r\n         * @param url The url for the request\r\n         * @param body The body of the request\r\n         * @param token A token that can be used to cancel the request\r\n         * @returns A future result for the response\r\n         */\r\n        putAsync(url: string | Uri, content: HttpContent, token?: CancellationToken): Promise<HttpResponse>;\r\n        /**\r\n         * Gets the response from issuing an HTTP PUT of a JSON serialized value to the requested url\r\n         * @param url The url for the request\r\n         * @param value The value to serialize\r\n         * @param jsonReplacer An array or callback used to replace values during serialization\r\n         * @param token A token that can be used to cancel the request\r\n         * @returns A future result for the response\r\n         */\r\n        putJsonAsync(url: string | Uri, value: any, jsonReplacer?: any[] | ((key: string, value: any) => string), token?: CancellationToken): Promise<HttpResponse>;\r\n        /**\r\n         * Gets the response from issuing an HTTP DELETE to the requested url\r\n         * @param url The url for the request\r\n         * @param token A token that can be used to cancel the request\r\n         * @returns A future result for the response\r\n         */\r\n        deleteAsync(url: string | Uri, token?: CancellationToken): Promise<HttpResponse>;\r\n        /**\r\n         * Sends the provided request and returns the response\r\n         * @param request {HttpRequest} An HTTP request to send\r\n         * @param token {futures.CancellationToken} A token that can be used to cancel the request\r\n         * @returns {futures.Promise<HttpResponse>} A future result for the response\r\n         */\r\n        sendAsync(request: HttpRequest, token?: CancellationToken): Promise<HttpResponse>;\r\n    }\r\n    export class HttpContentWriter {\r\n        private _buffer;\r\n        private _byteOffset;\r\n        private _limit;\r\n        private _capacity;\r\n        constructor(limit?: number, capacity?: number);\r\n        size: number;\r\n        write(buffer: ArrayBuffer, byteOffset: number, byteLength: number): void;\r\n        toArrayBuffer(): ArrayBuffer;\r\n        close(): void;\r\n        private ensureCapacity(capacity);\r\n    }\r\n    export class HttpContent {\r\n        private _content;\r\n        private _headers;\r\n        private _loadingPromise;\r\n        private _state;\r\n        constructor();\r\n        type: string;\r\n        headers: HttpHeaders;\r\n        loadAsync(maxBufferSize?: number): Promise<void>;\r\n        readAsStringAsync(): Promise<string>;\r\n        readAsArrayBufferAsync(): Promise<ArrayBuffer>;\r\n        readAsJsonAsync(reviver?: (key: any, value: any) => any): Promise<any>;\r\n        close(): void;\r\n        protected serialize(writer: HttpContentWriter): Promise<void> | void;\r\n        protected throwIfClosed(): void;\r\n        private createWriter(maxBufferSize);\r\n    }\r\n    export class ArrayBufferContent extends HttpContent {\r\n        private _buffer;\r\n        constructor(buffer: ArrayBuffer);\r\n        type: string;\r\n        close(): void;\r\n        readAsArrayBufferAsync(): Promise<ArrayBuffer>;\r\n        protected serialize(writer: HttpContentWriter): void;\r\n    }\r\n    export class StringContent extends HttpContent {\r\n        private _text;\r\n        constructor(text: string, encoding?: string, mediaType?: string);\r\n        type: string;\r\n        readAsStringAsync(): Promise<string>;\r\n        close(): void;\r\n        protected serialize(writer: HttpContentWriter): void;\r\n    }\r\n    export class JsonContent extends HttpContent {\r\n        private _value;\r\n        private _replacer;\r\n        private _space;\r\n        constructor(value: any, replacer?: JsonReplacer, space?: string, mediaType?: string);\r\n        type: string;\r\n        readAsJsonAsync(reviver?: (key: any, value: any) => any): Promise<any>;\r\n        close(): void;\r\n        protected serialize(writer: HttpContentWriter): void;\r\n    }\r\n    /**\r\n     * An error raised during an http request\r\n     */\r\n    export interface HttpError extends Error {\r\n        /**\r\n         * The `HttpClient` that initiated the request\r\n         */\r\n        httpClient: HttpClient;\r\n        /**\r\n         * The `HttpResponse` for the error\r\n         */\r\n        response: HttpResponse;\r\n    }\r\n}\r\n```","created":"2015-05-01T00:17:56.089Z","modified":"2015-05-01T23:02:08.305Z","lastPublisher":{"name":"rbuckton","email":"rbuckton@chronicles.org"},"owners":[{"name":"rbuckton","email":"rbuckton@chronicles.org"}],"other":{"_attachments":{},"_from":".","_id":"async-http","_nodeVersion":"0.12.2","_npmUser":{"name":"rbuckton","email":"rbuckton@chronicles.org"},"_npmVersion":"2.7.4","_rev":"1-90815d2d401977fae07ce3b27114c6c7","_shasum":"b539f1946f3c7e35df7d132fd300931335dbda7e","author":{"name":"Ron Buckton","email":"rbuckton@chronicles.org","url":"http://github.com/rbuckton"},"bugs":{"url":"http://github.com/rbuckton/asyncjs/issues","email":"rbuckton@chronicles.org"},"directories":{},"dist-tags":{"latest":"0.1.2"},"dist":{"shasum":"b539f1946f3c7e35df7d132fd300931335dbda7e","tarball":"http://registry.npmjs.org/async-http/-/async-http-0.1.2.tgz"},"maintainers":[{"name":"rbuckton","email":"rbuckton@chronicles.org"}],"readmeFilename":"README.md","time":{"modified":"2015-05-01T23:02:08.305Z","created":"2015-05-01T00:17:56.089Z","0.1.0":"2015-05-01T00:17:56.089Z","0.1.1":"2015-05-01T00:32:07.120Z","0.1.2":"2015-05-01T23:02:08.305Z"}}}