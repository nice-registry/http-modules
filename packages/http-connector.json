{"name":"http-connector","version":"0.1.2","description":"[![Build Status](https://travis-ci.org/edjafarov/http-connector.svg?branch=master)](https://travis-ci.org/edjafarov/http-connector) ## http-connector server to client and client to server connector","main":"./src/httpConnector.js","browser":"./src/httpConnector.client.js","scripts":{"test":"node node_modules/mocha/bin/mocha ./tests/**/*.spec.js"},"repository":"https://github.com/edjafarov/http-connector","license":"ISC","homepage":"https://github.com/edjafarov/http-connector#readme","dependencies":{"busboy":"^0.2.11","traverse":"^0.6.6"},"devDependencies":{"body-parser":"^1.14.1","chai":"^3.3.0","es6-promise":"^3.0.2","express":"^4.13.3","file-api":"^0.10.4","form-data":"^1.0.0-rc3","mocha":"^2.3.3","node-fetch":"^1.3.3","sinon":"^1.17.1"},"gitHead":"8ce939ed78b536ecc4f7e8fc8cebe0a1ab90cd1d","versions":[{"number":"0.1.0","date":"2015-10-10T18:50:35.519Z"},{"number":"0.1.1","date":"2015-10-10T18:58:29.958Z"},{"number":"0.1.2","date":"2015-10-13T12:59:32.799Z"}],"readme":"[![Build Status](https://travis-ci.org/edjafarov/http-connector.svg?branch=master)](https://travis-ci.org/edjafarov/http-connector)\n## http-connector server to client and client to server connector\n\nConnector have two parts. The web part and server part. Connector allows not to think about how to implement communication between client and server and just send messages out and handle incoming messages. The connector abstracts communication to two methods (send and listen) on one side and two methods(send and listen) on other side. Implementations could vary and any protocol that can send messages will work. This specific implementation is for http.\n\nConnector doesn't implement transaction. Thus to make the communication as a transaction it should be implemented on top of Connector.\n\nYou can also pass files through the connector to a server. You can build as complex message objects as you like and put <File> objects anywhere, It could be multiple files in array for example <FileList>. When the message will pass to a server the <File> objects will have a stream property that you can use to pipe anywhere you like.\n\n\n### HTTPServerClientStream\n\n```javascript\nvar app = express();\napp.use(bodyParser.json())\nvar sconn = connector.HTTPServerClientStream(app);\nsconn.listen(function(message){\n  //handle message\n  message.files[0].stream.pipe(fs.createWriteStream())\n  sconn.send({_response:message._response})\n});\napp.listen(process.env.PORT)\n```\n\n### HTTPClientServerStream\n\n```javascript\nvar cconn = connector.HTTPClientServerStream();\ncconn.send({files:document.getElementById('myInput').files})\ncconn.listen(function(message){\n  //handle response\n});\n```\n\n## IMPORTANT\n\nIf you want this to scale. You will need to make kind of sticky session. Because the files are posted outside of original request, thus this two requests should go to the same backend node.\n","created":"2015-10-10T18:50:35.519Z","modified":"2015-10-13T12:59:32.799Z","lastPublisher":{"name":"edjafarov","email":"djkojb@gmail.com"},"owners":[{"name":"edjafarov","email":"djkojb@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"http-connector","_nodeVersion":"0.10.35","_npmUser":{"name":"edjafarov","email":"djkojb@gmail.com"},"_npmVersion":"2.9.1","_rev":"1-3b82c52b39495bc3d54db94245fa9227","_shasum":"c63524964bda922f7977fcf5684dfa214f52498e","author":"","bugs":{"url":"https://github.com/edjafarov/http-connector/issues"},"directories":{},"dist-tags":{"latest":"0.1.2"},"dist":{"shasum":"c63524964bda922f7977fcf5684dfa214f52498e","tarball":"http://registry.npmjs.org/http-connector/-/http-connector-0.1.2.tgz"},"maintainers":[{"name":"edjafarov","email":"djkojb@gmail.com"}],"readmeFilename":"readme.md","time":{"modified":"2015-10-13T12:59:32.799Z","created":"2015-10-10T18:50:35.519Z","0.1.0":"2015-10-10T18:50:35.519Z","0.1.1":"2015-10-10T18:58:29.958Z","0.1.2":"2015-10-13T12:59:32.799Z"}}}