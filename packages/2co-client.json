{"name":"2co-client","version":"0.0.13","description":"A low-level HTTP client for the 2checkout API","main":"index.js","repository":"https://github.com/errorception/2co-client","license":"MIT","keywords":["2checkout","2co","payment","payment gateway"],"dependencies":{"node_hash":"~0.2.0","request":"^2.75.0"},"gitHead":"47054d5ee540642ff61b1a58a25c9c037b3bf9a2","homepage":"https://github.com/errorception/2co-client#readme","scripts":{},"versions":[{"number":"0.0.1","date":"2013-05-15T12:00:59.230Z"},{"number":"0.0.2","date":"2013-05-15T15:40:43.029Z"},{"number":"0.0.3","date":"2013-05-26T21:13:53.317Z"},{"number":"0.0.4","date":"2013-05-31T04:40:10.509Z"},{"number":"0.0.5","date":"2013-05-31T05:08:49.719Z"},{"number":"0.0.6","date":"2013-05-31T05:17:33.823Z"},{"number":"0.0.7","date":"2013-06-07T13:47:24.064Z"},{"number":"0.0.8","date":"2013-06-08T04:09:59.958Z"},{"number":"0.0.9","date":"2013-06-08T09:12:27.992Z"},{"number":"0.0.10","date":"2013-06-08T09:40:19.308Z"},{"number":"0.0.11","date":"2013-11-06T08:07:21.955Z"},{"number":"0.0.12","date":"2013-11-06T09:19:51.789Z"},{"number":"0.0.13","date":"2016-09-19T07:47:14.246Z"}],"readme":"2co-client\n===\n\nA thin node.js client for the 2checkout API.\n\nIn production use, running the payment system at [Errorception](http://errorception.com/).\n\n## Installation\n\n```\n$ npm install 2co-client\n```\n\n## Usage\n\n```javascript\nvar client = require(\"2co-client\")(options);\n\nclient.sales.list(function(err, salesInformation) {\n\t// As you'd expect\t\n});\n```\n\n## Initialization\n\n```\nvar client = require(\"2co-client\")(options);\n```\n\n`options` is an object that can contain the following properties:\n* `username` Your 2checkout API user's username\n* `password` Your 2checkout API user's password\n* `secret` Your 2checkout secret\n* `logFile` (optional) The path to a file that this module should output logs to. Requests and responses are logged here.\n* `test` Enables demo mode. Bypasses INS and return data checks, and makes them always return true.\n\n## Methods\n\nThe methods provided by the client mirror the API endpoints as specified in the [2co Advanced User Guide [PDF]](https://www.2checkout.com/documentation/Advanced_User_Guide.pdf). It will be helpful to keep a copy of the user guide handy when using this module.\n\nAll methods take a callback as the last argument, in the typical node.js style. Some methods might take an optional first argument, which is expected to be an object. This object is used as the payload to be sent to the API.\n\nErrors will either be a JS Exception object if there was a problem with the network layer, or will be an array of objects if the API returned a 400/500 series error.\n\nA listing of API methods follows.\n\n### `client.account`\n\n* `client.account.companyInfo`: Retrieves your account's company information details. GETs `/acct/detail_company_info`.\n* `client.account.contactInfo`: Retrieve your account's contact information details. GETs `/acct/detail_contact_info`.\n* `client.account.pendingPayment`: Get a detailed estimate of the current pending payment. GETs `/acct/detail_pending_payment`.\n* `client.account.listPayments`: Get a list of past payments. GETs `/acct/list_payments`.\n\n### `client.sales`\n\n* `client.sales.details`: Retrieve information about a specific sale or invoice. GETs `/sales/detail_sale`.\n\n* `client.sales.list`: Retrieve a summary of all sales or only those matching a variety of sale attributes. GETs `/sales/list_sales`.\n\n* `client.sales.refundInvoice`: Attempts to issue a full or partial refund on an invoice. POSTs to `/sales/refund_invoice`.\n\n* `client.sales.refundLineitem`: Attempt to issue a full or partial refund on an invoice. POSTs to `/sales/refund_lineitem`.\n\n* `client.sales.stopLineitemRecurring`: Attempt to stop a recurring line item for a specified sale. POSTs to `/sales/refund_lineitem_recurring`.\n\n* `client.sales.markShipped`: Attempt to mark an order as shipped and will attempt to reauthorize sale if specified in call. POSTs to `/sales/mark_shipped`.\n\n* `client.sales.createComment`: Add a comment to a specified sale. POSTs to `/sales/create_comment`.\n\n### `client.products`\n\n* `client.products.details`: Retrieve the details for a single product. GETs `/products/detail_product`.\n\n* `client.products.list`: Retrieve list of all products in account. GETs `/products/list_products`.\n\n* `client.products.create`: Create a new product. POSTs to `/products/create_product`.\n\n* `client.products.update`: Update a product. POSTs to `/products/update_product`.\n\n* `client.products.del`: Deletes a product. POSTs to `/products/delete_product`.\n\n* `client.products.options.details`: Retrieve the details for a single option. GETs `/products/detail_options`.\n\n* `client.products.options.list`: Retrieve list of all options in account. GETs `/products/list_products`.\n\n* `client.products.options.create`: Create a new product option. POSTs to `/products/create_option`.\n\n* `client.products.options.update`: Updates a product option. POSTs to `/products/update_option`.\n\n* `client.products.options.del`: Deletes a product option. POSTs to `/products/delete_option`.\n\n* `client.products.coupons.details`: Retrieve the details for a single coupon. GETs `/products/detail_coupon`.\n\n* `client.products.coupons.list`: Retrieve list of all coupons in the account. GETs `/products/list_coupons`.\n\n* `client.products.coupons.create`: Creates a new coupon. POSTs to `/products/create_coupon`.\n\n* `client.products.coupons.update`: Updates a coupon. POSTs to `/products/update_coupon`.\n\n* `client.products.coupons.del`: Deletes a coupon. POSTs to `/products/delete_coupon`.\n\n## Additional methods\n\nThe following methods simplify some of the chores of working with the API.\n\n### `client.canTrustINS`\n\nChecks if the INS data returned by 2checkout is valid and not tampered with. You must pass `options.secret` when creating the client for this to work correctly. Will always return true if `options.test` is true. You must pass it the body of the HTTP POST you received, as a JSON object of key-value pairs. If you are using Express along with the `bodyParser`, the `req.body` already contains object as expected.\n\n### `client.canTrustReturnData`\n\nChecks if the return data from the purchase process by 2checkout is valid. You must pass `options.secret` when creating the client for this to work correctly. Will always return true if `options.test` is true. You must pass it the query string as a JSON object of key-value pairs. If you are using Express, the `req.query` already contains the object as expected.\n\n\n## License\n\nMIT","created":"2013-05-15T12:00:53.242Z","modified":"2016-09-19T07:47:14.246Z","lastPublisher":{"name":"rakeshpai","email":"rakeshpai@errorception.com"},"owners":[{"name":"rakeshpai","email":"rakeshpai@errorception.com"}],"other":{"_attachments":{},"_from":".","_id":"2co-client","_nodeVersion":"6.4.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/2co-client-0.0.13.tgz_1474271233983_0.08863374497741461"},"_npmUser":{"name":"rakeshpai","email":"rakeshpai@errorception.com"},"_npmVersion":"3.10.7","_rev":"1-3329c66edc6ab020e1d840210c853dbf","_shasum":"03bf010d4275d32f4b2a79b7e441f312bf54e07e","author":{"name":"Rakesh Pai","email":"rakeshpai@errorception.com"},"bugs":{"url":"https://github.com/errorception/2co-client/issues"},"directories":{},"dist-tags":{"latest":"0.0.13"},"dist":{"shasum":"03bf010d4275d32f4b2a79b7e441f312bf54e07e","tarball":"http://registry.npmjs.org/2co-client/-/2co-client-0.0.13.tgz"},"maintainers":[{"name":"rakeshpai","email":"rakeshpai@errorception.com"}],"readmeFilename":"README.md","time":{"modified":"2016-09-19T07:47:14.246Z","created":"2013-05-15T12:00:53.242Z","0.0.1":"2013-05-15T12:00:59.230Z","0.0.2":"2013-05-15T15:40:43.029Z","0.0.3":"2013-05-26T21:13:53.317Z","0.0.4":"2013-05-31T04:40:10.509Z","0.0.5":"2013-05-31T05:08:49.719Z","0.0.6":"2013-05-31T05:17:33.823Z","0.0.7":"2013-06-07T13:47:24.064Z","0.0.8":"2013-06-08T04:09:59.958Z","0.0.9":"2013-06-08T09:12:27.992Z","0.0.10":"2013-06-08T09:40:19.308Z","0.0.11":"2013-11-06T08:07:21.955Z","0.0.12":"2013-11-06T09:19:51.789Z","0.0.13":"2016-09-19T07:47:14.246Z"}}}