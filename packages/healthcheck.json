{"name":"healthcheck","version":"0.1.3","description":" It polls backends and if they respond with HTTP 200 + an optional request body, they are marked good. Otherwise, they are marked bad.","main":"index.js","scripts":{"test":"node test.js"},"keywords":["health","check"],"license":"MIT","repository":"https://github.com/yashiro1899/healthcheck","homepage":"https://github.com/yashiro1899/healthcheck","dependencies":{"es6-promise":"^1.0.0"},"devDependencies":{"cli-table":"^0.3.0","dateformat":"^1.0.8-1.2.3"},"gitHead":"0f37f92f8178093546a7da8e09bf59525f174c6c","versions":[{"number":"0.0.0","date":"2014-09-04T13:43:32.842Z"},{"number":"0.0.1","date":"2014-09-09T15:17:47.735Z"},{"number":"0.0.2","date":"2014-09-10T02:51:00.513Z"},{"number":"0.0.3","date":"2014-09-10T07:45:01.383Z"},{"number":"0.1.0","date":"2014-09-15T09:05:07.705Z"},{"number":"0.1.1","date":"2014-09-15T09:09:24.904Z"},{"number":"0.1.2","date":"2014-09-15T09:10:05.735Z"},{"number":"0.1.3","date":"2014-09-15T09:12:07.207Z"}],"readme":"It polls backends and if they respond with HTTP 200 + an optional request body, they are marked good.  Otherwise, they are marked bad.  Similar to haproxy/varnish health checks.\n\n## new HealthCheck(options)\n\n`options` can be an object.\n\nOptions:\n\n* **servers**: An array containing servers to check.\n* **delay**: Delay in msec between healthchecks. Defaults to `10000`.\n* **timeout**: How long in msec a healthcheck is allowed to take place. Defaults to `2000`.\n* **failcount**: Number of healthchecks good or bad in a row it takes to switch from down to up and back. Good to prevent flapping. Defaults to `2`.\n* **send**:  What to send for the healthcheck. Defaults to `'/'`.\n* **expected**: What to expect in the HTTP BODY, (meaning not the headers), in a correct response. If unset, just a HTTP 200 status code is required.\n* **https**: If `true`, `https` indicates that uses https to health check. Defaults to `false`.\n* **logger**: A function is invoked until every server finish in a healthcheck.\n\nExample:\n\n    var dateformat = require('dateformat');\n    var HealthCheck = require(\"./\").HealthCheck;\n    var Table = require('cli-table');\n\n    var instance = new HealthCheck({\n        servers: [\n            'localhost:3000',\n            'localhost:3001'\n        ],\n        delay: 5000,\n        timeout: 3000,\n        failcount: 1,\n        send: '/health.txt',\n        expected: 'I_AM_ALIVE',\n        https: true,\n        logger: function(list) {\n            var table = new Table({\n                head: ['name', 'owner pid', 'action time', 'concurrent', 'since', \"status\", 'is down?']\n            });\n            var servers = Object.keys(list);\n\n            servers.forEach(function(s) {\n                var hc = list[s];\n                var action_time = dateformat(hc.action_time, 'HH:MM:ss');\n                var since = dateformat(hc.since, 'HH:MM:ss');\n                table.push([s, hc.owner, action_time, hc.concurrent, since, hc.last_status, hc.down]);\n            });\n            console.log(table.toString());\n        }\n    });\n\n\n## instance.status()\n\nThe `status()` method health status.\n\nExample:\n\n    {\n        'localhost:3000': {\n            action_time: Wed Sep 10 2014 15: 28: 20 GMT + 0800(CST),\n            concurrent: 1,\n            down: false,\n            failcount: 1,\n            last_status: 'connect ECONNREFUSED',\n            owner: 2300,\n            since: Wed Sep 10 2014 15: 28: 20 GMT + 0800(CST)\n        },\n        'localhost:3001': {\n            action_time: Wed Sep 10 2014 15: 28: 20 GMT + 0800(CST),\n            concurrent: 1,\n            down: false,\n            failcount: 1,\n            last_status: 'connect ECONNREFUSED',\n            owner: 2300,\n            since: Wed Sep 10 2014 15: 28: 20 GMT + 0800(CST)\n        }\n    }\n\n* **owner**: Worker pid processing this healthcheck.\n* **action_time**: `Date` instance. Last time request was taken.\n* **concurrent**: Number of concurrent bad or good responses.\n* **since**: `Date` instance. How long this server's been concurrently bad or good.\n* **last_status**: Status of last finished check.\n* **down**: If true, the server is actually down.\n* **failcount**: Number of concurrent bad responses.\n\n\n## instance.is_down(name)\n\nReturn `true` if the given server has failed its healthcheck.\n\nExample:\n\n    instance.is_down(\"localhost:3000\");\n","starsCount":3,"created":"2014-09-04T13:43:32.842Z","modified":"2017-03-31T13:35:31.225Z","lastPublisher":{"name":"icewhite","email":"yashiro1899@gmail.com"},"owners":[{"name":"icewhite","email":"yashiro1899@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"healthcheck","_npmUser":{"name":"icewhite","email":"yashiro1899@gmail.com"},"_npmVersion":"2.0.0-alpha-5","_rev":"2-9b695d32f40ecfdffce67711a4150917","_shasum":"fb615c6439f803620449905a2f91306a151462a6","author":{"name":"Ice White"},"bugs":{"url":"https://github.com/yashiro1899/healthcheck/issues"},"directories":{},"dist-tags":{"latest":"0.1.3"},"dist":{"shasum":"fb615c6439f803620449905a2f91306a151462a6","tarball":"http://registry.npmjs.org/healthcheck/-/healthcheck-0.1.3.tgz"},"maintainers":[{"name":"icewhite","email":"yashiro1899@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-03-31T13:35:31.225Z","created":"2014-09-04T13:43:32.842Z","0.0.0":"2014-09-04T13:43:32.842Z","0.0.1":"2014-09-09T15:17:47.735Z","0.0.2":"2014-09-10T02:51:00.513Z","0.0.3":"2014-09-10T07:45:01.383Z","0.1.0":"2014-09-15T09:05:07.705Z","0.1.1":"2014-09-15T09:09:24.904Z","0.1.2":"2014-09-15T09:10:05.735Z","0.1.3":"2014-09-15T09:12:07.207Z"},"users":{"goliatone":true,"nachbar90":true,"bnu":true}}}