{"name":"hophop","version":"1.0.0","description":"middleware to publish HTTP request/response info to AMQP","main":"hophop.js","scripts":{"test":"mocha"},"repository":"https://github.com/typeduck/hophop","homepage":"https://github.com/typeduck/hophop#readme","engines":{"node":">=4.0.0"},"dependencies":{"amqplib":"^0.5.1","bluebird":"^3.5.0","lodash.pick":"^4.4.0"},"devDependencies":{"convig":"^1.2.0","express":"^4.15.2","request":"^2.81.0","should":"^11.2.1"},"license":"MIT","gitHead":"d7483ab34f0a556ba2cefd460d88a7d4ef2f1872","versions":[{"number":"1.0.0","date":"2017-03-23T14:59:36.305Z"}],"readme":"# HopHop\n\nPublish HTTP request/response information to\nan [AMQP Server](https://www.rabbitmq.com/).\n\n## Usage\n\n```js\nconst hophop = require('hophop')\n\n// default options, e.g. 'amqp://guest:guest@localhost'\napp.use(hophop())\n\n// set the AMQP connection\napp.use(hophop('amqp://user:password@host/vhost'))\n\n// reuse existing connection (or Promise for one)\napp.use(hophop(amqpConnection))\napp.use(hophop(amqpConnectionPromise))\n\n// detailed options in second argument\napp.use(hophop(amqpConnection, {\n  exchange: 'amq.topic',  // hophop will call assertExchange()\n  exchangeType: 'topic',  // using these parameters\n  route: function (req, res) {\n    // custom function to set the Routing Key for publishing\n    // return string / Promise.resolve(string): routing key\n    // return falsey / Promise.resolve(falsey): avoids publishing\n    // default is [schema].[backwards-domain-name]\n    // e.g.: 'http.com.example.subdomain' for 'http://subdomain.example.com'\n    // e.g.: 'https.com.example for 'https://example.com'\n  },\n  request: ['additional', 'request', 'properties'],\n  response: ['additional', 'response', 'properties'],\n  waitForFinish: false, // true to wait for response 'finish' event\n}))\n```\n\nThis middleware publishes information about an HTTP request & response to an\nAMQP Server (e.g. [RabbitMQ](https://www.rabbitmq.com/)). This library will\ncreate its\nown [channel](http://www.squaremobius.net/amqp.node/channel_api.html#channel) to\npublish messages on, so you can pass it an existing connection which you use for\nother things.\n\n## Published data\n\nThe request/response information is published as JSON with UTF-8 encoding:\n\n- **date**: ISO-8601 string, e.g. \"2017-03-23T12:23:11.513Z\"\n- **request**: object, following properties taken\n  from [Express Request](http://expressjs.com/en/4x/api.html#req)\n  - method, hostname, httpVersion, hostname, baseUrl, path, url, params, query,\n    cookies, signedCookies, ip, ips, headers;\n  - additional properties from `request` option will be copied\n- **response**: object, following properties taken\n  from [Express Reponse](http://expressjs.com/en/4x/api.html#res)\n  - statusCode, statusMessage, _headers (undocumented property!)\n  - additional properties from `response` option will be copied\n- **millis**: only if `waitForFinish` was set, the number of milliseconds\n  between middleware invocation and publishing time (response 'finish')\n\nNote that the request/response objects from express are extended from the\n(Node.js HTTP API)[https://nodejs.org/api/http.html].\n\n## Advanced Usage\n\n### Including more data\n\nNote that in the above examples, any HTTP request body is not included. This is\nby design, to avoid sending potentially large amounts of data to the AMQP server\nby default.\n\nHowever, you can indeed pass this information along, here's an example\nusing [body-parser](https://github.com/expressjs/body-parser):\n\n```js\napp.use(bodyParser.json())\napp.use(hophop(amqpConn, { request: ['body'] }))\n```\n\nSimilarly, you can publish data that is processed by other middleware. For\nexample, include user information from [passportjs](http://passportjs.org/).\n\n```js\napp.use(hophop(amqpConn, { request: ['user'] }))\n```\n\nRemember to set up your middleware in the proper order. By default, HopHop will\nimmediately publish the information it has on the request/response objects, so\nit won't have anything from middleware that runs after it.\n\nEiher invoke the HopHop middleware after other middleware, or use the\n`waitForFinish` option to run publishing at the end.\n\n### Routing\n\nThe `route` option is used both for filtering requests and for changing the\nrouting key.\n\nIf you only want filtering, you must somehow provide a routing key for data you\nwant to publish. You can still access the default functionality like so:\n\n```js\napp.use(hophop(amqpConn, {\n  route: function (req, res) {\n    if (/127\\.0\\.0\\.1$/.test(req.ip)) { return false }\n    return hophop.defaultRoute(req, res)\n  }\n}))\n```\n\nAnd don't forget that your `route` function can return a Promise, so you can\nrun asynchronous operations.\n\n```js\napp.use(hophop(amqpConn, {\n  route: function (req, res) {\n    return Promise.try(function () {\n      return lookupCountryCodeForIp(req.ip)\n    }).then(function (code) {\n      if (code === 'CA') { return false } // Canadians are too nice to track\n      return 'MilkyWay.SolarSystem.Earth.' + code\n    })\n  }\n}))\n```\n","created":"2017-03-23T14:59:36.305Z","modified":"2017-03-23T14:59:36.305Z","lastPublisher":{"name":"typeduck","email":"typeduck@typeduck.net"},"owners":[{"name":"typeduck","email":"typeduck@typeduck.net"}],"other":{"_attachments":{},"_from":".","_id":"hophop","_nodeVersion":"6.10.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/hophop-1.0.0.tgz_1490281175370_0.08238603011704981"},"_npmUser":{"name":"typeduck","email":"typeduck@typeduck.net"},"_npmVersion":"3.10.10","_rev":"1-2c886ee6af5fb5e6570faacbd92b2713","_shasum":"fd81cfb90aaa286ad59da0a524122dc39a6f115b","author":{"name":"Ruquay K Calloway"},"bugs":{"url":"https://github.com/typeduck/hophop/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"fd81cfb90aaa286ad59da0a524122dc39a6f115b","tarball":"https://registry.npmjs.org/hophop/-/hophop-1.0.0.tgz"},"maintainers":[{"name":"typeduck","email":"typeduck@typeduck.net"}],"readmeFilename":"README.md","time":{"modified":"2017-03-23T14:59:36.305Z","created":"2017-03-23T14:59:36.305Z","1.0.0":"2017-03-23T14:59:36.305Z"}}}