{"name":"passport-http-bearer-base64","version":"1.0.3","description":"HTTP Bearer authentication strategy, with optional base64 encoded token support, for Passport.","keywords":["passport","auth","authn","authentication","authz","authorization","http","bearer","token","oauth","base64","encoded"],"repository":"https://github.com/auralon/passport-http-bearer-base64","licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/MIT"}],"main":"./lib","dependencies":{"passport-strategy":"1.x.x"},"devDependencies":{"mocha":"1.x.x","chai":"1.x.x","chai-passport-strategy":"0.1.x"},"engines":{"node":">= 0.4.0"},"scripts":{"test":"mocha --reporter spec --require test/bootstrap/node test/*.test.js"},"testling":{"browsers":["chrome/latest"],"harness":"mocha","files":["test/bootstrap/testling.js","test/*.test.js"]},"homepage":"https://github.com/auralon/passport-http-bearer-base64","license":"MIT","gitHead":"ad01851b569eecf53052a3d729f2d34b0617eaf5","versions":[{"number":"1.0.2","date":"2016-12-01T11:06:01.772Z"},{"number":"1.0.3","date":"2016-12-01T11:15:18.688Z"}],"readme":"# passport-http-bearer-base64\n\n[![Build](https://travis-ci.org/auralon/passport-http-bearer-base64.png)](http://travis-ci.org/auralon/passport-http-bearer-base64)\n[![Coverage](https://coveralls.io/repos/github/auralon/passport-http-bearer-base64/badge.svg?branch=master)](https://coveralls.io/github/auralon/passport-http-bearer-base64?branch=master)\n[![Dependencies](https://david-dm.org/auralon/passport-http-bearer-base64.png)](http://david-dm.org/auralon/passport-http-bearer-base64)\n\nHTTP Bearer authentication strategy for [Passport](http://passportjs.org/).\n\nThis module lets you authenticate HTTP requests using bearer tokens, as\nspecified by [RFC 6750](http://tools.ietf.org/html/rfc6750), in your Node.js\napplications.  Bearer tokens are typically used protect API endpoints, and are\noften issued using OAuth 2.0.\n\nBy plugging into Passport, bearer token support can be easily and unobtrusively\nintegrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-http-bearer-base64\n\n## Usage\n\n#### Configure Strategy\n\nThe HTTP Bearer authentication strategy authenticates users using a bearer\ntoken.  The strategy requires a `verify` callback, which accepts that `token`\ncredential and calls `done` providing a user.  Optional `info` can be passed\nto the callback, typically including associated scope, which will be set by \nPassport at `req.authInfo` to be used by later middleware for authorization \nand access control.\n\n    passport.use(new BearerStrategy(\n      function(token, done) {\n        User.findOne({ token: token }, function (err, user) {\n          if (err) { return done(err); }\n          if (!user) { return done(null, false); }\n          return done(null, user, { scope: 'all' });\n        });\n      }\n    ));\n\nThere are a couple of options that can be set when instantiating the bearer \nstrategy...\n\n* `passReqToCallback` (boolean) - default `false`\n  * If set to `true` then `req` will be passed as the first argument to the verify callback.\n* `base64EncodedToken` (boolean) - default `false`\n  * If set to `true` then incoming bearer tokens are expected to be base64 encoded.\n\nUsing these options would change the configuration like so:\n\n    passport.use(new BearerStrategy({\n        passReqToCallback  : true,\n        base64EncodedToken : true\n      },\n      function(req, token, done) {\n        User.findOne({ token: token }, function (err, user) {\n          if (err) { return done(err); }\n          if (!user) { return done(null, false); }\n          return done(null, user, { scope: 'all' });\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'bearer'` strategy, to\nauthenticate requests.  Requests containing bearer tokens do not require session\nsupport, so the `session` option can be set to `false`.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/profile', \n      passport.authenticate('bearer', { session: false }),\n      function(req, res) {\n        res.json(req.user);\n      });\n\n#### Issuing Tokens\n\nBearer tokens are typically issued using OAuth 2.0.  [OAuth2orize](https://github.com/jaredhanson/oauth2orize)\nis a toolkit for implementing OAuth 2.0 servers and issuing bearer tokens.  Once\nissued, this module can be used to authenticate tokens as described above.\n\n## Examples\n\nFor a complete, working example, refer to the [Bearer example](https://github.com/passport/express-4.x-http-bearer-example) \n[Note: This example is for the bearer token module that this project is forked from.  This module is identical apart from \nthe inclusion of base64 encoded token support, so the example is still relevant].\n\n## Related Modules\n\n- [OAuth2orize](https://github.com/jaredhanson/oauth2orize) â€” OAuth 2.0 authorization server toolkit\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## Credits\n\n  - [Jared Hanson](https://github.com/jaredhanson)\n  - [Keith Hill](https://github.com/auralon)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2011-2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\nCopyright (c) 2016 Keith Hill <[https://bluemantis.com/](https://bluemantis.com/)>\n","created":"2016-12-01T11:06:01.772Z","modified":"2016-12-01T11:15:18.688Z","lastPublisher":{"name":"auralon","email":"keith@bluemantis.com"},"owners":[{"name":"auralon","email":"keith@bluemantis.com"}],"other":{"_attachments":{},"_from":"./","_id":"passport-http-bearer-base64","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/passport-http-bearer-base64-1.0.3.tgz_1480590916490_0.5790448887273669"},"_npmUser":{"name":"auralon","email":"keith@bluemantis.com"},"_npmVersion":"1.4.28","_rev":"2-cb7bc567bcb2f13c5587b4dccff3051d","_shasum":"9400f36bcf77a51022f93c585e1efc237f2130db","author":{"name":"Keith Hill","email":"keith@bluemantis.com","url":"https://www.bluemantis.com/"},"bugs":{"url":"https://github.com/auralon/passport-http-bearer-base64/issues"},"directories":{"test":"test"},"dist-tags":{"latest":"1.0.3"},"dist":{"shasum":"9400f36bcf77a51022f93c585e1efc237f2130db","tarball":"http://registry.npmjs.org/passport-http-bearer-base64/-/passport-http-bearer-base64-1.0.3.tgz"},"maintainers":[{"name":"auralon","email":"keith@bluemantis.com"}],"readmeFilename":"README.md","time":{"modified":"2016-12-01T11:15:18.688Z","created":"2016-12-01T11:06:01.772Z","1.0.2":"2016-12-01T11:06:01.772Z","1.0.3":"2016-12-01T11:15:18.688Z"}}}