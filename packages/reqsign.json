{"name":"reqsign","version":"1.1.0","description":"HTTP request signing","main":"index.js","scripts":{"test":"semistandard && node_modules/.bin/tape 'test/**/*.js' | tap-spec"},"license":"MIT","devDependencies":{"body-parser":"^1.15.1","express":"^4.13.4","morgan":"^1.7.0","proxyquire":"^1.7.9","semistandard":"^8.0.0","sinon":"^1.17.4","tap-spec":"^4.1.1","tape":"^4.5.1"},"dependencies":{"debug":"^2.2.0","md5":"^2.1.0","request":"^2.79.0","request-promise-native":"^1.0.3"},"keywords":["request signing","authentication","authorization"],"homepage":"https://github.com/AlexeyGorokhov/reqsign","repository":"https://github.com/AlexeyGorokhov/reqsign","gitHead":"fa955821f28772447565fd709e1817b993e128f2","versions":[{"number":"1.0.0","date":"2016-06-19T07:17:49.898Z"},{"number":"1.0.1","date":"2016-06-20T09:44:32.480Z"},{"number":"1.0.2","date":"2016-08-10T04:54:26.916Z"},{"number":"1.0.3","date":"2016-08-11T12:41:29.774Z"},{"number":"1.0.4","date":"2016-10-12T10:27:13.456Z"},{"number":"1.1.0","date":"2017-01-03T18:10:45.106Z"}],"readme":"# reqsign\n\n[![js-semistandard-style](https://img.shields.io/badge/code%20style-semistandard-brightgreen.svg?style=flat-square)](https://github.com/Flet/semistandard)\n\nHTTP request signing\n\nThis is a simplified and opinionated HTTP request signing scheme for use in communication between HTTP APIs.\n\nThe module provides both the server middleware and client functionality.\n\n## Installation\n\n```bash\n$ npm install reqsign --save\n```\n\n## Usage\n\n### Server-side\n\n```js\nconst app = require('express')();\nconst bodyParser = require('body-parser-of-your-choice');\nconst reqsign = require('reqsign');\n\nconst reqsignOptions = {\n  clockSkew: 300,\n  keyRetriever (login) {...},\n  replayAttackDefender (login, signature) {...}\n};\n\n// Mount the middleware\napp.use(bodyParser());\napp.use(reqsign.server(reqsignOptions));\n\n// Use it\napp.get('/some_path', (req, res) => {\n  const isRequestAuthenticated = req.user.isAuthenticated;\n  const userLogin = req.user.login;\n  // etc\n});\n```\n\n### Client-side\n\n```js\nconst reqsign = require('reqsign');\n\nconst reqsignOptions = {\n  login: 'my_service_login',\n  key: 'secret'\n};\n\nconst req = reqsign.client(reqsignOptions);\n\nconst data = {\n  prop1: 'value1',\n  prop2: 'value2'\n};\n\nreq.post('url', data)\n.then(response => {\n  // Make use of response.resStatus and response.resBody\n})\n.catch(err => {\n  // Process the err gracefully\n});\n```\n\n## Scheme Description\n\n### Get and store current TimeStamp\n\n`TimeStamp = GET-TIMESTAMP()`\n\nTimeStamp is the current system time UNIX timestamp of the client machine including milliseconds (e.g., 1465564560647).\n\n### Build String To Sign\n\nThe client has to build the `StringToSign` following the following pattern:\n\n`StringToSign = <TimeStamp> + \"\\n\" + <ContentString>`\n\n`<ContentString>` is a string formed depending of the request type.\n\nIf the request contains any payload (Content-Length HTTP header is present and its value is greater than 0), `ContentString = MD5(<PayloadRawString>)`.\n\nIf the request contains no payload (Content-Length HTTP header is not present or its value is 0), the `ContentString` is formed using the following algorithm:\n\n* All URL query parameters are sorted in alphabetical order ascending.\n\n```\nContentString =\n  URI-ENCODE(<QueryParameter1>) + \"=\" + URI-ENCODE(<value>) + \"&\" +\n  URI-ENCODE(<QueryParameter2>) + \"=\" + URI-ENCODE(<value>) + \"&\" +\n  ...\n  URI-ENCODE(<QueryParameterN>) + \"=\" + URI-ENCODE(<value>)\n```\n\n### Sign the StringToSign\n\n`Signature = BASE64(HMAC-SHA256(<StringToSign>, <key>))`\n\n`<key>` is a secret key shared between the client and the server.\n\n### Send Authorization header\n\nThe client sends the `Authorization` HTTP header with the request:\n\n`Authorization: Signature timestamp={Int} login={String} signature={String}`\n\n## Server-side middleware\n\n### Options\n\nThe options object:\n\n```json\n{\n  \"clockSkew\": \"{Integer}\",\n  \"keyRetriever\": \"{Function}\",\n  \"replayAttackDefender\": \"{Function}\"\n}\n```\n\n#### `{Integer} clockSkew`\n\nA clock skew value in seconds that compensate possible differences between the server and client machines system time. The clock skew is applied in both directions (e.g., clockSkew = 300s means 300s in the past AND 300s to the future).\n\nIt is not feasible to set this parameter to 0 or a very small value as in this case all requests will be treated as expired. Hence, the default value is `300`, and the minimum value is `60`.\n\n#### `{Function} keyRetriever (login)`\n\nA function that retrieves the secret key for the given `login` value that the client uses to sign requests. Mechanism of storing the login-key pairs is out of scope for `reqsign`.\n\nParameters:\n* `{String} login` - The login value sent by the client in `Authorization` HTTP header.\n\nReturns `{Promise} resolve(result), reject(err)`:\n\n* `{String | Object | null} result` - If `result` is a `String`, this is the key associated with the `login` to be used to verify the signature. If `result` is an `Object`, it must have the following properties:\n\n  * `{String} key`;\n  * `{Array<String>} roles` - a collection of roles associated with the `login`;\n\n* `{Error} err` - An error object. Note that absence of a `key` for given `login` is not an error condition - in this situation the promise has to resolve with the `null` value.\n\n#### `{Function} replayAttackDefender (login, signature)`\n\nOPTIONAL. A function that might be used to protect the server against the Replay Attack. The implementation of protection (what the function does) is out of scope for `reqsign`.\n\nParameters:\n* `{String} login` - Login value derived from the Authorization header;\n* `{String} signature` - Signature value derived from the Authorization header.\n\nReturns: `{Promise} resolve(isOk) reject(err)`:\n* `{Boolean} isOk` - `true` if the request is not replayed; otherwise - `false`;\n* `{Error} err` - An error object.\n\n### API\n\n`reqsign` middleware extends the `req` object with `user` property and passes the request down the middleware pipe.\n\n* `{Boolean} req.user.isAuthenticated`\n\n* `{String} req.user.login`\n\n* `{Array<String>} req.user.roles`\n\n* `{String | null} req.user.errorCode` - Error code as follows:\n  * `WRONG_REQUEST` - The request received does not comply with the scheme (e.g., wrong format of the Authorization header, or its absence etc).\n  * `NO_KEY` - A key to verify the signature.\n  * `EXPIRED` - The request expired.\n  * `WRONG_SIGNATURE` - Signature verification failed.\n  * `REPLAYED` - The request is replayed.\n\n## Client module\n\nUse a function returned by `reqsign.client(options)` call to make signed HTTP requests to third-party APIs.\n\n### Options\n\nThe options object:\n\n```json\n{\n  \"login\": \"{String}\",\n  \"key\": \"{String}\"\n}\n```\n\n#### `{String} login`\n\nThe login your application is registered with by a third-party API.\n\n#### `{String} key`\n\nThe key/password shard by your application and a third-party API.\n\n### API\n\n#### `{Function} reqsign.client(options)`\n\nReturns an instance of the API client you use to make signed HTTP requests to APIs.\n\n```js\nconst reqsign = require('reqsign');\nconst opts = {\n  login: 'my_login',\n  key: 'shared_key'\n};\nconst req = reqsign(opts);\n```\n\n#### `{Function} req.get(url, data)`\n\nMethod to make a GET request.\n\nParameters:\n* `{String} url` - Target URL (without query parameters).\n* `{Object} data` - Data to be sent in request parameters.\n\nReturn: `Promise<Object>` - Promise that resolves with an object with properties:\n* `{Integer} resStatus` - Response HTTP status code.\n* `{Any} resBody` - Response payload.\n\n#### `{Function} req.post(url, data)`\n\nMethod to make a POST request.\n\nParameters:\n* `{String} url` - Target URL (without query parameters).\n* `{Object} data` - Data to be sent as a JSON object in request body.\n\nReturn: `Promise<Object>` - Promise that resolves with an object with properties:\n* `{Integer} resStatus` - Response HTTP status code.\n* `{Any} resBody` - Response payload.\n","created":"2016-06-19T07:17:49.898Z","modified":"2017-01-03T18:10:45.106Z","lastPublisher":{"name":"agorokhov","email":"alexey.gorokhov@icloud.com"},"owners":[{"name":"agorokhov","email":"alexey.gorokhov@icloud.com"}],"other":{"_attachments":{},"_from":".","_id":"reqsign","_nodeVersion":"6.9.1","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/reqsign-1.1.0.tgz_1483467044301_0.06899104500189424"},"_npmUser":{"name":"agorokhov","email":"alexey.gorokhov@icloud.com"},"_npmVersion":"4.0.2","_rev":"2-169a793a51960a299523399df7077b2e","_shasum":"5f503478f692814c211f335776657c4fcafa0fd4","author":{"name":"Alexey Gorokhov","email":"alexey.gorokhov@icloud.com"},"bugs":{"url":"https://github.com/AlexeyGorokhov/reqsign/issues"},"directories":{},"dist-tags":{"latest":"1.1.0"},"dist":{"shasum":"5f503478f692814c211f335776657c4fcafa0fd4","tarball":"http://registry.npmjs.org/reqsign/-/reqsign-1.1.0.tgz"},"maintainers":[{"name":"agorokhov","email":"alexey.gorokhov@icloud.com"}],"readmeFilename":"README.md","time":{"modified":"2017-01-03T18:10:45.106Z","created":"2016-06-19T07:17:49.898Z","1.0.0":"2016-06-19T07:17:49.898Z","1.0.1":"2016-06-20T09:44:32.480Z","1.0.2":"2016-08-10T04:54:26.916Z","1.0.3":"2016-08-11T12:41:29.774Z","1.0.4":"2016-10-12T10:27:13.456Z","1.1.0":"2017-01-03T18:10:45.106Z"}}}