{"name":"jaaulde-cookies","version":"3.0.6","description":"Javascript library for accessing and manipulating HTTP cookies in the web browser","main":"lib/jaaulde-cookies.js","keywords":["cookie","cookies","storage","json"],"license":"MIT","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/JAAulde/cookies","homepage":"https://github.com/JAAulde/cookies","gitHead":"9b4e548c241d502bd6d873085da183d187ad9eae","versions":[{"number":"1.0.0","date":"2011-06-02T01:19:01.756Z"},{"number":"3.0.2","date":"2014-08-07T19:37:46.916Z"},{"number":"3.0.3","date":"2014-08-07T20:29:44.174Z"},{"number":"3.0.4","date":"2014-08-07T23:13:46.425Z"},{"number":"3.0.5","date":"2014-08-13T02:02:04.061Z"},{"number":"3.0.6","date":"2015-04-01T18:33:51.926Z"}],"readme":"# cookies\nJavascript library for accessing and manipulating HTTP cookies in the web browser.\n\nGet one or a list of cookies, set cookies, delete cookies, test if the browser accepts cookies. When JSON support is available, any JS value can be set to a cookie--it will be automatically serialized before being written, and un-serialzied on read.\n\n[![GitHub version](https://badge.fury.io/gh/JAAulde%2Fcookies.png)](http://badge.fury.io/gh/JAAulde%2Fcookies)\n[![Bower version](https://badge.fury.io/bo/jaaulde-cookies.png)](http://badge.fury.io/bo/jaaulde-cookies)\n[![NPM version](https://badge.fury.io/js/jaaulde-cookies.png)](http://badge.fury.io/js/jaaulde-cookies)\n\n## installation\n### [bower](http://bower.io)\n````bash\nbower install jaaulde-cookies\n````\n\n### [npm](https://www.npmjs.com)\n````bash\nnpm install jaaulde-cookies\n````\n\n### html\nDownload the code, link it in your HTML file.\n````html\n<script src=\"/path/to/jaaulde-cookies.js\"></script>\n````\n\n## usage\nThis library is intended for use in the browser to access and manipulate cookies. It provides a singleton API, `cookies`.\n\n### Cookie options\nAs you'll see in the docs below, many of the methods can take an `options` parameter. The options that can  be set are:\n\n|Option|Description|Default|Note|\n|:-----|:----------|:------|:---|\n|domain|Domain for which the cookie be available|`null` (current domain)||\n|path|Path for which the cookie be available|`'/'`||\n|expires|Date object representing expiration date/time of cookie| `null` (expires when browser closes)|Setting a past date/time will delete the cookie|\n|secure|Should cookie be sent to server via HTTPS only?|`false`||\n\n### Test for browser cookie acceptance\n#### `cookies.test()`\n##### signature\n````javascript\n/**\n * test - test whether the browser is accepting cookies\n *\n * @access public\n * @static\n * @return {boolean}\n */\ntest: function ()\n````\n##### example\n````javascript\nif (cookies.test()) {\n    // browser is accepting cookies!\n}\n````\n\n### Set cookies\n#### `cookies.set()`\n##### signature\n````javascript\n/**\n * set - set or delete a cookie with desired options\n *\n * @access public\n * @static\n * @param {string} n - name of cookie to set\n * @param {mixed} v - Any JS value. If not a string and JSON support present will be JSON encoded\n *                  {null} to delete\n * @param {object} o - optional list of cookie options to specify\n * @return {void}\n */\nset: function (n, v, o)\n````\n##### examples\n````javascript\n// sets cookie by the name of 'myCookie' to value of 'myValue' with default options\ncookies.set('myCookie', 'myValue');\n\n// sets cookie by the name of 'myCookie' to value of 'myValue' with path of '/somedir'\ncookies.set('myCookie', 'myValue', {path: '/somedir'});\n````\n### Get cookies\n#### `cookies.get()`\n##### signature\n````javascript\n/**\n * get - get one, several, or all cookies\n *\n * @access public\n * @static\n * @param {mixed} n {string} name of single cookie\n *                  {array} list of multiple cookie names\n *                  {void} if you want all cookies\n * @return {mixed} type/value of cookie as set\n *                 {null} if only one cookie is requested and is not found\n *                 {object} hash of multiple or all cookies (if multiple or all requested)\n */\nget: function (n)\n````\n##### examples\n````javascript\n// returns value of myCookie if it is present, null if not\nvar my_cookie = cookies.get('myCookie');\n\n// returns object in key/value form of each requested cookie if it is present, null if not\nvar some_cookies = cookies.get(['myCookie', 'myOtherCookie']);\n\n// returns object in key/value form of all available cookies from your site\nvar all_cookies = cookies.get();\n````\n\n### Get filtered list of Cookies\n#### `cookies.filter()`\n##### signature\n````javascript\n/**\n * filter - get hash of cookies whose names match the provided RegExp\n *\n * @access public\n * @static\n * @param {RegExp} p The regular expression pattern to match against cookie names\n * @return {object} hash of cookies whose names match the RegExp\n */\nfilter: function (p)\n````\n##### examples\n````javascript\n// returns object in key/value form of cookies whose names start with \"site\"\nvar filtered_cookies = cookies.filter(/^site/);\n````\n\n### Delete Cookies\n**note:** *A cookie can only be deleted using the same options with which it was set*\n#### `cookies.del()`\n##### signature\n````javascript\n/**\n * del - delete a cookie (domain and path options must match those with which the cookie was set; this is really an alias for set() with parameters simplified for this use)\n *\n * @access public\n * @static\n * @param {mixed} n {string} name of cookie to delete\n *                  {boolean} true to delete all\n * @param {object} o optional list of cookie options to specify (path, domain)\n * @return {void}\n */\ndel: function (n, o)\n````\n##### examples\n````javascript\n// deletes a cookie, 'myCookie', with default options\ncookies.del('myCookie');\n\n// deletes a cookie by the name of 'myCookie' which had been set with a path of '/somedir'\ncookies.del('myCookie', {path: '/somedir'});\n\n// deletes all cookies\ncookies.del(true);\n````\n","created":"2011-06-02T01:19:01.189Z","modified":"2015-04-01T18:33:51.926Z","lastPublisher":{"name":"jaaulde","email":"auldridgej@gmail.com"},"owners":[{"name":"ded","email":"polvero@gmail.com"},{"name":"jaaulde","email":"auldridgej@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"jaaulde-cookies","_nodeVersion":"0.10.36","_npmUser":{"name":"jaaulde","email":"auldridgej@gmail.com"},"_npmVersion":"2.3.0","_rev":"1-ddc16038832ad6abab86ebfeb610fe6e","_shasum":"3841ab2b8bf75ad5db338246eb8c413b754eabff","author":{"name":"Jim Auldridge","email":"auldridgej@gmail.com"},"bugs":{"url":"https://github.com/JAAulde/cookies/issues"},"directories":{},"dist-tags":{"latest":"3.0.6"},"dist":{"shasum":"3841ab2b8bf75ad5db338246eb8c413b754eabff","tarball":"http://registry.npmjs.org/jaaulde-cookies/-/jaaulde-cookies-3.0.6.tgz"},"maintainers":[{"name":"ded","email":"polvero@gmail.com"},{"name":"jaaulde","email":"auldridgej@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-04-01T18:33:51.926Z","created":"2011-06-02T01:19:01.189Z","1.0.0":"2011-06-02T01:19:01.756Z","3.0.2":"2014-08-07T19:37:46.916Z","3.0.3":"2014-08-07T20:29:44.174Z","3.0.4":"2014-08-07T23:13:46.425Z","3.0.5":"2014-08-13T02:02:04.061Z","3.0.6":"2015-04-01T18:33:51.926Z"}}}