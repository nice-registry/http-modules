{"name":"sessionist-middleware","version":"1.0.0","description":"Restify middleware for verifying the sessionist HTTP Authorization header.","main":"index.js","scripts":{"test":"mocha --recursive --reporter spec"},"repository":"https://github.com/houseagency/sessionist-middleware","license":"GPL-3.0","dependencies":{"restify-errors":"4.3.0","sessionistheader":"0.1.7"},"devDependencies":{"chai":"3.5.0","mocha":"3.0.2"},"gitHead":"15676fed436efce448bcfb0534884f4f1a7cc14a","homepage":"https://github.com/houseagency/sessionist-middleware#readme","versions":[{"number":"0.0.1","date":"2016-10-07T23:27:00.304Z"},{"number":"0.0.2","date":"2016-10-08T02:16:27.283Z"},{"number":"0.0.3","date":"2017-02-01T09:05:00.278Z"},{"number":"1.0.0","date":"2017-05-08T08:04:49.637Z"}],"readme":"# The Sessionist Middleware for Restify\n\n[![Build Status](https://semaphoreci.com/api/v1/houseagency/sessionist-middleware/branches/master/shields_badge.svg)](https://semaphoreci.com/houseagency/sessionist-middleware)\n\n## How to use\n\nThis middleware is actually not one middleware, but two. The \n`parseAuthorizationMiddleware` should be used before `bodyParser`, and the\n`settleAuthorizationMiddleware` should be used after `bodyParser`.\n\n\tconst sessionistMiddleware = require('sessionist-middleware');\n\n\tconst keyfn = (keyid, callback) => {\n\t\t// This function should resolve the key id to a secret key,\n\t\t// and return it using the callback function.\n\n\t\tif (keyid == '12345678') return callback(null, 'topsecretkey');\n\t\tcallback(new Error('No such key ID.'));\n\t};\n\n\tserver.use(sessionistMiddleware.parseAuthorizationMiddleware(keyfn));\n\tserver.use(restify.bodyParser()); // Should be in between.\n\tserver.use(sessionistMiddleware.settleAuthorizationMiddleware());\n\n\t// If the header is invalid, a 401 Unauthorized will be rendered.\n\t// If the header is valid, a sessionist_keyid string will be added to\n\t// the request object.\n\nIf you don't need `bodyParser` in your app, you can skip that middleware.\nHowever, you still have to use both our two middlewares, in the proper order:\n\n\tserver.use(sessionistMiddleware.parseAuthorizationMiddleware(keyfn));\n\tserver.use(sessionistMiddleware.settleAuthorizationMiddleware());\n\n### Why two middlewares?\n\nTo verify the `Authorization:` header, we need to make a hash of the full body\npayload. To do that, we have to listen to the same data events as\n`bodyParser` is listening to. So, the `parseAuthorizationMiddleware` sets up\nthe listeners and does the hashing, and then `settleAuthorizationMiddleware`\nwill act on that hash.\n","created":"2016-10-07T23:27:00.304Z","modified":"2017-05-08T08:04:49.637Z","lastPublisher":{"name":"spurge","email":"olof@montin.net"},"owners":[{"name":"alfredgodoy","email":"alfred@nurd.nu"},{"name":"spurge","email":"olof@montin.net"}],"other":{"_attachments":{},"_from":".","_id":"sessionist-middleware","_nodeVersion":"6.10.2","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/sessionist-middleware-1.0.0.tgz_1494230687992_0.284505047602579"},"_npmUser":{"name":"spurge","email":"olof@montin.net"},"_npmVersion":"3.10.10","_rev":"4-1c8eb27db8ef6e35c820e8e980938917","_shasum":"f12a52f6e5b86747d33ae49db58a3d559f29ee6e","author":{"name":"Alfred Godoy","email":"alfred@nurd.nu"},"bugs":{"url":"https://github.com/houseagency/sessionist-middleware/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"f12a52f6e5b86747d33ae49db58a3d559f29ee6e","tarball":"https://registry.npmjs.org/sessionist-middleware/-/sessionist-middleware-1.0.0.tgz"},"maintainers":[{"name":"alfredgodoy","email":"alfred@nurd.nu"},{"name":"spurge","email":"olof@montin.net"}],"readmeFilename":"README.md","time":{"modified":"2017-05-08T08:04:49.637Z","created":"2016-10-07T23:27:00.304Z","0.0.1":"2016-10-07T23:27:00.304Z","0.0.2":"2016-10-08T02:16:27.283Z","0.0.3":"2017-02-01T09:05:00.278Z","1.0.0":"2017-05-08T08:04:49.637Z"}}}