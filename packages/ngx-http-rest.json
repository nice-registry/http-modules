{"name":"ngx-http-rest","version":"0.1.2","devDependencies":{"@angular/http":"^4.0.0","@angular/core":"^4.0.0","rxjs":"^5.0.1","typescript":"^2.2.2"},"keywords":["angular","ng2","ngx","http","rest","api"],"license":"MIT","repository":"https://github.com/Mixalloff/ngx-http-rest","gitHead":"c6ed45fb8325023ade67346966bc9d71a1c377ce","description":"This library allows to interact with rest api in your angular app. It contains:","homepage":"https://github.com/Mixalloff/ngx-http-rest#readme","scripts":{},"versions":[{"number":"0.0.0","date":"2017-03-30T21:50:11.805Z"},{"number":"0.0.1","date":"2017-03-30T22:05:56.863Z"},{"number":"0.0.2","date":"2017-03-31T21:59:06.401Z"},{"number":"0.0.3","date":"2017-04-01T12:01:59.958Z"},{"number":"0.0.4","date":"2017-04-03T08:20:03.238Z"},{"number":"0.0.5","date":"2017-04-03T22:11:15.746Z"},{"number":"0.0.6","date":"2017-04-19T08:31:34.609Z"},{"number":"0.0.7","date":"2017-04-21T13:37:20.843Z"},{"number":"0.0.8","date":"2017-05-30T10:15:34.005Z"},{"number":"0.1.0","date":"2017-05-30T12:31:43.290Z"},{"number":"0.1.1","date":"2017-05-30T12:41:37.170Z"},{"number":"0.1.2","date":"2017-06-07T10:46:08.952Z"}],"readme":"# ngx-http-rest\n\nThis library allows to interact with rest api in your angular app.\nIt contains:\n\n  - Annotations for http methods (@GET, @POST, @PUT, @DELETE, @OPTIONS, @HEAD, @PATCH)\n  - Annotations for adding headers, setting produces results and intercepting response\n  - Params anotations\n\n### Installation\n\nInstall through npm:\n\n```sh\n$ npm install ngx-http-rest --save\n```\n\n\n### Development\n\nExample of using library.\n\n1) Plug the HttpRestModule into your AppModule\n\n```typescript\nimport { HttpRestModule } from 'ngx-http-rest';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  imports: [\n    HttpRestModule\n  ]\n})\nexport class AppModule {\n}\n```\n\n2) Create a service to work with rest api. Inherit it from HttpRestService from 'ngx-http-rest'. Put annotations on the class, methods and params.\n\n\n```typescript\nimport { HttpRestService, GET, Path, PathParam, QueryParam, QueryParams } from 'ngx-http-rest';\nimport { Injectable } from '@angular/core';\nimport RestConfig from 'app/core/configs/rest.config';\n\ninterface GoodsItem {\n  id: number,\n  name: string,\n  price: number,\n  sales?: boolean;\n  desc?: string;\n  children?: Array<GoodsItem>;\n}\n\n@Injectable()\n@Headers({\n  'someHeader1': 'headerValue1',\n  'someHeader2': 'headerValue2'\n})\n@Path(`/test/goods`)\nexport class SomeRestService extends HttpRestService {\n\n  @GET\n  getGoods(@QueryParams /* Object with queryParams { [name: string]: [value: any] } */ queryObj?: any): any {}\n\n  @GET\n  getGoodsBySomeParam(@QueryParam('sales') /* ...?sales= */ isSold: boolean): any {}\n\n  @GET\n  @Path('/:id')\n  getGoodsItemById(@PathParam('id') itemId: number): any {}\n\n  @GET\n  @Interceptor(SomeRestService.logInterceptor) /* Set response interceptor */\n  @Path('/:id/child/:childId') /* Few path params */\n  getChildrenOfSomeGoods(@PathParam('id') id: number,\n                         @PathParam('childId') childId: number\n                         @QueryParam('sales') isSold: boolean,\n                         @QueryParam('someParam') some: any): any {}\n\n  @POST\n  @Path('/create')\n  createGoods(@Body /* Body of POST request */ goodsObject: GoodsItem): any {}\n\n  @DELETE\n  @NoResponse /* This method doesn`t process the body of response */\n  @Path('/:id')\n  removeGoodsById(@PathParam('id') itemId: number): any {}\n\n  private static logInterceptor(response: any) {\n    console.log(response);\n  }\n\n}\n```\n\n3) Call the request method from component\n\n```typescript\nimport { Component, OnInit } from '@angular/core';\nimport { SomeRestService } from './some-rest.service';\n\n@Component({\n  selector: 'some-test-component',\n  templateUrl: './test-component.component.html',\n  styleUrls: ['./test-component.component.css'],\n  providers: [SomeRestService]\n})\nexport class TestComponent implements OnInit {\n  constructor(private someRestService: SomeRestService){}\n\n  ngOnInit() {\n    this.someRestService\n      .getGoods()\n      .subscribe( goods => console.log(goods) );\n  }\n}\n```\n\n### Description\nAvailable annotations:\n1) Request methods\n@GET, @POST, @PUT, @DELETE, @OPTIONS, @HEAD, @PATCH - marks methods implementing the corresponding requests\n2) Added settings\n - @Path - set path of url for request. Combined class @Path annotation value and current method @Path. Path params passed with \":\". For example @Path('/someurl/:someParam')\n - @Headers - set headers for request (if annotate class, then all class methods getting this headers. method Headers merge with class Headers)\n - @Produces - setting expected response type. By default Reponse transformed by .json() method\n - @NoResponse (alias for @Produces(null)) - if expected empty response body, you need to set that annotation\n - @DefaultResponse (alias for @Produces(Response)) - response doesn`t transformed with .json() method. Returned pure Response object\n3) Parameters\n - @PathParam (or @Path) - pass current parameter by name to collected url. Example: someFunc(@PathParam('id') itemId: number) {}\n - @Body - pass body object into request. Ex.: someMethod(@Body bodyObject: any){}\n - @QueryParam - pass single query parameters into request. Ex.: someMethod(@QueryParam('a') a: any, @QueryParam('b') b: any) {}. someMethod(1, 2) -> ..requested_url..?a=1&b=2\n - @QueryParams - pass object with few query params. Ex.: someMethod(@QueryParams queryObj: any){}. someMethod({x: 1, y: 2, z: 3}) -> ..requested_url..?x=1&y=2&z=3","created":"2017-03-30T21:50:11.805Z","modified":"2017-06-07T10:46:08.952Z","lastPublisher":{"name":"mixalloff","email":"mikhail.mikhalev37@gmail.com"},"owners":[{"name":"mixalloff","email":"mikhail.mikhalev37@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"ngx-http-rest","_nodeVersion":"6.9.2","_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ngx-http-rest-0.1.2.tgz_1496832367926_0.9306231283117086"},"_npmUser":{"name":"mixalloff","email":"mikhail.mikhalev37@gmail.com"},"_npmVersion":"3.10.9","_rev":"12-cca7b686951554078c4b91c1faa6c2b2","_shasum":"c69431c6157babde739ba5c865bbed2676014990","author":{"name":"Mixalloff"},"bugs":{"url":"https://github.com/Mixalloff/ngx-http-rest/issues"},"directories":{},"dist-tags":{"latest":"0.1.2"},"dist":{"shasum":"c69431c6157babde739ba5c865bbed2676014990","tarball":"https://registry.npmjs.org/ngx-http-rest/-/ngx-http-rest-0.1.2.tgz"},"maintainers":[{"name":"mixalloff","email":"mikhail.mikhalev37@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2017-06-07T10:46:08.952Z","created":"2017-03-30T21:50:11.805Z","0.0.0":"2017-03-30T21:50:11.805Z","0.0.1":"2017-03-30T22:05:56.863Z","0.0.2":"2017-03-31T21:59:06.401Z","0.0.3":"2017-04-01T12:01:59.958Z","0.0.4":"2017-04-03T08:20:03.238Z","0.0.5":"2017-04-03T22:11:15.746Z","0.0.6":"2017-04-19T08:31:34.609Z","0.0.7":"2017-04-21T13:37:20.843Z","0.0.8":"2017-05-30T10:15:34.005Z","0.1.0":"2017-05-30T12:31:43.290Z","0.1.1":"2017-05-30T12:41:37.170Z","0.1.2":"2017-06-07T10:46:08.952Z"}}}